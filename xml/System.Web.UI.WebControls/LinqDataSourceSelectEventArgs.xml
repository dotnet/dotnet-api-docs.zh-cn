<Type Name="LinqDataSourceSelectEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb64505e90af8d0bceac7763866318f0004b691b" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89678937" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceSelectEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceSelectEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceSelectEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceSelectEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceSelectEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Selecting" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象将传递到控件事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> <xref:System.Web.UI.WebControls.LinqDataSource> 。 使用 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 对象手动指定返回的数据，以及在返回数据时对数据进行排序和分页的方式。 您可以使用 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters%2A> 、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A> 、、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A> 和 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A> 集合以编程方式将参数添加到 GroupBy、OrderBy、OrderGroupsBy、Select 和 Where 子句中。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性使您可以更改用于查询的数据对象。 如果将对象分配给属性，则会将 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 该对象用于查询，而不是在控件的属性中指定的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A>属性使您可以自定义如何对返回的数据进行排序和分页。 数据绑定控件通过属性传递排序和分页属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A> 。 如果必须手动处理排序或分页，请将控件的 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性或 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置 <xref:System.Web.UI.WebControls.LinqDataSource> 为 `false` 。 然后，您可以在事件处理程序中执行用于排序或分页的自定义查询 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。  
  
 如果将 <xref:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount%2A> 属性设置为 `true` ，则必须为属性返回值 <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> 。  
  
   
  
## Examples  
 下面的示例演示如何将属性设置 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 为使用语言集成查询 (LINQ) 进行搜索的结果。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default2.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/default2.aspx.vb#2)]  
  
 下面的示例演示如何将属性设置 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 为网页中定义的字符串值数组。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.LinqDataSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceSelectEventArgs (System.Web.UI.DataSourceSelectArguments arguments, System.Collections.Generic.IDictionary&lt;string,object&gt; whereParameters, System.Collections.Specialized.IOrderedDictionary orderByParameters, System.Collections.Generic.IDictionary&lt;string,object&gt; groupByParameters, System.Collections.Generic.IDictionary&lt;string,object&gt; orderGroupsByParameters, System.Collections.Generic.IDictionary&lt;string,object&gt; selectParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.DataSourceSelectArguments arguments, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; whereParameters, class System.Collections.Specialized.IOrderedDictionary orderByParameters, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; groupByParameters, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; orderGroupsByParameters, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; selectParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.#ctor(System.Web.UI.DataSourceSelectArguments,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Specialized.IOrderedDictionary,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (arguments As DataSourceSelectArguments, whereParameters As IDictionary(Of String, Object), orderByParameters As IOrderedDictionary, groupByParameters As IDictionary(Of String, Object), orderGroupsByParameters As IDictionary(Of String, Object), selectParameters As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceSelectEventArgs(System::Web::UI::DataSourceSelectArguments ^ arguments, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ whereParameters, System::Collections::Specialized::IOrderedDictionary ^ orderByParameters, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ groupByParameters, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ orderGroupsByParameters, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ selectParameters);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceSelectEventArgs : System.Web.UI.DataSourceSelectArguments * System.Collections.Generic.IDictionary&lt;string, obj&gt; * System.Collections.Specialized.IOrderedDictionary * System.Collections.Generic.IDictionary&lt;string, obj&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Web.UI.WebControls.LinqDataSourceSelectEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceSelectEventArgs (arguments, whereParameters, orderByParameters, groupByParameters, orderGroupsByParameters, selectParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
        <Parameter Name="whereParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="orderByParameters" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="groupByParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="orderGroupsByParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="selectParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">从数据绑定控件传递过来的值，用于确定数据的分页和排序方式。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments" /> 属性。</param>
        <param name="whereParameters">用于创建 Where 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters" /> 属性。</param>
        <param name="orderByParameters">用于创建 Order By 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters" /> 属性。</param>
        <param name="groupByParameters">用于创建 Group By 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters" /> 属性。</param>
        <param name="orderGroupsByParameters">参数的集合，用来创建用于对分组数据进行排序的子句。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters" /> 属性。</param>
        <param name="selectParameters">用于创建 Select 子句的参数集合。 有关更多信息，请参见 <see cref="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters" /> 属性。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataSourceSelectArguments Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.DataSourceSelectArguments Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As DataSourceSelectArguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataSourceSelectArguments ^ Arguments { System::Web::UI::DataSourceSelectArguments ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Web.UI.DataSourceSelectArguments" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于确定数据返回方式的值。</summary>
        <value>包含用于确定数据返回方式的值的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据绑定控件通过属性将属性传递给 <xref:System.Web.UI.WebControls.LinqDataSource> 控件， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A> 以便指定分页和排序的发生方式。 如果 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性或 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `true` ，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件会根据数据绑定控件中的属性自动对或页进行排序。  
  
 您可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 和 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `false` ，然后为事件创建处理程序，来自定义对数据进行排序和分页的方式 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。 在事件处理程序中，使用 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A> 属性从数据绑定控件中检索排序和分页属性。 然后根据属性中的属性根据需要自定义该查询 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Arguments%2A> 。 如果 <xref:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount%2A> 对象的属性 <xref:System.Web.UI.DataSourceSelectArguments> 设置为 `true` ，则必须为属性返回值 <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.DataSourceSelectArguments" />
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ GroupByParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 GroupBy 子句的参数集合。</summary>
        <value>包含 GroupBy 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters%2A> 处理程序中，可以使用属性来访问 GroupBy 子句的参数 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。 您可以通过在此集合中添加或移除参数来修改 GroupBy 子句。 默认情况下， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.GroupByParameters%2A> 对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 包含添加到控件的属性的所有参数 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As IOrderedDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::IOrderedDictionary ^ OrderByParameters { System::Collections::Specialized::IOrderedDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Collections.Specialized.IOrderedDictionary" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 OrderBy 子句的参数集合。</summary>
        <value>包含 OrderBy 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A> 处理程序中，可以使用属性来访问 OrderBy 子句的参数 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。 您可以通过在此集合中添加或移除参数来修改 OrderBy 子句。 默认情况下， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A> 对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 包含你添加到控件的中的所有参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
 当 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为时 `true` ， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A> 不需要将集合中的参数命名为。 数据将根据集合中的参数顺序进行排序 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderByParameters%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ OrderGroupsByParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数的集合，这些参数用于创建指定如何对分组数据进行排序的子句。</summary>
        <value>一个对象，其中包含指定如何对分组数据进行排序的子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置属性对数据进行分组时 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> ，可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性设置为用于对数据进行分组的属性之一，对分组的数据进行排序。  
  
 在事件的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters%2A> 处理程序中，可以使用属性来访问顺序组 by 子句的参数 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。 您可以通过在此集合中添加或移除参数来修改排序组 By 子句。  
  
 默认情况下， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.OrderGroupsByParameters%2A> 对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 包含以声明方式添加到控件的的所有参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在数据查询中使用的数据对象。</summary>
        <value>表示查询数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将其查询表达式应用于在属性中定义的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 。 在事件的处理程序中 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> ，可以通过将属性设置为对象，手动更改要查询的对象 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 。 例如，你可以使用 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性来查询网页中的内存中集合，或从 LINQ 查询表达式中获取结果。 可以将属性设置 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 为任意对象。 如果对象未实现 <xref:System.Collections.Generic.IEnumerable%601> 接口， <xref:System.Web.UI.WebControls.LinqDataSource> 控件会在实现接口的对象中包装对象 <xref:System.Collections.Generic.IEnumerable%601> 。  
  
 当 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性设置为以外的任何值时 `null` ，控件不 <xref:System.Web.UI.WebControls.LinqDataSource> 会查询属性中定义的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 。 相反，它会查询属性中的对象 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 。  
  
> [!NOTE]
>  将 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性设置为对象时，请勿使用 `null` 来表示不包含任何数据的对象。 <xref:System.Web.UI.WebControls.LinqDataSource>控件将解释 `null` 为，表示 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 未设置该属性，并且它将创建并查询属性中的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 。 若要表示不包含数据的对象，请将 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性设置为 <xref:System.Collections.IList> <xref:System.Collections.Generic.IList%601> 不包含任何元素的或对象。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> 当你以编程方式将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性设置为对象时，以及在应用另外两个条件时，不会引发、和事件。 条件是原始值不必存储在视图状态中，或者属性中的对象 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 实现 <xref:System.Data.Linq.ITable> 接口。  
  
   
  
## Examples  
 下面的示例演示如何将属性设置 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 为 LINQ 查询的结果。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default2.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/default2.aspx.vb#2)]  
  
 下面的示例演示如何将属性设置 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 为在网页中定义的字符串值数组。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ SelectParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Select 子句的参数集合。</summary>
        <value>包含 Select 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A> 处理程序中，可以使用属性来访问 Select 子句的参数 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。 您可以通过在此集合中添加或移除参数来修改 Select 子句。 默认情况下， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A> 对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 包含你添加到控件的中的所有参数 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
   
  
## Examples  
 下面的示例演示如何将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.SelectParameters%2A> 集合。 添加的参数用于根据产品是否打折来计算产品的调整价格。 该示例的第一部分演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default5.aspx#5)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default5.aspx#5)]  
  
 该示例的第二部分显示定义 Select 子句的标记。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default5.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default5.aspx#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ WhereParameters { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Where 子句的参数集合。</summary>
        <value>包含 Where 子句参数的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A> 处理程序中，可以使用属性来访问 Where 子句的参数 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。 您可以通过在此集合中添加或移除参数来修改 Where 子句。 默认情况下， <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A> 对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 包含你添加到控件的中的所有参数 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
 通过对象的集合添加参数时 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> ，必须在属性中包含参数的占位符， <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 或将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true` 。 例如，如果在事件的事件处理程序中添加一个名为的参数 `ProductName` <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> ，则必须将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 为 `true` 或将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 为 `ProductName=@ProductName` 。  
  
   
  
## Examples  
 下面的示例演示如何将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.WhereParameters%2A> 集合。 添加的参数会将返回的产品仅限制为属性中值为 "自行车" 的产品 `Name` 。 将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为， `true` 以便参数自动包含在 Where 子句中。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      </Docs>
    </Member>
  </Members>
</Type>
