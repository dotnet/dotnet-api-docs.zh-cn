<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e940508145d13b95d32449ef2b4a679fb2ac81ac" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86627002" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" /> 和 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>利用类，您可以检查由控件执行的数据操作的结果 <xref:System.Web.UI.WebControls.LinqDataSource> 。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象传递给控件的、、、和事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSource> 。  
  
 如果数据操作成功完成，则生成的数据对象存储在属性中 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> ， <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性为 `null` 。 如果数据操作失败，则在数据操作过程中发生的异常将存储在属性中， <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 而 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性为 `null` 。 如果处理了由属性表示的异常 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> ，则将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 属性设置为， `true` 以便不会引发异常。  
  
 您可以通过属性检索查询返回的数据记录总数 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 。  
  
   
  
## Examples  
 下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 。 在事件处理程序中，如果 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性为 `null` ，则从属性中的对象检索产品 ID <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 。 Product ID 是表的主键，由数据库进行设置，因此，在完成插入操作之前值是未知的。 如果该属性不等于，则记录异常消息 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null` 。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>然后将属性设置为 `true` 。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">在数据操作过程中发生的错误。</param>
        <summary>使用数据操作所引发的异常初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在数据操作过程中引发异常时，将使用此构造函数。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性自动设置为 `null` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">包含数据操作结果数据的对象。</param>
        <summary>使用包含数据操作结果数据的对象初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数在数据操作完成且未发生错误时使用。 `result`参数包含一个对象，该对象表示数据操作的结果。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性自动设置为 `null` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">包含数据操作结果数据的对象。</param>
        <param name="totalRowCount">数据检索操作返回的行数。</param>
        <summary>使用包含数据操作结果数据以及返回的行数的对象初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在数据操作过程中引发的异常。</summary>
        <value>如果出现错误，则为表示异常的 <see cref="T:System.Exception" /> 对象；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在数据操作过程中引发了异常，则该异常将存储在 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性中。 可以为、、、和事件创建事件处理程序， <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 并通过属性检索异常（如果有） <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 。  
  
   
  
## Examples  
 下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 。 在事件处理程序中，如果 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性为 `null` ，则从属性中的对象检索产品 ID <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 。 产品 ID 是表的主键，由数据库进行设置，因此在插入操作完成前，值是未知的。 如果该属性不等于，则记录异常消息 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null` 。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>然后将属性设置为 `true` 。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示异常是否已得到处理而不该再次引发。</summary>
        <value>如果异常已得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为、、、和事件创建事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> ， <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 以检查这些操作期间发生的任何异常。 如果处理异常，而不希望再次引发异常，则将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 属性设置为 `true` 。 如果未将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 属性设置为，则 `true` 异常将传播到调用堆栈中的下一个事件处理程序。  
  
   
  
## Examples  
 下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 。 在事件处理程序中，如果 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性为 `null` ，则从属性中的对象检索产品 ID <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 。 Product ID 是表的主键，由数据库进行设置，因此，在完成插入操作之前值是未知的。 如果该属性不等于，则记录异常消息 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null` 。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>然后将属性设置为 `true` 。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示数据操作结果的对象。</summary>
        <value>包含数据操作结果数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性来检查从数据操作返回的值。 可以从数据操作检索输出参数，或修改从查询返回的值。  
  
 存储在属性中的数据 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 取决于已执行的数据操作的类型。 删除数据时， <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性包含属性中指定的类型的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 以及从数据源中删除的原始值。 在插入或更新数据时， <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性包含在属性中指定的类型的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> ，其中包含已保存到数据源的新值。 选择数据时， <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性包含查询的结果。  
  
 如果选择查询涉及到分组数据或从属性中指定的类型中选择属性的子集 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> ，则属性将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 包含动态创建的类型的对象。 否则， <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性包含属性中指定的类型的对象 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 。  
  
   
  
## Examples  
 下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 。 在事件处理程序中，如果 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性为 `null` ，则从属性中的对象检索产品 ID <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 。 Product ID 是表的主键，由数据库进行设置，因此，在完成插入操作之前值是未知的。 如果该属性不等于，则记录异常消息 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> `null` 。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A>然后将属性设置为 `true` 。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据检索操作过程中在某个数据集中检索的总行数。</summary>
        <value>数据检索操作过程中在某个数据集中检索的总行数；如果 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 对象是在数据修改操作过程中创建的，则为 -1；如果通过将 <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> 设置为 <see langword="true" /> 并将 <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> 设置为 <see langword="false" /> 启用了自定义分页，则为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 数据检索操作过程中，可以使用属性来获取数据集中的记录数。 通常，在显示数据页时检索此属性，并希望显示记录总数。  
  
 数据分页时，属性中的值 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 可能与查询返回的实际行数不同。 这是因为查询只返回该数据页所需的行数。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A>仅当在事件的事件处理程序中对其进行访问时，此属性才包含查询中的记录数 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 。 当从、、或事件的事件处理程序访问该属性时 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSource.Updated> ，该属性将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 包含-1。  
  
 属性的值 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 取决于 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 控件的属性 <xref:System.Web.UI.WebControls.LinqDataSource> 和 `AllowPaging` 数据绑定控件的属性。 下表汇总了属性的可能值 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 。  
  
|LinqDataSource 控件的 "自动页" 属性|数据绑定控件的 AllowPaging 属性|TotalRowCount 属性|业务成效|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|查询的记录数。|数据自动分页。|  
|`false`|`false`|查询的记录数。|数据未分页。|  
|`true`|`false`|-1|数据未分页。|  
|`false`|`true`|分配给 <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> 事件的事件处理程序中的属性的值 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。|数据会根据自定义分页时指定的值分页。|  
  
   
  
## Examples  
 下面的示例演示包含 <xref:System.Web.UI.WebControls.LinqDataSource> 控件、 <xref:System.Web.UI.WebControls.GridView> 控件和控件的网页 <xref:System.Web.UI.WebControls.Literal> 。 <xref:System.Web.UI.WebControls.LinqDataSource>控件定义事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 下面的示例演示事件的事件处理程序的代码 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 。 将属性的值 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 分配给 <xref:System.Web.UI.WebControls.Literal> 控件。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
