<Type Name="SqlDataSourceView" FullName="System.Web.UI.WebControls.SqlDataSourceView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a2c3a1639d5332f0902b545ad5254b8994a8671" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102074765" /></Metadata><TypeSignature Language="C#" Value="public class SqlDataSourceView : System.Web.UI.DataSourceView, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSourceView extends System.Web.UI.DataSourceView implements class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSourceView" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSourceView&#xA;Inherits DataSourceView&#xA;Implements IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSourceView : System::Web::UI::DataSourceView, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type SqlDataSourceView = class&#xA;    inherit DataSourceView&#xA;    interface IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>支持 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件并为数据绑定控件提供一个接口，以便对关系数据库执行 SQL 数据操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类主要用于数据绑定控件，而不是页代码中的可编程对象。  
  
 ASP.NET 数据源控件包含一个或多个数据列表，由数据源视图对象表示。 <xref:System.Web.UI.WebControls.SqlDataSourceView>类扩展 <xref:System.Web.UI.DataSourceView> 类，定义与其关联的控件的功能 <xref:System.Web.UI.WebControls.SqlDataSource> ，并实现数据源控件的基本数据功能。 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现控件的数据功能 <xref:System.Web.UI.WebControls.SqlDataSource> ，包括 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 、 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 、 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 操作、排序、筛选和管理保存在视图状态中的设置。  
  
 尽管该 <xref:System.Web.UI.WebControls.SqlDataSourceView> 对象不是由控件直接向页面开发人员公开的 <xref:System.Web.UI.WebControls.SqlDataSource> ，但它的许多属性都是。 数据源视图执行的最基本操作是使用方法从基础数据库中检索数据 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> ，该方法将检索 <xref:System.Collections.IEnumerable> 数据项的集合。 <xref:System.Web.UI.WebControls.SqlDataSourceView>类使用 SQL 查询从关系数据库中实现数据检索。 可以对 SQL 查询进行参数化以提高灵活性和安全性。 以下数据检索方法、属性和事件由实现 <xref:System.Web.UI.WebControls.SqlDataSourceView> 并直接由其 <xref:System.Web.UI.WebControls.SqlDataSource> 控件向页面开发人员和其他调用方公开：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象支持使用 SQL 命令更新关系数据库中的数据。 可以参数化 SQL 命令以提高灵活性和安全性。 数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 和 <xref:System.Web.UI.WebControls.DetailsView> ）可以配置为使用自动执行更新 <xref:System.Web.UI.WebControls.SqlDataSourceView> ，而其他控件则不能。 以下更新方法、属性和事件由实现 <xref:System.Web.UI.WebControls.SqlDataSourceView> 并直接由其 <xref:System.Web.UI.WebControls.SqlDataSource> 控件向页面开发人员和其他调用方公开：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>支持向关系数据库中插入新的数据行。 可以参数化属性中指定的 SQL 命令， <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 以提高灵活性和安全性。 数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 和 <xref:System.Web.UI.WebControls.DetailsView> ）可以配置为使用自动执行插入 <xref:System.Web.UI.WebControls.SqlDataSourceView> ，而其他控件则不能。 以下插入方法、属性和事件由实现 <xref:System.Web.UI.WebControls.SqlDataSourceView> 并直接由其 <xref:System.Web.UI.WebControls.SqlDataSource> 控件向页面开发人员和其他调用方公开：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象还支持从关系数据库中删除数据。 与其他命令一样，可以将属性中指定的 SQL 命令 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 参数化，以提高灵活性和安全性。 数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 和 <xref:System.Web.UI.WebControls.DetailsView> ）可以配置为使用自动执行删除 <xref:System.Web.UI.WebControls.SqlDataSourceView> ，而其他控件则不能。 以下 delete 方法、属性和事件由实现 <xref:System.Web.UI.WebControls.SqlDataSourceView> 并直接由其 <xref:System.Web.UI.WebControls.SqlDataSource> 控件向页面开发人员和其他调用方公开：  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 属性  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件  
  
-   <xref:System.Web.UI.WebControls.SqlDataSource.Deleted>事件  
  
 当数据检索过程中用于筛选数据的子句为动态时，数据检索功能更强大。 换句话说，带有 static WHERE 子句的 SQL 查询并不像 SQL 查询那样灵活和强大，其中 WHERE 子句中的值绑定到可以更改的值，例如在 Web 窗体页上的控件中显示的值。 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>您可以使用 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 属性将动态筛选应用到数据检索，而不是在每次加载页面时重新生成 SQL 查询并设置属性。 这些属性由实现 <xref:System.Web.UI.WebControls.SqlDataSourceView> 并由其 <xref:System.Web.UI.WebControls.SqlDataSource> 控件直接向数据绑定控件和其他调用方公开。  
  
 您可以通过添加 ORDER BY 子句来对通过控件检索的数据进行排序 <xref:System.Web.UI.WebControls.SqlDataSource> ，这会导致数据库在检索数据时执行排序，或在检索数据后对内存中的数据进行排序。 <xref:System.Web.UI.WebControls.SqlDataSourceView>通过设置 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> <xref:System.Web.UI.DataSourceSelectArguments> 传递给方法的对象的属性，可以向提供排序表达式 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 。 属性的语法与 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 属性的语法相同 <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> 。 如果使用存储过程来检索数据，则还可以使用 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 属性指定一个参数，该参数专用于对存储过程调用的结果进行排序。  
  
 当多个用户可以同时更改数据库时，可能会发生并发冲突。 <xref:System.Web.UI.WebControls.SqlDataSource>控件通过属性控制并发 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection?displayProperty=nameWithType> 。 此功能是在属性中实现的 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection?displayProperty=nameWithType> 。  
  
 与许多其他 Web 服务器控件一样， <xref:System.Web.UI.WebControls.SqlDataSourceView> 还实现了 <xref:System.Web.UI.IStateManager> 接口，并使用视图状态来跟踪页面请求之间的状态。 <xref:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState%2A>提供和属性的实现，以及 <xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A> 、 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState%2A> 方法，以便为控件启用视图状态跟踪。 有关详细信息，请参阅 [ASP.NET 状态管理概述](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100))。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSourceView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSourceView (System.Web.UI.WebControls.SqlDataSource owner, string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.SqlDataSource owner, string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As SqlDataSource, name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSourceView(System::Web::UI::WebControls::SqlDataSource ^ owner, System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSourceView : System.Web.UI.WebControls.SqlDataSource * string * System.Web.HttpContext -&gt; System.Web.UI.WebControls.SqlDataSourceView" Usage="new System.Web.UI.WebControls.SqlDataSourceView (owner, name, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.SqlDataSource" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="owner">与 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 相关联的数据源控件。</param>
        <param name="name">数据源视图的唯一名称（在拥有它的数据源控件的范围内）。</param>
        <param name="context">当前的 <see cref="T:System.Web.HttpContext" />。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 类的新实例，该类将指定的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件设置为当前视图的所有者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.%23ctor%2A>构造函数由 <xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A> 方法调用，以返回具有指定参数的数据源视图的新实例 `name` 。 <xref:System.Web.UI.WebControls.SqlDataSource>控件 <xref:System.Web.UI.WebControls.SqlDataSourceView> 在任何一次只与一个对象相关联，并且始终将该视图命名为 `Table` ，尽管此命名限制由 <xref:System.Web.UI.WebControls.SqlDataSource> 控件（而不是）施加 <xref:System.Web.UI.WebControls.SqlDataSourceView> 。 可以重写 <xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A> 方法，以支持具有不同命名约定的视图。  
  
 <xref:System.Web.HttpContext> `context` 数据源视图使用参数传递的对象来访问参数对象，如 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelSelectOnNullParameter : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中包含的任何一个参数为 <see langword="null" /> 时，是否取消数据检索操作。</summary>
        <value>如果当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中包含的某个参数计算为 <see langword="true" /> 时取消数据检索操作，则为 <see langword="null" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> 存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      </Docs>
    </Member>
    <Member MemberName="CanDelete">
      <MemberSignature Language="C#" Value="public override bool CanDelete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanDelete { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanDelete : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanDelete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持删除操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete%2A>如果设置了属性，则属性将返回 `true` <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 。 如果所有数据属性未设置或设置不正确，则删除操作可能仍会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanInsert">
      <MemberSignature Language="C#" Value="public override bool CanInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanInsert { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanInsert : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持插入操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert%2A>如果设置了属性，则属性将返回 `true` <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 。 如果所有数据属性未设置或设置不正确，则插入操作可能仍会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CanPage">
      <MemberSignature Language="C#" Value="public override bool CanPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanPage { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanPage : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持将检索的数据分页。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象不支持分页。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.StartRowIndex" />
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.MaximumRows" />
      </Docs>
    </Member>
    <Member MemberName="CanRetrieveTotalRowCount">
      <MemberSignature Language="C#" Value="public override bool CanRetrieveTotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRetrieveTotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRetrieveTotalRowCount As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRetrieveTotalRowCount { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRetrieveTotalRowCount : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象除了支持检索数据集外，是否还支持检索数据行总数。</summary>
        <value>在所有情况下均为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>对象不支持检索行计数。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="CanSort">
      <MemberSignature Language="C#" Value="public override bool CanSort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSort { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSort : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持检索的数据的排序视图。</summary>
        <value>如果支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanSort%2A> `true` 如果将当前 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 属性设置为 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 值并且设置了属性，则属性返回 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceSelectArguments.SortExpression" />
      </Docs>
    </Member>
    <Member MemberName="CanUpdate">
      <MemberSignature Language="C#" Value="public override bool CanUpdate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanUpdate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUpdate : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 对象是否支持更新操作。</summary>
        <value>如果支持该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate%2A>如果设置了属性，则属性将返回 `true` <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 。 如果所有数据属性未设置或设置不正确，则删除操作可能仍会失败。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置值，该值指示操作期间基础数据库中的一行数据更改时，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控件如何执行更新和删除。</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 值之一。 默认为 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性确定是否将旧值和新值的参数应用于 `Update` 方法。 例如，如果属性指定的命令 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 返回一个 <xref:System.Data.DataSet> 具有列和的对象 `Name` `Number` ，并且 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 值，则会为 `Name` 更新操作创建和的参数 `Number` 。 如果 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 将属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值，则会为、、和创建参数 `Name` `Number` `original_Name` `original_Number` 。  (原始值的参数确切名称是否依赖于 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 。 ) 然后， <xref:System.Web.UI.WebControls.SqlDataSourceView> 对象确定属性中指定的方法是否 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 具有匹配的参数。  
  
 并发控制是一种技术数据存储，用于控制当多个客户端访问和处理相同数据时，如何在存储中读取和更改数据。 例如，一个客户端读取数据并向用户显示数据，而另一个客户端读取相同的数据，并将其呈现给其他用户。 如果这两个用户更新数据并将其提交到数据存储，则可能会发生一些意外的结果，因为这两个客户端可能会为同一数据更新不同的值。 这被视为冲突。 通过将 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值，更新操作可以将旧值和新值与原始数据源进行比较，以检测冲突并根据需要对其进行处理。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.ConflictOptions" /> 值之一。</exception>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/dz12d98w(v=vs.100)">SqlDataSource Web 服务器控件概述</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><see cref="T:System.Collections.IDictionary" /> 操作要删除的对象或行键值的 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />。</param>
        <param name="oldValues">一个 <see cref="T:System.Collections.IDictionary" />，包含仅当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值时才计算的行值。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> 集合中指定的任何参数，以及指定的 <paramref name="keys" /> 和 <paramref name="oldValues" /> 集合中的值执行删除操作。</summary>
        <returns>一个值，该值表示从基础数据库中删除的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>方法调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A> 方法，传递 `keys` 和 `oldValues` 参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。  
  
- 或 - 
<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值但未传递 <paramref name="oldValues" /> 参数。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用于从基础数据库中删除数据的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 删除数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。  
  
 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序是 <xref:System.Data.SqlClient?displayProperty=nameWithType> ，它是类的默认提供程序，则 <xref:System.Web.UI.WebControls.SqlDataSource> 参数的占位符为 `'@parameterName'` 。 但是，如果提供程序设置为  <xref:System.Data.Odbc?displayProperty=nameWithType> 或，则 <xref:System.Data.OleDb?displayProperty=nameWithType> 参数的占位符为 `'?'` 。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>如果基础数据库支持存储过程，则可以是 SQL 字符串或存储过程的名称。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 存储在视图状态中。  
  
   
  
## Examples  
 下面的代码示例演示如何设置 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 文本以从 Northwind 数据库 Orders 表中删除订单。 将从 Orders 表中检索数据，并在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> 。 <xref:System.Web.UI.WebControls.GridView>当属性设置为时，将自动呈现 "**删除**" 按钮，并在 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> `true` <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 单击 "**删除**" 按钮时自动填充该集合并调用方法。 最后，由于此示例删除数据，因此添加了一个事件处理程序，以便在执行删除操作之前尝试将数据库备份到磁盘。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> 存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成删除操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted>完成删除操作后，处理事件以检查输出参数的值。 输出参数适用于 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 与事件关联的对象。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 属性包含参数化 sql 查询，则 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 集合包含与 <xref:System.Web.UI.WebControls.Parameter> SQL 字符串中的参数占位符对应的任何对象。  
  
 参数名称可能会受到属性的影响 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> ; 具体而言，如果名称标识主键（如使用数据绑定控件的属性指定的密钥）， `DataKeyNames` 或在将属性设置为该值的 delete 和 update 方案中，并将 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> <xref:System.Web.UI.ConflictOptions.CompareAllValues> 一组 `oldValues` 传递给相应的数据方法。 在这种情况下，格式字符串将应用于集合中的每个参数名称 `oldValues` 。  
  
 根据 ADO.NET 提供程序，集合中参数的顺序 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和 <xref:System.Data.Odbc?displayProperty=nameWithType> 提供程序根据参数在参数化 SQL 查询中出现的顺序来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序是控件的默认 ADO.NET 提供程序，它 <xref:System.Web.UI.WebControls.SqlDataSource> 通过将参数名称与 SQL 查询中的占位符匹配来关联集合中的参数。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
   
  
## Examples  
 下面的代码示例演示如何设置 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 文本以删除 Northwind 数据库中的订单。 最初，从 Orders 表中检索数据，并在控件中显示数据 <xref:System.Web.UI.WebControls.DropDownList> 。 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>使用数据绑定控件（如 (不同于控件）时，必须显式声明属性并调用方法，如 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> <xref:System.Web.UI.WebControls.DropDownList> <xref:System.Web.UI.WebControls.GridView> 和 <xref:System.Web.UI.WebControls.DetailsView> ，后者会自动填充参数并 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>) 数据源控件上调用方法。 在此示例中，将 <xref:System.Web.UI.WebControls.Button.OnClick%2A> 事件委托给专用 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 事件处理程序，该处理程序显式调用 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 控件的方法 <xref:System.Web.UI.WebControls.SqlDataSource> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行删除操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting> 事件以执行其他特定于应用程序的初始化操作，验证参数的值，或者在 <xref:System.Web.UI.WebControls.SqlDataSource> 控件执行删除操作之前更改参数值。  
  
 在调用事件处理程序委托时，与基础数据源的连接尚未打开。 因此，您不能 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 直接通过 <xref:System.Data.Common.DbCommand.Cancel%2A> 对对象公开的对象调用方法来取消操作 <xref:System.Data.Common.DbCommand> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 。 但是，可以通过将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 的属性设置为来取消该操作 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> `true` 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何处理 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 发生删除操作前引发的事件。 由于此示例删除 Northwind 数据库中的数据，因此 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 添加了一个处理程序，以便在执行删除操作之前尝试将数据库备份到磁盘。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteDelete">
      <MemberSignature Language="C#" Value="protected override int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteDelete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDelete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteDelete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.ExecuteDelete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.ExecuteDelete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><see cref="T:System.Collections.IDictionary" /> 操作要删除的对象或行键值的 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />。</param>
        <param name="oldValues">一个 <see cref="T:System.Collections.IDictionary" />，包含仅当 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值时才计算的行值。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" /> 集合中指定的任何参数，以及指定的 <paramref name="keys" /> 和 <paramref name="oldValues" /> 集合中的值执行删除操作。</summary>
        <returns>一个值，该值表示从基础数据库中删除的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 方法以从数据库中删除数据。 页面开发人员和数据绑定控件作者不会直接调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A> 方法; 而是使用公开的 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 方法。  
  
 计算集合中包含的值 `keys` 并将其与集合中包含的任何值合并 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 。 如果将 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 属性设置为值，则会将 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 集合中包含的值设置为 `oldValues` 属性的格式 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> ，并且还将合并这些值。  
  
 在执行删除操作之前，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting> 事件。 可以处理此事件以检查参数的值，并在删除之前执行任何预处理。  
  
 若要执行删除操作， <xref:System.Web.UI.WebControls.SqlDataSourceView> 对象将 <xref:System.Data.Common.DbCommand> 使用 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 文本和任何关联的属性生成对象 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> ，然后 <xref:System.Data.Common.DbCommand> 对基础数据库执行对象。 删除操作完成后， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted> 事件。 可以处理此事件以检查任何返回值和错误代码，并执行任何后续处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。  
  
- 或 - 
<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值但未传递 <paramref name="oldValues" /> 参数。</exception>
        <exception cref="T:System.Web.HttpException">当前用户没有访问数据库的正确权限。  
  
- 或 - 
控件的实例是 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> 控件，而且对指定的 <see cref="P:System.Web.UI.WebControls.AccessDataSource.DataFile" /> 属性路径的访问被拒绝。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanDelete" /> 属性为 <see langword="false" />。  
  
- 或 - 
使用 <see cref="T:System.Web.UI.WebControls.AccessDataSource" /> 控件的实例前，设计器没有正确映射设计时相对路径。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteInsert">
      <MemberSignature Language="C#" Value="protected override int ExecuteInsert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteInsert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteInsert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteInsert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="override this.ExecuteInsert : System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.ExecuteInsert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行插入数据库操作的值的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> 集合中指定的所有参数，以及指定的 <paramref name="values" /> 集合中的值执行插入操作。</summary>
        <returns>一个值，该值表示插入到基础数据库中的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 方法，以将数据插入到数据库中。 页面开发人员和数据绑定控件作者不会直接调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A> 方法; 而是使用公开的 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 方法。  
  
 在执行插入操作之前，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting> 事件。 可以处理此事件以检查参数的值，并在插入之前执行任何预处理。  
  
 若要执行插入操作， <xref:System.Web.UI.WebControls.SqlDataSourceView> 对象将 <xref:System.Data.Common.DbCommand> 使用 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 文本和任何关联的属性生成对象 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> ，然后 <xref:System.Data.Common.DbCommand> 对基础数据库执行对象。 完成插入后， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted> 事件。 可以处理此事件以检查任何返回值和错误代码，并执行任何后续处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <exception cref="T:System.Web.HttpException">当前用户不具有访问数据库的正确权限。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteSelect">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Collections.IEnumerable ExecuteSelect(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ExecuteSelect (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Collections::IEnumerable ^ ExecuteSelect(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="override this.ExecuteSelect : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSourceView.ExecuteSelect arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">用于请求对数据执行基本数据检索操作以外的操作的 <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 对象。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 字符串以及 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中的所有参数从基础数据库中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 方法以从数据库中检索数据。 页面开发人员和数据绑定控件作者不会直接调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 方法; 而是使用公开的 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 方法。  
  
 在执行数据检索之前，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting> 事件。 你可以处理此事件以检查参数的值，并在检索数据之前执行任何预处理。  
  
 若要执行此操作， <xref:System.Web.UI.WebControls.SqlDataSourceView> 对象将 <xref:System.Data.Common.DbCommand> 使用 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 文本和任何关联的来生成对象 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> ，并对基础数据库执行此操作。 操作完成后， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSource.Selected> 事件。 您可以处理此事件以检查任何返回值、错误代码以及执行任何后续处理。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>如果将设置为，则方法将返回 <xref:System.Data.DataView> 对象; <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> <xref:System.Data.IDataReader> 如果设置为，则返回对象 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 。 <xref:System.Data.IDataReader>读取完数据后，关闭对象。  
  
 如果将 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 设置为 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 并启用了缓存，则会在 <xref:System.Web.UI.WebControls.SqlDataSourceView> 数据操作期间从中检索数据并将数据保存到缓存中。 根据和属性的组合指定的缓存行为，创建、放弃或刷新缓存 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 。  
  
> [!IMPORTANT]
>  使用 "Windows 身份验证" 下的客户端模拟时，将在第一个用户访问数据时缓存数据。 如果其他用户请求相同的数据，则从缓存中检索数据。 通过对数据库进行另一次调用以验证用户对数据的访问权限，不会检索数据。 如果希望多个用户访问数据，并且您希望数据库的每次检索都由数据库的安全配置进行验证，则不要使用缓存。  
  
 如果将 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 设置为， <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 并且指定了，则将 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 与提供的进行计算， <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 并在数据检索操作过程中将生成的筛选器应用于数据列表。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">传递给 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 方法的 <paramref name="arguments" /> 指定数据源在检索数据时应执行一些附加操作，以便对检索到的数据启用分页或排序，但此数据源控件不支持请求的功能。  
  
- 或 - 
启用了缓存，但没有将数据源的 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> 属性设置为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" />。  
  
- 或 - 
设置了 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" /> 属性，但是没有将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandType" /> 设置为 <see cref="F:System.Data.CommandType.StoredProcedure" />。</exception>
        <exception cref="T:System.InvalidOperationException">数据源无法建立数据库连接。  
  
- 或 -
  
 启用了缓存，但内部缓存和命令类型不匹配。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteUpdate">
      <MemberSignature Language="C#" Value="protected override int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteUpdate(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteUpdate (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteUpdate(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.ExecuteUpdate : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.ExecuteUpdate (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的主键的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的键，或如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="values">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的值的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="oldValues"><see cref="T:System.Collections.IDictionary" />，表示数据库中的原始值。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> 集合中的所有参数，以及指定的 <paramref name="keys" />、<paramref name="values" /> 和 <paramref name="oldValues" /> 集合中的值执行更新操作。</summary>
        <returns>一个值，该值表示基础数据库中被更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 方法以更新数据库中的数据。 页面开发人员和数据绑定控件作者不会直接调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 方法; 而是使用公开的 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 方法。  
  
 计算和集合中包含的值 `keys` `values` ，并将其与集合中包含的任何值合并 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 。 如果将 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 属性设置为  <xref:System.Web.UI.ConflictOptions.CompareAllValues> ，则会将集合中包含的值设置为， `oldValues` <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 并合并。  
  
 在执行更新操作之前，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updating> 事件。 你可以处理此事件以检查参数的值，并在更新之前执行任何预处理。  
  
 若要执行该操作，请 <xref:System.Web.UI.WebControls.SqlDataSourceView> <xref:System.Data.Common.DbCommand> 使用 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 文本和任何关联的属性生成对象 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> ，然后 <xref:System.Data.Common.DbCommand> 对基础数据库执行对象。 操作完成后， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 调用方法来引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updated> 事件。 可以处理此事件以检查任何返回值和错误代码，并执行任何后续处理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。  
  
- 或 - 
<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" /> 属性设置为 <see cref="F:System.Web.UI.ConflictOptions.CompareAllValues" /> 值但未传递 <paramref name="oldValues" /> 参数。</exception>
        <exception cref="T:System.Web.HttpException">当前用户不具有访问数据库的正确权限。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置调用 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" /> 方法时应用的筛选表达式。</summary>
        <value>表示使用 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法检索数据时应用的筛选表达式的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用于属性的语法 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 是格式字符串样式的语法。 可以在属性中包含参数 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 。 如果参数的类型为 "字符串" 或 "字符"，则将参数用单引号引起来。 如果参数是数值类型，则不需要引号。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>集合包含为属性中的占位符计算的参数 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>只有在模式下，控件才支持筛选数据 `DataSet` 。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 存储在视图状态中。  
  
> [!IMPORTANT]
>  应该验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换为筛选表达式，并将其应用于 <xref:System.Data.DataView> 方法返回的对象 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 。 如果使用 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性作为安全措施来限制返回的项目数，则必须在进行筛选之前验证参数值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用和属性从 Northwind 数据库中检索数据并对其进行筛选 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.SqlDataSource> 只要 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 执行方法来检索数据，就会应用控件的属性。 在此示例中， <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 属性包含一个筛选器参数的占位符，该参数包含在 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 集合中。 在此示例中，filter 参数是一个 <xref:System.Web.UI.WebControls.ControlParameter> 对象，该对象绑定到 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> 控件的属性 <xref:System.Web.UI.WebControls.DropDownList> 。 由于 <xref:System.Web.UI.WebControls.DropDownList> 控件 <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> 将其属性设置为，因此所 `true` 选内容中的任何更改 <xref:System.Web.UI.WebControls.DropDownList> 都会导致页面向服务器发送内容，并将 <xref:System.Web.UI.WebControls.GridView> 控件重新绑定到带有新筛选器的数据源控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 处于 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 模式中时设置了 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> 属性。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行筛选操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering> 事件，以便在 <xref:System.Web.UI.WebControls.SqlDataSourceView> 对象执行筛选器操作之前对筛选器参数值执行验证操作。 可以 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 通过将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 对象的属性设置为来取消方法 <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> `true` 。 仅当设置了属性时才引发事件 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 。  
  
> [!IMPORTANT]
>  应该验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换为筛选表达式，并将其应用于 <xref:System.Data.DataView> 方法返回的对象 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 。 如果使用 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性作为安全措施来限制返回的项目数，则必须在进行筛选之前验证参数值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 字符串中的任何参数占位符关联的参数的集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含与在 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" /> 属性中找到的任何参数占位符相关联的一组参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合中的参数 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> 与属性中指定的任何参数相关联 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 。 调用方法时，将按顺序计算在中指定的参数占位符，并将其 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 匹配到集合中的参数对象 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 。  
  
> [!IMPORTANT]
>  应该验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换为筛选表达式，并将其应用于 <xref:System.Data.DataView> 方法返回的对象 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 。 如果使用 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性作为安全措施来限制返回的项目数，则必须在进行筛选之前验证参数值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用和属性从 Northwind 数据库中检索数据并对其进行筛选 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.SqlDataSource> 只要 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 执行方法来检索数据，就会应用控件的属性。 在此示例中， <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 属性包含一个筛选器参数的占位符，该参数包含在 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 集合中。 此外，筛选器参数是一个 <xref:System.Web.UI.WebControls.ControlParameter> 对象，该对象绑定到 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> 控件的属性 <xref:System.Web.UI.WebControls.DropDownList> 。 由于 <xref:System.Web.UI.WebControls.DropDownList> 控件 <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> 将其属性设置为，因此，所 `true` 选内容中的任何更改都将 <xref:System.Web.UI.WebControls.DropDownList> 导致该页将信息发布回服务器，并将 <xref:System.Web.UI.WebControls.GridView> 控件重新绑定到具有新筛选器的数据源控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="override this.Insert : System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values"><see cref="T:System.Collections.IDictionary" /> 属性用来执行插入数据库操作的参数的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" /> 集合中指定的所有参数，以及指定的 <paramref name="values" /> 集合中的值执行插入操作。</summary>
        <returns>一个值，该值表示插入到基础数据库中的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>方法调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A> 方法，传递 `values` 参数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanInsert" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用来将数据插入到基础数据库中的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 插入数据所用的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序是 <xref:System.Data.SqlClient?displayProperty=nameWithType> ，它是类的默认提供程序，则 <xref:System.Web.UI.WebControls.SqlDataSource> 参数的占位符为 `'@parameterName'` 。 但是，如果提供程序设置为 <xref:System.Data.Odbc?displayProperty=nameWithType> 或，则 <xref:System.Data.OleDb?displayProperty=nameWithType> 参数的占位符为 `'?'` 。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>如果数据源支持存储过程，则属性可以是 SQL 字符串或存储过程的名称。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 存储在视图状态中。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用控件将数据插入到数据库中 <xref:System.Web.UI.WebControls.SqlDataSource> 。 第二个代码示例演示如何从 Microsoft SQL Server 中检索数据，在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> ，并使用 <xref:System.Web.UI.WebControls.DetailsView> 控件以窗体形式查看所选行的详细信息，并将其 <xref:System.Web.UI.WebControls.GridView> 作为插入新记录的窗体。  
  
 下面的代码示例演示如何使用控件将数据插入到数据库中 <xref:System.Web.UI.WebControls.SqlDataSource> 。 表中的当前数据显示在 <xref:System.Web.UI.WebControls.DropDownList> 控件中。 您可以通过在控件中输入值，然后 <xref:System.Web.UI.WebControls.TextBox> 单击 " **插入** " 按钮来添加新记录。 单击 " **插入** " 按钮时，会将指定的值插入到数据库中，并 <xref:System.Web.UI.WebControls.DropDownList> 刷新。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 下面的代码示例演示如何从 SQL Server 检索数据，在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> ，并使用 <xref:System.Web.UI.WebControls.DetailsView> 控件以窗体的形式查看所选行的详细信息，并将其 <xref:System.Web.UI.WebControls.GridView> 作为插入新记录的窗体。  
  
 最初，数据显示在 <xref:System.Web.UI.WebControls.GridView> 控件中，所选行 <xref:System.Web.UI.WebControls.GridView> 还显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件中。 <xref:System.Web.UI.WebControls.GridView>和 <xref:System.Web.UI.WebControls.DetailsView> 控件使用不同的数据源控件; 与关联的控件 <xref:System.Web.UI.WebControls.DetailsView> 具有 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 属性，这确保显示了的选定行 <xref:System.Web.UI.WebControls.GridView> 。  
  
 如果单击控件的自动生成的 **插入** 按钮 <xref:System.Web.UI.WebControls.DetailsView> ，则 <xref:System.Web.UI.WebControls.DetailsView> 会显示一个不同的用户界面，用于插入新记录。 该示例使用存储过程插入记录，并返回插入行的主键。 如果插入记录，将 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 使用绑定列中的值自动填充集合，并调用 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 方法。 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.BoundField> <xref:System.Web.UI.WebControls.TemplateField> 当使用 ASP.NET 双向数据绑定语法时，可以从任何对象推断正确的参数，并从对象中推断出参数。 在此示例中，会在事件处理程序中添加一个附加参数， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 用于处理存储过程返回的主键。  
  
 最后，在将数据插入 <xref:System.Web.UI.WebControls.DetailsView> 到数据库后，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用事件处理程序来处理 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 事件，插入行的主键的值将显示，并 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView> 显式调用控件的方法来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 值为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> 存储在视图状态中。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 检索数据，在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> ，并使用 <xref:System.Web.UI.WebControls.DetailsView> 控件以窗体的形式查看所选行的详细信息，并将其 <xref:System.Web.UI.WebControls.GridView> 作为插入新记录的窗体。  
  
 <xref:System.Web.UI.WebControls.GridView>控件显示一组数据， <xref:System.Web.UI.WebControls.DetailsView> 控件显示特定行的详细信息。 如果单击控件的自动生成的 **插入** 按钮 <xref:System.Web.UI.WebControls.DetailsView> ，则 <xref:System.Web.UI.WebControls.DetailsView> 会显示一个不同的用户界面，用于插入新记录。 该示例使用存储过程插入记录，并返回插入行的主键。 存储过程名称设置在 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> 属性中，并通过将属性设置为值将其标识为存储过程 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 。  
  
 最后，在将数据插入 <xref:System.Web.UI.WebControls.DetailsView> 到数据库后，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用事件处理程序来处理 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 事件，插入行的主键的值将显示，并 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView> 显式调用控件的方法来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成插入操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted> 事件，以便在插入操作完成后检查输出参数的值。 输出参数适用于 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 与事件关联的对象。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 检索数据并在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> 。 该示例还使用 <xref:System.Web.UI.WebControls.DetailsView> 控件显示中所选行的详细信息 <xref:System.Web.UI.WebControls.GridView> ，并使用窗体来插入新记录。  
  
 最初，数据显示在 <xref:System.Web.UI.WebControls.GridView> 控件中，所选行 <xref:System.Web.UI.WebControls.GridView> 还显示在中 <xref:System.Web.UI.WebControls.DetailsView> 。 <xref:System.Web.UI.WebControls.GridView>和 <xref:System.Web.UI.WebControls.DetailsView> 控件使用不同的数据源控件; 与关联的控件 <xref:System.Web.UI.WebControls.DetailsView> 具有 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 属性，这确保显示了的选定行 <xref:System.Web.UI.WebControls.GridView> 。  
  
 如果单击控件的自动生成的 **插入** 按钮 <xref:System.Web.UI.WebControls.DetailsView> ，则 <xref:System.Web.UI.WebControls.DetailsView> 会显示一个用于插入新记录的不同用户界面。 该示例使用存储过程插入记录，并返回插入行的主键。 如果插入记录，将 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 使用绑定列中的值自动填充集合，并调用 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 方法。 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.BoundField> <xref:System.Web.UI.WebControls.TemplateField> 当使用 ASP.NET 双向数据绑定语法时，可以从任何对象推断正确的参数，并从对象中推断出参数。 在此示例中，会在事件处理程序中添加一个附加参数， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 用于处理存储过程返回的主键。  
  
 最后，在将数据插入 <xref:System.Web.UI.WebControls.DetailsView> 到数据库后，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用事件处理程序来处理 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 事件，插入行的主键的值将显示，并 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView> 显式调用控件的方法来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行插入操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting> 事件以执行其他特定于应用程序的初始化操作，验证参数的值，或者在 <xref:System.Web.UI.WebControls.SqlDataSource> 控件执行插入操作之前更改参数值。  
  
 在调用事件处理程序委托时，与基础数据源的连接尚未打开。 因此，您不能通过 <xref:System.Data.Common.DbCommand.Cancel%2A> 对对象公开的对象调用方法，直接取消数据库操作 <xref:System.Data.Common.DbCommand> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 。 但是，可以通过将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 的属性设置为来取消数据库操作 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> `true` 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 中检索数据，并在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> 。 该示例还使用 <xref:System.Web.UI.WebControls.DetailsView> 控件显示中所选行的详细信息 <xref:System.Web.UI.WebControls.GridView> ，并使用窗体来插入新记录。  
  
 最初，数据显示在 <xref:System.Web.UI.WebControls.GridView> 控件中，所选行 <xref:System.Web.UI.WebControls.GridView> 还显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件中。 <xref:System.Web.UI.WebControls.GridView>和 <xref:System.Web.UI.WebControls.DetailsView> 控件使用不同的数据源控件; 与关联的控件 <xref:System.Web.UI.WebControls.DetailsView> 具有 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 属性，这确保显示了的选定行 <xref:System.Web.UI.WebControls.GridView> 。  
  
 如果单击控件的自动生成的 **插入** 按钮 <xref:System.Web.UI.WebControls.DetailsView> ，则 <xref:System.Web.UI.WebControls.DetailsView> 会显示一个不同的用户界面，用于插入新记录。 该示例使用存储过程插入记录，并返回插入行的主键。 如果插入记录，将 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 使用绑定列中的值自动填充集合，并调用 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 方法。 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.BoundField> <xref:System.Web.UI.WebControls.TemplateField> 当使用 ASP.NET 双向数据绑定语法时，可以从任何对象推断正确的参数，并为对象提供一个参数。 在此示例中，会在事件处理程序中添加一个附加参数， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 用于处理存储过程返回的主键。  
  
 最后，在将数据插入 <xref:System.Web.UI.WebControls.DetailsView> 到数据库后，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用事件处理程序来处理 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 事件，插入行的主键的值将显示，并 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView> 显式调用控件的方法来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 属性包含参数化 sql 查询，则 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> 集合包含与 <xref:System.Web.UI.WebControls.Parameter> SQL 字符串中的参数占位符对应的任何对象。  
  
 根据 ADO.NET 提供程序，集合中参数的顺序 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> 可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和 <xref:System.Data.Odbc?displayProperty=nameWithType> 提供程序根据参数在参数化 SQL 查询中的显示顺序来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序是控件的默认 ADO.NET 提供程序，它 <xref:System.Web.UI.WebControls.SqlDataSource> 通过在 SQL 查询中将参数的名称与占位符别名进行匹配来关联集合中的参数。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.SqlDataSource> 控件和简单的 Web 窗体页将数据插入到数据库中。 表中的当前数据显示在 <xref:System.Web.UI.WebControls.DropDownList> 控件中。 您可以通过在控件中输入值，然后 <xref:System.Web.UI.WebControls.TextBox> 单击 " **插入** " 按钮来添加新记录。 单击 " **插入** " 按钮时，会将指定的值插入到数据库中，并 <xref:System.Web.UI.WebControls.DropDownList> 刷新。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand" />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTrackingViewState : bool" Usage="System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象是否保存对其视图状态的更改。</summary>
        <value>如果数据源视图被标记为保存其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="abstract member LoadViewState : obj -&gt; unit&#xA;override this.LoadViewState : obj -&gt; unit" Usage="sqlDataSourceView.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">表示要还原的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 状态的对象。</param>
        <summary>还原数据源视图的以前保存的视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法主要由 .NET Framework 基础结构使用，不应在代码中直接使用。  不过，控件开发人员可以重写此方法，以指定自定义服务器控件如何还原其视图状态。 有关详细信息，请参阅 [ASP.NET 状态管理概述](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>方法 <xref:System.Web.UI.WebControls.SqlDataSourceView> 从方法保存的上一个页请求还原对象的视图状态信息 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("{0}")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("{0}")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个格式字符串，该字符串应用于传递给 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> 或 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> 方法的所有参数的名称。</summary>
        <value>一个表示格式的字符串，该格式字符串应用于传递给 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Delete" /> 或 <see cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" /> 方法的所有 <paramref name="oldValues" /> 参数的名称。 默认值为“{0}”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>格式字符串仅应用于主键，如 `DataKeyNames` 数据绑定控件的属性标识的、删除和更新方案中的 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 属性设置为值的， <xref:System.Web.UI.ConflictOptions.CompareAllValues> 以及将一组 `oldValues` 传递给相应数据方法的。 在这种情况下，格式字符串将应用于集合中的每个参数名称 `oldValues` 。 有关详细信息，请参阅 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString?displayProperty=nameWithType>。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeleted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnDeleted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleted" /> 控件完成删除操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeleting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeleting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeleting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit&#xA;override this.OnDeleting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit" Usage="sqlDataSourceView.OnDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Deleting" /> 控件尝试删除操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何处理 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 事件，该事件在操作发生前引发 <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 。 由于此示例删除 Northwind 数据库中的数据，因此 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 添加了一个处理程序，以便在执行删除操作之前尝试将数据库备份到磁盘。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnFiltering">
      <MemberSignature Language="C#" Value="protected virtual void OnFiltering (System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFiltering(class System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFiltering (e As SqlDataSourceFilteringEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFiltering(System::Web::UI::WebControls::SqlDataSourceFilteringEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFiltering : System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs -&gt; unit&#xA;override this.OnFiltering : System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs -&gt; unit" Usage="sqlDataSourceView.OnFiltering e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Filtering" /> 控件筛选选择操作结果前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnInserted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserted(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserted (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserted(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInserted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnInserted : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnInserted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserted" /> 控件完成插入操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 检索数据，在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> ，并使用 <xref:System.Web.UI.WebControls.DetailsView> 控件以窗体的形式查看所选行的详细信息，并将其 <xref:System.Web.UI.WebControls.GridView> 作为插入新记录的窗体。  
  
 最初，数据显示在 <xref:System.Web.UI.WebControls.GridView> 控件中，所选行 <xref:System.Web.UI.WebControls.GridView> 还显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件中。 <xref:System.Web.UI.WebControls.GridView>和 <xref:System.Web.UI.WebControls.DetailsView> 控件使用不同的数据源控件; 与关联的控件 <xref:System.Web.UI.WebControls.DetailsView> 具有 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 属性，这确保显示了的选定行 <xref:System.Web.UI.WebControls.GridView> 。  
  
 如果单击控件的自动生成的 **插入** 按钮 <xref:System.Web.UI.WebControls.DetailsView> ，则 <xref:System.Web.UI.WebControls.DetailsView> 会显示一个不同的用户界面，用于插入新记录。 该示例使用存储过程插入记录，并返回插入行的主键。 如果插入记录，将 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 使用绑定列中的值自动填充集合，并调用 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 方法。 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.BoundField> <xref:System.Web.UI.WebControls.TemplateField> 当使用 ASP.NET 双向数据绑定语法时，可以从任何对象推断正确的参数，并从对象中推断出参数。 在此示例中，会在事件处理程序中添加一个附加参数， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 用于处理存储过程返回的主键。  
  
 最后，在将数据插入 <xref:System.Web.UI.WebControls.DetailsView> 到数据库后，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用事件处理程序来处理 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 事件，插入行的主键的值将显示，并 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView> 显式调用控件的方法来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnInserting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInserting(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInserting (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInserting(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInserting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit&#xA;override this.OnInserting : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit" Usage="sqlDataSourceView.OnInserting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Inserting" /> 控件尝试插入操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何从 Microsoft SQL Server 检索数据，在控件中显示数据 <xref:System.Web.UI.WebControls.GridView> ，并使用 <xref:System.Web.UI.WebControls.DetailsView> 控件以窗体的形式查看所选行的详细信息，并将其 <xref:System.Web.UI.WebControls.GridView> 作为插入新记录的窗体。  
  
 最初，数据显示在 <xref:System.Web.UI.WebControls.GridView> 控件中，所选行 <xref:System.Web.UI.WebControls.GridView> 还显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件中。 <xref:System.Web.UI.WebControls.GridView>和 <xref:System.Web.UI.WebControls.DetailsView> 控件使用不同的数据源控件; 与关联的控件 <xref:System.Web.UI.WebControls.DetailsView> 具有 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 属性，这确保显示了的选定行 <xref:System.Web.UI.WebControls.GridView> 。  
  
 如果单击控件的自动生成的 **插入** 按钮 <xref:System.Web.UI.WebControls.DetailsView> ，则 <xref:System.Web.UI.WebControls.DetailsView> 会显示一个不同的用户界面，用于插入新记录。 该示例使用存储过程插入记录，并返回插入行的主键。 如果插入记录，将 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 使用绑定列中的值自动填充集合，并调用 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 方法。 <xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.BoundField> <xref:System.Web.UI.WebControls.TemplateField> 当使用 ASP.NET 双向数据绑定语法时，可以从任何对象推断正确的参数，并从对象中推断出参数。 在此示例中，会在事件处理程序中添加一个附加参数， <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 用于处理存储过程返回的主键。  
  
 最后，在将数据插入 <xref:System.Web.UI.WebControls.DetailsView> 到数据库后，将 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 调用事件处理程序来处理 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 事件，插入行的主键的值将显示，并 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> <xref:System.Web.UI.WebControls.GridView> 显式调用控件的方法来刷新数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelected">
      <MemberSignature Language="C#" Value="protected virtual void OnSelected (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelected(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelected (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelected(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelected : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnSelected : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnSelected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" /> 控件完成数据检索操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelecting">
      <MemberSignature Language="C#" Value="protected virtual void OnSelecting (System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelecting(class System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelecting (e As SqlDataSourceSelectingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelecting(System::Web::UI::WebControls::SqlDataSourceSelectingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs -&gt; unit&#xA;override this.OnSelecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs -&gt; unit" Usage="sqlDataSourceView.OnSelecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" /> 控件尝试数据检索操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdated (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdated(class System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdated (e As SqlDataSourceStatusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdated(System::Web::UI::WebControls::SqlDataSourceStatusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUpdated : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit&#xA;override this.OnUpdated : System.Web.UI.WebControls.SqlDataSourceStatusEventArgs -&gt; unit" Usage="sqlDataSourceView.OnUpdated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" /> 控件完成更新操作后引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何在控件中显示和更新从 ODBC 数据库检索的数据 <xref:System.Web.UI.WebControls.GridView> 。 成功更新记录后，事件 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> 处理程序会处理事件，以执行在其中发送电子邮件通知的后处理步骤。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 派生类中重写方法时，请确保调用 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdating (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdating(class System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdating (e As SqlDataSourceCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdating(System::Web::UI::WebControls::SqlDataSourceCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUpdating : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit&#xA;override this.OnUpdating : System.Web.UI.WebControls.SqlDataSourceCommandEventArgs -&gt; unit" Usage="sqlDataSourceView.OnUpdating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" /> 控件尝试更新操作前引发 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何显示从控件中的 Microsoft SQL Server 数据库检索的数据 <xref:System.Web.UI.WebControls.DropDownList> ，以及如何使用控件更新记录 <xref:System.Web.UI.WebControls.TextBox> 。 该示例演示如何在 <xref:System.Data.Common.DbTransaction> 使用控件更新数据时使用对象添加事务上下文 <xref:System.Web.UI.WebControls.SqlDataSource> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 在派生类中重写时，请确保为 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" /> 基类调用方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParameterPrefix">
      <MemberSignature Language="C#" Value="protected virtual string ParameterPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ParameterPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ ParameterPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterPrefix : string" Usage="System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用作参数化 SQL 查询中的参数占位符前缀的字符串。</summary>
        <value>“@”字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL 查询和命令可以参数化，因为它们包含在运行时绑定到查询的值的占位符。 根据为控件设置的 ADO.NET 提供程序 <xref:System.Web.UI.WebControls.SqlDataSource> （由属性标识） <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> ，将按别名或按其在对象中的排序来计算参数 <xref:System.Web.UI.WebControls.ParameterCollection> 。  
  
 如果 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 未设置或设置为，则将 <xref:System.Data.SqlClient?displayProperty=nameWithType> 按别名计算参数，并 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 使用属性将参数前缀添加到中 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 每个对象的属性（ <xref:System.Web.UI.WebControls.Parameter> 在 <xref:System.Web.UI.WebControls.ParameterCollection> 数据检索或数据操作操作过程中）。 如果将 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性设置为 <xref:System.Data.OleDb?displayProperty=nameWithType> 或 <xref:System.Data.Odbc?displayProperty=nameWithType> ，则按顺序计算参数，并 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> <xref:System.Web.UI.WebControls.Parameter.Name%2A> 忽略和属性。  
  
 如果扩展了 <xref:System.Web.UI.WebControls.SqlDataSourceView> 类，则可以重写 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 属性以提供除字符串以外的其他前缀 `"@"` （如果需要）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseUnsupportedCapabilityError">
      <MemberSignature Language="C#" Value="protected internal override void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RaiseUnsupportedCapabilityError(valuetype System.Web.UI.DataSourceCapabilities capability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RaiseUnsupportedCapabilityError (capability As DataSourceCapabilities)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RaiseUnsupportedCapabilityError(System::Web::UI::DataSourceCapabilities capability);" />
      <MemberSignature Language="F#" Value="override this.RaiseUnsupportedCapabilityError : System.Web.UI.DataSourceCapabilities -&gt; unit" Usage="sqlDataSourceView.RaiseUnsupportedCapabilityError capability" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="System.Web.UI.DataSourceCapabilities" />
      </Parameters>
      <Docs>
        <param name="capability">与视图支持的功能进行比较的 <see cref="T:System.Web.UI.DataSourceCapabilities" /> 值之一。</param>
        <summary>对照视图支持的功能比较为 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> 操作请求的功能，由 <see cref="M:System.Web.UI.DataSourceSelectArguments.RaiseUnsupportedCapabilitiesError(System.Web.UI.DataSourceView)" /> 方法调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError%2A>数据源视图使用方法来检查数据绑定控件所请求的每个功能，这些功能由 <xref:System.Web.UI.DataSourceSelectArguments> 传递给方法的对象表示， <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 并将这些功能与数据源视图所支持的功能进行比较。 对于由对象表示的 <xref:System.Web.UI.DataSourceSelectArguments> 且不受数据源视图支持的功能，将 <xref:System.NotSupportedException> 引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">数据源没有启用所选 <paramref name="capability" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanSort" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanPage" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="abstract member SaveViewState : unit -&gt; obj&#xA;override this.SaveViewState : unit -&gt; obj" Usage="sqlDataSourceView.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存自页回发到服务器后 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控件的视图状态更改。</summary>
        <returns>包含 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 视图状态更改的对象，如果不存在与对象关联的视图状态，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 方法主要由控件开发人员使用。  
  
 视图状态是服务器控件属性值的累计。 这些值自动置于 <xref:System.Web.UI.Control.ViewState%2A> 服务器控件的属性中，该属性是类的实例 <xref:System.Web.UI.StateBag> 。 <xref:System.Web.UI.Control.ViewState%2A>服务器控件的值随后将保存到服务器控件生命周期的保存状态阶段之后的字符串对象。  
  
 保存视图状态后，在服务器控件生命周期的保存状态阶段后保存的字符串对象将作为存储在 HTML 元素中的变量返回给客户端 `Hidden` 。 创作自定义服务器控件时，可以通过重写 <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> 方法并修改服务器控件的属性来提高效率 `ViewState` 。 有关详细信息，请参阅 [ASP.NET 状态管理概述](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100))。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="override this.Select : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSourceView.Select arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments"><see cref="T:System.Web.UI.DataSourceSelectArguments" />，用于请求对数据执行基本数据检索操作以外的操作。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> SQL 字符串以及 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" /> 集合中的所有参数从基础数据库中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 方法，传递 `selectArgs` 参数。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>如果将属性设置为值，则方法返回一个 <xref:System.Data.DataView> 对象，如果将 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> <xref:System.Data.IDataReader> <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 属性设置为值，则返回对象 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 。 <xref:System.Data.IDataReader>读取完数据后，关闭对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">传递给 <see cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法的 <paramref name="selectArgs" /> 指定数据源在检索数据时应执行一些附加操作，以便对检索到的数据启用分页或排序，但此数据源控件不支持请求的功能。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用来从基础数据库检索数据的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 用来检索数据的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序是 <xref:System.Data.SqlClient?displayProperty=nameWithType> ，它是类的默认提供程序，则 <xref:System.Web.UI.WebControls.SqlDataSource> 参数的占位符为 `'@parameterName'` 。 但是，如果提供程序设置为 <xref:System.Data.Odbc?displayProperty=nameWithType> 或，则 <xref:System.Data.OleDb?displayProperty=nameWithType> 参数的占位符为 `'?'` 。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>如果数据源支持存储过程，则属性可以是 SQL 字符串或存储过程的名称。  
  
> [!IMPORTANT]
>  使用存储过程比对属性使用 SQL 语句更安全 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 存储在视图状态中。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何将文本设置 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 为基本的 SQL 查询，以从 Microsoft SQL Server 数据库中检索数据并在控件中显示数据 <xref:System.Web.UI.WebControls.DropDownList> 。 第二个代码示例演示如何将 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 文本设置为要从 SQL Server 数据库中检索数据的存储过程的名称，并将其显示在中 <xref:System.Web.UI.WebControls.DropDownList> 。  
  
 下面的代码示例演示如何将文本设置 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 为基本的 SQL 查询，以从 SQL Server 数据库中检索数据并在控件中显示数据 <xref:System.Web.UI.WebControls.DropDownList> 。 <xref:System.Web.UI.WebControls.Button>和 <xref:System.Web.UI.WebControls.TextBox> 控件作为一个简单界面提供，用于更新中选定用户的地址 <xref:System.Web.UI.WebControls.DropDownList> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 下面的代码示例演示如何将文本设置 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 为从 SQL Server 数据库中检索数据的存储过程的名称，并在控件中显示数据 <xref:System.Web.UI.WebControls.DropDownList> 。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>如果数据源支持存储过程，则该属性可以是 SQL 查询或存储过程的名称。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 属性中的文本是 SQL 查询还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> 存储在视图状态中。  
  
   
  
## Examples  
 下面的代码示例演示如何将文本设置 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 为存储过程的名称，并将属性设置 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> 为值， <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 以便从 Microsoft SQL Server 数据库中检索数据并将其显示在中 <xref:System.Web.UI.WebControls.DropDownList> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数据检索操作完成后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Selected> 事件，以在数据检索操作完成后检查输出参数的值。 输出参数适用于 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 与事件关联的对象。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行数据检索操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting> 事件以执行其他特定于应用程序的初始化操作，验证参数的值，或者在 <xref:System.Web.UI.WebControls.SqlDataSource> 控件执行数据检索操作之前更改参数值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Select" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 属性包含参数化 sql 查询，则 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> 集合包含与 <xref:System.Web.UI.WebControls.Parameter> SQL 字符串中的参数占位符对应的任何对象。  
  
 根据 ADO.NET 提供程序，集合中参数的顺序 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> 可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和 <xref:System.Data.Odbc?displayProperty=nameWithType> 提供程序根据参数在参数化 SQL 查询中的显示顺序来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序是控件的默认 ADO.NET 提供程序，它 <xref:System.Web.UI.WebControls.SqlDataSource> 通过在 SQL 查询中将参数的名称与占位符别名进行匹配来关联集合中的参数。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
   
  
## Examples  
 下面的代码示例演示如何通过将 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 属性设置为 SQL 查询，在 Microsoft SQL Server 中检索 Northwind 数据库中的数据。 SQL 查询已参数化，并且属性中的占位符与 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> <xref:System.Web.UI.WebControls.ControlParameter> 添加到集合中的对象匹配 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 。 这样， <xref:System.Web.UI.WebControls.DropDownList> 绑定到的控件将 <xref:System.Web.UI.WebControls.ControlParameter> 充当控件中显示的内容的筛选器 <xref:System.Web.UI.WebControls.ListBox> 。  
  
> [!NOTE]
>  由于参数在 WHERE 子句中使用，因此在 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 此代码示例中使用属性的功能等效于使用 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 和 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置存储过程参数的名称，在使用存储过程执行数据检索时，该存储过程参数用于对检索到的数据进行排序。</summary>
        <value>在使用存储过程执行数据检索时用于排序检索数据的存储过程参数的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>仅当属性包含的 SQL 命令 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 是存储过程的名称时，才计算属性。 在这种情况下，如果 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 设置了属性，它将包含用于对存储过程的结果进行排序的参数的名称。  
  
 如果设置了属性，则会将  <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> 其预置到 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 属性上。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IStateManager::IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.IStateManager.IsTrackingViewState : bool" Usage="System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />。</summary>
        <value>如果数据源视图被标记为保存其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.SqlDataSourceView> 实例被强制转换为接口时使用 <xref:System.Web.UI.IStateManager> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (savedState As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ savedState) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IStateManager.LoadViewState : obj -&gt; unit&#xA;override this.System.Web.UI.IStateManager.LoadViewState : obj -&gt; unit" Usage="sqlDataSourceView.System.Web.UI.IStateManager.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">表示要还原的 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 状态的对象。</param>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IStateManager.LoadViewState(System.Object)" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.SqlDataSourceView> 实例被强制转换为接口时使用 <xref:System.Web.UI.IStateManager> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IStateManager.SaveViewState : unit -&gt; obj&#xA;override this.System.Web.UI.IStateManager.SaveViewState : unit -&gt; obj" Usage="sqlDataSourceView.System.Web.UI.IStateManager.SaveViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IStateManager.SaveViewState" />。</summary>
        <returns>包含 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 视图状态更改的对象，如果不存在与对象关联的视图状态，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.SqlDataSourceView> 实例被强制转换为接口时使用 <xref:System.Web.UI.IStateManager> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IStateManager.TrackViewState : unit -&gt; unit&#xA;override this.System.Web.UI.IStateManager.TrackViewState : unit -&gt; unit" Usage="sqlDataSourceView.System.Web.UI.IStateManager.TrackViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IStateManager.TrackViewState" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.SqlDataSourceView> 实例被强制转换为接口时使用 <xref:System.Web.UI.IStateManager> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TrackViewState();" />
      <MemberSignature Language="F#" Value="abstract member TrackViewState : unit -&gt; unit&#xA;override this.TrackViewState : unit -&gt; unit" Usage="sqlDataSourceView.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象跟踪其视图状态的更改，以便这些更改可以存储在控件的 <see cref="T:System.Web.UI.StateBag" /> 对象中并且能够在同一页的不同请求间保持。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="sqlDataSourceView.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的主键的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的关键字，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="values">与 <see cref="T:System.Collections.IDictionary" /> 属性一起使用以执行更新数据库操作的值的 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <param name="oldValues"><see cref="T:System.Collections.IDictionary" />，表示数据库中的原始值。 如果不存在与查询关联的参数，或者如果 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 不是参数化 SQL 查询，则传递 <see langword="null" />。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> SQL 字符串、<see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" /> 集合中的所有参数，以及指定的 <paramref name="keys" />、<paramref name="values" /> 和 <paramref name="oldValues" /> 集合中的值执行更新操作。</summary>
        <returns>一个值，该值表示基础数据库中被更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>方法调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 方法，传递 `keys` 、 `values` 和 `oldValues` 参数。 有关详细信息，请参阅 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.SqlDataSource> 控件在控件中显示数据 <xref:System.Web.UI.WebControls.DropDownList> ，并在单击 " **提交** " 按钮时更新数据。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>使用参数化 SQL 语句设置属性，并将两个 <xref:System.Web.UI.WebControls.ControlParameter> 参数添加到 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 集合中。 单击 " **提交** " 按钮时，将 <xref:System.Web.UI.WebControls.Button.OnClick%2A> 处理该事件以显式调用 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 无法与基础数据源建立连接。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate" /> 属性为 <see langword="false" />。</exception>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 对象用来更新基础数据库中的数据的 SQL 字符串。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 用来更新数据的 SQL 字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前正在使用的 ADO.NET 提供程序，该提供程序由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 属性标识。 如果 SQL 字符串是一个参数化查询或命令，则参数的占位符还取决于所使用的 ADO.NET 提供程序。 例如，如果提供程序是 <xref:System.Data.SqlClient?displayProperty=nameWithType> ，它是类的默认提供程序，则 <xref:System.Web.UI.WebControls.SqlDataSource> 参数的占位符为 `'@parameterName'` 。 但是，如果提供程序设置为 <xref:System.Data.Odbc?displayProperty=nameWithType> 或，则 <xref:System.Data.OleDb?displayProperty=nameWithType> 参数的占位符为 `'?'` 。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>如果数据源支持存储过程，则属性可以是 SQL 字符串或存储过程的名称。  
  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 存储在视图状态中。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 使用控件设置控件的属性 <xref:System.Web.UI.WebControls.SqlDataSource> 和更新 Microsoft SQL Server 数据库中的数据 <xref:System.Web.UI.WebControls.GridView> 。 第二个代码示例演示如何使用控件更新 ODBC 数据库中的数据 <xref:System.Web.UI.WebControls.GridView> 。  
  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 使用控件设置控件的属性 <xref:System.Web.UI.WebControls.SqlDataSource> 和更新 SQL Server 数据库中的数据 <xref:System.Web.UI.WebControls.GridView> 。 <xref:System.Web.UI.WebControls.GridView>控件会自动填充 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 集合，从对象推断参数 <xref:System.Web.UI.WebControls.BoundField> ，并在 <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 选择可编辑控件上的 **更新** 链接时调用方法 <xref:System.Web.UI.WebControls.GridView> 。 此示例还包括一些后期处理-更新记录后，将发送电子邮件通知。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 下面的代码示例在功能上与前面的代码示例相同，演示了如何使用控件更新 ODBC 数据库中的数据 <xref:System.Web.UI.WebControls.GridView> 。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性设置为 odbc 的 ADO.NET 提供程序， <xref:System.Data.Odbc?displayProperty=nameWithType> 并且 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> 属性设置为 odbc 数据源名称 (DSN) 的名称。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性中的文本是 SQL 语句还是存储过程的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。 默认为 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> 存储在视图状态中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值不是 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成更新操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updated> 事件，以便在更新操作完成后检查输出参数的值。 输出参数适用于 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 与事件关联的对象。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何显示和更新从控件中的 ODBC 数据库检索的数据 <xref:System.Web.UI.WebControls.GridView> 。 成功更新记录后，事件 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> 处理程序会处理事件，以执行在其中发送电子邮件通知的后处理步骤。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含 <see cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" /> 属性所使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 属性包含参数化 sql 查询，则 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 集合包含 <xref:System.Web.UI.WebControls.Parameter> 与 SQL 字符串中的参数占位符对应的任何对象。  
  
 参数名称可能会受到属性的影响 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> ; 具体而言，如果名称标识主键（如使用属性指定的密钥）， `DataKeyNames` 或在属性设置为该值的 delete 和 update 方案中 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> <xref:System.Web.UI.ConflictOptions.CompareAllValues> ，并将一组 `oldValues` 传递给相应的数据方法。 在这种情况下，格式字符串将应用于集合中的每个参数名称 `oldValues` 。  
  
 根据 ADO.NET 提供程序，集合中参数的顺序 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和 <xref:System.Data.Odbc?displayProperty=nameWithType> 提供程序根据参数在参数化 SQL 查询中的显示顺序来关联集合中的参数。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供程序是控件的默认 ADO.NET 提供程序，它 <xref:System.Web.UI.WebControls.SqlDataSource> 通过在 SQL 查询中将参数的名称与占位符别名进行匹配来关联集合中的参数。 有关参数化 SQL 查询和命令的详细信息，请参阅 [将参数与 SqlDataSource 控件一起使用](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100))。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.SqlDataSource> 控件在控件中显示数据 <xref:System.Web.UI.WebControls.DropDownList> ，并在单击 " **提交** " 按钮时更新数据。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>使用参数化 SQL 语句设置属性，并将两个 <xref:System.Web.UI.WebControls.ControlParameter> 参数添加到集合中 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> 。 单击 " **提交** " 按钮时，将 <xref:System.Web.UI.WebControls.Button.OnClick%2A> 处理该事件以显式调用 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSourceView.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行更新操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.SqlDataSourceView.Updating> 事件以执行其他特定于应用程序的初始化操作，验证参数的值，或者在 <xref:System.Web.UI.WebControls.SqlDataSource> 控件执行更新操作之前更改参数值。  
  
 在调用事件处理程序委托时，与基础数据源的连接尚未打开。 因此，您不能直接通过 <xref:System.Data.Common.DbCommand.Cancel%2A> 对对象公开的对象调用方法来取消操作 <xref:System.Data.Common.DbCommand> <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> 。 但是，可以通过将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 的属性设置为来取消数据库操作 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> `true` 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何显示从控件中的 Microsoft SQL Server 数据库检索的数据 <xref:System.Web.UI.WebControls.DropDownList> ，以及如何使用控件更新记录 <xref:System.Web.UI.WebControls.TextBox> 。 该示例演示如何在 <xref:System.Data.Common.DbTransaction> 使用控件更新数据时使用对象添加事务上下文 <xref:System.Web.UI.WebControls.SqlDataSource> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSourceView.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.SqlDataSourceView.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>
