<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbfc003fac6123276aeca8c0368520ce23724d4d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83962878" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允许通过标记文本在 ASP.NET 网页中使用语言集成查询 (LINQ) 来检索和修改数据对象中的数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [操作顺序](#order_of_operations)  
  
-   [数据排序](#ordering_data)  
  
-   [数据分组](#grouping_data)  
  
-   [数据修改](#data_modifications)  
  
-   [在运行时计算值](#evaluating_value_at_run_time)  
  
-   [使用存储过程](#working_with_stored_procedures)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 语言集成查询（LINQ）是一种查询语法，它可定义一组查询运算符，使遍历、筛选和投影操作能够以声明性方式在任何中表示。基于网络的编程语言。 数据对象可以是内存中的数据集合或表示来自数据库的数据的对象。 您可以检索或修改数据，而不必为每个操作都编写 SQL 命令。  
  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，可以通过在标记文本中设置属性来在 ASP.NET 网页中使用 LINQ。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 自动生成数据命令。 有关 LINQ to SQL 的详细信息，请参阅[LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)。  
  
 从内存中数据集合中检索数据时，可以将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为包含数据集合的类。 将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为返回数据集合的属性或字段。 例如，你可能有一个名为 `Person` 的类，该类包含一个名为 `FavoriteCities` 的属性，该属性将返回字符串值的数组。 在这种情况下，请将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为 `Person` 并将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为 `FavoriteCities`。  
  
 查询数据库时，必须首先创建表示该数据库及其表的实体类。 您可以使用 [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] 或 SqlMetal 实用程序来生成这些类。 然后，将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为表示数据库的类，并将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示数据库表的属性。  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>操作顺序  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件按以下顺序应用数据操作：  
  
1.  Where （指定要返回的数据记录）。  
  
2.  排序依据（排序）。  
  
3.  分组依据（对共享值的数据记录进行聚合）。  
  
4.  排序依据（排序分组数据）。  
  
5.  选择（指定要返回的字段或属性）。  
  
6.  自动排序（按用户选择的属性对数据记录进行排序）。  
  
7.  自动页面（检索用户选择的一小部分数据记录）。  
  
 您可以向 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性添加条件以筛选从查询返回的数据记录。 如果未设置 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将从数据对象中检索每个记录。  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>数据排序  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性可以指定返回的数据的属性名称，以便进行排序。  
  
> [!NOTE]
>  如果将 <xref:System.Web.UI.WebControls.LinqDataSource> 控件与 [!INCLUDE[ss2k](~/includes/ss2k-md.md)] 或 [!INCLUDE[ssEW](~/includes/ssew-md.md)] 一起使用，并且 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为 `true`，则必须在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性中提供一个值。 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性为 `true`。 如果为 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性分配一个值，则还必须在查询中返回的属性列表中包含所有标识列。  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>对数据分组  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性可以指定哪些属性用于合并具有相同值的数据记录。 在对数据进行分组时，可以在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中包含 `Key` 和 `It`，它们是动态创建的属性。 `Key` 属性指的是用于对数据进行分组的属性中的值。 例如，如果按名为 `Category`的属性分组，则 `Key` 属性将包含 `Category` 属性中的所有唯一值。 `It` 属性指的是数据分组中的单个记录的集合。 您可以循环访问 `It` 属性，以便检索在分组操作中合并的各个记录。 例如，如果按名为 `Category`的属性分组，则 `It` 属性将包含在 `Category` 属性中共享公共值的所有单个记录。  
  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性可指定用于对分组数据进行排序的属性。 当对数据进行分组时，<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性指定如何对分组数据中的单个记录进行排序。  
  
 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将从数据对象中检索所有属性的值。 如果要使用可用属性的子集，则可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性指定要返回的属性。 选择操作应用于 Where、Order By 和 Group By 操作之后。 因此，如果在 Select 子句中创建了别名，则该别名在其他子句中不可用。  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>数据修改  
 您可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>和 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 属性指定是否启用了数据修改。 用于从 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中修改数据的用户界面通常是通过数据绑定控件（如 <xref:System.Web.UI.WebControls.DetailsView> 控件）提供的。 除了将 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>或 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 设置为 `true`以外，还需要满足以下条件才能启用自动数据修改：  
  
-   不能为 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性赋予值。  
  
-   不能为 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性赋予值。  
  
-   分配给 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性的类必须从 <xref:System.Data.Linq.DataContext>派生。  
  
-   分配给 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性的属性必须从 <xref:System.Data.Linq.Table%601>派生。  
  
 可以通过两种方式限制在数据绑定控件中显示哪些属性。 可以将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为部分属性，也可以通过添加 <xref:System.Web.UI.WebControls.DataControlField> 控件来定义数据绑定控件的字段。 但是，如果设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性，则表示不能启用自动更新、插入和删除操作。 如果要在使用可用属性的子集时启用自动数据修改，请不要设置 "<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>" 属性。 相反，从数据对象检索所有属性，并使用数据绑定控件来管理要显示的属性。 当使用 <xref:System.Web.UI.WebControls.DetailsView> 控件或 <xref:System.Web.UI.WebControls.GridView> 控件时，还必须将 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 或 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 属性设置为 `false`。 这会阻止数据绑定控件自动包含用于编辑和删除数据的按钮。 数据绑定控件中未显示的任何值都存储在视图状态中。 当执行数据更新时，它们将以不更改的形式传递到数据源。  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>在运行时计算值  
 如果需要在运行时评估值以便对值进行排序、筛选或分组，则可以将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>或 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合。  
  
 如果要指定默认值，可将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 集合。  
  
 如果要在执行数据操作之前检查或修改值，您可以处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>或 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件。 您还可以处理这些事件，以便取消数据操作，或检查在基于用户输入设置数据类中的属性时发生的验证错误。  
  
 若要在数据操作完成后检查值，请处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>或 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 事件。  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>使用存储过程  
 通过为 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件创建事件处理程序，使用 <xref:System.Web.UI.WebControls.LinqDataSource> 控件从存储过程中检索数据。 在事件处理程序中，您可以在表示存储过程的数据上下文类中调用方法，并将结果设置为 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 对象的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。 如果要对数据启用自动更新、插入和删除操作，则从方法返回的类型必须与 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性中指定的类型相匹配。 有关创建数据上下文方法的详细信息，请参阅[如何：创建映射到存储过程和函数的 DataContext 方法（O/R 设计器）](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a)。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件从名为 `Products`的实体类中检索数据。 实体类可能是通过使用 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] 或 SqlMetal 实用工具生成的。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性设置为仅返回在 `Price` 属性中具有大于50的值的记录。 <xref:System.Web.UI.WebControls.GridView> 控件绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件以显示数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件允许用户在数据源中更新、删除和插入记录。 <xref:System.Web.UI.WebControls.DetailsView> 控件绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，并使用户能够查看和修改数据。 请注意，不需要 SQL 命令即可选择、更新、删除或插入记录。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件的事件处理程序，该事件根据网页中的值设置数据对象。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 下面的示例演示一个配置为按两列进行分组的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 `Key` 属性引用具有两个属性的对象 `ProductCategory` 和 `Color`。 `It` 所表示的对象已重命名（化名为） `Products`。 重命名 `Products` 对象包含分组中各个记录的集合。 每个实例都包含 `Products` 表中的所有列。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 下面的示例演示两个 <xref:System.Web.UI.WebControls.ListView> 控件，这些控件在上一个示例中显示 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中的数据。 一个 <xref:System.Web.UI.WebControls.ListView> 控件显示分组数据，另一个 <xref:System.Web.UI.WebControls.ListView> 控件显示属于该组的产品的各个名称。 嵌套的数据绑定控件的 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 属性设置为 `Products`，这是 `It` 对象的别名。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否根据 <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> 集合中的值动态创建 Order By 子句。</summary>
        <value><see langword="true" /> 如果 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件创建 Order By 子句，则为; 否则为。否则，<see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件会动态创建基于 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中的值的 Order By 子句。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件按第一个参数对数据进行排序，并另外对每个附加参数的数据进行排序。 Order By 子句中不包含包含 `null` 或空值的参数。  
  
 如果将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 设置为 `true`，则不设置 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性，因为分析器会动态创建 Order By 子句。 如果 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 设置为 `true` 并为 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性赋值，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。  
  
   
  
## Examples  
 下面的示例演示将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 设置为 `true`的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 参数包含在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中，该集合根据用户从 <xref:System.Web.UI.WebControls.DropDownList> 控件中选择的属性名称对数据进行排序。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否基于 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 集合中定义的值来动态创建 Where 子句。</summary>
        <value>如果 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件将创建 Where 子句，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true`时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将从 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中的参数动态创建 Where 子句。 添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中的每个参数都必须将其 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 属性设置为与正在查询的数据对象中的属性匹配的值。 自动生成的 Where 子句将检查 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中指定的值是否等于数据对象中的匹配属性的值。 如果提供多个参数，则这些参数将与逻辑 `AND` 操作链接。 Where 子句中不包含包含 `null` 或空值的参数。  
  
 自动生成的 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 子句只能测试相等性，只能通过 `AND` 操作来链接参数。 如果必须添加不测试相等性的条件，或者必须将参数与 `OR` 操作相关联，请不要将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true`。 可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为 `false` 并在 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中的每个参数的 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中添加占位符，来完成这些任务。 在 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中，每个占位符名称前面加上 @ 符号。  
  
 如果 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性 `true`，则不设置 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性，因为分析器会动态创建 Where 子句。 如果 `true` <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性，并为 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性赋值，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。  
  
   
  
## Examples  
 下面的示例演示将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 设置为 `true`的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 <xref:System.Web.UI.WebControls.GridView> 控件绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，以显示从查询返回的数据。 其中包含了包含三个值的 <xref:System.Web.UI.WebControls.DropDownList> 控件。 参数包含在 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中，其名称设置为与数据对象的属性之一匹配的 `Category,`。 其 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 属性设置为 <xref:System.Web.UI.WebControls.DropDownList> 控件的 ID。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件会自动创建 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性，以根据用户从 <xref:System.Web.UI.WebControls.DropDownList> 控件中选择的值来筛选记录。 查询返回的记录的 `Category` 属性与用户从 <xref:System.Web.UI.WebControls.DropDownList> 控件中选择的值匹配。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否支持在运行时在数据的各部分之间导航。</summary>
        <value>如果用户可以对数据进行分页，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为 `true` 以便在 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中启用分页。 若要使用户能够对数据进行分页，请连接一个数据绑定控件，该控件提供用于分页到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件的接口。 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为 `true`时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件在数据绑定控件中只检索一页中的记录。 它使用 <xref:System.Linq.Enumerable.Skip%2A> 和 <xref:System.Linq.Enumerable.Take%2A> 方法检索当前页的记录。  
  
   
  
## Examples  
 下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件的 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为 `true`，并显示一个绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件的 <xref:System.Web.UI.WebControls.GridView> 控件。 <xref:System.Web.UI.WebControls.GridView> 控件的 <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> 属性设置为 `true`，以提供允许用户逐页浏览数据的接口。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否支持在运行时对数据进行排序。</summary>
        <value>如果用户可以对数据进行排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件支持两种对数据进行排序的方法。 您可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性启用运行时排序，也可以将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为在设计时定义排序。  
  
 将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `true`，以便在基于数据绑定控件中的排序表达式的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中启用排序。 数据绑定控件提供了接口，使用户能够在运行时选择要用于排序的属性。  
  
 您可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为用于排序的属性或属性，以编程方式设置返回数据的顺序。 当 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为属性并且 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性 `true`时，数据绑定控件中的排序表达式将应用于 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性中的表达式之后。 因此，这将确定数据的最终排序。  
  
   
  
## Examples  
 下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件的 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `true`，并显示一个绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件的 <xref:System.Web.UI.WebControls.GridView> 控件。 <xref:System.Web.UI.WebControls.GridView> 控件的 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> 属性设置为 `true`，以提供允许用户对数据进行排序的接口。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建上下文类型对象实例后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> 事件以检查上下文类型对象，或检查在创建对象时引发的异常。 从与此事件关联的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性检索上下文类型对象。 从 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性检索数据操作过程中引发的异常。  
  
 上下文类型对象是在 select、update、insert 和 delete 操作过程中创建的，并在整个请求中重复使用。  
  
 不引发事件时有一次。 这是在 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件期间以编程方式将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性设置为对象。 另一种情况是，原始值不必存储在视图状态中，或者 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性中的对象实现 <xref:System.Data.Linq.ITable> 接口。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建上下文类型对象实例前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource> 控件创建在 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性中指定的类型的实例。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件调用数据上下文对象的无参数构造函数来创建对象的实例。 您可能必须使用非参数构造函数，或者必须创建一个与 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性中指定的对象不同的对象。 在这种情况下，必须处理 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 事件，并手动创建数据上下文对象。  
  
 上下文类型对象是在 select、update、insert 和 delete 操作过程中创建的。  
  
 不引发事件时有一次。 这是以编程方式将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性设置为 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件的事件处理程序中的对象时。 另一种情况是，原始值不必存储在视图状态中，或者 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性中的对象实现 <xref:System.Data.Linq.ITable> 接口。  
  
   
  
## Examples  
 下面的示例演示如何在 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 事件期间，通过使用非参数构造函数来创建数据上下文对象。 该代码将对象分配给 <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> 属性。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在释放上下文类型对象前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以处理 <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> 事件以手动释放对象，或在销毁对象之前执行特定于对象的清理。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含属性（其值包含要检索的数据）的类型的名称。</summary>
        <value>要从中检索数据的类的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用 <xref:System.Web.UI.WebControls.LinqDataSource> 控件从内存中数据集合或数据库中检索数据时，必须指定两个属性。 第一个是表示数据源的数据上下文类。 第二个是数据上下文类中包含数据的属性。 将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为数据上下文类的名称，并将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为包含数据的数据集合。  
  
 例如，从数据库中检索数据时，请将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为表示数据库的类的名称。 还将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示数据库中的表的属性。 若要从数据库生成类，请使用 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] 或 SqlMetal 实用程序来自动生成这些类。  
  
 从内存中的数据集合（如数组）中检索数据时，请将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为包含数组属性的类的名称。 然后，将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为用于获取数组的属性。  
  
 若要通过 <xref:System.Web.UI.WebControls.LinqDataSource> 控件启用自动更新、插入或删除操作，分配给 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性的类必须派生自 <xref:System.Data.Linq.DataContext>。 此外，分配给 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性的属性必须从 <xref:System.Data.Linq.Table%601>派生。 如果不需要启用自动更新、插入或删除操作，则可以将任何类型的类的名称分配给 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性。  
  
 有关如何从类的实例中选择数据的信息，请参阅 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示如何将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为包含字符串数组的类。 它还演示了如何将属性设置为表示数据库的类（由 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]生成）。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 在此示例中未显示表示数据库表的名为 `ExampleDataContext` 的类。 要使此示例正常运行，必须通过添加一个名为 Example 的 LINQ To SQL 类并将名为 "Movie" 的表拖到 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]来创建此类。 生成一个名为 `ExampleDataContext` 的类，其中包含名为 `Movies` 的属性。  
  
 下面的示例演示在 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中引用的名为 `MovieLibrary` 的类。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回可查询的视图。</summary>
        <returns>可查询的视图。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建与此控件相关联的 <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> 类的新实例。</summary>
        <returns>充当数据绑定控件的接口的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要提供自定义视图，可以在派生类中重写此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">要删除的记录的行键值。</param>
        <param name="oldValues">为检测数据冲突而计算的行值。</param>
        <summary>执行删除操作。</summary>
        <returns>受删除操作影响的记录数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，不必从代码中调用 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 方法。 将 <xref:System.Web.UI.WebControls.LinqDataSource> 控件与数据绑定控件一起使用时，当用户采取操作删除记录时，数据绑定控件将自动调用 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 方法。 当您想要创建自己的删除数据的过程时，请显式调用 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 方法。 例如，如果要基于数据绑定控件之外的事件删除记录，则可以调用 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成删除操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 事件以捕获删除操作中的任何异常，或在操作完成后检查输出参数。 可以从传递给事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象检索输出参数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 类不使用此属性。</summary>
        <value>参数的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行删除操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 事件以验证要删除的对象，检查数据类中的数据验证错误，更改删除操作之前的值，或取消删除操作。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 对象传递到 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 事件的事件处理程序。 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 对象包含要删除的数据，并允许您取消删除操作。 如果数据类引发 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 异常，则 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 对象在 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> 属性中包含该异常。  
  
 如果在 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 事件的事件处理程序中引发异常，则必须在该事件处理程序中处理异常。 异常将不会传递给 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 事件的事件处理程序（通过 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性）。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性仅包含在 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 事件之后引发的异常。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 事件的事件处理程序。 此代码根据 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> 属性中的属性和网页中的值取消删除操作。 在此示例中，当 `OnSale` 属性设置为 `true`时，用户必须选择 <xref:System.Web.UI.WebControls.CheckBox> 控件才能确认是否应删除记录。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件删除数据记录。</summary>
        <value>如果启用了自动删除操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果希望允许用户通过 <xref:System.Web.UI.WebControls.LinqDataSource> 控件删除数据记录，请将 "<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>" 属性设置为 "`true`"。 `true`<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 来自动创建用于删除数据的命令。 您必须包含一个接口，该接口允许用户选择要删除的记录，如 <xref:System.Web.UI.WebControls.DetailsView> 控件。  
  
 如果设置了 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性或 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件不支持自动删除操作。 在这种情况下，如果尝试删除操作，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 设置为 `true`的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 <xref:System.Web.UI.WebControls.DetailsView> 控件显示数据，并创建一个按钮，以便用户可以删除数据记录。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件插入数据记录。</summary>
        <value>如果启用了自动插入操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果希望允许用户通过 <xref:System.Web.UI.WebControls.LinqDataSource> 控件插入新的数据记录，请将 "<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>" 属性设置为 "`true`"。 `true`<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 来自动创建用于插入数据的命令。 您必须包含一个接口，该接口允许用户插入新记录，如 <xref:System.Web.UI.WebControls.DetailsView> 控件。  
  
 如果设置了 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性或 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件不支持自动插入操作。 在这种情况下，如果尝试插入操作，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 设置为 `true`的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 <xref:System.Web.UI.WebControls.DetailsView> 控件显示数据并显示一个按钮，该按钮将控件切换到插入模式，用户可在其中创建和保存新记录。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否跟踪对数据上下文对象所做的更改。</summary>
        <value>如果跟踪数据上下文对象的更改，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当从 LINQ To SQL 数据上下文对象中选择数据时，才使用 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 属性。  
  
 与只读数据交互时，将 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 属性设置为 `false` 可以提高性能，因为数据不会缓存以确定其是否已更改。 但是，它还禁用延迟的查询执行。 如果要使用延迟的查询执行，则必须将此属性设置为 `true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件更新数据记录。</summary>
        <value>如果启用了自动更新操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要允许用户使用 <xref:System.Web.UI.WebControls.LinqDataSource> 控件更新数据记录，请将 "<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>" 属性设置为 "`true`"。 `true`<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 来自动创建用于更新数据的命令。 您必须包含一个接口，该接口允许用户更新记录，如 <xref:System.Web.UI.WebControls.DetailsView> 控件。  
  
 如果设置了 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性或 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件不支持自动更新操作。 在这种情况下，如果尝试更新操作，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 设置为 `true`的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 <xref:System.Web.UI.WebControls.DetailsView> 控件显示数据，并创建一个按钮，以便用户可以更新数据记录。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName">要检索的视图名称，必须是“DefaultView”。</param>
        <summary>返回与 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 对象关联的数据源视图。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 对象关联的数据源视图。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> 控件仅支持一个数据源视图。 <xref:System.Web.UI.WebControls.LinqDataSourceView> 对象的默认名称为 "DefaultView"。 <xref:System.Web.UI.WebControls.LinqDataSourceView> 对象定义数据源控件的功能、从基础数据库检索数据，以及执行排序、插入、删除和更新等操作。

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p>viewName 为 null（Visual Basic 中为 Nothing）或除“DefaultView”以外的名称。</p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 数据访问概述</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回名称的集合，这些名称表示与 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件关联的视图对象的列表。</summary>
        <returns>具有一个包含名称“DefaultView”的元素的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> 控件仅支持其基础数据的一个视图，该视图名为 `DefaultView`。 因此，`GetViewNames` 方法返回仅包含一个元素的集合，其中包含此视图名称。

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 数据访问概述</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定用于对检索到的数据进行分组的属性。</summary>
        <value>用于创建 Group By 子句的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性可以指定用于合并具有相同值的数据记录的属性。 例如，如果将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性设置为 `Name`，则具有相同 `Name` 属性值的查询中的所有记录将作为单个合并记录返回。  
  
 可以通过在 `new` 函数中包含所有属性，并使用逗号分隔每个属性，从而将多个属性分配给 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性。 例如，若要按属性分组 `Name` 然后 `Category`，请将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性设置为 "`new(Name, Category)`"。  
  
 用于分组的属性中的值是通过名为 `Key`的生成属性返回的。 在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中包含 `Key` 属性以检索分组值。 可以通过使用 `As` 关键字将 `Key` 属性设置为别名，但不需要使用别名。 例如，你可以将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性设置为名为 `Category`的属性。 可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为 `new(Key As ProductCategory)`，从 `Category` 属性检索合并的值。  
  
 您可以通过在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中包含 `It` 属性，来访问分组中的单个记录。 `It` 属性包含共享分组属性中的值的记录的集合。 您可以循环访问 `It` 属性以检索各个记录。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性通常与聚合方法一起使用。 您可以使用以下聚合方法：  
  
-   `Count()`  
  
-   `Average(`*列*`)`  
  
-   `Sum(`*列*`)`  
  
-   `Max(`*列*`)`  
  
-   `Min(`*列*`)`  
  
-   `Where(`*条件*`)`  
  
-   `Any()`  
  
-   `All(`*条件*`)`  
  
 有关详细信息，请参阅[Linqdatasource Web 服务器控件概述](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100))和[如何：使用 LinqDataSource 控件对数据进行分组和聚合](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))。  
  
   
  
## Examples  
 下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件按名为 `Category`的属性对返回的数据进行分组。 它将返回共享值并计算分组记录的平均价格。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 下面的示例演示一个配置为按两列进行分组的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 `Key` 属性引用具有两个属性的对象 `ProductCategory` 和 `Color`。 `It` 所表示的对象已重命名 `Products`。 重命名 `Products` 对象包含分组中各个记录的集合，每个实例都包含 Products 表中的所有列。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 下面的示例演示两个 <xref:System.Web.UI.WebControls.ListView> 控件，用于在上一个示例中显示 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中的数据。 一个 <xref:System.Web.UI.WebControls.ListView> 控件显示分组数据，另一个 <xref:System.Web.UI.WebControls.ListView> 控件显示属于该组的产品的各个名称。 嵌套的数据绑定控件的 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 属性设置为 `Products`，这是 `It` 对象的别名。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Group By 子句的参数集合。</summary>
        <value>用于创建 Group By 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合中的参数在运行时创建 Group By 子句。 通常不会使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合对数据进行分组。 相反，可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性。 仅当在运行时必须设置 Group By 子句中的值并且该值不是属性名时，才使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合。 例如，根据数据记录中的 `LastName` 属性是否等于用户提供的值，使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合对数据进行分组。  
  
 如果要按属性对数据进行分组，并且无需在运行时设置该属性，则可以在 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性中定义分组属性。 例如，若要返回按 `LastName`分组的数据库表中的值，请将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 设置为不带任何参数的 "LastName"。 如果要按属性动态分组数据，请为 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件创建事件处理程序，并根据需要自定义 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性。  
  
 不能将属性名称指定为 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合中的参数的值。 要向必须在运行时设置的 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性添加条件时，可以将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合。  
  
 若要在 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合中设置值，请为每个参数指定一个名称，然后在该命名参数的 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性中添加占位符。 在 Group By 子句中，每个参数名称前面加上 @ 符号。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">要插入到数据源的行值。</param>
        <summary>执行插入操作。</summary>
        <returns>受插入操作影响的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，不必从代码中调用 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 方法。 当用户采取操作插入新记录时，数据绑定控件将自动调用 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 方法。 当您想要创建自己的数据插入过程时，请显式调用 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 方法。  
  
   
  
## Examples  
 下面的示例演示如何在用户单击按钮后，以编程方式在数据源中插入新记录。 此代码将包含默认值的 <xref:System.Collections.Specialized.ListDictionary> 对象传递到 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 方法。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 下面的示例演示上一示例的标记。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成插入操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 事件以从插入操作捕获任何异常，或在插入操作完成后检查值。 您可以通过传递到事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象来检索新的值。 例如，可以使用 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象检索数据库为新数据记录生成的标识属性。  
  
   
  
## Examples  
 下面的示例演示如何为 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 事件创建一个事件处理程序，该事件用于检查异常并检索新记录的标识属性。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行插入操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件可验证要插入的对象，检查数据类中的数据验证错误，更改插入操作之前的值，或取消插入操作。 传递给此事件的事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 对象包含要插入到数据源中的新对象。  
  
 如果在插入操作过程中发生验证错误，则 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 对象将包含由数据类引发的验证异常。 如果要插入的值与数据类中的属性的类型不匹配，则会发生验证错误，或者，如果未通过自定义验证检查，则会发生验证错误。 在 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件的事件处理程序中，可以检索验证异常并采取适当的操作。  
  
 如果在 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件的事件处理程序中引发异常，则必须在该事件处理程序中处理异常。 异常将不会传递给 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 事件的事件处理程序（通过 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性）。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性仅包含在 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件之后引发的异常。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件的事件处理程序，该事件在插入操作之前修改数据。 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 属性中的对象将转换为名为 `Product`的类型。 `Product` 对象的 `DateModified` 属性设置为当前日期和时间。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 下面的示例演示了检索验证异常的 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件的事件处理程序。  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前面的示例将检索验证异常。 如果值与属性的类型不匹配，则可能会引发异常。 它也可能是自定义的检查（如以下示例中的检查）引发的。 `OnAgeChanging` 方法检查 `Age` 属性的编号是否为负数。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在插入操作过程中使用的参数的集合。</summary>
        <value>在插入操作过程中使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，插入操作所需的值被数据绑定控件传递到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 如果要提供默认值或定义是否将空值转换为 `null`，请指定 insert 参数。 您不必为要插入的每个值都提供参数，只是在用户不提供值时必须处理的值。  
  
 在 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 集合中提供的值仅用于在数据源中定义但未绑定到数据控件中的字段。 例如，假设某个数据库表具有名称为 "名称"、"地址" 和 "邮政编码" 的列，但绑定到该表的 <xref:System.Web.UI.WebControls.ListView> 控件仅绑定到 "名称" 和 "地址" 字段。 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 集合中的值将仅用于邮政编码字段。 它们不会用于 "名称" 和 "地址" 字段。 即使没有为这些字段输入值，也是如此。 如果数据绑定控件自动生成数据源中的所有字段的字段，则不会使用 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 集合中的任何值。  
  
   
  
## Examples  
 下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件具有在 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 集合中提供默认值的参数。 如果用户没有为 `Category` 属性提供值，则该参数提供的默认值将保存在数据库中。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState">一个对象，它表示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的状态。</param>
        <summary>加载必须保持的 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件中的值的状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
`LoadViewState` 方法用于加载以前保存的 <xref:System.Web.UI.WebControls.LinqDataSource> 控件的视图状态。

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 数据访问概述</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件数据。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Web.UI.Control.Unload" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定用于对检索到的数据进行排序的字段。</summary>
        <value>用于创建 Order By 子句的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性可以指定返回数据中用于排序的属性。 用于对数据进行排序的属性必须存在于原始数据源中，但不一定要包含在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中。 若要指定如何返回已排序的数据，可以将空格和 `Ascending`、`ASC`、`Descending`或 `DESC` 添加到 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 字符串中的属性。  
  
 可以通过使用逗号分隔每个属性，在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性中提供多个属性。 例如，若要按名为 `LastName` 和 `FirstName`的属性进行排序，请将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为 "LastName，FirstName"。  
  
> [!NOTE]
>  如果将 <xref:System.Web.UI.WebControls.LinqDataSource> 控件与 [!INCLUDE[ss2k](~/includes/ss2k-md.md)] 或 [!INCLUDE[ssEW](~/includes/ssew-md.md)] 一起使用，并且 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为 `true`，则必须在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性中提供一个值。 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性为 `true`。 如果为 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性分配一个值，则还必须在查询中返回的属性列表中包含所有标识列。  
  
 如果 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `true`，则在运行时，数据绑定控件可以将排序表达式传递到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 应用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性后，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将应用数据绑定控件中的排序表达式。 因此，根据数据绑定控件中的排序表达式返回数据。  
  
   
  
## Examples  
 下面的示例根据 `Category` 属性中的值以逆序字母顺序返回数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Order By 子句的参数集合。</summary>
        <value>用于创建 Order By 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中的参数在运行时创建 Order By 子句。 通常，在将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合时，将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`。 如果将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`，则 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中的每个参数将按它们在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中指定的顺序添加到 Order By 子句中。 当 `true`<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性时，无需命名参数，因为它们按顺序应用并且与占位符不匹配。  
  
 如果无需在运行时在 Order By 子句中设置值，则无需使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合。 您可以定义用于对 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性中的数据进行排序的字段。 例如，若要返回按 `LastName`排序的数据库表中的值，请将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 设置为 "LastName"，不使用任何参数。  
  
 您可以在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中设置参数，并将参数与 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性中的占位符匹配，但这种方法的应用程序是有限的。 使用此方法时，<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中的参数无法表示列名称。 您可以将参数设置为值，然后将该值与属性中的值进行比较。 例如，你可以基于属性中的值是否小于参数表示的运行时值来对数据进行排序。  
  
   
  
## Examples  
 下面的示例显示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，其 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`。 参数包含在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合中，该集合根据用户从 <xref:System.Web.UI.WebControls.DropDownList> 控件中选择的属性名称对数据进行排序。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于对分组数据进行排序的字段。</summary>
        <value>用于创建订单组 By 子句的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性指定数据组的排序方式。 例如，您可以按 `CategoryID` 属性分组，然后按 `Price` 属性的平均值对每个类别 ID 组进行排序。  
  
 只有在已对数据进行分组后，才能设置 "<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>" 属性。 如果在不设置 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性的情况下设置 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。  
  
 用于对数据进行排序的属性必须是用于对数据进行分组的属性，或者是分组数据上聚合函数的结果。 若要指定数据的排序方式，可以在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 字符串中添加一个空格，并将字符串 "升序"、"ASC"、"降序" 或 "DESC" 添加到属性名称。  
  
 可以在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性中指定多个属性。 使用逗号分隔每个属性。  
  
   
  
## Examples  
 下面的示例演示如何使用两个属性对数据进行分组，以及如何使用这些属性之一对分组数据进行排序。 名为 `Products` 的表中的数据将使用名为 `CategoryID` 和 `Discontinued`的属性进行分组。 按 `CategoryID` 属性对分组的数据进行排序。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 下面的示例演示如何使用属性对数据进行分组，以及如何根据聚合函数的结果对数据进行排序。 `Products` 表中的数据通过使用 `CategoryID` 属性进行分组。 它基于每个组中 `UnitPrice` 属性的平均值进行排序。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Order Groups By 子句的参数集合。</summary>
        <value>用于创建订单组 By 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 集合中的参数在运行时创建订单组 By 子句。  
  
 仅当必须在 Order group By 子句中设置运行时值时，才将值添加到 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 集合。 您可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性定义用于对数据进行排序的字段。  
  
 可以在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 集合中设置参数，并将参数与 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性中的占位符匹配。 但是，在使用此方法时，<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 集合中的参数不能表示列名称;它们必须表示值。 您可以将参数设置为值，然后将该值与属性进行比较。 例如，你可以基于属性中的值是否小于参数表示的运行时值来对数据进行排序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的当前视图状态。</summary>
        <returns>一个包含 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的已保存状态的对象。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 数据访问概述</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置属性和计算值，它们包含在检索到的数据中。</summary>
        <value>用于创建 Select 子句的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将从数据对象中检索所有属性（数据列）。 使用 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性可以检索对象的属性子集，或在检索数据时计算新的值。  
  
 您可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为要包含在返回的数据中的属性的名称来指定要检索的属性。  
  
 如果从数据对象检索属性的子集，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件会动态创建一个类，其中仅包含你在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中指定的属性。 如果计算数据对象中不是属性的属性，也会动态创建类。 在这些情况下，从查询返回的对象不是 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性中指定的类的实例。 相反，您必须使用 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中的 `new` 方法，以指示从查询返回一个新类。 例如，若要仅从包含以上属性的对象中返回 `FirstName` 和 `LastName` 属性，请将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为 `new(FirstName, LastName)`。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将动态创建你在 `new` 方法中指定的新类。  
  
 您可以使用 `As` 关键字为选定值指定别名。 如果分配了别名，则必须在 `new` 方法中包含别名属性。 绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中的结果的任何数据绑定控件都必须通过别名引用属性。 例如，如果将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为 `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`，则数据绑定控件可以访问两个属性，`SalesRegion` 和 `RevenueThousands`。  
  
 根据下表中列出的条件，使用 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中的 `new` 函数。  
  
|选择|使用 new|示例|  
|------------|----------------|-------------|  
|单个属性。|不需要 `new`。|`Select="Category"`|  
|多个属性。|需要 `new`。|`Select="new(Category, Name)"`|  
|具有别名的单个或多个属性。|需要 `new`。|`Select="new(Category As CategoryGroup)"`|  
  
 如果要启用自动数据修改，但不希望显示数据对象中的所有属性，请不要设置 "<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>" 属性。 而是通过数据绑定控件管理显示。 当使用 <xref:System.Web.UI.WebControls.DetailsView> 控件或 <xref:System.Web.UI.WebControls.GridView> 控件时，还必须将 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 或 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 属性设置为 `false`。 数据绑定控件中未显示的任何值都存储在视图状态中。 当执行数据更新时，它们将以不更改的形式传递到数据源。  
  
 在查询中对数据进行分组时，可以在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中包含聚合方法。 您可以使用以下聚合方法：  
  
-   `Count()`  
  
-   `Average(`*列*`)`  
  
-   `Sum(`*列*`)`  
  
-   `Max(`*列*`)`  
  
-   `Min(`*列*`)`  
  
-   `Where(`*条件*`)`  
  
-   `Any()`  
  
-   `All(`*条件*`)`  
  
 有关详细信息，请参阅[Linqdatasource Web 服务器控件概述](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100))和[如何：使用 LinqDataSource 控件对数据进行分组和聚合](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))。  
  
 在对数据进行分组时，可以在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中包含 `Key` 和 `It`，它们是动态创建的属性。 `Key` 属性指的是用于对数据进行分组的属性中的值。 例如，如果按名为 `Category`的属性分组，则 `Key` 属性将包含 `Category` 属性中的每个唯一值。 `It` 属性指的是数据分组中的单个记录的集合。 您可以循环访问 `It` 属性，以便检索在分组操作中合并的各个记录。 例如，如果按名为 `Category`的属性分组，则 `It` 属性将包含在 `Category` 属性中共享公共值的所有单个记录。  
  
 如果在对数据进行分组时在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中包含 `It` 关键字，则必须为 `It` 关键字分配别名。 如果 `It` 不具有别名，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。 可以为 `Key` 关键字指定别名，但这不是必需的。  
  
   
  
## Examples  
 下面的示例演示如何将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为数据对象中的属性子集。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 下面的示例演示如何检索已用于对数据进行分组的属性中的值，以及如何检索分组记录的平均值。 `Key` 关键字包含用于对数据进行分组的属性。 在此示例中，`Key` 将包含 `ProductCategory` 属性中的共享值。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数据检索操作完成后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 事件以从数据检索操作捕获任何异常，或在检索操作完成后检查数据对象。 对象可从传递给事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象中获取。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行数据检索操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件以便执行以下任务：  
  
-   修改数据检索的参数。  
  
-   以编程方式生成查询。  
  
-   修改排序或分页的值。  
  
-   执行自定义排序或分页。  
  
-   取消数据检索操作。  
  
 传递给此事件的事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 对象包含数据检索操作的参数。 您可以在执行查询之前修改 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件处理程序中的参数，也可以创建新的结果集并将其分配给 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。  
  
 在此事件的处理程序中实现自定义排序或分页的能力可能受到绑定到 <xref:System.Web.UI.WebControls.LinqDataSource>的控件的限制。 例如，单击 <xref:System.Web.UI.WebControls.GridView> 控件的列标题时，控件将执行自动排序，这可能会重写在事件处理程序中建立的任何顺序。  
  
 如果在 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件的事件处理程序中引发异常，则必须在该事件处理程序中处理异常。 异常将不会传递给 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 事件的事件处理程序（通过 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性）。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性仅包含在 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件之后引发的异常。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件的事件处理程序。 处理程序将创建一个查询，该查询从网页中的字符串值数组中检索值。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 下面的示例演示如何将 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性分配给从表示存储过程的方法返回的对象。  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在数据检索操作过程中使用的参数的集合。</summary>
        <value>用于创建 Select 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合中的参数在运行时创建 Select 子句。 当要在 Select 子句中使用运行时值时，将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合。 例如，可以将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合以表示用户配置文件中的属性。 然后，可以使用该属性和数据源中的值计算新值。  
  
 如果不需要在运行时在 Select 子句中设置值，则不必使用 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合。 您可以定义要在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中检索的属性。 例如，若要从数据库表中返回 `FirstName` 和 `LastName` 值，请将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 设置为 "FirstName，LastName"，不使用任何参数。  
  
 若要在 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合中设置值，请在命名参数的 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中添加占位符。 在 Select 子句中，每个参数名称前面加上 @ 符号。  
  
 不能使用 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合中的参数来表示属性名称。 若要将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性动态设置为属性的名称，请为 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 事件创建事件处理程序，并根据需要自定义 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示如何使用用户提供的值在返回的数据中计算值。 用户可以在文本框中输入表示生产天数的值。 该值除以数据库中的一个值，该值表示生产产品的天数。 返回的值指示在指定天数内可制造的产品数。 用户的输入通过 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合包含在 Select 命令中。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示数据源中的数据是否存储在视图状态中，以确保数据在更新或删除之前不会由其他进程更改。</summary>
        <value>如果将值存储在视图状态中，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，当更新和删除操作已启用时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将所有记录的原始值存储在视图状态中。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件存储所有主键的值，以及在 `Column` 特性中未标记为 `UpdateCheck.Never` 的所有属性。 您可以在 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]中设置 `Column` 特性的 `UpdateCheck` 属性。  
  
 在 LINQ to SQL 更新或删除数据之前，它会根据数据源中的当前值检查视图状态中的值。 如果值不匹配，则数据源记录已更改。 在这种情况下，LINQ to SQL 会引发异常，并且不会继续更新或删除操作。 有关 LINQ to SQL 的详细信息，请参阅[LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)。  
  
 将原始值存储在视图状态中可能会导致页面大小不必要地变大，并且可能会向恶意用户公开敏感数据。 您可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 属性设置为 `false`来禁用在视图状态中存储值。 如果执行此操作，则必须提供自己的方法来确保数据未更改。 如果将 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 属性设置为 `false`，则不会在数据绑定控件的视图状态中保留原始值。 在这种情况下，LINQ to SQL 无法验证数据的完整性。 即使数据源中的数据没有实际更改，LINQ to SQL 也会引发指示数据冲突的异常。  
  
 如果基础数据源包含更新期间自动更新的时间戳字段，则只能将该值存储在视图状态中。 在这种情况下，将实体类中的 timestamp 属性设置为 `IsVersion=true`，并将所有属性设置为 `UpdateCheck.Never`。 由于每次数据库中的数据发生更改时，数据库都会自动更新时间戳字段，因此，如果数据已更改，LINQ to SQL 将从该值确定。 这有助于减少视图状态的大小，并且不公开敏感数据。 LINQ to SQL 将通过将视图状态中的时间戳值与数据库中的时间戳值进行比较来检查数据一致性。 有关详细信息，请参阅[演练：使用带有 LinqDataSource 控件的时间戳来检查数据完整性](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.ContextType : Type with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</summary>
        <value>与类关联的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.LinqDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.EntitySetName : string with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</summary>
        <value>实体的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.LinqDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.Exception : EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " Usage="member this.System.Web.DynamicData.IDynamicDataSource.Exception : System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.LinqDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据上下文类中的属性或字段的名称，该数据上下文类表示一个数据集合。</summary>
        <value>包含属性（该属性包含数据集合）名称的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示要检索的数据的属性或字段的名称。 在连接到数据库表时，属性的名称通常与表的名称相同。 连接到内存中数据集合时，请将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为返回数据集合的属性或字段的名称。  
  
 可以分配一个属性，该属性可将任何类型返回到 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性以进行检索操作。 如果由属性表示的对象未实现 <xref:System.Collections.IEnumerable>，则 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将自动在 <xref:System.Collections.IEnumerable> 对象的实例中包装对象。  
  
 若要启用自动更新、插入或删除操作，分配给 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性的类必须从 <xref:System.Data.Linq.DataContext> 派生，并且分配给 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性的属性必须从 <xref:System.Data.Linq.Table%601>派生。  
  
 有关如何从类的实例中选择数据的信息，请参阅 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示两个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。 在一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中，<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为类中的一个属性。 该属性返回字符串数组。 在另一 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中，<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示数据库表的属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 在此示例中未显示表示数据库表的名为 `ExampleDataContext` 的类。 要使此示例正常运行，必须通过添加一个名为 Example 的 LINQ to SQL 类并将名为 "Movie" 的表拖到 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]来创建此类。 生成一个名为 `ExampleDataContext` 的类，其中包含名为 `Movies` 的属性。  
  
 下面的示例演示在 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中引用的名为 `MovieLibrary` 的类。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>跟踪对 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的视图状态的更改，以便可将这些更改存储在该控件的 <see cref="T:System.Web.UI.StateBag" /> 对象中。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource Web 服务器控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 数据访问概述</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">要更新的记录的行键值。</param>
        <param name="values">要在数据源中更新的行值。</param>
        <param name="oldValues">为检测数据冲突而计算的行值。</param>
        <summary>执行更新操作。</summary>
        <returns>受更新操作影响的记录数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，不必从代码中调用 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 方法。 当用户采取操作更新记录时，数据绑定控件将自动调用 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 方法。 若要创建自己的用于更新数据的进程，请显式调用 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 方法。  
  
   
  
## Examples  
 下面的示例演示如何在用户单击按钮后以编程方式更新数据源中的记录。 此代码将传递一个 <xref:System.Collections.Specialized.ListDictionary> 对象，该对象包含键值、包含原始值的 <xref:System.Collections.Specialized.ListDictionary> 对象，以及一个 <xref:System.Collections.Specialized.ListDictionary> 对象，其中包含 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 方法的新值。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 下面的示例演示上一示例的标记。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完成更新操作后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 事件以从更新操作捕获任何异常，或在更新操作完成后检查输出参数的值。 输出参数可从传递给事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象中获取。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 类不使用此集合。</summary>
        <value>参数的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行更新操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件可验证要更新的对象，检查数据类中的数据验证错误，更改更新操作之前的值，或取消更新操作。 传递给事件处理程序的 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> 对象包含原始对象和更新的对象。  
  
 如果在更新操作过程中发生验证错误，则 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 对象将包含由数据类引发的验证异常。 如果要更新的值与数据类中的属性的类型不匹配，则会发生验证错误，或者，如果未通过自定义验证检查，则会发生验证错误。 在 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件的事件处理程序中，可以检索验证异常并采取适当的操作。  
  
 如果在 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件的事件处理程序中引发异常，则必须在该事件处理程序中处理异常。 异常将不会传递给 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 事件的事件处理程序（通过 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性）。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 属性仅包含在 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件之后引发的异常。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件的事件处理程序。 此代码比较 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 属性和 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 属性中的属性，以查看值是否已更改。 如果值已更改，则 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 属性的值将设置为 `true`。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 下面的示例演示了检索验证异常的 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件的事件处理程序。  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前面的示例将检索验证异常。 如果值与属性的类型不匹配，则可能会引发异常。 它也可能是自定义的检查（如以下示例中的检查）引发的。 `OnAgeChanging` 方法检查 `Age` 属性的编号是否为负数。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定要将记录包含在检索到的数据中必须为真的条件。</summary>
        <value>用于创建 Where 子句的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性指定从查询返回记录的条件。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性的语法与中 LINQ Where 子句的语法相同 C# 。  
  
 指定导致布尔值的表达式，如果表达式的计算结果为给定行的 `true`，则该行将包含在结果集中。 表达式由列名、比较运算符和要比较的值组成，如下面的示例中所示：  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 若要指定由逻辑 `AND` 或 `OR` 运算符链接的多个表达式，请使用 `&&` 作为逻辑 AND 运算符，并将其作为逻辑 OR 运算符 `||`，如以下示例中所示：  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 如果要根据文本字符串值测试属性，则文本字符串值必须用双引号引起来。 若要在标记中执行此操作，请将 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 子句值括在单引号中，如下面的示例中所示：  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 若要在代码中使用文本字符串值进行测试，请使用适用于所使用的语言的转义符，以便插入双引号，如下面的示例所示：  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 如果要测试字符串是否大于或小于另一个字符串，则必须使用 <xref:System.String> 类的方法，而不是在列名称和字符串值之间使用 `<` 或 `>` 运算符。 下面的示例演示如何选择其类别值小于、小于或等于、大于或大于或等于 "体育" 的行：  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 你还可以使用 <xref:System.String> 类的其他方法，如 <xref:System.String.StartsWith%2A>、<xref:System.String.EndsWith%2A>和 <xref:System.String.Contains%2A>。 有关如何比较字符串的详细信息，请参阅[比较字符串](/dotnet/standard/base-types/comparing)。 有关 Where 子句语法的详细信息，请参阅[ C# Operators](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43)和[Where 子句](/dotnet/csharp/language-reference/keywords/where-clause)。  
  
 除了基于你在创建网页时定义的静态值进行筛选以外，还可以根据在运行时计算的动态值进行筛选。 在这种情况下，可将命名参数包含在作为值占位符的 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中。 然后，将具有匹配名称的参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中。  
  
 或者，你可以将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true` 并定义 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中的参数。 当 `true`<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性时，无需在 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中包含命名参数。 相反，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将从 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 属性中的参数自动生成 Where 子句。  
  
 有关如何筛选数据的详细信息，请参阅[演练：使用 LinqDataSource 和 GridView 控件选择和筛选部分数据](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)。  
  
   
  
## Examples  
 下面的示例演示如何根据静态条件筛选从查询返回的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 下面的示例演示如何根据用户在运行时提供的值来筛选数据。 在此示例中，页面上将显示 <xref:System.Web.UI.WebControls.DropDownList> 控件和 <xref:System.Web.UI.WebControls.GridView> 控件。 当用户在 <xref:System.Web.UI.WebControls.DropDownList> 控件中选择一个值时，<xref:System.Web.UI.WebControls.LinqDataSource> 控件将仅从 `Products` 表中选择 `UserPrice` 值等于选定值的行。 然后，<xref:System.Web.UI.WebControls.GridView> 控件将显示筛选后的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 Where 子句的参数集合。</summary>
        <value>用于创建 <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> 属性中 Where 子句的参数的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中的参数在运行时创建 Where 子句。 当要以编程方式在 Where 子句中设置一个或多个条件时，可以将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中。 例如，您可以在数据库表中搜索姓氏等于 <xref:System.Web.UI.WebControls.TextBox> 控件值的记录。 在这种情况下，可将参数添加到文本框值的 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合。  
  
 如果在 Where 子句中无需在运行时设置值，则无需使用 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合。 您可以定义要在 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中检索的字段。 例如，若要从数据库表返回值（其中 `LastName` 在标记中等于 "Adams"），请将 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性设置为 `'LastName = "Adams"'`，不使用任何参数。  
  
 若要在 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合中设置值，请为每个参数指定一个名称，然后在该参数的 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中添加占位符。 在 Where 子句中，每个参数名称前面加上 @ 符号。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合动态创建 Where 子句。 <xref:System.Web.UI.WebControls.LinqDataSource> 控件返回 `Price` 列中值大于用户在 <xref:System.Web.UI.WebControls.DropDownList> 控件中选择的值的所有记录。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
