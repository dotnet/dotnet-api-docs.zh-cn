<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1af05ffbee02a4e31e54d1e1e2cb7705b960968" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102083553" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("Selecting")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("Selecting")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("ContextTypeName")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("ContextTypeName")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName Language="C#">[System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.ParseChildren(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.ParseChildren(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.PersistChildren(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.PersistChildren(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7f6ab-101">允许通过标记文本在 ASP.NET 网页中使用语言集成查询 (LINQ) 来检索和修改数据对象中的数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-101">Enables the use of Language-Integrated Query (LINQ) in an ASP.NET Web page through markup text to retrieve and modify data from a data object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-102">本主题内容：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-102">In this topic:</span></span>  
  
-   [<span data-ttu-id="7f6ab-103">介绍</span><span class="sxs-lookup"><span data-stu-id="7f6ab-103">Introduction</span></span>](#introduction)  
  
-   [<span data-ttu-id="7f6ab-104">运算顺序</span><span class="sxs-lookup"><span data-stu-id="7f6ab-104">Order of Operations</span></span>](#order_of_operations)  
  
-   [<span data-ttu-id="7f6ab-105">数据排序</span><span class="sxs-lookup"><span data-stu-id="7f6ab-105">Ordering Data</span></span>](#ordering_data)  
  
-   [<span data-ttu-id="7f6ab-106">数据分组</span><span class="sxs-lookup"><span data-stu-id="7f6ab-106">Grouping Data</span></span>](#grouping_data)  
  
-   [<span data-ttu-id="7f6ab-107">数据修改</span><span class="sxs-lookup"><span data-stu-id="7f6ab-107">Data Modifications</span></span>](#data_modifications)  
  
-   [<span data-ttu-id="7f6ab-108">在运行时计算值</span><span class="sxs-lookup"><span data-stu-id="7f6ab-108">Evaluating Values at Run Time</span></span>](#evaluating_value_at_run_time)  
  
-   [<span data-ttu-id="7f6ab-109">使用存储过程</span><span class="sxs-lookup"><span data-stu-id="7f6ab-109">Working with Stored Procedures</span></span>](#working_with_stored_procedures)  
  
-   [<span data-ttu-id="7f6ab-110">声明性语法</span><span class="sxs-lookup"><span data-stu-id="7f6ab-110">Declarative Syntax</span></span>](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a><span data-ttu-id="7f6ab-111">介绍</span><span class="sxs-lookup"><span data-stu-id="7f6ab-111">Introduction</span></span>  
 <span data-ttu-id="7f6ab-112">Language-Integrated 查询 (LINQ) 是一种查询语法，用于定义一组查询运算符，使遍历、筛选和投影操作能够以声明性方式在任何中表示。基于网络的编程语言。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-112">Language-Integrated Query (LINQ) is a query syntax that defines a set of query operators that enable traversal, filter, and projection operations to be expressed in a declarative way in any .NET-based programming language.</span></span> <span data-ttu-id="7f6ab-113">数据对象可以是内存中的数据集合或表示来自数据库的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-113">The data object can be an in-memory data collection or an object that represents data from a database.</span></span> <span data-ttu-id="7f6ab-114">您可以检索或修改数据，而不必为每个操作都编写 SQL 命令。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-114">You can retrieve or modify the data without having to write SQL commands for each operation.</span></span>  
  
 <span data-ttu-id="7f6ab-115"><xref:System.Web.UI.WebControls.LinqDataSource>使用控件，可以通过在标记文本中设置属性来在 ASP.NET 网页中使用 LINQ。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-115">The <xref:System.Web.UI.WebControls.LinqDataSource> control enables you to use LINQ in an ASP.NET Web page by setting properties in markup text.</span></span> <span data-ttu-id="7f6ab-116"><xref:System.Web.UI.WebControls.LinqDataSource>控件使用 LINQ to SQL 来自动生成数据命令。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-116">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically generate the data commands.</span></span> <span data-ttu-id="7f6ab-117">有关 LINQ to SQL 的详细信息，请参阅 [LINQ to SQL](/dotnet/framework/data/adonet/sql/linq/)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-117">For more information about LINQ to SQL, see [LINQ to SQL](/dotnet/framework/data/adonet/sql/linq/).</span></span>  
  
 <span data-ttu-id="7f6ab-118">从内存中数据集合中检索数据时，请将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为包含数据集合的类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-118">When you are retrieving data from an in-memory data collection, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that contains the data collection.</span></span> <span data-ttu-id="7f6ab-119">将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 为返回数据集合的属性或字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-119">You set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property or field that returns the data collection.</span></span> <span data-ttu-id="7f6ab-120">例如，你可能有一个名为 `Person` 的类，该类包含一个名为 `FavoriteCities` 的属性，该属性将返回字符串值的数组。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-120">For example, you might have a class named `Person` that contains a property named `FavoriteCities` that returns an array of string values.</span></span> <span data-ttu-id="7f6ab-121">在这种情况下，将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为， `Person` 并将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为 `FavoriteCities` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-121">In that case, you set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to `Person` and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to `FavoriteCities`.</span></span>  
  
 <span data-ttu-id="7f6ab-122">查询数据库时，必须首先创建表示该数据库及其表的实体类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-122">When you are querying a database, you must first create entity classes that represent the database and its tables.</span></span> <span data-ttu-id="7f6ab-123">您可以使用对象关系设计器或 SqlMetal.exe 实用工具来生成这些类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-123">You can use the Object Relational Designer or the SqlMetal.exe utility to generate these classes.</span></span> <span data-ttu-id="7f6ab-124">然后，将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为表示数据库的类，并将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 为表示数据库表的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-124">You then set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the class that represents the database and set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the database table.</span></span>  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a><span data-ttu-id="7f6ab-125">运算顺序</span><span class="sxs-lookup"><span data-stu-id="7f6ab-125">Order of Operations</span></span>  
 <span data-ttu-id="7f6ab-126"><xref:System.Web.UI.WebControls.LinqDataSource>控件按以下顺序应用数据操作：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-126">The <xref:System.Web.UI.WebControls.LinqDataSource> control applies data operations in the following order:</span></span>  
  
1.  <span data-ttu-id="7f6ab-127">其中 (指定要返回) 的数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-127">Where (specify which data records to return).</span></span>  
  
2.  <span data-ttu-id="7f6ab-128">Order By (排序) 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-128">Order By (sort).</span></span>  
  
3.  <span data-ttu-id="7f6ab-129">按 (将) 共享值的聚合数据记录分组。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-129">Group By (aggregate data records that share values).</span></span>  
  
4.  <span data-ttu-id="7f6ab-130">排序组 (排序分组数据) 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-130">Order Groups By (sort grouped data).</span></span>  
  
5.  <span data-ttu-id="7f6ab-131">选择 (指定) 返回哪些字段或属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-131">Select (specify which fields or properties to return).</span></span>  
  
6.  <span data-ttu-id="7f6ab-132">自动排序 (按用户已选择) 的属性对数据记录进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-132">Auto-sort (sort data records by a property that the user has selected).</span></span>  
  
7.  <span data-ttu-id="7f6ab-133">自动页 (检索用户) 选择的数据记录子集。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-133">Auto-page (retrieve a subset of data records that were selected by the user).</span></span>  
  
 <span data-ttu-id="7f6ab-134">您可以向属性添加条件 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 以筛选从查询返回的数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-134">You can add conditions to the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter the data records that are returned from a query.</span></span> <span data-ttu-id="7f6ab-135">如果 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 未设置该属性，控件将 <xref:System.Web.UI.WebControls.LinqDataSource> 从数据对象中检索每个记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-135">If the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is not set, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves every record from the data object.</span></span>  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a><span data-ttu-id="7f6ab-136">数据排序</span><span class="sxs-lookup"><span data-stu-id="7f6ab-136">Ordering Data</span></span>  
 <span data-ttu-id="7f6ab-137">使用属性可以 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 指定返回数据的属性名称，以便进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-137">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify the names of properties from the returned data to sort by.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f6ab-138">当你将 <xref:System.Web.UI.WebControls.LinqDataSource> 控件与 SQL Server 2000 或 SQL Server Compact 3.5 一起使用时 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> ，如果将属性设置为 `true` ，则必须在属性中提供一个值 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-138">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with SQL Server 2000 or SQL Server Compact 3.5 and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="7f6ab-139">默认情况下， <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-139">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="7f6ab-140">如果为属性分配一个值 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> ，则还必须在查询中返回的属性列表中包含所有标识列。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-140">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a><span data-ttu-id="7f6ab-141">数据分组</span><span class="sxs-lookup"><span data-stu-id="7f6ab-141">Grouping Data</span></span>  
 <span data-ttu-id="7f6ab-142">使用属性可以 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 指定哪些属性用于合并具有相同值的数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-142">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used to consolidate data records that have the same values.</span></span> <span data-ttu-id="7f6ab-143">当对数据进行分组时，可以 `Key` `It` 在属性中包括和，它们是动态创建的属性 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-143">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-144">`Key`属性指的是用于对数据进行分组的属性中的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-144">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="7f6ab-145">例如，如果按名为的属性分组 `Category` ，则 `Key` 属性将包含属性中的所有唯一值 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-145">For example, if you group by a property named `Category`, the `Key` property will contain all unique values in the `Category` property.</span></span> <span data-ttu-id="7f6ab-146">`It`属性引用数据分组中的单个记录的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-146">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="7f6ab-147">您可以循环访问 `It` 属性来检索在分组操作中合并的各个记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-147">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="7f6ab-148">例如，如果按名为的属性分组 `Category` ，则 `It` 属性将包含在属性中共享公共值的所有单个记录 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-148">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="7f6ab-149">使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性可指定用于对分组数据进行排序的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-149">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify the properties to use for sorting the grouped data.</span></span> <span data-ttu-id="7f6ab-150">当对数据进行分组时， <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性将指定如何对分组数据中的单个记录进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-150">When you group data, the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property specifies how the individual records within the grouped data are sorted.</span></span>  
  
 <span data-ttu-id="7f6ab-151">默认情况下， <xref:System.Web.UI.WebControls.LinqDataSource> 控件从数据对象中检索所有属性的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-151">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves values for all the properties from a data object.</span></span> <span data-ttu-id="7f6ab-152"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>如果要使用可用属性的子集，则可以使用属性来指定要返回的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-152">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to specify which properties to return if you want to work with a subset of available properties.</span></span> <span data-ttu-id="7f6ab-153">选择操作应用于 Where、Order By 和 Group By 操作之后。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-153">The Select operation is applied after the Where, Order By, and Group By operations.</span></span> <span data-ttu-id="7f6ab-154">因此，如果在 Select 子句中创建了别名，则该别名在其他子句中不可用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-154">Therefore, if you create an aliased name in a Select clause, the alias is not available in the other clauses.</span></span>  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a><span data-ttu-id="7f6ab-155">数据修改</span><span class="sxs-lookup"><span data-stu-id="7f6ab-155">Data Modifications</span></span>  
 <span data-ttu-id="7f6ab-156">您可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 、和属性指定是否启用了数据修改 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-156">You can specify whether data modifications are enabled by using the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, and <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> properties.</span></span> <span data-ttu-id="7f6ab-157">用于修改控件中数据的用户界面 <xref:System.Web.UI.WebControls.LinqDataSource> 通常是通过数据绑定控件（例如控件）提供的 <xref:System.Web.UI.WebControls.DetailsView> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-157">The user interface for modifying data from a <xref:System.Web.UI.WebControls.LinqDataSource> control is typically provided through a data-bound control, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span> <span data-ttu-id="7f6ab-158">除了将 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 、或设置 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 为以外 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> `true` ，还需要满足以下条件才能启用自动数据修改：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-158">In addition to setting <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> to `true`, the following conditions are required to enable automatic data modifications:</span></span>  
  
-   <span data-ttu-id="7f6ab-159"><xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>不能为属性赋值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-159">The <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="7f6ab-160"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>不能为属性赋值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-160">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property cannot be assigned a value.</span></span>  
  
-   <span data-ttu-id="7f6ab-161">分配给属性的类 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 必须派生自 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-161">The class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="7f6ab-162">分配给属性的属性 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 必须派生自 <xref:System.Data.Linq.Table%601> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-162">The property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="7f6ab-163">可以通过两种方式限制在数据绑定控件中显示哪些属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-163">You can restrict which properties are displayed in a data-bound control in two ways.</span></span> <span data-ttu-id="7f6ab-164">可以将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为属性的子集，也可以通过添加控件来定义数据绑定控件的字段 <xref:System.Web.UI.WebControls.DataControlField> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-164">You can either set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties, or you can define the fields for a data-bound control by adding <xref:System.Web.UI.WebControls.DataControlField> controls.</span></span> <span data-ttu-id="7f6ab-165">但是，如果设置了 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性，则表示不能启用自动更新、插入和删除操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-165">However, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, it means that automatic update, insert, and delete operations cannot be enabled.</span></span> <span data-ttu-id="7f6ab-166">如果要在使用可用属性的子集时启用自动数据修改，请不要设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-166">If you want to enable automatic data modifications while you work with a subset of available properties, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-167">相反，从数据对象检索所有属性，并使用数据绑定控件来管理要显示的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-167">Instead, retrieve all properties from the data object and manage which ones are displayed by using the data-bound control.</span></span> <span data-ttu-id="7f6ab-168">使用 <xref:System.Web.UI.WebControls.DetailsView> 控件或 <xref:System.Web.UI.WebControls.GridView> 控件时，还必须将 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 或 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 属性设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-168">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> properties to `false`.</span></span> <span data-ttu-id="7f6ab-169">这会阻止数据绑定控件自动包含用于编辑和删除数据的按钮。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-169">This prevents the data-bound control from automatically including buttons for editing and deleting the data.</span></span> <span data-ttu-id="7f6ab-170">数据绑定控件中未显示的任何值都存储在视图状态中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-170">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="7f6ab-171">当执行数据更新时，它们将以不更改的形式传递到数据源。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-171">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a><span data-ttu-id="7f6ab-172">在运行时计算值</span><span class="sxs-lookup"><span data-stu-id="7f6ab-172">Evaluating Values at Run Time</span></span>  
 <span data-ttu-id="7f6ab-173">如果需要在运行时评估值以便对值进行排序、筛选或分组，则可以将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 、、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 或 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-173">If you have to evaluate values at run time for ordering, filtering, or grouping values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, or <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collections.</span></span>  
  
 <span data-ttu-id="7f6ab-174">如果要指定默认值，则可以将参数添加到集合中 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-174">If you want to specify default values, you can add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="7f6ab-175">如果要在执行数据操作之前检查或修改值，可以处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 或 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-175">If you want to examine or modify values before the data operation is executed, you can handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updating> events.</span></span> <span data-ttu-id="7f6ab-176">您还可以处理这些事件，以便取消数据操作，或检查在基于用户输入设置数据类中的属性时发生的验证错误。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-176">You can also handle these events in order to cancel the data operation or to examine validation errors that occurred when you set properties in the data class based on user input.</span></span>  
  
 <span data-ttu-id="7f6ab-177">若要在数据操作完成后检查值，请处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 或 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 事件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-177">To examine values after the data operation has finished, handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, or <xref:System.Web.UI.WebControls.LinqDataSource.Updated> events.</span></span>  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a><span data-ttu-id="7f6ab-178">使用存储过程</span><span class="sxs-lookup"><span data-stu-id="7f6ab-178">Working with Stored Procedures</span></span>  
 <span data-ttu-id="7f6ab-179"><xref:System.Web.UI.WebControls.LinqDataSource>通过为事件创建事件处理程序，可以使用该控件从存储过程中检索数据 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-179">You use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from a stored procedure by creating an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="7f6ab-180">在事件处理程序中，调用数据上下文类中的方法，该方法表示存储过程，并将结果设置为 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-180">In the event handler, you call the method in the data context class that represents the stored procedure and set the result to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object.</span></span> <span data-ttu-id="7f6ab-181">如果要对数据启用自动更新、插入和删除操作，则从方法返回的类型必须与属性中指定的类型匹配 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-181">If you want to enable automatic update, insert, and delete operations for the data, the type that is returned from the method must match the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="7f6ab-182">有关创建数据上下文方法的详细信息，请参阅 [如何：创建可映射到存储过程和函数的 DataContext 方法 (O/R 设计器) ](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-182">For more information about creating data context methods, see [How to: Create DataContext methods mapped to stored procedures and functions (O/R Designer)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).</span></span>  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a><span data-ttu-id="7f6ab-183">声明性语法</span><span class="sxs-lookup"><span data-stu-id="7f6ab-183">Declarative Syntax</span></span>  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-184">下面的示例演示了一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件从名为的实体类中检索数据 `Products` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-184">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that retrieves data from an entity class named `Products`.</span></span> <span data-ttu-id="7f6ab-185">实体类可能是通过使用 O/R 设计器或 SqlMetal.exe 实用工具生成的。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-185">The entity class could have been generated by using the O/R Designer or the SqlMetal.exe utility.</span></span> <span data-ttu-id="7f6ab-186">此 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性设置为仅返回属性中值 `Price` 大于50的记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-186">The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50.</span></span> <span data-ttu-id="7f6ab-187"><xref:System.Web.UI.WebControls.GridView>控件绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件以显示数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-187">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="7f6ab-188">下面的示例显示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件允许用户在数据源中更新、删除和插入记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-188">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that enables users to update, delete, and insert records in the data source.</span></span> <span data-ttu-id="7f6ab-189"><xref:System.Web.UI.WebControls.DetailsView>控件将绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，并使用户能够查看和修改数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-189">A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control and enables users to see and modify the data.</span></span> <span data-ttu-id="7f6ab-190">请注意，不需要 SQL 命令即可选择、更新、删除或插入记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-190">Notice that no SQL commands are required in order to select, update, delete, or insert the records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 <span data-ttu-id="7f6ab-191">下面的示例演示了一个事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> ，该事件根据网页中的值设置数据对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-191">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="7f6ab-192">下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 配置为按两列分组的控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-192">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="7f6ab-193">`Key`属性引用具有两个属性（和）的 `ProductCategory` 对象 `Color` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-193">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="7f6ab-194">所表示的对象 `It` 已重命名为 (化名) 为 `Products` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-194">The object represented by `It` is renamed (aliased) to `Products`.</span></span> <span data-ttu-id="7f6ab-195">重命名的 `Products` 对象包含分组中各个记录的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-195">The renamed `Products` object contains a collection of the individual records in a grouping.</span></span> <span data-ttu-id="7f6ab-196">每个实例都将包含表中的所有列 `Products` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-196">Each instance will contain all the columns from the `Products` table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="7f6ab-197">下面的示例演示两个 <xref:System.Web.UI.WebControls.ListView> 控件，这些控件 <xref:System.Web.UI.WebControls.LinqDataSource> 在上一示例的控件中显示数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-197">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="7f6ab-198">一个 <xref:System.Web.UI.WebControls.ListView> 控件显示分组数据，另一个 <xref:System.Web.UI.WebControls.ListView> 控件显示属于该组的产品的各个名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-198">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="7f6ab-199">嵌套的数据绑定控件的 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 属性设置为 `Products` ，这是对象的别名 `It` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-199">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/"><span data-ttu-id="7f6ab-200">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="7f6ab-200">LINQ to SQL</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f6ab-201">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-201">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-202">获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否根据 <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> 集合中的值动态创建 Order By 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-202">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates an Order By clause based on values in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> collection.</span></span></summary>
        <value><span data-ttu-id="7f6ab-203"><see langword="true" /> 如果 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件创建 Order By 子句，则为; 否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-203"><see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control creates the Order By clause; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-204">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-204">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-205">将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为时 `true` ，控件将 <xref:System.Web.UI.WebControls.LinqDataSource> 动态创建基于集合中的值的 Order By 子句 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-205">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates an Order By clause that is based on the values in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-206"><xref:System.Web.UI.WebControls.LinqDataSource>控件按第一个参数对数据进行排序，并另外对每个附加参数的数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-206">The <xref:System.Web.UI.WebControls.LinqDataSource> control sorts the data by the first parameter and then additionally sorts the data for each additional parameter.</span></span> <span data-ttu-id="7f6ab-207">包含 `null` 或空值的参数不包含在 Order By 子句中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-207">Parameters that contain `null` or an empty value are not included in the Order By clause.</span></span>  
  
 <span data-ttu-id="7f6ab-208"><xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>如果设置为，则不设置属性 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> `true` ，因为分析器会动态创建 Order By 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-208">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true`, because the parser dynamically creates the Order By clause.</span></span> <span data-ttu-id="7f6ab-209"><xref:System.Web.UI.WebControls.LinqDataSource>如果将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 设置为 `true` ，并且为属性赋值，则该控件引发异常 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-209">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> is set to `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-210">下面的示例演示了一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件的 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-210">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> set to `true`.</span></span> <span data-ttu-id="7f6ab-211">参数包含在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 基于用户从控件中选择的属性名称对数据进行排序的集合中 <xref:System.Web.UI.WebControls.DropDownList> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-211">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-212">获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否基于 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 集合中定义的值来动态创建 Where 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-212">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control dynamically creates a Where clause based on values defined in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span></span></summary>
        <value><span data-ttu-id="7f6ab-213">如果 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件将创建 Where 子句，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-213"><see langword="true" /> if the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control will create the Where clause; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-214">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-214">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-215">将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为时 `true` ，控件将 <xref:System.Web.UI.WebControls.LinqDataSource> 从集合中的参数动态创建 Where 子句 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-215">When you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-216">添加到集合中的每个参数都 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 必须 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 将其属性设置为与正在查询的数据对象中的属性匹配的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-216">Each parameter that you add to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection must have its <xref:System.Web.UI.WebControls.Parameter.Name%2A> property set to a value that matches a property in the data object that is being queried.</span></span> <span data-ttu-id="7f6ab-217">自动生成的 Where 子句将检查在集合中指定的值是否 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 等于数据对象中的匹配属性的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-217">The automatically generated Where clause will check whether the value specified in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection equals the value of the matching property in the data object.</span></span> <span data-ttu-id="7f6ab-218">如果提供多个参数，则这些参数将与逻辑 `AND` 操作链接。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-218">If you provide more than one parameter, the parameters are linked with a logical `AND` operation.</span></span> <span data-ttu-id="7f6ab-219">包含 `null` 或空值的参数不包含在 Where 子句中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-219">Parameters that contain `null` or an empty value are not included in the Where clause.</span></span>  
  
 <span data-ttu-id="7f6ab-220">自动生成的 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 子句只能测试相等性，只能链接到操作的参数 `AND` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-220">The automatically generated <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause can test only for equality and can link parameters only with the `AND` operation.</span></span> <span data-ttu-id="7f6ab-221"><xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> `true` 如果必须添加不测试相等性的条件，或者必须将参数与操作相关联，请不要将属性设置为 `OR` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-221">Do not set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` if you have to add a condition that does not test for equality or if you have to relate parameters with the `OR` operation.</span></span> <span data-ttu-id="7f6ab-222">可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性设置为 `false` ，并在该集合中的 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 每个参数的属性中添加占位符，来完成这些任务 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-222">You can accomplish these tasks by setting the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `false` and adding placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-223">在 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性中，在每个占位符名称前面加上 @ 符号。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-223">In the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property, preface each placeholder name with the @ symbol.</span></span>  
  
 <span data-ttu-id="7f6ab-224"><xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>当属性为时，不会设置属性 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> `true` ，因为分析器会动态创建 Where 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-224">You do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property when the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, because the parser dynamically creates the Where clause.</span></span> <span data-ttu-id="7f6ab-225"><xref:System.Web.UI.WebControls.LinqDataSource>如果该属性为，则该控件引发异常 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> `true` ，并且为 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性赋值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-225">The <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true` and the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is assigned values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-226">下面的示例演示了一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件的 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-226">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> set to `true`.</span></span> <span data-ttu-id="7f6ab-227"><xref:System.Web.UI.WebControls.GridView>控件绑定到 <xref:System.Web.UI.WebControls.LinqDataSource> 控件以显示从查询返回的数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-227">A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query.</span></span> <span data-ttu-id="7f6ab-228"><xref:System.Web.UI.WebControls.DropDownList>包含用三个值填充的控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-228">A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values.</span></span> <span data-ttu-id="7f6ab-229">参数包含在集合中，其 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 名称设置为，与 `Category,` 数据对象的一个属性匹配。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-229">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object.</span></span> <span data-ttu-id="7f6ab-230"><xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A>将其属性设置为控件的 ID <xref:System.Web.UI.WebControls.DropDownList> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-230">Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="7f6ab-231"><xref:System.Web.UI.WebControls.LinqDataSource>控件自动创建 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性，以根据用户从控件中选择的值来筛选记录 <xref:System.Web.UI.WebControls.DropDownList> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-231">The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span> <span data-ttu-id="7f6ab-232">查询返回的记录的 `Category` 属性与用户从控件中选择的值匹配 <xref:System.Web.UI.WebControls.DropDownList> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-232">The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-233">获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否支持在运行时在数据的各部分之间导航。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-233">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports navigation through sections of the data at run time.</span></span></summary>
        <value><span data-ttu-id="7f6ab-234">如果用户可以对数据进行分页，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-234"><see langword="true" /> if the user can page through the data; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-235">默认值是 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-235">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-236">将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为， `true` 以在控件中启用分页 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-236">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property to `true` to enable paging in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-237">若要使用户能够对数据进行分页，请连接一个数据绑定控件，该控件提供用于分页到控件的接口 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-237">To enable the user to page through the data, connect a data-bound control that provides the interface for paging to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-238">当 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为时 `true` ， <xref:System.Web.UI.WebControls.LinqDataSource> 控件在数据绑定控件中只检索一页中的记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-238">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves only enough records for one page in the data-bound control.</span></span> <span data-ttu-id="7f6ab-239">它使用 <xref:System.Linq.Enumerable.Skip%2A> 和 <xref:System.Linq.Enumerable.Take%2A> 方法检索当前页的记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-239">It uses the <xref:System.Linq.Enumerable.Skip%2A> and <xref:System.Linq.Enumerable.Take%2A> methods to retrieve the records for the current page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-240">下面的示例演示了一个控件，其 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性设置为 `true` ，并且有一个 <xref:System.Web.UI.WebControls.GridView> 绑定到该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件的控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-240">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-241">将 <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> 控件的属性 <xref:System.Web.UI.WebControls.GridView> 设置为， `true` 以提供允许用户逐页浏览数据的接口。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-241">The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-242">获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件是否支持在运行时对数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-242">Gets or sets a value that indicates whether the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control supports sorting the data at run time.</span></span></summary>
        <value><span data-ttu-id="7f6ab-243">如果用户可以对数据进行排序，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-243"><see langword="true" /> if the user can sort the data; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-244">默认值是 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-244">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-245"><xref:System.Web.UI.WebControls.LinqDataSource>控件支持两种对数据进行排序的方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-245">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports two approaches for sorting data.</span></span> <span data-ttu-id="7f6ab-246">您可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性启用运行时排序，也可以将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为在设计时定义排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-246">You can use the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to enable run-time sorting or you can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to define the sorting at design time.</span></span>  
  
 <span data-ttu-id="7f6ab-247">将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为， `true` 以便在 <xref:System.Web.UI.WebControls.LinqDataSource> 基于数据绑定控件中的排序表达式的控件中启用排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-247">Set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property to `true` to enable sorting in a <xref:System.Web.UI.WebControls.LinqDataSource> control that is based on the sort expression from a data-bound control.</span></span> <span data-ttu-id="7f6ab-248">数据绑定控件提供了接口，使用户能够在运行时选择要用于排序的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-248">The data-bound control provides the interface to enable the user to select at run time which property to use for sorting.</span></span>  
  
 <span data-ttu-id="7f6ab-249">您可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为用于排序的属性或属性，以编程方式设置返回数据的顺序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-249">You can programmatically set the order in which data is returned by setting the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to the property or properties used for sorting.</span></span> <span data-ttu-id="7f6ab-250">当 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为属性且 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性为时，将在 `true` 属性中的表达式后应用数据绑定控件中的排序表达式 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-250">When the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property is set to a property and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is `true`, the sort expression from the data-bound control is applied after the expression in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="7f6ab-251">因此，这将确定数据的最终排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-251">Therefore, this determines the final sorting of the data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-252">下面的示例演示了一个控件，其 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `true` ，并且有一个 <xref:System.Web.UI.WebControls.GridView> 绑定到该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件的控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-252">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-253"><xref:System.Web.UI.WebControls.GridView.AllowSorting%2A>将控件的属性 <xref:System.Web.UI.WebControls.GridView> 设置为， `true` 以提供允许用户对数据进行排序的接口。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-253">The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-254">在创建上下文类型对象实例后发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-254">Occurs after an instance of the context type object is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-255">处理 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> 事件以检查上下文类型对象，或检查在创建对象时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-255">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> event to examine the context type object or examine exceptions that are raised while the object is being created.</span></span> <span data-ttu-id="7f6ab-256">从 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 与此事件关联的对象的属性中检索上下文类型对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-256">You retrieve the context type object from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is associated with this event.</span></span> <span data-ttu-id="7f6ab-257">从属性中检索在数据操作过程中引发的异常 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-257">You retrieve the exception that was raised during the data operation from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="7f6ab-258">上下文类型对象是在 select、update、insert 和 delete 操作过程中创建的，并在整个请求中重复使用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-258">The context type object is created during select, update, insert, and delete operations and is reused throughout the request.</span></span>  
  
 <span data-ttu-id="7f6ab-259">不引发事件时有一次。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-259">There is one time when the event is not raised.</span></span> <span data-ttu-id="7f6ab-260">这是在事件中以编程方式将属性设置为对象时的情况 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-260">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object during the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="7f6ab-261">另一种情况是，原始值不必存储在视图状态中，或者属性中的对象 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 实现 <xref:System.Data.Linq.ITable> 接口。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-261">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-262">在创建上下文类型对象实例前发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-262">Occurs before an instance of the context type object is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-263">默认情况下，该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件创建在属性中指定的类型的实例 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-263">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control creates an instance of the type that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="7f6ab-264"><xref:System.Web.UI.WebControls.LinqDataSource>控件调用数据上下文对象的无参数构造函数来创建对象的实例。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-264">The <xref:System.Web.UI.WebControls.LinqDataSource> control calls the parameterless constructor of the data context object to create an instance of the object.</span></span> <span data-ttu-id="7f6ab-265">您可能必须使用非参数构造函数，或者必须创建一个与属性中指定的对象不同的对象 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-265">It is possible that you have to use a non-parameterless constructor or you have to create an object that differs from the one specified in the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span> <span data-ttu-id="7f6ab-266">在这种情况下，必须处理 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 事件并手动创建数据上下文对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-266">In that case, you must handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event and manually create the data context object.</span></span>  
  
 <span data-ttu-id="7f6ab-267">上下文类型对象是在 select、update、insert 和 delete 操作过程中创建的。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-267">The context type object is created during select, update, insert, and delete operations.</span></span>  
  
 <span data-ttu-id="7f6ab-268">不引发事件时有一次。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-268">There is one time when the event is not raised.</span></span> <span data-ttu-id="7f6ab-269">这是以编程方式将 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 属性设置为事件的事件处理程序中的对象时 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-269">This is when you programmatically set the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property to an object in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="7f6ab-270">另一种情况是，原始值不必存储在视图状态中，或者属性中的对象 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 实现 <xref:System.Data.Linq.ITable> 接口。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-270">An additional condition is that either the original values do not have to be stored in view state, or the object in the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> property implements the <xref:System.Data.Linq.ITable> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-271">下面的示例演示如何通过在事件期间使用非参数构造函数来创建数据上下文对象 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-271">The following example shows how to create the data context object by using a non-parameterless constructor during the <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> event.</span></span> <span data-ttu-id="7f6ab-272">该代码将对象分配给 <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-272">The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-273">在释放上下文类型对象前发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-273">Occurs before disposing the context type object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-274">您可以处理 <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> 事件以手动释放对象，或在销毁对象之前执行特定于对象的清理。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-274">You handle the <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> event to dispose the object manually, or to perform clean-up that is specific to the object before the object is destroyed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-275">获取或设置包含属性（其值包含要检索的数据）的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-275">Gets or sets the name of the type that contains the property whose value has the data that you want to retrieve.</span></span></summary>
        <value><span data-ttu-id="7f6ab-276">要从中检索数据的类的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-276">The name of the class to retrieve data from.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-277">使用 <xref:System.Web.UI.WebControls.LinqDataSource> 控件从内存中数据集合或数据库检索数据时，必须指定两个属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-277">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control to retrieve data from either an in-memory data collection or a database, you must specify two properties.</span></span> <span data-ttu-id="7f6ab-278">第一个是表示数据源的数据上下文类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-278">The first is a data context class that represents the data source.</span></span> <span data-ttu-id="7f6ab-279">第二个是数据上下文类中包含数据的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-279">The second is a property in the data context class that contains the data.</span></span> <span data-ttu-id="7f6ab-280">将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 为数据上下文类的名称，并将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为包含数据的数据集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-280">You set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the data context class and you set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the data collection that contains the data.</span></span>  
  
 <span data-ttu-id="7f6ab-281">例如，从数据库中检索数据时，请将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 为表示数据库的类的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-281">For example, when you retrieve data from a database, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that represents the database.</span></span> <span data-ttu-id="7f6ab-282">还将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示数据库中的表的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-282">Also set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that represents the table in the database.</span></span> <span data-ttu-id="7f6ab-283">若要从数据库生成类，请使用 O/R 设计器或 SqlMetal.exe 实用程序来自动生成这些类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-283">To generate classes from a database, use the O/R Designer or the SqlMetal.exe utility to automatically generate those classes.</span></span>  
  
 <span data-ttu-id="7f6ab-284">从内存中的数据集合（如数组）中检索数据时，请将 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性设置为包含数组属性的类的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-284">When you retrieve data from an in-memory data collection such as an array, set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to the name of the class that contains the array property.</span></span> <span data-ttu-id="7f6ab-285">然后将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为可获取数组的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-285">Then set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the property that gets the array.</span></span>  
  
 <span data-ttu-id="7f6ab-286">若要通过控件启用自动更新、插入或删除操作 <xref:System.Web.UI.WebControls.LinqDataSource> ，则分配给属性的类 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 必须派生自 <xref:System.Data.Linq.DataContext> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-286">To enable automatic update, insert, or delete operations through the <xref:System.Web.UI.WebControls.LinqDataSource> control, the class assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="7f6ab-287">此外，分配给属性的属性 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 必须派生自 <xref:System.Data.Linq.Table%601> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-287">In addition, the property assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span> <span data-ttu-id="7f6ab-288">如果不需要启用自动更新、插入或删除操作，则可以将任何类型的类的名称分配给 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-288">If you do not need to enable automatic update, insert, or delete operations, you can assign the name of any type of class to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property.</span></span>  
  
 <span data-ttu-id="7f6ab-289">有关如何从类的实例中选择数据的信息，请参见 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-289">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-290">下面的示例演示如何将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 为包含字符串数组的类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-290">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property to a class that contains an array of strings.</span></span> <span data-ttu-id="7f6ab-291">它还演示了如何将属性设置为 () 表示数据库的 O/R 设计器生成的类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-291">It also shows how to set the property to a class (generated by the O/R Designer) that represents a database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="7f6ab-292">`ExampleDataContext`在此示例中不显示名为的类，它表示数据库表。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-292">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="7f6ab-293">要使此示例正常运行，必须通过添加一个名为 Example 的 LINQ To SQL 类并将名为 "Movie" 的表拖到 O/R 设计器上来创建此类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-293">For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the O/R Designer.</span></span> <span data-ttu-id="7f6ab-294">生成一个名为的类 `ExampleDataContext` ，其中包含名为的属性 `Movies` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-294">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="7f6ab-295">下面的示例显示了 `MovieLibrary` 在控件中引用的名为的类 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-295">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/"><span data-ttu-id="7f6ab-296">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="7f6ab-296">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f6ab-297">返回可查询的视图。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-297">Returns a queryable view.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-298">可查询的视图。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-298">A queryable view.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f6ab-299">创建与此控件相关联的 <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-299">Creates a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> class that is associated with this control.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-300">充当数据绑定控件的接口的对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-300">An object that acts as the interface for data-bound controls.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-301">若要提供自定义视图，可以在派生类中重写此方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-301">To provide a custom view, you can override this method in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="7f6ab-302">要删除的记录的行键值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-302">The row key values for the records to be deleted.</span></span></param>
        <param name="oldValues"><span data-ttu-id="7f6ab-303">为检测数据冲突而计算的行值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-303">The row values that are evaluated to detect data conflicts.</span></span></param>
        <summary><span data-ttu-id="7f6ab-304">执行删除操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-304">Performs a delete operation.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-305">受删除操作影响的记录数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-305">The number of records affected by the delete operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-306">通常，您不必 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 从代码中调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-306">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method from your code.</span></span> <span data-ttu-id="7f6ab-307">当使用 <xref:System.Web.UI.WebControls.LinqDataSource> 带有数据绑定控件的控件时，数据绑定控件将 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 在用户采取操作删除记录时自动调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-307">When you use a <xref:System.Web.UI.WebControls.LinqDataSource> control with a data-bound control, the data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when the user takes action to delete a record.</span></span> <span data-ttu-id="7f6ab-308"><xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>若要创建自己的删除数据的进程，请显式调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-308">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to create your own process for deleting data.</span></span> <span data-ttu-id="7f6ab-309">例如， <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 如果要基于数据绑定控件之外的事件删除记录，则可以调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-309">For example, you can call the <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> method when you want to delete a record based on an event outside the data-bound control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-310">完成删除操作后发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-310">Occurs when a delete operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-311">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 事件，以捕获删除操作中的任何异常，或在操作完成后检查输出参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-311">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event to catch any exceptions from the delete operation, or to examine output parameters after the operation has finished.</span></span> <span data-ttu-id="7f6ab-312">可以从 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 传递给事件处理程序的对象中检索输出参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-312">You can retrieve the output parameters from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-313"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 类不使用此属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-313">This property is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <value><span data-ttu-id="7f6ab-314">参数的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-314">A collection of parameters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-315">执行删除操作前发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-315">Occurs before a delete operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-316">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 事件以验证要删除的对象，检查数据类中的数据验证错误，更改删除操作之前的值，或取消删除操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-316">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event to validate the object to be deleted, to examine data validation errors from the data class, to change a value before the delete operation, or to cancel the delete operation.</span></span> <span data-ttu-id="7f6ab-317"><xref:System.Web.UI.WebControls.LinqDataSource>控件将对象传递 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 给事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-317">The <xref:System.Web.UI.WebControls.LinqDataSource> control passes a <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object to event handlers for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="7f6ab-318"><xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>对象包含要删除的数据，并允许您取消删除操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-318">The <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains the data that will be deleted and enables you to cancel the delete operation.</span></span> <span data-ttu-id="7f6ab-319">如果数据类引发 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 异常，则 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 对象在属性中包含该异常 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-319">If the data class throws a <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> exception, the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> object contains that exception in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> property.</span></span>  
  
 <span data-ttu-id="7f6ab-320">如果事件的事件处理程序中引发了异常 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> ，则必须在该事件处理程序中处理异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-320">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="7f6ab-321">异常将不会 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 通过对象) 的属性传递给事件 (事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-321">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="7f6ab-322"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性仅包含事件之后引发的异常 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-322">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-323">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-323">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> event.</span></span> <span data-ttu-id="7f6ab-324">此代码基于属性中的属性和网页中的值取消删除操作 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-324">The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page.</span></span> <span data-ttu-id="7f6ab-325">在此示例中，当 `OnSale` 属性设置为时 `true` ，用户必须选择一个 <xref:System.Web.UI.WebControls.CheckBox> 控件以确认是否应删除记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-325">In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-326">获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件删除数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-326">Gets or sets a value that indicates whether data records can be deleted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><span data-ttu-id="7f6ab-327">如果启用了自动删除操作，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-327"><see langword="true" /> if automatic delete operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-328">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-328">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-329"><xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> `true` 如果希望允许用户通过控件删除数据记录，请将属性设置为 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-329">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> property to `true` when you want to enable users to delete a data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-330">当 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 为时 `true` ， <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 自动创建用于删除数据的命令。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-330">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to delete the data.</span></span> <span data-ttu-id="7f6ab-331">您必须包含一个接口，该接口允许用户选择要删除的记录，例如 <xref:System.Web.UI.WebControls.DetailsView> 控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-331">You must include an interface that lets users select a record to delete, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="7f6ab-332"><xref:System.Web.UI.WebControls.LinqDataSource>当 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 设置属性或属性时，控件不支持自动删除操作 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-332">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic delete operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="7f6ab-333">在这种情况下， <xref:System.Web.UI.WebControls.LinqDataSource> 如果尝试删除操作，控件将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-333">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if a delete operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-334">下面的示例演示了一个 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 设置为的控件 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-334">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> set to `true`.</span></span> <span data-ttu-id="7f6ab-335"><xref:System.Web.UI.WebControls.DetailsView>控件显示数据，并创建一个按钮，该按钮允许用户删除数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-335">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/"><span data-ttu-id="7f6ab-336">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="7f6ab-336">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-337">获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件插入数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-337">Gets or sets a value that indicates whether data records can be inserted through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><span data-ttu-id="7f6ab-338">如果启用了自动插入操作，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-338"><see langword="true" /> if automatic insert operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-339">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-339">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-340"><xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> `true` 如果希望允许用户通过控件插入新数据记录，请将属性设置为 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-340">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> property to `true` when you want to enable users to insert a new data record through the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-341">当 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 为时 `true` ， <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 自动创建用于插入数据的命令。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-341">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to insert the data.</span></span> <span data-ttu-id="7f6ab-342">您必须包含一个接口，该接口允许用户插入新记录，例如 <xref:System.Web.UI.WebControls.DetailsView> 控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-342">You must include an interface that lets users insert a new record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="7f6ab-343"><xref:System.Web.UI.WebControls.LinqDataSource>当 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 设置属性或属性时，控件不支持自动插入操作 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-343">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic insert operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="7f6ab-344">在这种情况下， <xref:System.Web.UI.WebControls.LinqDataSource> 如果尝试插入操作，控件将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-344">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an insert operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-345">下面的示例演示了一个 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 设置为的控件 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-345">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> set to `true`.</span></span> <span data-ttu-id="7f6ab-346"><xref:System.Web.UI.WebControls.DetailsView>控件显示数据并显示一个按钮，该按钮将控件切换到插入模式，用户可在其中创建和保存新记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-346">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/"><span data-ttu-id="7f6ab-347">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="7f6ab-347">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-348">获取或设置一个值，该值指示是否跟踪对数据上下文对象所做的更改。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-348">Gets or sets the value that indicates whether changes to the data context object are tracked.</span></span></summary>
        <value><span data-ttu-id="7f6ab-349">如果跟踪数据上下文对象的更改，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-349"><see langword="true" /> if the data context object is tracked for changes; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-350">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-350">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-351">此 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 属性仅在从 LINQ TO SQL 数据上下文对象选择数据时使用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-351">The <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property is only used when selecting data from a LINQ To SQL data context object.</span></span>  
  
 <span data-ttu-id="7f6ab-352">与只读数据交互时，将 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 属性设置为可 `false` 提高性能，因为数据不会进行缓存以确定其是否已更改。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-352">When you are interacting with read-only data, setting the <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> property to `false` improves performance because the data is not cached to determine if it has changed.</span></span> <span data-ttu-id="7f6ab-353">但是，它还禁用延迟的查询执行。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-353">However, it also disables deferred query execution.</span></span> <span data-ttu-id="7f6ab-354">`true`如果要使用延迟的查询执行，则必须将此属性设置为。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-354">This property must be set to `true` if you want to use deferred query execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-355">获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件更新数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-355">Gets or sets a value that indicates whether data records can be updated through the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <value><span data-ttu-id="7f6ab-356">如果启用了自动更新操作，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-356"><see langword="true" /> if automatic update operations are enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-357">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-357">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-358"><xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> `true` 如果希望允许用户使用控件更新数据记录，请将属性设置为 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-358">Set the <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> property to `true` when you want to enable users to update a data record by using the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span> <span data-ttu-id="7f6ab-359">当 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 为时 `true` ， <xref:System.Web.UI.WebControls.LinqDataSource> 控件使用 LINQ to SQL 自动创建用于更新数据的命令。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-359">When <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> is `true`, the <xref:System.Web.UI.WebControls.LinqDataSource> control uses LINQ to SQL to automatically create the command to update the data.</span></span> <span data-ttu-id="7f6ab-360">必须包含允许用户更新记录（如控件）的接口 <xref:System.Web.UI.WebControls.DetailsView> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-360">You must include an interface that lets users update a record, such as a <xref:System.Web.UI.WebControls.DetailsView> control.</span></span>  
  
 <span data-ttu-id="7f6ab-361"><xref:System.Web.UI.WebControls.LinqDataSource>当 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 设置属性或属性时，控件不支持自动更新操作 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-361">The <xref:System.Web.UI.WebControls.LinqDataSource> control does not support automatic update operations when the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property or the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is set.</span></span> <span data-ttu-id="7f6ab-362">在这种情况下， <xref:System.Web.UI.WebControls.LinqDataSource> 如果尝试更新操作，控件将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-362">In that case, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception if an update operation is tried.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-363">下面的示例演示了一个 <xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 设置为的控件 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-363">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> set to `true`.</span></span> <span data-ttu-id="7f6ab-364"><xref:System.Web.UI.WebControls.DetailsView>控件显示数据，并创建一个按钮，该按钮允许用户更新数据记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-364">A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName"><span data-ttu-id="7f6ab-365">要检索的视图名称，必须是“DefaultView”。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-365">The name of the view to retrieve, which must be "DefaultView".</span></span></param>
        <summary><span data-ttu-id="7f6ab-366">返回与 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 对象关联的数据源视图。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-366">Returns the data source view that is associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-367">与 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 对象关联的数据源视图。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-367">The data source view that is associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7f6ab-368"><xref:System.Web.UI.WebControls.LinqDataSource>控件仅支持一个数据源视图。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-368">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports only one data source view.</span></span> <span data-ttu-id="7f6ab-369"><xref:System.Web.UI.WebControls.LinqDataSourceView>对象的默认名称为 "DefaultView"。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-369">The <xref:System.Web.UI.WebControls.LinqDataSourceView> object has a default name of "DefaultView".</span></span> <span data-ttu-id="7f6ab-370"><xref:System.Web.UI.WebControls.LinqDataSourceView>对象定义数据源控件的功能、从基础数据库检索数据，以及执行排序、插入、删除和更新等操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-370">The <xref:System.Web.UI.WebControls.LinqDataSourceView> object defines the data source control's capabilities, retrieves data from the underlying database, and performs operations such as sort, insert, delete, and update.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p><span data-ttu-id="7f6ab-371">viewName 为 null（Visual Basic 中为 Nothing）或除“DefaultView”以外的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-371">viewName is null (Nothing in Visual Basic) or something other than "DefaultView".</span></span></p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="7f6ab-372">LinqDataSource Web 服务器控件概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-372">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="7f6ab-373">ASP.NET 数据访问概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-373">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f6ab-374">返回名称的集合，这些名称表示与 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件关联的视图对象的列表。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-374">Returns a collection of names that represents the list of view objects that are associated with the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-375">具有一个包含名称“DefaultView”的元素的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-375">A collection with one element that contains the name "DefaultView".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7f6ab-376"><xref:System.Web.UI.WebControls.LinqDataSource>控件在其基础数据上仅支持一个名为的视图 `DefaultView` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-376">The <xref:System.Web.UI.WebControls.LinqDataSource> control supports only one view on its underlying data, which is named `DefaultView`.</span></span> <span data-ttu-id="7f6ab-377">因此，该 `GetViewNames` 方法返回一个集合，该集合仅包含一个包含此视图名称的元素。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-377">The `GetViewNames` method therefore returns a collection with only one element, which contains this view name.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="7f6ab-378">LinqDataSource Web 服务器控件概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-378">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="7f6ab-379">ASP.NET 数据访问概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-379">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-380">获取或设置一个值，该值指定用于对检索到的数据进行分组的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-380">Gets or sets a value that specifies which properties are used for grouping the retrieved data.</span></span></summary>
        <value><span data-ttu-id="7f6ab-381">用于创建 Group By 子句的字符串。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-381">A string that is used to create the Group By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-382">使用属性可以 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 指定用于合并具有相同值的数据记录的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-382">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to specify which properties are used for consolidating data records that have the same values.</span></span> <span data-ttu-id="7f6ab-383">例如，如果将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性设置为 `Name` ，则具有相同属性值的查询中的所有记录 `Name` 都将作为单个合并记录返回。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-383">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `Name`, all the records in the query that have the same `Name` property value are returned as a single consolidated record.</span></span>  
  
 <span data-ttu-id="7f6ab-384">可以 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 通过在函数中包含所有属性 `new` ，并使用逗号分隔每个属性，从而将多个属性分配给该属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-384">You can assign more than one property to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property by enclosing all the properties in the `new` function and separating each property by using a comma.</span></span> <span data-ttu-id="7f6ab-385">例如，若要按属性分组， `Name` 然后 `Category` 将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性设置为 `new(Name, Category)` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-385">For example, to group by the properties `Name` and then `Category`, set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to `new(Name, Category)`.</span></span>  
  
 <span data-ttu-id="7f6ab-386">用于分组的属性中的值是通过名为的生成的属性返回的 `Key` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-386">The values in the property that are used for grouping are returned through a generated property named `Key`.</span></span> <span data-ttu-id="7f6ab-387">将属性包含 `Key` 在属性中 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 以检索分组值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-387">You include the `Key` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve the grouped values.</span></span> <span data-ttu-id="7f6ab-388">可以 `Key` 使用关键字将属性设置为别名 `As` ，但不需要使用别名。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-388">You can set the `Key` property to an alias by using the `As` keyword, but you are not required to use an alias.</span></span> <span data-ttu-id="7f6ab-389">例如，可以将 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性设置为名为的属性 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-389">For example, you might set the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property to a property named `Category`.</span></span> <span data-ttu-id="7f6ab-390">您可以 `Category` 通过将属性设置为来检索属性中的合并值 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `new(Key As ProductCategory)` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-390">You can retrieve the consolidated values from the `Category` property by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Key As ProductCategory)`.</span></span>  
  
 <span data-ttu-id="7f6ab-391">可以通过在属性中包含属性来访问分组中的单个记录 `It` <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-391">You can access the individual records in a grouping by including the `It` property in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-392">`It`属性包含共享分组属性中的值的记录的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-392">The `It` property contains a collection of records that share a value in the grouped property.</span></span> <span data-ttu-id="7f6ab-393">您可以循环访问 `It` 属性来检索各个记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-393">You can iterate over the `It` property to retrieve the individual records.</span></span>  
  
 <span data-ttu-id="7f6ab-394"><xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性通常与聚合方法一起使用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-394">The <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property is often used with aggregation methods.</span></span> <span data-ttu-id="7f6ab-395">您可以使用以下聚合方法：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-395">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   <span data-ttu-id="7f6ab-396">`Average(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-396">`Average(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-397">`Sum(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-397">`Sum(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-398">`Max(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-398">`Max(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-399">`Min(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-399">`Min(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-400">`Where(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-400">`Where(` *condition* `)`</span></span>  
  
-   `Any()`  
  
-   <span data-ttu-id="7f6ab-401">`All(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-401">`All(` *condition* `)`</span></span>  
  
 <span data-ttu-id="7f6ab-402">有关详细信息，请参阅 [Linqdatasource Web 服务器控件概述](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) 和 [如何：使用 LinqDataSource 控件对数据进行分组和聚合](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-402">For more information, see [LinqDataSource Web Server Control Overview](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) and [How to: Group and Aggregate Data Using the LinqDataSource Control](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100)).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-403">下面的示例显示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件按名为的属性对返回的数据进行分组 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-403">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`.</span></span> <span data-ttu-id="7f6ab-404">它将返回共享值并计算分组记录的平均价格。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-404">It returns the shared values and calculates the average price for the grouped records.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 <span data-ttu-id="7f6ab-405">下面的示例演示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 配置为按两列分组的控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-405">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns.</span></span> <span data-ttu-id="7f6ab-406">`Key`属性引用具有两个属性（和）的 `ProductCategory` 对象 `Color` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-406">The `Key` property references an object that has two properties, `ProductCategory` and `Color`.</span></span> <span data-ttu-id="7f6ab-407">所表示的对象 `It` 已重命名 `Products` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-407">The object represented by `It` is renamed `Products`.</span></span> <span data-ttu-id="7f6ab-408">重命名的 `Products` 对象包含分组中各个记录的集合，每个实例都包含 Products 表中的所有列。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-408">The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="7f6ab-409">下面的示例演示两个 <xref:System.Web.UI.WebControls.ListView> 控件，用于 <xref:System.Web.UI.WebControls.LinqDataSource> 在上一个示例中显示控件中的数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-409">The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example.</span></span> <span data-ttu-id="7f6ab-410">一个 <xref:System.Web.UI.WebControls.ListView> 控件显示分组数据，另一个 <xref:System.Web.UI.WebControls.ListView> 控件显示属于该组的产品的各个名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-410">One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group.</span></span> <span data-ttu-id="7f6ab-411">嵌套的数据绑定控件的 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 属性设置为 `Products` ，这是对象的别名 `It` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-411">The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-412">获取用于创建 Group By 子句的参数集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-412">Gets the collection of parameters that are used to create the Group By clause.</span></span></summary>
        <value><span data-ttu-id="7f6ab-413">用于创建 Group By 子句的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-413">The parameters that are used to create the Group By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-414"><xref:System.Web.UI.WebControls.LinqDataSource>控件使用集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 在运行时创建 Group by 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-414">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to create the Group By clause at run time.</span></span> <span data-ttu-id="7f6ab-415">通常不会使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 集合对数据进行分组。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-415">Typically you will not use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data.</span></span> <span data-ttu-id="7f6ab-416">您可以改为使用 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-416">Instead, you can use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="7f6ab-417"><xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>仅当在运行时必须设置 Group by 子句中的值并且该值不是属性名时，才使用该集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-417">You use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection only when a value in the Group By clause must be set at run time and that value is not a property name.</span></span> <span data-ttu-id="7f6ab-418">例如，根据 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> `LastName` 数据记录中的属性是否等于用户提供的值，使用集合对数据进行分组。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-418">For example, use the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection to group data based on whether the `LastName` property in the data records equals a value provided by the user.</span></span>  
  
 <span data-ttu-id="7f6ab-419">如果要按属性对数据进行分组，并且无需在运行时设置该属性，则可以在属性中定义分组属性 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-419">If you want to group data by a property and that property does not have to be set at run time, you can define the grouping property in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property.</span></span> <span data-ttu-id="7f6ab-420">例如，若要返回按分组的数据库表中的值 `LastName` ，则将设置 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 为 "LastName" 而不使用任何参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-420">For example, to return values from a database table grouped by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> to "LastName" without any parameters.</span></span> <span data-ttu-id="7f6ab-421">如果要按属性动态分组数据，请为事件创建一个事件处理程序， <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 并 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 根据需要自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-421">If you want to dynamically group data by a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property as needed.</span></span>  
  
 <span data-ttu-id="7f6ab-422">不能将属性的名称指定为集合中的参数的值 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-422">You cannot assign the name of a property as the value for a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-423"><xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>如果要将条件添加到 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 必须在运行时设置的属性，请将参数添加到集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-423">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection when you want to add a condition to the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property that must be set at run time.</span></span>  
  
 <span data-ttu-id="7f6ab-424">若要设置集合中的值 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> ，请为每个参数分配一个名称，然后在该命名参数的属性中添加占位符 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-424">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property for that named parameter.</span></span> <span data-ttu-id="7f6ab-425">在 Group By 子句中，每个参数名称前面加上 @ 符号。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-425">In the Group By clause, preface each parameter name with the @ symbol.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="7f6ab-426">要插入到数据源的行值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-426">The row values to be inserted into the data source.</span></span></param>
        <summary><span data-ttu-id="7f6ab-427">执行插入操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-427">Performs an insert operation.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-428">受插入操作影响的行数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-428">The number of rows affected by the insert operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-429">通常，您不必 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 从代码中调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-429">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method from your code.</span></span> <span data-ttu-id="7f6ab-430"><xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>当用户采取操作插入新记录时，数据绑定控件将自动调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-430">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when the user takes action to insert a new record.</span></span> <span data-ttu-id="7f6ab-431"><xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>若要创建自己的插入数据的进程，请显式调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-431">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method when you want to create your own process for inserting data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-432">下面的示例演示如何在用户单击按钮后，以编程方式在数据源中插入新记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-432">The following example shows how to programmatically insert a new record in the data source after the user clicks a button.</span></span> <span data-ttu-id="7f6ab-433">此代码将 <xref:System.Collections.Specialized.ListDictionary> 包含默认值的对象传递给 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-433">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 <span data-ttu-id="7f6ab-434">下面的示例演示上一示例的标记。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-434">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-435">完成插入操作后发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-435">Occurs when an insert operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-436">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 事件以从插入操作捕获任何异常，或在插入操作完成后检查值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-436">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event to catch any exceptions from the insert operation or to examine the values after the insert operation has finished.</span></span> <span data-ttu-id="7f6ab-437">您可以通过 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 传递到事件处理程序的对象检索新值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-437">You can retrieve the new values through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span> <span data-ttu-id="7f6ab-438">例如，可以使用 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 对象检索数据库为新数据记录生成的标识属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-438">For example, you can use the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object to retrieve the identity property generated by a database for a new data record.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-439">下面的示例演示如何为事件创建一个事件处理程序，该事件用于 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 检查异常并检索新记录的标识属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-439">The following example shows how to create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event that checks for exceptions and retrieves the identity property for the new record.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-440">执行插入操作前发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-440">Occurs before an insert operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-441">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 事件以验证要插入的对象，检查数据类中的数据验证错误，更改插入操作之前的值，或取消插入操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-441">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event to validate the object to be inserted, to examine data validation errors from the data class, to change a value before the insert operation, or to cancel the insert operation.</span></span> <span data-ttu-id="7f6ab-442"><xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>传递给此事件的事件处理程序的对象包含要插入到数据源中的新对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-442">The <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object passed to event handlers for this event contains the new object to insert in the data source.</span></span>  
  
 <span data-ttu-id="7f6ab-443">如果在插入操作过程中发生验证错误，则 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 对象将包含由数据类引发的验证异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-443">If a validation error occurs during the insert operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="7f6ab-444">如果要插入的值与数据类中的属性的类型不匹配，则会发生验证错误，或者，如果未通过自定义验证检查，则会发生验证错误。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-444">A validation error occurs if a value to be inserted does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="7f6ab-445">在事件的事件处理程序中 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> ，可以检索验证异常并采取适当的操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-445">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="7f6ab-446">如果事件的事件处理程序中引发了异常 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> ，则必须在该事件处理程序中处理异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-446">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="7f6ab-447">异常将不会 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 通过对象) 的属性传递给事件 (事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-447">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="7f6ab-448"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性仅包含事件之后引发的异常 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-448">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-449">下面的示例演示在 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 插入操作之前修改数据的事件的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-449">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that modifies data before the insert operation.</span></span> <span data-ttu-id="7f6ab-450">该属性中的对象 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 将强制转换为一个名为的类型 `Product` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-450">The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`.</span></span> <span data-ttu-id="7f6ab-451">`DateModified`对象的属性 `Product` 设置为当前日期和时间。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-451">The `DateModified` property of the `Product` object is set to the current date and time.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="7f6ab-452">下面的示例演示了检索验证异常的事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-452">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="7f6ab-453">前面的示例将检索验证异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-453">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="7f6ab-454">如果值与属性的类型不匹配，则可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-454">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="7f6ab-455">它也可能是自定义的检查（如以下示例中的检查）引发的。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-455">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="7f6ab-456">`OnAgeChanging`方法检查属性的数目 `Age` 是否为负数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-456">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-457">获取在插入操作过程中使用的参数的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-457">Gets the collection of parameters that are used during an insert operation.</span></span></summary>
        <value><span data-ttu-id="7f6ab-458">在插入操作过程中使用的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-458">The parameters that are used during an insert operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-459">通常，插入操作所需的值 <xref:System.Web.UI.WebControls.LinqDataSource> 由数据绑定控件传递到控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-459">Typically the values that are needed for an insert operation are passed to the <xref:System.Web.UI.WebControls.LinqDataSource> control by the data-bound control.</span></span> <span data-ttu-id="7f6ab-460">当要提供默认值或定义是否将空值转换为时，可以指定 insert 参数 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-460">You specify insert parameters when you want to provide a default value or define whether to convert empty values to `null`.</span></span> <span data-ttu-id="7f6ab-461">您不必为要插入的每个值都提供参数，只是在用户不提供值时必须处理的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-461">You do not have to provide a parameter for every value that will be inserted, only for the values that must be handled when the user does not provide a value.</span></span>  
  
 <span data-ttu-id="7f6ab-462">集合中提供的值仅用于 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 在数据源中定义但未绑定到数据控件中的字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-462">The values that you provide in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection are used only for fields that are defined in the data source but that are not bound in the data control.</span></span> <span data-ttu-id="7f6ab-463">例如，假设某个数据库表具有名称为 "名称"、"地址" 和 "邮政编码" 的列，但 <xref:System.Web.UI.WebControls.ListView> 绑定到该表的控件仅绑定到 "名称" 和 "地址" 字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-463">For example, suppose a database table has columns that are named Name, Address, and PostalCode, but a <xref:System.Web.UI.WebControls.ListView> control that is bound to the table is bound only to the Name and Address fields.</span></span> <span data-ttu-id="7f6ab-464">集合中的值 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 将仅用于 "邮政编码" 字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-464">The values in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used only for the PostalCode field.</span></span> <span data-ttu-id="7f6ab-465">它们不会用于 "名称" 和 "地址" 字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-465">They will not be used for the Name and Address field.</span></span> <span data-ttu-id="7f6ab-466">即使没有为这些字段输入值，也是如此。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-466">This is true even if no value is entered for those fields.</span></span> <span data-ttu-id="7f6ab-467">如果数据绑定控件自动生成数据源中的所有字段的字段，则不会使用该集合中的任何值 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-467">If the data-bound control autogenerates fields for all fields in the data source, no values from the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection will be used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-468">下面的示例显示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，该控件具有在集合中提供默认值的参数 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-468">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-469">如果用户未提供属性的值 `Category` ，则由参数提供的默认值将保存在数据库中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-469">If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="7f6ab-470">一个对象，它表示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的状态。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-470">An object that represents the state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></param>
        <summary><span data-ttu-id="7f6ab-471">加载必须保持的 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件中的值的状态。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-471">Loads the state of the values in the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control that must be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="7f6ab-472">`LoadViewState`方法用于加载以前保存的控件视图状态 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-472">The `LoadViewState` method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="7f6ab-473">LinqDataSource Web 服务器控件概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-473">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="7f6ab-474">ASP.NET 数据访问概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-474">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7f6ab-475">事件数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-475">The event data.</span></span></param>
        <summary><span data-ttu-id="7f6ab-476">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-476">Initializes the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7f6ab-477">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-477">An <see cref="T:System.EventArgs" /> object that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7f6ab-478">引发 <see cref="E:System.Web.UI.Control.Unload" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-478">Raises the <see cref="E:System.Web.UI.Control.Unload" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-479">获取或设置一个值，该值指定用于对检索到的数据进行排序的字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-479">Gets or sets a value that specifies which fields are used for ordering the retrieved data.</span></span></summary>
        <value><span data-ttu-id="7f6ab-480">用于创建 Order By 子句的字符串。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-480">A string that is used to create the Order By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-481">使用属性可以 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 指定返回数据中用于排序的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-481">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to specify which properties from the returned data to use for sorting.</span></span> <span data-ttu-id="7f6ab-482">用于对数据进行排序的属性必须存在于原始数据源中，但不一定要包含在 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-482">The property for sorting the data must exist in the original data source, but it does not have to be included in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-483">您可以向字符串中的属性添加空格、、 `Ascending` `ASC` 或， `Descending` `DESC` <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 以指定如何返回排序的数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-483">You can add a space and `Ascending`, `ASC`, `Descending`, or `DESC` to a property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> string in order to specify how the ordered data is returned.</span></span>  
  
 <span data-ttu-id="7f6ab-484"><xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>通过使用逗号分隔每个属性，可以在属性中提供多个属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-484">You can provide more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property by separating each property by using a comma.</span></span> <span data-ttu-id="7f6ab-485">例如，若要按名为和的属性进行排序 `LastName` `FirstName` ，请将 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 属性设置为 "LastName，FirstName"。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-485">For example, to order by properties named `LastName` and `FirstName`, set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property to "LastName, FirstName".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7f6ab-486">当你将 <xref:System.Web.UI.WebControls.LinqDataSource> 控件与 SQL Server 2000 或 SQL Server Compact 3.5 一起使用时 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> ，如果将属性设置为 `true` ，则必须在属性中提供一个值 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-486">When you use the <xref:System.Web.UI.WebControls.LinqDataSource> control with SQL Server 2000 or SQL Server Compact 3.5 and the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is set to `true`, you must provide a value in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="7f6ab-487">默认情况下， <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 属性为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-487">By default, the <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> property is `true`.</span></span> <span data-ttu-id="7f6ab-488">如果为属性分配一个值 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> ，则还必须在查询中返回的属性列表中包含所有标识列。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-488">If you assign a value to the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, you must also include all identity columns in the list of properties that is returned in the query.</span></span>  
  
 <span data-ttu-id="7f6ab-489">如果将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 属性设置为 `true` ，则在运行时，数据绑定控件可以向控件传递一个排序表达式 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-489">If the <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> property is set to `true`, a data-bound control can pass a sort expression to the <xref:System.Web.UI.WebControls.LinqDataSource> control at run time.</span></span> <span data-ttu-id="7f6ab-490">应用 <xref:System.Web.UI.WebControls.LinqDataSource> 属性后，控件将应用数据绑定控件中的排序表达式 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-490">The <xref:System.Web.UI.WebControls.LinqDataSource> control will apply the sort expression from the data-bound control after it applies the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="7f6ab-491">因此，根据数据绑定控件中的排序表达式返回数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-491">Therefore, the data is returned according to the sort expression from the data-bound control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-492">下面的示例基于属性中的值以逆序字母顺序返回数据 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-492">The following example returns data in reverse alphabetical order based on values in the `Category` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-493">获取用于创建 Order By 子句的参数集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-493">Gets the collection of parameters that are used to create the Order By clause.</span></span></summary>
        <value><span data-ttu-id="7f6ab-494">用于创建 Order By 子句的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-494">The parameters that are used for creating the Order By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-495"><xref:System.Web.UI.WebControls.LinqDataSource>控件使用集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 在运行时创建 Order By 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-495">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection to create the Order By clause at run time.</span></span> <span data-ttu-id="7f6ab-496">通常，将 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> `true` 参数添加到集合时，将属性设置为 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-496">Typically you set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property to `true` when you add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-497">当 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为时 `true` ，集合中的每个参数都 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 按其在集合中指定的顺序添加到 Order by 子句中 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-497">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is set to `true`, each parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection is added to the Order By clause in the sequence that they are specified in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-498">当 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性为时 `true` ，无需命名参数，因为它们按顺序应用并且与占位符不匹配。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-498">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property is `true`, the parameters do not have to be named because they are applied in sequence and are not matched to a placeholder.</span></span>  
  
 <span data-ttu-id="7f6ab-499">如果无需在运行时在 Order By 子句中设置值，则无需使用该 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-499">If you do not have to set a value at run time in the Order By clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-500">您可以定义用于对属性中的数据进行排序的字段 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-500">You can define the fields to use for ordering the data in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property.</span></span> <span data-ttu-id="7f6ab-501">例如，若要从按排序的数据库表返回值 `LastName` ，则将设置 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 为 "LastName"，不使用任何参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-501">For example, to return values from a database table ordered by `LastName`, set <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> to "LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="7f6ab-502">您可以设置集合中的参数，并将参数与属性中的 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 占位符匹配 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> ，但这种方法的应用程序是有限的。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-502">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> property, but this approach has limited application.</span></span> <span data-ttu-id="7f6ab-503">使用此方法时，集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 无法表示列名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-503">When you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection cannot represent a column name.</span></span> <span data-ttu-id="7f6ab-504">您可以将参数设置为值，然后将该值与属性中的值进行比较。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-504">You can set a parameter to a value and then compare that value to values in a property.</span></span> <span data-ttu-id="7f6ab-505">例如，你可以基于属性中的值是否小于参数表示的运行时值来对数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-505">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-506">下面的示例显示一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件，其 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-506">The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`.</span></span> <span data-ttu-id="7f6ab-507">参数包含在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 基于用户从控件中选择的属性名称对数据进行排序的集合中 <xref:System.Web.UI.WebControls.DropDownList> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-507">A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-508">获取或设置用于对分组数据进行排序的字段。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-508">Gets or sets the fields that are used for ordering grouped data.</span></span></summary>
        <value><span data-ttu-id="7f6ab-509">用于创建订单组 By 子句的字符串。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-509">A string that is used to create the Order Groups By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-510">使用 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 属性指定数据组的排序方式。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-510">You use the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property to specify how the groups of data are sorted.</span></span> <span data-ttu-id="7f6ab-511">例如，您可以按 `CategoryID` 属性分组，然后按属性的平均值对每个类别 ID 组进行排序 `Price` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-511">For example, you can group by the `CategoryID` property and then sort each category ID group by the average of the `Price` property.</span></span>  
  
 <span data-ttu-id="7f6ab-512">只有在已对 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 数据进行分组后，才能设置属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-512">You can set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property only when you have grouped the data.</span></span> <span data-ttu-id="7f6ab-513">如果在 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 未设置属性的情况下设置属性 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> ， <xref:System.Web.UI.WebControls.LinqDataSource> 控件将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-513">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property without setting the <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control throws an exception.</span></span>  
  
 <span data-ttu-id="7f6ab-514">用于对数据进行排序的属性必须是用于对数据进行分组的属性，或者是分组数据上聚合函数的结果。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-514">The property that is used to sort the data must be either a property that is used to group the data, or the result of an aggregation function on the grouped data.</span></span> <span data-ttu-id="7f6ab-515">若要指定数据的排序方式，可以向字符串中的属性名称添加空格和字符串 "升序"、"ASC"、"降序" 或 "DESC" <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-515">To specify how the data is sorted, you can add a space and the string "Ascending", "ASC", "Descending", or "DESC" to a property name in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> string.</span></span>  
  
 <span data-ttu-id="7f6ab-516">可以在属性中指定多个属性 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-516">You can specify more than one property in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="7f6ab-517">使用逗号分隔每个属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-517">Separate each property by using a comma.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-518">下面的示例演示如何使用两个属性对数据进行分组，以及如何使用这些属性之一对分组数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-518">The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties.</span></span> <span data-ttu-id="7f6ab-519">使用名为和的属性对名为的表中的数据 `Products` 进行分组 `CategoryID` `Discontinued` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-519">The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`.</span></span> <span data-ttu-id="7f6ab-520">分组数据按属性进行排序 `CategoryID` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-520">The grouped data is sorted by the `CategoryID` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 <span data-ttu-id="7f6ab-521">下面的示例演示如何使用属性对数据进行分组，以及如何根据聚合函数的结果对数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-521">The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function.</span></span> <span data-ttu-id="7f6ab-522">表中的数据 `Products` 通过使用属性进行分组 `CategoryID` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-522">The data from the `Products` table is grouped by using the `CategoryID` property.</span></span> <span data-ttu-id="7f6ab-523">它基于 `UnitPrice` 每个组中的属性的平均值进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-523">It is sorted based on the average of the `UnitPrice` property within each group.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-524">获取用于创建 Order Groups By 子句的参数集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-524">Gets the collection of parameters that are used to create the Order Groups By clause.</span></span></summary>
        <value><span data-ttu-id="7f6ab-525">用于创建订单组 By 子句的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-525">The parameters that are used to create the Order Groups By clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-526"><xref:System.Web.UI.WebControls.LinqDataSource>控件在运行时使用集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 来创建订单组 by 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-526">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection to create the Order Groups By clause at run time.</span></span>  
  
 <span data-ttu-id="7f6ab-527"><xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>仅当必须在顺序组 by 子句中设置运行时值时，才向集合添加值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-527">You add values to the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection only when you must set values at run time in the Order Groups By clause.</span></span> <span data-ttu-id="7f6ab-528">您可以使用属性定义用于对数据进行排序的字段 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-528">You can define the fields that are used to order the data by using the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span>  
  
 <span data-ttu-id="7f6ab-529">可以在集合中设置参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> ，并将参数与属性中的占位符匹配 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-529">You can set parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection and match the parameters to placeholders in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> property.</span></span> <span data-ttu-id="7f6ab-530">但是，在使用此方法时，集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 不能表示列名; 它们必须表示值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-530">However, when you use this approach, the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> collection cannot represent a column name; they must represent values.</span></span> <span data-ttu-id="7f6ab-531">您可以将参数设置为值，然后将该值与属性进行比较。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-531">You can set a parameter to a value and then compare that value to a property.</span></span> <span data-ttu-id="7f6ab-532">例如，你可以基于属性中的值是否小于参数表示的运行时值来对数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-532">For example, you can order the data based on whether the values in a property are less than the run-time value represented by the parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f6ab-533">保存 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的当前视图状态。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-533">Saves the current view state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-534">一个包含 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的已保存状态的对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-534">An object that contains the saved state of the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="7f6ab-535">LinqDataSource Web 服务器控件概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-535">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="7f6ab-536">ASP.NET 数据访问概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-536">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-537">获取或设置属性和计算值，它们包含在检索到的数据中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-537">Gets or sets the properties and calculated values that are included in the retrieved data.</span></span></summary>
        <value><span data-ttu-id="7f6ab-538">用于创建 Select 子句的字符串。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-538">A string that is used to create the Select clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-539">如果未设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性， <xref:System.Web.UI.WebControls.LinqDataSource> 控件将从数据对象中检索)  (数据列的所有属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-539">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property, the <xref:System.Web.UI.WebControls.LinqDataSource> control retrieves all the properties (data columns) from the data object.</span></span> <span data-ttu-id="7f6ab-540">使用属性可以 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 检索对象的属性子集，或在检索数据时计算新值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-540">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to retrieve a subset of properties from the object or to calculate new values when the data is being retrieved.</span></span>  
  
 <span data-ttu-id="7f6ab-541">您可以通过将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为要包含在返回的数据中的属性的名称来指定要检索的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-541">You specify which properties to retrieve by setting the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the names of the properties that you want to include in the returned data.</span></span>  
  
 <span data-ttu-id="7f6ab-542">如果从数据对象检索属性的子集，则该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件会动态创建一个类，其中仅包含你在属性中指定的属性 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-542">If you retrieve a subset of properties from the data object, the <xref:System.Web.UI.WebControls.LinqDataSource> control dynamically creates a class that contains only the properties that you specify in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-543">如果计算数据对象中不是属性的属性，也会动态创建类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-543">A class is also created dynamically if you calculate properties that are not properties in the data object.</span></span> <span data-ttu-id="7f6ab-544">在这些情况下，从查询返回的对象不是在属性中指定的类的实例 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-544">In these cases, the object returned from the query is not an instance of the class that is specified in the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property.</span></span> <span data-ttu-id="7f6ab-545">相反，你必须使用 `new` 属性中的方法， <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 以指示从查询返回一个新类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-545">Instead, you must use the `new` method in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to indicate that a new class is returned from the query.</span></span> <span data-ttu-id="7f6ab-546">例如，若要仅 `FirstName` `LastName` 从包含以上属性的对象中返回和属性，请将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为 `new(FirstName, LastName)` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-546">For example, to return only the `FirstName` and `LastName` properties from an object that contains more than these properties, set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(FirstName, LastName)`.</span></span> <span data-ttu-id="7f6ab-547"><xref:System.Web.UI.WebControls.LinqDataSource>控件将动态创建你在方法中指定的新类 `new` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-547">The <xref:System.Web.UI.WebControls.LinqDataSource> control will dynamically create the new class that you specified in the `new` method.</span></span>  
  
 <span data-ttu-id="7f6ab-548">可以使用关键字为 `As` 选定的值分配别名。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-548">You can use the `As` keyword to assign an alias to a selected value.</span></span> <span data-ttu-id="7f6ab-549">如果分配了别名，则必须在方法中包含别名属性 `new` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-549">If you assign an alias, you must include the aliased properties in the `new` method.</span></span> <span data-ttu-id="7f6ab-550">任何绑定到控件结果的数据绑定控件都 <xref:System.Web.UI.WebControls.LinqDataSource> 必须通过别名引用属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-550">Any data-bound control that binds to the results from the <xref:System.Web.UI.WebControls.LinqDataSource> control must refer to the property by the alias.</span></span> <span data-ttu-id="7f6ab-551">例如，如果将 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性设置为 `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)` ，则数据绑定控件可以访问两个属性： `SalesRegion` 和 `RevenueThousands` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-551">For example, if you set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, the data-bound control can access two properties, `SalesRegion` and `RevenueThousands`.</span></span>  
  
 <span data-ttu-id="7f6ab-552">`new` <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 根据下表中列出的条件，使用属性中的函数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-552">You use the `new` function in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property according to the conditions listed in the following table.</span></span>  
  
|<span data-ttu-id="7f6ab-553">选择</span><span class="sxs-lookup"><span data-stu-id="7f6ab-553">Select</span></span>|<span data-ttu-id="7f6ab-554">使用 new</span><span class="sxs-lookup"><span data-stu-id="7f6ab-554">Use of new</span></span>|<span data-ttu-id="7f6ab-555">示例</span><span class="sxs-lookup"><span data-stu-id="7f6ab-555">Example</span></span>|  
|------------|----------------|-------------|  
|<span data-ttu-id="7f6ab-556">单个属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-556">Single property.</span></span>|<span data-ttu-id="7f6ab-557">`new` 不需要。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-557">`new` not needed.</span></span>|`Select="Category"`|  
|<span data-ttu-id="7f6ab-558">多个属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-558">Multiple properties.</span></span>|<span data-ttu-id="7f6ab-559">`new` 需.</span><span class="sxs-lookup"><span data-stu-id="7f6ab-559">`new` needed.</span></span>|`Select="new(Category, Name)"`|  
|<span data-ttu-id="7f6ab-560">具有别名的单个或多个属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-560">Single or multiple properties that have an alias.</span></span>|<span data-ttu-id="7f6ab-561">`new` 需.</span><span class="sxs-lookup"><span data-stu-id="7f6ab-561">`new` needed.</span></span>|`Select="new(Category As CategoryGroup)"`|  
  
 <span data-ttu-id="7f6ab-562">如果要启用自动数据修改，但不希望显示数据对象中的所有属性，请不要设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-562">If you want to enable automatic data modifications, but you do not want to display all the properties from the data object, do not set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-563">而是通过数据绑定控件管理显示。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-563">Instead, manage the display through the data-bound control.</span></span> <span data-ttu-id="7f6ab-564">使用 <xref:System.Web.UI.WebControls.DetailsView> 控件或 <xref:System.Web.UI.WebControls.GridView> 控件时，还必须将 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 或 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 属性设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-564">When you use the <xref:System.Web.UI.WebControls.DetailsView> control or the <xref:System.Web.UI.WebControls.GridView> control, you must also set the <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> or the <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> property to `false`.</span></span> <span data-ttu-id="7f6ab-565">数据绑定控件中未显示的任何值都存储在视图状态中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-565">Any values that are not displayed in the data-bound control are stored in view state.</span></span> <span data-ttu-id="7f6ab-566">当执行数据更新时，它们将以不更改的形式传递到数据源。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-566">They are passed unchanged to the data source when the data update is performed.</span></span>  
  
 <span data-ttu-id="7f6ab-567">在查询中对数据进行分组时，可以在属性中包含聚合方法 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-567">When you group data in the query, you can include aggregate methods in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-568">您可以使用以下聚合方法：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-568">You can use the following aggregate methods:</span></span>  
  
-   `Count()`  
  
-   <span data-ttu-id="7f6ab-569">`Average(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-569">`Average(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-570">`Sum(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-570">`Sum(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-571">`Max(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-571">`Max(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-572">`Min(` *column* `)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-572">`Min(` *column* `)`</span></span>  
  
-   <span data-ttu-id="7f6ab-573">`Where(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-573">`Where(` *condition* `)`</span></span>  
  
-   `Any()`  
  
-   <span data-ttu-id="7f6ab-574">`All(`*条件*`)`</span><span class="sxs-lookup"><span data-stu-id="7f6ab-574">`All(` *condition* `)`</span></span>  
  
 <span data-ttu-id="7f6ab-575">有关详细信息，请参阅 [Linqdatasource Web 服务器控件概述](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) 和 [如何：使用 LinqDataSource 控件对数据进行分组和聚合](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-575">For more information, see [LinqDataSource Web Server Control Overview](https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)) and [How to: Group and Aggregate Data Using the LinqDataSource Control](https://docs.microsoft.com/previous-versions/aspnet/bb470251(v=vs.100)).</span></span>  
  
 <span data-ttu-id="7f6ab-576">当对数据进行分组时，可以 `Key` `It` 在属性中包括和，它们是动态创建的属性 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-576">When you group data, you can include `Key` and `It`, which are dynamically created properties, in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-577">`Key`属性指的是用于对数据进行分组的属性中的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-577">The `Key` property refers to the values in the property or properties that were used to group the data.</span></span> <span data-ttu-id="7f6ab-578">例如，如果按名为的属性分组 `Category` ，则 `Key` 属性将包含属性中的每个唯一值 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-578">For example, if you group by a property named `Category`, the `Key` property will contain each unique value in the `Category` property.</span></span> <span data-ttu-id="7f6ab-579">`It`属性引用数据分组中的单个记录的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-579">The `It` property refers to a collection of individual records in a grouping of data.</span></span> <span data-ttu-id="7f6ab-580">您可以循环访问 `It` 属性来检索在分组操作中合并的各个记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-580">You can iterate over the `It` property to retrieve the individual records that have been consolidated in the grouping operation.</span></span> <span data-ttu-id="7f6ab-581">例如，如果按名为的属性分组 `Category` ，则 `It` 属性将包含在属性中共享公共值的所有单个记录 `Category` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-581">For example, if you group by a property named `Category`, the `It` property contains all the individual records that share a common value in the `Category` property.</span></span>  
  
 <span data-ttu-id="7f6ab-582">如果在 `It` 对数据进行分组时在属性中包含关键字 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> ，则必须为关键字指定别名 `It` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-582">If you include the `It` keyword in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property when you group data, you must assign an alias to the `It` keyword.</span></span> <span data-ttu-id="7f6ab-583"><xref:System.Web.UI.WebControls.LinqDataSource>如果没有别名，控件将引发异常 `It` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-583">The <xref:System.Web.UI.WebControls.LinqDataSource> control will throw an exception if `It` does not have an alias.</span></span> <span data-ttu-id="7f6ab-584">可以为关键字指定别名 `Key` ，但这不是必需的。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-584">You can assign an alias to the `Key` keyword, but this is not required.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-585">下面的示例演示如何将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 为数据对象中的属性子集。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-585">The following example shows how to set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to a subset of properties in the data object.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 <span data-ttu-id="7f6ab-586">下面的示例演示如何检索已用于对数据进行分组的属性中的值，以及如何检索分组记录的平均值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-586">The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records.</span></span> <span data-ttu-id="7f6ab-587">`Key`关键字包含用于对数据进行分组的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-587">The `Key` keyword contains the property that has been used for grouping data.</span></span> <span data-ttu-id="7f6ab-588">在此示例中， `Key` 将包含属性中的共享值 `ProductCategory` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-588">In this example, `Key` will contain the shared values from the `ProductCategory` property.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-589">数据检索操作完成后发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-589">Occurs when a data retrieval operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-590">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 事件以从数据检索操作捕获任何异常，或在检索操作完成后检查数据对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-590">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event to catch any exceptions from the data retrieval operation or to examine the data object after the retrieval operation has finished.</span></span> <span data-ttu-id="7f6ab-591">对象可从 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 传递给事件处理程序的对象中获取。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-591">The object is available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-592">执行数据检索操作前发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-592">Occurs before a data-retrieval operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-593">处理事件，以便 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 执行以下任务：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-593">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event in order to perform the following tasks:</span></span>  
  
-   <span data-ttu-id="7f6ab-594">修改数据检索的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-594">Modify parameters for data retrieval.</span></span>  
  
-   <span data-ttu-id="7f6ab-595">以编程方式生成查询。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-595">Generate the query programmatically.</span></span>  
  
-   <span data-ttu-id="7f6ab-596">修改排序或分页的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-596">Modify the values for sorting or paging.</span></span>  
  
-   <span data-ttu-id="7f6ab-597">执行自定义排序或分页。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-597">Perform custom sorting or paging.</span></span>  
  
-   <span data-ttu-id="7f6ab-598">取消数据检索操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-598">Cancel the data-retrieval operation.</span></span>  
  
 <span data-ttu-id="7f6ab-599"><xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>传递给此事件的事件处理程序的对象包含数据检索操作的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-599">The <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> object that is passed to event handlers for this event contains the parameters for the data-retrieval operation.</span></span> <span data-ttu-id="7f6ab-600">您可以在 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 执行查询之前修改事件处理程序中的参数，也可以创建新的结果集并将其分配给 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-600">You can modify the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event handler before the query executes, or you can create a new result set and assign that to the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
 <span data-ttu-id="7f6ab-601">在此事件的处理程序中实现自定义排序或分页的能力可能受到绑定到的控件的限制 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-601">Your ability to implement custom sorting or paging in handlers for this event might be limited by the control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource>.</span></span> <span data-ttu-id="7f6ab-602">例如，单击控件的列标题时 <xref:System.Web.UI.WebControls.GridView> ，控件将执行自动排序，这可能会重写在事件处理程序中建立的任何顺序。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-602">For example, when the column header of a <xref:System.Web.UI.WebControls.GridView> control is clicked, the control performs automatic sorting which might override whatever order you establish in the event handler.</span></span>  
  
 <span data-ttu-id="7f6ab-603">如果事件的事件处理程序中引发了异常 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> ，则必须在该事件处理程序中处理异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-603">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="7f6ab-604">异常将不会 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 通过对象) 的属性传递给事件 (事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-604">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selected> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="7f6ab-605"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性仅包含事件之后引发的异常 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-605">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-606">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-606">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event.</span></span> <span data-ttu-id="7f6ab-607">处理程序将创建一个查询，该查询从网页中的字符串值数组中检索值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-607">The handler creates a query that retrieves values from an array of string values in the Web page.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 <span data-ttu-id="7f6ab-608">下面的示例演示如何将属性分配 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 给从表示存储过程的方法返回的对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-608">The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-609">获取在数据检索操作过程中使用的参数的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-609">Gets the collection of parameters that are used during a data-retrieval operation.</span></span></summary>
        <value><span data-ttu-id="7f6ab-610">用于创建 Select 子句的参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-610">The parameters that are used to create the Select clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-611"><xref:System.Web.UI.WebControls.LinqDataSource>控件使用集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 在运行时创建 Select 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-611">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to create the Select clause at run time.</span></span> <span data-ttu-id="7f6ab-612"><xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>当要在 Select 子句中使用运行时值时，将参数添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-612">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection when you want to use run-time values in the Select clause.</span></span> <span data-ttu-id="7f6ab-613">例如，可以将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合以表示用户配置文件中的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-613">For example, you can add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property in the user's profile.</span></span> <span data-ttu-id="7f6ab-614">然后，可以使用该属性和数据源中的值计算新值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-614">You can then use that property and a value from the data source to calculate a new value.</span></span>  
  
 <span data-ttu-id="7f6ab-615">如果不需要在运行时在 Select 子句中设置值，则无需使用该 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-615">If you do not have to set a value at run time in the Select clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-616">您可以定义要在属性中检索的属性 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-616">You can define the properties to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property.</span></span> <span data-ttu-id="7f6ab-617">例如，若要 `FirstName` `LastName` 从数据库表中返回和值，请将设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 为 "FirstName，LastName" 而不使用任何参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-617">For example, to return the `FirstName` and `LastName` values from a database table, set <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> to "FirstName, LastName" without any parameters.</span></span>  
  
 <span data-ttu-id="7f6ab-618">若要设置集合中的值 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> ，请在命名参数的属性中添加占位符 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-618">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection, you add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property for the named parameter.</span></span> <span data-ttu-id="7f6ab-619">在 Select 子句中，每个参数名称前面加上 @ 符号。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-619">In the Select clause, preface each parameter name with the @ symbol.</span></span>  
  
 <span data-ttu-id="7f6ab-620">不能使用集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 来表示属性名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-620">You cannot use a parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection to represent a property name.</span></span> <span data-ttu-id="7f6ab-621">若要将属性动态设置 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 为属性的名称，请为事件创建一个事件处理程序， <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 并 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 根据需要自定义属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-621">To dynamically set the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property to the name of a property, create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event and customize the <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> property as needed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-622">下面的示例演示如何使用用户提供的值在返回的数据中计算值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-622">The following example shows how to use a user-supplied value to calculate a value in the returned data.</span></span> <span data-ttu-id="7f6ab-623">用户可以在文本框中输入表示生产天数的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-623">The user can enter a value in the text box that represents the number of manufacturing days.</span></span> <span data-ttu-id="7f6ab-624">该值除以数据库中的一个值，该值表示生产产品的天数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-624">That value is divided by a value from a database that represents the number of days to manufacture a product.</span></span> <span data-ttu-id="7f6ab-625">返回的值指示在指定天数内可制造的产品数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-625">The returned value indicates how many products can be manufactured during the specified number of days.</span></span> <span data-ttu-id="7f6ab-626">用户的输入通过集合包含在 Select 命令中 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-626">The user's input is included in the Select command through the <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> collection.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-627">获取或设置一个值，该值指示数据源中的数据是否存储在视图状态中，以确保数据在更新或删除之前不会由其他进程更改。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-627">Gets or sets a value that indicates whether the data from the data source should be stored in view state to make sure that the data has not been changed by another process before it is updated or deleted.</span></span></summary>
        <value><span data-ttu-id="7f6ab-628">如果将值存储在视图状态中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-628"><see langword="true" /> if the values will be stored in view state; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7f6ab-629">默认值是 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-629">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-630">默认情况下，当更新和删除操作已启用时，该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件会将所有记录的原始值存储在视图状态中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-630">By default, when update and delete operations have been enabled, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values for all the records in view state.</span></span> <span data-ttu-id="7f6ab-631"><xref:System.Web.UI.WebControls.LinqDataSource>控件存储属性中未标记为的所有主键和所有属性的值 `UpdateCheck.Never` `Column` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-631">The <xref:System.Web.UI.WebControls.LinqDataSource> control stores values for all primary keys and all properties not marked with `UpdateCheck.Never` in the `Column` attribute.</span></span> <span data-ttu-id="7f6ab-632">在 `UpdateCheck` `Column` O/R 设计器中设置属性的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-632">You set the `UpdateCheck` property of the `Column` attribute in the O/R Designer.</span></span>  
  
 <span data-ttu-id="7f6ab-633">在 LINQ to SQL 更新或删除数据之前，它会根据数据源中的当前值检查视图状态中的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-633">Before LINQ to SQL updates or deletes data, it checks the values in view state against the current values in the data source.</span></span> <span data-ttu-id="7f6ab-634">如果值不匹配，则数据源记录已更改。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-634">If the values do not match, the data source record has changed.</span></span> <span data-ttu-id="7f6ab-635">在这种情况下，LINQ to SQL 会引发异常，并且不会继续更新或删除操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-635">In that case, LINQ to SQL throws an exception and does not continue with the update or delete operation.</span></span> <span data-ttu-id="7f6ab-636">有关 LINQ to SQL 的详细信息，请参阅 [LINQ to SQL](/dotnet/framework/data/adonet/sql/linq/)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-636">For more information about LINQ to SQL, see [LINQ to SQL](/dotnet/framework/data/adonet/sql/linq/).</span></span>  
  
 <span data-ttu-id="7f6ab-637">将原始值存储在视图状态中可能会导致页面大小不必要地变大，并且可能会向恶意用户公开敏感数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-637">Storing the original values in view state can cause the page size to become unnecessarily large and can expose sensitive data to a malicious user.</span></span> <span data-ttu-id="7f6ab-638">您可以通过将属性设置为来禁用在视图状态中存储值 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-638">You can disable storing values in view state by setting the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`.</span></span> <span data-ttu-id="7f6ab-639">如果执行此操作，则必须提供自己的方法来确保数据未更改。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-639">If you do this, you must provide your own way to make sure that the data has not changed.</span></span> <span data-ttu-id="7f6ab-640">如果将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 为 `false` ，则不会在数据绑定控件的视图状态中保留原始值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-640">If you set the <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> property to `false`, the original values are not persisted in view state for the data-bound control.</span></span> <span data-ttu-id="7f6ab-641">在这种情况下，LINQ to SQL 无法验证数据的完整性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-641">In that case, LINQ to SQL cannot verify the integrity of the data.</span></span> <span data-ttu-id="7f6ab-642">即使数据源中的数据没有实际更改，LINQ to SQL 也会引发指示数据冲突的异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-642">LINQ to SQL will throw an exception that indicates a data conflict even if the data in the data source has not actually changed.</span></span>  
  
 <span data-ttu-id="7f6ab-643">如果基础数据源包含更新期间自动更新的时间戳字段，则只能将该值存储在视图状态中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-643">If the underlying data source contains a timestamp field that is automatically updated during an update, you can store only that value in view state.</span></span> <span data-ttu-id="7f6ab-644">在这种情况下，将实体类中的 timestamp 属性设置为 `IsVersion=true` ，并将所有属性都设置为 `UpdateCheck.Never` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-644">In that case, the timestamp property in the entity class is set to `IsVersion=true` and all the properties are set to `UpdateCheck.Never`.</span></span> <span data-ttu-id="7f6ab-645">由于每次数据库中的数据发生更改时，数据库都会自动更新时间戳字段，因此，如果数据已更改，LINQ to SQL 将从该值确定。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-645">Because a timestamp field is automatically updated by the database every time that data in that record changes, LINQ to SQL determines from that value if data has changed.</span></span> <span data-ttu-id="7f6ab-646">这有助于减少视图状态的大小，并且不公开敏感数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-646">This helps reduce the size of view state, and no sensitive data is exposed.</span></span> <span data-ttu-id="7f6ab-647">LINQ to SQL 将通过将视图状态中的时间戳值与数据库中的时间戳值进行比较来检查数据一致性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-647">LINQ to SQL will check for data consistency by comparing the timestamp value in view state with the timestamp value in the database.</span></span> <span data-ttu-id="7f6ab-648">有关详细信息，请参阅 [演练：使用带有 LinqDataSource 控件的时间戳来检查数据完整性](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-648">For more information, see [Walkthrough: Using a Timestamp with the LinqDataSource Control to Check Data Integrity](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/"><span data-ttu-id="7f6ab-649">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="7f6ab-649">LINQ to SQL</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.ContextType : Type with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-650">有关此成员的说明，请参见 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-650">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <value><span data-ttu-id="7f6ab-651">与类关联的类型。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-651">The type that is associated with the class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-652">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-652">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7f6ab-653">它只能在 <xref:System.Web.UI.WebControls.LinqDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-653">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.EntitySetName : string with get, set" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-654">有关此成员的说明，请参见 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-654">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <value><span data-ttu-id="7f6ab-655">实体的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-655">The name of the entity.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-656">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-656">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7f6ab-657">它只能在 <xref:System.Web.UI.WebControls.LinqDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-657">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.Exception : EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " Usage="member this.System.Web.DynamicData.IDynamicDataSource.Exception : System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-658">有关此成员的说明，请参见 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-658">For a description of this member, see <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-659">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-659">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7f6ab-660">它只能在 <xref:System.Web.UI.WebControls.LinqDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-660">It can be used only when the <xref:System.Web.UI.WebControls.LinqDataSource> instance is cast to an <xref:System.Web.DynamicData.IDynamicDataSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-661">获取或设置数据上下文类中的属性或字段的名称，该数据上下文类表示一个数据集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-661">Gets or sets the name of the property or field in the data context class that represents a data collection.</span></span></summary>
        <value><span data-ttu-id="7f6ab-662">包含属性（该属性包含数据集合）名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-662">A string that contains the name of the property that contains the data collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-663">将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示要检索的数据的属性或字段的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-663">Set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that represents the data that you want to retrieve.</span></span> <span data-ttu-id="7f6ab-664">在连接到数据库表时，属性的名称通常与表的名称相同。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-664">When you are connecting to a database table, the name of the property is usually the same as the name of the table.</span></span> <span data-ttu-id="7f6ab-665">连接到内存中数据集合时，请将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为返回数据集合的属性或字段的名称。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-665">When you are connecting to an in-memory data collection, set the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property to the name of the property or field that returns the data collection.</span></span>  
  
 <span data-ttu-id="7f6ab-666">可以分配一个属性，该属性可将任何类型返回到 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性以进行检索操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-666">You can assign a property that returns any type to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property for retrieval operations.</span></span> <span data-ttu-id="7f6ab-667">如果由属性表示的对象未实现 <xref:System.Collections.IEnumerable> ，则该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将自动包装对象的实例中的对象 <xref:System.Collections.IEnumerable> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-667">If the object that is represented by the property does not implement <xref:System.Collections.IEnumerable>, the <xref:System.Web.UI.WebControls.LinqDataSource> control will automatically wrap the object in an instance of an <xref:System.Collections.IEnumerable> object.</span></span>  
  
 <span data-ttu-id="7f6ab-668">若要启用自动更新、插入或删除操作，分配给属性的类 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 必须派生自， <xref:System.Data.Linq.DataContext> 并且分配给属性的属性 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 必须派生自 <xref:System.Data.Linq.Table%601> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-668">To enable automatic update, insert, or delete operations, the class that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> property must derive from <xref:System.Data.Linq.DataContext> and the property that is assigned to the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property must derive from <xref:System.Data.Linq.Table%601>.</span></span>  
  
 <span data-ttu-id="7f6ab-669">有关如何从类的实例中选择数据的信息，请参见 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-669">For information about how to select data from an instance of a class, see the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-670">下面的示例演示两个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-670">The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls.</span></span> <span data-ttu-id="7f6ab-671">在一个 <xref:System.Web.UI.WebControls.LinqDataSource> 控件中， <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为类中的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-671">In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property in a class.</span></span> <span data-ttu-id="7f6ab-672">该属性返回字符串数组。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-672">That property returns an array of strings.</span></span> <span data-ttu-id="7f6ab-673">在另 <xref:System.Web.UI.WebControls.LinqDataSource> 一个控件中，将 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 属性设置为表示数据库表的属性。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-673">In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> property is set to a property that represents a database table.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 <span data-ttu-id="7f6ab-674">`ExampleDataContext`在此示例中不显示名为的类，它表示数据库表。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-674">The class named `ExampleDataContext` that represents the database table is not shown in this example.</span></span> <span data-ttu-id="7f6ab-675">要使此示例正常运行，必须通过添加一个名为 Example 的 LINQ to SQL 类，并将名为 "Movie" 的表拖到 O/R 设计器上来创建此类。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-675">For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the O/R Designer.</span></span> <span data-ttu-id="7f6ab-676">生成一个名为的类 `ExampleDataContext` ，其中包含名为的属性 `Movies` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-676">A class named `ExampleDataContext` with a property named `Movies` is generated.</span></span>  
  
 <span data-ttu-id="7f6ab-677">下面的示例显示了 `MovieLibrary` 在控件中引用的名为的类 <xref:System.Web.UI.WebControls.LinqDataSource> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-677">The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7f6ab-678">跟踪对 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控件的视图状态的更改，以便可将这些更改存储在该控件的 <see cref="T:System.Web.UI.StateBag" /> 对象中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-678">Tracks view state changes to the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control so that the changes can be stored in the <see cref="T:System.Web.UI.StateBag" /> object for the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)"><span data-ttu-id="7f6ab-679">LinqDataSource Web 服务器控件概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-679">LinqDataSource Web Server Control Overview</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)"><span data-ttu-id="7f6ab-680">ASP.NET 数据访问概述</span><span class="sxs-lookup"><span data-stu-id="7f6ab-680">ASP.NET Data Access Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="7f6ab-681">要更新的记录的行键值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-681">The row key values for the records to be updated.</span></span></param>
        <param name="values"><span data-ttu-id="7f6ab-682">要在数据源中更新的行值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-682">The row values to be updated in the data source.</span></span></param>
        <param name="oldValues"><span data-ttu-id="7f6ab-683">为检测数据冲突而计算的行值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-683">The row values that are evaluated to detect data conflicts.</span></span></param>
        <summary><span data-ttu-id="7f6ab-684">执行更新操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-684">Performs an update operation.</span></span></summary>
        <returns><span data-ttu-id="7f6ab-685">受更新操作影响的记录数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-685">The number of records affected by the update operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-686">通常，您不必 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 从代码中调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-686">Typically, you do not have to call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method from your code.</span></span> <span data-ttu-id="7f6ab-687"><xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>当用户采取操作更新记录时，数据绑定控件将自动调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-687">The data-bound control will automatically call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when the user takes action to update a record.</span></span> <span data-ttu-id="7f6ab-688"><xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>若要创建自己的用于更新数据的进程，请显式调用方法。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-688">You explicitly call the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method when you want to create your own process for updating data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-689">下面的示例演示如何在用户单击按钮后以编程方式更新数据源中的记录。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-689">The following example shows how to programmatically update a record in the data source after the user clicks a button.</span></span> <span data-ttu-id="7f6ab-690">该代码传递 <xref:System.Collections.Specialized.ListDictionary> 包含键值的对象、 <xref:System.Collections.Specialized.ListDictionary> 包含原始值的对象，以及 <xref:System.Collections.Specialized.ListDictionary> 包含方法的新值的对象 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-690">The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> method.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 <span data-ttu-id="7f6ab-691">下面的示例演示上一示例的标记。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-691">The following example shows the markup for the previous example.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-692">完成更新操作后发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-692">Occurs when an update operation has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-693">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 事件以从更新操作捕获任何异常，或在更新操作完成后检查输出参数的值。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-693">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event to catch any exceptions from the update operation or to examine the values of output parameters after the update operation has finished.</span></span> <span data-ttu-id="7f6ab-694">输出参数可从 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 传递给事件处理程序的对象获取。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-694">The output parameters are available from the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object that is passed to event handlers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-695"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 类不使用此集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-695">This collection is not used by the <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> class.</span></span></summary>
        <value><span data-ttu-id="7f6ab-696">参数的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-696">A collection of parameters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-697">执行更新操作前发生。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-697">Occurs before an update operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-698">处理 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 事件以验证要更新的对象，检查数据类中的数据验证错误，更改更新操作之前的值，或取消更新操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-698">Handle the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to validate the object to be updated, to examine data validation errors from the data class, to change a value before the update operation, or to cancel the update operation.</span></span> <span data-ttu-id="7f6ab-699"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>传递给事件处理程序的对象包含原始对象和更新的对象。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-699">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object that is passed to event handlers contains both the original object and the updated object.</span></span>  
  
 <span data-ttu-id="7f6ab-700">如果在更新操作过程中发生验证错误，则 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 对象将包含由数据类引发的验证异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-700">If a validation error occurs during the update operation, the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains the validation exceptions that are thrown by the data class.</span></span> <span data-ttu-id="7f6ab-701">如果要更新的值与数据类中的属性的类型不匹配，则会发生验证错误，或者，如果未通过自定义验证检查，则会发生验证错误。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-701">A validation error occurs if a value to be updated does not match the type of the property in the data class, or if it does not pass a custom validation check.</span></span> <span data-ttu-id="7f6ab-702">在事件的事件处理程序中 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> ，可以检索验证异常并采取适当的操作。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-702">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the validation exceptions and take appropriate action.</span></span>  
  
 <span data-ttu-id="7f6ab-703">如果事件的事件处理程序中引发了异常 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> ，则必须在该事件处理程序中处理异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-703">If an exception is thrown in an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you must handle the exception in that event handler.</span></span> <span data-ttu-id="7f6ab-704">异常将不会 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 通过对象) 的属性传递给事件 (事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-704">The exception will not be passed to an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updated> event (through the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property of the <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> object).</span></span> <span data-ttu-id="7f6ab-705"><xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性仅包含事件之后引发的异常 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-705">The <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> property contains only the exceptions that are thrown after the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-706">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-706">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="7f6ab-707">此代码对属性和属性的属性进行比较 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> ，以查看值是否已更改。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-707">The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed.</span></span> <span data-ttu-id="7f6ab-708">如果值已更改，则将属性的值 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-708">If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="7f6ab-709">下面的示例演示了检索验证异常的事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-709">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event that retrieves validation exceptions.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 <span data-ttu-id="7f6ab-710">前面的示例将检索验证异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-710">The previous example retrieves validation exceptions.</span></span> <span data-ttu-id="7f6ab-711">如果值与属性的类型不匹配，则可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-711">An exception might be thrown if a value does not match the type of the property.</span></span> <span data-ttu-id="7f6ab-712">它也可能是自定义的检查（如以下示例中的检查）引发的。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-712">It might also be thrown from a customized check such as the one in the following example.</span></span> <span data-ttu-id="7f6ab-713">`OnAgeChanging`方法检查属性的数目 `Age` 是否为负数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-713">The `OnAgeChanging` method checks that the number for the `Age` property is not negative.</span></span>  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-714">获取或设置一个值，该值指定要将记录包含在检索到的数据中必须为真的条件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-714">Gets or sets a value that specifies what conditions must be true for a record to be included in the retrieved data.</span></span></summary>
        <value><span data-ttu-id="7f6ab-715">用于创建 Where 子句的字符串。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-715">A string that is used to create the Where clause.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-716">您可以使用 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性指定要从查询返回的记录的条件。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-716">You use the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to specify the conditions for the record to be returned from a query.</span></span> <span data-ttu-id="7f6ab-717">属性的语法与 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> c # 中的 LINQ Where 子句的语法相同。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-717">The syntax for the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is the same as the syntax for a LINQ Where clause in C#.</span></span>  
  
 <span data-ttu-id="7f6ab-718">指定导致布尔值的表达式，如果表达式的计算结果为 `true` ，则该行将包含在结果集中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-718">You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set.</span></span> <span data-ttu-id="7f6ab-719">表达式由列名、比较运算符和要比较的值组成，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-719">Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 <span data-ttu-id="7f6ab-720">若要指定由逻辑 or 运算符链接的多个表达式 `AND` `OR` ，请使用 `&&` 作为逻辑 and 运算符并 `||` 用作逻辑 or 运算符，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-720">To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 <span data-ttu-id="7f6ab-721">如果要根据文本字符串值测试属性，则文本字符串值必须用双引号引起来。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-721">If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks.</span></span> <span data-ttu-id="7f6ab-722">若要在标记中执行此操作，请将 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 子句值括在单引号中，如下面的示例中所示：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-722">To do this in markup, enclose the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clause value in single quotation marks, as shown in the following example:</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 <span data-ttu-id="7f6ab-723">若要在代码中使用文本字符串值进行测试，请使用适用于所使用的语言的转义符，以便插入双引号，如下面的示例所示：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-723">To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:</span></span>  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 <span data-ttu-id="7f6ab-724">如果要测试字符串是否大于或小于另一个字符串，必须使用类的方法， <xref:System.String> 而不是 `<` `>` 在列名称和字符串值之间使用或运算符。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-724">If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value.</span></span> <span data-ttu-id="7f6ab-725">下面的示例演示如何选择其类别值小于、小于或等于、大于或大于或等于 "体育" 的行：</span><span class="sxs-lookup"><span data-stu-id="7f6ab-725">The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to "Sports":</span></span>  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 <span data-ttu-id="7f6ab-726">你还可以使用类的其他方法 <xref:System.String> ，例如 <xref:System.String.StartsWith%2A> 、 <xref:System.String.EndsWith%2A> 和 <xref:System.String.Contains%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-726">You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id="7f6ab-727">有关如何比较字符串的详细信息，请参阅 [比较字符串](/dotnet/standard/base-types/comparing)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-727">For more information about how to compare strings, see [Comparing Strings](/dotnet/standard/base-types/comparing).</span></span> <span data-ttu-id="7f6ab-728">有关 Where 子句语法的详细信息，请参阅 [c # 运算符](/dotnet/csharp/language-reference/operators/) 和 [Where 子句](/dotnet/csharp/language-reference/keywords/where-clause)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-728">For more information about Where clause syntax, see [C# Operators](/dotnet/csharp/language-reference/operators/) and [where clause](/dotnet/csharp/language-reference/keywords/where-clause).</span></span>  
  
 <span data-ttu-id="7f6ab-729">除了基于你在创建网页时定义的静态值进行筛选以外，还可以根据在运行时计算的动态值进行筛选。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-729">In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time.</span></span> <span data-ttu-id="7f6ab-730">在这种情况下，可以在属性中包含一个命名参数， <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 作为值的占位符。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-730">In that case, you include a named parameter in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property that acts as a placeholder for the value.</span></span> <span data-ttu-id="7f6ab-731">然后，将具有匹配名称的参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-731">You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span>  
  
 <span data-ttu-id="7f6ab-732">或者，可以将属性设置 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 为 `true` ，并定义集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-732">Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-733">当 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 属性为时 `true` ，无需在属性中包含命名参数 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-733">When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="7f6ab-734">相反， <xref:System.Web.UI.WebControls.LinqDataSource> 控件会自动从属性中的参数生成 Where 子句 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-734">Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.</span></span>  
  
 <span data-ttu-id="7f6ab-735">有关如何筛选数据的详细信息，请参阅 [演练：使用 LinqDataSource 和 GridView 控件选择和筛选部分数据](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-735">For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-736">下面的示例演示如何根据静态条件筛选从查询返回的数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-736">The following example shows how to filter the data returned from a query based on a static condition.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 <span data-ttu-id="7f6ab-737">下面的示例演示如何根据用户在运行时提供的值来筛选数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-737">The following example shows how to filter the data based on a value that is provided by the user at run time.</span></span> <span data-ttu-id="7f6ab-738">在此示例中， <xref:System.Web.UI.WebControls.DropDownList> 控件和 <xref:System.Web.UI.WebControls.GridView> 控件显示在该页上。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-738">In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page.</span></span> <span data-ttu-id="7f6ab-739">当用户在控件中选择一个值时 <xref:System.Web.UI.WebControls.DropDownList> ， <xref:System.Web.UI.WebControls.LinqDataSource> 控件将仅从表中选择 `Products` `UserPrice` 值等于所选值的行。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-739">When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value.</span></span> <span data-ttu-id="7f6ab-740">然后，该 <xref:System.Web.UI.WebControls.GridView> 控件将显示筛选后的数据。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-740">The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f6ab-741">获取用于创建 Where 子句的参数集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-741">Gets the collection of parameters that is used to create the Where clause.</span></span></summary>
        <value><span data-ttu-id="7f6ab-742">用于创建 <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> 属性中 Where 子句的参数的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-742">A collection of the parameters that are used to create the Where clause in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f6ab-743"><xref:System.Web.UI.WebControls.LinqDataSource>控件使用集合中的参数 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 在运行时创建 Where 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-743">The <xref:System.Web.UI.WebControls.LinqDataSource> control uses parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to create the Where clause at run time.</span></span> <span data-ttu-id="7f6ab-744"><xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>当要以编程方式在 Where 子句中设置一个或多个条件时，可以将参数添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-744">You add parameters to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection when you want to programmatically set one or more of the conditions in the Where clause.</span></span> <span data-ttu-id="7f6ab-745">例如，您可以在数据库表中搜索姓氏等于控件值的记录 <xref:System.Web.UI.WebControls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-745">For example, you might search a database table for records with a last name equal to the value of a <xref:System.Web.UI.WebControls.TextBox> control.</span></span> <span data-ttu-id="7f6ab-746">在这种情况下，可将参数添加到 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 文本框值的集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-746">In that case, you add a parameter to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection for the text box value.</span></span>  
  
 <span data-ttu-id="7f6ab-747">如果在 Where 子句中无需在运行时设置值，则无需使用该 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-747">If you do not have to set a value at run time in the Where clause, you do not have to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.</span></span> <span data-ttu-id="7f6ab-748">可以在属性中定义要检索的字段 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-748">You can define the fields to retrieve in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property.</span></span> <span data-ttu-id="7f6ab-749">例如，若要从数据库表返回值，而该数据库表的 `LastName` 标记中等于 "Adams"，则将 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 属性设置为 `'LastName = "Adams"'` 不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-749">For example, to return values from a database table where `LastName` equals "Adams" in markup, set the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to `'LastName = "Adams"'` without any parameters.</span></span>  
  
 <span data-ttu-id="7f6ab-750">若要设置集合中的值 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> ，请为每个参数分配一个名称，然后在该参数的属性中添加占位符 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-750">To set values in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection, you assign a name to each parameter and then add a placeholder in the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property for that parameter.</span></span> <span data-ttu-id="7f6ab-751">在 Where 子句中，每个参数名称前面加上 @ 符号。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-751">In the Where clause, preface each parameter name with the @ symbol.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7f6ab-752">下面的示例演示如何使用 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 集合动态创建 Where 子句。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-752">The following example shows how to use the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection to dynamically create the Where clause.</span></span> <span data-ttu-id="7f6ab-753"><xref:System.Web.UI.WebControls.LinqDataSource>控件返回的所有记录的列中的值 `Price` 大于用户在控件中选择的值 <xref:System.Web.UI.WebControls.DropDownList> 。</span><span class="sxs-lookup"><span data-stu-id="7f6ab-753">The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
