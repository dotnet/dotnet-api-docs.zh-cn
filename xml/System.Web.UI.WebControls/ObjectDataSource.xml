<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f5133d67a9cb81d8545d3725dc14dea9ec84eed" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83949441" /></Metadata><TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type ObjectDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示为多层 Web 应用程序体系结构中的数据绑定控件提供数据的业务对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 本主题内容：

-   [介绍](#introduction)

-   [用途](#purpose)

-   [检索数据](#retrieving_data)

-   [执行数据操作](#performing_data_operations)

-   [筛选数据](#filtering_data)

-   [缓存](#caching)

-   [功能](#features)

-   [数据视图](#data_view)

-   [使用 LINQ to SQL](#using_linq_to_sql)

-   [声明性语法](#declarative_syntax)

<a name="introduction"></a>
## <a name="introduction"></a>介绍
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件适用于你创建的类。 创建检索和更新数据的方法，并向标记中的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件提供这些方法的名称。 在呈现或回发处理期间，<xref:System.Web.UI.WebControls.ObjectDataSource> 会调用您指定的方法。

 没有 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的可视呈现。 因此，<xref:System.Web.UI.WebControls.ObjectDataSource> 不支持视觉功能，如 <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> 或 <xref:System.Web.UI.DataSourceControl.SkinID%2A> 属性。

<a name="purpose"></a>
## <a name="purpose"></a>目的
 一种很常见的应用程序设计做法是将表示层与业务逻辑分离，并在业务对象中封装业务逻辑。 这些业务对象在表示层和数据层之间形成了一个不同的层，产生了三层应用程序体系结构。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件使开发人员可以使用 ASP.NET 数据源控件，同时保留其三层应用程序体系结构。

 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件使用反射来创建业务对象的实例，并对其调用方法以检索、更新、插入和删除数据。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性标识 <xref:System.Web.UI.WebControls.ObjectDataSource> 使用的类的名称。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件创建并销毁每个方法调用的类的实例;它在 Web 请求的生存期内不会将对象保存在内存中。 如果你使用的业务对象需要多个资源，或者创建和销毁开销较高，则这是一个重要的考虑因素。 使用昂贵的对象可能不是最佳的设计选择，但可以使用 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件控制对象的生命周期。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>和 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性标识的方法可以是实例方法或 `static` （`Shared`）方法。 如果 `static` 方法（`Shared` 在 Visual Basic 中），则不会创建业务对象的实例，并且不会引发 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

<a name="retrieving_data"></a>
## <a name="retrieving-data"></a>检索数据
 若要从业务对象中检索数据，请将 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性设置为用于检索数据的方法的名称。 如果该方法未返回 <xref:System.Collections.IEnumerable> 或 <xref:System.Data.DataSet> 对象，则运行时在 <xref:System.Collections.IEnumerable> 集合中包装对象。 如果方法签名具有参数，则可以将 <xref:System.Web.UI.WebControls.Parameter> 对象添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合，然后将这些对象绑定到要传递给 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法的值。 为了使 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件使用这些参数，这些参数必须与方法签名中的参数的名称和类型相匹配。 有关详细信息，请参阅[将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。

 只要调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件就会检索数据。 此方法提供对 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法的编程访问。 当调用其 `DataBind` 方法时，绑定到 <xref:System.Web.UI.WebControls.ObjectDataSource> 的控件会自动调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法。 如果设置数据绑定控件的 `DataSourceID` 属性，则控件会根据需要自动绑定到数据源中的数据。 设置 `DataSourceID` 属性是将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件绑定到数据绑定控件的建议方法。 另外，还可以设置 `DataSource` 属性，但必须显式调用数据绑定控件的 `DataBind` 方法。 您可以随时以编程方式调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法来检索数据。

 有关将数据绑定控件绑定到数据源控件的详细信息，请参阅[使用数据源控件绑定到数据](https://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)。

<a name="performing_data_operations"></a>
## <a name="performing-data-operations"></a>执行数据操作
 根据 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件处理的业务对象的功能，您可以执行数据操作，例如更新、插入和删除。 若要执行这些数据操作，请为要执行的操作设置适当的方法名称和任何关联参数。 例如，对于更新操作，将 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性设置为业务对象方法的名称，该方法执行更新并将任何所需参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与数据绑定控件关联，则由数据绑定控件添加参数。 在这种情况下，需要确保方法的参数名称与数据绑定控件中的字段名称匹配。 更新是在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 方法时执行的，无论是通过代码显式调用，还是由数据绑定控件自动执行。 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作遵循相同的常规模式。 假定业务对象一次一条记录执行这些类型的数据操作，而不是分批执行。

<a name="filtering_data"></a>
## <a name="filtering-data"></a>筛选数据
 如果数据作为 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象返回，则 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件可以筛选 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性检索的数据。 您可以使用格式字符串语法将 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性设置为筛选表达式，并将表达式中的值绑定到 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合中指定的参数。

<a name="caching"></a>
## <a name="caching"></a>Caching
 尽管 <xref:System.Web.UI.WebControls.ObjectDataSource> 不会在多个请求中保留业务对象的实例，但它可以缓存调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识的方法的结果。 在缓存数据时，对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的后续调用会返回缓存的数据，而不是创建业务对象并使用反射调用其 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 缓存使你可以避免创建对象并以 Web 服务器上的内存的代价调用其数据方法。 当 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true`时，<xref:System.Web.UI.WebControls.ObjectDataSource> 会自动缓存数据，<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性设置为缓存在丢弃之前存储数据的秒数。 还可以指定 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性和可选的 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 属性。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件允许缓存各种类型的数据，但不应缓存保留无法共享来服务多个请求（例如，打开的 <xref:System.Data.SqlClient.SqlDataReader> 对象）的资源或状态的对象，因为该对象的同一实例将用于为多个请求提供服务。

<a name="features"></a>
## <a name="features"></a>功能
 下表描述了 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的功能。

|功能|要求|
|----------------|------------------|
|选择|将 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性设置为业务对象方法的名称，该方法可选择数据，并以编程方式或通过使用数据绑定控件包含 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合中的任何必要参数。|
|排序|将 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 属性设置为带有排序条件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 方法中的参数的名称。|
|Filtering|将 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性设置为筛选表达式，并（可选）将任何参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合，以便在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时筛选数据。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法必须返回 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable>。|
|Paging|如果 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 方法包含要检索的最大记录数的参数和要检索的第一条记录的索引，则支持数据源分页。 必须分别在 "<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>" 和 "<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>" 属性中设置这些参数的名称。 即使 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件不支持直接在由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法中进行分页，数据绑定控件也可能能够执行分页。 数据绑定控件实现此目的的要求是，由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法返回实现 <xref:System.Collections.ICollection> 接口的对象。|
|更新|将 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性设置为用于更新数据的业务对象方法的名称，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合中包含所有必需的参数。|
|正在删除|将 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性设置为用于删除数据的业务对象方法或函数的名称，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中包含所有必需的参数。|
|插入|将 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性设置为业务对象方法的名称或插入数据的函数，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中包含所有必要的参数。|
|Caching|根据所需的缓存数据缓存行为，将 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true`，以及 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性。|

> [!NOTE]
>  当你使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 类来更新或插入数据时，在客户端上输入的字符串不会自动从客户端区域性格式转换为服务器区域性格式。 例如，客户端区域性可能将 DD/MM/YYYY 指定为日期格式，而服务器上的日期格式可能为 MM/DD/YYYY。 在这种情况下，10月5日，2009将作为5/10/2009 输入 <xref:System.Web.UI.WebControls.TextBox> 控件中，但将被解释为5月 10 2009 日。 2009年10月15日将输入为15/10/2009，并将被拒绝为无效日期。

<a name="data_view"></a>
## <a name="data-view"></a>数据视图
 与所有数据源控件一样，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件与数据源视图类相关联。 虽然 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件是页面开发人员用来处理数据的接口，但 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 类是数据绑定控件所使用的接口。 此外，<xref:System.Web.UI.WebControls.ObjectDataSourceView> 类描述数据源控件的功能，并执行实际工作。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件只有一个关联 <xref:System.Web.UI.WebControls.ObjectDataSourceView>，并且它始终命名为 "`DefaultView`"。 当 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> 方法公开 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象时，它的许多属性和方法会直接由 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件进行包装和公开。 在后台，<xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象执行所有数据操作，包括检索、插入、更新、删除、筛选数据和对数据进行排序。 有关详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSourceView>。

<a name="using_linq_to_sql"></a>
## <a name="using-linq-to-sql"></a>使用 LINQ to SQL
 可以将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与 LINQ to SQL 类结合使用。 为此，请将 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性设置为数据上下文类的名称。 还将 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>和 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 方法设置为数据上下文类中执行相应操作的方法。 您必须为 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件创建事件处理程序，才能取消对数据上下文类的释放。 此步骤是必需的，因为 LINQ to SQL 支持延迟执行，而 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件尝试在选择操作之后释放数据上下文。 有关如何创建 LINQ to SQL 类的详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。 有关如何取消数据上下文类的释放的示例，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

## <a name="using-the-entity-framework"></a>使用实体框架
 您还可以将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与实体框架结合使用。 有关详细信息，请参阅[使用实体框架和 ObjectDataSource 控件](https://go.microsoft.com/fwlink/?LinkId=209117)。

<a name="declarative_syntax"></a>
## <a name="declarative-syntax"></a>声明性语法

```
<asp:ObjectDataSource
    CacheDuration="string|Infinite"
    CacheExpirationPolicy="Absolute|Sliding"
    CacheKeyDependency="string"
    ConflictDetection="OverwriteChanges|CompareAllValues"
    ConvertNullToDBNull="True|False"
    DataObjectTypeName="string"
    DeleteMethod="string"
    EnableCaching="True|False"
    EnablePaging="True|False"
    EnableTheming="True|False"
    EnableViewState="True|False"
    FilterExpression="string"
    ID="string"
    InsertMethod="string"
    MaximumRowsParameterName="string"
    OldValuesParameterFormatString="string"
    OnDataBinding="DataBinding event handler"
    OnDeleted="Deleted event handler"
    OnDeleting="Deleting event handler"
    OnDisposed="Disposed event handler"
    OnFiltering="Filtering event handler"
    OnInit="Init event handler"
    OnInserted="Inserted event handler"
    OnInserting="Inserting event handler"
    OnLoad="Load event handler"
    OnObjectCreated="ObjectCreated event handler"
    OnObjectCreating="ObjectCreating event handler"
    OnObjectDisposing="ObjectDisposing event handler"
    OnPreRender="PreRender event handler"
    OnSelected="Selected event handler"
    OnSelecting="Selecting event handler"
    OnUnload="Unload event handler"
    OnUpdated="Updated event handler"
    OnUpdating="Updating event handler"
    runat="server"
    SelectCountMethod="string"
    SelectMethod="string"
    SkinID="string"
    SortParameterName="string"
    SqlCacheDependency="string"
    StartRowIndexParameterName="string"
    TypeName="string"
    UpdateMethod="string"
    Visible="True|False"
>
        <DeleteParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </DeleteParameters>
        <FilterParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </FilterParameters>
        <InsertParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </InsertParameters>
        <SelectParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </SelectParameters>
        <UpdateParameters>
                <asp:ControlParameter
                    ControlID="string"
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:CookieParameter
                    ConvertEmptyStringToNull="True|False"
                    CookieName="string"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:FormParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    FormField="string"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:Parameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:ProfileParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    PropertyName="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:QueryStringParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    QueryStringField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
                <asp:SessionParameter
                    ConvertEmptyStringToNull="True|False"
                    DefaultValue="string"
                    Direction="Input|Output|InputOutput|ReturnValue"
                    Name="string"
                    SessionField="string"
                    Size="integer"
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|
                        Single|Double|Decimal|DateTime|String"
                />
        </UpdateParameters>
</asp:ObjectDataSource>
```



## Examples
 本主题提供了包含源代码的 Visual Studio 网站项目：[下载](https://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838)。

 本部分显示 .aspx 页中标记的 <xref:System.Web.UI.WebControls.ObjectDataSource>，并显示它使用的业务对象。 示例是 .aspx 页。 它包含绑定到 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.GridView> 控件。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件标记指定业务对象的名称，并指定要为检索数据而调用的业务对象方法的名称。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]

 下面的示例演示 .aspx 页中 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件使用的业务对象。 （许多其他 <xref:System.Web.UI.WebControls.ObjectDataSource> 代码示例也使用此业务对象。）该示例包含以下两个基本类：

-   `EmployeeLogic` 类是 <xref:System.Web.UI.WebControls.ObjectDataSource> 使用的业务逻辑类。

-   `NorthwindEmployee` 类定义由 `EmployeeLogic` 类的 `GetAllEmployees` 方法返回的数据对象。

 提供额外的 `NorthwindDataException` 类是一种方便的方式。

 这组示例类适用于 Northwind 商贸数据库，可用于 Microsoft SQL Server 和 Microsoft Access。 若要获取完整的工作示例，必须使用所提供的 .aspx 页示例来编译并使用这些类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]

 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
    <related type="Article" href="https://msdn.microsoft.com/library/a806fa2c-fe6a-405f-869c-74e804a642ea">演练：到自定义业务对象的数据绑定</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 类的新实例。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSource : string * string -&gt; System.Web.UI.WebControls.ObjectDataSource" Usage="new System.Web.UI.WebControls.ObjectDataSource (typeName, selectMethod)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 使用的类的名称。</param>
        <param name="selectMethod"><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 为检索数据而调用的方法或函数的名称。</param>
        <summary>使用指定的类型名和数据检索方法名初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对于位于 Bin 或 App_Code 目录中的代码，或在全局程序集缓存中注册的代码的完全限定类型名称，`typeName` 参数的值可以是部分限定的类型。 如果使用全局程序集缓存，则必须将相应的引用添加到 Machine.config 或 web.config 配置文件的 `assemblies` 部分。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置以秒为单位的一段时间，数据源控件就在这段时间内缓存 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性检索到的数据。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 将 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性调用的结果缓存的秒数。 默认值为 0。 该值不能为负数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件支持数据缓存。 在缓存数据时，对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的调用将从缓存中检索数据，而不是从 <xref:System.Web.UI.WebControls.ObjectDataSource> 使用的业务对象中检索数据。 缓存过期后，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法从业务对象中检索数据，然后再次缓存数据。

 当 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true` 并且 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性设置为大于0的值时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将自动缓存数据，该值指示在丢弃缓存条目之前缓存存储数据的秒数。 值0表示无限长的缓存。

 缓存按持续时间和 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 设置的组合进行管制。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 值，则 <xref:System.Web.UI.WebControls.ObjectDataSource> 会在首次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时缓存数据，并将其保存在内存中，最多可为 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性指定的时间量。 如果需要内存，则数据可能在持续时间之前释放。 然后，在下一次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时刷新缓存。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 值，则数据源控件会在第一次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时缓存数据，但在每次对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的后续调用中，将重置其保存缓存的时间窗口。 如果自上一次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法以来没有任何活动的时间与 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性相等，则缓存过期。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象如何支持缓存。 第二个代码示例演示如何实现返回 <xref:System.Data.DataSet> 对象的包装方法，以启用 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象的缓存。

 下面的代码示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件如何支持缓存。 若要启用缓存，必须实现用于检索数据的方法，该方法由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识，以 <xref:System.Data.DataSet> 对象的形式返回数据。 在此示例中，<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true`，并设置 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性。 <xref:System.Web.UI.WebControls.ObjectDataSource> 将 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性返回的数据缓存30秒。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]

 下面的代码示例演示如何实现一个包装方法，该方法返回 <xref:System.Data.DataSet> 对象以启用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的缓存。 在 `EmployeeLogic` 类的基实现中，`GetAllEmployees` 方法返回 <xref:System.Collections.ArrayList> 对象。 添加一个名为 `GetAllEmployeesAsDataSet` 的包装方法，该方法将 `NorthwindEmployee` 数据作为 <xref:System.Data.DataSet>返回，而不是完全重构对象以使用 Web 窗体页上的 <xref:System.Web.UI.WebControls.ObjectDataSource>。

 此代码示例是为 <xref:System.Web.UI.WebControls.ObjectDataSource> 类提供的更大示例的一部分。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存的到期行为，该行为与持续时间组合在一起可以描述数据源控件所用缓存的行为。</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值之一。 默认为 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件支持数据缓存。 在缓存数据时，对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的调用将从缓存中检索数据，而不是从 <xref:System.Web.UI.WebControls.ObjectDataSource> 使用的业务对象中检索数据。 缓存过期后，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法从业务对象中检索数据，然后再次缓存数据。

 当 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true` 并且 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性设置为大于0的值时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将自动缓存数据，该值指示在丢弃缓存条目之前缓存存储数据的秒数。 值0指示无限长的缓存时间。

 缓存按持续时间和 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 设置的组合进行管制。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 值，则 <xref:System.Web.UI.WebControls.ObjectDataSource> 会在首次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时缓存数据，并将其保存在内存中，最多可为 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性指定的时间量。 如果需要内存，则数据可能在持续时间之前释放。 然后，在下一次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时刷新缓存。 如果将 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 值，则数据源控件会在第一次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时缓存数据，但会重置其保存缓存的时间窗口，以便每次对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的后续调用。 如果自上一次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法以来没有任何活动的时间与 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性相等，则缓存过期。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象如何支持筛选和缓存。 第二个代码示例演示如何实现返回 <xref:System.Data.DataSet> 对象的包装方法，以便使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象启用缓存和筛选。

 下面的代码示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件如何支持筛选和缓存。 若要启用筛选和缓存，必须实现用于检索数据的方法，该方法由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识，以 <xref:System.Data.DataSet> 对象的形式返回数据。 在此示例中，启用了缓存，因为 `EmployeeLogic` 对象将数据作为 <xref:System.Data.DataSet>返回，<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true`，并且 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性已设置。 <xref:System.Web.UI.WebControls.ObjectDataSource> 将 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性返回的数据缓存30秒。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]

 下面的代码示例演示如何实现一个包装方法，该方法返回 <xref:System.Data.DataSet> 对象以使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件启用缓存和筛选。 在 `EmployeeLogic` 类的基实现中，`GetAllEmployees` 方法返回 <xref:System.Collections.ArrayList>。 添加一个名为 `GetAllEmployeesAsDataSet` 的包装方法，该方法将 `NorthwindEmployee` 数据作为 <xref:System.Data.DataSet>返回，而不是完全重构对象以使用 Web 窗体页上的 <xref:System.Web.UI.WebControls.ObjectDataSource>。 此代码示例是为 <xref:System.Web.UI.WebControls.ObjectDataSource> 类提供的更大示例的一部分。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个用户定义的键依赖项，该键依赖项链接到数据源控件创建的所有数据缓存对象。</summary>
        <value>一个键，它标识所有由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 创建的缓存对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 属性可以设置为任意字符串值。

 当键到期时，所有缓存对象都显式到期。 这允许你以编程方式使由 <xref:System.Web.UI.WebControls.ObjectDataSource> 创建的缓存条目无效。

 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件支持数据缓存。 在缓存数据时，对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的调用将从缓存中检索数据，而不是从 <xref:System.Web.UI.WebControls.ObjectDataSource> 使用的业务对象中检索数据。 缓存过期后，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法从业务对象中检索数据，然后再次缓存数据。

 当 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true` 并且 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性设置为大于0的值时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将自动缓存数据，该值指示在丢弃缓存条目之前缓存存储数据的秒数。 值0表示无限长的缓存。

 可以设置 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 属性，以便在 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件创建的所有缓存项与键之间创建依赖关系。 可以通过使密钥过期，随时以编程方式使所有缓存条目过期。 将 <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> 方法与当前 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 值作为参数，从而使密钥过期。

 将为 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>和 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 属性的每个组合创建唯一的缓存条目。 如果多个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件使用相同的类型、方法和参数加载数据，则这些控件可以在这些方案中使用相同的缓存条目。



## Examples
 以下三个示例显示了一个网页、一个代码隐藏页类和一个数据访问类，该数据访问类从 Northwind 数据库的 Employees 表中检索记录。

 第一个示例显示一个网页，其中包含两个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件、一个 <xref:System.Web.UI.WebControls.DropDownList> 控件和一个 <xref:System.Web.UI.WebControls.DetailsView> 控件。 第一个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DropDownList> 控件用于从数据库检索和显示雇员姓名。 第二个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DetailsView> 控件用于检索和显示用户选择的员工记录。

 为 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件启用了缓存。 因此，只会从数据库中检索一次每条记录。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 属性设置为 "EmployeeDetails"，但任何字符串值都可以用作键。 该网页还包含一个 <xref:System.Web.UI.WebControls.Button> 控件，用户可单击该控件以使缓存的数据过期。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]

 第二个示例演示 <xref:System.Web.UI.Control.Load> 事件的处理程序，以及 <xref:System.Web.UI.WebControls.Button> 控件的 <xref:System.Web.UI.WebControls.Button.Click> 事件的处理程序。 <xref:System.Web.UI.Control.Load> 事件处理程序将创建一个注册表项，其中的键设置为 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 值。 <xref:System.Web.UI.WebControls.Button.Click> 事件处理程序将移除其键等于 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 值的缓存项。 删除缓存项后，所有依赖于该键的缓存数据都将过期。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]

 第三个示例显示与 Northwind 数据库交互的数据访问类。 类使用 LINQ 查询 Employees 表。 该示例需要一个表示 Northwind 数据库的 LINQ to SQL 类和 "Employees" 表。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是仅将新值传递给 <see langword="Update" /> 方法，还是将旧值和新值都传递给 <see langword="Update" /> 方法。</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 值之一。 默认为 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此属性确定是否将旧值和新值的参数应用于由 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性指定的方法。 例如，如果 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法返回 `Name` 和 `Number`的列的 <xref:System.Data.DataTable> 控件，并且 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 字段，则会为 `Name` 方法的 `Number` 和 `Update` 创建参数。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值，则将为 `Name`、`Number`、`original_Name`和 `original_Number`创建参数。 （原始值的参数的准确名称取决于 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性。）然后 <xref:System.Web.UI.WebControls.ObjectDataSource> 确定 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性中指定的方法是否具有匹配的参数。

 并发控制是一种技术，当多个客户端访问和操作相同数据时，数据存储使用该技术来控制如何在存储区中读取和更改数据。 例如，一个客户端读取数据并向用户显示数据，而另一个客户端读取相同的数据并将其显示给其他用户。 如果这两个用户更新数据并将其提交到数据存储，则可能会出现意外的结果，因为这两个客户端可能会为同一数据提供不同的值。 这被视为冲突。 通过将 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值，`Update` 方法可以将旧值和新值与原始数据源进行比较，以检测冲突并根据需要对其进行处理。

 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 属性。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertNullToDBNull : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示传递给更新、插入或删除操作的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 值是否由 <see cref="F:System.DBNull.Value" /> 控件自动从 <see langword="null" /> 转换为 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 值。</summary>
        <value>如果传递给 <see cref="T:System.Web.UI.WebControls.Parameter" /> 控件的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象中的任何 <see langword="true" /> 值自动转换为 <see cref="F:System.DBNull.Value" /> 值，则为 <see langword="null" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 不将 `null` 转换为 <xref:System.DBNull.Value> 值可能会导致运行时错误。 使用 <xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A> 属性来指示通过 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件将传递给更新、插入或删除操作的 <xref:System.Web.UI.WebControls.Parameter> 值自动从 `null` 转换为 <xref:System.DBNull.Value> 值。

 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataObjectTypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置某个类的名称，<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件将该类用于更新、插入或删除数据操作中的参数，而不是从数据绑定控件传递个别的值。</summary>
        <value>部分或完全限定类名，用于标识可由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用作 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 或 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作的参数的对象类型。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 您可以创建一个聚合多个数据字段值的对象，而不是指定传递到 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>和 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法的多个参数。 此对象将传递给方法，而不是多个参数。

 绑定到数据绑定控件的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的默认行为是：数据绑定控件为数据源中的每个参数创建一个 <xref:System.Web.UI.WebControls.Parameter> 的对象。 如果业务对象具有多个字段，则生成的方法还会有多个字段。 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性允许您指定一个类型，该类型具有每个数据字段的属性。 然后，运行时将创建一个对象并设置其所有属性，而不是向方法传递多个参数。 此对象将添加到方法调用的 parameters 集合。

 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性指定的类型必须具有无参数的无参数构造函数，因此 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件可以创建该类型的实例。 该类型还必须具有可设置的属性，这些属性允许 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件使用从数据绑定控件传递的值填充对象。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件上的属性名称应与数据绑定控件传递的值的参数名称完全匹配。

 设置 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性并且 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与数据绑定控件关联时，<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性指定的方法都必须具有在 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的一个参数。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 值，则 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性指定的方法必须具有 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的一个参数。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值，则 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性指定的方法必须具有 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的两个参数。 第一个参数包含原始值;第二个参数包含新值。

 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> 属性。



## Examples
 节包含两个代码示例。 第一个代码示例演示如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性实现将所有参数值组合为一个对象的类型。 第二个代码示例演示使用第一个代码示例中使用的两个类的网页。

 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性实现将所有参数值组合为一个对象的类型。 `AggregateData` 类的 select 方法返回一个 <xref:System.Data.DataTable> 对象，其中包含两个名为 `Name` 和 `Number`的列。 同样，`NewData` 类定义两个读/写属性，`Name` 和 `Number`。 `AggregateData` 类的 `Insert` 方法采用 `NewData`类型的一个参数。 <xref:System.Web.UI.WebControls.ObjectDataSource> 的 `TypeName` 属性设置为 `AggregateData`，<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性设置为 `NewData`。

 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]

 下面的代码示例演示使用前面的代码示例中使用的两个类的网页。

 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="Article" href="https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4">在 ObjectDataSource 控件中使用参数</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="objectDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 集合中的所有参数调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" /> 属性标识的方法，执行删除操作。</summary>
        <returns>如果在 <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> 事件中设置了 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> 的 <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> 属性，则为表示从基础数据存储中删除的行数的值，否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作之前，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件以检查参数的值，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作之前执行任何预处理。 若要执行删除操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象使用反射来创建由 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性标识的对象的实例。 然后，它使用任意关联的 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 属性调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性标识的方法。 如果删除参数来自关联的数据绑定控件，则将根据 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性创建参数的名称。 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作完成后，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 事件以检查任何返回值、输出参数和异常，并执行任何后续处理。

 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> 方法。

## <a name="data-bound-controls"></a>数据绑定控件
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 控件）关联时，无需从页代码中调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法。 改为直接通过数据绑定控件调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 事件以检查返回值或输出参数的值，或确定 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作完成后是否引发了异常。 可从与事件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 对象中获取返回值、输出参数和异常处理属性。

 您可以使用 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 属性来返回从 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法中删除的行数。 为此，请设置 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 属性。 如果从 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性指定的方法返回已删除的行数，则可以从 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> 属性中获取值。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 第二个代码示例演示了第一个代码示例中使用的 `EmployeeLogic` 类。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 最初，<xref:System.Web.UI.WebControls.GridView> 控件将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法来检索 `EmployeeLogic` 对象中的数据，以显示一组所有员工。 由于 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 属性设置为 `true`，<xref:System.Web.UI.WebControls.GridView> 控件会自动显示 "**删除**" 按钮。

 如果单击 "**删除**" 按钮，则将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性指定的方法和 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中指定的任何参数执行删除操作。 在此代码示例中，还执行了一些预处理和后处理步骤。 在执行操作之前调用 `NorthwindEmployeeDeleting` 委托来处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件，并在操作完成后调用 `NorthwindEmployeeDeleted` 委托来处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 事件，以执行异常处理。 在此代码示例中，如果引发了 `NorthwindDataException`，则它由 `NorthwindEmployeeDeleted` 方法进行处理。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]

 下面的代码示例演示了前面的代码示例中使用的 `EmployeeLogic` 类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以删除数据的方法或函数的名称。</summary>
        <value>一个字符串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于删除数据的方法或函数的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 假定业务对象每次删除一条记录，而不是成批删除数据。

 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> 属性。

 请确保为 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件配置的参数名称与 select 方法返回的列名称相匹配。

## <a name="object-lifetime"></a>对象生存期
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性标识的方法可以是实例方法，也可以是 `static` （`Shared` Visual Basic）方法。 如果它是实例方法，则每次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性时都会创建并销毁业务对象。 在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性之前，您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件来处理业务对象。 你还可以处理在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性后引发的 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。 如果业务对象实现 <xref:System.IDisposable> 接口，则在销毁对象之前调用 <xref:System.IDisposable.Dispose%2A> 方法。 如果该方法是 `static` （`Shared` Visual Basic）方法，则永远不会创建业务对象，也不能处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

## <a name="parameter-merging"></a>参数合并
 从三个源将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合：

-   在运行时从数据绑定控件。

-   从 `DeleteParameters` 元素中，以声明方式。

-   从 `Deleting` 方法，以声明方式。

 首先，将从数据绑定控件生成的所有参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中。 例如，如果 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件绑定到 <xref:System.Web.UI.WebControls.GridView> 控件，该控件的列 `Name` 和 `Number`，则 `Name` 和 `Number` 的参数将添加到集合中。 参数的确切名称取决于 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性。 这些参数的数据类型为 `string`。 接下来，将添加 `DeleteParameters` 元素中列出的参数。 如果找到 `DeleteParameters` 元素中与已在 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中的参数相同的参数，则会修改现有参数，使其与 `DeleteParameters` 元素中指定的参数匹配。 通常，这用于修改参数中数据的类型。 最后，你可以以编程方式在 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件中添加和移除参数，这会在 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法运行之前发生。 合并参数后，解析方法。 下一节将讨论方法解析。

## <a name="method-resolution"></a>方法解析
 调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法时，数据绑定控件中的数据字段、`DeleteParameters` 元素中以声明方式创建的参数以及在 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件处理程序中添加的参数都将合并。 （有关详细信息，请参阅前面的部分。）然后，<xref:System.Web.UI.WebControls.ObjectDataSource> 对象将尝试查找要调用的方法。 首先，它会查找一个或多个具有在 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性中指定的名称的方法。 如果未找到匹配项，则会引发 <xref:System.InvalidOperationException> 异常。 如果找到匹配项，则它将查找匹配的参数名称。 例如，假设 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性指定的类型有两个名为 `DeleteARecord`的方法。 一个 `DeleteARecord` 具有一个参数，`ID`，另一个 `DeleteARecord` 具有两个参数，`Name` 和 `Number`。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合只有一个名为 `ID`的参数，则将调用只包含 `ID` 参数的 `DeleteARecord` 方法。 解析方法时未检查参数类型。 参数的顺序并不重要。

 如果设置了 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性，则会以不同的方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource> 查找 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性中指定了名称的方法，该属性采用 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的一个参数。 在这种情况下，参数名称并不重要。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 第二个代码示例演示了第一个代码示例中使用的 `EmployeeLogic` 类。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 最初，<xref:System.Web.UI.WebControls.GridView> 控件将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法来检索 `EmployeeLogic` 对象中的数据，以显示一组所有员工。 由于 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 属性设置为 `true`，<xref:System.Web.UI.WebControls.GridView> 控件会自动显示 "**删除**" 按钮。

 如果单击 "**删除**" 按钮，则将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性指定的方法和 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中指定的任何参数执行删除操作。 在此代码示例中，还执行了一些预处理和后处理步骤。 调用 `NorthwindEmployeeDeleting` 委托在执行操作之前处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件，并在操作完成后调用 `NorthwindEmployeeDeleted` 委托来处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 事件，以执行异常处理。 在此示例中，如果引发了 `NorthwindDataException`，则由 `NorthwindDataException` 委托处理。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]

 下面的代码示例演示了前面的代码示例中使用的 `EmployeeLogic` 类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 方法使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 方法使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中包含的参数的名称和类型必须匹配 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 方法签名中的参数的名称和类型。 参数名称受 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性影响，并区分大小写。 集合中的参数取决于数据绑定控件中的数据、以声明方式指定的参数和以编程方式添加的参数。 有关详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 中的 "参数合并" 和[将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。

 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 属性检索与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象所包含的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> 属性。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 第二个代码示例演示了第一个代码示例中使用的 `EmployeeLogic` 类。

 下面的代码示例演示如何使用具有业务对象的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 属性和用于删除数据的 <xref:System.Web.UI.WebControls.GridView> 控件。 最初，<xref:System.Web.UI.WebControls.GridView> 控件将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法来检索 `EmployeeLogic` 对象中的数据，以显示一组所有员工。 由于 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 属性设置为 `true`，<xref:System.Web.UI.WebControls.GridView> 控件会自动显示 "**删除**" 按钮。

 如果单击 "**删除**" 按钮，则会调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件，其中包含两个参数。 一个参数 `EmpID`来自 <xref:System.Web.UI.WebControls.DataGrid> 控件，并基于 <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> 属性。 其他参数来自声明性 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 属性。 `EmployeeLogic` 类重载了 `DeleteEmployee` 方法。 一个重载采用 `NorthwindEmployee` 参数，另一个重载采用名为 `anID`的 <xref:System.Int32> 参数。 在 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件中，<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 属性中的条目将调整为仅包含一个名为 `anID` 的参数，其值来自 `original_EmpID`。 如果存在事件处理程序，则调用匹配的 `DeleteEmployee` 方法。

 下面的代码示例演示显示 <xref:System.Web.UI.WebControls.DataGrid> 控件并处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件的网页。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]

 下面的代码示例演示了前面的代码示例中使用的 `EmployeeLogic` 类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件以执行特定于您的应用程序的其他初始化，验证参数的值，或在 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件执行删除操作之前更改参数值。 参数可用作由 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 对象公开的 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 属性访问的 <xref:System.Collections.IDictionary> 集合。

 您可以通过将 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 的 <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> 属性设置为 `true`来取消删除操作。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 第二个代码示例演示了第一个代码示例中使用的 `EmployeeLogic` 类。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来删除数据。 最初，<xref:System.Web.UI.WebControls.GridView> 控件将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法来检索 `EmployeeLogic` 对象中的数据，以显示一组所有员工。 由于 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 属性设置为 `true`，<xref:System.Web.UI.WebControls.GridView> 控件会自动显示 "**删除**" 按钮。

 如果单击 "**删除**" 按钮，则将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性指定的方法和 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合中指定的任何参数执行删除操作。 在此代码示例中，还执行了一些预处理和后处理步骤。 调用 `NorthwindEmployeeDeleting` 委托在执行操作之前处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 事件，并在操作完成后调用 `NorthwindEmployeeDeleted` 委托来处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 事件，以执行异常处理。 在此代码示例中，如果引发了 `NorthwindDataException`，则它由 `NorthwindEmployeeDeleted` 方法进行处理。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]

 下面的代码示例演示了前面的代码示例中使用的 `EmployeeLogic` 类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件是否启用数据缓存。</summary>
        <value>如果为数据源控件启用数据缓存，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件支持数据缓存。 在缓存数据时，调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法将从缓存中检索数据，而不是 <xref:System.Web.UI.WebControls.ObjectDataSource> 创建业务对象的实例并调用其数据方法。 缓存过期后，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法从业务对象中检索数据，然后再次缓存数据。

 当 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 属性设置为 `true` 并且 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 属性设置为大于0的值时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将自动缓存数据，该值指示在丢弃缓存条目之前缓存存储数据的秒数。 值0表示无限长的缓存。



## Examples
 以下三个示例显示了一个网页、一个代码隐藏页类和一个数据访问类，该数据访问类从 Northwind 数据库的 Employees 表中检索记录。

 第一个示例显示一个网页，其中包含两个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件、一个 <xref:System.Web.UI.WebControls.DropDownList> 控件和一个 <xref:System.Web.UI.WebControls.DetailsView> 控件。 第一个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DropDownList> 控件用于从数据库检索和显示雇员姓名。 第二个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DetailsView> 控件用于检索和显示用户选择的员工记录。

 为 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件启用了缓存。 因此，只会从数据库中检索一次每条记录。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 属性设置为 "EmployeeDetails"，但任何字符串值都可以用作键。 该网页还包含一个 <xref:System.Web.UI.WebControls.Button> 控件，用户可单击该控件以使缓存的数据过期。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]

 第二个示例演示 <xref:System.Web.UI.Control.Load> 事件的处理程序，以及 <xref:System.Web.UI.WebControls.Button> 控件的 <xref:System.Web.UI.WebControls.Button.Click> 事件的处理程序。 <xref:System.Web.UI.Control.Load> 事件处理程序将创建一个注册表项，其中的键设置为 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 值。 <xref:System.Web.UI.WebControls.Button.Click> 事件处理程序将移除其键等于 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 值的缓存项。 删除缓存项后，所有依赖于该键的缓存数据都将过期。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]

 第三个示例显示与 Northwind 数据库交互的数据访问类。 类使用 LINQ 查询 Employees 表。 该示例需要一个表示 Northwind 数据库的 LINQ to SQL 类和 "Employees" 表。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">当由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> 属性指定的方法返回 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 时，会将 <see cref="T:System.Data.Common.DbDataReader" /> 属性设置为 <see langword="true" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePaging : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示数据源控件是否支持对它检索的数据集进行分页。</summary>
        <value>如果数据源控件通过它检索的数据支持分页，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通过设置 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 的 "<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>"、"<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>"、"<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>" 和 "<xref:System.Web.UI.WebControls.ObjectDataSource>" 属性，然后在业务对象中使用正确的参数定义 select 方法，可处理 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件进行分页。 如果将 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性设置为 `true`，则 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合将为请求的第一行包含两个附加参数，并为请求的行数提供两个参数。 这两个参数的命名方式由 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性定义。 `Select` 方法应从指定索引处开始，返回请求的行数。 由于数据可能不会被页面大小平均分割，因此最后一页可能包含较少的行。 因此，所请求的行数实际上是返回的最大行数。

 如果对关联的数据绑定控件启用了分页，则数据绑定控件将调用 `Select` 方法，该方法具有所需的起始索引和行数。 此外，如果设置 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性，数据绑定控件将在呈现页导航控件之前调用方法。 例如，如果某个 <xref:System.Web.UI.WebControls.GridView> 控件的页大小启用了分页，而该控件的页大小为5，并且由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性指定的方法返回20个，则在页导航中只显示4个页。

 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性委托给 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> 属性。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够选择页面中显示的记录数。

 网页包含 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性设置为 `true`的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性设置为方法的名称，该方法返回查询中的记录总数。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性和 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 属性设置为 Select 方法中使用的参数的名称。 此页还包含一个 <xref:System.Web.UI.WebControls.DropDownList> 控件。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]

 第二个示例显示 <xref:System.Web.UI.WebControls.DropDownList> 控件的 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 事件的处理程序。 处理程序中的代码将 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 属性设置为用户的选择。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]

 第三个示例显示了从 Customers 表检索数据的数据访问类。 它包括一个名为 `GetSubsetOfEmployees`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性。 该示例还包括一个名为 `GetEmployeeCount`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性。 类使用 LINQ 查询 Customers 表。 该示例需要一个表示 Northwind 数据库和 Customers 表的 LINQ to SQL 类。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性指定的方法时应用的筛选表达式。</summary>
        <value>一个字符串，表示在使用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性标识的方法或函数检索数据时应用的筛选表达式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 仅当 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件才支持筛选数据。

 用于 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性的语法是格式字符串样式表达式。 筛选表达式语法与 <xref:System.Data.DataColumn.Expression%2A> 属性接受的语法相同。 如果将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合，还可以包含格式字符串占位符。 例如，在要替换参数值的表达式中包含 `"{0}"`。 占位符根据 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合中参数的索引进行替换。

 可以在 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性中包含参数。 如果参数的类型是字符串或字符类型，则将参数括在单引号内。 如果参数是数值类型，则不需要引号。

 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合包含为在 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性中找到的占位符计算的参数。

 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> 属性。

> [!NOTE]
>  应该验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换为筛选表达式，并将其应用于 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回的 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象。 如果使用 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性作为安全措施来限制返回的项目数，则必须在进行筛选之前验证参数值。



## Examples
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件显示筛选的数据，以便从中间层业务对象中检索数据，并使用 <xref:System.Web.UI.WebControls.GridView> 控件来显示结果。 仅当检索数据的方法将其检索为 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件才能筛选数据。 出于此原因，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识将数据作为 <xref:System.Data.DataSet>检索的业务对象方法。

 此代码示例由 <xref:System.Web.UI.WebControls.TextBox> 控件、<xref:System.Web.UI.WebControls.GridView> 控件、<xref:System.Web.UI.WebControls.ObjectDataSource> 控件和**提交**按钮组成。 默认情况下，将使用其中一个 Northwind 商贸员工的名称填充 <xref:System.Web.UI.WebControls.TextBox>。 <xref:System.Web.UI.WebControls.GridView> 显示 <xref:System.Web.UI.WebControls.TextBox>中的名称所标识的员工的相关信息。 若要检索另一个雇员的数据，请在 <xref:System.Web.UI.WebControls.TextBox>中输入雇员的全名，然后单击 "**提交**" 按钮。

 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性指定一个表达式，该表达式用于筛选由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法检索的数据。 它使用计算结果为 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合中包含的参数的参数占位符。 在此示例中，参数占位符由单引号界定，因为参数的类型是可能包含空格的字符串类型。 如果参数的类型是数值或日期类型，则不需要用到边界引号。

> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的中间层业务对象的示例。 此代码示例包含两个基本类：

-   `EmployeeLogic` 类，该类封装业务逻辑。

-   `NorthwindEmployee` 类，该类是一个仅包含从数据层加载和保存数据所需的基本功能的模型类。

 为简单起见，`EmployeeLogic` 类创建一组静态数据，而不是从数据层检索数据。 它在此示例中也很有帮助，因为示例需要提供 Northwind 商贸员工的全名才能演示筛选。 对于完整的工作示例，必须使用所提供的 Web 窗体代码示例来编译并使用这些类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">设置了 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 属性，但 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 方法没有返回 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>执行筛选操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering> 事件，以便在 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件执行筛选操作之前对筛选器参数值执行验证操作。 您可以通过将 <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> 的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `true`来取消所选操作。 仅当设置了 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性时才引发事件。

 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType> 事件委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType> 事件。

> [!IMPORTANT]
>  应该验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换为筛选表达式，并将其应用于 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回的 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象。 如果使用 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性作为安全措施来限制返回的项目数，则必须在进行筛选之前验证参数值。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 字符串中的任何参数占位符关联的参数的集合。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，它包含与在 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 属性中找到的任何参数占位符相关联的一组参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 仅当 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件才支持筛选数据。

 用于 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 的语法是格式字符串样式表达式。 筛选表达式语法与 <xref:System.Data.DataColumn.Expression%2A> 属性接受的语法相同。 如果将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合，还可以包含格式字符串占位符。 例如，在要替换参数值的表达式中包含 `"{0}"`。 占位符根据 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合中参数的索引进行替换。

 可以在 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性中包含参数。 如果参数为字符串或字符类型，则将参数括在单引号内。 如果参数是数值类型，则不需要引号。

 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 属性检索与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象所包含的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> 属性。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象显示筛选的数据，以便从中间层业务对象中检索数据，并使用 <xref:System.Web.UI.WebControls.GridView> 控件来显示结果。 第二个代码示例提供了在第一个代码示例中使用的中间层业务对象的示例。

 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件显示筛选的数据，以便从中间层业务对象中检索数据，并使用 <xref:System.Web.UI.WebControls.GridView> 控件来显示结果。 仅当检索数据的方法将其检索为 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件才能筛选数据。 出于此原因，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识将数据作为 <xref:System.Data.DataSet>检索的业务对象方法。

 此代码示例由 <xref:System.Web.UI.WebControls.TextBox> 控件、<xref:System.Web.UI.WebControls.GridView> 控件、<xref:System.Web.UI.WebControls.ObjectDataSource> 控件和**提交**按钮组成。 默认情况下，将使用其中一个 Northwind 商贸员工的名称填充 <xref:System.Web.UI.WebControls.TextBox>。 <xref:System.Web.UI.WebControls.GridView> 显示 <xref:System.Web.UI.WebControls.TextBox>中的名称所标识的员工的相关信息。 若要检索另一个雇员的数据，请在 "<xref:System.Web.UI.WebControls.TextBox>中输入雇员的全名，然后单击"**提交**"按钮。

 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性指定一个表达式，该表达式用于筛选 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性检索的数据。 它使用计算结果为 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合中包含的参数的参数占位符。 在此示例中，参数占位符由单引号界定，因为参数的类型是可能包含空格的字符串类型。 如果参数的类型是数值或日期类型，则不需要用到边界引号。 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 集合包含一个参数 <xref:System.Web.UI.WebControls.FormParameter>，该参数绑定到 <xref:System.Web.UI.WebControls.TextBox> 控件。

> [!IMPORTANT]
>  应该验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换为筛选表达式，并将其应用于 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回的 <xref:System.Data.DataView> 对象。 如果使用 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性作为安全措施来限制返回的项目数，则必须在进行筛选之前验证参数值。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的中间层业务对象的示例。 此代码示例包含两个基本类：

-   `EmployeeLogic` 类，该类封装业务逻辑。

-   `NorthwindEmployee` 类，该类是一个仅包含从数据层加载和保存数据所需的基本功能的模型类。

 为简单起见，`EmployeeLogic` 类创建一组静态数据，而不是从数据层检索数据。 它在此示例中也很有帮助，因为示例需要提供 Northwind 商贸员工的全名才能演示筛选。 对于完整的工作示例，必须使用所提供的 Web 窗体代码示例来编译并使用这些类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">您设置了 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 属性，但 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 方法没有返回 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="objectDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要检索的视图的名称。 由于 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 只支持一个视图，因此 <paramref name="viewName" /> 被忽略。</param>
        <summary>检索与数据源控件关联的命名数据源视图。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> 关联的名为 <see langword="DefaultView" /> 的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件仅支持一个数据源视图。 与所有数据源视图对象一样，与数据源控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 定义其功能，执行从基础数据存储检索数据所需的所有工作，并执行排序、插入、删除和更新等操作。

 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> 方法旨在通过数据绑定控件（而不是页代码）进行调用。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的 <paramref name="viewName" /> 为 <see langword="null" /> 或 <see langword="DefaultView" /> 以外的值。</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="objectDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索名称的集合，这些名称表示与 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象关联的视图对象的列表。</summary>
        <returns>包含视图名称的 <see cref="T:System.Collections.ICollection" />，这些视图与 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 关联。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件在其基础数据上仅支持一个名为 `DefaultView`的视图。 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> 方法返回这一个视图名称的单元素集合。

 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> 方法旨在通过数据绑定控件（而不是页代码）进行调用。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="objectDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 属性标识的方法和 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" /> 集合中的所有参数，执行插入操作。</summary>
        <returns>一个表示插入到基础数据存储中的行数的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作之前，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件以检查参数的值，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作之前执行任何预处理。 若要执行插入操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象使用反射来创建由 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性标识的对象的实例。 然后，它使用任意关联的 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 属性调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作完成后，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 事件以检查任何返回值、输出参数和异常，并执行任何后续处理。

 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> 方法。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。

## <a name="data-bound-controls"></a>数据绑定控件
 当 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 控件）关联时，无需从页代码中调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法。 改为直接通过数据绑定控件调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/a806fa2c-fe6a-405f-869c-74e804a642ea">演练：到自定义业务对象的数据绑定</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 事件以检查返回值或输出参数的值，或确定 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作完成后是否引发了异常。 可从与事件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 对象中获取返回值、输出参数和异常处理属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件以执行特定于您的应用程序的其他初始化，验证参数的值，或在 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件执行插入操作之前更改参数值。 参数可用作由 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 对象公开的 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 属性访问的 <xref:System.Collections.IDictionary> 集合。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.DetailsView> 控件结合使用以插入数据。 第二个代码示例提供了在第一个代码示例中使用的中间层业务对象的示例。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.DetailsView> 控件结合使用以插入数据。 最初，<xref:System.Web.UI.WebControls.DetailsView> 显示新的 `NorthwindEmployee` 记录以及自动生成的 "**插入**" 按钮。 在 <xref:System.Web.UI.WebControls.DetailsView> 控件的字段中输入数据后，单击 "**插入**" 按钮。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识执行插入操作的方法。

 在此示例中，`UpdateEmployeeInfo` 方法用于执行插入;但是，它需要 `NorthwindEmployee` 参数才能插入数据。 出于此原因，<xref:System.Web.UI.WebControls.DetailsView> 控制自动传递的字符串集合是不够的。 `NorthwindEmployeeInserting` 委托是处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件的 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> 对象，它使你能够在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作之前操作输入参数。 由于 `UpdateEmployeeInfo` 方法需要将 `NorthwindEmployee` 对象作为参数，因此将使用字符串的集合创建一个参数，并使用该方法所需的参数名称（`ne`）将其添加到 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 集合。 使用现有的中间层对象作为数据源时，可以执行如下所述的步骤，这些类型和方法不是专门用于 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的类型和方法。

 执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作时，将调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识的方法。 如果对象的 `Insert` 方法具有包含参数的方法签名，则 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合必须包含名称与方法签名参数相匹配的参数，<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法才能成功完成。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的中间层业务对象的示例。 此代码示例包含两个基本类：

-   `EmployeeLogic` 类，该类是一个封装业务逻辑的无状态类。

-   `NorthwindEmployee` 类，该类是一个仅包含从数据层加载和保存数据所需的基本功能的模型类。

 提供额外的 `NorthwindDataException` 类是一种方便的方式。 若要获取完整的工作示例，必须编译并使用这些类。 不完全实现 `UpdateEmployeeInfo` 方法，因此当您试验此示例时，不会将数据插入 Northwind 商贸数据库中。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以插入数据的方法或函数的名称。</summary>
        <value>一个字符串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于插入数据的方法或函数的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 假定业务对象每次插入一条记录，而不是在批处理中插入数据。

 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> 属性。

## <a name="object-lifetime"></a>对象生存期
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识的方法可以是实例方法，也可以是 `static` （`Shared` Visual Basic）方法。 如果它是实例方法，则每次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性指定的方法时都会创建并销毁业务对象。 在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性之前，您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件来处理业务对象。 你还可以处理在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 属性指定的方法之后引发的 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。 如果业务对象实现 <xref:System.IDisposable> 接口，则在销毁对象之前调用 <xref:System.IDisposable.Dispose%2A> 方法。 如果该方法是 `static` 的（`Shared` Visual Basic），则永远不会创建业务对象，也不能处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

## <a name="parameter-merging"></a>参数合并
 从三个源将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合：

-   在运行时从数据绑定控件。

-   从 `InsertParameters` 元素中，以声明方式。

-   从 `Inserting` 方法，以编程方式。

 首先，将从数据绑定控件生成的所有参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中。 例如，如果 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件绑定到 <xref:System.Web.UI.WebControls.GridView> 控件，该控件具有 `Name` 和 `Number`的列，则 `Name` 和 `Number` 的参数将添加到集合中。 这些参数的数据类型为 `string`。 接下来，将添加 `InsertParameters` 元素中列出的参数。 如果找到 `InsertParameters` 元素中与已在 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中的参数相同的参数，则会修改现有参数，使其与 `InsertParameters` 元素中指定的参数匹配。 通常，这用于修改参数中数据的类型。 最后，你可以以编程方式在 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件中添加和移除参数，这会在 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法运行之前发生。 合并参数后，解析方法。 下一节将讨论方法解析。

> [!IMPORTANT]
>  你应验证从客户端接收的任何参数值。 运行时只需将参数值替换为 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性即可。

## <a name="method-resolution"></a>方法解析
 调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法时，数据绑定控件中的数据字段、`InsertParameters` 元素中以声明方式创建的参数以及在 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件处理程序中添加的参数都将合并。 （有关详细信息，请参阅前面的部分。）然后，<xref:System.Web.UI.WebControls.ObjectDataSource> 对象将尝试查找要调用的方法。 首先，它会查找一个或多个具有在 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性中指定的名称的方法。 如果未找到匹配项，则会引发 <xref:System.InvalidOperationException> 异常。 如果找到匹配项，则它将查找匹配的参数名称。 例如，假设 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性指定的类型有两个名为 `InsertARecord`的方法。 一个 `InsertARecord` 具有一个参数，`ID`，另一个 `InsertARecord` 具有两个参数，`Name` 和 `Number`。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合只有一个名为 `ID`的参数，则将调用只包含 `ID` 参数的 `InsertARecord` 方法。 解析方法时未检查参数类型。 参数的顺序并不重要。

 如果设置了 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性，则会以不同的方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource> 查找 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性中指定了名称的方法，该属性采用 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的一个参数。 在这种情况下，参数名称并不重要。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.DetailsView> 控件结合使用以插入数据。 第二个代码示例提供了在第一个代码示例中使用的中间层业务对象的示例。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.DetailsView> 控件结合使用以插入数据。 最初，<xref:System.Web.UI.WebControls.DetailsView> 显示新的 `NorthwindEmployee` 记录以及自动生成的 "**插入**" 按钮。 在 <xref:System.Web.UI.WebControls.DetailsView> 控件的字段中输入数据后，单击 "**插入**" 按钮。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识执行插入操作的方法。

 在此示例中，`UpdateEmployeeInfo` 方法用于执行插入;但是，它需要 `NorthwindEmployee` 参数才能插入数据。 出于此原因，<xref:System.Web.UI.WebControls.DetailsView> 控制自动传递的字符串集合是不够的。 `NorthwindEmployeeInserting` 委托是处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 事件的 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> 对象，它使你能够在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作之前操作输入参数。 由于 `UpdateEmployeeInfo` 方法需要将 `NorthwindEmployee` 对象作为参数，因此将使用字符串的集合创建一个参数，并使用该方法所需的参数名称（`ne`）将其添加到 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 集合。 使用现有的中间层对象作为数据源时，可以执行如下所述的步骤，这些类型和方法不是专门用于 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的类型和方法。

 执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作时，将调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识的方法。 如果对象的 `Insert` 方法具有包含参数的方法签名，则 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合必须包含名称与方法签名参数相匹配的参数，<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法才能成功完成。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的中间层业务对象的示例。 此代码示例包含两个基本类：

-   `EmployeeLogic` 类，该类是一个封装业务逻辑的无状态类。

-   `NorthwindEmployee` 类，该类是一个仅包含从数据层加载和保存数据所需的基本功能的模型类。

 提供额外的 `NorthwindDataException` 类是一种方便的方式。 若要获取完整的工作示例，必须编译并使用这些类。 不完全实现 `UpdateEmployeeInfo` 方法，因此当您试验此示例时，不会将数据插入 Northwind 商贸数据库中。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 属性使用的参数。</summary>
        <value>包含由 <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 属性标识的方法所使用的参数的 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中包含的参数的名称和类型必须匹配 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性签名中的参数的名称和类型。 参数名称区分大小写。 在使用提供参数的数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 和 <xref:System.Web.UI.WebControls.DetailsView> 控件）时，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件会自动将集合中显式指定的所有参数与数据绑定控件提供的参数合并。 这一点很重要，因为数据绑定控件始终将其参数作为 <xref:System.String> 类型提供，如果方法签名包含数字或日期类型，则必须在具有正确类型的 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中显式包含一个参数。 否则，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将根据集合中的参数定义的类型尝试强制转换参数。 有关详细信息，请参阅[将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。

 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 属性检索与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 包含的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> 属性。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.DetailsView> 控件结合使用以插入数据。 第二个代码示例提供了在第一个代码示例中使用的 `Insert` 方法的示例实现。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.DetailsView> 控件结合使用以插入数据。 最初，<xref:System.Web.UI.WebControls.DetailsView> 显示文本框，您可以在其中输入新 `NorthwindEmployee` 记录的数据以及自动生成的 "**插入**" 按钮。 在 <xref:System.Web.UI.WebControls.DetailsView> 控件的字段中输入数据后，单击 "**插入**" 按钮。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识执行插入操作的方法。

 单击 "**插入**" 按钮时，将使用 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性指定的方法和 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中指定的任何参数执行该操作。 在此代码示例中，在与监察员 ID 相对应的 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合中指定一个参数。 这是因为，即使 ID 作为 <xref:System.Web.UI.WebControls.BoundField> 对象显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件的 <xref:System.Web.UI.WebControls.GridView.Rows%2A> 集合中，它也将作为字符串传递到 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件。 通过将其显式添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合，并将其 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 属性设置为 <xref:System.TypeCode.Int32> 值，它将作为 <xref:System.Int32>（而不是字符串）通过 <xref:System.Web.UI.WebControls.ObjectDataSource> 将其正确传递给方法。

 执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作时，将调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性标识的方法。 如果对象的 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法具有包含参数的方法签名，则 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 集合必须包含名称与方法签名参数匹配的参数，<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 方法才能成功完成。

> [!IMPORTANT]
>  你应验证从客户端接收的任何参数值。 运行时只需将参数值替换为 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 属性即可。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的 `Insert` 方法的示例实现。 将 `InsertNewEmployeeWrapper` 方法添加到 <xref:System.Web.UI.WebControls.ObjectDataSource> 类概述中提供的 `EmployeeLogic` 中间层对象，使对象能够更轻松地在 Web 方案中与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件一起工作，而无需对实际的业务逻辑进行重大的重写。

 若要运行该示例，必须在 <xref:System.Web.UI.WebControls.ObjectDataSource> 类概述中提供 `NorthwindEmployee` 类。 此示例仅演示了如何使用参数将 <xref:System.Web.UI.WebControls.ObjectDataSource> 连接到用于获取新数据库记录的数据的业务对象方法。 此示例不会将记录添加到数据库，因为 `NorthwindEmployee` 类的 `Save` 方法不包括用于更新数据库的代码。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="objectDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">包含控件的已保存视图状态值的对象。</param>
        <summary>加载以前保存的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法主要由 .NET Framework 基础结构使用，不应在代码中直接使用。 不过，控件开发人员可以重写此方法，以指定自定义服务器控件如何还原其视图状态。 有关详细信息，请参阅[ASP.NET 状态管理概述](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100))。

 <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A> 方法用于加载以前保存的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的视图状态。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" /> 方法主要由控件开发人员在扩展 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件时使用。</para></block>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRowsParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置业务对象数据检索方法参数的名称，该参数用于指示要检索的数据源分页支持的记录数。</summary>
        <value>用于指示要检索的记录数的 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 参数名。 默认值为<c>"maximumRows"</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性用于支持数据源分页。 有关 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件如何支持分页的信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。

 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> 属性。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够选择页面中显示的记录数。

 网页包含 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性设置为 `true`的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性设置为方法的名称，该方法返回查询中的记录总数。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性和 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 属性设置为 Select 方法中使用的参数的名称。 此页还包含一个 <xref:System.Web.UI.WebControls.DropDownList> 控件。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]

 第二个示例显示 <xref:System.Web.UI.WebControls.DropDownList> 控件的 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 事件的处理程序。 处理程序中的代码将 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 属性设置为用户的选择。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]

 第三个示例显示了从 Customers 表检索数据的数据访问类。 它包括一个名为 `GetSubsetOfEmployees`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性。 该示例还包括一个名为 `GetEmployeeCount`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性。 类使用 LINQ 查询 Customers 表。 该示例需要一个表示 Northwind 数据库和 Customers 表的 LINQ to SQL 类。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 属性标识的对象之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 事件，以便调用业务对象上的其他方法、设置属性或执行特定于业务对象的其他初始化，<xref:System.Web.UI.WebControls.ObjectDataSource> 对象将调用业务对象数据方法来执行数据操作。 对象的引用由 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 属性访问，该属性由 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> 对象公开。

 如果标识用于执行数据操作的方法是 `static` （`Shared` 在 Visual Basic 中），则永远不会引发 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 事件。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 属性标识的对象之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果标识用于执行数据操作的方法是 `static` （`Shared` 在 Visual Basic 中），则永远不会引发 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 事件。

 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件将自动调用业务对象的无参数构造函数，以使用反射来创建它的实例。 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件以显式调用另一个构造函数，并将生成的对象实例设置为关联 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来显示信息。 第二个代码示例提供了在第一个代码示例中使用的中间层业务对象。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来显示信息。 对于您的网页执行的每个数据操作，都可以使用非常昂贵的业务对象（就时间或资源而言）。 处理昂贵对象的一种方法是创建一次实例，然后将其缓存起来进行后续操作，而不是为每个数据操作创建并销毁它。

> [!NOTE]
>  在生产应用程序中，多个请求可能会同时使用同一个实例。 因此，需要在线程安全的方式下实现该对象。

 此代码示例演示了此模式。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件以首先检查某个对象的缓存，并且仅创建该对象的实例（如果尚未缓存）。 然后，处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件以便缓存业务对象以供将来使用，而不是将其销毁。 在此代码示例中，将 <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> 属性设置为 `true`，以指示 <xref:System.Web.UI.WebControls.ObjectDataSource> 不调用对象上的 <xref:System.IDisposable.Dispose%2A> 方法。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的中间层业务对象示例。 此代码示例由 `EmployeeLogic` 类定义的基本业务对象组成，该对象是一个封装业务逻辑的有状态类。 若要获取完整的工作示例，必须将此代码编译为库，并从 ASP.NET 页（.aspx 文件）使用这些类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberSignature Language="F#" Value="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " Usage="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在丢弃由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 属性标识的对象之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件始终在丢弃业务对象的实例之前引发。 如果业务对象实现 <xref:System.IDisposable> 接口，则在引发此事件后调用 <xref:System.IDisposable.Dispose%2A> 方法。

 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件，以便调用对象上的其他方法、设置属性或在销毁对象之前执行特定于对象的清理。 对象的引用由 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 属性访问，该属性由 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> 对象公开。

 将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与 LINQ to SQL 类结合使用时，必须在 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件的处理程序中取消对数据上下文类的释放。 此步骤是必需的，因为 LINQ to SQL 支持延迟执行，而 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件尝试在选择操作之后释放数据上下文。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来显示信息。 第二个代码示例提供了在第一个代码示例中使用的中间层业务对象。

 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与业务对象和 <xref:System.Web.UI.WebControls.GridView> 控件结合使用来显示信息。 对于您的网页执行的每个数据操作，都可以使用非常昂贵的业务对象（就时间或资源而言）。 处理昂贵对象的一种方法是创建一次实例，然后将其缓存起来进行后续操作，而不是为每个数据操作创建并销毁它。 此示例演示了此模式。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件以便首先检查某个对象的缓存，并仅创建该对象的实例（如果尚未缓存）。 然后，处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件以便缓存业务对象以供将来使用，而不是将其销毁。 在此代码示例中，将 <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> 属性设置为 `true`，以指示 <xref:System.Web.UI.WebControls.ObjectDataSource> 不调用对象上的 <xref:System.IDisposable.Dispose%2A> 方法。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]

 下面的代码示例提供了前面的代码示例使用的中间层业务对象示例。 此代码示例由 `EmployeeLogic` 类定义的基本业务对象组成，该对象是一个封装业务逻辑的有状态类。 若要获取完整的工作示例，必须将此代码编译为库，并从 ASP.NET 页（.aspx 文件）使用这些类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]

 下面的示例演示了在将 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与 LINQ to SQL 类结合使用时如何处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

```vb
Public Sub ExampleObjectDisposing(ByVal sender As Object, _
        ByVal e As ObjectDataSourceDisposingEventArgs)
    e.Cancel = True
End Sub
```

```csharp
public void ExampleObjectDisposing(object sender,
        ObjectDataSourceDisposingEventArgs e)
{
    e.Cancel = true;
}
```

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个格式字符串，该字符串应用于传递给 <see langword="Delete" /> 或 <see langword="Update" /> 方法的原始值的参数名称。</summary>
        <value>一个表示格式字符串的字符串，它应用于传递给 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 方法的任何 <paramref name="oldValues" /> 或键参数的名称。 默认值为<c>"{0}"</c>，这意味着参数名称为字段名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 属性的值仅应用于主键，如使用数据绑定控件的 `DataKeyNames` 属性标识的值，或者在 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值并且将原始值集传递给相应的数据方法时的删除和更新方案。

 下面是两种可能更改 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 属性的常见方案：

-   你可能需要更改属性以区分更新中的旧值和新值。 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 属性设置为 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 值时，会将原始值和新值的参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合。 如果没有格式字符串，则将为每个数据字段创建两个具有相同名称的参数。 通过更改原始值参数的名称，可以将数据与原始数据源进行比较，以检测冲突并比较键值。

-   某些可视化设计器为原始值和键实现了特定的命名方案。

 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 属性。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="objectDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>将 <see cref="E:System.Web.UI.Page.LoadComplete" /> 事件处理程序添加到包含 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的页。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" /> 方法时，请确保调用基类的 <see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberSignature Language="F#" Value="member this.ParsingCulture : System.Web.UI.WebControls.ParsingCulture with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当将字符串值转换为实际属性类型来构造由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" /> 指示的对象类型时，获取或设置表示哪些区域性信息被用了的值。</summary>
        <value>区域性信息。 默认值是 <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="objectDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的状态。</summary>
        <returns>返回服务器控件的当前视图状态；如果没有与此控件关联的视图状态，则返回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Collections.IEnumerable" Usage="objectDataSource.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 集合中的参数调用由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" /> 属性标识的方法，从基础数据存储中检索数据。</summary>
        <returns>一个数据行的 <see cref="T:System.Collections.IEnumerable" /> 列表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定的方法可能具有任何方法签名，但它必须从下表中列出的某个类型返回或派生，以便 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件成功调用它。

|返回类型|操作|
|-----------------|------------|
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable> 由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|
|<xref:System.Data.DataTable>|使用 <xref:System.Data.DataTable> 创建 <xref:System.Data.DataView>，并由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|
|<xref:System.Data.DataView>|<xref:System.Data.DataView> 由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|
|<xref:System.Data.DataSet>|提取 <xref:System.Data.DataSet> 的第一个 <xref:System.Data.DataTable>，并通过 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法创建并返回 <xref:System.Data.DataView>。|
|<xref:System.Object>|对象包装在一个 <xref:System.Collections.IEnumerable> 集合中，并由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|

 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识的方法可以是实例方法，也可以是 `static` （`Shared` Visual Basic）方法。 如果它是实例方法，则每次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法时都会创建并销毁业务对象，只不过相同的实例用于调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法和由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性指定的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回 <xref:System.Collections.IEnumerable> 接口。 但是，若要启用缓存和筛选方案，返回值必须是 <xref:System.Data.DataSet> 的对象。 虽然 <xref:System.Data.DataSet> 类未实现 <xref:System.Collections.IEnumerable> 接口，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件会自动提取实现 <xref:System.Collections.IEnumerable>的默认 <xref:System.Data.DataView> 控件。

 在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作之前，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件以检查参数的值，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作之前执行任何预处理。 若要执行数据检索操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象使用反射来创建由 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性标识的对象的实例。 然后，它使用任意关联的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 属性调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作完成后，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 事件以检查任何返回值、输出参数和异常，并执行任何后续处理。

 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性返回一个 <xref:System.Data.DataSet>、<xref:System.Data.DataTable>或 <xref:System.Data.DataView> 对象并启用了缓存，则 <xref:System.Web.UI.WebControls.ObjectDataSource> 操作期间，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 将从缓存中检索数据并将数据保存到缓存中。 缓存是根据 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 属性的组合指定的缓存行为来创建、丢弃或刷新的。

 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性返回 <xref:System.Data.DataSet> 或 <xref:System.Data.DataTable> 对象，但指定了 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 属性，则使用任何提供的 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 属性进行计算，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作期间将生成的筛选器应用于数据列表。

 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> 方法。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。

## <a name="data-bound-controls"></a>数据绑定控件
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 控件）关联时，无需从页代码中调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法。 改为直接通过数据绑定控件调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法。



## Examples
 有关代码示例，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource>。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCountMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以检索行数的方法或函数的名称。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于检索行数的方法或函数的名称的字符串。 此方法必须返回一个整数 (<see cref="T:System.Int32" />)。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性标识用于检索总行数的业务对象方法，以支持数据源分页。 仅当 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性设置为 `true`时，才计算 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性。

 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> 属性。 有关 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件如何支持分页的信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够选择页面中显示的记录数。

 网页包含 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性设置为 `true`的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性设置为方法的名称，该方法返回查询中的记录总数。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性和 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 属性设置为 Select 方法中使用的参数的名称。 此页还包含一个 <xref:System.Web.UI.WebControls.DropDownList> 控件。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]

 第二个示例显示 <xref:System.Web.UI.WebControls.DropDownList> 控件的 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 事件的处理程序。 处理程序中的代码将 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 属性设置为用户的选择。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]

 第三个示例显示了从 Customers 表检索数据的数据访问类。 它包括一个名为 `GetSubsetOfEmployees`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性。 该示例还包括一个名为 `GetEmployeeCount`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性。 类使用 LINQ 查询 Customers 表。 该示例需要一个表示 Northwind 数据库和 Customers 表的 LINQ to SQL 类。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 事件以检查返回值或输出参数的值，或确定 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作完成后是否引发了异常。 可从与事件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 对象中获取返回值、输出参数和异常处理属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够在 Northwind 数据库中检索和更新 Employees 表中的记录。

 第一个示例显示一个网页，其中包含两个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件、一个 <xref:System.Web.UI.WebControls.DropDownList> 控件和一个 <xref:System.Web.UI.WebControls.DetailsView> 控件。 第一个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DropDownList> 控件用于从数据库检索和显示雇员姓名。 第二个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DetailsView> 控件用于从用户选择的员工记录中检索、显示和修改数据。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]

 第二个示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件的处理程序。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 事件处理程序将序列化包含从 Employee 表中检索到的数据的对象。 序列化的对象存储在视图状态中。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件处理程序在视图状态中对对象进行反序列化，该对象包含要更新的数据记录的原始数据。 包含原始数据的对象将作为参数传递给 Update 方法。 必须将原始数据传递到数据库，以便可以使用它来检查数据是否已被其他进程修改。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]

 第三个示例显示与 Northwind 数据库交互的数据访问类。 类使用 LINQ 来查询和更新 Employees 表。 该示例需要一个 LINQ to SQL 类，该类表示 Northwind 数据库和 Employees 表。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件以执行特定于您的应用程序的附加初始化，验证参数的值，或在 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件执行数据检索操作之前更改参数值。 参数可用作由 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 对象公开的 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 属性访问的 <xref:System.Collections.IDictionary> 集合。

 如果设置了 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性，则对 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法的单个调用会引发此事件两次。 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> 属性用于确定是否调用了 select 来检索数据或检索计数。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以检索数据的方法或函数的名称。</summary>
        <value>一个字符串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于检索数据的方法或函数的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定的方法可以具有任何方法签名，但它必须返回下表中显示的类型之一，以便 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件成功调用它。

|返回类型|操作|
|-----------------|------------|
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable> 由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|
|<xref:System.Data.DataTable>|使用 <xref:System.Data.DataTable> 创建 <xref:System.Data.DataView>，并由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|
|<xref:System.Data.DataView>|<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回 <xref:System.Data.DataView>。|
|<xref:System.Data.DataSet>|提取 <xref:System.Data.DataSet> 的第一个 <xref:System.Data.DataTable>，并通过 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法创建并返回 <xref:System.Data.DataView>。|
|<xref:System.Object>|对象包装在一个 <xref:System.Collections.IEnumerable> 集合中，并由 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法返回。|

 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> 属性。

 使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 类删除或更新数据时，请确保在 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 集合或 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合中为 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件配置的参数名称与 select 方法返回的列名称相匹配。

## <a name="object-lifetime"></a>对象生存期
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性标识的方法可以是实例方法，也可以是 `static` （`Shared` Visual Basic）方法。 如果它是实例方法，则每次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法时都会创建并销毁业务对象。 在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法之前，您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件来处理业务对象。 你还可以处理在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法之后引发的 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。 如果业务对象实现 <xref:System.IDisposable> 接口，则在销毁对象之前调用 <xref:System.IDisposable.Dispose%2A> 方法。 如果该方法是 `static` 的（`Shared` Visual Basic），则永远不会创建业务对象，也不能处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

## <a name="parameter-merging"></a>参数合并
 从这些源中将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合：

-   以声明方式从 `SelectParameters` 元素。

-   以编程方式从 `Selecting` 方法。

 首先，添加 `SelectParameters` 元素中列出的参数。 其次，参数以编程方式在 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件中添加和移除，该事件在 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法运行之前发生。 合并参数后，解析方法。 下一节将讨论方法解析。

> [!IMPORTANT]
>  你应验证从客户端接收的任何参数值。 运行时只需将参数值替换为 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性即可。

## <a name="method-resolution"></a>方法解析
 调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时，数据绑定控件中的数据字段、`SelectParameters` 元素中以声明方式创建的参数以及在 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件处理程序中添加的参数都将合并。 （有关详细信息，请参阅前面的部分。）然后，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将尝试查找要调用的方法。 首先，它会查找一个或多个具有在 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性中指定的名称的方法。 如果未找到匹配项，则会引发 <xref:System.InvalidOperationException> 异常。 如果找到匹配项，则它将查找匹配的参数名称。 例如，假设 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性指定的类型有两个名为 `SelectARecord`的方法。 一个 `SelectARecord` 具有一个参数，`ID`，另一个 `SelectARecord` 具有两个参数，`Name` 和 `Number`。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合只有一个名为 `ID`的参数，则将调用只包含 `ID` 参数的 `SelectARecord` 方法。 解析方法时未检查参数类型。 参数的顺序并不重要。

 如果设置了 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性，则会以不同的方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource> 查找 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性中指定了名称的方法，该属性采用 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的一个参数。 在这种情况下，参数名称并不重要。



## Examples
 下面的代码示例演示 <xref:System.Web.UI.WebControls.GridView> 控件如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件在 Web 窗体页上显示数据。 <xref:System.Web.UI.WebControls.ObjectDataSource> 标识部分或完全限定类名及其 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性，并使用调用的方法来检索带有 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性的数据。 在运行时，将创建对象并使用反射调用方法。 <xref:System.Web.UI.WebControls.GridView> 控件枚举由 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法返回的 <xref:System.Collections.IEnumerable> 集合，并显示数据。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数的集合，这些参数由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性指定的方法使用。</summary>
        <value>参数的集合，这些参数由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 属性指定的方法使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 属性可获取与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> 属性。

 使用 `SelectParameters` 元素以声明方式将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合，或在 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件的处理程序中以编程方式向其添加参数。 在运行时，将在 `SelectParameters` 元素中列出的参数首先添加到集合中。 然后，<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件的处理程序会添加或删除集合中的参数。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件在 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法运行前引发。

 在运行 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法之前，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合中包含的参数的名称和类型必须与 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法的签名相匹配。 例如，如果一个名为 `GetEmployeesByStateAndAge` 的 select 方法采用 `string` 并且整数作为参数，则 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 集合必须包含两个参数。 第一个参数必须解析为字符串，第二个参数必须解析为一个整数。 可以在 `SelectParameters` 元素的标记中指定这两个参数。 或者，可以将它们添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件处理程序中，也可以在标记中添加一个参数，并以编程方式添加另一个参数。

 有关详细信息，请参阅[将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)和 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> 属性。

> [!IMPORTANT]
>  在 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 事件处理程序的代码中或 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性指定的方法中，请确保验证从客户端收到的任何参数值。



## Examples
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件检索单个数据记录并将其显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件中。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件通过调用 `EmployeeLogic` 类的 `GetEmployee` 方法来检索特定的雇员记录。 `GetEmployee` 方法需要 employee ID 参数。 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件在标记中使用 `QueryStringParameter` 元素来创建 <xref:System.Web.UI.WebControls.QueryStringParameter> 对象，该对象将从 URL 检索指定的查询字符串参数的值并将其传递给 `GetEmployee` 方法。

 其他参数类可用于检索来自其他源的值，例如控件属性、窗体字段、cookie、ASP.NET 配置文件数据或会话状态。 你还可以使用在标记中定义的参数对象，以便将硬编码值传递给 select 方法。 有关可用参数类的详细信息，请参阅将[参数用于筛选的数据源控件](https://docs.microsoft.com/previous-versions/aspnet/xt50s8kz(v=vs.100))。

 若要运行此示例，你将需要以下各项：

-   一个网站，该网站具有连接到 Northwind 商贸数据库的名为 `NorthwindConnection` 的连接字符串。 有关详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource> 类概述。

-   作为 <xref:System.Web.UI.WebControls.ObjectDataSource> 类概述的代码示例之一显示的 `EmployeeLogic` 类。 类文件必须位于 App_Code 文件夹中。

-   示例代码可作为 .aspx 页运行。 如果不使用查询字符串参数请求页面，则会显示错误消息。 如果在 .aspx 文件的名称后使用查询字符串（例如 `?empid=1`）来请求页面，则会看到请求的雇员的详细信息。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置业务对象的名称，<see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 参数使用此业务对象指定数据源排序支持的排序表达式。</summary>
        <value>方法参数的名称，此方法参数用于指示哪个参数用于排序数据。 默认值为空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 属性用于支持数据源排序。 当 <xref:System.Web.UI.DataSourceSelectArguments> 对象上设置 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 属性并将其传递给 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法时，<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 值将根据数据的排序方式标识 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 业务对象方法的参数名称。

 如果 <xref:System.Web.UI.WebControls.ObjectDataSource> 与数据绑定控件关联，传递给此参数的值将采用以逗号分隔的字段值的形式，后跟 `"ASC"` 或 `"DESC"`。 例如，`Name` 的升序排序的值将为 `"Name ASC"`。

 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> 属性。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何实现支持排序的类型。 第二个代码示例演示如何实现排序表达式。

 下面的代码示例演示如何实现支持排序的类型。 `SortingData` 类的 `SelectMethod` 采用参数，`sortExpression`。 传递给 `SelectMethod` 的字符串将用于 `SelectMethod`返回的 <xref:System.Data.DataView> 对象的 <xref:System.Data.DataView.Sort%2A> 属性。

 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]

 下面的代码示例演示如何实现排序表达式。 网页中的代码将创建 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的实例。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性设置为 `SortingData`，<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 属性设置为 `sortExpression`。 <xref:System.Web.UI.WebControls.GridView> 控件的 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> 属性设置为 `true`。 用户单击**排序**按钮时，会将字段名称 `Name` 或 `Number`传递给 Sort 参数中的 `SelectMethod`。

 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个用分号分隔的字符串，指示用于 Microsoft SQL Server 缓存依赖项的数据库和表。</summary>
        <value>一个字符串，指示用于 SQL Server 缓存依赖项的数据库和表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件支持基于数据缓存的 <xref:System.Web.Caching.SqlCacheDependency> 对象的可选过期策略（必须为数据库服务器配置服务）。

 SQL Server 支持两种缓存失效机制：轮询和通知。 每种机制都为 <xref:System.Web.Caching.SqlCacheDependency> 对象提供了不同的语法。

 <xref:System.Web.UI.WebControls.ObjectDataSource> 仅支持轮询。 <xref:System.Web.Caching.SqlCacheDependency> 字符串用于创建在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 方法之前传递到 <xref:System.Data.Common.DbCommand> 构造函数的 <xref:System.Data.SqlClient.SqlDependency> 对象。 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 字符串根据 `@ Page` 指令使用的相同格式标识数据库和表，其中字符串的第一部分是 SQL Server 数据库的连接字符串，后跟一个冒号分隔符，最后是数据库表的名称（例如 `"connectionstring1:table1"`）。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 属性依赖于多个表，则连接字符串和表名称对用分号分隔（例如，`"connectionstring1:table1";connectionstring2:table2"`）。

 若要支持通知，你必须在 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性的实现中编写缓存逻辑，并在代码中处理 <xref:System.Web.Caching.SqlCacheDependency> 对象的构造。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何创建 SQL Server 的缓存依赖项，以及如何设置 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 属性。 第二个代码示例演示如何实现返回 <xref:System.Data.DataSet> 对象的包装方法，以便使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象启用缓存和筛选。

 下面的代码示例演示如何创建 SQL Server 的缓存依赖项，以及如何设置 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 属性。 在此示例中，数据库每120秒轮询一次。 如果 Northwind 商贸 Employees 表中的数据在这段时间内发生更改，则由 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件缓存并由 <xref:System.Web.UI.WebControls.GridView> 控件显示的所有数据都将过期，并在下一次请求页面时检索一组新数据。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]

 下面的代码示例演示如何实现一个包装方法，该方法返回 <xref:System.Data.DataSet> 对象以使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件启用缓存和筛选。 在 `EmployeeLogic` 类的基实现中，`GetAllEmployees` 方法返回 <xref:System.Collections.ArrayList> 对象。 添加一个名为 `GetAllEmployeesAsDataSet` 的包装方法，该方法将 `NorthwindEmployee` 数据作为 <xref:System.Data.DataSet>返回，而不是完全重构对象以使用 Web 窗体页上的 <xref:System.Web.UI.WebControls.ObjectDataSource>。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartRowIndexParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据检索方法参数的名称，该参数用于指示为数据源分页支持检索的第一条记录的标识符的值。</summary>
        <value>业务对象方法参数的名称，该参数用于指示要检索的第一条记录。 该参数必须返回整数值。 默认值为<c>"startRowIndex"</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 属性用于支持数据源分页。 有关 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件如何支持分页的信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。

 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> 属性。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够选择页面中显示的记录数。

 网页包含 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 属性设置为 `true`的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性设置为方法的名称，该方法返回查询中的记录总数。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 属性和 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 属性设置为 Select 方法中使用的参数的名称。 此页还包含一个 <xref:System.Web.UI.WebControls.DropDownList> 控件。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]

 第二个示例显示 <xref:System.Web.UI.WebControls.DropDownList> 控件的 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 事件的处理程序。 处理程序中的代码将 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 属性设置为用户的选择。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]

 第三个示例显示了从 Customers 表检索数据的数据访问类。 它包括一个名为 `GetSubsetOfEmployees`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性。 该示例还包括一个名为 `GetEmployeeCount`的方法，该方法分配给 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件的 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 属性。 类使用 LINQ 查询 Customers 表。 该示例需要一个表示 Northwind 数据库和 Customers 表的 LINQ to SQL 类。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="objectDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>跟踪 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件的视图状态更改，以便将这些更改存储到 <see cref="T:System.Web.UI.StateBag" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 重写 <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A> 方法，以将起始点标记为开始跟踪，并将更改保存为对象的视图状态的一部分。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象表示的类的名称。</summary>
        <value>标识 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 表示的对象类型的部分或完全限定类名。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 若要创建 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件绑定到的对象的实例，控件将使用反射来加载运行时由类型名称标识的类型。 因此，<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性的值可以是位于 Bin 或 App_Code 目录中的代码的部分限定类型，也可以是在全局程序集缓存中注册的代码的完全限定的类型名称。 如果使用全局程序集缓存，则必须将相应的引用添加到 Machine.config 或 web.config 文件的 `assemblies` 部分。

 该类型必须具有无参数的构造函数，除非你处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件自行创建它的实例。 如果该类型的方法是成员方法，则为每次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>和 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 方法创建类型的实例。 如果 `static` 方法（`Shared` Visual Basic），则不会创建实例。 如果类型实现 <xref:System.IDisposable> 接口，则在销毁对象之前调用 <xref:System.IDisposable.Dispose%2A> 方法。



## Examples
 下面的代码示例演示 <xref:System.Web.UI.WebControls.GridView> 控件如何通过在 Web 窗体页上使用 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件来显示数据。 <xref:System.Web.UI.WebControls.ObjectDataSource> 标识部分或完全限定类名及其 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性，并使用调用的方法来检索带有 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性的数据。 在运行时，将创建对象并使用反射调用方法。 <xref:System.Web.UI.WebControls.GridView> 控件枚举 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 属性返回的 <xref:System.Collections.IEnumerable> 集合，并显示数据。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]

 下面的示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性值引用的类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="objectDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过调用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 属性标识的方法和 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" /> 集合中的所有参数，执行更新操作。</summary>
        <returns>一个值，表示基础数据存储中更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 假定业务对象每次更新一条记录，而不是在批处理中更新数据。

 在执行 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作之前，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件以检查参数的值，并在 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作之前执行任何预处理。 若要执行更新操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象使用反射来创建由 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性标识的对象的实例。 然后，它使用任意关联的 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 属性调用由 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性标识的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作完成后，将调用 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> 方法来引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 事件。 您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 事件以检查任何返回值、输出参数和异常，并执行任何后续处理。

 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 方法委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> 方法。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。

> [!IMPORTANT]
>  你应验证从客户端接收的任何参数值。 运行时只需将参数值替换为 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性即可。

## <a name="data-bound-controls"></a>数据绑定控件
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件与数据绑定控件（如 <xref:System.Web.UI.WebControls.GridView> 控件）关联时，无需从页代码中调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 方法。 改为直接通过数据绑定控件调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 方法。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何使用 <xref:System.Web.UI.WebControls.DropDownList> 控件、<xref:System.Web.UI.WebControls.TextBox> 控件和几个 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象来更新数据。 第二个代码示例演示了第一个代码示例中使用的 `EmployeeLogic` 类。

 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.DropDownList> 控件、<xref:System.Web.UI.WebControls.TextBox> 控件和几个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件来更新数据。 <xref:System.Web.UI.WebControls.DropDownList> 显示 Northwind 雇员的姓名，而 <xref:System.Web.UI.WebControls.TextBox> 控件用于输入和更新地址信息。 由于 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合包含绑定到 <xref:System.Web.UI.WebControls.DropDownList>的选定值的 <xref:System.Web.UI.WebControls.ControlParameter> 对象，因此仅在选择了员工之后才会启用引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作的按钮。

> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]

 下面的代码示例演示了前面的代码示例中使用的 `EmployeeLogic` 类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作完成时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 事件以检查返回值或输出参数的值，或确定 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作完成后是否引发了异常。 可从与事件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 对象中获取返回值、输出参数和异常处理属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控件调用以更新数据的方法或函数的名称。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用于更新数据的方法或函数的名称的字符串。 默认值为空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件假设由 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性标识的方法每次执行一个更新，而不是在批处理中执行更新。

 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性委托给与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> 属性。

 请确保为 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合中的 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件配置的参数名称与 select 方法返回的列名称相匹配。

## <a name="object-lifetime"></a>对象生存期
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性标识的方法可以是实例方法，也可以是 `static` （`Shared` Visual Basic）方法。 如果它是实例方法，则每次调用 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性指定的方法时都会创建并销毁业务对象。 在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性指定的方法之前，您可以处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 事件来处理业务对象。 你还可以处理在调用 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性指定的方法之后引发的 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。 如果业务对象实现 <xref:System.IDisposable> 接口，则在销毁对象之前调用 <xref:System.IDisposable.Dispose%2A> 方法。 如果该方法是 `static` 的（`Shared` Visual Basic），则永远不会创建业务对象，也不能处理 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 事件。

## <a name="parameter-merging"></a>参数合并
 从三个源将参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合：

-   在运行时从数据绑定控件。

-   从 `UpdateParameters` 元素中，以声明方式。

-   以编程方式从 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件处理程序。

 首先，将从数据绑定控件生成的所有参数添加到 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合中。 例如，如果 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件绑定到 <xref:System.Web.UI.WebControls.GridView> 控件，该控件具有 `Name` 和 `Number`的列，则 `Name` 和 `Number` 的参数将添加到集合中。 参数的确切名称取决于 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性。 这些参数的数据类型为 `string`。 接下来，将添加 `UpdateParameters` 元素中列出的参数。 如果找到 `UpdateParameters` 元素中与已在 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合中的参数相同的参数，则会修改现有参数，使其与 `UpdateParameters` 元素中指定的参数匹配。 通常，这用于修改参数中数据的类型。 最后，你可以以编程方式在 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件中添加和移除参数，这会在 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 方法运行之前发生。 合并参数后，解析方法。 下一节将讨论方法解析。

> [!IMPORTANT]
>  你应验证从客户端接收的任何参数值。 运行时只需将参数值替换为 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性即可。

## <a name="method-resolution"></a>方法解析
 调用 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 方法时，数据绑定控件中的数据字段、`UpdateParameters` 元素中以声明方式创建的参数以及在 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件处理程序中添加的参数都将合并。 （有关详细信息，请参阅前面的部分。）然后，<xref:System.Web.UI.WebControls.ObjectDataSource> 控件将尝试查找要调用的方法。 首先，它会查找一个或多个具有在 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性中指定的名称的方法。 如果未找到匹配项，则会引发 <xref:System.InvalidOperationException> 异常。 如果找到匹配项，则它将查找匹配的参数名称。 例如，假设 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 属性指定的类型有两个名为 `UpdateARecord`的方法。 一个 `UpdateARecord` 具有一个参数，`ID`，另一个 `UpdateARecord` 具有两个参数，`Name` 和 `Number`。 如果 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合只有一个名为 `ID`的参数，则将调用只包含 `ID` 参数的 `UpdateARecord` 方法。 解析方法时未检查参数类型。 参数的顺序并不重要。

 如果设置了 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性，则会以不同的方式解析方法。 <xref:System.Web.UI.WebControls.ObjectDataSource> 查找 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性中指定了名称的方法，该属性采用 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 属性中指定的类型的一个参数。 在这种情况下，参数名称并不重要。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够在 Northwind 数据库中检索和更新 Employees 表中的记录。

 第一个示例显示一个网页，其中包含两个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件、一个 <xref:System.Web.UI.WebControls.DropDownList> 控件和一个 <xref:System.Web.UI.WebControls.DetailsView> 控件。 第一个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DropDownList> 控件用于从数据库检索和显示雇员姓名。 第二个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DetailsView> 控件用于从用户选择的员工记录中检索、显示和修改数据。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]

 第二个示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件的处理程序。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 事件处理程序将序列化包含从 Employee 表中检索到的数据的对象。 序列化的对象存储在视图状态中。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件处理程序在视图状态中对对象进行反序列化，该对象包含要更新的数据记录的原始数据。 包含原始数据的对象将作为参数传递给 Update 方法。 必须将原始数据传递到数据库，以便可以使用它来检查数据是否已被其他进程修改。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]

 第三个示例显示与 Northwind 数据库交互的数据访问类。 类使用 LINQ 来查询和更新 Employees 表。 该示例需要一个 LINQ to SQL 类，该类表示 Northwind 数据库和 Employees 表。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">使用实体框架和 ObjectDataSource 控件</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数集合，该集合包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 属性指定的方法使用的参数。</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 属性指定的方法使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合中包含的参数的名称和类型必须匹配 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 方法签名中的参数的名称和类型。 参数名称受 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 属性影响，并区分大小写。 集合中的参数取决于数据绑定控件中的数据、以声明方式指定的参数和以编程方式添加的参数。 有关详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 中的 "参数合并" 部分，并[将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。

 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 属性检索与 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件关联的 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 对象所包含的 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> 属性。

 有关参数合并、对象生存期和方法解析的详细信息，请参阅 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。

> [!IMPORTANT]
>  你应验证从客户端接收的任何参数值。 运行时只需将参数值替换为 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 属性即可。



## Examples
 本部分包含两个代码示例。 第一个代码示例演示如何使用 <xref:System.Web.UI.WebControls.DropDownList> 控件、<xref:System.Web.UI.WebControls.TextBox> 控件和几个 <xref:System.Web.UI.WebControls.ObjectDataSource> 对象来更新数据。 第二个代码示例演示了第一个代码示例中使用的 `EmployeeLogic` 类。

 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.DropDownList> 控件、<xref:System.Web.UI.WebControls.TextBox> 控件和几个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件来更新数据。 <xref:System.Web.UI.WebControls.DropDownList> 显示 Northwind 雇员的姓名，而 <xref:System.Web.UI.WebControls.TextBox> 控件用于输入和更新地址信息。 由于 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 集合包含绑定到 <xref:System.Web.UI.WebControls.DropDownList>的选定值的 <xref:System.Web.UI.WebControls.ControlParameter>，因此仅在选择了员工之后才会启用引发 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作的按钮。

> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]

 下面的代码示例演示了前面的代码示例中使用的 `EmployeeLogic` 类。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件以执行特定于您的应用程序的其他初始化，验证参数的值，或在 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件执行更新操作之前更改参数值。 参数可用作由 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 对象公开的 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 属性访问的 <xref:System.Collections.IDictionary> 集合。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 以下三个示例演示了一个网页、一个代码隐藏页类和一个数据访问类，使用户能够在 Northwind 数据库中检索和更新 Employees 表中的记录。

 第一个示例显示一个网页，其中包含两个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件、一个 <xref:System.Web.UI.WebControls.DropDownList> 控件和一个 <xref:System.Web.UI.WebControls.DetailsView> 控件。 第一个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DropDownList> 控件用于从数据库检索和显示雇员姓名。 第二个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和 <xref:System.Web.UI.WebControls.DetailsView> 控件用于从用户选择的员工记录中检索、显示和修改数据。

 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]

 第二个示例演示 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 和 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件的处理程序。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 事件处理程序将序列化包含从 Employee 表中检索到的数据的对象。 序列化的对象存储在视图状态中。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 事件处理程序在视图状态中对对象进行反序列化，该对象包含要更新的数据记录的原始数据。 包含原始数据的对象将作为参数传递给 Update 方法。 必须将原始数据传递到数据库，以便可以使用它来检查数据是否已被其他进程修改。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]

 第三个示例显示与 Northwind 数据库交互的数据访问类。 类使用 LINQ 来查询和更新 Employees 表。 该示例需要一个 LINQ to SQL 类，该类表示 Northwind 数据库和 Employees 表。 有关详细信息，请参阅[如何：在 Web 项目中创建 LINQ to SQL 类](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。

 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms247258(v=vs.100)">数据源 Web 服务器控件</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9a4kyhcx(v=vs.100)">ObjectDataSource 控件概述</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227436(v=vs.100)">创建 ObjectDataSource 控件源对象</related>
      </Docs>
    </Member>
  </Members>
</Type>
