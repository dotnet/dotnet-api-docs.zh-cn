<Type Name="Parameter" FullName="System.Web.UI.WebControls.Parameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dab59b245028be78a1f7f6b3b8f36c60ae375d93" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86611011" /></Metadata><TypeSignature Language="C#" Value="public class Parameter : ICloneable, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Parameter extends System.Object implements class System.ICloneable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Parameter" />
  <TypeSignature Language="VB.NET" Value="Public Class Parameter&#xA;Implements ICloneable, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parameter : ICloneable, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type Parameter = class&#xA;    interface ICloneable&#xA;    interface IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("DefaultValue")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("DefaultValue")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为数据源控件提供一种绑定到应用程序变量、用户标识和选择以及其他数据的机制。 作为所有 ASP.NET 参数类型的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter>类表示参数化 SQL 查询中的参数、筛选表达式或 ASP.NET 数据源控件用来选择、筛选或修改数据的业务对象方法调用。 <xref:System.Web.UI.WebControls.Parameter> 对象包含在一个 <xref:System.Web.UI.WebControls.ParameterCollection> 对象中。 <xref:System.Web.UI.WebControls.Parameter> 在运行时计算对象，以将其所表示的变量的值绑定到数据源控件用来与数据进行交互的任何方法。  
  
 使用 <xref:System.Web.UI.WebControls.Parameter> 与数据源和数据绑定控件派生的类来生成基于 Web 的数据应用程序。 数据源控件使用这些参数类将在 Web 应用程序中找到的特定类型的值绑定到 SQL 查询字符串、业务对象方法参数等中的占位符。 下表列出了 ASP.NET 中包含的参数类型。  
  
|||  
|-|-|  
|<xref:System.Web.UI.WebControls.ControlParameter>|绑定 Web 服务器控件的任何公共属性。|  
|<xref:System.Web.UI.WebControls.FormParameter>|绑定窗体字段。|  
|<xref:System.Web.UI.WebControls.SessionParameter>|绑定会话状态字段。|  
|<xref:System.Web.UI.WebControls.RouteParameter>|绑定路由 URL 参数。|  
|<xref:System.Web.UI.WebControls.CookieParameter>|绑定 cookie 字段。|  
|<xref:System.Web.UI.WebControls.QueryStringParameter>|绑定查询字符串参数。|  
|<xref:System.Web.UI.WebControls.ProfileParameter>|绑定配置文件字段。|  
  
 <xref:System.Web.UI.WebControls.Parameter>当要实现自己的自定义参数类型时，扩展基类。  
  
 <xref:System.Web.UI.WebControls.Parameter> 对象非常简单：具有 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 和 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 属性，可以声明方式表示，并且可以跟踪多个 HTTP 请求的状态。 所有参数都支持 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性，这种情况下，当参数绑定到某个值时，而值 `null` 在运行时计算结果为。  
  
 使用 <xref:System.Web.UI.WebControls.Parameter> 带有数据源控件的对象的集合时，它们在集合中的顺序可能很重要。 有关如何使用参数的详细信息，请参阅 [将参数与 SqlDataSource 控件](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100)) 一起使用和 [将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
   
  
## Examples  
 下面的示例演示如何 <xref:System.Web.UI.WebControls.DropDownList> 在 SQL 查询的 W 子句中使用控件的所选值 `here` 。 该示例使用 <xref:System.Web.UI.WebControls.ControlParameter> 类，该类派生自 <xref:System.Web.UI.WebControls.ControlParameter> 类。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>元素定义具有名为 "" 的参数的查询 @Title ，其中的值 `DropDownList1` 应为。 <xref:System.Web.UI.WebControls.ControlParameter>元素指定 @Title 将 "" 占位符替换为控件的属性的值 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> `DropDownList1` 。 <xref:System.Web.UI.WebControls.ControlParameter>元素将添加到控件的 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 集合中 <xref:System.Web.UI.WebControls.SqlDataSource> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 下面的示例与前一个示例类似，但使用代码而不是标记。 第一次加载页面时， <xref:System.Web.UI.WebControls.DropDownList> 控件没有选定值，并使用该对象的 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.Parameter_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/CS/param1acs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.Parameter_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/VB/param1avb.aspx#1)]  
  
 下面的代码显示了上一示例中页的代码隐藏类。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/CS/param1acs.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.Parameter_3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/VB/param1avb.aspx.vb#4)]  
  
 下面的代码示例演示如何扩展 <xref:System.Web.UI.WebControls.Parameter> 类，以创建可供数据源控件和数据绑定方案中的其他控件使用的新参数类型。 数据源控件可以使用 `StaticParameter` 参数绑定到 Web 窗体页上声明的任何对象（通常为字符串）的值。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#1)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.ControlParameter" />
    <altmember cref="T:System.Web.UI.WebControls.CookieParameter" />
    <altmember cref="T:System.Web.UI.WebControls.FormParameter" />
    <altmember cref="T:System.Web.UI.WebControls.QueryStringParameter" />
    <altmember cref="T:System.Web.UI.WebControls.SessionParameter" />
    <altmember cref="T:System.Web.UI.WebControls.ProfileParameter" />
    <altmember cref="T:System.Web.UI.WebControls.RouteParameter" />
    <altmember cref="T:System.Web.UI.WebControls.ParameterCollection" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/xt50s8kz(v=vs.100)">对数据源控件使用参数</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Parameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的新默认实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter>使用构造函数创建的对象的 <xref:System.Web.UI.WebControls.Parameter.%23ctor> 所有属性的默认值都进行了初始化。 将 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 属性初始化为 <xref:System.String.Empty?displayProperty=nameWithType> ，将 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 属性初始化为，将属性初始化为 <xref:System.TypeCode.Object?displayProperty=nameWithType> <xref:System.Web.UI.WebControls.Parameter.Direction%2A> <xref:System.Data.ParameterDirection.Input> ，并将 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性初始化为 `null` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Parameter(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.Parameter : string -&gt; System.Web.UI.WebControls.Parameter" Usage="new System.Web.UI.WebControls.Parameter name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">参数的名称。</param>
        <summary>使用指定的名称初始化 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter>使用构造函数创建的对象 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%29> 使用 `name` 其其他属性的指定值和默认值进行初始化。 将 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 属性初始化为 <xref:System.TypeCode.Object?displayProperty=nameWithType> ，并将 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> 属性初始化为 <xref:System.Data.ParameterDirection.Input> ，并将 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性初始化为 `null` 。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%29> 从扩展 <xref:System.Web.UI.WebControls.Parameter> 类以初始化实例的属性的类中调用构造函数 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#2)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Parameter (System.Web.UI.WebControls.Parameter original);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.Parameter original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.Web.UI.WebControls.Parameter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (original As Parameter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Parameter(System::Web::UI::WebControls::Parameter ^ original);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.Parameter : System.Web.UI.WebControls.Parameter -&gt; System.Web.UI.WebControls.Parameter" Usage="new System.Web.UI.WebControls.Parameter original" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.Web.UI.WebControls.Parameter" />
      </Parameters>
      <Docs>
        <param name="original">一个 <see cref="T:System.Web.UI.WebControls.Parameter" /> 实例，将从该实例初始化当前实例。</param>
        <summary>使用所指定原始实例的值初始化 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29>构造函数是 `protected` 用于克隆实例的复制构造函数 <xref:System.Web.UI.WebControls.Parameter> 。 、、、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> <xref:System.Web.UI.WebControls.Parameter.Type%2A> 和属性的 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 值 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A> 全部传输到新的实例。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> 从扩展类的类中调用构造函数， <xref:System.Web.UI.WebControls.Parameter> 以实现类的正确对象克隆行为。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#4)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.Clone" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, System.Data.DbType dbType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Data.DbType dbType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.Data.DbType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, dbType As DbType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Parameter(System::String ^ name, System::Data::DbType dbType);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.Parameter : string * System.Data.DbType -&gt; System.Web.UI.WebControls.Parameter" Usage="new System.Web.UI.WebControls.Parameter (name, dbType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dbType" Type="System.Data.DbType" />
      </Parameters>
      <Docs>
        <param name="name">参数的名称。</param>
        <param name="dbType">参数的数据库类型。</param>
        <summary>使用指定的名称和数据库类型初始化 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.Parameter> 构造函数创建的对象 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.Data.DbType%29> 使用指定的 `name` 和参数以及 `dbType` 其他属性的默认值进行初始化。 将 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> 属性初始化为 <xref:System.Data.ParameterDirection.Input> ，并将 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性初始化为 `null` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, TypeCode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.TypeCode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.TypeCode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, type As TypeCode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Parameter(System::String ^ name, TypeCode type);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.Parameter : string * TypeCode -&gt; System.Web.UI.WebControls.Parameter" Usage="new System.Web.UI.WebControls.Parameter (name, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="name">参数的名称。</param>
        <param name="type">描述参数类型的 <see cref="T:System.TypeCode" />。</param>
        <summary>使用指定的名称和类型初始化 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter>使用构造函数创建的对象 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%29> 使用指定的 `name` 和参数以及 `type` 其他属性的默认值进行初始化。 将 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> 属性初始化为 <xref:System.Data.ParameterDirection.Input> ，并将 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性初始化为 `null` 。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%29> 从扩展 <xref:System.Web.UI.WebControls.Parameter> 类以初始化 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 实例的和属性的类中调用构造函数 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#3)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, System.Data.DbType dbType, string defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Data.DbType dbType, string defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.Data.DbType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, dbType As DbType, defaultValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Parameter(System::String ^ name, System::Data::DbType dbType, System::String ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.Parameter : string * System.Data.DbType * string -&gt; System.Web.UI.WebControls.Parameter" Usage="new System.Web.UI.WebControls.Parameter (name, dbType, defaultValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dbType" Type="System.Data.DbType" />
        <Parameter Name="defaultValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see cref="T:System.Web.UI.WebControls.Parameter" /> 实例的名称。</param>
        <param name="dbType"><see cref="T:System.Web.UI.WebControls.Parameter" /> 实例的数据库类型。</param>
        <param name="defaultValue">如果<see cref="T:System.Web.UI.WebControls.Parameter" /> 绑定到一个在调用 <see cref="T:System.Web.UI.WebControls.Parameter" /> 时尚未初始化的值，则为 <see cref="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> 实例的默认值。</param>
        <summary>使用指定的名称、指定的数据库类型及其 <see cref="T:System.Web.UI.WebControls.Parameter" /> 属性的指定值初始化 <see cref="P:System.Web.UI.WebControls.Parameter.DefaultValue" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.Direction%2A>实例的属性 <xref:System.Web.UI.WebControls.Parameter> 初始化为 <xref:System.Data.ParameterDirection.Input> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, TypeCode type, string defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.TypeCode type, string defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.TypeCode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, type As TypeCode, defaultValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Parameter(System::String ^ name, TypeCode type, System::String ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.Parameter : string * TypeCode * string -&gt; System.Web.UI.WebControls.Parameter" Usage="new System.Web.UI.WebControls.Parameter (name, type, defaultValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.TypeCode" />
        <Parameter Name="defaultValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">参数的名称。</param>
        <param name="type">描述参数类型的 <see cref="T:System.TypeCode" />。</param>
        <param name="defaultValue">一个字符串，如果 <see cref="T:System.Web.UI.WebControls.Parameter" /> 绑定到的值在调用 <see cref="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> 时尚未初始化，该字符串将作为参数的默认值。</param>
        <summary>使用 <see cref="T:System.Web.UI.WebControls.Parameter" /> 类的 <see cref="P:System.Web.UI.WebControls.Parameter.DefaultValue" /> 属性的指定名称、指定类型和指定字符串初始化该类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter>使用构造函数创建的对象 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%2CSystem.String%29> 使用指定的 `name` 参数和参数进行初始化 `type` ，并为其分配 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 属性值。 将 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> 属性初始化为 <xref:System.Data.ParameterDirection.Input>。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%2CSystem.String%29> <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> <xref:System.Web.UI.WebControls.AccessDataSource> 在调用方法之前使用构造函数将更新参数对象添加到控件的集合 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.DefaultValue" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Parameter Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Parameter Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.Clone" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Clone () As Parameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::Parameter ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Web.UI.WebControls.Parameter&#xA;override this.Clone : unit -&gt; System.Web.UI.WebControls.Parameter" Usage="parameter.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Parameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前 <see cref="T:System.Web.UI.WebControls.Parameter" /> 实例的副本。</summary>
        <returns>与当前实例完全相同的 <see cref="T:System.Web.UI.WebControls.Parameter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.Clone%2A>方法调用 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> 复制构造函数以 <xref:System.Web.UI.WebControls.Parameter> 使用当前实例的值初始化类的新实例。  
  
 如果扩展 <xref:System.Web.UI.WebControls.Parameter> 类，则可以重写 <xref:System.Web.UI.WebControls.Parameter.Clone%2A> 方法以包含应复制到派生类的新实例的任何状态。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> 从扩展类的类中调用构造函数， <xref:System.Web.UI.WebControls.Parameter> 以实现类的正确对象克隆行为。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#4)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.#ctor(System.Web.UI.WebControls.Parameter)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertDbTypeToTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode ConvertDbTypeToTypeCode (System.Data.DbType dbType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode ConvertDbTypeToTypeCode(valuetype System.Data.DbType dbType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.ConvertDbTypeToTypeCode(System.Data.DbType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertDbTypeToTypeCode (dbType As DbType) As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode ConvertDbTypeToTypeCode(System::Data::DbType dbType);" />
      <MemberSignature Language="F#" Value="static member ConvertDbTypeToTypeCode : System.Data.DbType -&gt; TypeCode" Usage="System.Web.UI.WebControls.Parameter.ConvertDbTypeToTypeCode dbType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dbType" Type="System.Data.DbType" />
      </Parameters>
      <Docs>
        <param name="dbType">一个 <see cref="T:System.Data.DbType" /> 值，将转换为等效的 <see cref="T:System.TypeCode" /> 值。</param>
        <summary>将 <see cref="T:System.Data.DbType" /> 值转换为等效的 <see cref="T:System.TypeCode" /> 值。</summary>
        <returns>一个 <see cref="T:System.TypeCode" /> 值，与指定的 <see cref="T:System.Data.DbType" /> 值等效。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TypeCode.Object>如果未找到值的等效项，则此方法返回一个实例 <xref:System.Data.DbType> 。 没有等效类型的数据库类型包括 <xref:System.Data.DbType.Guid> 、 <xref:System.Data.DbType.Binary> 和 <xref:System.Data.DbType.DateTimeOffset> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertEmptyStringToNull : bool with get, set" Usage="System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象绑定到的值为 <see cref="F:System.String.Empty" /> 时是否应将其转换为 <see langword="null" />。</summary>
        <value>如果在 <see cref="T:System.Web.UI.WebControls.Parameter" /> 绑定到的值为 <see cref="F:System.String.Empty" /> 时应将其转换为 <see langword="true" />，则为 <see langword="null" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A> 更改了参数的属性，则 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTypeCodeToDbType">
      <MemberSignature Language="C#" Value="public static System.Data.DbType ConvertTypeCodeToDbType (TypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Data.DbType ConvertTypeCodeToDbType(valuetype System.TypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.ConvertTypeCodeToDbType(System.TypeCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTypeCodeToDbType (typeCode As TypeCode) As DbType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::DbType ConvertTypeCodeToDbType(TypeCode typeCode);" />
      <MemberSignature Language="F#" Value="static member ConvertTypeCodeToDbType : TypeCode -&gt; System.Data.DbType" Usage="System.Web.UI.WebControls.Parameter.ConvertTypeCodeToDbType typeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeCode" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="typeCode">一个 <see cref="T:System.TypeCode" /> 值，将转换为等效的 <see cref="T:System.Data.DbType" /> 值。</param>
        <summary>将 <see cref="T:System.TypeCode" /> 值转换为等效的 <see cref="T:System.Data.DbType" /> 值。</summary>
        <returns>一个 <see cref="T:System.Data.DbType" /> 值，与指定的 <see cref="T:System.TypeCode" /> 值等效。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DbType.Object>如果未找到等效项，此方法将返回实例。 没有等效数据库类型的类型包括 <xref:System.TypeCode.DBNull> 和 <xref:System.TypeCode.Empty> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbType">
      <MemberSignature Language="C#" Value="public System.Data.DbType DbType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DbType DbType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.DbType" />
      <MemberSignature Language="VB.NET" Value="Public Property DbType As DbType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DbType DbType { System::Data::DbType get(); void set(System::Data::DbType value); };" />
      <MemberSignature Language="F#" Value="member this.DbType : System.Data.DbType with get, set" Usage="System.Web.UI.WebControls.Parameter.DbType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数的数据库类型。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Parameter" /> 实例的数据库类型。 默认值为 <see cref="F:System.Data.DbType.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据库类型可用于创建强类型参数，以便在 Web 应用程序与基础代码之间或数据库表中的值之间正确转换值。  
  
 如果通过设置属性更改了参数的数据库类型 <xref:System.Web.UI.WebControls.Parameter.DbType%2A> ，则 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">尝试将此属性设置为 <see cref="T:System.Data.DbType" /> 枚举值以外的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public string DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultValue { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValue : string with get, set" Usage="System.Web.UI.WebControls.Parameter.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定参数的默认值（如果调用 <see cref="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> 方法时参数绑定到的值未被初始化）。</summary>
        <value>一个字符串，当 <see cref="T:System.Web.UI.WebControls.Parameter" /> 绑定到的值无法解析或者未初始化时，该字符串作为参数对象的默认值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A>属性用于将参数绑定到值的情况，但值为 `null` 或在计算对象时无法解析 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 如果 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 更改了参数的属性，则 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用控件检索单个数据记录并将 <xref:System.Web.UI.WebControls.ObjectDataSource> 其显示在 <xref:System.Web.UI.WebControls.DetailsView> 控件中。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件通过调用类的方法来检索特定的雇员记录 `GetEmployee` `EmployeeLogic` 。 `GetEmployee`方法需要雇员 ID 参数。 <xref:System.Web.UI.WebControls.ObjectDataSource>控件使用 <xref:System.Web.UI.WebControls.QueryStringParameter> 其集合中的对象 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 将 ID 传递到 `GetEmployee` 此示例中的方法。  
  
 若要查看 `EmployeeLogic` 类和方法的示例实现 `GetEmployee` ，请参见 <xref:System.Web.UI.WebControls.ObjectDataSource> 类概述。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.Data.ParameterDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ParameterDirection Direction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Direction" />
      <MemberSignature Language="VB.NET" Value="Public Property Direction As ParameterDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ParameterDirection Direction { System::Data::ParameterDirection get(); void set(System::Data::ParameterDirection value); };" />
      <MemberSignature Language="F#" Value="member this.Direction : System.Data.ParameterDirection with get, set" Usage="System.Web.UI.WebControls.Parameter.Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ParameterDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象是否用于将值绑定到控件，或者是否可以使用控件更改值。</summary>
        <value><see cref="T:System.Data.ParameterDirection" /> 值之一。 默认情况下，<see cref="P:System.Web.UI.WebControls.Parameter.Direction" /> 设置为 <see cref="F:System.Data.ParameterDirection.Input" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.Direction%2A>类当前未使用该属性 <xref:System.Web.UI.WebControls.Parameter> ，它保留供将来使用。  
  
 <xref:System.Web.UI.WebControls.Parameter.Direction%2A>属性描述在 <xref:System.Web.UI.WebControls.Parameter> 实例绑定到的值和对象本身之间的数据流的方向 <xref:System.Web.UI.WebControls.Parameter> 。 属性的默认值 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> <xref:System.Data.ParameterDirection.Input> 描述了数据流向始终处于一个方向的最常见的情况：从 <xref:System.Web.UI.WebControls.Parameter> 对象绑定到对象的值 <xref:System.Web.UI.WebControls.Parameter> 。 对基础值所做的任何更改都将由 <xref:System.Web.UI.WebControls.Parameter> 对象反映，但对该对象的任何更改 <xref:System.Web.UI.WebControls.Parameter> 都不会反映到基础数据。 使用 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> <xref:System.Data.ParameterDirection.InputOutput> <xref:System.Data.ParameterDirection.Output> 输出参数时，或 <xref:System.Data.ParameterDirection.ReturnValue> 在处理来自存储过程的返回值时，可以将属性设置为或。  
  
 如果 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> 更改了参数的属性，则 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 对象的、和属性，并将 <xref:System.Web.UI.WebControls.Parameter.Type%2A> <xref:System.Web.UI.WebControls.Parameter.Direction%2A> <xref:System.Web.UI.WebControls.Parameter> 其用作存储过程的输出参数和返回值参数。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/CS/sql21cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/VB/sql21vb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="protected virtual object Evaluate (System.Web.HttpContext context, System.Web.UI.Control control);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object Evaluate(class System.Web.HttpContext context, class System.Web.UI.Control control) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Evaluate (context As HttpContext, control As Control) As Object" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ Evaluate(System::Web::HttpContext ^ context, System::Web::UI::Control ^ control);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.Web.HttpContext * System.Web.UI.Control -&gt; obj&#xA;override this.Evaluate : System.Web.HttpContext * System.Web.UI.Control -&gt; obj" Usage="parameter.Evaluate (context, control)" />
      <MemberSignature Language="C#" Value="protected internal virtual object Evaluate (System.Web.HttpContext context, System.Web.UI.Control control);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object Evaluate(class System.Web.HttpContext context, class System.Web.UI.Control control) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Evaluate (context As HttpContext, control As Control) As Object" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Object ^ Evaluate(System::Web::HttpContext ^ context, System::Web::UI::Control ^ control);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="context">请求的当前 <see cref="T:System.Web.HttpContext" />。</param>
        <param name="control">参数绑定到的 <see cref="T:System.Web.UI.Control" />。 如果参数没有绑定到控件，则忽略 <paramref name="control" /> 参数。</param>
        <summary>更新并返回 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象的值。</summary>
        <returns>一个 <see langword="object" />，表示参数的更新值和当前值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法的默认实现 <xref:System.Web.UI.WebControls.Parameter.Evaluate%2A> 是 `null` 在所有情况下均返回。 从类派生的类 <xref:System.Web.UI.WebControls.Parameter> 将重写 <xref:System.Web.UI.WebControls.Parameter.Evaluate%2A> 方法以返回更新的参数值。 例如，对象将 <xref:System.Web.UI.WebControls.ControlParameter> 返回它所绑定到的控件的值，而 <xref:System.Web.UI.WebControls.QueryStringParameter> 对象则从对象检索当前名称/值对 <xref:System.Web.HttpRequest> 。  
  
   
  
## Examples  
 下面的代码示例演示如何重写 <xref:System.Web.UI.WebControls.Parameter.Evaluate%2A> 方法以返回派生自类的类中的正确值 <xref:System.Web.UI.WebControls.Parameter> 。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#6)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseType">
      <MemberSignature Language="C#" Value="public System.Data.DbType GetDatabaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.DbType GetDatabaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.GetDatabaseType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDatabaseType () As DbType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DbType GetDatabaseType();" />
      <MemberSignature Language="F#" Value="member this.GetDatabaseType : unit -&gt; System.Data.DbType" Usage="parameter.GetDatabaseType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取与当前 <see cref="T:System.Data.DbType" /> 实例的 CLR 类型等效的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 值。</summary>
        <returns>与当前 <see cref="T:System.Data.DbType" /> 实例的 CLR 类型等效的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尚未 <xref:System.Web.UI.WebControls.Parameter.DbType%2A> 设置该属性，或者必须将其设置为 <xref:System.Data.DbType.Object> 。 仅当设置了 CLR 类型但属性不为时，才应使用此方法 <xref:System.Web.UI.WebControls.Parameter.DbType%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Parameter.DbType" /> 属性已设置为 <see cref="F:System.Data.DbType.Object" /> 之外的一个值。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTrackingViewState : bool" Usage="System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象是否保存对其视图状态的更改。</summary>
        <value>如果数据源视图被标记为保存其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="abstract member LoadViewState : obj -&gt; unit&#xA;override this.LoadViewState : obj -&gt; unit" Usage="parameter.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Object" />，表示要还原的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 状态。</param>
        <summary>将数据源视图还原为保存过的前一视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法主要由 .NET Framework 基础结构使用，不应在代码中直接使用。 不过，控件开发人员可以重写此方法，以指定自定义服务器控件如何还原其视图状态。 有关详细信息，请参阅 [ASP.NET 状态管理概述](https://docs.microsoft.com/previous-versions/aspnet/75x4ha6s(v=vs.100))。  
  
 此方法 <xref:System.Web.UI.WebControls.Parameter> 从方法保存的上一个页请求还原对象的视图状态信息 <xref:System.Web.UI.WebControls.Parameter.SaveViewState%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Web.UI.WebControls.Parameter.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数的名称。</summary>
        <value>参数的名称。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter> 对象不需要具有名称;但是，数据源控件可以使用参数名来匹配 <xref:System.Web.UI.WebControls.Parameter> 集合中的对象和 SQL 查询或业务方法签名中的参数。 例如， <xref:System.Web.UI.WebControls.SqlDataSource> 控件可以使用对象的名称 <xref:System.Web.UI.WebControls.Parameter> 来匹配参数化 SQL 查询中的占位符。 同样， <xref:System.Web.UI.WebControls.SqlDataSource> 控件可以使用 <xref:System.Web.UI.WebControls.Parameter> 集合中对象的名称 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 来匹配属性中的占位符 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 。 在某些情况下，不使用名称，并且将 <xref:System.Web.UI.WebControls.Parameter> 对象添加到集合的顺序 <xref:System.Web.UI.WebControls.ParameterCollection> 更重要。 有关详细信息，请参阅 [将参数用于 SqlDataSource 控件](https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100)) 和 [将参数用于 ObjectDataSource 控件](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 如果更改了参数的名称，则 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用控件显示筛选的数据， <xref:System.Web.UI.WebControls.ObjectDataSource> 以便从中间层业务对象检索数据和 <xref:System.Web.UI.WebControls.GridView> 显示结果的控件。 此代码示例包含一个 <xref:System.Web.UI.WebControls.TextBox> 控件、一个 <xref:System.Web.UI.WebControls.GridView> 控件、一个 <xref:System.Web.UI.WebControls.ObjectDataSource> 控件和一个提交按钮。 默认情况下，将 <xref:System.Web.UI.WebControls.TextBox> 使用其中一个雇员的姓名填充控件 `Northwind` 。 <xref:System.Web.UI.WebControls.GridView>控件显示有关由控件中的名称标识的雇员的信息 <xref:System.Web.UI.WebControls.TextBox> 。 若要检索另一个雇员的数据，请在控件中输入雇员的全名， <xref:System.Web.UI.WebControls.TextBox> 并单击按钮。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性指定一个表达式，该表达式用于筛选属性检索的数据 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 。 它使用计算结果为集合中包含的参数的参数占位符 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 。 在此示例中，参数占位符由单引号界定，因为参数的类型是可能包含空格的字符串类型。 如果参数的类型是数值或日期类型，则不需要用到边界引号。  
  
 此代码示例是为类的属性提供的更大示例的一部分 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> <xref:System.Web.UI.WebControls.ObjectDataSource> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
      </Docs>
    </Member>
    <Member MemberName="OnParameterChanged">
      <MemberSignature Language="C#" Value="protected void OnParameterChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnParameterChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.OnParameterChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnParameterChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnParameterChanged();" />
      <MemberSignature Language="F#" Value="member this.OnParameterChanged : unit -&gt; unit" Usage="parameter.OnParameterChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>调用包含 <see cref="M:System.Web.UI.WebControls.ParameterCollection.OnParametersChanged(System.EventArgs)" /> 对象的 <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 集合的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.UI.WebControls.Parameter> 对象未包含在 <xref:System.Web.UI.WebControls.ParameterCollection> 集合中，则调用 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 方法不起作用。 如果 <xref:System.Web.UI.WebControls.Parameter> 对象包含在 <xref:System.Web.UI.WebControls.ParameterCollection> 集合中，则将 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 引发 <xref:System.Web.UI.WebControls.ParameterCollection.ParametersChanged?displayProperty=nameWithType> 集合的事件。  
  
 如果 <xref:System.Web.UI.WebControls.ParameterCollection> 集合包含在数据源控件中，则该 <xref:System.Web.UI.WebControls.ParameterCollection.ParametersChanged?displayProperty=nameWithType> 事件将引发数据源控件的 <xref:System.Web.UI.IDataSource.DataSourceChanged> 事件，从而导致任何数据绑定控件重新绑定。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何调用 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 方法，以便 <xref:System.Web.UI.WebControls.ParameterCollection.ParametersChanged> 在参数的状态发生更改时引发事件。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#7)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.Parameter.OnParameterChanged" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.Parameter.OnParameterChanged" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.ParameterCollection.ParametersChanged" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="abstract member SaveViewState : unit -&gt; obj&#xA;override this.SaveViewState : unit -&gt; obj" Usage="parameter.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自页回发到服务器开始，将更改保存到 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象的视图状态。</summary>
        <returns>包含 <see cref="T:System.Object" /> 视图状态更改的 <see cref="T:System.Web.UI.WebControls.Parameter" />。 如果没有与此对象关联的视图状态，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法主要由控件开发人员使用。  
  
 视图状态是服务器控件属性的值的累计。 这些值自动置于服务器控件的 <xref:System.Web.UI.Control.ViewState%2A> 属性中，该属性是类的实例 <xref:System.Web.UI.StateBag> 。 然后，将此属性的值保存到服务器控件生命周期的保存状态阶段之后的字符串对象。  
  
 保存视图状态时，此字符串对象将作为存储在 HTML 元素中的变量返回给客户端 `hidden` 。 创作自定义服务器控件时，可以通过重写此方法并修改服务器控件的属性来提高效率 <xref:System.Web.UI.WebControls.Parameter.ViewState%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="SetDirty">
      <MemberSignature Language="C#" Value="protected internal virtual void SetDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SetDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.SetDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub SetDirty ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void SetDirty();" />
      <MemberSignature Language="F#" Value="abstract member SetDirty : unit -&gt; unit&#xA;override this.SetDirty : unit -&gt; unit" Usage="parameter.SetDirty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>标记 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象，以便在视图状态中记录其状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.SetDirty%2A>方法由方法直接调用 <xref:System.Web.UI.WebControls.ParameterCollection.SetDirtyObject%2A?displayProperty=nameWithType> 以标记 <xref:System.Web.UI.WebControls.Parameter> 对象，以便在视图状态中记录其状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Size { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Size : int with get, set" Usage="System.Web.UI.WebControls.Parameter.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数的大小。</summary>
        <value>表示为整数的参数大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当的值 <xref:System.Web.UI.WebControls.Parameter.Size%2A> 更改时，将 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberSignature Language="F#" Value="abstract member System.ICloneable.Clone : unit -&gt; obj&#xA;override this.System.ICloneable.Clone : unit -&gt; obj" Usage="parameter.System.ICloneable.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前 <see cref="T:System.Web.UI.WebControls.Parameter" /> 实例的副本。</summary>
        <returns>是当前对象副本的 <see cref="T:System.Web.UI.WebControls.Parameter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.Clone%2A>方法调用 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> 构造函数以 <xref:System.Web.UI.WebControls.Parameter> 使用当前实例的值初始化类的新实例。  
  
 如果扩展 <xref:System.Web.UI.WebControls.Parameter> 类，则可以重写 <xref:System.Web.UI.WebControls.Parameter.Clone%2A> 方法以包含应复制到派生类的新实例的任何状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.#ctor(System.Web.UI.WebControls.Parameter)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IStateManager::IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.IStateManager.IsTrackingViewState : bool" Usage="System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象是否保存对其视图状态的更改。</summary>
        <value>如果数据源视图被标记为保存其状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (savedState As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ savedState) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IStateManager.LoadViewState : obj -&gt; unit&#xA;override this.System.Web.UI.IStateManager.LoadViewState : obj -&gt; unit" Usage="parameter.System.Web.UI.IStateManager.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Object" />，表示要还原的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 状态。</param>
        <summary>将数据源视图还原为保存过的前一视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法 <xref:System.Web.UI.WebControls.Parameter> 从方法保存的上一个页请求还原对象的视图状态信息 <xref:System.Web.UI.WebControls.Parameter.SaveViewState%2A> 。  
  
 此方法主要由控件开发人员使用。 您可以重写此方法以控制自定义服务器控件如何还原其视图状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IStateManager.SaveViewState : unit -&gt; obj&#xA;override this.System.Web.UI.IStateManager.SaveViewState : unit -&gt; obj" Usage="parameter.System.Web.UI.IStateManager.SaveViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自页回发到服务器开始，将更改保存到 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象的视图状态。</summary>
        <returns>包含 <see cref="T:System.Object" /> 对象的视图状态更改的 <see cref="T:System.Web.UI.WebControls.Parameter" />。 如果没有与此对象关联的视图状态，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法主要由控件开发人员使用。  
  
 视图状态是服务器控件属性的值的累计。 这些值自动置于服务器控件的 <xref:System.Web.UI.Control.ViewState%2A> 属性中，该属性是类的实例 <xref:System.Web.UI.StateBag> 。 然后，将此属性的值保存到服务器控件生命周期的保存状态阶段之后的字符串对象。  
  
 保存视图状态时，此字符串对象将作为存储在 HTML 元素中的变量返回给客户端 `hidden` 。 创作自定义服务器控件时，可以通过重写此方法并修改服务器控件的属性来提高效率 <xref:System.Web.UI.WebControls.Parameter.ViewState%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IStateManager.TrackViewState : unit -&gt; unit&#xA;override this.System.Web.UI.IStateManager.TrackViewState : unit -&gt; unit" Usage="parameter.System.Web.UI.IStateManager.TrackViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象跟踪其视图状态更改，以便这些更改可以存储在控件的 <see cref="P:System.Web.UI.Control.ViewState" /> 对象中并在同一页面的不同请求间保留。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="parameter.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
        <returns>此实例的值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter.ToString%2A>方法返回对象的 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 属性 <xref:System.Web.UI.WebControls.Parameter> 。 如果该 <xref:System.Web.UI.WebControls.Parameter> 对象没有名称，则 <xref:System.Web.UI.WebControls.Parameter.ToString%2A> 返回 <xref:System.String.Empty?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的代码示例演示如何访问对象的各种属性 <xref:System.Web.UI.WebControls.Parameter> ，包括其 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 和 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.Parameter.ToString_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter.ToString_1/CS/parametertostringcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.Parameter.ToString_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter.ToString_1/VB/parametertostringvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TrackViewState();" />
      <MemberSignature Language="F#" Value="abstract member TrackViewState : unit -&gt; unit&#xA;override this.TrackViewState : unit -&gt; unit" Usage="parameter.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象跟踪其视图状态更改，以便这些更改可以存储在控件的 <see cref="P:System.Web.UI.Control.ViewState" /> 对象中并在同一页面的不同请求间保留。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public TypeCode Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TypeCode Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TypeCode Type { TypeCode get(); void set(TypeCode value); };" />
      <MemberSignature Language="F#" Value="member this.Type : TypeCode with get, set" Usage="System.Web.UI.WebControls.Parameter.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数的类型。</summary>
        <value><see cref="T:System.Web.UI.WebControls.Parameter" /> 的类型。 默认值为 <see cref="F:System.TypeCode.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类型可用于创建强类型参数，以便在 Web 应用程序和基础代码之间正确转换值。  
  
 如果更改了参数的类型，则 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> 调用方法。  
  
   
  
## Examples  
 下面的代码示例演示了如何设置 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> 对象的、和属性，并将 <xref:System.Web.UI.WebControls.Parameter.Type%2A> <xref:System.Web.UI.WebControls.Parameter.Direction%2A> <xref:System.Web.UI.WebControls.Parameter> 其用作存储过程的输出参数和返回值参数。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/CS/sql21cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/VB/sql21vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">参数类型不是 <see cref="T:System.TypeCode" /> 值之一。</exception>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/z72eefad(v=vs.100)">使用带参数的 SqlDataSource 和 AccessDataSource 控件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4">在 ObjectDataSource 控件中使用参数</related>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="protected System.Web.UI.StateBag ViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.StateBag ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.ViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ViewState As StateBag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::StateBag ^ ViewState { System::Web::UI::StateBag ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : System.Web.UI.StateBag" Usage="System.Web.UI.WebControls.Parameter.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.StateBag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取状态信息的字典，这些信息使您可以在同一页的多个请求间保存和还原 <see cref="T:System.Web.UI.WebControls.Parameter" /> 对象的视图状态。</summary>
        <value>包含 <see cref="T:System.Web.UI.StateBag" /> 对象的视图状态信息的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 的实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参数的视图状态是其所有属性值的累计。 若要跨 HTTP 请求保留这些值，ASP.NET 服务器控件使用此属性（类的实例 <xref:System.Web.UI.StateBag> ）来存储属性值。 然后，在处理后续请求时，这些值将作为变量传递给 HTML `hidden` input 元素。 默认情况下，为所有服务器控件启用视图状态。  
  
 有关字典以及如何使用它们的详细信息，请参阅 [集合和数据结构](/dotnet/standard/collections/)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用视图状态对象将参数对象状态存储在扩展类的类中 <xref:System.Web.UI.WebControls.Parameter> 。 此代码示例是为类概述提供的更大示例的一部分 <xref:System.Web.UI.WebControls.Parameter> 。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter_2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#5)]
 [!code-vb[System.Web.UI.WebControls.Parameter_2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
      </Docs>
    </Member>
  </Members>
</Type>
