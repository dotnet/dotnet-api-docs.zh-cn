<Type Name="FormView" FullName="System.Web.UI.WebControls.FormView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f340811598cdf94b61d49b2fa1680c05877b248" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83962953" /></Metadata><TypeSignature Language="C#" Value="public class FormView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.IDataItemContainer, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IPostBackContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormView extends System.Web.UI.WebControls.CompositeDataBoundControl implements class System.Web.UI.IDataItemContainer, class System.Web.UI.INamingContainer, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IPostBackContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormView" />
  <TypeSignature Language="VB.NET" Value="Public Class FormView&#xA;Inherits CompositeDataBoundControl&#xA;Implements IDataItemContainer, IPostBackContainer, IPostBackEventHandler" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormView : System::Web::UI::WebControls::CompositeDataBoundControl, System::Web::UI::IDataItemContainer, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IPostBackContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type FormView = class&#xA;    inherit CompositeDataBoundControl&#xA;    interface IDataItemContainer&#xA;    interface INamingContainer&#xA;    interface IPostBackEventHandler&#xA;    interface IPostBackContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C#" Value="public class FormView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.IDataItemContainer, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IDataBoundItemControl, System.Web.UI.WebControls.IPostBackContainer" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormView extends System.Web.UI.WebControls.CompositeDataBoundControl implements class System.Web.UI.IDataItemContainer, class System.Web.UI.INamingContainer, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IDataBoundControl, class System.Web.UI.WebControls.IDataBoundItemControl, class System.Web.UI.WebControls.IPostBackContainer" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class FormView&#xA;Inherits CompositeDataBoundControl&#xA;Implements IDataBoundItemControl, IDataItemContainer, IPostBackContainer, IPostBackEventHandler" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormView : System::Web::UI::WebControls::CompositeDataBoundControl, System::Web::UI::IDataItemContainer, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IDataBoundItemControl, System::Web::UI::WebControls::IPostBackContainer" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FormView = class&#xA;    inherit CompositeDataBoundControl&#xA;    interface IDataItemContainer&#xA;    interface INamingContainer&#xA;    interface IPostBackEventHandler&#xA;    interface IPostBackContainer&#xA;    interface IDataBoundItemControl&#xA;    interface IDataBoundControl" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeDataBoundControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IDataItemContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IDataBoundControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IDataBoundItemControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPostBackContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("PageIndexChanging")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.DataKeyProperty("DataKey")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用用户定义的模板显示数据源中单个记录的值。 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件可用于编辑、删除和插入记录。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 本主题内容：

-   [介绍](#introduction)

-   [模板](#templates)

-   [绑定到数据](#binding_to_data)

-   [数据操作](#data_operations)

-   [自定义用户界面](#customizing_the_user_interface)

-   [事件](#events)

-   [辅助功能](#accessibility)

-   [应用 CSS 样式](#applying_styles)

-   [声明性语法](#declarative_syntax)

<a name="introduction"></a>
## <a name="introduction"></a>介绍
 <xref:System.Web.UI.WebControls.FormView> 控件用于显示数据源中的单个记录。 它与 <xref:System.Web.UI.WebControls.DetailsView> 控件类似，只不过它显示用户定义的模板而不是行字段。 创建自己的模板使你可以更灵活地控制数据的显示方式。 <xref:System.Web.UI.WebControls.FormView> 控件支持以下功能：

-   绑定到数据源控件，如 <xref:System.Web.UI.WebControls.SqlDataSource> 和 <xref:System.Web.UI.WebControls.ObjectDataSource>。

-   内置插入功能。

-   内置的更新和删除功能。

-   内置的分页功能。

-   以编程方式访问 <xref:System.Web.UI.WebControls.FormView> 对象模型，以动态设置属性、处理事件等。

-   通过用户定义的模板、主题和样式可自定义外观。

<a name="templates"></a>
## <a name="templates"></a>模板
 要使 <xref:System.Web.UI.WebControls.FormView> 控件显示内容，需要为控件的不同部分创建模板。 大多数模板是可选的;但是，您必须为在其中配置控件的模式创建模板。 例如，支持插入记录的 <xref:System.Web.UI.WebControls.FormView> 控件必须定义插入项模板。 下表列出了你可以创建的不同模板。

|模板类型|说明|
|-------------------|-----------------|
|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|定义在 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式时数据行的内容。 此模板通常包含输入控件和命令按钮，用户可以使用这些按钮编辑现有记录。|
|<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>|定义在 <xref:System.Web.UI.WebControls.FormView> 控件绑定到不包含任何记录的数据源时所显示的空数据行的内容。 此模板通常包含用于向用户发出警报，指出数据源不包含任何记录的内容。|
|<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>|定义脚注行的内容。 此模板通常包含希望在页脚行中显示的任何其他内容。 **注意：** 作为替代方法，只需通过设置 "<xref:System.Web.UI.WebControls.FormView.FooterText%2A>" 属性来指定要在脚注行中显示的文本。|
|<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>|定义标题行的内容。 此模板通常包含你希望在标题行中显示的任何其他内容。 **注意：** 作为替代方法，只需通过设置 "<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>" 属性来指定要在标题行中显示的文本。|
|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|定义在 <xref:System.Web.UI.WebControls.FormView> 控件处于只读模式时数据行的内容。 此模板通常包含用于显示现有记录的值的内容。|
|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|定义在 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时数据行的内容。 此模板通常包含用户可用于添加新记录的输入控件和命令按钮。|
|<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>|定义当分页功能处于启用状态时显示的页导航行的内容（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`）。 此模板通常包含用户可在其中导航到另一记录的控件。 **注意：** <xref:System.Web.UI.WebControls.FormView> 控件具有内置的页导航行用户界面（UI）。 仅当想要创建自己的自定义页导航行时，才需要创建页导航模板。|

 若要在项模板中显示某个字段的值，请使用数据绑定表达式。 有关数据绑定表达式的详细信息，请参阅[数据绑定表达式语法](https://msdn.microsoft.com/library/676beb1d-ddfa-4153-bba8-3c86dcb7ceca)。

 编辑项模板和插入项模板中的输入控件可以通过使用双向绑定表达式绑定到数据源的字段。 这允许 <xref:System.Web.UI.WebControls.FormView> 控件自动提取用于更新或插入操作的输入控件的值。 双向绑定表达式还允许编辑项模板中的输入控件自动显示原始字段值。 有关双向绑定表达式的详细信息，请参阅[绑定到数据库](https://docs.microsoft.com/previous-versions/aspnet/ms178361(v=vs.100))。

<a name="binding_to_data"></a>
## <a name="binding-to-data"></a>绑定到数据
 <xref:System.Web.UI.WebControls.FormView> 控件可以绑定到数据源控件（如 <xref:System.Web.UI.WebControls.SqlDataSource>、<xref:System.Web.UI.WebControls.ObjectDataSource>或 <xref:System.Web.UI.WebControls.AccessDataSource>），也可以绑定到实现 <xref:System.Collections.IEnumerable?displayProperty=nameWithType> 接口的任何数据源集合，例如 <xref:System.Data.DataView?displayProperty=nameWithType>、<xref:System.Collections.ArrayList?displayProperty=nameWithType>、<xref:System.Collections.Generic.List%601?displayProperty=nameWithType>或其他集合类型。 使用以下方法之一将 <xref:System.Web.UI.WebControls.FormView> 控件绑定到相应的数据源类型：

-   若要绑定到数据源控件，请将 <xref:System.Web.UI.WebControls.FormView> 控件的 <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> 属性设置为数据源控件的 <xref:System.Web.UI.Control.ID%2A> 值。 <xref:System.Web.UI.WebControls.FormView> 控件将自动绑定到指定的数据源控件，并可以利用数据源控件的功能执行插入、更新、删除和分页功能。 这是绑定到数据的首选方法。

-   若要绑定到实现 <xref:System.Collections.IEnumerable?displayProperty=nameWithType> 接口的数据源，请以编程方式将 <xref:System.Web.UI.WebControls.FormView> 控件的 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> 属性设置为数据源，然后调用 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 方法。 使用此方法时，<xref:System.Web.UI.WebControls.FormView> 控件不提供内置的插入、更新、删除和分页功能。 需要使用相应的事件来提供此功能。

 有关数据绑定的详细信息，请参阅[ASP.NET 数据访问内容映射](https://docs.microsoft.com/previous-versions/aspnet/6759sth4(v=vs.100))。

> [!NOTE]
>  此控件可用于显示用户输入，其中可能包括恶意客户端脚本。 在应用程序中显示可执行脚本、SQL 语句或其他代码之前，请检查从该客户端发送的任何信息。 在此控件中显示值之前，强烈建议尽可能使用 HTML 编码值。 ASP.NET 提供输入请求验证功能来阻止用户输入中的脚本和 HTML。 还提供验证服务器控件以评估用户输入。 有关详细信息，请参阅[验证控件简介](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2e4hd649(v=vs.85))。

<a name="data_operations"></a>
## <a name="data-operations"></a>数据操作
 <xref:System.Web.UI.WebControls.FormView> 控件提供了许多内置功能，使用户可以对控件中的项进行更新、删除、插入和分页。 将 <xref:System.Web.UI.WebControls.FormView> 控件绑定到数据源控件时，<xref:System.Web.UI.WebControls.FormView> 控件可以利用数据源控件的功能，并提供自动更新、删除、插入和分页功能。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView> 控件可以为与其他类型的数据源的更新、删除、插入和分页操作提供支持;但是，必须为这些操作的实现提供相应的事件处理程序。

 由于 <xref:System.Web.UI.WebControls.FormView> 控件使用模板，因此它不提供自动生成命令按钮以执行更新、删除或插入操作的方法。 您必须在适当的模板中手动包含这些命令按钮。 <xref:System.Web.UI.WebControls.FormView> 控件识别某些按钮，这些按钮的 `CommandName` 属性设置为特定值。 下表列出了 <xref:System.Web.UI.WebControls.FormView> 控件识别的命令按钮。

|按钮|CommandName 值|说明|
|------------|-----------------------|-----------------|
|取消|退出|在更新或插入操作中用于取消操作并丢弃用户输入的值。 然后，<xref:System.Web.UI.WebControls.FormView> 控件返回到 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性指定的模式。|
|删除|“Delete”|用于删除操作以从数据源中删除所显示的记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 和 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 事件。|
|编辑|编辑|用于更新操作以在编辑模式下放置 <xref:System.Web.UI.WebControls.FormView> 控件。 为数据行显示 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> 属性中指定的内容。|
|插入|&|在插入操作中用于尝试使用用户提供的值在数据源中插入新记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 和 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 事件。|
|新建|新西兰|在插入操作中用于将 <xref:System.Web.UI.WebControls.FormView> 控件置于插入模式下。 为数据行显示 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> 属性中指定的内容。|
|页面|分页|用于在分页操作中表示执行分页的页导航行中的按钮。 若要指定分页操作，请将按钮的 `CommandArgument` 属性设置为 "下一步"、"上一步"、"First"、"Last" 或要导航到的页面的索引。 引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 和 <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> 事件。 **注意：** 此类型的按钮通常仅在页导航模板中使用。|
|更新|时更新|用于更新操作，尝试使用用户提供的值更新数据源中显示的记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 和 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 事件。|

 与 "删除" 按钮（它会立即删除显示的记录）不同，单击 "编辑" 或 "新建" 按钮时，<xref:System.Web.UI.WebControls.FormView> 控件将分别进入编辑或插入模式。 在编辑模式下，将为当前数据项显示 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> 属性中包含的内容。 通常，编辑项模板的定义使 "编辑" 按钮替换为更新和 "取消" 按钮。 适用于字段的数据类型（如 <xref:System.Web.UI.WebControls.TextBox> 或 <xref:System.Web.UI.WebControls.CheckBox> 控件）的输入控件通常还显示为用户要修改的字段值。 单击 "更新" 按钮将更新数据源中的记录，而单击 "取消" 按钮将放弃所有更改。

 同样，当控件处于插入模式时，将为数据项显示 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> 属性中包含的内容。 插入项模板通常定义为：将 "新建" 按钮替换为 "插入" 和 "取消" 按钮，并为用户显示空输入控件以输入新记录的值。 单击 "插入" 按钮将插入数据源中的记录，而单击 "取消" 按钮将放弃所有更改。

 <xref:System.Web.UI.WebControls.FormView> 控件提供了一个分页功能，该功能允许用户导航到数据源中的其他记录。 启用后，页导航行显示在包含页面导航控件的 <xref:System.Web.UI.WebControls.FormView> 控件中。 若要启用分页，请将 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`。 您可以通过设置 "<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>" 和 "<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>" 属性中包含的对象的属性来自定义页导航行。 您可以使用 "<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>" 属性来创建自己的 UI，而不是使用内置的页导航行 UI。

<a name="customizing_the_user_interface"></a>
## <a name="customizing-the-user-interface"></a>自定义用户界面
 您可以通过设置控件的不同部分的样式属性来自定义 <xref:System.Web.UI.WebControls.FormView> 控件的外观。 下表列出了不同的样式属性。

|Style 属性|说明|
|--------------------|-----------------|
|<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>|<xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式时数据行的样式设置。|
|<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>|当数据源不包含任何记录时，<xref:System.Web.UI.WebControls.FormView> 控件中显示的空数据行的样式设置。|
|<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>|<xref:System.Web.UI.WebControls.FormView> 控件的脚注行的样式设置。|
|<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>|<xref:System.Web.UI.WebControls.FormView> 控件的标题行的样式设置。|
|<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>|<xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时数据行的样式设置。|
|<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>|启用分页功能时，<xref:System.Web.UI.WebControls.FormView> 控件中显示的页导航行的样式设置。|
|<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>|<xref:System.Web.UI.WebControls.FormView> 控件处于只读模式时数据行的样式设置。|

<a name="events"></a>
## <a name="events"></a>Events
 <xref:System.Web.UI.WebControls.FormView> 控件提供了多个可对其进行编程的事件。 这使您可以在每次发生事件时运行自定义例程。 下表列出了 <xref:System.Web.UI.WebControls.FormView> 控件支持的事件。

|事件|说明|
|-----------|-----------------|
|<xref:System.Web.UI.WebControls.FormView.ItemCommand>|在单击 <xref:System.Web.UI.WebControls.FormView> 控件中的某个按钮时发生。 此事件通常用于在控件中单击按钮时执行任务。|
|<xref:System.Web.UI.WebControls.FormView.ItemCreated>|在 <xref:System.Web.UI.WebControls.FormView> 控件中创建所有 <xref:System.Web.UI.WebControls.FormViewRow> 对象之后发生。 此事件通常用于在记录显示之前修改记录的值。|
|<xref:System.Web.UI.WebControls.FormView.ItemDeleted>|在单击 "删除" 按钮（其 `CommandName` 属性设置为 "Delete" 的按钮）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件从数据源中删除记录后发生。 此事件通常用于检查删除操作的结果。|
|<xref:System.Web.UI.WebControls.FormView.ItemDeleting>|在单击 "删除" 按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件从数据源中删除记录之前发生。 此事件通常用于取消删除操作。|
|<xref:System.Web.UI.WebControls.FormView.ItemInserted>|单击 "插入" 按钮（其 `CommandName` 属性设置为 "插入" 的按钮）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件插入记录后发生。 此事件通常用于检查插入操作的结果。|
|<xref:System.Web.UI.WebControls.FormView.ItemInserting>|当单击 "插入" 按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件插入记录之前发生。 此事件通常用于取消插入操作。|
|<xref:System.Web.UI.WebControls.FormView.ItemUpdated>|在单击 "更新" 按钮（其 `CommandName` 属性设置为 "Update" 的按钮）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件更新行后发生。 此事件通常用于检查更新操作的结果。|
|<xref:System.Web.UI.WebControls.FormView.ItemUpdating>|当单击 "更新" 按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件更新记录之前发生。 此事件通常用于取消更新操作。|
|<xref:System.Web.UI.WebControls.FormView.ModeChanged>|在 <xref:System.Web.UI.WebControls.FormView> 控件更改模式（用于编辑、插入或只读模式）后发生。 此事件通常用于在 <xref:System.Web.UI.WebControls.FormView> 控件更改模式时执行任务。|
|<xref:System.Web.UI.WebControls.FormView.ModeChanging>|在 <xref:System.Web.UI.WebControls.FormView> 控件更改模式（用于编辑、插入或只读模式）之前发生。 此事件通常用于取消模式更改。|
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之后发生。 此事件通常在用户导航至控件中的其他记录后需要执行任务时使用。|
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之前发生。 此事件通常用于取消分页操作。|

<a name="accessibility"></a>
## <a name="accessibility"></a>可访问性
 有关如何配置此控件以生成符合辅助功能标准的标记的信息，请参阅[Visual Studio 中的辅助功能和 ASP.NET](https://docs.microsoft.com/previous-versions/ms228004(v=vs.140))和[ASP.NET 控件和辅助功能](https://docs.microsoft.com/previous-versions/ms227996(v=vs.140))。

<a name="applying_styles"></a>
## <a name="applying-css-styles"></a>应用 CSS 样式
 利用 <xref:System.Web.UI.WebControls.FormView> 控件，你可以在标记中指定 CSS 样式规则。 如果使用模板来自定义 <xref:System.Web.UI.WebControls.FormView> 控件的外观，则可以在模板的标记中指定 CSS 样式。 在这种情况下，不需要额外的外部表。 您可以通过将 <xref:System.Web.UI.WebControls.FormView.RenderOuterTable%2A> 属性设置为 `false`来阻止呈现该表。

<a name="declarative_syntax"></a>
## <a name="declarative-syntax"></a>声明性语法

```
<asp:FormView
    AccessKey="string"
    AllowPaging="True|False"
    BackColor="color name|#dddddd"
    BackImageUrl="uri"
    BorderColor="color name|#dddddd"
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|
        Inset|Outset"
    BorderWidth="size"
    Caption="string"
    CaptionAlign="NotSet|Top|Bottom|Left|Right"
    CellPadding="integer"
    CellSpacing="integer"
    CssClass="string"
    DataKeyNames="string"
    DataMember="string"
    DataSource="string"
    DataSourceID="string"
    DefaultMode="ReadOnly|Edit|Insert"
    EmptyDataText="string"
    Enabled="True|False"
    EnableTheming="True|False"
    EnableViewState="True|False"
    Font-Bold="True|False"
    Font-Italic="True|False"
    Font-Names="string"
    Font-Overline="True|False"
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|
        Large|X-Large|XX-Large"
    Font-Strikeout="True|False"
    Font-Underline="True|False"
    FooterText="string"
    ForeColor="color name|#dddddd"
    GridLines="None|Horizontal|Vertical|Both"
    HeaderText="string"
    Height="size"
    HorizontalAlign="NotSet|Left|Center|Right|Justify"
    ID="string"
    OnDataBinding="DataBinding event handler"
    OnDataBound="DataBound event handler"
    OnDisposed="Disposed event handler"
    OnInit="Init event handler"
    OnItemCommand="ItemCommand event handler"
    OnItemCreated="ItemCreated event handler"
    OnItemDeleted="ItemDeleted event handler"
    OnItemDeleting="ItemDeleting event handler"
    OnItemInserted="ItemInserted event handler"
    OnItemInserting="ItemInserting event handler"
    OnItemUpdated="ItemUpdated event handler"
    OnItemUpdating="ItemUpdating event handler"
    OnLoad="Load event handler"
    OnModeChanged="ModeChanged event handler"
    OnModeChanging="ModeChanging event handler"
    OnPageIndexChanged="PageIndexChanged event handler"
    OnPageIndexChanging="PageIndexChanging event handler"
    OnPreRender="PreRender event handler"
    OnUnload="Unload event handler"
    PageIndex="integer"
    PagerSettings-FirstPageImageUrl="uri"
    PagerSettings-FirstPageText="string"
    PagerSettings-LastPageImageUrl="uri"
    PagerSettings-LastPageText="string"
    PagerSettings-Mode="NextPrevious|Numeric|NextPreviousFirstLast|
        NumericFirstLast"
    PagerSettings-NextPageImageUrl="uri"
    PagerSettings-NextPageText="string"
    PagerSettings-PageButtonCount="integer"
    PagerSettings-Position="Bottom|Top|TopAndBottom"
    PagerSettings-PreviousPageImageUrl="uri"
    PagerSettings-PreviousPageText="string"
    PagerSettings-Visible="True|False"
    RenderOuterTable="True|False"
    runat="server"
    SkinID="string"
    Style="string"
    TabIndex="integer"
    ToolTip="string"
    Visible="True|False"
    Width="size"
>
        <EditItemTemplate>
            <!-- child controls -->
        </EditItemTemplate>
        <EditRowStyle />
        <EmptyDataRowStyle />
        <EmptyDataTemplate>
            <!-- child controls -->
        </EmptyDataTemplate>
        <FooterStyle />
        <FooterTemplate>
            <!-- child controls -->
        </FooterTemplate>
        <HeaderStyle />
        <HeaderTemplate>
            <!-- child controls -->
        </HeaderTemplate>
        <InsertItemTemplate>
            <!-- child controls -->
        </InsertItemTemplate>
        <InsertRowStyle />
        <ItemTemplate>
            <!-- child controls -->
        </ItemTemplate>
        <PagerSettings
            FirstPageImageUrl="uri"
            FirstPageText="string"
            LastPageImageUrl="uri"
            LastPageText="string"
            Mode="NextPrevious|Numeric|NextPreviousFirstLast|
                NumericFirstLast"
            NextPageImageUrl="uri"
            NextPageText="string"
            OnPropertyChanged="PropertyChanged event handler"
            PageButtonCount="integer"
            Position="Bottom|Top|TopAndBottom"
            PreviousPageImageUrl="uri"
            PreviousPageText="string"
            Visible="True|False"
        />
        <PagerStyle />
        <PagerTemplate>
            <!-- child controls -->
        </PagerTemplate>
        <RowStyle />
</asp:FormView>
```



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView> 控件显示 <xref:System.Web.UI.WebControls.SqlDataSource> 控件中的值。

 [!code-aspx-csharp[FormViewSimple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewSimple/CS/formviewsimplecs.aspx#1)]
 [!code-aspx-vb[FormViewSimple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewSimple/VB/formviewsimplevb.aspx#1)]

 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView> 控件编辑现有记录。

> [!IMPORTANT]
>  此示例中的控件包含一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[FormView#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormView/CS/formvieweditcs.aspx#1)]
 [!code-aspx-vb[FormView#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormView/VB/formvieweditvb.aspx#1)]

 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView> 控件插入新记录。

> [!IMPORTANT]
>  此示例中的控件包含一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]

 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
    <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSource" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.CurrentMode" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
    <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCommand" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
    <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.FormView" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用此构造函数初始化 <xref:System.Web.UI.WebControls.FormView> 类的新实例。 若要将 <xref:System.Web.UI.WebControls.FormView> 控件动态添加到页面，请创建新的 <xref:System.Web.UI.WebControls.FormView> 对象，设置其属性，然后将其添加到容器控件的 <xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType> 集合，例如 <xref:System.Web.UI.WebControls.PlaceHolder>。



## Examples
 下面的示例演示如何向页面动态添加 <xref:System.Web.UI.WebControls.FormView> 控件。

 [!code-aspx-csharp[FormViewCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCtor/CS/formviewctorcs.aspx#1)]
 [!code-aspx-vb[FormViewCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCtor/VB/formviewctorvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.WebControls.PlaceHolder" />
      </Docs>
    </Member>
    <Member MemberName="AllowPaging">
      <MemberSignature Language="C#" Value="public virtual bool AllowPaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.AllowPaging" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowPaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowPaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPaging : bool with get, set" Usage="System.Web.UI.WebControls.FormView.AllowPaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否启用分页功能。</summary>
        <value>如果启用分页功能，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件具有内置分页功能，使用户可以导航到数据源中的其他记录。 分页功能可用于支持 <xref:System.Collections.ICollection?displayProperty=nameWithType> 接口的任何数据源对象或支持分页功能的数据源。

 若要启用分页功能，请将 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`。 您可以使用 <xref:System.Web.UI.WebControls.FormView.PageCount%2A> 属性来确定基础数据源中的总项数。 若要确定当前显示项的索引，请使用 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性。

 启用分页时，会自动在 <xref:System.Web.UI.WebControls.FormView> 控件中显示一个名为 "页导航行" 的附加行。 页导航行包含页面导航控件，可以显示在控件的顶部和底部，或者同时显示在控件的顶部和底部。 页导航行具有四个内置的页导航显示模式。 下表描述了这四种模式。

|模式|说明|
|----------|-----------------|
|`PagerButton.NextPrevious`|一组由 "上一页" 和 "下一页" 按钮组成的分页控件。|
|`PagerButton.NextPreviousFirstLast`|由 "上一个"、"下一步"、"上一步" 和 "最后一个" 按钮组成|
|`PagerButton.Numeric`|一组由用于直接访问页的带编号的链接按钮组成的分页控件。 这是默认模式。|
|`PagerButton.NumericFirstLast`|一组由编号和第一个和最后一个链接按钮组成的分页控件。|

> [!NOTE]
>  当数据源包含的记录少于两条时，<xref:System.Web.UI.WebControls.FormView> 控件将自动隐藏页导航行。

 通过使用 "<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>" 属性，可以控制页导航行的设置（如页导航显示模式、一次显示的页链接的数目以及页导航控件的文本标签）。 若要控制页导航行的外观（包括其背景色和字体颜色），请使用 "<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>" 属性。 <xref:System.Web.UI.WebControls.FormView> 控件还允许您为页导航行定义自定义模板。 有关创建自定义页导航行模板的详细信息，请参阅 <xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>。

 <xref:System.Web.UI.WebControls.FormView> 控件提供了多个可用于在进行分页时执行自定义操作的事件。 下表列出了可用的事件。

|事件|说明|
|-----------|-----------------|
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之后发生。 此事件通常在用户导航至控件中的其他记录后需要执行任务时使用。|
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|在单击某一页导航按钮时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之前发生。 此事件通常用于取消分页操作。|

> [!NOTE]
>  以编程方式更改 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性时，不会引发这些事件。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性启用 <xref:System.Web.UI.WebControls.FormView> 控件中的分页功能。

 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="BackImageUrl">
      <MemberSignature Language="C#" Value="public virtual string BackImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BackImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageUrl : string with get, set" Usage="System.Web.UI.WebControls.FormView.BackImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的背景中显示的图像的 URL。</summary>
        <value>要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的背景中显示的图像的 URL。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A> 属性指定要在 <xref:System.Web.UI.WebControls.FormView> 控件的背景中显示的图像的 URL。

> [!NOTE]
>  如果指定的图像小于 <xref:System.Web.UI.WebControls.FormView> 控件，则会平铺图像以填充背景。 如果图像大于控件，则图像将被裁剪。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A> 属性在 <xref:System.Web.UI.WebControls.FormView> 控件的背景中显示自定义图像。

 [!code-aspx-csharp[FormViewBackImageUrl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewBackImageUrl/CS/formviewbackimageurlcs.aspx#1)]
 [!code-aspx-vb[FormViewBackImageUrl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewBackImageUrl/VB/formviewbackimageurlvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="BottomPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow BottomPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow BottomPagerRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BottomPagerRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ BottomPagerRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BottomPagerRow : System.Web.UI.WebControls.FormViewRow" Usage="System.Web.UI.WebControls.FormView.BottomPagerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件底部显示的页导航行。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的底部页导航行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 启用分页时（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`）时，会自动在 <xref:System.Web.UI.WebControls.FormView> 控件中显示一个名为 "页导航行" 的附加行。 页导航行包含的控件允许用户导航到其他记录，并且可以显示在控件的顶部和底部，或者同时显示在控件的顶部和底部。 使用 <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A> 属性以编程方式访问表示 <xref:System.Web.UI.WebControls.FormView> 控件中的底部页导航行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象。

> [!NOTE]
>  仅在 <xref:System.Web.UI.WebControls.FormView> 控件在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件中创建底部页导航行后，<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A> 属性才可用。

 当你需要以编程方式操作底部页导航行时（例如，添加自定义内容时），通常会使用此属性。 在创建表示底部页导航行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象后，必须执行对 <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A> 属性的任何修改;否则，<xref:System.Web.UI.WebControls.FormView> 控件将覆盖所有更改。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A> 属性访问在 <xref:System.Web.UI.WebControls.FormView> 控件底部显示的页导航行。 然后，将用其他内容更新页导航行。

 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public virtual string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Caption : string with get, set" Usage="System.Web.UI.WebControls.FormView.Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的 HTML 标题元素中呈现的文本。 提供此属性的目的是使辅助技术设备的用户更易于访问控件。</summary>
        <value>一个字符串，表示要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的 HTML 标题元素中呈现的文本。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.Caption%2A> 属性可以指定要在 <xref:System.Web.UI.WebControls.FormView> 控件中的 HTML 标题元素中呈现的文本。 指定的文本为辅助技术设备提供了可用于使控件更易于访问的表的说明。

 <xref:System.Web.UI.WebControls.FormView> 控件的其他辅助功能支持由 <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> 属性提供。 使用 <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> 属性指定 <xref:System.Web.UI.WebControls.FormView> 控件中的 HTML 标题元素的对齐方式。

 设置此属性后，可以使用设计器工具自动将此属性的值保存到资源文件中。 有关详细信息，请参阅 <xref:System.ComponentModel.LocalizableAttribute> 和[全球化和本地化](https://docs.microsoft.com/previous-versions/aspnet/c6zyy3s9(v=vs.100))。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.Caption%2A> 属性指定在 <xref:System.Web.UI.WebControls.FormView> 控件中呈现的 HTML caption 元素的文本。

 [!code-aspx-csharp[FormViewCaption#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCaption/CS/formviewcaptioncs.aspx#1)]
 [!code-aspx-vb[FormViewCaption#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCaption/VB/formviewcaptionvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.CaptionAlign" />
      </Docs>
    </Member>
    <Member MemberName="CaptionAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableCaptionAlign CaptionAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TableCaptionAlign CaptionAlign" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CaptionAlign" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CaptionAlign As TableCaptionAlign" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::TableCaptionAlign CaptionAlign { System::Web::UI::WebControls::TableCaptionAlign get(); void set(System::Web::UI::WebControls::TableCaptionAlign value); };" />
      <MemberSignature Language="F#" Value="member this.CaptionAlign : System.Web.UI.WebControls.TableCaptionAlign with get, set" Usage="System.Web.UI.WebControls.FormView.CaptionAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableCaptionAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的 HTML 标题元素的水平或垂直位置。 提供此属性的目的是使辅助技术设备的用户更易于访问控件。</summary>
        <value><see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> 值之一。 默认为 <see langword="TableCaptionAlign.NotSet" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> 属性可指定 <xref:System.Web.UI.WebControls.FormView> 控件中的 HTML 标题元素的水平或垂直位置。 提供此属性的目的是使辅助技术设备的用户更易于访问控件。

 此属性是使用 <xref:System.Web.UI.WebControls.TableCaptionAlign> 枚举值之一设置的。 下表列出了可能的值。

|值|说明|
|-----------|-----------------|
|`TableCaptionAlign.Bottom`|标题元素和表的底部对齐。|
|`TableCaptionAlign.Left`|标题元素和表的左边对齐。|
|`TableCaptionAlign.NotSet`|未设置标题元素的对齐方式。|
|`TableCaptionAlign.Right`|标题元素和表的右边对齐。|
|`TableCaptionAlign.Top`|标题元素和表的顶部对齐。|

> [!NOTE]
>  如果将此属性设置为 `TableCaptionAlign.NotSet`，则使用浏览器的默认值。

 <xref:System.Web.UI.WebControls.FormView> 控件的其他辅助功能支持由 <xref:System.Web.UI.WebControls.FormView.Caption%2A> 属性提供。 使用 <xref:System.Web.UI.WebControls.FormView.Caption%2A> 属性可以指定要在 <xref:System.Web.UI.WebControls.FormView> 控件中的 HTML 标题元素中呈现的文本。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> 属性指定应在控件的左侧呈现 <xref:System.Web.UI.WebControls.FormView> 控件中的 HTML 标题元素。

 [!code-aspx-csharp[FormViewCaption#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCaption/CS/formviewcaptioncs.aspx#1)]
 [!code-aspx-vb[FormViewCaption#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCaption/VB/formviewcaptionvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值不是 <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> 枚举值之一。</exception>
        <altmember cref="T:System.Web.UI.WebControls.TableCaptionAlign" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.Caption" />
      </Docs>
    </Member>
    <Member MemberName="CellPadding">
      <MemberSignature Language="C#" Value="public virtual int CellPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellPadding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CellPadding" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CellPadding As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CellPadding { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CellPadding : int with get, set" Usage="System.Web.UI.WebControls.FormView.CellPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置单元格的内容和单元格的边框之间的空间量。</summary>
        <value>单元格的内容和单元格的边框之间的空间量（以像素为单位）。 默认值为 -1，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 "<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>" 属性可控制单元格的内容和单元格的边框之间的间距。 指定的填充量将添加到单元格的四个边。

 <xref:System.Web.UI.WebControls.FormView> 控件的同一列中的所有单元格都具有相同的宽度。 填充量适用于最宽的单元格，列中的所有其他单元格都将调整为该单元格的宽度。 同样，同一行中的所有单元格都具有相同的高度。 填充量适用于行中最高的单元格，该行中的所有其他单元格都将调整为该单元格的高度。 无法指定单个单元大小。

 若要调整单元格的间距，请使用 <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A> 属性。

> [!NOTE]
>  如果未设置此属性，则使用浏览器的默认值。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.CellPadding%2A> 属性指定单元格的内容和单元格的边框之间的间距大小。

 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="CellSpacing">
      <MemberSignature Language="C#" Value="public virtual int CellSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellSpacing" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CellSpacing" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CellSpacing As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CellSpacing { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CellSpacing : int with get, set" Usage="System.Web.UI.WebControls.FormView.CellSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置单元格间的空间量。</summary>
        <value>单元格之间的空间量（以像素为单位）。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A> 属性可控制 <xref:System.Web.UI.WebControls.FormView> 控件中相邻单元格之间的间距。 此间距同时应用于垂直和水平。 单元格间距对于整个控件是统一的。 无法指定行或列之间的个别单元格间距。

> [!NOTE]
>  如果将此属性设置为大于0的值，然后将 <xref:System.Web.UI.WebControls.FormView.GridLines%2A> 属性设置为显示单元格边框的值，则相邻单元格的边框之间将显示一个间隙。 在这种情况下，<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A> 属性控制间隙的大小。

 若要调整单元格内容和单元格边框之间的间距，请使用 <xref:System.Web.UI.WebControls.FormView.CellPadding%2A> 属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A> 属性指定相邻单元格之间的间距量。

 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="ChangeMode">
      <MemberSignature Language="C#" Value="public void ChangeMode (System.Web.UI.WebControls.FormViewMode newMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeMode(valuetype System.Web.UI.WebControls.FormViewMode newMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeMode (newMode As FormViewMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeMode(System::Web::UI::WebControls::FormViewMode newMode);" />
      <MemberSignature Language="F#" Value="member this.ChangeMode : System.Web.UI.WebControls.FormViewMode -&gt; unit" Usage="formView.ChangeMode newMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newMode" Type="System.Web.UI.WebControls.FormViewMode" />
      </Parameters>
      <Docs>
        <param name="newMode"><see cref="T:System.Web.UI.WebControls.FormViewMode" /> 枚举值之一。</param>
        <summary>将 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件切换到指定的数据输入模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.ChangeMode%2A> 方法以编程方式在编辑、插入和只读模式间切换 <xref:System.Web.UI.WebControls.FormView> 控件。 此方法还会更新指定模式下的 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性。 下表列出了不同的模式值。

|模式|说明|
|----------|-----------------|
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式，该模式允许用户更新记录的值。|
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView> 控件处于插入模式，这允许用户向数据源添加新记录。|
|`FormView.ReadOnly`|<xref:System.Web.UI.WebControls.FormView> 控件处于只读模式，这是正常的显示模式。|

> [!NOTE]
>  调用此方法时，不会引发 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 和 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件。



## Examples
 下面的示例演示了当用户导航到另一条记录时，如何使用 <xref:System.Web.UI.WebControls.FormView.ChangeMode%2A> 方法将 <xref:System.Web.UI.WebControls.FormView> 控件返回到只读模式。

 [!code-aspx-csharp[FormViewChangeMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewChangeMode/CS/formviewchangemodecs.aspx#1)]
 [!code-aspx-vb[FormViewChangeMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewChangeMode/VB/formviewchangemodevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CurrentMode" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override int CreateChildControls (System.Collections.IEnumerable dataSource, bool dataBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CreateChildControls(class System.Collections.IEnumerable dataSource, bool dataBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateChildControls (dataSource As IEnumerable, dataBinding As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int CreateChildControls(System::Collections::IEnumerable ^ dataSource, bool dataBinding);" />
      <MemberSignature Language="F#" Value="override this.CreateChildControls : System.Collections.IEnumerable * bool -&gt; int" Usage="formView.CreateChildControls (dataSource, dataBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Collections.IEnumerable" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSource">一个 <see cref="T:System.Collections.IEnumerable" />，表示用于创建控件层次结构的数据源。</param>
        <param name="dataBinding"><see langword="true" /> 指示从数据源直接创建控件层次结构；<see langword="false" /> 指示从视图状态创建控件层次结构。</param>
        <summary>用指定数据源创建用于呈现 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的控件层次结构。</summary>
        <returns>从数据源创建的项的数目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.CreateChildControls%28System.Collections.IEnumerable%2CSystem.Boolean%29> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于为 <xref:System.Web.UI.WebControls.FormView> 控件创建控件层次结构。 当 `true``dataBinding` 参数时，将在创建控件层次结构之前执行数据绑定。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.DataSourceView" /> 控件绑定到的 <see cref="T:System.Web.UI.IDataSource" /> 的 <see cref="T:System.Web.UI.WebControls.FormView" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以创建自己的控件层次结构。</para></block>
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Web.UI.Control.CreateChildControls" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateControlStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlStyle () As Style" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::Style ^ CreateControlStyle();" />
      <MemberSignature Language="F#" Value="override this.CreateControlStyle : unit -&gt; System.Web.UI.WebControls.Style" Usage="formView.CreateControlStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的默认表样式对象。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.Style" />，包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的默认表样式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.CreateControlStyle%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于创建其默认表样式对象。 除了设置 <xref:System.Web.UI.WebControls.TableStyle> 对象的默认样式以外，此方法还会将 <xref:System.Web.UI.WebControls.FormView.CellPadding%2A> 属性设置为0。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以创建自己的默认样式。</para></block>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.TableStyle" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceSelectArguments">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDataSourceSelectArguments () As DataSourceSelectArguments" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceSelectArguments ^ CreateDataSourceSelectArguments();" />
      <MemberSignature Language="F#" Value="override this.CreateDataSourceSelectArguments : unit -&gt; System.Web.UI.DataSourceSelectArguments" Usage="formView.CreateDataSourceSelectArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 对象，该对象包含传递到数据源以进行处理的参数。</summary>
        <returns>一个 <see cref="T:System.Web.UI.DataSourceSelectArguments" />，包含传递到数据源的参数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于创建包含传递到数据源的参数的 <xref:System.Web.UI.DataSourceSelectArguments> 对象。 在此实现中，<xref:System.Web.UI.DataSourceSelectArguments> 对象包含用于分页操作的参数。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法，以指定传递到数据源的自己的值。</para></block>
        <altmember cref="T:System.Web.UI.DataSourceSelectArguments" />
        <altmember cref="M:System.Web.UI.WebControls.DataBoundControl.CreateDataSourceSelectArguments" />
      </Docs>
    </Member>
    <Member MemberName="CreateRow">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.FormViewRow CreateRow (int itemIndex, System.Web.UI.WebControls.DataControlRowType rowType, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.FormViewRow CreateRow(int32 itemIndex, valuetype System.Web.UI.WebControls.DataControlRowType rowType, valuetype System.Web.UI.WebControls.DataControlRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRow (itemIndex As Integer, rowType As DataControlRowType, rowState As DataControlRowState) As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::FormViewRow ^ CreateRow(int itemIndex, System::Web::UI::WebControls::DataControlRowType rowType, System::Web::UI::WebControls::DataControlRowState rowState);" />
      <MemberSignature Language="F#" Value="abstract member CreateRow : int * System.Web.UI.WebControls.DataControlRowType * System.Web.UI.WebControls.DataControlRowState -&gt; System.Web.UI.WebControls.FormViewRow&#xA;override this.CreateRow : int * System.Web.UI.WebControls.DataControlRowType * System.Web.UI.WebControls.DataControlRowState -&gt; System.Web.UI.WebControls.FormViewRow" Usage="formView.CreateRow (itemIndex, rowType, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="rowType" Type="System.Web.UI.WebControls.DataControlRowType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="itemIndex">要显示的数据项的从零开始的索引。</param>
        <param name="rowType"><see cref="T:System.Web.UI.WebControls.DataControlRowType" /> 枚举值之一。</param>
        <param name="rowState"><see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 枚举值的按位组合。</param>
        <summary>使用指定项索引、行类型和行状态创建 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象。</summary>
        <returns>一个具有指定项索引、行类型和行状态的 <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.CreateRow%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于创建用于表示控件中的行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以返回具有自定义设置的 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象。</para></block>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowType" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowState" />
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Table CreateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Table CreateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateTable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateTable () As Table" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::Table ^ CreateTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateTable : unit -&gt; System.Web.UI.WebControls.Table&#xA;override this.CreateTable : unit -&gt; System.Web.UI.WebControls.Table" Usage="formView.CreateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Table</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件创建包含表。</summary>
        <returns>一个 <see cref="T:System.Web.UI.WebControls.Table" />，它表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的包含表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.CreateTable%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于创建充当控件的容器的表。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Table" />
      </Docs>
    </Member>
    <Member MemberName="CurrentMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.FormViewMode CurrentMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode CurrentMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CurrentMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentMode As FormViewMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::FormViewMode CurrentMode { System::Web::UI::WebControls::FormViewMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentMode : System.Web.UI.WebControls.FormViewMode" Usage="System.Web.UI.WebControls.FormView.CurrentMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前数据输入模式。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormViewMode" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性可确定 <xref:System.Web.UI.WebControls.FormView> 控件是处于编辑、插入还是只读模式。 下表列出了不同的模式值。

|模式|说明|
|----------|-----------------|
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式，该模式允许用户更新记录的值。|
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView> 控件处于插入模式，这允许用户向数据源添加新记录。|
|`FormView.ReadOnly`|<xref:System.Web.UI.WebControls.FormView> 控件处于只读模式，这是正常的显示模式。|

 当单击 "新建"、"更新"、"插入"、"删除" 或 "取消" 命令按钮时，<xref:System.Web.UI.WebControls.FormView> 控件通常会自动设置此值。 当 <xref:System.Web.UI.WebControls.FormView> 控件更改模式以响应操作时，将引发下表中的事件。 这允许您创建一个自定义事件处理程序，该处理程序在发生事件时执行相应的例程。

|事件|说明|
|-----------|-----------------|
|<xref:System.Web.UI.WebControls.FormView.ModeChanged>|在 <xref:System.Web.UI.WebControls.FormView> 控件更改模式时，但在模式更改后发生。 此事件通常用于在 <xref:System.Web.UI.WebControls.FormView> 控件更改模式时执行任务。|
|<xref:System.Web.UI.WebControls.FormView.ModeChanging>|在 <xref:System.Web.UI.WebControls.FormView> 控件更改模式时，但在模式更改之前发生。 此事件通常用于取消模式更改。|

 **注意**使用 <xref:System.Web.UI.WebControls.FormView.ChangeMode%2A> 方法以编程方式更改模式时，不会引发这些事件。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性来确定 <xref:System.Web.UI.WebControls.FormView> 控件是处于编辑、插入还是只读模式。 如果用户在 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑中时尝试导航到另一条记录，则会取消分页操作。

 [!code-aspx-csharp[FormViewCurrentMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCurrentMode/CS/formviewcurrentmodecs.aspx#1)]
 [!code-aspx-vb[FormViewCurrentMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCurrentMode/VB/formviewcurrentmodevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DefaultMode" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      </Docs>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override sealed void DataBind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DataBind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.DataBind" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Sub DataBind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void DataBind();" />
      <MemberSignature Language="F#" Value="override this.DataBind : unit -&gt; unit" Usage="formView.DataBind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DataBind> 方法可将数据从数据源绑定到 <xref:System.Web.UI.WebControls.FormView> 控件。 此方法解析控件的活动模板中的所有数据绑定表达式。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" />
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public virtual object DataItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItem" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ DataItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataItem : obj" Usage="System.Web.UI.WebControls.FormView.DataItem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DataItem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项。</summary>
        <value>一个 <see cref="T:System.Object" />，表示绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DataItem%2A> 属性访问绑定到 <xref:System.Web.UI.WebControls.FormView> 控件的数据项。 该数据项通常用于直接访问当前记录的字段值。 此属性返回的 <xref:System.Object> 的类型因数据源而异。 例如，当 <xref:System.Web.UI.WebControls.SqlDataSource> 控件绑定到 <xref:System.Web.UI.WebControls.FormView> 控件时，将返回一个 <xref:System.Data.DataRowView> 对象。

> [!NOTE]
>  此属性仅在数据绑定发生之后才可用。 数据绑定发生之前，此属性将返回 `null`。 当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式并返回 `null`时，此属性也不适用。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.DataItem%2A> 属性来确定数据项中的字段的值。

 [!code-aspx-csharp[FormViewCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCtor/CS/formviewctorcs.aspx#1)]
 [!code-aspx-vb[FormViewCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCtor/VB/formviewctorvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="Overload:System.Web.UI.DataBinder.Eval" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
      </Docs>
    </Member>
    <Member MemberName="DataItemCount">
      <MemberSignature Language="C#" Value="public int DataItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItemCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataItemCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DataItemCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DataItemCount : int" Usage="System.Web.UI.WebControls.FormView.DataItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源中的数据项的数目。</summary>
        <value>数据源中的数据项的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DataItemCount%2A> 属性可以确定数据源中包含的数据项的数目。 此属性包含与 <xref:System.Web.UI.WebControls.FormView.PageCount%2A> 属性相同的值。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItem" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
      </Docs>
    </Member>
    <Member MemberName="DataItemIndex">
      <MemberSignature Language="C#" Value="public virtual int DataItemIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataItemIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DataItemIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DataItemIndex : int" Usage="System.Web.UI.WebControls.FormView.DataItemIndex" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DataItemIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项的索引。</summary>
        <value>从数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据项的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DataItemIndex%2A> 属性可确定从数据源绑定到 <xref:System.Web.UI.WebControls.FormView> 控件的数据项的索引。 此属性包含与 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性相同的值。

> [!NOTE]
>  当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时，此属性不适用。 当控件处于插入模式时，<xref:System.Web.UI.WebControls.FormView.DataItemIndex%2A> 属性返回-1。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItem" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataItemCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
      </Docs>
    </Member>
    <Member MemberName="DataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey DataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey DataKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataKey As DataKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::DataKey ^ DataKey { System::Web::UI::WebControls::DataKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataKey : System.Web.UI.WebControls.DataKey" Usage="System.Web.UI.WebControls.FormView.DataKey" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundItemControl.DataKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Web.UI.WebControls.DataKey" /> 对象，该对象表示所显示的记录的主键。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.DataKey" /> 对象，表示所显示的记录的主键。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 设置 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性后，<xref:System.Web.UI.WebControls.FormView> 控件会自动创建一个 <xref:System.Web.UI.WebControls.DataKey> 对象，该对象包含当前记录的 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性中列出的一个或多个字段的键/值对。 使用 <xref:System.Web.UI.WebControls.FormView.DataKey%2A> 属性可获取此 <xref:System.Web.UI.WebControls.DataKey> 对象。 此属性通常用于获取 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性中指定的字段的键及其对应的值。

> [!NOTE]
>  此外，还可以使用 <xref:System.Web.UI.WebControls.FormView.SelectedValue%2A> 属性来确定 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性中列出的第一个键字段的值。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.DataKey%2A> 属性来确定键字段的值。

 [!code-aspx-csharp[FormViewDataKey#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDataKey/CS/formviewdatakeycs.aspx#1)]
 [!code-aspx-vb[FormViewDataKey#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDataKey/VB/formviewdatakeyvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      </Docs>
    </Member>
    <Member MemberName="DataKeyNames">
      <MemberSignature Language="C#" Value="public virtual string[] DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DataKeyNames" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataKeyNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::String ^&gt; ^ DataKeyNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataKeyNames : string[] with get, set" Usage="System.Web.UI.WebControls.FormView.DataKeyNames" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataKeyNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个数组，该数组包含数据源的键字段的名称。</summary>
        <value>一个数组，包含数据源的键字段的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性指定以逗号分隔的字段名称列表，该列表表示数据源的主键。 设置 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性后，<xref:System.Web.UI.WebControls.FormView> 控件会自动创建一个 <xref:System.Web.UI.WebControls.DataKey> 对象，该对象包含当前记录的 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性中列出的一个或多个字段的键/值对。 然后 <xref:System.Web.UI.WebControls.DataKey> 对象存储在 <xref:System.Web.UI.WebControls.FormView.DataKey%2A> 属性中。

> [!NOTE]
>  必须将 <xref:System.Web.UI.WebControls.FormView> 控件的内置更新、删除和插入功能的 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性设置为 "有效"。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性指定绑定到 <xref:System.Web.UI.WebControls.FormView> 控件的数据源的键字段。

 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewMode DefaultMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode DefaultMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultMode As FormViewMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewMode DefaultMode { System::Web::UI::WebControls::FormViewMode get(); void set(System::Web::UI::WebControls::FormViewMode value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMode : System.Web.UI.WebControls.FormViewMode with get, set" Usage="System.Web.UI.WebControls.FormView.DefaultMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据输入模式，<see cref="T:System.Web.UI.WebControls.FormView" /> 控件在更新、插入或取消操作后返回到该模式。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormViewMode" /> 值之一。 默认为 <see langword="FormViewMode.ReadOnly" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性指定在执行更新、插入或取消操作后 <xref:System.Web.UI.WebControls.FormView> 控件是返回到编辑、插入还是只读模式。 默认情况下，<xref:System.Web.UI.WebControls.FormView> 控件返回到只读模式;但是，可以通过将此属性设置为适当的值，使 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑或插入模式。 下表列出了不同的模式值。

|模式|说明|
|----------|-----------------|
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式，该模式允许用户更新记录的值。|
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView> 控件处于插入模式，这允许用户向数据源添加新记录。|
|`FormViewMode.ReadOnly`|<xref:System.Web.UI.WebControls.FormView> 控件处于只读模式，这是正常的显示模式。|

 此属性通常在 <xref:System.Web.UI.WebControls.FormView> 控件具有单一用途（例如仅用于插入或编辑记录）时使用。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性在更新操作后将 <xref:System.Web.UI.WebControls.FormView> 控件保持在编辑模式下。

 [!code-aspx-csharp[FormViewDefaultMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDefaultMode/CS/formviewdefaultmodecs.aspx#1)]
 [!code-aspx-vb[FormViewDefaultMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDefaultMode/VB/formviewdefaultmodevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值不是 <see cref="T:System.Web.UI.WebControls.FormViewMode" /> 枚举值之一。</exception>
        <altmember cref="T:System.Web.UI.WebControls.FormViewMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CurrentMode" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.DeleteItem" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeleteItem ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteItem();" />
      <MemberSignature Language="F#" Value="abstract member DeleteItem : unit -&gt; unit&#xA;override this.DeleteItem : unit -&gt; unit" Usage="formView.DeleteItem " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从数据源中删除 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的当前记录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.DeleteItem%2A> 方法以编程方式从数据源中删除 <xref:System.Web.UI.WebControls.FormView> 控件中的当前记录。 如果需要从 <xref:System.Web.UI.WebControls.FormView> 控件之外（如页面上的不同控件）删除当前记录，则通常使用此方法。 调用此方法还会引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 和 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 事件。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.DeleteItem%2A> 方法以编程方式从数据源中删除 <xref:System.Web.UI.WebControls.FormView> 控件中的当前记录。

 [!code-aspx-csharp[FormViewDeleteItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeleteItem/CS/formviewdeleteitemcs.aspx#1)]
 [!code-aspx-vb[FormViewDeleteItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeleteItem/VB/formviewdeleteitemvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public virtual string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.FormView.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件执行删除操作时调用的页面上的方法的名称。</summary>
        <value>当控件执行删除操作时，该页中被调用的方法的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 有关如何在 Web 窗体中使用模型绑定的教程系列，请参阅[模型绑定和 Web 窗体](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EditItemTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ EditItemTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditItemTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.EditItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编辑模式中项的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于编辑模式时数据行的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件基于控件的当前模式（由 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性指定）为数据行呈现不同的模板。 下表显示了用于每个模式的模板。

|模式|模板已呈现|
|----------|-----------------------|
|编辑|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|
|插入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|

 当 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式时，使用 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> 属性为数据行定义自己的用户界面（UI）。 编辑项模板通常包含输入控件，以便用户更新现有记录的值，以及用于更新记录和取消更新操作的命令按钮。

 若要指定自定义模板，请首先将 `<EditItemTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<EditItemTemplate>` 标记之间列出模板的内容。 通过使用双向绑定表达式，你可以将字段与输入控件相关联。 这允许 <xref:System.Web.UI.WebControls.FormView> 控件在编辑模式下自动在关联的输入控件中显示原始字段值。 当更新记录时，<xref:System.Web.UI.WebControls.FormView> 控件将自动从关联的输入控件中提取更新的字段值。 有关双向绑定表达式的详细信息，请参阅[绑定到数据库](https://docs.microsoft.com/previous-versions/aspnet/ms178361(v=vs.100))。 若要创建执行内置 "取消" 和 "更新" 操作的命令按钮，请将命令按钮控件添加到模板，并将其 `CommandName` 属性设置为下表中列出的值之一。

|命令按钮类型|CommandName 值|
|-------------------------|-----------------------|
|取消|退出|
|更新|时更新|

 您可以使用 <xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A> 属性控制项模板的外观。



## Examples
 下面的示例演示如何在编辑模式下为数据行定义自定义模板。

 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
      </Docs>
    </Member>
    <Member MemberName="EditRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EditRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditRowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ EditRowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditRowStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.EditRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于编辑模式时数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于编辑模式时数据行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式时，使用 <xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A> 属性控制数据行的外观。 当 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式时，数据行将显示由 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> 属性指定的用户定义的内容。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `EditRowStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<EditRowStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`EditRowStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示当 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式时，如何使用 <xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A> 属性为数据行指定自定义样式。

 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmptyDataRowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ EmptyDataRowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EmptyDataRowStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置在绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的数据源不包含任何记录时所显示的空数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，使用该对象可以设置空数据行的外观。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A> 属性可控制 <xref:System.Web.UI.WebControls.FormView> 控件中的空数据行的外观。 当绑定到控件的数据源不包含任何记录时，将显示空数据行。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `EmptyDataRowStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<EmptyDataRowStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`EmptyDataRowStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A> 属性为 <xref:System.Web.UI.WebControls.FormView> 控件绑定到不包含任何记录的数据源时所显示的空数据行指定自定义样式。

 [!code-aspx-csharp[FormViewEmptyDataText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataText/CS/formviewemptydatatextcs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataText/VB/formviewemptydatatextvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyDataTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EmptyDataTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyDataTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ EmptyDataTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EmptyDataTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到不包含任何记录的数据源时所呈现的空数据行的用户定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含空数据行的自定义内容。 默认值为 <see langword="null" />，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当绑定到控件的数据源不包含任何记录时，空数据行将显示在 <xref:System.Web.UI.WebControls.FormView> 控件中。 您可以使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性为空的数据行定义您自己的自定义用户界面（UI）。 若要为空数据行指定自定义模板，请首先将 `<EmptyDataTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<EmptyDataTemplate>` 标记之间列出模板的内容。 若要控制空数据行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A> 属性。 或者，您可以通过设置 <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> 属性（而不是此属性），将内置 UI 用于空的数据行。

> [!NOTE]
>  如果同时设置了 <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> 和 <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性，<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性优先。



## Examples
 下面的示例演示如何为在 <xref:System.Web.UI.WebControls.FormView> 控件绑定到不包含任何记录的数据源时所显示的空数据行定义自定义模板。

 [!code-aspx-csharp[FormViewEmptyDataTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataTemplate/CS/formviewemptydatatemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataTemplate/VB/formviewemptydatatemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="EmptyDataText">
      <MemberSignature Language="C#" Value="public virtual string EmptyDataText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyDataText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyDataText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyDataText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EmptyDataText : string with get, set" Usage="System.Web.UI.WebControls.FormView.EmptyDataText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到不包含任何记录的数据源时所呈现的空数据行中显示的文本。</summary>
        <value>要在空数据行中显示的文本。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当绑定到控件的数据源不包含任何记录时，空数据行将显示在 <xref:System.Web.UI.WebControls.FormView> 控件中。 使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> 属性指定要在空数据行中显示的文本。 若要控制空数据行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A> 属性。 或者，您可以通过设置 "<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>" 属性而不是此属性，为空数据行定义自己的自定义用户界面（UI）。

> [!NOTE]
>  如果同时设置了 <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> 和 <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性，<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性优先。

 设置此属性后，可以使用设计器工具自动将此属性的值保存到资源文件中。 有关详细信息，请参阅 <xref:System.ComponentModel.LocalizableAttribute> 和[全球化和本地化](https://docs.microsoft.com/previous-versions/aspnet/c6zyy3s9(v=vs.100))。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> 属性指定要在空数据行中显示的文本。

 [!code-aspx-csharp[FormViewEmptyDataText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataText/CS/formviewemptydatatextcs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataText/VB/formviewemptydatatextvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderText" />
      </Docs>
    </Member>
    <Member MemberName="EnableModelValidation">
      <MemberSignature Language="C#" Value="public virtual bool EnableModelValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableModelValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EnableModelValidation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableModelValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableModelValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableModelValidation : bool with get, set" Usage="System.Web.UI.WebControls.FormView.EnableModelValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示验证程序控件是否会处理在插入或更新操作过程中出现的异常。</summary>
        <value>如果验证程序控件将处理在插入或更新操作过程中出现的异常，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureDataBound">
      <MemberSignature Language="C#" Value="protected override void EnsureDataBound ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void EnsureDataBound() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.EnsureDataBound" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub EnsureDataBound ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void EnsureDataBound();" />
      <MemberSignature Language="F#" Value="override this.EnsureDataBound : unit -&gt; unit" Usage="formView.EnsureDataBound " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>请确保 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在适当时绑定到数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.EnsureDataBound%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 类使用的帮助器方法，以确保 <xref:System.Web.UI.WebControls.FormView> 控件在适当时绑定到数据。 <xref:System.Web.UI.WebControls.FormView.EnsureDataBound%2A> 方法通常在 <xref:System.Web.UI.WebControls.BaseDataBoundControl.OnPreRender%2A> 方法中调用，以便在数据绑定控件尚未绑定但需要数据绑定时将控件绑定到数据源。 此版本的方法已重写，以防止在 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时进行数据绑定。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseDataBoundControl.EnsureDataBound" />
      </Docs>
    </Member>
    <Member MemberName="ExtractRowValues">
      <MemberSignature Language="C#" Value="protected virtual void ExtractRowValues (System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExtractRowValues(class System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ExtractRowValues (fieldValues As IOrderedDictionary, includeKeys As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ExtractRowValues(System::Collections::Specialized::IOrderedDictionary ^ fieldValues, bool includeKeys);" />
      <MemberSignature Language="F#" Value="abstract member ExtractRowValues : System.Collections.Specialized.IOrderedDictionary * bool -&gt; unit&#xA;override this.ExtractRowValues : System.Collections.Specialized.IOrderedDictionary * bool -&gt; unit" Usage="formView.ExtractRowValues (fieldValues, includeKeys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldValues" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="includeKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldValues">一个 <see cref="T:System.Collections.Specialized.IOrderedDictionary" />，用于存储当前数据项的字段值。</param>
        <param name="includeKeys">如果包含键字段，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>检索在数据行内声明的每个字段的值，并将这些值存储在指定的 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 对象中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.ExtractRowValues%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于检索在数据行中声明的每个字段的值。 由于数据行基于当前模式显示不同的模板，因此此方法仅检索在与当前模式相对应的模板中声明的字段值。 下表显示了可用的模式和相应的模板。

|模式|模板|
|----------|--------------|
|插入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|
|编辑|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|

 您可以使用 `includeKeys` 参数指定提取的值是否包含键字段。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以创建自己的例程来检索字段值。</para></block>
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="M:System.Web.UI.IBindableTemplate.ExtractValues(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="FooterRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow FooterRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow FooterRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FooterRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ FooterRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FooterRow : System.Web.UI.WebControls.FormViewRow" Usage="System.Web.UI.WebControls.FormView.FooterRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的脚注行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的脚注行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 或 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的底部显示脚注行。 使用 <xref:System.Web.UI.WebControls.FormView.FooterRow%2A> 属性以编程方式访问表示脚注行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象。

> [!NOTE]
>  只有在 <xref:System.Web.UI.WebControls.FormView> 控件在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件中创建了页脚行后，<xref:System.Web.UI.WebControls.FormView.FooterRow%2A> 属性才可用。

 当你需要以编程方式操作脚注行时（例如，添加自定义内容时），通常会使用此属性。 在呈现 <xref:System.Web.UI.WebControls.FormView> 控件之后，必须执行对 <xref:System.Web.UI.WebControls.FormView.FooterRow%2A> 属性的任何修改。否则，<xref:System.Web.UI.WebControls.FormView> 控件将覆盖所有更改。

 若要控制脚注行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> 属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.FooterRow%2A> 属性以编程方式在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件期间修改脚注行的属性。

 [!code-aspx-csharp[FormViewFooterTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterTemplate/CS/formviewfootertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewFooterTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterTemplate/VB/formviewfootertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FooterStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ FooterStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FooterStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.FooterStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的脚注行的外观。</summary>
        <value>一个对表示 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 控件中脚注行的样式的 <see cref="T:System.Web.UI.WebControls.FormView" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 或 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的底部显示脚注行。 使用 <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> 属性可控制 <xref:System.Web.UI.WebControls.FormView> 控件中的脚注行的外观。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `FooterStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<FooterStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`FooterStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> 属性为脚注行指定自定义样式。

 [!code-aspx-csharp[FormViewFooterText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterText/CS/formviewfootertextcs.aspx#1)]
 [!code-aspx-vb[FormViewFooterText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterText/VB/formviewfootertextvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate FooterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FooterTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ FooterTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FooterTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.FooterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的脚注行的用户定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含脚注行的自定义内容。 默认值为 <see langword="null" />，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 或 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的底部显示脚注行。 您可以通过使用 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性为页脚行定义您自己的自定义用户界面（UI）。 若要为脚注行指定自定义模板，请首先将 `<FooterTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<FooterTemplate>` 标记之间列出模板的内容。 若要控制脚注行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> 属性。 或者，您可以通过设置 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 属性而不是此属性，直接在页脚行中显示文本。

> [!NOTE]
>  如果同时设置了 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 和 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性，<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性优先。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性定义要为脚注行呈现的自定义模板。

 [!code-aspx-csharp[FormViewFooterTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterTemplate/CS/formviewfootertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewFooterTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterTemplate/VB/formviewfootertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="FooterText">
      <MemberSignature Language="C#" Value="public virtual string FooterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FooterText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FooterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FooterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FooterText : string with get, set" Usage="System.Web.UI.WebControls.FormView.FooterText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的脚注行中显示的文本。</summary>
        <value>脚注行中将显示的文本。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 或 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的底部显示脚注行。 使用 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 属性指定要在脚注行中显示的文本。 若要控制脚注行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.FooterStyle%2A> 属性。 或者，您可以通过设置 "<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>" 属性而不是此属性，为页脚行定义自己的自定义用户界面（UI）。

> [!NOTE]
>  如果同时设置了 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 和 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性，<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性优先。

 设置此属性后，可以使用设计器工具自动将此属性的值保存到资源文件中。 有关详细信息，请参阅 <xref:System.ComponentModel.LocalizableAttribute> 和[全球化和本地化](https://docs.microsoft.com/previous-versions/aspnet/c6zyy3s9(v=vs.100))。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.FooterText%2A> 属性指定要在脚注行中显示的文本。

 [!code-aspx-csharp[FormViewFooterText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterText/CS/formviewfootertextcs.aspx#1)]
 [!code-aspx-vb[FormViewFooterText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterText/VB/formviewfootertextvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderText" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property GridLines As GridLines" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::GridLines GridLines { System::Web::UI::WebControls::GridLines get(); void set(System::Web::UI::WebControls::GridLines value); };" />
      <MemberSignature Language="F#" Value="member this.GridLines : System.Web.UI.WebControls.GridLines with get, set" Usage="System.Web.UI.WebControls.FormView.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的网格线样式。</summary>
        <value><see cref="T:System.Web.UI.WebControls.GridLines" /> 值之一。 默认为 <see langword="GridLines.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.GridLines%2A> 属性为 <xref:System.Web.UI.WebControls.FormView> 控件指定网格线样式。 下表列出了可用样式。

|样式|说明|
|-----------|-----------------|
|`GridLines.None`|不显示网格线。|
|`GridLines.Horizontal`|仅显示水平网格线。|
|`GridLines.Vertical`|仅显示垂直网格线。|
|`GridLines.Both`|同时显示水平和垂直网格线。|



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.GridLines%2A> 属性显示垂直和水平网格线。

 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.GridLines" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      </Docs>
    </Member>
    <Member MemberName="HeaderRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow HeaderRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow HeaderRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HeaderRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ HeaderRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HeaderRow : System.Web.UI.WebControls.FormViewRow" Usage="System.Web.UI.WebControls.FormView.HeaderRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的标题行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的标题行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 或 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的顶部显示标题行。 使用 <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A> 属性以编程方式访问表示标题行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象。

> [!NOTE]
>  只有在 <xref:System.Web.UI.WebControls.FormView> 控件在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件中创建了标题行后，<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A> 属性才可用。

 当你需要以编程方式操作标题行时（例如，添加自定义内容时），通常会使用此属性。 在呈现 <xref:System.Web.UI.WebControls.FormView> 控件之后，必须执行对 <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A> 属性的任何修改。否则，<xref:System.Web.UI.WebControls.FormView> 控件将覆盖所有更改。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A> 属性以编程方式在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件期间修改标题行的属性。

 [!code-aspx-csharp[FormViewHeaderTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderTemplate/CS/formviewheadertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderTemplate/VB/formviewheadertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HeaderStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ HeaderStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HeaderStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的标题行的外观。</summary>
        <value>一个对表示 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 控件中脚注行的样式的 <see cref="T:System.Web.UI.WebControls.FormView" /> 的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 或 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的顶部显示标题行。 使用 <xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A> 属性可控制 <xref:System.Web.UI.WebControls.FormView> 控件中标题行的外观。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `HeaderStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<HeaderStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`HeaderStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A> 属性为标题行指定自定义样式。

 [!code-aspx-csharp[FormViewHeaderText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderText/CS/formviewheadertextcs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderText/VB/formviewheadertextvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HeaderTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ HeaderTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的标题行的用户定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含标题行的自定义内容。 默认值为 <see langword="null" />，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 或 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的顶部显示标题行。 您可以使用 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性为标题行定义自己的自定义用户界面（UI）。 若要为标题行指定自定义模板，请首先将 `<HeaderTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<HeaderTemplate>` 标记之间列出模板的内容。 若要控制标题行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A> 属性。 或者，您可以通过设置 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 属性而不是此属性，直接在标题行中显示文本。

> [!NOTE]
>  如果同时设置了 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 和 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性，<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性优先。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性定义要为标题行呈现的自定义模板。

 [!code-aspx-csharp[FormViewHeaderTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderTemplate/CS/formviewheadertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderTemplate/VB/formviewheadertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public virtual string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HeaderText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderText : string with get, set" Usage="System.Web.UI.WebControls.FormView.HeaderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的标题行中显示的文本。</summary>
        <value>标题行中将显示的文本。 默认值为空字符串 ("")，表示尚未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置了 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 或 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性，则在 <xref:System.Web.UI.WebControls.FormView> 控件的顶部显示标题行。 使用 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 属性指定要在标题行中显示的文本。 若要控制标题行的样式，请使用 <xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A> 属性。 或者，您可以通过设置 "<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>" 属性而不是此属性来为标题行定义自己的自定义用户界面（UI）。

> [!NOTE]
>  如果同时设置了 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 和 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性，<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性优先。

 设置此属性后，可以使用设计器工具自动将此属性的值保存到资源文件中。 有关详细信息，请参阅 <xref:System.ComponentModel.LocalizableAttribute> 和[全球化和本地化](https://docs.microsoft.com/previous-versions/aspnet/c6zyy3s9(v=vs.100))。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 属性指定要在标题行中显示的文本。

 [!code-aspx-csharp[FormViewHeaderText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderText/CS/formviewheadertextcs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderText/VB/formviewheadertextvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterText" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.HorizontalAlign HorizontalAlign" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HorizontalAlign As HorizontalAlign" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::HorizontalAlign HorizontalAlign { System::Web::UI::WebControls::HorizontalAlign get(); void set(System::Web::UI::WebControls::HorizontalAlign value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlign : System.Web.UI.WebControls.HorizontalAlign with get, set" Usage="System.Web.UI.WebControls.FormView.HorizontalAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HorizontalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在页面上的水平对齐方式。</summary>
        <value><see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> 值之一。 默认为 <see langword="HorizontalAlign.NotSet" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A> 属性指定页面内 <xref:System.Web.UI.WebControls.FormView> 控件的水平对齐方式。 下表列出了不同的水平对齐样式。

|HorizontalAlign 值|说明|
|---------------------------|-----------------|
|`HorizontalAlign.NotSet`|尚未设置 <xref:System.Web.UI.WebControls.FormView> 控件的水平对齐方式。|
|`HorizontalAlign.Left`|该 <xref:System.Web.UI.WebControls.FormView> 控件在页面上左对齐。|
|`HorizontalAlign.Center`|<xref:System.Web.UI.WebControls.FormView> 控件在页面上居中。|
|`HorizontalAlign.Right`|<xref:System.Web.UI.WebControls.FormView> 控件在页面上右对齐。|
|`HorizontalAlign.Justify`|<xref:System.Web.UI.WebControls.FormView> 控件与页面的左边距和右边距对齐。|



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A> 属性指定 <xref:System.Web.UI.WebControls.FormView> 控件应在页面上居中。

 [!code-aspx-csharp[FormViewHorizontalAlign#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHorizontalAlign/CS/formviewhorizontalaligncs.aspx#1)]
 [!code-aspx-vb[FormViewHorizontalAlign#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHorizontalAlign/VB/formviewhorizontalalignvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.HorizontalAlign" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellPadding" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.CellSpacing" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.GridLines" />
      </Docs>
    </Member>
    <Member MemberName="InitializePager">
      <MemberSignature Language="C#" Value="protected virtual void InitializePager (System.Web.UI.WebControls.FormViewRow row, System.Web.UI.WebControls.PagedDataSource pagedDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializePager(class System.Web.UI.WebControls.FormViewRow row, class System.Web.UI.WebControls.PagedDataSource pagedDataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializePager (row As FormViewRow, pagedDataSource As PagedDataSource)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializePager(System::Web::UI::WebControls::FormViewRow ^ row, System::Web::UI::WebControls::PagedDataSource ^ pagedDataSource);" />
      <MemberSignature Language="F#" Value="abstract member InitializePager : System.Web.UI.WebControls.FormViewRow * System.Web.UI.WebControls.PagedDataSource -&gt; unit&#xA;override this.InitializePager : System.Web.UI.WebControls.FormViewRow * System.Web.UI.WebControls.PagedDataSource -&gt; unit" Usage="formView.InitializePager (row, pagedDataSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
        <Parameter Name="pagedDataSource" Type="System.Web.UI.WebControls.PagedDataSource" />
      </Parameters>
      <Docs>
        <param name="row">包含当前页导航行的 <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</param>
        <param name="pagedDataSource">包含当前页的数据的 <see cref="T:System.Web.UI.WebControls.PagedDataSource" />。</param>
        <summary>为 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件创建页导航行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.InitializePager%2A> 方法是用于创建页导航行的 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法。 它使用 `pagedDataSource` 参数中包含的 <xref:System.Web.UI.WebControls.PagedDataSource> 对象的属性创建一个包含导航控件的 <xref:System.Web.UI.WebControls.TableCell> 对象。 然后，将该单元格添加到 `row` 参数所指定的行中。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以创建自己的页导航行。</para></block>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="T:System.Web.UI.WebControls.PagedDataSource" />
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeRow">
      <MemberSignature Language="C#" Value="protected virtual void InitializeRow (System.Web.UI.WebControls.FormViewRow row);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeRow(class System.Web.UI.WebControls.FormViewRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeRow (row As FormViewRow)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeRow(System::Web::UI::WebControls::FormViewRow ^ row);" />
      <MemberSignature Language="F#" Value="abstract member InitializeRow : System.Web.UI.WebControls.FormViewRow -&gt; unit&#xA;override this.InitializeRow : System.Web.UI.WebControls.FormViewRow -&gt; unit" Usage="formView.InitializeRow row" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
      </Parameters>
      <Docs>
        <param name="row">要初始化的 <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</param>
        <summary>初始化指定的 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.InitializeRow%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于初始化指定 <xref:System.Web.UI.WebControls.FormViewRow> 对象。 <xref:System.Web.UI.WebControls.FormViewRow> 对象是根据其 <xref:System.Web.UI.WebControls.FormViewRow.RowType%2A> 和 <xref:System.Web.UI.WebControls.FormViewRow.RowState%2A> 属性所指定的行类型和行状态进行初始化的。 然后，将相应的内容添加到 <xref:System.Web.UI.WebControls.FormViewRow> 对象。 下表描述了每个行类型的初始化方式。

|行类型|说明|
|--------------|-----------------|
|数据行|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>、<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>或 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> 属性的内容将添加到 <xref:System.Web.UI.WebControls.FormViewRow> 对象，具体取决于 <xref:System.Web.UI.WebControls.FormViewRow.RowState%2A> 属性的值。|
|空数据行|<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A> 属性的值或 <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性的内容将添加到 <xref:System.Web.UI.WebControls.FormViewRow> 对象，具体取决于设置的属性。 如果同时设置了这两个属性，则 <xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A> 属性将优先。|
|页脚行|<xref:System.Web.UI.WebControls.FormView.FooterText%2A> 属性的值或 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性的内容将添加到 <xref:System.Web.UI.WebControls.FormViewRow> 对象，具体取决于设置的属性。 如果同时设置了这两个属性，则 <xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A> 属性将优先。|
|标题行|<xref:System.Web.UI.WebControls.FormView.HeaderText%2A> 属性的值或 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性的内容将添加到 <xref:System.Web.UI.WebControls.FormViewRow> 对象，具体取决于设置的属性。 如果同时设置了这两个属性，则 <xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A> 属性将优先。|

> [!NOTE]
>  此方法不会初始化页导航行。 若要创建页导航行，请使用 <xref:System.Web.UI.WebControls.FormView.InitializePager%2A> 方法。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以创建自己的自定义行。</para></block>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowState" />
        <altmember cref="T:System.Web.UI.WebControls.DataControlRowType" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="public virtual void InsertItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertItem(bool causesValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InsertItem (causesValidation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InsertItem(bool causesValidation);" />
      <MemberSignature Language="F#" Value="abstract member InsertItem : bool -&gt; unit&#xA;override this.InsertItem : bool -&gt; unit" Usage="formView.InsertItem causesValidation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation"><see langword="true" /> 表示调用该方法时执行页验证；否则为 <see langword="false" />。</param>
        <summary>将当前记录插入到数据源中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时，使用 <xref:System.Web.UI.WebControls.FormView.InsertItem%2A> 方法以编程方式在数据源中插入当前记录。 当你需要从 <xref:System.Web.UI.WebControls.FormView> 控件的外部（如页面上的不同控件）插入当前记录时，通常使用此方法。

> [!NOTE]
>  调用此方法时，<xref:System.Web.UI.WebControls.FormView> 控件必须处于插入模式;否则，会引发 <xref:System.Web.HttpException>。

 若要指定在插入操作之前是否执行页验证，请使用 `causesValidation` 参数。 调用此方法还会引发 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 和 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 事件。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.InsertItem%2A> 方法以编程方式将当前记录插入到数据源的 <xref:System.Web.UI.WebControls.FormView> 控件中。

 [!code-aspx-csharp[FormViewInsertItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItem/CS/formviewinsertitemcs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItem/VB/formviewinsertitemvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">当 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件不处于插入模式时，调用此方法。

- 或 -

与 <see cref="T:System.Web.UI.DataSourceView" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象为空。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.DeleteItem" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate InsertItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate InsertItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InsertItemTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ InsertItemTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertItemTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.InsertItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置插入模式中项的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含数据行在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于插入模式时的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件基于控件的当前模式（由 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性指定）为数据行呈现不同的模板。 下表显示了用于每个模式的模板。

|模式|模板已呈现|
|----------|-----------------------|
|编辑|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|
|插入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|

 当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时，使用 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> 属性为数据行定义自己的用户界面（UI）。 插入项模板通常包含输入控件，用户可在其中输入新记录的值，以及用于插入记录和取消插入操作的命令按钮。

 若要指定自定义模板，请首先将 `<InsertItemTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<InsertItemTemplate>` 标记之间列出模板的内容。 通过使用双向绑定表达式，你可以将字段与输入控件相关联。 插入记录后，<xref:System.Web.UI.WebControls.FormView> 控件将自动从关联的输入控件中提取字段值。 有关双向绑定表达式的详细信息，请参阅[绑定到数据库](https://docs.microsoft.com/previous-versions/aspnet/ms178361(v=vs.100))。 若要创建执行内置取消和插入操作的命令按钮，请将命令按钮控件添加到模板，并将其 `CommandName` 属性设置为下表中列出的值之一。

|命令按钮类型|CommandName 值|
|-------------------------|-----------------------|
|取消|退出|
|插入|&|

 您可以使用 <xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A> 属性控制项模板的外观。



## Examples
 下面的示例演示如何为插入模式下的数据行定义自定义模板。

 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public virtual string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.FormView.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件执行插入操作时调用的页面上的方法的名称。</summary>
        <value>当控件执行插入操作时该页的被调用的方法的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 有关如何在 Web 窗体中使用模型绑定的教程系列，请参阅[模型绑定和 Web 窗体](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle InsertRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle InsertRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertRowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ InsertRowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertRowStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.InsertRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于插入模式时该控件中的数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于插入模式时该控件中的数据行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时，使用 <xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A> 属性控制数据行的外观。 当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时，数据行将显示由 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> 属性指定的用户定义的内容。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。

 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `InsertRowStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<InsertRowStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`InsertRowStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示当 <xref:System.Web.UI.WebControls.FormView> 控件处于插入模式时，如何使用 <xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A> 属性为数据行指定自定义样式。

 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
      </Docs>
    </Member>
    <Member MemberName="IsBindableType">
      <MemberSignature Language="C#" Value="public virtual bool IsBindableType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBindableType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.IsBindableType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsBindableType (type As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsBindableType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsBindableType : Type -&gt; bool&#xA;override this.IsBindableType : Type -&gt; bool" Usage="formView.IsBindableType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">表示要检查的数据类型的 <see cref="T:System.Type" />。</param>
        <summary>确定指定的数据类型是否可以绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的字段。</summary>
        <returns>如果指定的数据类型可以绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的字段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.IsBindableType%2A> 方法是由 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于确定指定的数据类型是否可绑定到控件中的字段。 <xref:System.Web.UI.WebControls.FormView> 控件支持以下数据类型：

-   所有基元数据类型，如 <xref:System.Boolean>、<xref:System.Byte>、<xref:System.Int32>等。

-   <xref:System.DateTime>

-   <xref:System.Decimal>

-   <xref:System.Guid>

-   <xref:System.String>

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法，以添加或限制可在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中使用的数据类型。</para></block>
        <altmember cref="P:System.Type.IsPrimitive" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.Decimal" />
        <altmember cref="T:System.Guid" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemCommand" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCommand As FormViewCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewCommandEventHandler ^ ItemCommand;" />
      <MemberSignature Language="F#" Value="member this.ItemCommand : System.Web.UI.WebControls.FormViewCommandEventHandler " Usage="member this.ItemCommand : System.Web.UI.WebControls.FormViewCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的某个按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击 <xref:System.Web.UI.WebControls.FormView> 控件中的按钮时，将引发 <xref:System.Web.UI.WebControls.FormView.ItemCommand> 事件。 这使你可以提供一种事件处理方法，该方法可在每次发生此事件时执行自定义例程。

 <xref:System.Web.UI.WebControls.FormView> 控件中的按钮还可以调用控件的某些内置功能。 若要执行这些操作之一，请将按钮的 `CommandName` 属性设置为下表中的值之一。

|CommandName 值|说明|
|-----------------------|-----------------|
|退出|取消编辑或插入操作，并将 <xref:System.Web.UI.WebControls.FormView> 控件返回到 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性指定的模式。 引发 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 和 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件。|
|“Delete”|删除当前记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 和 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 事件。|
|编辑|将 <xref:System.Web.UI.WebControls.FormView> 控件置于编辑模式。 引发 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 和 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件。|
|&|将当前记录插入到数据源中。 引发 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 和 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 事件。|
|新西兰|将 <xref:System.Web.UI.WebControls.FormView> 控件置于插入模式下。 引发 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 和 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件。|
|分页|执行分页操作。 将该按钮的 `CommandArgument` 属性设置为 "First"、"Last"、"Next"、"Last" 或页码，以指定要执行的分页操作的类型。 引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> 和 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 事件。|
|时更新|更新数据源中的当前记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 和 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 事件。|

 尽管在单击上表中列出的按钮时，将引发 <xref:System.Web.UI.WebControls.FormView.ItemCommand> 事件，但建议使用表中列出的事件执行该操作。

 将 <xref:System.Web.UI.WebControls.FormViewCommandEventArgs> 对象传递到事件处理方法，该方法允许你确定所单击按钮的命令名和命令参数。 若要确定命令名称和命令参数，请分别使用 "<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>" 和 "<xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>" 属性。 还可以通过使用 <xref:System.Web.UI.WebControls.DetailsViewCommandEventArgs.CommandSource%2A> 属性访问引发事件的控件。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemCommand> 事件来处理 <xref:System.Web.UI.WebControls.FormView> 控件中的按钮单击。 当用户单击 "添加" 按钮时，当前显示的项将添加到 <xref:System.Web.UI.WebControls.ListBox> 控件中。

 [!code-aspx-csharp[FormViewItemCommandEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewItemCommandEventArgs/CS/formviewcommandeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewItemCommandEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewItemCommandEventArgs/VB/formviewcommandeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewCommandEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandName" />
        <altmember cref="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event EventHandler ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemCreated;" />
      <MemberSignature Language="F#" Value="member this.ItemCreated : EventHandler " Usage="member this.ItemCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中创建了所有行后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件是在 <xref:System.Web.UI.WebControls.FormView> 控件中创建所有行后引发的。 第一次呈现控件时，或当用户导航到另一条记录时，会发生这种情况。 你可以使用此事件来提供事件处理方法，该方法在每次发生此事件时执行自定义例程，如添加或修改行的内容。

> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件发生在 <xref:System.Web.UI.WebControls.FormView> 控件绑定到数据之前。 若要修改绑定字段的值，请使用 <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBound> 事件。

 您可以分别使用 <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>、<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>、<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>或 <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A> 属性访问 <xref:System.Web.UI.WebControls.FormView> 控件中的页眉、页脚和页导航行。 若要访问数据行，请使用 <xref:System.Web.UI.WebControls.FormView.Row%2A> 属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件来更新页导航行中包含的 <xref:System.Web.UI.WebControls.Label> 控件的文本。

 [!code-aspx-csharp[FormViewItemCreated#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewItemCreated/CS/formviewitemcreatedcs.aspx#1)]
 [!code-aspx-vb[FormViewItemCreated#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewItemCreated/VB/formviewitemcreatedvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.Row" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDeleted As FormViewDeletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewDeletedEventHandler ^ ItemDeleted;" />
      <MemberSignature Language="F#" Value="member this.ItemDeleted : System.Web.UI.WebControls.FormViewDeletedEventHandler " Usage="member this.ItemDeleted : System.Web.UI.WebControls.FormViewDeletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“删除”按钮时，但在删除操作之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击控件中的 "删除" 按钮（其 `CommandName` 属性设置为 "Delete"）时，<xref:System.Web.UI.WebControls.FormView> 控件将引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 事件，但在 <xref:System.Web.UI.WebControls.FormView> 控件删除记录后。 这使你可以提供一种事件处理方法，该方法执行自定义例程，如在此事件发生时检查删除操作的结果。

 将 <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs> 对象传递到事件处理方法，该方法允许你确定受影响的记录数以及可能已发生的任何异常。 若要确定受删除操作影响的记录数，请使用 <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows%2A> 属性。 使用 <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception%2A> 属性来确定是否发生了异常。 还可以通过设置 <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled%2A> 属性，指示是否已在事件处理方法中处理异常。 如果要访问已删除记录的键字段和非键字段的名称/值对，请分别使用 "<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys%2A>" 和 "<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values%2A>" 属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 事件来确定删除操作过程中是否发生了异常。

 [!code-aspx-csharp[FormViewDeletedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeletedEventArgs/CS/formviewdeletedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewDeletedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeletedEventArgs/VB/formviewdeletedeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeletedEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDeleting As FormViewDeleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewDeleteEventHandler ^ ItemDeleting;" />
      <MemberSignature Language="F#" Value="member this.ItemDeleting : System.Web.UI.WebControls.FormViewDeleteEventHandler " Usage="member this.ItemDeleting : System.Web.UI.WebControls.FormViewDeleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“删除”按钮时，但在删除操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击控件中的 "删除" 按钮（其 `CommandName` 属性设置为 "Delete"）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件删除记录之前，<xref:System.Web.UI.WebControls.FormView> 控件将引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 事件。 这使你可以提供一个事件处理方法，该方法在每次发生此事件时执行自定义例程，如在删除记录之前验证记录。

 将 <xref:System.Web.UI.WebControls.FormViewDeleteEventArgs> 对象传递到事件处理方法，该方法允许您确定要删除的记录的索引，并指示应取消删除操作。 若要确定记录的索引，请使用 <xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex%2A> 属性。 若要取消删除操作，请将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `true`。 您还可以通过分别使用 "<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys%2A>" 和 "<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values%2A>" 属性访问 "键" 字段和非键字段。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 事件取消删除操作。

 [!code-aspx-csharp[FormViewDeleteEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeleteEventArgs/CS/formviewdeleteeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewDeleteEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeleteEventArgs/VB/formviewdeleteeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeleteEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemInserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemInserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemInserted As FormViewInsertedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewInsertedEventHandler ^ ItemInserted;" />
      <MemberSignature Language="F#" Value="member this.ItemInserted : System.Web.UI.WebControls.FormViewInsertedEventHandler " Usage="member this.ItemInserted : System.Web.UI.WebControls.FormViewInsertedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“插入”按钮时，但在插入操作之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 单击控件中的 "插入" 按钮（其 `CommandName` 属性设置为 "插入" 的按钮）时，<xref:System.Web.UI.WebControls.FormView> 控件将引发 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 事件，但在 <xref:System.Web.UI.WebControls.FormView> 控件插入记录后。 这使你可以提供一种事件处理方法，该方法执行自定义例程，如在此事件发生时检查插入操作的结果。

 将 <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs> 对象传递到事件处理方法，该方法允许你确定受影响的记录数以及可能已发生的任何异常。 若要确定受插入操作影响的记录数，请使用 <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows%2A> 属性。 使用 <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A> 属性来确定是否发生了异常。 还可以通过设置 <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A> 属性，指示是否已在事件处理方法中处理异常。 如果需要访问插入记录的值，请使用 <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values%2A> 属性。

 默认情况下，<xref:System.Web.UI.WebControls.FormView> 控件返回到插入操作后 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性指定的模式。 若要将 <xref:System.Web.UI.WebControls.FormView> 控件保持在插入模式下，请将 <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode%2A> 属性设置为 "`true`"。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 事件来确定是否在插入操作过程中发生了异常。

 [!code-aspx-csharp[FormViewInsertedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertedEventArgs/CS/formviewinsertedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewInsertedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertedEventArgs/VB/formviewinsertedeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemInserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemInserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemInserting As FormViewInsertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewInsertEventHandler ^ ItemInserting;" />
      <MemberSignature Language="F#" Value="member this.ItemInserting : System.Web.UI.WebControls.FormViewInsertEventHandler " Usage="member this.ItemInserting : System.Web.UI.WebControls.FormViewInsertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“插入”按钮时，但在插入操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击控件中的 "插入" 按钮（其 `CommandName` 属性设置为 "插入" 的按钮）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件插入记录之前，<xref:System.Web.UI.WebControls.FormView> 控件引发 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 事件。 这使你可以提供一个事件处理方法，该方法执行自定义例程，如在每次发生此事件时，在将记录插入到数据源之前对记录的值进行 HTML 编码。

 将 <xref:System.Web.UI.WebControls.FormViewInsertEventArgs> 对象传递到事件处理方法，该方法允许您确定发送到 <xref:System.Web.UI.WebControls.FormView> 控件的可选命令参数的值，并指示应取消插入操作。 命令参数值与 "插入" 按钮的 "`CommandArgument`" 属性相对应。 设置 "插入" 按钮的 `CommandArgument` 属性时，请使用 <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> 属性来确定命令参数的值。 若要取消插入操作，请将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `true`。 还可以通过使用 <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.Values%2A> 属性读取或修改新记录的字段值。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 事件来取消插入操作。

 [!code-aspx-csharp[FormViewInsertEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertEventArgs/CS/formviewinserteventargscs.aspx#1)]
 [!code-aspx-vb[FormViewInsertEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertEventArgs/VB/formviewinserteventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewInsertEventArgs.Values" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ItemTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时该控件中的数据行的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时数据行的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件基于控件的当前模式（由 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性指定）为数据行呈现不同的模板。 下表显示了用于每个模式的模板。

|模式|模板已呈现|
|----------|-----------------------|
|编辑|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|
|插入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|

 当 <xref:System.Web.UI.WebControls.FormView> 控件处于只读模式时，请使用 <xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A> 属性为数据行定义自己的用户界面（UI）。 项模板通常包含用于显示记录字段值的控件，以及用于编辑、插入和删除记录的命令按钮。

 若要指定自定义模板，请首先将 `<ItemTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<ItemTemplate>` 标记之间列出模板的内容。 若要显示绑定到控件的数据源的字段值，请使用数据绑定表达式。 有关数据绑定表达式的详细信息，请参阅[数据绑定表达式语法](https://msdn.microsoft.com/library/676beb1d-ddfa-4153-bba8-3c86dcb7ceca)。 若要创建执行内置 "删除"、"编辑" 和 "新记录" 操作的命令按钮，请在模板中添加一个 "命令按钮" 控件，并将其 `CommandName` 属性设置为下表中列出的值之一。

|命令按钮类型|CommandName 值|
|-------------------------|-----------------------|
|删除|“Delete”|
|编辑|编辑|
|新建|新西兰|

 您可以使用 <xref:System.Web.UI.WebControls.FormView.RowStyle%2A> 属性控制项模板的外观。



## Examples
 下面的示例演示如何为只读模式下的数据行定义自定义模板。

 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ItemUpdated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemUpdated As FormViewUpdatedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewUpdatedEventHandler ^ ItemUpdated;" />
      <MemberSignature Language="F#" Value="member this.ItemUpdated : System.Web.UI.WebControls.FormViewUpdatedEventHandler " Usage="member this.ItemUpdated : System.Web.UI.WebControls.FormViewUpdatedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“更新”按钮时，但在更新操作之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击控件中的 "更新" 按钮（其 `CommandName` 属性设置为 "Update"）时，<xref:System.Web.UI.WebControls.FormView> 控件将引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 事件，但在 <xref:System.Web.UI.WebControls.FormView> 控件更新记录后。 这使你可以提供一种事件处理方法，该方法执行自定义例程，如在此事件发生时检查更新操作的结果。

 将 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs> 对象传递到事件处理方法，该方法允许你确定受影响的记录数以及可能已发生的任何异常。 若要确定受更新操作影响的记录数，请使用 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> 属性。 使用 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> 属性来确定是否发生了异常。 还可以通过设置 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> 属性，指示是否已在事件处理方法中处理异常。 如果需要访问已更新记录的键字段值，请使用 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> 属性。 可以分别使用 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> 和 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> 属性访问原始的和更新的非键字段值。

 默认情况下，<xref:System.Web.UI.WebControls.FormView> 控件返回到更新操作后 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性指定的模式。 若要使 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式，请将 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> 属性设置为 "`true`"。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 事件确定是否在更新操作过程中发生了异常。

 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventHandler" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemUpdating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemUpdating As FormViewUpdateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewUpdateEventHandler ^ ItemUpdating;" />
      <MemberSignature Language="F#" Value="member this.ItemUpdating : System.Web.UI.WebControls.FormViewUpdateEventHandler " Usage="member this.ItemUpdating : System.Web.UI.WebControls.FormViewUpdateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的“更新”按钮时，但在更新操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击控件中的 "更新" 按钮（其 `CommandName` 属性设置为 "Update"）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件更新记录之前，<xref:System.Web.UI.WebControls.FormView> 控件将引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 事件。 这使您可以在每次发生此事件时，提供一个执行自定义例程的事件处理方法，如在数据源中更新记录之前对记录的值进行 HTML 编码。

 将 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> 对象传递到事件处理方法，该方法允许您确定发送到 <xref:System.Web.UI.WebControls.FormView> 控件的可选命令参数的值，并指示应取消更新操作。 命令参数值对应于 "更新" 按钮的 `CommandArgument` 属性。 设置 "更新" 按钮的 `CommandArgument` 属性时，请使用 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A> 属性来确定命令参数的值。 若要取消更新操作，请将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `true`。 还可以通过使用 "<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>" 和 "<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>" 属性来读取或修改用户输入的新值。 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> 属性包含键字段，而 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> 属性包含非键字段。 如果需要访问原始非键字段值，请使用 <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> 属性。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 事件来取消更新操作。

 [!code-aspx-csharp[FormViewUpdateEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdateEventArgs/CS/formviewupdateeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdateEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdateEventArgs/VB/formviewupdateeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdateEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="formView.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Object" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的状态。</param>
        <summary>加载需要保持的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件属性的状态（即使在 <see cref="P:System.Web.UI.Control.EnableViewState" /> 属性设置为 <see langword="false" /> 时）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.LoadControlState%2A> 方法用于加载需要保持的 <xref:System.Web.UI.WebControls.FormView> 控件属性的状态，即使在 <xref:System.Web.UI.Control.EnableViewState%2A> 属性设置为 `false`时也是如此。

> [!NOTE]
>  此方法主要由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 控件时使用。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="P:System.Web.UI.Control.EnableViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="formView.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Object" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的状态。</param>
        <summary>加载以前保存的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的视图状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.LoadViewState%2A> 方法用于加载以前保存的 <xref:System.Web.UI.WebControls.FormView> 控件的视图状态。

> [!NOTE]
>  此方法主要由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 控件时使用。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ModeChanged : EventHandler " Usage="member this.ModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在编辑、插入和只读模式间切换时，但在模式更改之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.FormView> 的控件尝试在编辑、插入和只读模式之间切换时，但在实际更改模式后，将引发 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 事件。 这使你可以提供一个事件处理方法，该方法执行自定义例程，如在此事件发生时将 <xref:System.Web.UI.WebControls.FormView> 控件与其他控件同步。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 事件在 <xref:System.Web.UI.WebControls.FormView> 控件的标题行中显示当前模式。

 [!code-aspx-csharp[FormViewModeChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewModeChanged/CS/formviewmodechangedcs.aspx#1)]
 [!code-aspx-vb[FormViewModeChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewModeChanged/VB/formviewmodechangedvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ModeChanging As FormViewModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewModeEventHandler ^ ModeChanging;" />
      <MemberSignature Language="F#" Value="member this.ModeChanging : System.Web.UI.WebControls.FormViewModeEventHandler " Usage="member this.ModeChanging : System.Web.UI.WebControls.FormViewModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件在编辑、插入和只读模式间切换时，但在模式更改之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.FormView> 控件尝试在编辑、插入和只读模式之间切换时，但在模式实际更改之前，将引发 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件。 这使你可以提供一个事件处理方法，该方法执行自定义例程，如在此事件发生时为特定模式配置 <xref:System.Web.UI.WebControls.FormView> 控件或取消模式更改。

 将 <xref:System.Web.UI.WebControls.FormViewModeEventArgs> 对象传递到事件处理方法，该方法允许你确定 <xref:System.Web.UI.WebControls.FormView> 控件要切换到的模式，以确定是否由于用户取消编辑操作而引发了 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件，或指示是否应取消插入操作。 若要确定新模式，请使用 <xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A> 属性。 你还可以使用 <xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A> 属性，通过将其设置为 <xref:System.Web.UI.WebControls.FormViewMode> 枚举值之一来切换为备用模式。 使用 <xref:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit%2A> 属性来确定用户是否取消了编辑操作。 若要取消插入操作，请将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `true`。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示当 <xref:System.Web.UI.WebControls.FormView> 控件转换为编辑模式时，如何使用 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件隐藏页导航行。

 [!code-aspx-csharp[FormViewModeEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewModeEventArgs/CS/formviewmodeeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewModeEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewModeEventArgs/VB/formviewmodeeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewModeEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ModifiedOuterTableStylePropertyName">
      <MemberSignature Language="C#" Value="protected internal virtual string ModifiedOuterTableStylePropertyName ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string ModifiedOuterTableStylePropertyName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ModifiedOuterTableStylePropertyName () As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ ModifiedOuterTableStylePropertyName();" />
      <MemberSignature Language="F#" Value="abstract member ModifiedOuterTableStylePropertyName : unit -&gt; string&#xA;override this.ModifiedOuterTableStylePropertyName : unit -&gt; string" Usage="formView.ModifiedOuterTableStylePropertyName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定与 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件关联的表特定 CSS 样式规则是否设置为其默认值。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件关联的默认 CSS 样式规则。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 表特定 CSS 样式规则通过使用 "<xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>"、"<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>"、"<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>"、"<xref:System.Web.UI.WebControls.FormView.GridLines%2A>"、"<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>" 和 "<xref:System.Web.UI.WebControls.Style.Font%2A>" 属性设置为其默认值。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnBubbleEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnBubbleEvent (source As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnBubbleEvent(System::Object ^ source, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBubbleEvent : obj * EventArgs -&gt; bool" Usage="formView.OnBubbleEvent (source, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">事件的源。</param>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>处理在控件层次结构中向上传递的事件。</summary>
        <returns>若要指示事件应在控件层次结构中进一步向上传递，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 控件使用 <xref:System.Web.UI.Control.OnBubbleEvent%2A?displayProperty=nameWithType> 方法，以选择性地处理通过 <xref:System.Web.UI.Control.RaiseBubbleEvent%2A> 方法通过控件层次结构向上传递的事件。 它通过检查 `e` 参数中包含的 <xref:System.EventArgs> 对象的属性来确定是否要处理事件。 需要处理某个事件时，方法会执行相应的操作。 其他事件将被忽略并向上传递控件层次结构。 此方法指示是否在控件层次结构中通过其返回值向后传递事件。

 当单击控件识别的某个按钮时，<xref:System.Web.UI.WebControls.FormView> 控件将重写此方法的基实现以执行相应的操作。 下表列出了 <xref:System.Web.UI.WebControls.FormView> 控件识别的命令按钮。

|按钮|CommandName 值|说明|
|------------|-----------------------|-----------------|
|取消|退出|在更新或插入操作中用于取消操作并丢弃用户输入的值。 然后，<xref:System.Web.UI.WebControls.FormView> 控件返回到 <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> 属性指定的模式。|
|删除|“Delete”|用于删除操作以从数据源中删除所显示的记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 和 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 事件。|
|编辑|编辑|用于更新操作以在编辑模式下放置 <xref:System.Web.UI.WebControls.FormView> 控件。 为数据行显示 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> 属性中指定的内容。|
|插入|&|在插入操作中用于尝试使用用户提供的值在数据源中插入新记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 和 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 事件。|
|新建|新西兰|在插入操作中用于将 <xref:System.Web.UI.WebControls.FormView> 控件置于插入模式下。 为数据行显示 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> 属性中指定的内容。|
|页面|分页|用于在分页操作中表示执行分页的页导航行中的按钮。 若要指定分页操作，请将按钮的 `CommandArgument` 属性设置为 "下一步"、"上一步"、"First"、"Last" 或要导航到的页面的索引。 引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 和 <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> 事件。 **注意：** 此类型的按钮通常仅在页导航模板中使用。|
|更新|时更新|用于更新操作，尝试使用用户提供的值更新数据源中显示的记录。 引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 和 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 事件。|

 当处理其中一个按钮时，此版本的方法将返回 `true`。 有关事件冒泡的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>扩展 <see cref="T:System.Web.UI.WebControls.FormView" /> 类时，可以重写此方法以处理自己的事件。 请确保使用返回值以指示是否应在控件层次结构中进一步向上传递事件。</para></block>
        <altmember cref="M:System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="formView.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.Control.Init" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnInit%2A> 方法来引发 <xref:System.Web.UI.Control.Init> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnInit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.FormViewCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.FormViewCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCommand (e As FormViewCommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCommand(System::Web::UI::WebControls::FormViewCommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemCommand : System.Web.UI.WebControls.FormViewCommandEventArgs -&gt; unit&#xA;override this.OnItemCommand : System.Web.UI.WebControls.FormViewCommandEventArgs -&gt; unit" Usage="formView.OnItemCommand e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemCommand%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemCommand> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemCommand%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCommand" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemCreated : EventArgs -&gt; unit&#xA;override this.OnItemCreated : EventArgs -&gt; unit" Usage="formView.OnItemCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemCreated%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemCreated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleted (System.Web.UI.WebControls.FormViewDeletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleted(class System.Web.UI.WebControls.FormViewDeletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDeleted (e As FormViewDeletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDeleted(System::Web::UI::WebControls::FormViewDeletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemDeleted : System.Web.UI.WebControls.FormViewDeletedEventArgs -&gt; unit&#xA;override this.OnItemDeleted : System.Web.UI.WebControls.FormViewDeletedEventArgs -&gt; unit" Usage="formView.OnItemDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemDeleted%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemDeleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleting (System.Web.UI.WebControls.FormViewDeleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleting(class System.Web.UI.WebControls.FormViewDeleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDeleting (e As FormViewDeleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDeleting(System::Web::UI::WebControls::FormViewDeleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemDeleting : System.Web.UI.WebControls.FormViewDeleteEventArgs -&gt; unit&#xA;override this.OnItemDeleting : System.Web.UI.WebControls.FormViewDeleteEventArgs -&gt; unit" Usage="formView.OnItemDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemDeleting%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemDeleting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、用户未取消删除操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserted (System.Web.UI.WebControls.FormViewInsertedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserted(class System.Web.UI.WebControls.FormViewInsertedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemInserted (e As FormViewInsertedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemInserted(System::Web::UI::WebControls::FormViewInsertedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemInserted : System.Web.UI.WebControls.FormViewInsertedEventArgs -&gt; unit&#xA;override this.OnItemInserted : System.Web.UI.WebControls.FormViewInsertedEventArgs -&gt; unit" Usage="formView.OnItemInserted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemInserted%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemInserted> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemInserted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserted" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserting (System.Web.UI.WebControls.FormViewInsertEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserting(class System.Web.UI.WebControls.FormViewInsertEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemInserting (e As FormViewInsertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemInserting(System::Web::UI::WebControls::FormViewInsertEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemInserting : System.Web.UI.WebControls.FormViewInsertEventArgs -&gt; unit&#xA;override this.OnItemInserting : System.Web.UI.WebControls.FormViewInsertEventArgs -&gt; unit" Usage="formView.OnItemInserting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemInserting%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemInserting> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemInserting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、用户未取消插入操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemInserting" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdated (System.Web.UI.WebControls.FormViewUpdatedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdated(class System.Web.UI.WebControls.FormViewUpdatedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemUpdated (e As FormViewUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemUpdated(System::Web::UI::WebControls::FormViewUpdatedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemUpdated : System.Web.UI.WebControls.FormViewUpdatedEventArgs -&gt; unit&#xA;override this.OnItemUpdated : System.Web.UI.WebControls.FormViewUpdatedEventArgs -&gt; unit" Usage="formView.OnItemUpdated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemUpdated%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemUpdated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdating (System.Web.UI.WebControls.FormViewUpdateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdating(class System.Web.UI.WebControls.FormViewUpdateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemUpdating (e As FormViewUpdateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemUpdating(System::Web::UI::WebControls::FormViewUpdateEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemUpdating : System.Web.UI.WebControls.FormViewUpdateEventArgs -&gt; unit&#xA;override this.OnItemUpdating : System.Web.UI.WebControls.FormViewUpdateEventArgs -&gt; unit" Usage="formView.OnItemUpdating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnItemUpdating%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnItemUpdating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、用户未取消更新操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnModeChanged : EventArgs -&gt; unit&#xA;override this.OnModeChanged : EventArgs -&gt; unit" Usage="formView.OnModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnModeChanged%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ModeChanged> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanging (System.Web.UI.WebControls.FormViewModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModeChanging(class System.Web.UI.WebControls.FormViewModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnModeChanging (e As FormViewModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnModeChanging(System::Web::UI::WebControls::FormViewModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnModeChanging : System.Web.UI.WebControls.FormViewModeEventArgs -&gt; unit&#xA;override this.OnModeChanging : System.Web.UI.WebControls.FormViewModeEventArgs -&gt; unit" Usage="formView.OnModeChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnModeChanging%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.ModeChanging> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnModeChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、未取消模式更改以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.ModeChanging" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPageIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPageIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPageIndexChanged : EventArgs -&gt; unit&#xA;override this.OnPageIndexChanged : EventArgs -&gt; unit" Usage="formView.OnPageIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanged%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanging (System.Web.UI.WebControls.FormViewPageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanging(class System.Web.UI.WebControls.FormViewPageEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPageIndexChanging (e As FormViewPageEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPageIndexChanging(System::Web::UI::WebControls::FormViewPageEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPageIndexChanging : System.Web.UI.WebControls.FormViewPageEventArgs -&gt; unit&#xA;override this.OnPageIndexChanging : System.Web.UI.WebControls.FormViewPageEventArgs -&gt; unit" Usage="formView.OnPageIndexChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewPageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView> 控件调用 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanging%2A> 方法来引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 事件。 它通常由控件开发人员在扩展 <xref:System.Web.UI.WebControls.FormView> 类时使用。

 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。

 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanging%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件未绑定到数据源控件、未取消分页操作以及事件处理程序没有为事件注册时调用。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="PageCount">
      <MemberSignature Language="C#" Value="public virtual int PageCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PageCount" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PageCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int PageCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PageCount : int" Usage="System.Web.UI.WebControls.FormView.PageCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取显示数据源中的所有记录所需要的总页数。</summary>
        <value>基础数据源中的项数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 启用分页功能后（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`）时，请使用 <xref:System.Web.UI.WebControls.FormView.PageCount%2A> 属性来确定基础数据源中的记录总数。

> [!NOTE]
>  由于 <xref:System.Web.UI.WebControls.FormView> 控件一次只显示一个记录，因此此值对应于显示数据源中的每个记录所需要的总页数。 在进行数据绑定之前，此值不准确。

 若要确定基础数据源中的当前记录的索引，请使用 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.PageCount%2A> 属性来确定控件中显示的记录总数。

 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PageIndex">
      <MemberSignature Language="C#" Value="public virtual int PageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PageIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PageIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int PageIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PageIndex : int with get, set" Usage="System.Web.UI.WebControls.FormView.PageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置所显示的页的索引。</summary>
        <value>正从基础数据源显示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的数据项的从零开始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 启用分页功能后（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`）时，请使用 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性来确定当前显示的记录的索引。 还可以使用此属性以编程方式更改显示的记录。

> [!NOTE]
>  启用分页功能后，还可以使用此属性来确定所显示记录的页码;但请注意，此属性是从零开始的。

 若要确定数据源中的总项数，请使用 <xref:System.Web.UI.WebControls.FormView.PageCount%2A> 属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性来确定所显示的记录的页索引。

 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选值小于 -1。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PageIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PageIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PageIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PageIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.PageIndexChanged : EventHandler " Usage="member this.PageIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> 属性的值在分页操作后更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 单击控件中的页导航按钮（其 `CommandName` 属性设置为 "Page" 的按钮）时，<xref:System.Web.UI.WebControls.FormView> 控件将引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> 事件，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之后。 这使你可以提供一种事件处理方法，该方法可在每次发生此事件时执行自定义例程。

> [!NOTE]
>  以编程方式设置 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性时，不会引发此事件。

 寻呼程序按钮通常位于 <xref:System.Web.UI.WebControls.FormView> 控件的页导航行中。 此事件通常用于将 <xref:System.Web.UI.WebControls.FormView> 控件与 <xref:System.Web.UI.WebControls.GridView> 控件同步，或在分页操作后设置 <xref:System.Web.UI.WebControls.FormView> 控件的行为。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示了当用户导航到另一条记录时，如何使用 <xref:System.Web.UI.WebControls.FormView.PageIndexChanged> 事件将 <xref:System.Web.UI.WebControls.FormView> 返回到只读模式。

 [!code-aspx-csharp[FormViewPageIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPageIndexChanged/CS/formviewpageindexchangedcs.aspx#1)]
 [!code-aspx-vb[FormViewPageIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPageIndexChanged/VB/formviewpageindexchangedvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PageIndexChanging As FormViewPageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::FormViewPageEventHandler ^ PageIndexChanging;" />
      <MemberSignature Language="F#" Value="member this.PageIndexChanging : System.Web.UI.WebControls.FormViewPageEventHandler " Usage="member this.PageIndexChanging : System.Web.UI.WebControls.FormViewPageEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewPageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Web.UI.WebControls.FormView.PageIndex" /> 属性的值在分页操作前更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当单击控件中的页导航按钮（其 `CommandName` 属性设置为 "Page" 的按钮）时，但在 <xref:System.Web.UI.WebControls.FormView> 控件处理分页操作之前，<xref:System.Web.UI.WebControls.FormView> 控件引发 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 事件。 这使你可以提供一种事件处理方法，该方法可在每次发生此事件时执行自定义例程，如取消分页操作。

> [!NOTE]
>  以编程方式设置 <xref:System.Web.UI.WebControls.FormView.PageIndex%2A> 属性时，不会引发此事件。

 寻呼程序按钮通常位于 <xref:System.Web.UI.WebControls.FormView> 控件的页导航行中。

 将 <xref:System.Web.UI.WebControls.FormViewPageEventArgs> 对象传递到事件处理方法，该方法允许你确定用户所选择的页的索引，并指示应取消分页操作。 若要确定用户所选页面的索引，请使用 "<xref:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex%2A>" 属性。 若要取消分页操作，请将 <xref:System.Web.UI.WebControls.FormViewPageEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 "`true`"。

 有关如何处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 事件取消分页操作。

> [!IMPORTANT]
>  此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[FormViewPageEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPageEventArgs/CS/formviewmodeeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewPageEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPageEventArgs/VB/formviewmodeeventargsvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />
        <altmember cref="T:System.Web.UI.WebControls.FormViewPageEventHandler" />
        <altmember cref="P:System.ComponentModel.CancelEventArgs.Cancel" />
        <altmember cref="P:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PagerSettings">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.PagerSettings PagerSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.PagerSettings PagerSettings" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerSettings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PagerSettings As PagerSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::PagerSettings ^ PagerSettings { System::Web::UI::WebControls::PagerSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PagerSettings : System.Web.UI.WebControls.PagerSettings" Usage="System.Web.UI.WebControls.FormView.PagerSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.PagerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.PagerSettings" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的页导航按钮的属性。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.PagerSettings" /> 的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的页导航按钮的属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.PagerSettings%2A> 属性可控制 <xref:System.Web.UI.WebControls.FormView> 控件中的页导航行的设置。 当分页功能处于启用状态时（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`），并且包含允许用户导航到控件中不同记录的控件时，将显示页导航行。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.PagerSettings> 对象的属性。 可以在 `Property-Subproperty`格式设置属性，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.PagerSettings> 对象（例如 `PagerSettings-Mode`）的一个属性。 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`PagerSettings.Mode`）。 常见设置通常包括页导航行的显示模式以及导航控件的自定义文本或图像。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.PagerSettings%2A> 属性指定页导航行的属性。

 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PagerStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle PagerStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle PagerStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagerStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ PagerStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PagerStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.PagerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的页导航行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中页导航行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.PagerStyle%2A> 属性可控制 <xref:System.Web.UI.WebControls.FormView> 控件中的页导航行的外观。 当分页功能处于启用状态时（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`），并且包含允许用户导航到控件中的不同页的控件时，将显示页导航行。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `PagerStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<PagerRowStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`PagerStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.PagerStyle%2A> 属性指定页导航行的样式设置。

 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.RowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PagerTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate PagerTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate PagerTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PagerTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ PagerTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PagerTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.FormView.PagerTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中页导航行的自定义内容。</summary>
        <value>一个 <see cref="T:System.Web.UI.ITemplate" />，包含页导航行的自定义内容。 默认值为 null，表示未设置此属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 启用分页功能后（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 true 时），将在 <xref:System.Web.UI.WebControls.FormView> 控件中显示页导航行。 页导航行包含允许用户导航到控件中的不同页的控件。 您可以使用 "<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>" 属性来定义自己的 UI，而不是使用内置的页导航行用户界面（UI）。

> [!NOTE]
>  设置 <xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A> 属性后，它将覆盖内置的页导航行 UI。

 若要为页导航行指定自定义模板，请首先将 `<PagerTemplate>` 标记放在 <xref:System.Web.UI.WebControls.FormView> 控件的开始和结束标记之间。 然后，你可以在开始和结束 `<PagerTemplate>` 标记之间列出模板的内容。 若要控制页导航行的外观，请使用 <xref:System.Web.UI.WebControls.FormView.PagerStyle%2A> 属性。

 通常，将按钮控件添加到页导航模板以执行分页操作。 当单击其 `CommandName` 属性设置为 "Page" 的按钮控件时，<xref:System.Web.UI.WebControls.FormView> 控件执行分页操作。 按钮的 `CommandArgument` 属性确定要执行的分页操作的类型。 下表列出了 <xref:System.Web.UI.WebControls.FormView> 控件支持的命令参数值。

|CommandArgument 值|说明|
|---------------------------|-----------------|
|一个|导航到下一页。|
|处|导航到上一页。|
|1|导航至第一页。|
|时间|导航至最后一页。|
|整数值|定位到指定的页码。|



## Examples
 下面的示例演示如何定义自定义页导航模板。

 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="PerformDataBinding">
      <MemberSignature Language="C#" Value="protected internal override void PerformDataBinding (System.Collections.IEnumerable data);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PerformDataBinding(class System.Collections.IEnumerable data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub PerformDataBinding (data As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void PerformDataBinding(System::Collections::IEnumerable ^ data);" />
      <MemberSignature Language="F#" Value="override this.PerformDataBinding : System.Collections.IEnumerable -&gt; unit" Usage="formView.PerformDataBinding data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="data">一个表示数据源的 <see cref="T:System.Collections.IEnumerable" />。</param>
        <summary>将指定数据源绑定到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.PerformDataBinding%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于将指定的数据源绑定到控件。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>由于 <see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" /> 方法是密封的，因此，如果在绑定数据时需要执行任何其他任务，则应重写此方法。</para></block>
        <altmember cref="T:System.Collections.IEnumerable" />
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected internal virtual void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.PrepareControlHierarchy" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub PrepareControlHierarchy ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void PrepareControlHierarchy();" />
      <MemberSignature Language="F#" Value="abstract member PrepareControlHierarchy : unit -&gt; unit&#xA;override this.PrepareControlHierarchy : unit -&gt; unit" Usage="formView.PrepareControlHierarchy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的控件层次结构。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.PrepareControlHierarchy%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于在呈现控件之前在 <xref:System.Web.UI.WebControls.FormView> 控件中设置控件层次结构。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="formView.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">为引发的一个或多个事件创建 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 时所使用的事件参数。</param>
        <summary>当 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件回发到服务器时引发此控件的合适的事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当发生引发 <xref:System.Web.UI.WebControls.FormView> 控件的相应事件的回发事件时，该页将调用 <xref:System.Web.UI.WebControls.FormView.RaisePostBackEvent%2A> 方法。 此调用发生在加载并更改通知完成之后、进行预呈现之前的页面生命周期中。 实现此方法是为了为引发的事件创建 <xref:System.Web.UI.WebControls.CommandEventArgs> 对象。

> [!NOTE]
>  此方法主要由控件开发人员用来扩展 <xref:System.Web.UI.WebControls.FormView> 控件。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="M:System.Web.UI.Page.RaisePostBackEvent(System.Web.UI.IPostBackEventHandler,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="formView.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">一个 <see cref="T:System.Web.UI.HtmlTextWriter" />，其中包含要在客户端上呈现内容的输出流。</param>
        <summary>在客户端上显示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.Render%2A> 方法用于使用指定的 <xref:System.Web.UI.HtmlTextWriter> 对象将服务器控件内容呈现到客户端的浏览器。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderOuterTable">
      <MemberSignature Language="C#" Value="public virtual bool RenderOuterTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderOuterTable" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.RenderOuterTable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RenderOuterTable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RenderOuterTable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RenderOuterTable : bool with get, set" Usage="System.Web.UI.WebControls.FormView.RenderOuterTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示控件是否将呈现的 HTML 包含在 <see langword="table" /> 元素中，以便应用内联样式。</summary>
        <value>如果控件将呈现的 HTML 包含在 <see langword="true" /> 元素中，则为 <see langword="table" />；否则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 为了使内联样式属性（例如 <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> 适用于为控件呈现的所有 HTML），ASP.NET 将呈现的 HTML 包含在 `table` 的元素中。 如果不希望呈现外部 `table` 元素，请将此属性设置为 `false`。 在这种情况下，如果尝试设置适用于整个控件的内联样式属性，则会引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow Row" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.Row" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Row As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ Row { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Row : System.Web.UI.WebControls.FormViewRow" Usage="System.Web.UI.WebControls.FormView.Row" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的数据行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件中的数据行的 <see cref="T:System.Web.UI.WebControls.FormView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.FormView.Row%2A> 属性以编程方式访问表示数据行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象。 数据行包含不同的内容，具体取决于为当前模式呈现的模板（由 <xref:System.Web.UI.WebControls.FormView.CurrentMode%2A> 属性指定）。 您只能访问当前模式下的模板内容。 下表显示了用于每个模式的模板。

|模式|模板已呈现|
|----------|-----------------------|
|编辑|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|
|插入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|
|只读|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|

> [!NOTE]
>  仅在 <xref:System.Web.UI.WebControls.FormView> 控件在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件中创建数据行之后，<xref:System.Web.UI.WebControls.FormView.Row%2A> 属性才可用。

 当你需要以编程方式操作数据行时（例如，添加自定义内容时），通常会使用此属性。 对 <xref:System.Web.UI.WebControls.FormView> 控件进行数据绑定后，必须执行对 <xref:System.Web.UI.WebControls.FormView.Row%2A> 属性的任何修改;否则，<xref:System.Web.UI.WebControls.FormView> 控件将覆盖所有更改。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.Row%2A> 属性访问 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件期间数据行的属性。

 [!code-aspx-csharp[FormViewRow#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewRow/CS/formviewrowcs.aspx#1)]
 [!code-aspx-vb[FormViewRow#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewRow/VB/formviewrowvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
      </Docs>
    </Member>
    <Member MemberName="RowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle RowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle RowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.RowStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RowStyle As TableItemStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TableItemStyle ^ RowStyle { System::Web::UI::WebControls::TableItemStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RowStyle : System.Web.UI.WebControls.TableItemStyle" Usage="System.Web.UI.WebControls.FormView.RowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 对象的引用，使用该对象可以设置在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时该控件中的数据行的外观。</summary>
        <value>一个对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 的引用，该对象表示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件处于只读模式时该控件中的数据行的样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.FormView> 控件处于只读（显示）模式时，可以使用 <xref:System.Web.UI.WebControls.FormView.RowStyle%2A> 属性控制数据行的外观。 当 <xref:System.Web.UI.WebControls.FormView> 控件处于只读模式时，数据行将显示由 <xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A> 属性指定的用户定义的内容。 此属性是只读的;但是，您可以设置它返回的 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的属性。 可以使用下列方法之一以声明方式设置属性：

-   将属性放置在窗体 `Property-Subproperty`的 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记中，其中 `Subproperty` 是 <xref:System.Web.UI.WebControls.TableItemStyle> 对象的一个属性（例如 `RowStyle-ForeColor`）。

-   在 <xref:System.Web.UI.WebControls.FormView> 控件的开始标记和结束标记之间嵌套 `<RowStyle>` 元素。

 还可以通过编程方式设置属性，`Property.Subproperty` （例如，`RowStyle.ForeColor`）。 常见设置通常包括自定义背景色、前景色和字体属性。



## Examples
 下面的示例演示当 <xref:System.Web.UI.WebControls.FormView> 控件处于只读模式时，如何使用 <xref:System.Web.UI.WebControls.FormView.RowStyle%2A> 属性为数据行指定自定义样式。

 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="formView.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存需要保持的 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件属性的状态（即使在 <see cref="P:System.Web.UI.Control.EnableViewState" /> 属性设置为 <see langword="false" /> 时）。</summary>
        <returns>返回服务器控件的当前视图状态。 如果没有与该控件关联的视图状态，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法用于保存需要保留的 <xref:System.Web.UI.WebControls.FormView> 控件属性的状态，即使在 <xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=nameWithType> 属性设置为 `false`时也是如此。

> [!NOTE]
>  此方法主要由控件开发人员用来扩展 <xref:System.Web.UI.WebControls.FormView> 控件。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.EnableViewState" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="formView.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前视图状态。</summary>
        <returns>它包含已保存的 <see cref="T:System.Object" /> 控件的状态的 <see cref="T:System.Web.UI.WebControls.FormView" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.SaveViewState%2A> 方法是 <xref:System.Web.UI.WebControls.FormView> 控件调用的帮助器方法，用于保存控件的状态。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedValue : obj" Usage="System.Web.UI.WebControls.FormView.SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的当前记录的数据键值。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的当前记录的数据键值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 设置 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性后，<xref:System.Web.UI.WebControls.FormView> 控件会自动创建一个 <xref:System.Web.UI.WebControls.DataKey> 对象，该对象包含当前记录的 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性中列出的一个或多个字段的键/值对。 <xref:System.Web.UI.WebControls.DataKey> 对象表示当前记录的主键字段或字段，存储在 <xref:System.Web.UI.WebControls.FormView.DataKey%2A> 属性中。 您可以使用 <xref:System.Web.UI.WebControls.FormView.SelectedValue%2A> 属性作为快捷方式，而不是使用 <xref:System.Web.UI.WebControls.FormView.DataKey%2A> 属性访问数据键值。

> [!NOTE]
>  当 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 属性列出多个字段时，此属性返回列出的第一个字段的值。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.SelectedValue%2A> 属性来确定键字段的值。

 [!code-aspx-csharp[FormViewSelectedValue#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewSelectedValue/CS/formviewselectedvaluecs.aspx#1)]
 [!code-aspx-vb[FormViewSelectedValue#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewSelectedValue/VB/formviewselectedvaluevb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKey" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
      </Docs>
    </Member>
    <Member MemberName="SetPageIndex">
      <MemberSignature Language="C#" Value="public void SetPageIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPageIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SetPageIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPageIndex (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPageIndex(int index);" />
      <MemberSignature Language="F#" Value="member this.SetPageIndex : int -&gt; unit" Usage="formView.SetPageIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">要设置的索引。</param>
        <summary>设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中当前显示页面的索引。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DataItemIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DataItemIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.IDataItemContainer.DataItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DataItemIndex As Integer Implements IDataItemContainer.DataItemIndex" />
      <MemberSignature Language="C++ CLI" Value="property int System::Web::UI::IDataItemContainer::DataItemIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.IDataItemContainer.DataItemIndex : int" Usage="System.Web.UI.IDataItemContainer.DataItemIndex" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DataItemIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="P:System.Web.UI.IDataItemContainer.DataItemIndex" />。</summary>
        <value>一个表示显示索引的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.IDataItemContainer> 接口时使用。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataItemContainer" />
        <altmember cref="P:System.Web.UI.IDataItemContainer.DataItemIndex" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DisplayIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DisplayIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.IDataItemContainer.DisplayIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DisplayIndex As Integer Implements IDataItemContainer.DisplayIndex" />
      <MemberSignature Language="C++ CLI" Value="property int System::Web::UI::IDataItemContainer::DisplayIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.IDataItemContainer.DisplayIndex : int" Usage="System.Web.UI.IDataItemContainer.DisplayIndex" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IDataItemContainer.DisplayIndex</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />。</summary>
        <value>始终返回 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.IDataItemContainer> 接口时使用。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataItemContainer" />
        <altmember cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IPostBackEventHandler.RaisePostBackEvent : string -&gt; unit&#xA;override this.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent : string -&gt; unit" Usage="formView.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">该事件的参数。</param>
        <summary>当 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件回发到服务器时引发此控件的事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当发生回发事件时，该页会调用 <xref:System.Web.UI.WebControls.FormView.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A> 方法。 此调用发生在加载并更改通知完成之后、呈现页面之前的页面生命周期中。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataKeyNames">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames" />
      <MemberSignature Language="VB.NET" Value=" Property DataKeyNames As String() Implements IDataBoundControl.DataKeyNames" />
      <MemberSignature Language="C++ CLI" Value="property cli::array &lt;System::String ^&gt; ^ System::Web::UI::WebControls::IDataBoundControl::DataKeyNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundControl.DataKeyNames : string[] with get, set" Usage="System.Web.UI.WebControls.IDataBoundControl.DataKeyNames" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataKeyNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个数组，该数组包含显示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的项的主键字段的名称。</summary>
        <value>一个数组，其中包含显示在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的项的主键字段的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataMember">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataMember" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember" />
      <MemberSignature Language="VB.NET" Value=" Property DataMember As String Implements IDataBoundControl.DataMember" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::UI::WebControls::IDataBoundControl::DataMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundControl.DataMember : string with get, set" Usage="System.Web.UI.WebControls.IDataBoundControl.DataMember" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataMember</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当数据源包含多个数据项列表时，获取或设置 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到的数据项列表的名称。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormView" /> 控件绑定到的数据项列表的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSource">
      <MemberSignature Language="C#" Value="object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Web.UI.WebControls.IDataBoundControl.DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource" />
      <MemberSignature Language="VB.NET" Value=" Property DataSource As Object Implements IDataBoundControl.DataSource" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Web::UI::WebControls::IDataBoundControl::DataSource { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundControl.DataSource : obj with get, set" Usage="System.Web.UI.WebControls.IDataBoundControl.DataSource" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据列表的对象。</summary>
        <value>包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据列表的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceID">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataSourceID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID" />
      <MemberSignature Language="VB.NET" Value=" Property DataSourceID As String Implements IDataBoundControl.DataSourceID" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::UI::WebControls::IDataBoundControl::DataSourceID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundControl.DataSourceID : string with get, set" Usage="System.Web.UI.WebControls.IDataBoundControl.DataSourceID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataSourceID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据源控件的 ID，该数据源控件包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</summary>
        <value>数据源控件的 ID，该数据源控件包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceObject">
      <MemberSignature Language="C#" Value="System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DataSourceObject As IDataSource Implements IDataBoundControl.DataSourceObject" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::UI::IDataSource ^ System::Web::UI::WebControls::IDataBoundControl::DataSourceObject { System::Web::UI::IDataSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundControl.DataSourceObject : System.Web.UI.IDataSource" Usage="System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundControl.DataSourceObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IDataSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取数据源对象，该数据源对象包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</summary>
        <value>数据源对象的，该数据源对象包含 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件所检索到的数据项列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundItemControl.DataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property DataKey As DataKey Implements IDataBoundItemControl.DataKey" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::UI::WebControls::DataKey ^ System::Web::UI::WebControls::IDataBoundItemControl::DataKey { System::Web::UI::WebControls::DataKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundItemControl.DataKey : System.Web.UI.WebControls.DataKey" Usage="System.Web.UI.WebControls.IDataBoundItemControl.DataKey" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundItemControl.DataKey</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象，该对象表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中行的数据键值。</summary>
        <value>表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中行的数据键值的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundItemControl.Mode">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Mode As DataBoundControlMode Implements IDataBoundItemControl.Mode" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::UI::WebControls::DataBoundControlMode System::Web::UI::WebControls::IDataBoundItemControl::Mode { System::Web::UI::WebControls::DataBoundControlMode get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.WebControls.IDataBoundItemControl.Mode : System.Web.UI.WebControls.DataBoundControlMode" Usage="System.Web.UI.WebControls.IDataBoundItemControl.Mode" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IDataBoundItemControl.Mode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前模式。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormView" /> 控件的当前模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员实现。 它只能在 <xref:System.Web.UI.WebControls.FormView> 实例被强制转换为 <xref:System.Web.UI.WebControls.IDataBoundControl> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions">
      <MemberSignature Language="C#" Value="System.Web.UI.PostBackOptions IPostBackContainer.GetPostBackOptions (System.Web.UI.WebControls.IButtonControl buttonControl);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(class System.Web.UI.WebControls.IButtonControl buttonControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)" />
      <MemberSignature Language="VB.NET" Value="Function GetPostBackOptions (buttonControl As IButtonControl) As PostBackOptions Implements IPostBackContainer.GetPostBackOptions" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::PostBackOptions ^ System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(System::Web::UI::WebControls::IButtonControl ^ buttonControl) = System::Web::UI::WebControls::IPostBackContainer::GetPostBackOptions;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions : System.Web.UI.WebControls.IButtonControl -&gt; System.Web.UI.PostBackOptions&#xA;override this.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions : System.Web.UI.WebControls.IButtonControl -&gt; System.Web.UI.PostBackOptions" Usage="formView.System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions buttonControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonControl" Type="System.Web.UI.WebControls.IButtonControl" />
      </Parameters>
      <Docs>
        <param name="buttonControl">将页回发给服务器的按钮控件。</param>
        <summary>确定 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的回发事件选项。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.FormView" /> 控件的回发事件选项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.System%23Web%23UI%23WebControls%23IPostBackContainer%23GetPostBackOptions%2A> 方法是一个帮助器方法，该方法由 <xref:System.Web.UI.WebControls.FormView> 控件调用，用于创建包含控件的回发事件选项的 <xref:System.Web.UI.PostBackOptions> 对象。 <xref:System.Web.UI.PostBackOptions> 对象通常用作 <xref:System.Web.UI.Page.GetPostBackEventReference%2A> 方法的参数。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buttonControl" /> 参数中包含的对象为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="buttonControl" /> 的 <see cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" /> 属性为 <see langword="true" />。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag" Usage="System.Web.UI.WebControls.FormView.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 值。</summary>
        <value>始终返回 <see langword="HtmlTextWriterTag.Table" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.FormView.TagKey%2A> 属性允许输出流写入 <xref:System.Web.UI.WebControls.FormView> 控件的相应 HTML 标记。

 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>可以重写此属性，以指定要用于派生控件的 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 值。</para></block>
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TopPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow TopPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow TopPagerRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TopPagerRow As FormViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::FormViewRow ^ TopPagerRow { System::Web::UI::WebControls::FormViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TopPagerRow : System.Web.UI.WebControls.FormViewRow" Usage="System.Web.UI.WebControls.FormView.TopPagerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示在 <see cref="T:System.Web.UI.WebControls.FormViewRow" /> 控件顶部显示的页导航行的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象。</summary>
        <value>一个 <see cref="T:System.Web.UI.WebControls.FormViewRow" />，表示 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件中的顶部页导航行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 启用分页时（当 <xref:System.Web.UI.WebControls.FormView.AllowPaging%2A> 属性设置为 `true`）时，会自动在 <xref:System.Web.UI.WebControls.FormView> 控件中显示一个名为 "页导航行" 的附加行。 页导航行包含的控件允许用户导航到其他记录，并且可以显示在控件的顶部和底部，或者同时显示在控件的顶部和底部。 使用 <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A> 属性以编程方式访问表示 <xref:System.Web.UI.WebControls.FormView> 控件中的顶部页导航行的 <xref:System.Web.UI.WebControls.FormViewRow> 对象。

> [!NOTE]
>  只有在 <xref:System.Web.UI.WebControls.FormView> 控件在 <xref:System.Web.UI.WebControls.FormView.ItemCreated> 事件中创建了顶部页导航行后，<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A> 属性才可用。

 当你需要以编程方式操作顶部页导航行时（例如，添加自定义内容时），通常会使用此属性。 在将 <xref:System.Web.UI.WebControls.FormView> 控件绑定到数据之后，必须执行对 <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A> 属性的任何修改;否则，<xref:System.Web.UI.WebControls.FormView> 控件将覆盖所有更改。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A> 属性访问在 <xref:System.Web.UI.WebControls.FormView> 控件顶部显示的页导航行。 然后，将用其他内容更新页导航行。

 [!code-aspx-csharp[FormViewTopPagerRow#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewTopPagerRow/CS/formviewtoppagerrowcs.aspx#1)]
 [!code-aspx-vb[FormViewTopPagerRow#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewTopPagerRow/VB/formviewtoppagerrowvb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.FormViewRow" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.AllowPaging" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageCount" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PageIndex" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerSettings" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerStyle" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemCreated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="formView.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>标记开始跟踪并将视图状态更改保存到 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件的起始点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 重写此方法以标记开始跟踪并将更改保存到控件的起始点，作为控件的视图状态的一部分。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="P:System.Web.UI.Control.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="UpdateItem">
      <MemberSignature Language="C#" Value="public virtual void UpdateItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateItem(bool causesValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateItem (causesValidation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UpdateItem(bool causesValidation);" />
      <MemberSignature Language="F#" Value="abstract member UpdateItem : bool -&gt; unit&#xA;override this.UpdateItem : bool -&gt; unit" Usage="formView.UpdateItem causesValidation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation">如果调用此方法时执行页验证，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>更新数据源中的当前记录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 <xref:System.Web.UI.WebControls.FormView> 控件处于编辑模式，则使用 <xref:System.Web.UI.WebControls.FormView.UpdateItem%2A> 方法以编程方式更新数据源中的当前记录。 当你需要从 <xref:System.Web.UI.WebControls.FormView> 控件的外部（如页面上的不同控件）更新当前记录时，通常使用此方法。

> [!NOTE]
>  调用此方法时，<xref:System.Web.UI.WebControls.FormView> 控件必须处于编辑模式;否则，会引发 <xref:System.Web.HttpException>。

 若要指定在更新操作之前是否执行页验证，请使用 `causesValidation` 参数。 调用此方法还会引发 <xref:System.Web.UI.WebControls.FormView.ItemUpdated> 和 <xref:System.Web.UI.WebControls.FormView.ItemUpdating> 事件。



## Examples
 下面的示例演示如何使用 <xref:System.Web.UI.WebControls.FormView.UpdateItem%2A> 方法以编程方式更新数据源中 <xref:System.Web.UI.WebControls.FormView> 控件中的当前记录。

 [!code-aspx-csharp[FormViewUpdateItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdateItem/CS/formviewupdateitemcs.aspx#1)]
 [!code-aspx-vb[FormViewUpdateItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdateItem/VB/formviewupdateitemvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">此方法在 <see cref="T:System.Web.UI.WebControls.FormView" /> 控件不处于编辑模式时调用。

- 或 -

与 <see cref="T:System.Web.UI.DataSourceView" /> 控件相关联的 <see cref="T:System.Web.UI.WebControls.FormView" /> 对象为空。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
        <altmember cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.DeleteItem" />
        <altmember cref="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public virtual string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.FormView.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件执行更新操作时调用的页面上的方法的名称。</summary>
        <value>当控件执行更新操作时，该页中被调用的方法的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 有关如何在 Web 窗体中使用模型绑定的教程系列，请参阅[模型绑定和 Web 窗体](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
