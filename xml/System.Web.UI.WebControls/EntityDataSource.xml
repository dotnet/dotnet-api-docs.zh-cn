<Type Name="EntityDataSource" FullName="System.Web.UI.WebControls.EntityDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db5aa4b4a4c46385d8359210b18d217a911eed55" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83909003" /></Metadata><TypeSignature Language="C#" Value="public class EntityDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.EntityDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type EntityDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public class EntityDataSource : System.Web.UI.DataSourceControl, System.Web.DynamicData.IDynamicDataSource, System.Web.UI.WebControls.IQueryableDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityDataSource extends System.Web.UI.DataSourceControl implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource, class System.Web.UI.WebControls.IQueryableDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityDataSource&#xA;Inherits DataSourceControl&#xA;Implements IDynamicDataSource, IQueryableDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityDataSource : System::Web::UI::DataSourceControl, System::Web::DynamicData::IDynamicDataSource, System::Web::UI::WebControls::IQueryableDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type EntityDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IQueryableDataSource&#xA;    interface IDataSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type EntityDataSource = class&#xA;    inherit DataSourceControl&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource&#xA;    interface IQueryableDataSource" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IQueryableDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("EntitySetName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.EntityDataSourceDesigner, System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.EntityDataSource), "EntityDataSource.ico")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.EntityDataSourceDesigner, System.Web.Entity.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 ASP.NET 应用程序中数据绑定控件的实体数据模型 (EDM)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 本主题内容：

-   [介绍](#introduction)

-   [声明性语法](#declarative_syntax)

<a name="introduction"></a>
## <a name="introduction"></a>介绍
 您可以将 <xref:System.Web.UI.WebControls.EntityDataSource> 控件与数据绑定控件一起使用，以便从 EDM 中检索数据，并使用少量或没有代码对网页上的数据进行显示、编辑和排序。 有关详细信息，请参阅[EntityDataSource Web 服务器控件概述](https://docs.microsoft.com/previous-versions/aspnet/cc488502(v=vs.100))。

<a name="declarative_syntax"></a>
## <a name="declarative-syntax"></a>声明性语法

```
<asp:EntityDataSource
    AutoGenerateOrderByClause="True|False"
    AutoGenerateWhereClause="True|False"
    AutoPage="True|False"
    AutoSort="True|False"
    CommandText="string"
    ConnectionString="string"
    ContextType="typed ObjectContext"
    ContextTypeName="string"
    DefaultContainerName="string"
    EnableDelete="True|False"
    EnableInsert="True|False"
    EnableUpdate="True|False"
    EnableViewState="True|False"
    EntitySetName="string"
    EntityTypeFilter="string"
    GroupBy="string"
    Include="string"
    OnContextCreated="ContextCreated event handler"
    OnContextCreating="ContextCreating event handler"
    OnContextDisposing="ContextDisposing event handler"
    OnDataBinding="DataBinding event handler"
    OnDeleted="Deleted event handler"
    OnDeleting="Deleting event handler"
    OnException="IDynamicDataSource.Exception event handler"
    OnInserted="Inserted event handler"
    OnInserting="Inserting event handler"
    OnSelected="Selected event handler"
    OnSelecting="Selecting event handler"
    OnUpdated="Updated event handler"
    OnUpdating="Updating event handler"
    OrderBy="string"
    runat="server"
    Select="string"
    StoreOriginalValuesInViewState="True|False"
    Where="string"
>
        <CommandParameters />
        <DeleteParameters />
        <GroupByParameters />
        <InsertParameters />
        <OrderByParameters />
        <SelectParameters />
        <UpdateParameters />
        <WhereParameters />
</asp:EntityDataSource>
```

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/overview">实体框架概述</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityDataSource (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.#ctor(System.Data.EntityClient.EntityConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EntityConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityDataSource(System::Data::EntityClient::EntityConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.EntityDataSource : System.Data.EntityClient.EntityConnection -&gt; System.Web.UI.WebControls.EntityDataSource" Usage="new System.Web.UI.WebControls.EntityDataSource connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">实体数据模型 (EDM) 的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <summary>使用提供的连接初始化 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件是否根据 <see cref="P:System.Web.UI.WebControls.EntityDataSource.OrderByParameters" /> 集合中的值动态创建 ORDER BY 子句。</summary>
        <value>如果 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件创建 ORDER BY 子句，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`时，控件将根据分配给 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 属性的 <xref:System.Web.UI.WebControls.ParameterCollection> 中的参数自动生成 ORDER BY 子句。 这样就无需显式地将 ORDER BY 子句分配到 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性。

 如果将 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`，则不应向 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性显式赋值。



## Examples
 下面的示例自动生成 ORDER BY 子句，并使用 `OrderByDropDownList` 的值设置参数的值。

```
<asp:DropDownList AutoPostBack="true" ID="OrderByDropDownList" runat="server">
    <asp:ListItem Value="TotalDue"></asp:ListItem>
    <asp:ListItem Value="OrderDate"></asp:ListItem>
</asp:DropDownList>

<asp:EntityDataSource ID="EntityDataSourceWithAutoGenOrderBy" runat="server"
ConnectionString="name=AdventureWorksEntities"
DefaultContainerName="AdventureWorksEntities"
EntitySetName="SalesOrderHeaders"
Select="it.SalesOrderID, it.TotalDue, it.OrderDate"
AutoGenerateOrderByClause="True">
<OrderByParameters>
    <asp:ControlParameter
    ControlID="OrderByDropDownList"/>
</OrderByParameters>
</asp:EntityDataSource>
```

 下面的示例自动生成 ORDER BY 子句，并使用 `Parameter` 元素的 `DefaultValue` 特性来设置参数的值。

```
<asp:EntityDataSource ID="EntityDataSourceWithAutoGenOrderBy" runat="server"
ConnectionString="name=AdventureWorksEntities"
DefaultContainerName="AdventureWorksEntities"
EntitySetName="SalesOrderHeaders"
Select="it.SalesOrderID, it.TotalDue, it.OrderDate"
AutoGenerateOrderByClause="True">
<OrderByParameters>
    <asp:Parameter
    DefaultValue="TotalDue"/>
</OrderByParameters>
</asp:EntityDataSource>
```

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当 <see cref="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause" /> 属性设置为 <see langword="true" />，同时 <see cref="P:System.Web.UI.WebControls.EntityDataSource.OrderBy" /> 属性设置为非 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件是否基于 <see cref="P:System.Web.UI.WebControls.EntityDataSource.WhereParameters" /> 集合中定义的值来动态创建 WHERE 子句。</summary>
        <value>如果 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件创建 WHERE 子句，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 若要通过使实体类型属性等于表达式来筛选查询结果，可以使用 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 属性。 当 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true`时，控件会自动从 <xref:System.Web.UI.WebControls.ParameterCollection> 属性 <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 中的参数生成 `WHERE` 子句。 每个参数的 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 属性必须与查询结果中包含的实体类型属性名称相匹配。 如果将 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true`，则不应将 `WHERE` 子句显式分配给 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性。

## Examples
 在下面的示例中，<xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 属性设置为 `true`。 因此，属性的 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 必须与查询结果中包含的实体类型属性名称相匹配。 查询选择 SalesOrderHeader 实体类型的 SalesOrderID 和 TotalDue 属性。 自动生成的 `WHERE` 子句将通过将 TotalDue 值与在 "TotalDueList" 列表框控件中选择的值进行比较来筛选查询结果。

```
<asp:EntityDataSource ID="SalesOrderHeaderWithAutoParam" runat="server"
   ConnectionString="name=AdventureWorksEntities"
   DefaultContainerName="AdventureWorksEntities"
   EntitySetName="SalesOrderHeaders"
   Select="it.SalesOrderID, it.TotalDue"
    AutoGenerateWhereClause="True">
    <WhereParameters>
        <asp:ControlParameter ControlID="TotalDueList"
           Name="TotalDue" PropertyName="SelectedValue" DbType="Decimal" />
    </WhereParameters>
</asp:EntityDataSource>
```

## Examples
 默认情况下，<xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 属性设置为 `false`。 这意味着我们必须提供 `WHERE` 子句。 在下面的示例中，`WHERE` 子句是 `Where="it.TotalDue < @totalDueParam"`，totalDueParam 是参数名称。

```
<asp:EntityDataSource ID="SalesOrderHeaderWithOutAutoParam" runat="server"
   ConnectionString="name=AdventureWorksEntities"
   DefaultContainerName="AdventureWorksEntities"
   EntitySetName="SalesOrderHeaders"
   Where="it.TotalDue < @totalDueParam"
    Select="it.SalesOrderID, it.TotalDue">
    <WhereParameters>
        <asp:ControlParameter ControlID="TotalDueList"
           Name="totalDueParam" PropertyName="SelectedValue" DbType="Decimal" />
    </WhereParameters>
</asp:EntityDataSource>
```

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当 <see cref="P:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause" /> 属性设置为 <see langword="true" />，同时 <see cref="P:System.Web.UI.WebControls.EntityDataSource.Where" /> 属性设置为非 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件是否支持在运行时在数据的各部分之间导航。</summary>
        <value>如果用户可以对数据进行分页，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件支持对查询返回的数据进行自动分页。 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 属性是一个布尔值属性，指示是否为绑定到数据控件的查询所返回的数据启用分页。 如果将此属性设置为 `true`，<xref:System.Web.UI.WebControls.EntityDataSource> 控件将根据数据绑定控件提供给 <xref:System.Web.UI.WebControls.EntityDataSourceView> 的信息，将相应的查询生成器方法添加到 <xref:System.Data.Objects.ObjectQuery%601> 中。

 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 属性的值确定支持数据源的 <xref:System.Web.UI.WebControls.EntityDataSourceView> 控件的 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanPage%2A> 属性是否 `true` 或 `false`。

 当定义启用了分页的投影时，必须定义用于对结果进行排序的属性。 这意味着，当你设置 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性以定义投影并将 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 设置为 `true`时，还必须将 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性设置为定义顺序，或将 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true` 并向 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 集合添加 ORDER BY 参数。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件是否支持在运行时对数据进行排序。</summary>
        <value>如果用户可以对数据进行排序，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件支持对查询返回的数据进行自动排序。 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.AutoSort%2A> 属性是一个布尔值属性，指示是否为绑定到数据控件的查询所返回的数据启用排序。 如果将此属性设置为 `true`，<xref:System.Web.UI.WebControls.EntityDataSource> 控件将根据数据绑定控件提供给 <xref:System.Web.UI.WebControls.EntityDataSourceView> 的信息，将相应的查询生成器方法添加到 <xref:System.Data.Objects.ObjectQuery%601> 中。

 <xref:System.Web.UI.WebControls.EntityDataSource.AutoSort%2A> 属性的值确定支持数据源的 <xref:System.Web.UI.WebControls.EntityDataSourceView> 控件的 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanSort%2A> 和 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanRetrieveTotalRowCount%2A> 属性是 `true` 还是 `false`。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection CommandParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection CommandParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.CommandParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ CommandParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.CommandParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取查询的参数集合。</summary>
        <value>一个包含传递给查询命令的参数的 <see cref="T:System.Web.UI.WebControls.ParameterCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource.CommandParameters%2A> 属性用于访问传递到使用 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 属性指定的显式实体 SQL 查询的参数 <xref:System.Web.UI.WebControls.ParameterCollection>。



## Examples
 下面的示例提供了实体 SQL 的命令文本，该文本返回产品对象的集合。

```
<asp:EntityDataSource ID="ProductDataSource" runat="server"
    CommandText="SELECT value p FROM Products AS p
        WHERE p.ProductID
        BETWEEN @OrderIdMin AND @OrderIdMax"
    ConnectionString="name=AdventureWorksEntities"
    DefaultContainerName="AdventureWorksEntities" >
    <CommandParameters>
        <asp:ControlParameter Name="OrderIdMin"
            ControlID="ProductIdMin" Type="Int32"/>
        <asp:ControlParameter Name="OrderIdMax"
            ControlID="ProductIdMax" Type="Int32" />
    </CommandParameters>
</asp:EntityDataSource>

```

 下面的示例返回投影的列系列：

```
<asp:EntityDataSource ID="ProductDataSource" runat="server"
    CommandText="SELECT p.ProductID, p.ProductName, p.UnitsOnOrder
         FROM Products AS p
         WHERE p.ProductID BETWEEN @OrderIDMin AND @OrderIDMax"
         ContextTypeName="AdventureWorksModel. AdventureWorksEntities">
    <CommandParameters>
        <asp:ControlParameter Name="OrderIDMin"
               ControlID="ProductIDMinTextBox" Type="Int32"/>
        <asp:ControlParameter Name="OrderIDMax"
               ControlID="ProductIDMaxTextBox" Type="Int32" />
    </CommandParameters>
</asp:EntityDataSource>

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandText : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.CommandText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置定义查询的 Entity SQL 命令。</summary>
        <value>Entity SQL 查询的 <see langword="string" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 属性可以指定使用自定义实体 SQL 表达式的查询。 与 SELECT 语句一样，<xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 创建无法更新的原始数据的投影。

 分配 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 属性后，将禁用更新、插入和删除功能。 在这种情况下，所有返回 `false`的相关 <xref:System.Web.UI.WebControls.EntityDataSourceView> 控件的方法 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanDelete%2A>、<xref:System.Web.UI.WebControls.EntityDataSourceView.CanInsert%2A>和 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanUpdate%2A>。

 设置 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 属性后，如果 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A>、<xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A>或 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 的值设置为 `true`，则当 <xref:System.Web.UI.DataSourceView.ExecuteSelect%2A> 方法由绑定到 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的数据绑定到该控件时，将引发异常。

 如果 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 设置为返回属性投影的查询（例如，"`SELECT p.ProductID, p. Name FROM AdventureWorksEntities.Products AS p`"），则将返回 <xref:System.Data.Common.DbDataRecord>。



## Examples
 下面的示例使用提供的实体 SQL 命令返回产品对象的集合。

```
<asp:EntityDataSource ID="ProductDataSource" runat="server"
    CommandText="SELECT value p FROM Products AS p
        WHERE p.ProductID
        BETWEEN @OrderIdMin AND @OrderIdMax"
    ConnectionString="name=AdventureWorksEntities"
    DefaultContainerName="AdventureWorksEntities" >
    <CommandParameters>
        <asp:ControlParameter Name="OrderIdMin"
            ControlID="ProductIdMin" Type="Int32"/>
        <asp:ControlParameter Name="OrderIdMax"
            ControlID="ProductIdMax" Type="Int32" />
    </CommandParameters>
</asp:EntityDataSource>

```

 下面的示例返回投影的列系列：

```
<asp:EntityDataSource ID="ProductDataSource" runat="server"
    CommandText="SELECT p.ProductID, p.ProductName, p.UnitsOnOrder
          FROM Products AS p
          WHERE p.ProductID BETWEEN @OrderIDMin AND @OrderIDMax"
          ContextTypeName="AdventureWorksModel. AdventureWorksEntities">
    <CommandParameters>
        <asp:ControlParameter Name="OrderIDMin"
                ControlID="ProductIDMinTextBox" Type="Int32"/>
        <asp:ControlParameter Name="OrderIDMax"
                ControlID="ProductIDMaxTextBox" Type="Int32" />
    </CommandParameters>
</asp:EntityDataSource>

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于执行查询的连接字符串。</summary>
        <value>查询的连接字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 可以通过存储在应用程序配置文件的[connectionStrings](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bf7sd233(v=vs.100))元素中的命名 EDM 连接字符串来初始化 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 属性。 当使用实体数据模型向导创建 EDM 时，将在应用程序配置文件中创建一个名为 EDM 的连接。 在应用程序配置文件中找到命名的 EDM 连接字符串后，连接将在 EntityDataSource 设计器的 "配置数据源" 向导中显示为一个选项。 有关详细信息，请参阅[配置数据源向导（EntityDataSource 控件）](https://docs.microsoft.com/previous-versions/aspnet/cc488506(v=vs.100))。

 如果未指定 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 属性，则必须为控件设置 <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A> 和 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 属性才能创建 <xref:System.Data.Objects.ObjectContext>。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of EntityDataSourceContextCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceContextCreatedEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 创建完用于处理实体数据对象的 <see cref="T:System.Data.Objects.ObjectContext" /> 之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理此事件，以访问 <xref:System.Web.UI.WebControls.EntityDataSource> 控件用于执行查询和跟踪更改的 <xref:System.Data.Objects.ObjectContext>。 可以存储此上下文对象并将其用于 <xref:System.Web.UI.WebControls.EntityDataSource>之外的后续操作。 <xref:System.Data.Objects.ObjectContext> 是从 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreated> 事件返回的 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs> 获取的。 有关详细信息，请参阅[对象上下文生命周期管理（EntityDataSource）](https://docs.microsoft.com/previous-versions/aspnet/cc668193(v=vs.100))。 有关对象上下文的详细信息，请参阅[标识解析、状态管理和更改跟踪](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))。

 使用 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreated> 事件，可以将已创建的 <xref:System.Data.Objects.ObjectContext> 分配到用于 <xref:System.Web.UI.WebControls.EntityDataSource>外的后续操作。 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs.Context%2A?displayProperty=nameWithType> 属性包含已在 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 事件中创建的上下文。 如果用户未在 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 事件期间分配上下文，则 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs.Context%2A?displayProperty=nameWithType> 中包含的上下文实例是 <xref:System.Web.UI.WebControls.EntityDataSource> 基于 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A?displayProperty=nameWithType>、<xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A?displayProperty=nameWithType>或 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A?displayProperty=nameWithType> 属性创建的实例。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of EntityDataSourceContextCreatingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceContextCreatingEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 创建用于处理实体数据对象的 <see cref="T:System.Data.Objects.ObjectContext" /> 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 事件以提供您自己的 <xref:System.Data.Objects.ObjectContext>，而不是创建新的 <xref:System.Data.Objects.ObjectContext>。 如果未处理 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 事件，或处理程序未提供 <xref:System.Data.Objects.ObjectContext>，则 <xref:System.Web.UI.WebControls.EntityDataSource> 会根据其配置创建一个。 向 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreating> 事件提供 <xref:System.Data.Objects.ObjectContext> 时，会将相同的实例分配给连续事件的事件对象的 `Context` 属性。 有关详细信息，请参阅[对象上下文生命周期管理（EntityDataSource）](https://docs.microsoft.com/previous-versions/aspnet/cc668193(v=vs.100))。 有关对象上下文的详细信息，请参阅[标识解析、状态管理和更改跟踪](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))。



## Examples
 下面的示例演示如何创建 <xref:System.Web.UI.Page> 对象的 <xref:System.Data.Objects.ObjectContext> 变量，并将其分配给 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs.Context%2A> 属性。

```csharp
public partial class _Default : System.Web.UI.Page
    {
        AdventureWorksModel.AdventureWorksEntities objCtx =
            new AdventureWorksModel.AdventureWorksEntities();

        protected void EntityDataSource2_ContextCreating(object sender,
            EntityDataSourceContextCreatingEventArgs e)
        {
            e.Context = objCtx;
        }
    }
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of EntityDataSourceContextDisposingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceContextDisposingEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在释放 <see cref="T:System.Data.Objects.ObjectContext" /> 之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 处理此事件可防止释放 <xref:System.Web.UI.WebControls.EntityDataSource> 控件使用的 <xref:System.Data.Objects.ObjectContext>。 如果要在页面中使用单个 <xref:System.Data.Objects.ObjectContext> 实例，其中包含多个控件或 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的实例，请执行此操作。 若要防止释放 <xref:System.Data.Objects.ObjectContext>，请将 <xref:System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 "`true`"。 有关详细信息，请参阅[对象上下文生命周期管理（EntityDataSource）](https://docs.microsoft.com/previous-versions/aspnet/cc668193(v=vs.100))。 有关对象上下文的详细信息，请参阅[标识解析、状态管理和更改跟踪](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))。



## Examples
 若要保留现有 <xref:System.Data.Objects.ObjectContext> 实例成员以供将来参考，请取消 <xref:System.Web.UI.WebControls.EntityDataSource.ContextCreated> 事件，如以下代码所示。

```csharp
protected void EntityDataSource2_ContextDisposing(object sender,
    EntityDataSourceContextDisposingEventArgs e)
{
    e.Cancel = true;
}

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextType">
      <MemberSignature Language="C#" Value="public Type ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.ContextType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextType : Type with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.Objects.ObjectContext" /> 控件使用的类型化 <see cref="T:System.Web.UI.WebControls.EntityDataSource" />。</summary>
        <value>从 <see cref="T:System.Data.Objects.ObjectContext" /> 派生的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 可以从 <xref:System.Web.UI.WebControls.EntityDataSource.ContextType%2A> 属性访问 <xref:System.Web.UI.WebControls.EntityDataSource> 控件所使用的 <xref:System.Data.Objects.ObjectContext>。 有关详细信息，请参阅[对象上下文生命周期管理（EntityDataSource）](https://docs.microsoft.com/previous-versions/aspnet/cc668193(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.Objects.ObjectContext" /> 控件使用的类型化 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 的完全限定名。</summary>
        <value>一个 <see cref="T:System.String" />，它是此类型的完全限定名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 属性是一个字符串，该字符串指定 <xref:System.Web.UI.WebControls.EntityDataSource> 控件使用的类型化 <xref:System.Data.Objects.ObjectContext> 的完全限定类型名称。 如果未指定 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 属性，则必须为控件设置 <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A> 和 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 属性才能创建 <xref:System.Data.Objects.ObjectContext>。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.EntityDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.EntityDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As EntityDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::EntityDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.EntityDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.EntityDataSourceView" Usage="entityDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.EntityDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建与此控件相关联的 <see cref="T:System.Web.UI.WebControls.EntityDataSourceView" /> 的新实例。</summary>
        <returns>充当数据绑定控件的接口的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 若要提供自定义视图，可以在派生类中重写此方法。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultContainerName : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.DefaultContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认容器名称。</summary>
        <value>作为默认容器名称的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果未指定 <xref:System.Web.UI.WebControls.EntityDataSource.ContextTypeName%2A> 属性，则必须为控件设置 <xref:System.Web.UI.WebControls.EntityDataSource.DefaultContainerName%2A> 和 <xref:System.Web.UI.WebControls.EntityDataSource.ConnectionString%2A> 属性才能创建 <xref:System.Data.Objects.ObjectContext>。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of EntityDataSourceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangedEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在从数据源中删除对象之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource.Deleted> 事件是在 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法刚刚在 <xref:System.Data.Objects.ObjectContext> 上成功调用以删除对象后引发的。 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 属性用于访问已删除的对象。 此对象处于 <xref:System.Data.EntityState.Detached> 状态。

 如果在删除对象时出错，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Deleted> 事件，<xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Exception%2A> 属性设置为返回的 <xref:System.Exception>，<xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Entity%2A> 属性设置为 `null`。 如果处理 <xref:System.Web.UI.WebControls.EntityDataSource.Deleted> 事件处理程序中的异常，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在删除操作过程中使用的参数的集合。</summary>
        <value>在删除操作过程中使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对于面向 ASP.NET 4 或更早版本的 web 应用程序，属性值存储在视图状态中，并在回发之间自动维护。 对于面向 ASP.NET 4.5 的 web 应用程序，属性值不会存储在视图状态中，你必须为每个 HTTP 请求设置值。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of EntityDataSourceChangingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangingEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在从数据源中删除对象之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource.Deleting> 事件将在对 <xref:System.Data.Objects.ObjectContext> 调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法之前引发，以删除对象。 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 属性用于访问要删除的对象。 此对象的属性可能未完全设置。 只有标识该对象所需的属性才必须设置。

 若要阻止删除该对象，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 "`true`"。

 如果在准备删除对象时出错，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Deleting> 事件，<xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Exception%2A> 属性将设置为返回的 <xref:System.Exception>。

 处理 <xref:System.Web.UI.WebControls.EntityDataSource.Deleting> 事件处理程序中的异常时，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件删除对象。</summary>
        <value>如果启用了自动删除操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果启用了 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 属性，则不能设置 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A>。

 分配给 <xref:System.Web.UI.WebControls.EntityDataSource> 上的 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 属性的 `false` 值强制相关 <xref:System.Web.UI.WebControls.EntityDataSourceView> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanDelete%2A> 属性返回 `false`。 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 属性设置为 `false`时，如果数据绑定控件调用 <xref:System.Web.UI.WebControls.EntityDataSourceView>上的 <xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> 方法，则会引发 <xref:System.NotSupportedException>。

 如果未满足可更新性的任何条件，并且 <xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A> 属性设置为 `true`，则 <xref:System.Web.UI.WebControls.EntityDataSource> 将引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFlattening">
      <MemberSignature Language="C#" Value="public bool EnableFlattening { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableFlattening" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableFlattening" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableFlattening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableFlattening { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableFlattening : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableFlattening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否关闭包装创建。</summary>
        <value>如果属性将平展，则 <see langword="true" />;否则，<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 属性初始化 <xref:System.Web.UI.WebControls.EntityDataSource> 控件时，<xref:System.Web.UI.WebControls.EntityDataSource> 会将结果中的每个实体实例包装 <xref:System.ComponentModel.ICustomTypeDescriptor> 类型的对象。 有关详细信息，请参阅[平展对象（EntityDataSource）](https://docs.microsoft.com/previous-versions/ee404746(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件添加对象。</summary>
        <value>如果启用了自动插入操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 属性设置为 `true`，则不能设置 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A>。

 分配给 <xref:System.Web.UI.WebControls.EntityDataSource> 上的 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 属性的 `false` 值强制相关 <xref:System.Web.UI.WebControls.EntityDataSourceView> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanInsert%2A> 属性返回 `false`。 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 属性设置为 `false`时，如果数据绑定控件调用 <xref:System.Web.UI.WebControls.EntityDataSourceView>上的 <xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> 方法，则会引发 <xref:System.NotSupportedException>。

 如果未满足可更新性的任何条件，并且 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A> 属性设置为 `true`，则 <xref:System.Web.UI.WebControls.EntityDataSource> 将引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以通过 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件修改对象。</summary>
        <value>如果启用了自动更新操作，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 属性设置为 `true`，则不能设置 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A>。

 分配给 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 属性的 `false` 值强制相关 <xref:System.Web.UI.WebControls.EntityDataSourceView> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceView.CanUpdate%2A> 属性返回 `false`。 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 属性设置为 `false`时，如果数据绑定控件调用 <xref:System.Web.UI.WebControls.EntityDataSourceView>上的 <xref:System.Web.UI.DataSourceView.ExecuteUpdate%2A> 方法，则会引发 <xref:System.NotSupportedException>。

 将 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 属性设置为 `true` 并不保证可更新性。

 如果未满足可更新性的任何条件，并且 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A> 属性设置为 `true`，则 <xref:System.Web.UI.WebControls.EntityDataSource> 将引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntitySetName">
      <MemberSignature Language="C#" Value="public string EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EntitySetName" />
      <MemberSignature Language="VB.NET" Value="Public Property EntitySetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EntitySetName : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件使用的实体集的名称。</summary>
        <value>实体集名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 属性用于指定控件所访问的对象的类型的实体集。 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 属性的值是由控件使用的默认 SELECT 语句。 如果查询指定为提供给 <xref:System.Web.UI.WebControls.EntityDataSource.CommandText%2A> 属性的实体 SQL 表达式，则不需要设置。 有关详细信息，请参阅[自定义命令文本（EntityDataSource）](https://msdn.microsoft.com/library/d42e90d0-1443-474e-8940-53f504d6fc91)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTypeFilter">
      <MemberSignature Language="C#" Value="public string EntityTypeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EntityTypeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityTypeFilter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EntityTypeFilter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EntityTypeFilter : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将查询结果限定为特定派生类型的表达式。</summary>
        <value>筛选表达式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.EntityDataSource> 控件必须返回特定派生类型时，还必须设置 <xref:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter%2A> 属性以指定此派生类型的名称。 如果 <xref:System.Web.UI.WebControls.EntityDataSource.EntitySetName%2A> 属性指定可以生成多态结果的实体集，则必须具有 <xref:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter%2A> 属性才能编辑数据。 这与将 <xref:System.Data.Objects.ObjectQuery%601.OfType%60%601?displayProperty=nameWithType> 方法应用于 <xref:System.Data.Objects.ObjectQuery%601?displayProperty=nameWithType>具有相同的效果。 如果数据绑定为只读，则不需要 <xref:System.Web.UI.WebControls.EntityDataSource.EntityTypeFilter%2A> 属性。 在这种情况下，查询返回的对象的属性将是实体集的默认实体类型的属性。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="entityDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要检索的视图的名称。 由于 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件只支持一个视图，因此忽略 <paramref name="viewName" />。</param>
        <summary>获取与数据源控件关联的命名的数据源视图。</summary>
        <returns>与 <see cref="T:System.Web.UI.WebControls.EntityDataSourceView" /> 控件关联的 <see cref="T:System.Web.UI.WebControls.EntityDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件仅支持一个数据源视图。 与所有数据源视图对象一样，与数据源控件关联的 <xref:System.Web.UI.WebControls.EntityDataSourceView> 对象定义其功能，执行从基础数据库检索数据所需的所有工作，并执行排序、插入、删除和更新等操作。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="entityDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取名称的集合，这些名称表示与 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件关联的视图对象的列表。</summary>
        <returns>一个 <see cref="T:System.Collections.ICollection" />，其中包含与 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件关联的视图的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件只支持一个视图的基础数据。 <xref:System.Web.UI.WebControls.EntityDataSource.GetViewNames%2A> 方法以字符串形式返回此单向视图名称的单元素集合。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定如何对查询结果分组的 Entity SQL 表达式。</summary>
        <value>GROUP BY 子句。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public string Include { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Include" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.Include" />
      <MemberSignature Language="VB.NET" Value="Public Property Include As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Include { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Include : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.Include" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定要包含在查询结果中的相关对象的表达式。</summary>
        <value>要在查询结果中返回的以逗号分隔的查询路径列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 属性指定以逗号分隔的查询路径列表，该列表定义与专门查询的对象一起返回的对象。 字符串中的每个逗号分隔值都将传递，而不进行修改，作为对 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]执行的 <xref:System.Data.Objects.ObjectQuery%601> 的 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 方法的单独调用。 此查询是受 <xref:System.Web.UI.WebControls.EntityDataSource> 控件控制的数据源。 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 属性是在执行之前应用于 <xref:System.Data.Objects.ObjectQuery%601> 的参数。

 提供给 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 属性的字符串使用与传递到 <xref:System.Data.Objects.ObjectQuery%601>的 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 方法的字符串相同的格式。 有关如何使用查询路径自动加载相关对象的示例，请参阅[如何：使用查询路径来确定结果的形状](https://msdn.microsoft.com/library/100bf7f5-00ba-4c17-8e27-7a8a14831093)。

 如果使用 <xref:System.Web.UI.WebControls.EntityDataSource.Include%2A> 属性指定查询路径，则相关实体的属性仅可用于只读数据绑定。 如果未在查询路径中显式包含相关对象，则属性描述符仍可用于数据绑定，但属性本身返回 null 值。 在这种情况下，必须显式加载相关对象以显示其值。 有关详细信息，请参阅[加载相关对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。



## Examples
 下面的 XML 标记定义一个查询路径，该查询路径返回与返回的 `Contact` 对象相关的 `SalesOrderHeader` 对象。 对于每个 `SalesOrderHeader`，还会返回相关的 `SalesOrderDetail` 和 `Address` 对象。

```
<asp:EntityDataSource ID="ContactDataSource" runat="server"
    AutoGenerateWhereClause="True" ConnectionString="name=AdventureWorksEntities"
    DefaultContainerName="AdventureWorksEntities" EnableDelete="True"
    EnableInsert="True" EnableUpdate="True" EntitySetName="Contact"
    Include="SalesOrderHeader.SalesOrderDetail, SalesOrderHeader.Address">
    <WhereParameters>
        <asp:ControlParameter ControlID="customerId" Name="ContactID"
            PropertyName="Text" />
    </WhereParameters>
</asp:EntityDataSource>
```

 上面的 XML 示例与名为 `customers`的以下 <xref:System.Data.Objects.ObjectQuery%601> 相同：

```
ObjectQuery<Contact> customers =
      context.Contact
       .Where("it.ContactID = @ContactID",
         new ObjectParameter("ContactID", customerId))
        .Include("SalesOrderHeader.SalesOrderDetail")
        .Include("SalesOrderHeader.Address");

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of EntityDataSourceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangedEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在数据源中创建新对象之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果在数据源中创建添加的对象，或者在将对象数据保存到数据源时出错，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Inserted> 事件。 使用 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Entity%2A> 属性访问添加的对象。

 此对象的属性包含从数据源返回的值，包括任何数据源生成的值。

 如果在将对象保存到数据源时发生错误，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Inserted> 事件，并且 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Exception%2A> 属性将设置为返回的 <xref:System.Exception>。 如果处理 <xref:System.Web.UI.WebControls.EntityDataSource.Inserted> 事件处理程序中的异常，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of EntityDataSourceChangingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangingEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将新对象保留到数据源之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在将新的对象保存到数据源之前引发 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 事件。 使用 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 事件可以修改或验证要添加的对象、添加其他对象或取消操作。 可以访问要从 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 属性添加的对象。 如果提供不同的对象，则用户负责在 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 属性中设置正确的实体类型。

 若要停止添加该对象，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 "`true`"。

 如果在创建新对象时出错，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 事件，并且 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Exception%2A> 属性将设置为返回的 <xref:System.Exception>。

 处理 <xref:System.Web.UI.WebControls.EntityDataSource.Inserting> 事件处理程序中的异常时，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在插入操作过程中使用的参数的集合。</summary>
        <value>在插入操作过程中使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对于面向 ASP.NET 4 或更早版本的 web 应用程序，属性值存储在视图状态中，并在回发之间自动维护。 对于面向 ASP.NET 4.5 的 web 应用程序，属性值不会存储在视图状态中，你必须为每个 HTTP 请求设置值。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="entityDataSource.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">包含状态信息的 <see cref="T:System.Object" />。</param>
        <summary>加载 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件中需要保留的属性的状态。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="entityDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>将 <see cref="E:System.Web.UI.Page.LoadComplete" /> 事件处理程序添加到包含 <see cref="T:System.Web.UI.Page" /> 控件的 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="entityDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Web.UI.Control.Unload" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定如何对查询结果进行排序的 Entity SQL 表达式。</summary>
        <value>ORDER BY 子句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性是一个字符串，它表示实体 SQL 查询的[ORDER BY](/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql)表达式。 此字符串将不经修改即可传递到 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]执行的 <xref:System.Data.Objects.ObjectQuery%601>。 此查询是受 <xref:System.Web.UI.WebControls.EntityDataSource> 控件控制的数据源。 提供给 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性的字符串使用与传递到 <xref:System.Data.Objects.ObjectQuery%601>的 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> 方法的字符串相同的格式。 有关如何使用[ORDER BY](/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql)子句对查询结果进行排序的示例，请参阅[如何：对数据进行排序](https://msdn.microsoft.com/library/c05f2506-cb9d-4ebc-822b-300042ad53e7)。



## Examples
 以下示例中的 XML 标记在 .aspx 文件中，从控件中检索值，并将其作为参数传递给 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性。

```
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"
  ConnectionString="name=AdventureWorksEntities"
  DefaultContainerName="AdventureWorksEntities" EnableDelete="True"
  EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"
  EntityTypeFilter="" OrderBy="it.TotalDue DESC" Select=""
   Where="it.OnlineOrderFlag = TRUE AND it.TotalDue &gt; @ordercost">
  <WhereParameters>
    <asp:ControlParameter ControlID="costLimit" DbType="Int32"
      DefaultValue="2500" Name="ordercost" PropertyName="Text" />
  </WhereParameters>
</asp:EntityDataSource>

```

 上面的 XML 示例等效于名为 `onlineOrders`的以下 <xref:System.Data.Objects.ObjectQuery%601>：

```
ObjectQuery<SalesOrderHeader> onlineOrders =
      context.SalesOrderHeader
       .Where("it.OnlineOrderFlag = TRUE AND it.TotalDue > @ordercost",
         new ObjectParameter("ordercost", orderCost))
        .OrderBy("it.TotalDue DESC");

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 ORDER BY 子句的参数的集合。</summary>
        <value>用于创建 ORDER BY 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true`时，控件将根据分配给 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 属性的 <xref:System.Web.UI.WebControls.ParameterCollection> 中的参数自动生成 ORDER BY 子句。 这样就无需显式地将 ORDER BY 子句分配到 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性。 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 属性中的 ORDER BY 子句的构造要求集合中参数的 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 属性标识从查询返回的项的单个属性。



## Examples
 下面的示例自动生成 ORDER BY 子句，并使用 `orderByDropDownList` 的值设置参数的值。

```
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"
    ConnectionString="name=AdventureWorksEntities"
    DefaultContainerName="AdventureWorksEntities" EnableDelete="True"
    EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"
    Where="it.OnlineOrderFlag = true" AutoGenerateOrderByClause="True">
    <OrderByParameters>
        <asp:ControlParameter Name="OrderByParameter"
            ControlID="orderByDropDownList" Type="String" />
    </OrderByParameters>
</asp:EntityDataSource>

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt; QueryCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.QueryCreatedEventArgs&gt; QueryCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.QueryCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCreated As EventHandler(Of QueryCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::Web::UI::WebControls::QueryCreatedEventArgs ^&gt; ^ QueryCreated;" />
      <MemberSignature Language="F#" Value="member this.QueryCreated : EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt; " Usage="member this.QueryCreated : System.EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IQueryableDataSource.QueryCreated</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.QueryCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出现在 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 创建配置 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件过程中指定的 Entity SQL 之后。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 有关详细信息，请参阅[将 LINQ 查询应用于 EntityDataSource](https://msdn.microsoft.com/library/cb70db56-9f9d-4b79-98fe-f03dd5ad1e38)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="entityDataSource.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存 <see cref="T:System.Web.UI.WebControls.EntityDataSource" /> 控件中需要保留的属性的状态。</summary>
        <returns>包含状态信息的 <see cref="T:System.Object" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置投影，该投影定义要包括在查询结果中的属性。</summary>
        <value>用于创建 ORDER BY 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性包含一个字符串，该字符串表示实体 SQL 查询的[SELECT](/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql)语句。 这使您可以从查询返回的对象投影指定的属性集。

 此字符串将未经修改传递到 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]执行的 <xref:System.Data.Objects.ObjectQuery%601>。 此查询是受 <xref:System.Web.UI.WebControls.EntityDataSource> 控件控制的数据源。 提供给 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性的字符串使用与传递到 <xref:System.Data.Objects.ObjectQuery%601>的 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 方法的字符串相同的格式。 有关如何使用[SELECT](/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql)子句定义查询投影的示例，请参阅[如何：执行返回匿名类型对象的查询](https://msdn.microsoft.com/library/3b264025-e911-4d73-90ce-992d2b9d189d)。

 预计的数据不支持更新。 这意味着，当你使用 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性指定投影时，绑定的数据绑定不支持更新。

 当定义启用了分页的投影时，必须定义用于对结果进行排序的属性。 这意味着，当你将 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性设置为定义投影并将 <xref:System.Web.UI.WebControls.EntityDataSource.AutoPage%2A> 设置为 `true`时，还必须将 <xref:System.Web.UI.WebControls.EntityDataSource.OrderBy%2A> 属性设置为定义顺序，或将 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateOrderByClause%2A> 属性设置为 `true` 并向 <xref:System.Web.UI.WebControls.EntityDataSource.OrderByParameters%2A> 集合添加 ORDER BY 参数。

 如果启用 <xref:System.Web.UI.WebControls.EntityDataSource.EnableUpdate%2A>、<xref:System.Web.UI.WebControls.EntityDataSource.EnableDelete%2A>或 <xref:System.Web.UI.WebControls.EntityDataSource.EnableInsert%2A>，则无法设置 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A>。

 如果 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 设置为返回属性投影的查询（例如，`SELECT p.ProductID, p. Name FROM AdventureWorksEntities.Products AS p`），则将返回 <xref:System.Data.Common.DbDataRecord>。



## Examples
 下面的 XML 标记使用 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性指定具有该产品类型的六个属性的投影：

```
<asp:EntityDataSource ID="ProductDataSource" runat="server"
    ConnectionString="name=AdventureWorksEntities"
    DefaultContainerName="AdventureWorksEntities"
    EntitySetName="Product" OrderBy="it.[ProductID]"
    Select="it.[ProductID], it.[Name], it.[ListPrice],
    it.[Size], it.[Style], it.[Weight]">
</asp:EntityDataSource>

```

 上面的 XML 示例与名为 `products`的以下 <xref:System.Data.Objects.ObjectQuery%601> 相同：

```
ObjectQuery<Product> products = context.Product
    .Select(it.[ProductID], it.[Name], it.[ListPrice],
      it.[Size], it.[Style], it.[Weight])
    .OrderBy("it.[ProductID]");

```

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当 <see cref="P:System.Web.UI.WebControls.EntityDataSource.Select" /> 属性指定了查询投影且 <see cref="P:System.Web.UI.WebControls.EntityDataSource.EnableUpdate" />、<see cref="P:System.Web.UI.WebControls.EntityDataSource.EnableDelete" /> 或 <see cref="P:System.Web.UI.WebControls.EntityDataSource.EnableInsert" /> 的值为 <see langword="true" /> 时。</exception>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of EntityDataSourceSelectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceSelectedEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在执行查询之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 执行查询并返回数据后，将引发 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 事件。 如果在查询准备或执行过程中出现错误，也会引发此错误。

 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.Results%2A> 属性包含从查询返回的对象的 <xref:System.Collections.IEnumerable>。 处理 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 事件以便在 <xref:System.Web.UI.Control.ViewState%2A>中检索和存储返回的实体。 执行此操作可在页面上保留对象更改。

 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.TotalRowCount%2A> 属性显示所有页面中对象的总数，而与数据绑定控件传递的用于分页的值无关。 仅当数据绑定控件需要时才检索 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.TotalRowCount%2A>，例如启用分页。

 如果在准备或执行查询时出现错误，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 事件，<xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.Exception%2A> 属性设置为返回的 <xref:System.Exception>，<xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.Results%2A> 属性设置为 `null`。 如果处理 <xref:System.Web.UI.WebControls.EntityDataSource.Selected> 事件处理程序中的异常，请将 <xref:System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of EntityDataSourceSelectingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceSelectingEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在构建并执行查询之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在构造和执行查询前引发 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 事件。 处理 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 事件，以在构造和执行查询之前修改 <xref:System.Web.UI.WebControls.EntityDataSource> 的配置，或读取或更改数据绑定控件中的参数。

 将 <xref:System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `true` 取消查询。 当取消选择操作时，不会将任何数据返回到数据绑定控件。

 如果在数据绑定控件中将 `AllowPaging` 设置为 `true`，则 <xref:System.Web.UI.WebControls.EntityDataSource> 使用 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 对象的 <xref:System.Data.Objects.ObjectQuery%601> 和 <xref:System.Web.UI.DataSourceSelectArguments.StartRowIndex%2A> 属性的值，调用 <xref:System.Web.UI.DataSourceSelectArguments.MaximumRows%2A> 上的 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> 和 <xref:System.Web.UI.DataSourceSelectArguments> 查询生成器方法。

 如果在数据绑定控件中将 `AllowSorting` 设置为 `true`，则在处理 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 事件时，可以更改 <xref:System.Web.UI.DataSourceSelectArguments> 对象的 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>。 在引发 <xref:System.Web.UI.WebControls.EntityDataSource.Selecting> 事件之后，将应用在页标记中指定的任何其他查询运算符（如 WHERE 或 ORDER BY）。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建投影的参数的集合。</summary>
        <value>用于创建投影的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 与 <xref:System.Data.Objects.ObjectQuery%601> 类的 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 方法一样，可以将参数传递给 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性定义的投影。 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.SelectParameters%2A> 属性指定 <xref:System.Web.UI.WebControls.ParameterCollection>，其中包含要提供给查询的 SELECT 语句的参数。 <xref:System.Web.UI.WebControls.EntityDataSource.SelectParameters%2A> 属性使用命名参数来引用为 <xref:System.Web.UI.WebControls.EntityDataSource.Select%2A> 属性提供的字符串中指定的参数。

 如果未设置 <xref:System.Web.UI.WebControls.EntityDataSource.SelectParameters%2A> 属性，则不会进行参数替换。 SELECT 语句中以 "`@"` 符号`,` 为前缀的所有参数名称在 <xref:System.Web.UI.WebControls.ParameterCollection>中必须具有匹配的名称。 <xref:System.Web.UI.WebControls.ParameterCollection>中的参数不允许 Null 值。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示数据源中的数据是否存储在视图状态中，以确保数据在更新或删除之前不会由其他进程更改。</summary>
        <value>如果将值存储在视图状态中，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 若要在启用更新和删除操作时跟踪更改，<xref:System.Web.UI.WebControls.EntityDataSource> 控件必须存储 <xref:System.Web.UI.PageStatePersister.ControlState%2A>中加载对象的原始值的相关信息。 在视图状态中存储所需的信息将增加页面大小。 您可以通过将 <xref:System.Web.UI.WebControls.EntityDataSource.StoreOriginalValuesInViewState%2A> 属性设置为 `false`来禁用在视图状态中存储原始值。 如果这样做，则 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] 无法跟踪已更新对象中的并发。 有关详细信息，请参阅[更新数据（EntityDataSource）](https://msdn.microsoft.com/library/ca153eec-6817-4c1d-b262-efd6d35b0246)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IDynamicDataSource.Exception : EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " Usage="member this.System.Web.DynamicData.IDynamicDataSource.Exception : System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在分部方法中验证失败或引发异常时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 实现 <xref:System.Web.UI.WebControls.EntityDataSource.System%23Web%23DynamicData%23IDynamicDataSource%23Exception> 事件是为了与 ASP.NET 动态数据兼容。 此事件由 <xref:System.Web.DynamicData.IDynamicDataSource> 接口定义，由 <xref:System.Web.UI.WebControls.EntityDataSource>显式实现。 无法在标记中注册此事件的处理程序。 它只能在 <xref:System.Web.UI.WebControls.EntityDataSource> 实例被强制转换为 <xref:System.Web.DynamicData.IDynamicDataSource> 接口时使用。

 <xref:System.Web.UI.WebControls.EntityDataSource.System%23Web%23DynamicData%23IDynamicDataSource%23Exception> 事件提供返回 <xref:System.Exception>的 <xref:System.Web.DynamicData.DynamicValidatorEventArgs> 对象。 在以下情况下，可能会引发 <xref:System.Web.UI.WebControls.EntityDataSource.System%23Web%23DynamicData%23IDynamicDataSource%23Exception> 事件：

-   创建对象时。 这使得对象上的分部方法可以在属性设置的验证过程中引发异常。

-   在查询执行过程中发生异常时。

-   当执行任何插入、更新或删除操作的过程中发生异常时。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged">
      <MemberSignature Language="C#" Value="void IQueryableDataSource.RaiseViewChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.System#Web#UI#WebControls#IQueryableDataSource#RaiseViewChanged" />
      <MemberSignature Language="VB.NET" Value="Sub RaiseViewChanged () Implements IQueryableDataSource.RaiseViewChanged" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged() = System::Web::UI::WebControls::IQueryableDataSource::RaiseViewChanged;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged : unit -&gt; unit&#xA;override this.System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged : unit -&gt; unit" Usage="entityDataSource.System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知数据绑定控件，告知其参数对象已更改，并且数据绑定控件需要刷新。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.EntityDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="entityDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>导致跟踪服务器控件的视图状态的更改，以便这些更改可以存储到服务器控件的 <see cref="T:System.Web.UI.StateBag" /> 对象中。 通过 <see cref="P:System.Web.UI.Control.ViewState" /> 属性可访问此对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 有关详细信息，请参阅 <xref:System.Web.UI.Control.TrackViewState%2A>。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of EntityDataSourceChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangedEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将对象更改保留到数据源之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当修改的对象的更改保存到数据源或在应用更改时出错时，将引发 <xref:System.Web.UI.WebControls.EntityDataSource.Updated> 事件。 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Entity%2A> 属性用于访问修改后的对象。

 此对象的属性包含从数据源返回的值，包括任何服务器生成的值。

 如果在将更改保存到数据源时发生错误，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Updated> 事件，<xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.Exception%2A> 属性将设置为返回的 <xref:System.Exception>。 如果处理 <xref:System.Web.UI.WebControls.EntityDataSource.Updated> 事件处理程序中的异常，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangedEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在更新操作过程中使用的参数的集合。</summary>
        <value>在更新操作过程中使用的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对于面向 ASP.NET 4 或更早版本的 web 应用程序，属性值存储在视图状态中，并在回发之间自动维护。 对于面向 ASP.NET 4.5 的 web 应用程序，属性值不会存储在视图状态中，你必须为每个 HTTP 请求设置值。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.EntityDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of EntityDataSourceChangingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::EntityDataSourceChangingEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.EntityDataSourceChangingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将对象更改保留到数据源之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在将对象的属性更改保存到数据源之前，将引发 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 事件。 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 事件使你可以修改或验证对对象所做的更改、提供不同的对象或在保存更改之前取消操作。 可以从 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 属性访问修改后的对象。 如果提供不同的对象，则用户负责在 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Entity%2A> 属性中设置正确的实体类型。

 如果必须修改对象的 <xref:System.Data.Objects.ObjectStateEntry> 以设置并发控制的不同原始值，请处理 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 事件。 有关详细信息，请参阅[保存更改和管理并发](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738618(v=vs.100))。

 若要阻止更改被保留，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 "`true`"。

 如果在实例化对象或修改属性时发生错误，则会引发 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 事件，<xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs> 对象的 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.Exception%2A> 属性将设置为返回的 <xref:System.Exception>。

 处理 <xref:System.Web.UI.WebControls.EntityDataSource.Updating> 事件处理程序中的异常时，请将 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性设置为 "`true`"。 这会阻止再次引发异常。 如果为 <xref:System.Web.UI.WebControls.EntityDataSourceChangingEventArgs.ExceptionHandled%2A> 属性指定 `false` 的值，<xref:System.Web.UI.WebControls.EntityDataSource> 会重新引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.EntityDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定如何筛选查询结果的 Entity SQL 表达式。</summary>
        <value>WHERE 子句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性是一个字符串，该字符串表示作为实体 SQL 查询的谓词的[WHERE](/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql)子句。 此字符串将不经修改即可传递到 [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]执行的 <xref:System.Data.Objects.ObjectQuery%601>。 此查询是受 <xref:System.Web.UI.WebControls.EntityDataSource> 控件控制的数据源。 提供给 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性的字符串使用与传递到 <xref:System.Data.Objects.ObjectQuery%601>的 <xref:System.Data.Objects.ObjectQuery%601.Where%2A> 方法的字符串相同的格式。 有关如何使用[WHERE](/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql)子句筛选查询的示例，请参阅[如何：筛选数据](https://msdn.microsoft.com/library/776f8556-3350-4572-804a-b1513515c1b2)。

 若要通过使实体类型属性等于表达式来筛选查询结果，请参阅有关 <xref:System.Web.UI.WebControls.EntityDataSource.AutoGenerateWhereClause%2A> 属性的信息。



## Examples
 以下示例中的 XML 标记在 .aspx 文件中，从控件中检索值，并将其作为参数传递给 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性。

```
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"
  ConnectionString="name=AdventureWorksEntities"
  DefaultContainerName="AdventureWorksEntities" EnableDelete="True"
  EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"
  EntityTypeFilter="" OrderBy="it.TotalDue DESC" Select=""
   Where="it.OnlineOrderFlag = TRUE AND it.TotalDue &gt; @ordercost">
  <WhereParameters>
    <asp:ControlParameter ControlID="costLimit" DbType="Int32"
      DefaultValue="2500" Name="ordercost" PropertyName="Text" />
  </WhereParameters>
</asp:EntityDataSource>

```

 上面的 XML 示例与名为 `onlineOrders`的以下 <xref:System.Data.Objects.ObjectQuery%601> 相同：

```
ObjectQuery<SalesOrderHeader> onlineOrders =
      context.SalesOrderHeader
       .Where("it.OnlineOrderFlag = TRUE AND it.TotalDue > @ordercost",
         new ObjectParameter("ordercost", orderCost))
        .OrderBy("it.TotalDue DESC");
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.EntityDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.EntityDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于创建 WHERE 子句的参数的集合。</summary>
        <value>用于创建 WHERE 子句的参数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 与 <xref:System.Data.Objects.ObjectQuery%601> 类的 <xref:System.Data.Objects.ObjectQuery%601.Where%2A> 方法一样，可以将参数传递给分配给 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性的谓词。 <xref:System.Web.UI.WebControls.EntityDataSource> 控件的 <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 属性指定 <xref:System.Web.UI.WebControls.ParameterCollection>，其中包含要提供给查询的 WHERE 子句的参数。 <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 属性使用命名参数来引用为 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性提供的字符串中指定的参数。

 如果未设置 <xref:System.Web.UI.WebControls.EntityDataSource.WhereParameters%2A> 属性，则不会进行参数替换。 WHERE 子句中前面带有符号 "`@"` 的所有参数名称必须在 <xref:System.Web.UI.WebControls.ParameterCollection>中有匹配的名称。 <xref:System.Web.UI.WebControls.ParameterCollection>中的参数不允许 Null 值。



## Examples
 以下示例中的 XML 标记在 .aspx 文件中，从控件中检索值，并将其作为参数传递给 <xref:System.Web.UI.WebControls.EntityDataSource.Where%2A> 属性。

```
<asp:EntityDataSource ID="SalesOrderHeader" runat="server"
  ConnectionString="name=AdventureWorksEntities"
  DefaultContainerName="AdventureWorksEntities" EnableDelete="True"
  EnableInsert="True" EnableUpdate="True" EntitySetName="SalesOrderHeader"
  EntityTypeFilter="" OrderBy="it.TotalDue DESC" Select=""
   Where="it.OnlineOrderFlag = TRUE AND it.TotalDue &gt; @ordercost">
  <WhereParameters>
    <asp:ControlParameter ControlID="costLimit" DbType="Int32"
      DefaultValue="2500" Name="ordercost" PropertyName="Text" />
  </WhereParameters>
</asp:EntityDataSource>

```

 上面的 XML 示例与名为 `onlineOrders`的以下 <xref:System.Data.Objects.ObjectQuery%601> 相同：

```
ObjectQuery<SalesOrderHeader> onlineOrders =
      context.SalesOrderHeader
       .Where("it.OnlineOrderFlag = TRUE AND it.TotalDue > @ordercost",
         new ObjectParameter("ordercost", orderCost))
        .OrderBy("it.TotalDue DESC");

```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
