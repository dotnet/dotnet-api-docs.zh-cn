<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e6ed8a3aa0049ca84a9f578341580db532d9be2" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86657148" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("Transforming")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("Transforming")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("DataFile")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("DataFile")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.ParseChildren(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.ParseChildren(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.PersistChildren(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.PersistChildren(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示数据绑定控件的 XML 数据源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [简介](#introduction)  
  
-   [XML 数据源](#source_of_xml_data)  
  
-   [更新 XML 数据](#updating_xml_data)  
  
-   [指定 XSL 转换](#specifying_an_xsl_transformation)  
  
-   [使用 XPath 表达式进行筛选](#filtering_using_an_xpath_expression)  
  
-   [Caching](#caching)  
  
-   [其他功能](#additional_features)  
  
-   [数据视图对象](#data_view_object)  
  
-   [声明性语法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>简介  
 <xref:System.Web.UI.WebControls.XmlDataSource>控件是向数据绑定控件呈现 XML 数据的数据源控件。 <xref:System.Web.UI.WebControls.XmlDataSource>数据绑定控件可以使用该控件显示层次结构数据和表格数据。 <xref:System.Web.UI.WebControls.XmlDataSource>控件通常用于在只读方案中显示分层的 XML 数据。 由于 <xref:System.Web.UI.WebControls.XmlDataSource> 控件扩展了 <xref:System.Web.UI.HierarchicalDataSourceControl> 类，因此它适用于分层数据。 该 <xref:System.Web.UI.WebControls.XmlDataSource> 控件还实现了 <xref:System.Web.UI.IDataSource> 接口，并与表格或列表样式的数据一起使用。  
  
> [!NOTE]
>  出于安全目的， <xref:System.Web.UI.WebControls.XmlDataSource> 不会将任何控件属性都存储在视图状态中。 由于在技术上可能会对客户端上的视图状态的内容进行解码，因此，存储有关数据结构或其内容的敏感信息可能会向您显示信息泄露威胁。 请注意，如果需要将属性等信息存储 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 在视图状态中，则可以通过在指令上设置来启用加密来保护内容 <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> `@ Page` 。  
  
 页面开发人员使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件来显示使用数据绑定控件的 XML 数据。  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>XML 数据源  
 <xref:System.Web.UI.WebControls.XmlDataSource>通常会加载 xml 文件中的 xml 数据，该文件由属性指定 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 。 还可以使用属性，以字符串形式直接将 XML 数据存储在字符串形式中 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 。 如果要在数据绑定控件显示 XML 数据之前对其进行转换，则可以为转换 (XSL) 样式表提供可扩展样式表语言。 对于 XML 数据，通常从文件加载样式表，由 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 属性指示，但也可以使用属性直接将它存储在字符串形式中 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 。  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>更新 XML 数据  
 <xref:System.Web.UI.WebControls.XmlDataSource>控件通常用于只读数据方案，其中的数据绑定控件显示 XML 数据。 但是，也可以使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件编辑 XML 数据。 若要编辑 XML 数据，请调用 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 方法来检索 <xref:System.Xml.XmlDataDocument> 对象，该对象是 XML 数据的内存中表示形式。 您可以使用由和它所包含的对象公开的对象模型 <xref:System.Xml.XmlDataDocument> ， <xref:System.Xml.XmlNode> 也可以使用 XPath 筛选表达式来操作文档中的数据。 更改 XML 数据的内存中表示形式后，可以通过调用方法将其保存到磁盘 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 。  
  
 控件的编辑功能有一些限制 <xref:System.Web.UI.WebControls.XmlDataSource> ：  
  
-   必须从属性所指示的 XML 文件 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> （而不是在属性中指定的内联 xml）加载 xml 数据 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 。  
  
-   不能在或属性中指定 XSLT <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法不会按不同的请求处理并发保存操作。 如果有多个用户通过编辑 XML 文件 <xref:System.Web.UI.WebControls.XmlDataSource> ，则不能保证所有用户都使用相同的数据。 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>由于这些并发性问题，操作也可能会失败。  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>指定 XSL 转换  
 使用 XML 数据执行的常见操作是将其从一个 XML 数据集转换为另一个。 <xref:System.Web.UI.WebControls.XmlDataSource>控件支持具有和属性的 XML <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> ，这些属性用于指定要在将 xml 数据传递到数据绑定控件之前应用于 XML 数据的 XSL 样式表，以及 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 属性，使您能够在转换过程中提供 xsl 样式表要使用的动态 XSLT 样式表参数。 如果使用属性指定 XPath 筛选表达式，则在 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 进行转换之后应用。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>类使用不推荐使用的 <xref:System.Xml.Xsl.XslTransform> 类来执行 XSL 转换。 如果要使用在类不推荐使用后引入的样式表功能 <xref:System.Xml.Xsl.XslTransform> ，请使用类手动应用转换 <xref:System.Xml.Xsl.XslCompiledTransform> 。  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>使用 XPath 表达式进行筛选  
 默认情况下， <xref:System.Web.UI.WebControls.XmlDataSource> 控件加载由属性标识的 xml 文件中的所有 xml 数据 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> ，或在属性中找到内联 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> ，但你可以使用 XPath 表达式来筛选数据。 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性支持 XPath 语法筛选器，该筛选器在加载和转换 XML 数据后应用。  
  
<a name="caching"></a>   
## <a name="caching"></a>Caching  
 出于性能方面的考虑， <xref:System.Web.UI.WebControls.XmlDataSource> 默认情况下为控件启用了缓存。 每次请求页面时在服务器上打开和读取 XML 文件都可以降低应用程序的性能。 通过缓存，可以在 Web 服务器上的内存开销内降低服务器上的处理负载;在大多数情况下，这是一个很好的权衡。 <xref:System.Web.UI.WebControls.XmlDataSource>当 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为时，将自动缓存数据 `true` ，并将 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 属性设置为缓存在缓存失效之前存储数据的秒数。 您可以使用 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 进一步微调数据源控件的缓存行为。  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>其他功能  
 下表列出了控件支持的其他功能 <xref:System.Web.UI.WebControls.XmlDataSource> 。  
  
|功能|说明|  
|----------------|-----------------|  
|排序|控件不支持 <xref:System.Web.UI.WebControls.XmlDataSource> 。|  
|Filtering|<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性可用于使用适当的 XPath 表达式筛选 XML 数据。|  
|分页|控件不支持 <xref:System.Web.UI.WebControls.XmlDataSource> 。|  
|更新|通过 <xref:System.Xml.XmlDataDocument> 直接操作，然后调用方法来支持 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 。|  
|正在删除|通过 <xref:System.Xml.XmlDataDocument> 直接操作，然后调用方法来支持 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 。|  
|插入|通过 <xref:System.Xml.XmlDataDocument> 直接操作，然后调用方法来支持 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 。|  
|Caching|默认情况下启用， <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 属性设置为 0 (无限大) ， <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 属性设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 。|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>数据视图对象  
 由于 <xref:System.Web.UI.WebControls.XmlDataSource> 控件支持显示层次结构数据的数据绑定控件以及显示表格数据的控件，数据源控件支持其基础 XML 数据的多种类型的数据源视图对象。 <xref:System.Web.UI.WebControls.XmlDataSource>控件 <xref:System.Web.UI.WebControls.XmlDataSourceView> 在与显示表格数据的数据绑定控件一起使用时，将检索单个命名对象。 <xref:System.Web.UI.IDataSource.GetViewNames%2A>方法标识此单个命名视图。 当用于显示分层数据的数据绑定控件时， <xref:System.Web.UI.WebControls.XmlDataSource> 控件将 <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 为传递给方法的任何唯一分层路径检索。 <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与控件结合使用 <xref:System.Web.UI.WebControls.TreeView> 来显示示例 xml 文件中的 xml 数据。 第二个示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与模板化控件结合使用 <xref:System.Web.UI.WebControls.Repeater> 来显示 XML 数据。  
  
 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与控件结合使用 <xref:System.Web.UI.WebControls.TreeView> 来显示 XML 数据。 <xref:System.Web.UI.WebControls.XmlDataSource>从由属性标识的 xml 文件加载 xml 数据 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与模板化控件结合使用 <xref:System.Web.UI.WebControls.Repeater> 来显示 XML 数据。 <xref:System.Web.UI.WebControls.Repeater>控件使用 XPath 数据绑定表达式绑定到所表示的 XML 文档中的数据项 <xref:System.Web.UI.WebControls.XmlDataSource> 。 有关 `XPath` 和 `XPathSelect` 数据绑定语法的详细信息，请参阅 <xref:System.Web.UI.XPathBinder> 类。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据源控件检索到的数据的缓存时间长度（以秒为单位）。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件缓存数据检索操作结果的秒数。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>以下应用后，控件将自动缓存数据：  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性已设置为 `true`。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>属性被设置为大于0的值，它指示缓存在缓存失效之前存储数据的秒数。  
  
 对 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 属性或包含 XML 数据的文件的内容所做的任何更改都会导致缓存失效。  
  
 默认情况下， <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 属性设置为0，表示无限缓存，数据源将缓存数据，直到它所依赖的 XML 文件发生更改。  
  
 缓存的行为由持续时间和设置的组合来控制 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 。 如果 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> ，则 <xref:System.Web.UI.WebControls.XmlDataSource> 控件将缓存第一个数据检索操作上的数据，并将其保存在内存中的指定时间 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ，并在该时间过后使其无效。 然后，在下一操作时刷新缓存。 如果将 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> ，则数据源控件会在第一次数据检索操作中缓存数据，但会在每次后续操作时重置其保存缓存的时间范围。 只有 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 自上次检索数据后，缓存时间等于的时间不会过期。  
  
   
  
## Examples  
 下面的代码示例演示如何在使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件显示 XML 文件中包含的数据时启用缓存。 当 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为 `true` 并且将 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 设置为数据源控件缓存数据的秒数时，将启用缓存。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存过期策略，当它与缓存持续时间组合使用时，可以描述数据源控件所使用的缓存的缓存行为。</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值之一。 默认的缓存过期策略设置为 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 缓存的行为由和设置的组合来控制 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 。 如果 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> ，则将 <xref:System.Web.UI.WebControls.XmlDataSource> 在第一个数据检索操作上缓存数据，并在指定的时间内将其保存在内存中 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ，并在该时间过后使其无效。 然后，在下一操作时刷新缓存。 如果将 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 设置为 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> ，则数据源控件会在第一次数据检索操作中缓存数据，但会在每次后续操作时重置为其保存缓存的时间范围。 仅当 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 自上次检索数据后，不存在与相同时间的活动时，缓存才会过期。  
  
   
  
## Examples  
 下面的代码示例演示如何在使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件显示 XML 文件中包含的数据时启用缓存。 当 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为 `true` 并且将 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 设置为数据源控件缓存数据的秒数时，将启用缓存。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从视图状态获取或设置数据源控件的缓存键的值，或向视图状态添加缓存键。</summary>
        <value>缓存键的值，如果缓存键未处于视图状态中，则为空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> 属性可以为控件手动创建缓存键 <xref:System.Web.UI.WebControls.XmlDataSource> 。 仅当要将包含 XML 或 XSLT 数据的对象分配给控件，而不是指定包含数据的文件时，才需要这样做。 向控件分配数据时，数据不会用于生成缓存键。 如果计划更新数据对象，则必须手动生成唯一的缓存密钥。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户定义的键依赖项，该依赖项链接到数据源控件创建的所有数据缓存对象。 密钥过期后，所有的缓存对象都会显式过期。</summary>
        <value>标识 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件创建的所有缓存对象的键。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>控件支持数据缓存。 在缓存数据时，将 <xref:System.Web.UI.WebControls.XmlDataSource> 从缓存中检索数据，而不是从基础数据文件中检索数据。 缓存过期后，将从基础文件中检索数据并重新缓存数据。  
  
 您可以设置 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 属性，以创建由该控件创建的所有缓存项与该键之间的依赖关系 <xref:System.Web.UI.WebControls.XmlDataSource> 。 通过使密钥过期，你可以通过编程方式随时使所有缓存项失效。  
  
 由于用于创建的属性 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> ，如果多个 <xref:System.Web.UI.WebControls.XmlDataSource> 控件从相同的 XML 文件和转换文件加载相同的数据并将其设置为相同的，则可能会在这些情况下使用相同的 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 缓存 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据源控件绑定到的 XML 数据块。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件绑定到的内联 XML 数据字符串。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在声明性方案中， <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 属性被指定为对象的多行内部属性 <xref:System.Web.UI.WebControls.XmlDataSource> 。 内部属性可与 XML 数据兼容，因为它使您能够以任何方式设置 XML 数据的格式并忽略字符填充问题，例如填充引号字符。  
  
 如果同时 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 设置了和 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 属性，则 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 属性优先，并使用 xml 文件中的数据而不是属性中指定的 xml 数据 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 。  
  
 如果更改属性的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> <xref:System.Web.UI.IDataSource.DataSourceChanged> 会引发事件。 如果已启用缓存并更改的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 缓存会失效。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件显示具有控件的属性所包含的内联 XML 数据 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> <xref:System.Web.UI.WebControls.TreeView> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">正在加载文档。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定绑定数据源的 XML 文件的文件名。</summary>
        <value>XML 文件的绝对物理路径或相对路径，该 XML 文件包含该 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件表示的数据。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果同时 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 设置了和 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 属性，则 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 属性优先，并使用 xml 文件中的数据而不是属性中指定的 xml 数据 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 。  
  
 如果更改属性的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> <xref:System.Web.UI.IDataSource.DataSourceChanged> 会引发事件。 如果已启用缓存并更改的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 缓存会失效。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件来显示包含在控件中的包含在文件中的 XML 数据 <xref:System.Web.UI.WebControls.TreeView> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">正在加载文档。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件是否启用数据缓存。</summary>
        <value>如果为数据源控件启用数据缓存，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>当 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为时，控件将自动缓存数据 `true` 。 默认情况下， <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 属性设置为0，表示无限缓存，数据源将缓存数据，直到它所依赖的 XML 文件发生更改。 如果将属性设置 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 为大于0的值，则缓存会在检索新集之前存储该数秒的数据。  
  
 如果将 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为 `true` 并 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 设置属性，则在转换参数列表中的参数更改时，缓存条目不会自动失效。 在这种情况下，必须通过设置属性来编写代码来使缓存失效 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 。  
  
   
  
## Examples  
 下面的代码示例演示如何在使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件显示 XML 文件中包含的数据时启用缓存。 当 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为 `true` 并且将 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 设置为数据源控件缓存数据的秒数时，将启用缓存。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">标识生成当前分层视图的节点的 XPath 表达式。</param>
        <summary>获取 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件的数据源视图对象。 <paramref name="viewPath" /> 参数可以是 XPath 表达式。</summary>
        <returns>返回一个表示数据单一视图的 <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> 对象，该数据从 <paramref name="viewPath" /> 标识的数据节点开始。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以调用 <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> 方法来检索 <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 与控件关联的对象 <xref:System.Web.UI.WebControls.XmlDataSource> 。 如果指定 `viewPath` 值，则 <xref:System.Web.UI.WebControls.XmlDataSource> 控件返回一个数据源视图对象，该对象表示由标识的节点上的视图及其 `viewPath` 所有子节点。 如果将设置 `viewPath` 为 <xref:System.String.Empty?displayProperty=nameWithType> ，则 <xref:System.Web.UI.WebControls.XmlDataSource> 控件将检查 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 属性，以确定从中生成数据源视图的根节点。 如果 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 设置了属性，则 <xref:System.Web.UI.WebControls.XmlDataSource> 控件将使用它来返回数据源视图，其方式与使用表达式的方式相同 `viewPath` 。 如果 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 未设置该属性，则 <xref:System.Web.UI.WebControls.XmlDataSource> 控件会返回 XML 数据中所有数据节点的视图。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>直接从基础数据存储区中或从缓存中将 XML 数据加载到内存中，然后以 <see cref="T:System.Xml.XmlDataDocument" /> 对象的形式将其返回。</summary>
        <returns>一个 <see cref="T:System.Xml.XmlDataDocument" /> 对象，表示通过应用任意的转换和 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 查询，在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性中指定的 XML 或在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> 属性标识的文件中指定的 XML。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 方法可直接访问基础 XML 数据的内存中表示形式。  
  
 你可以操作返回的 <xref:System.Xml.XmlDataDocument> 对象，然后调用 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 以将更改保存到由属性指定的 XML 文件 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 。 必须先满足若干要求，然后才能 <xref:System.Xml.XmlDataDocument> 成功保存对象。 有关更多信息，请参见 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 方法。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与控件一起使用， <xref:System.Web.UI.WebControls.TreeView> 以显示和编辑 xml 文件中包含的 xml 数据。 第二个示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与模板化控件结合使用 <xref:System.Web.UI.WebControls.Repeater> ，以显示和编辑 xml 文件中包含的 xml 数据。  
  
 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与控件一起使用， <xref:System.Web.UI.WebControls.TreeView> 以显示和编辑 xml 文件中包含的 xml 数据。 每次选择节点时，都会使用方法在内存中处理数据 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> <xref:System.Web.UI.WebControls.TreeView> ，然后将其保存到 XML 文件中。 最后， <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 在控件上调用 <xref:System.Web.UI.WebControls.TreeView> 以刷新它所显示的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与模板化控件结合使用 <xref:System.Web.UI.WebControls.Repeater> ，以显示和编辑 xml 文件中包含的 xml 数据。 与前面的示例一样，使用方法检索到的数据在内存中进行操作 <xref:System.Xml.XmlDataDocument> <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 。 最后， <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 在控件上调用 <xref:System.Web.UI.WebControls.TreeView> 以刷新它所显示的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 代码示例中的 XML 文件包含以下数据：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">为 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指定了 URL，但 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件不具有访问 Web 资源的正确权限。</exception>
        <exception cref="T:System.NotSupportedException">为 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指定了 URL，但它不是基于 HTTP 的 URL。  
  
-或- 
使用 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件前，设计器未正确映射设计时相对路径。  
  
-或- 
已启用缓存和客户端模拟。 启用客户端模拟后，<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件不支持缓存。</exception>
        <exception cref="T:System.Web.HttpException">拒绝访问为 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指定的路径。</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> 事件后，<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件将对 XML 数据执行 XSLT 转换。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何使用控件 <xref:System.Web.UI.WebControls.XmlDataSource> 和 <xref:System.Web.UI.WebControls.TreeView> 控件来显示转换后的 XML 数据。 使用属性指示的样式表执行 XML 转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 。 此外，样式表使用在运行时传递给对象中的数据源控件的转换自变量 <xref:System.Xml.Xsl.XsltArgumentList> 。 此代码示例演示如何 <xref:System.Xml.Xsl.XsltArgumentList> 通过 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 使用自定义事件处理程序（由方法为方法设置的名称标识）来处理事件，从而将对象传递到数据源控件 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 使用以下样式表执行 XML 转换。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> 在派生类中重写时，请确保调用 <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> 基类的方法，以便注册的委托接收事件。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果设置了 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 属性，则使用 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 控件将当前保留在内存中的 XML 数据保存到磁盘中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管 <xref:System.Web.UI.WebControls.XmlDataSource> 控件通常用于只读的数据绑定方案，但您可以使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件编辑基础 xml 数据文件中的 xml 数据。 在这些情况下，由控件从 XML 文件加载 XML 数据 <xref:System.Web.UI.WebControls.XmlDataSource> 。 <xref:System.Xml.XmlDataDocument>使用方法修改内存中的 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> ，然后通过调用方法将保存到 XML 数据文件 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 。 当满足以下条件时，可以编辑 XML 方案：  
  
-   XML 数据由属性指示的 XML 文件进行加载 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> ，而不是从属性中指定的内联 XML 数据加载 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 。  
  
-   未在或属性中指定 XSLT <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 。  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法不会按不同的请求处理并发保存操作。 如果有多个用户通过控件编辑 XML 文件 <xref:System.Web.UI.WebControls.XmlDataSource> ，则不能保证所有用户都使用相同的数据。 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>由于这些并发性问题，操作也可能会失败。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个代码示例演示如何使用控件和 <xref:System.Web.UI.WebControls.XmlDataSource> <xref:System.Web.UI.WebControls.TreeView> 控件来显示和编辑 xml 文件中包含的 xml 数据。 第二个代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与模板化控件结合使用 <xref:System.Web.UI.WebControls.Repeater> ，以显示和编辑 xml 文件中包含的 xml 数据。  
  
 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与控件一起使用， <xref:System.Web.UI.WebControls.TreeView> 以显示和编辑 xml 文件中包含的 xml 数据。 每次选择节点时，都会使用方法在内存中处理数据 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> <xref:System.Web.UI.WebControls.TreeView> ，然后将其保存到 XML 文件中。 最后， <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 在控件上调用 <xref:System.Web.UI.WebControls.TreeView> 以刷新它所显示的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 下面的代码示例演示如何将 <xref:System.Web.UI.WebControls.XmlDataSource> 控件与模板化控件结合使用 <xref:System.Web.UI.WebControls.Repeater> ，以显示和编辑 xml 文件中包含的 xml 数据。 与前面的示例一样，使用 <xref:System.Xml.XmlDataDocument> 由方法检索到的对象在内存中处理数据 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 。 最后， <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 在控件上调用 <xref:System.Web.UI.WebControls.TreeView> 以刷新它所显示的数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 代码示例中的 XML 文件包含以下数据：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML 数据是使用 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 属性而非 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性加载的。  
  
-或- 
为 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指定了 URL，但 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件不具有访问 Web 资源的正确权限。</exception>
        <exception cref="T:System.NotSupportedException">为 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指定了 URL，但它不是基于 HTTP 的 URL。  
  
-或- 
使用 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件前，设计器未正确映射设计时相对路径。</exception>
        <exception cref="T:System.Web.HttpException">拒绝访问为 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指定的路径。</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
        <value>如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.XmlDataSource> 实例被强制转换为接口时使用 <xref:System.ComponentModel.IListSource> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="xmlDataSource.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
        <returns>实现可绑定到数据源的 <see cref="T:System.Collections.IList" /> 的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.XmlDataSource> 实例被强制转换为接口时使用 <xref:System.ComponentModel.IListSource> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberSignature Language="F#" Value="member this.System.Web.UI.IDataSource.DataSourceChanged : EventHandler " Usage="member this.System.Web.UI.IDataSource.DataSourceChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.XmlDataSource> 实例被强制转换为接口时使用 <xref:System.Web.UI.IDataSource> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IDataSource.GetView : string -&gt; System.Web.UI.DataSourceView&#xA;override this.System.Web.UI.IDataSource.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="xmlDataSource.System.Web.UI.IDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要检索的视图的名称。 如果指定了 <see cref="F:System.String.Empty" />，将检索 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件的默认视图。</param>
        <summary>获取与数据源控件关联的指定数据源视图。</summary>
        <returns>返回与 <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> 控件关联的命名 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 对象。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.UI.IDataSource.GetViewNames : unit -&gt; System.Collections.ICollection&#xA;override this.System.Web.UI.IDataSource.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="xmlDataSource.System.Web.UI.IDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.Web.UI.IDataSource.GetViewNames" />。</summary>
        <returns>实现 <see cref="T:System.Collections.ICollection" /> 的对象，该集合中包含表示与 <see cref="T:System.Web.UI.IDataSource" /> 对象关联的视图对象列表的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Web.UI.WebControls.XmlDataSource> 实例被强制转换为接口时使用 <xref:System.Web.UI.IDataSource> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可扩展样式表语言 (XSL) 数据块，该数据块定义要对 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件管理的 XML 数据执行的 XSLT 转换。</summary>
        <value>内联 XSL 字符串，定义将在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性所包含的数据中执行的 XML 转换。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在声明性方案中， <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 属性被指定为对象的多行内部属性 <xref:System.Web.UI.WebControls.XmlDataSource> 。 内部属性与 XSL 样式表数据兼容，因为它允许您以任何方式设置样式表的格式，并忽略字符填充问题，例如填充引号字符。  
  
 如果同时 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 设置了和 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 属性，则 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 属性优先，并使用 xsl 样式表文件 ( xsl) ，而不是在属性中指定的样式表元素 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 。 如果 XPath 表达式是使用属性设置的 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> ，则在转换 XML 数据后应用。  
  
 如果更改属性的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> <xref:System.Web.UI.IDataSource.DataSourceChanged> 会引发事件。 如果已启用缓存并更改的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 缓存会失效。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>类使用不推荐使用的 <xref:System.Xml.Xsl.XslTransform> 类来执行 XSL 转换。 如果要使用在类不推荐使用后引入的样式表功能 <xref:System.Xml.Xsl.XslTransform> ，请使用类手动应用转换 <xref:System.Xml.Xsl.XslCompiledTransform> 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.XmlDataSource> 带有模板化控件的控件 <xref:System.Web.UI.WebControls.Repeater> 显示转换后的 XML 数据。 执行转换的样式表由 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 数据源控件的属性内联定义。  
  
  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">正在加载文档。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> 或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> 属性定义的样式表中使用（用来对 XML 数据执行转换）的 XSLT 参数的列表。</summary>
        <value>一个 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 对象，包含 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件加载 XML 数据时将应用于 XML 数据的 XSLT 参数和对象。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 引发事件时设置属性 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> ，以确保在将 xslt 转换应用于 XML 数据时，xslt 参数可用。  
  
 如果将 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 属性设置为 `true` 并 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 设置属性，则在转换参数列表中的参数更改时，缓存条目不会自动失效。 在这种情况下，必须通过设置属性来编写代码来使缓存失效 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.XmlDataSource> 带有控件的来 <xref:System.Web.UI.WebControls.TreeView> 显示转换后的 XML 数据。 使用属性指示的样式表执行 XML 转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 。 此外，样式表使用在运行时传递给对象中的数据源控件的转换自变量 <xref:System.Xml.Xsl.XsltArgumentList> 。 此代码示例演示如何 <xref:System.Xml.Xsl.XsltArgumentList> 通过 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 使用自定义事件处理程序来处理事件，将传递到数据源控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 数据的转换通过以下样式表来执行。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可扩展样式表语言 (XSL) 文件 (.xsl) 的文件名，该文件定义要对 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控件管理的 XML 数据执行的 XSLT 转换。</summary>
        <value>XSL 样式表文件的绝对物理路径或相对路径，该样式表文件定义将在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性所包含的数据中执行的 XML 转换。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果同时 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 设置了和 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 属性，则 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 属性优先，并使用 xsl 样式表文件 ( xsl) ，而不是在属性中指定的样式表元素 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 。 如果 XPath 表达式是使用属性设置的 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> ，则在转换 XML 数据后应用。  
  
 如果更改属性的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> <xref:System.Web.UI.IDataSource.DataSourceChanged> 会引发事件。 如果已启用缓存并更改的值，则 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 缓存会失效。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>类使用不推荐使用的 <xref:System.Xml.Xsl.XslTransform> 类来执行 XSL 转换。 如果要使用在类不推荐使用后引入的样式表功能 <xref:System.Xml.Xsl.XslTransform> ，请使用类手动应用转换 <xref:System.Xml.Xsl.XslCompiledTransform> 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.XmlDataSource> 控件和 <xref:System.Web.UI.WebControls.TreeView> 控件在 Web 窗体上显示转换后的 XML 数据。 使用属性指示的样式表执行转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 。 您可以选择使用提供样式表的转换参数 <xref:System.Xml.Xsl.XsltArgumentList> 。 有关更多信息，请参见 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 属性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 执行 XML 转换的 XSL 样式表具有以下结构：  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">正在加载文档。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>将由 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> 属性定义或由 <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> 属性标识的样式表应用到 XML 数据前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 事件，以便在 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> <xref:System.Xml.Xsl.XsltArgumentList> <xref:System.Web.UI.WebControls.XmlDataSource> 控件执行 XML 转换之前使用对象来设置属性。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用控件 <xref:System.Web.UI.WebControls.XmlDataSource> 和 <xref:System.Web.UI.WebControls.TreeView> 控件来显示转换后的 XML 数据。 使用属性指示的样式表执行 XML 转换 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 。 此外，样式表在运行时使用传递到数据源控件的转换自变量 <xref:System.Xml.Xsl.XsltArgumentList> 。 此代码示例演示如何 <xref:System.Xml.Xsl.XsltArgumentList> 通过 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 使用自定义事件处理程序处理事件，将对象传递到数据源控件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 数据的转换是通过以下样式表执行的：  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定 XPath 表达式，该表达式将应用于 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 属性所包含的 XML 数据或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指示的 XML 文件所包含的 XML 数据。</summary>
        <value>表示 XPath 表达式的字符串，该表达式可用于筛选 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 属性所包含的数据或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 属性指示的 XML 文件所包含的数据。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 XPath 数据绑定表达式的详细信息，请参阅将 [表格控件绑定到 XmlDataSource 控件](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Web.UI.WebControls.XmlDataSource> 带有模板化控件的控件 <xref:System.Web.UI.WebControls.Repeater> 显示已使用 XPath 表达式筛选的 XML 数据。 在此示例中，使用 XPath 语法来筛选 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 数据源控件的属性，同时将控件模板的元素绑定 <xref:System.Web.UI.WebControls.Repeater> 到 xml 数据。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 此代码示例中的 XML 文件包含以下数据：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">正在加载文档。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
