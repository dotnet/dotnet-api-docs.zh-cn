<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a78551eb4cb19892d1cdd8b4bd89e76404e77f41" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86612168" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceUpdateEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="65064-101">为 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> 事件提供数据。</span><span class="sxs-lookup"><span data-stu-id="65064-101">Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65064-102"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>对象将传递到事件的任何事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-102">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-103"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>在数据源中执行更新操作之前，可以使用对象来检查数据。</span><span class="sxs-lookup"><span data-stu-id="65064-103">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source.</span></span> <span data-ttu-id="65064-104">然后，您可以对数据进行验证，检查数据类引发的验证异常，或在更新之前更改值。</span><span class="sxs-lookup"><span data-stu-id="65064-104">You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update.</span></span> <span data-ttu-id="65064-105">您还可以取消更新操作。</span><span class="sxs-lookup"><span data-stu-id="65064-105">You can also cancel the update operation.</span></span>  
  
 <span data-ttu-id="65064-106"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>对象包含最初从数据源检索的数据。</span><span class="sxs-lookup"><span data-stu-id="65064-106">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source.</span></span> <span data-ttu-id="65064-107"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>对象包含在更新操作期间将保存在数据源中的数据。</span><span class="sxs-lookup"><span data-stu-id="65064-107">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.</span></span>  
  
 <span data-ttu-id="65064-108">如果表示数据源的对象在更新数据之前引发验证异常，则该属性将 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 包含类的实例 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 。</span><span class="sxs-lookup"><span data-stu-id="65064-108">If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span> <span data-ttu-id="65064-109">您可以通过属性检索所有验证异常 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 。</span><span class="sxs-lookup"><span data-stu-id="65064-109">You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span> <span data-ttu-id="65064-110">如果未引发验证异常，则 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 属性将包含 `null` 。</span><span class="sxs-lookup"><span data-stu-id="65064-110">If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`.</span></span> <span data-ttu-id="65064-111">如果处理验证异常并且不希望重新引发异常，请将 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="65064-111">If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="65064-112">默认情况下，该 <xref:System.Web.UI.WebControls.LinqDataSource> 控件将数据源中的原始值存储在网页上的视图状态中，只不过其 <xref:System.Data.Linq.Mapping.ColumnAttribute> 特性被标记为 `UpdateCheck.Never` 。</span><span class="sxs-lookup"><span data-stu-id="65064-112">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`.</span></span> <span data-ttu-id="65064-113">LINQ to SQL 会在更新数据之前自动检查数据的完整性。</span><span class="sxs-lookup"><span data-stu-id="65064-113">LINQ to SQL automatically checks the integrity of the data before updating the data.</span></span> <span data-ttu-id="65064-114">它通过将数据源中的当前值与存储在视图状态中的原始值进行比较来实现此功能。</span><span class="sxs-lookup"><span data-stu-id="65064-114">It does this by comparing the current values in the data source with the original values stored in view state.</span></span> <span data-ttu-id="65064-115">如果数据源中的值已更改，LINQ to SQL 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="65064-115">LINQ to SQL raises an exception if the values in the data source have changed.</span></span> <span data-ttu-id="65064-116">您可以通过为事件创建处理程序来执行其他数据验证 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-116">You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65064-117">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-117">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-118">该示例演示如何对属性和属性的属性进行比较， <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 以确定属性中的值是否已 `Category` 更改。</span><span class="sxs-lookup"><span data-stu-id="65064-118">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="65064-119">如果是这样，则 `CategoryChanged` 属性中对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="65064-119">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="65064-120">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-120">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-121">它通过使用控件显示任何验证异常消息 <xref:System.Web.UI.WebControls.Label> 。</span><span class="sxs-lookup"><span data-stu-id="65064-121">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/sql/linq/"><span data-ttu-id="65064-122">LINQ to SQL</span><span class="sxs-lookup"><span data-stu-id="65064-122">LINQ to SQL</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="65064-123">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="65064-123">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="65064-124">在验证要更新的数据时发生的异常。</span><span class="sxs-lookup"><span data-stu-id="65064-124">The exception that occurred when validating the data to update.</span></span></param>
        <summary><span data-ttu-id="65064-125">使用指定的异常初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="65064-125">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class with the specified exception.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : obj * obj -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs (originalObject, newObject)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject"><span data-ttu-id="65064-126">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含从数据源检索的初始值。</span><span class="sxs-lookup"><span data-stu-id="65064-126">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the initial values that were retrieved from the data source.</span></span></param>
        <param name="newObject"><span data-ttu-id="65064-127">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含将保存在数据源中的值。</span><span class="sxs-lookup"><span data-stu-id="65064-127">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the values that will be saved in the data source.</span></span></param>
        <summary><span data-ttu-id="65064-128">初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="65064-128">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65064-129">获取在执行更新操作之前验证数据时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="65064-129">Gets the exception that was thrown while the data was being validated before the update operation.</span></span></summary>
        <value><span data-ttu-id="65064-130">如果发生错误，则为该异常；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="65064-130">The exception, if an error occurred; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65064-131">如果在执行更新操作之前引发验证异常，则该异常将存储在 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 属性中。</span><span class="sxs-lookup"><span data-stu-id="65064-131">If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span> <span data-ttu-id="65064-132">在事件的事件处理程序中 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> ，可以通过属性检索异常 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 。</span><span class="sxs-lookup"><span data-stu-id="65064-132">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65064-133">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-133">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-134">它通过使用控件显示任何验证异常消息 <xref:System.Web.UI.WebControls.Label> 。</span><span class="sxs-lookup"><span data-stu-id="65064-134">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65064-135">获取或设置一个值，该值指示异常是否已得到处理而不该再次引发。</span><span class="sxs-lookup"><span data-stu-id="65064-135">Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.</span></span></summary>
        <value><span data-ttu-id="65064-136">如果异常已得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="65064-136"><see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65064-137">可以为事件创建事件处理程序， <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 以检查在更新操作之前发生的验证异常。</span><span class="sxs-lookup"><span data-stu-id="65064-137">You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation.</span></span> <span data-ttu-id="65064-138">如果处理异常，而不希望再次引发异常，则将 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="65064-138">If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span> <span data-ttu-id="65064-139">如果未将 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> 属性设置为，则 `true` 异常将传播到调用堆栈中的下一个事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="65064-139">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65064-140">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-140">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-141">它通过使用控件显示任何验证异常消息 <xref:System.Web.UI.WebControls.Label> 。</span><span class="sxs-lookup"><span data-stu-id="65064-141">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65064-142">获取包含将保存在数据源中的值的对象。</span><span class="sxs-lookup"><span data-stu-id="65064-142">Gets the object that contains the values that will be saved in the data source.</span></span></summary>
        <value><span data-ttu-id="65064-143">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含要保存的值。</span><span class="sxs-lookup"><span data-stu-id="65064-143">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data to save.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65064-144">为事件创建事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> ，并检索 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 属性以验证数据。</span><span class="sxs-lookup"><span data-stu-id="65064-144">Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data.</span></span> <span data-ttu-id="65064-145">你还可以更改数据或取消更新操作。</span><span class="sxs-lookup"><span data-stu-id="65064-145">You can also change the data or cancel the update operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65064-146">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-146">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-147">该示例演示如何对属性和属性的属性进行比较， <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 以确定属性中的值是否已 `Category` 更改。</span><span class="sxs-lookup"><span data-stu-id="65064-147">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="65064-148">如果是这样，则 `CategoryChanged` 属性中对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="65064-148">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="65064-149">获取包含最初从数据源检索的值的对象。</span><span class="sxs-lookup"><span data-stu-id="65064-149">Gets the object that contains the values that were originally retrieved from the data source.</span></span></summary>
        <value><span data-ttu-id="65064-150">具有 <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> 属性中指定类型的对象，该对象包含从数据源检索的数据。</span><span class="sxs-lookup"><span data-stu-id="65064-150">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data that was retrieved from the data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65064-151">您可以使用 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 属性来根据数据源中的当前值检查原始值并取消更新操作或执行其他操作。</span><span class="sxs-lookup"><span data-stu-id="65064-151">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.</span></span>  
  
 <span data-ttu-id="65064-152"><xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>属性仅包含在网页中的视图状态中保留的属性的值。</span><span class="sxs-lookup"><span data-stu-id="65064-152">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page.</span></span> <span data-ttu-id="65064-153">在这些情况下，属性将持久保存：</span><span class="sxs-lookup"><span data-stu-id="65064-153">A property is persisted under these circumstances:</span></span>  
  
-   <span data-ttu-id="65064-154">在数据绑定控件中显示时。</span><span class="sxs-lookup"><span data-stu-id="65064-154">When it is displayed in a data-bound control.</span></span>  
  
-   <span data-ttu-id="65064-155">当 <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> 特性的属性 <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> 设置为或时 `Always` `WhenChanged` 。</span><span class="sxs-lookup"><span data-stu-id="65064-155">When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribute is set to `Always` or `WhenChanged`.</span></span>  
  
 <span data-ttu-id="65064-156">如果将 <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> 属性设置为 `Never` ，并且未在数据绑定控件中显示该值，则不会将该值存储在网页中。</span><span class="sxs-lookup"><span data-stu-id="65064-156">If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page.</span></span> <span data-ttu-id="65064-157">在这种情况下，不能将其分配给 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="65064-157">In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65064-158">下面的示例演示事件的事件处理程序 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 。</span><span class="sxs-lookup"><span data-stu-id="65064-158">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="65064-159">该示例演示如何对属性和属性的属性进行比较， <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 以确定属性中的值是否已 `Category` 更改。</span><span class="sxs-lookup"><span data-stu-id="65064-159">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="65064-160">如果是这样，则 `CategoryChanged` 属性中对象的属性 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="65064-160">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
