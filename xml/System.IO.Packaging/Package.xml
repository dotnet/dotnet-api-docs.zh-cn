<Type Name="Package" FullName="System.IO.Packaging.Package">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a6a26e84e9c328883a5dd9e7115797b94a5ef7c" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83911601" /></Metadata><TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Package&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Package abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type Package = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.IO.Packaging" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.5.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示一个可以存储多个数据对象的容器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> 是一种抽象类，可用于将对象组织成定义的物理格式的单个实体，以实现可移植性和高效访问。  
  
 ZIP 文件是 <xref:System.IO.Packaging.Package>的主要物理格式。  其他 <xref:System.IO.Packaging.Package> 实现可能使用其他物理格式，如 XML 文档、数据库或 Web 服务。  
  
 与文件系统类似，<xref:System.IO.Packaging.Package> 中包含的项在文件夹和文件的层次结构中进行引用。  
  
 尽管 <xref:System.IO.Packaging.Package> 本身是抽象类，但 <xref:System.IO.Packaging.Package.Open%2A> 方法使用 <xref:System.IO.Packaging.ZipPackage> 派生类作为默认值。  
  
 <xref:System.IO.Packaging.PackagePart> （"part"）是表示存储在 <xref:System.IO.Packaging.Package>中的对象的抽象类。  
  
 <xref:System.IO.Packaging.PackageRelationship> （"关系"）定义源 <xref:System.IO.Packaging.Package> 或 <xref:System.IO.Packaging.PackagePart> 与目标对象之间的关联。  <xref:System.IO.Packaging.PackageRelationship> 可以是以下两种类型之一，其中每种类型可以是以下两种形式之一：  
  
-   包级别关系（由 <xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=nameWithType> 方法创建）将 <xref:System.IO.Packaging.Package> 相关联：  
  
    -   包中的目标部分。  
  
    -   包外部的目标资源。  
  
-   部分级别关系（由 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=nameWithType> 方法创建）将源 <xref:System.IO.Packaging.PackagePart> 与以下各项相关联：  
  
    -   包中的另一个目标部件。  
  
    -   包外部的目标资源。  
  
 关系的源 <xref:System.IO.Packaging.Package> 或源 <xref:System.IO.Packaging.PackagePart> 被视为关系的 "所有者"。  删除源对象时，还将删除源对象所拥有的所有关系。  创建或删除关系的过程不会以任何方式以物理方式更改源对象或目标对象。  
  
 <xref:System.IO.Packaging.PackageDigitalSignature> （"数字签名"）是部件和关系的组合，表示包含在 <xref:System.IO.Packaging.Package>中的数字签名。  数字签名标识发信方，并验证 <xref:System.IO.Packaging.Package> 中包含的签名部分和关系是否尚未修改。  
  
 包还支持数字 Rights Management （DRM），这允许使用向授权用户授予的特定访问权限对 <xref:System.IO.Packaging.Package> 中的内容元素进行加密。  
  
 根据 <xref:System.IO.Packaging.Package> 的体系结构，<xref:System.Windows.Xps.Packaging.XpsDocument> 是设计用于基于 open [XML 纸张规范（XPS）](https://go.microsoft.com/fwlink/?LinkID=65761)存储文档的包类型。  
  
 默认情况下，.NET Framework 使用包来存储页面和文档的内容、资源和关系。 与任何 ZIP 文件一样，应用程序可以使用 <xref:System.IO.Packaging> 类在单个有效访问权限容器中存储和（可选）保护任何类型或数量的数据文件。  
  
 有关详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示了创建 <xref:System.IO.Packaging.Package>的基本步骤。  在此示例中，创建了一个包，其中包含一个作为文档一部分显示的图形图像。  （这类似于 HTML 文件具有引用外部图像文件的 \<IMG > 标记的情况。） 包中还包括两个 <xref:System.IO.Packaging.PackageRelationship> 元素。  第一种是 "包级别" 关系，它将文档部件定义为包的根元素。  第二个 "part level" 关系定义文档部件（部分级别关系的 "源"）和图像部分（部分级别关系的 "目标"）之间的关联。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定（OPC）规范</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=74494">开放打包约定的数字签名框架</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Packaging.Package" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package openFileAccess" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">包的文件 IO 权限。</param>
        <summary>初始化使用给定的 <see cref="T:System.IO.Packaging.Package" /> 的 <see cref="T:System.IO.FileAccess" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> 是 <xref:System.IO.Packaging.Package> 抽象基类的受保护的构造函数。 在派生类中调用时，<xref:System.IO.Packaging.Package.%23ctor%2A> 构造函数初始化派生类的新实例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="openFileAccess" /> 的值无效。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess, streaming As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess * bool -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package (openFileAccess, streaming)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="streaming" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">包的文件 IO 权限。</param>
        <param name="streaming">如果打开包以进行流式处理，则为 <see langword="true" />，否则为 <see langword="false" />。</param>
        <summary>初始化使用给定 <see cref="T:System.IO.Packaging.Package" /> 和流选项的 <see cref="T:System.IO.FileAccess" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> 是 <xref:System.IO.Packaging.Package> 抽象基抽象基类的受保护的构造函数。 在派生类中调用时，<xref:System.IO.Packaging.Package.%23ctor%2A> 构造函数初始化派生类的新实例。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="openFileAccess" /> 的值无效。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="package.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存并关闭包和所有基础部件流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于 <xref:System.IO.Packaging.Package> 类 <xref:System.IO.Packaging.Package.Close%2A> 和 <xref:System.IO.Packaging.Package.Dispose%2A> 执行相同操作-如果调用 <xref:System.IO.Packaging.Package.Close%2A>，则没有理由调用 <xref:System.IO.Packaging.Package.Dispose%2A>，反之亦然。  
  
 <xref:System.IO.Packaging.Package.Close%2A> 和 <xref:System.IO.Packaging.Package.Dispose%2A> 在内部调用 <xref:System.IO.Packaging.Package.Flush%2A>。  
  
> [!NOTE]
>  建议使用 `using` 语句（不同于 `using` 命名空间指令）来 <xref:System.IO.Packaging.Package.Close%2A> 和 <xref:System.IO.Packaging.Package.Dispose%2A> 包。  [编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)和[读取包示例](https://go.microsoft.com/fwlink/?LinkID=160034)演示如何通过使用 `using` 语句来关闭和释放包。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建新的包部件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 初始化新部件的空 <xref:System.IO.Stream>。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> 方法可用于获取对与部件关联的流实例的引用。  
  
 有关包部件的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.1 节。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新 <xref:System.IO.Packaging.PackagePart>，然后将数据存储到该部件。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> 在内部调用派生类 <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 方法，以便根据派生类中实现的物理格式实际创建部件。</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">新部件的统一资源标识符 (URI)。</param>
        <param name="contentType">数据流的内容类型。</param>
        <summary>使用给定的 URI 和内容类型创建新的未压缩部件。</summary>
        <returns>新创建的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 初始化新部件的空 <xref:System.IO.Stream>。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> 方法可用于获取对与部件关联的流实例的引用。  
  
 <xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=nameWithType>部分 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A>。  
  
 有关包部件的其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范中的1.1 节。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新 <xref:System.IO.Packaging.PackagePart>，然后将数据存储到该部件。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</exception>
        <exception cref="T:System.InvalidOperationException">包中已存在具有指定的 <paramref name="partUri" /> 的部件。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读的（无法添加新部件）。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> 在内部调用派生类的 <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 方法，以便根据派生类中实现的物理格式实际创建部件。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String, compressionOption As CompressionOption) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">新部件的 URI。</param>
        <param name="contentType">数据流的内容类型。</param>
        <param name="compressionOption">数据流的压缩选项、<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> 或 <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 压缩。</param>
        <summary>使用给定的 URI、内容类型和压缩选项创建新部件。</summary>
        <returns>新创建的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认 <xref:System.IO.Packaging.ZipPackage> 派生类，<xref:System.IO.Packaging.Package.CreatePart%2A> 方法仅支持两个 `compressionOption` 值： <xref:System.IO.Packaging.CompressionOption.NotCompressed> 或 <xref:System.IO.Packaging.CompressionOption.Normal> 压缩。  <xref:System.IO.Packaging.CompressionOption.Maximum>、<xref:System.IO.Packaging.CompressionOption.Fast>或 <xref:System.IO.Packaging.CompressionOption.SuperFast> 的其他 <xref:System.IO.Packaging.CompressionOption> 值使用 <xref:System.IO.Packaging.CompressionOption.Normal> 压缩。  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 创建新部件的空 <xref:System.IO.Stream>。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> 方法可用于获取对与部件关联的流实例的引用。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新 <xref:System.IO.Packaging.PackagePart>，然后将数据存储到该部件。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> 统一资源标识符 (URI)。</exception>
        <exception cref="T:System.InvalidOperationException">包中已存在具有指定的 <paramref name="partUri" /> 的部件。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" /> 值无效。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读的（无法添加新部件）。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 在内部调用派生类的 <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 方法，以便根据派生类中实现的物理格式实际创建部件。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreatePartCore (partUri As Uri, contentType As String, compressionOption As CompressionOption) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ CreatePartCore(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="abstract member CreatePartCore : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePartCore (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">正在创建的部件的统一资源标识符 (URI)。</param>
        <param name="contentType">数据流的内容类型。</param>
        <param name="compressionOption">数据流的压缩选项。</param>
        <summary>在派生类中重写时，会在包中创建一个新部件。</summary>
        <returns>创建的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生 <xref:System.IO.Packaging.Package.CreatePartCore%2A> 方法由 <xref:System.IO.Packaging.Package.CreatePart%2A> 方法调用，以根据在派生类中实现的物理格式创建部件。  
  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 类的 <xref:System.IO.Packaging.ZipPackage> 派生类实现。  在默认操作中，<xref:System.IO.Packaging.Package.CreatePart%2A> 在内部调用 <xref:System.IO.Packaging.ZipPackage> 类的 <xref:System.IO.Packaging.Package.CreatePartCore%2A> 以在 ZIP 文件中创建新部件。  
  
 对于默认 <xref:System.IO.Packaging.ZipPackage> 派生类，<xref:System.IO.Packaging.Package.CreatePartCore%2A> 方法仅支持两个 `compressionOption` 值： <xref:System.IO.Packaging.CompressionOption.NotCompressed> 或 <xref:System.IO.Packaging.CompressionOption.Normal> 压缩。  <xref:System.IO.Packaging.CompressionOption.Maximum>、<xref:System.IO.Packaging.CompressionOption.Fast>或 <xref:System.IO.Packaging.CompressionOption.SuperFast> 的其他 <xref:System.IO.Packaging.CompressionOption> 值使用 <xref:System.IO.Packaging.CompressionOption.Normal> 压缩。  
  
 有关包模型和包部件的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的第1章。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> 实现应不会对调用它的 <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> 方法所执行的顺序或操作进行任何假设。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建与给定的部件的包级别关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部分或资源之间的关联。  包级别关系可以是以下两种形式之一。  
  
-   <xref:System.IO.Packaging.Package> 到包内的目标 <xref:System.IO.Packaging.PackagePart>。  
  
-   <xref:System.IO.Packaging.Package> 到包外的目标资源。  
  
 在包关系中，包被视为关系的 "所有者"。  删除包时，还将删除该包拥有的所有关系。  创建或删除关系的过程不会以任何方式在物理上改变目标部分或资源。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何在 <xref:System.IO.Packaging.Package> 与根文档部分之间创建 <xref:System.IO.Packaging.PackageRelationship>。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationship (targetUri As Uri, targetMode As TargetMode, relationshipType As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的统一资源标识符 (URI)。</param>
        <param name="targetMode">指示目标部件对包来说是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 还是 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
        <param name="relationshipType">唯一定义关系的角色的 URI。</param>
        <summary>使用给定的 URI、目标模式和关系类型创建与部件的包级别关系。</summary>
        <returns>与指定部件的包级别关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部分或资源之间的关联。  包级别关系可以是以下两种形式之一。  
  
-   在 <xref:System.IO.Packaging.Package> 到包中的目标部分之间。  
  
-   <xref:System.IO.Packaging.Package> 到包外的目标资源。  
  
 在包关系中，包被视为关系的 "所有者"。  删除包时，还将删除该包拥有的所有关系。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 不会以任何方式以物理方式更改目标部分或资源。  
  
 关系的目标不能是另一个关系。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.Internal>，则 `targetUri` 必须是根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）一般语法规范构成的相对 URI。  内部相对 URI 可以是以正斜杠（"/"）字符开头的绝对路径，例如 "/page1.xaml" 或 "/images/picture4.jpg"，也可以是相对路径（如 "..."）。/imagespicture1.jpg "，它解析为包根（"/"）作为基 URI。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.External>，则 `targetUri` 可以是根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）通用语法规范构成的绝对或相对 URI。 `http://www.microsoft.com/page2.xml` 是引用外部目标资源 "page2" 的绝对 URI 的示例。  "images/picture1" 是相对 URI 的一个示例，它也引用外部目标资源 "1 .jpg"，但会根据包本身的 URI 进行解析。  
  
 `relationshipType` 必须是根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）通用语法规范进行格式的 URI。  下表显示了由开放式打包约定（OPC）规范定义的包级别 `relationshipType` Uri。  
  
|包级别关系|关系类型 URI|  
|---------------------------------|---------------------------|  
|核心属性|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|数字签名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|数字签名证书|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|数字签名源|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|缩略图|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 有关打包和包关系的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.3 节。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 在 <xref:System.IO.Packaging.Package> 和根文档部分之间创建 <xref:System.IO.Packaging.PackageRelationship>。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetUri" /> 部件为 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，而 <paramref name="targetUri" /> 为绝对 URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" /> 的值无效。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationship (targetUri As Uri, targetMode As TargetMode, relationshipType As String, id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的统一资源标识符 (URI)。</param>
        <param name="targetMode">指示目标部件对包来说是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 还是 <see cref="F:System.IO.Packaging.TargetMode.External" />。</param>
        <param name="relationshipType">唯一定义关系的角色的 URI。</param>
        <param name="id">唯一 XML 标识符。</param>
        <summary>使用给定的 URI、目标模式、关系类型和 [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)] 创建与部件的包级别关系。</summary>
        <returns>与指定部件的包级别关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部分或资源之间的关联。  包级别关系可以是以下两种形式之一。  
  
-   在 <xref:System.IO.Packaging.Package> 到包中的目标部分之间。  
  
-   <xref:System.IO.Packaging.Package> 到包外的目标资源。  
  
 在包关系中，包被视为关系的 "所有者"。  删除包时，还将删除该包拥有的所有关系。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 不会以任何方式以物理方式更改目标部分或资源。  
  
 关系的目标不能是另一个关系。  
  
 `id` 必须是有效的 XML 标识符。  `id` 类型为 xsd： ID，必须遵循 XML 架构第2部分：数据类型规范（请参阅[https://www.w3.org/TR/xmlschema-2/#ID](https://www.w3.org/TR/xmlschema-2/#ID)）中规定的命名约定。  
  
 如果 `id` 指定为 `null` 将自动生成唯一 ID。  空字符串指定的 `id` 无效。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.Internal>，则 `targetUri` 必须是根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）一般语法规范构成的相对 URI。  内部相对 URI 可以是以正斜杠（"/"）字符开头的绝对路径，例如 "/page1.xaml" 或 "/images/picture4.jpg"，也可以是相对路径（如 "..."）。/imagespicture1.jpg "，它解析为包根（"/"）作为基 URI。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.External>，则 `targetUri` 可以是根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）通用语法规范构成的绝对或相对 URI。 `http://www.microsoft.com/page2.xml` 是引用外部目标资源 "page2" 的绝对 URI 的示例。  "images/picture1" 是相对 URI 的一个示例，它也引用外部目标资源 "1 .jpg"，但会根据包本身的 URI 进行解析。  
  
 `relationshipType` 必须是根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）通用语法规范进行格式的 URI。  下表显示了由开放式打包约定（OPC）规范定义的包级别 `relationshipType` Uri。  
  
|包级别关系|关系类型 URI|  
|---------------------------------|---------------------------|  
|核心属性|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|数字签名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|数字签名证书|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|数字签名源|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|缩略图|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 有关打包和包关系的其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.3 节。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 在 <xref:System.IO.Packaging.Package> 和根文档部分之间创建 <xref:System.IO.Packaging.PackageRelationship>。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetUri" /> 部件为 <see cref="T:System.IO.Packaging.PackageRelationship" />，或 <paramref name="targetMode" /> 为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，而 <paramref name="targetUri" /> 为绝对 URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" /> 的值无效。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符；或者包中已存在具有指定的 <paramref name="id" /> 的部件。</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePart (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.DeletePart : Uri -&gt; unit" Usage="package.DeletePart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要删除的部件的 URI。</param>
        <summary>使用包中给定的 URI 删除部件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是一个相对 URI，该 URI 包含以正斜杠（"/"）开头的绝对路径。  绝对路径相对于包根路径，并且根据[RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符（URI）通用语法规范进行构建。  "/page1.xaml" 和 "/images/picture4.jpg" 是有效的部件 Uri 的示例。  
  
 如果包中不存在具有指定 `partUri` 的部分，则不会引发异常。  （您可以使用 <xref:System.IO.Packaging.Package.PartExists%2A> 方法来确定具有指定 `partUri` 的部件是否在包中。）  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> 在内部调用派生类的 <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> 方法，以便根据派生类中实现的物理格式实际删除该部件。</para></block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeletePartCore (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeletePartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member DeletePartCore : Uri -&gt; unit" Usage="package.DeletePartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要删除的 <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" />。</param>
        <summary>在派生类中重写时，会使用给定的 URI 删除部件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 类的 <xref:System.IO.Packaging.ZipPackage> 派生类实现。  在默认操作中，<xref:System.IO.Packaging.Package.DeletePart%2A> 在内部调用 <xref:System.IO.Packaging.ZipPackage> 类的 <xref:System.IO.Packaging.Package.DeletePartCore%2A>，以根据派生类中实现的物理格式执行实际的删除操作。  
  
 有关包模型和包部件的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的第1章。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生类 <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> 实现由 <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> 方法根据派生类中实现的物理格式调用到指定的部分。  
  
派生 <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> 实现应不会对调用它的 <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> 方法所执行的顺序或操作进行任何假设。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="package.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要删除的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的 <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
        <summary>删除包级别关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 包级别关系定义包和关联的目标部分或资源之间的关联。  包级别关系可以是以下两种形式之一。  
  
-   在 <xref:System.IO.Packaging.Package> 到包中的目标部分之间。  
  
-   <xref:System.IO.Packaging.Package> 到包外的目标资源。  
  
 在包关系中，包被视为关系的 "所有者"。  删除包时，还将删除该包拥有的所有关系。  
  
 如果具有指定 `id` 的关系不在包中，则不会引发异常。  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> 不会以任何方式以物理方式更改目标部件。  
  
 有关包关系的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.3 节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="package.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</param>
        <summary>刷新并保存所有部件和关系的内容，关闭包，并释放所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为了确保正确保存所有更改，<xref:System.IO.Packaging.Package.Dispose%2A> 还会完成并关闭包中包含的所有部件和关系。  
  
 对于 <xref:System.IO.Packaging.Package> 类，<xref:System.IO.Packaging.Package.Dispose%2A> 和 <xref:System.IO.Packaging.Package.Close%2A> 执行相同操作-如果调用 <xref:System.IO.Packaging.Package.Close%2A>，则没有理由调用 <xref:System.IO.Packaging.Package.Dispose%2A>，反之亦然。  
  
 <xref:System.IO.Packaging.Package.Close%2A> 和 <xref:System.IO.Packaging.Package.Dispose%2A> 在内部调用 <xref:System.IO.Packaging.Package.Flush%2A>。  
  
 分配和管理非内存资源的派生类应重写此方法，以便在调用 <xref:System.IO.Packaging.Package.Dispose%2A> 时释放资源。 派生类重写还应调用 <xref:System.IO.Packaging.Package.Flush%2A> 和基类 <xref:System.IO.Packaging.Package.Dispose%2A> 方法，以确保始终执行基类清理。  
  
> [!NOTE]
>  建议使用 `using` 语句（不同于 `using` 命名空间指令）来 <xref:System.IO.Packaging.Package.Close%2A> 和 <xref:System.IO.Packaging.Package.Dispose%2A> 包。 [编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)演示如何使用 `using` 语句关闭和释放包。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberSignature Language="F#" Value="member this.FileOpenAccess : System.IO.FileAccess" Usage="System.IO.Packaging.Package.FileOpenAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包的文件访问设置。</summary>
        <value><see cref="T:System.IO.FileAccess" /> 值之一：<see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FileOpenAccess%2A> 属性没有默认值。  当你创建新包时，或在打开现有包时在 <xref:System.IO.Packaging.Package.Open%2A> 调用中 <xref:System.IO.Packaging.Package.%23ctor%2A> 指定文件访问设置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="package.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存包中包含的所有部件和关系的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.Flush%2A> 在内部调用派生类的 <xref:System.IO.Packaging.Package.FlushCore%2A> 实现，以执行实际的特定于格式的刷新操作。  派生类的 <xref:System.IO.Packaging.Package.FlushCore%2A> 方法负责将部分和关系内容实际保存到特定的物理派生类实现。  
  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 基类的 <xref:System.IO.Packaging.ZipPackage> 派生实现。 在默认操作中，<xref:System.IO.Packaging.Package.Flush%2A> 内部调用 <xref:System.IO.Packaging.Package.FlushCore%2A> 将部分和关系保存到 ZIP 文件包中。  
  
 <xref:System.IO.Packaging.Package.Flush%2A> 由 <xref:System.IO.Packaging.Package.Close%2A> 和 <xref:System.IO.Packaging.Package.Dispose%2A> 方法自动调用。  调用 <xref:System.IO.Packaging.Package.Close%2A> 或 <xref:System.IO.Packaging.Package.Dispose%2A> 时，不必单独调用 <xref:System.IO.Packaging.Package.Flush%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包为只读的，无法进行修改。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> 在内部调用派生类的 <see cref="M:System.IO.Packaging.Package.FlushCore" /> 方法，以便根据派生类中实现的物理格式实际刷新部件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FlushCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FlushCore();" />
      <MemberSignature Language="F#" Value="abstract member FlushCore : unit -&gt; unit" Usage="package.FlushCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，会将所有部件和关系的内容保存到派生类存储区中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FlushCore%2A> 由 <xref:System.IO.Packaging.Package.Flush%2A> 方法调用，以根据派生类中实现的物理格式执行实际刷新操作。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.Package.FlushCore" /> 实现不应对调用它的 <see cref="M:System.IO.Packaging.Package.Flush" /> 方法所执行的顺序或操作进行任何假设。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPart (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ GetPart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.GetPart : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要返回的部件的统一资源标识符 (URI)。</param>
        <summary>返回具有给定 URI 的部件。</summary>
        <returns>具有指定 <paramref name="partUri" /> 的部件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果具有指定 `partUri` 的部件不存在，则会引发 <xref:System.InvalidOperationException>。  
  
 <xref:System.IO.Packaging.Package.PartExists%2A> 方法可用于确定 `partUri` 是否引用现有部件。  
  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 基类的 <xref:System.IO.Packaging.ZipPackage> 派生实现。  在默认操作中，<xref:System.IO.Packaging.Package.GetPart%2A> 在内部调用 <xref:System.IO.Packaging.ZipPackage> 类的 <xref:System.IO.Packaging.Package.GetPartCore%2A>，以从 ZIP 文件返回所请求的部分。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何查找、检索和读取包中包含的部件。  有关完整示例，请参阅[读取包示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> 统一资源标识符 (URI)。</exception>
        <exception cref="T:System.InvalidOperationException">包中不存在具有指定 <paramref name="partUri" /> 的部件。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> 在内部调用派生类 <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> 方法，以便根据派生类中实现的物理格式实际刷新部件。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartCore (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ GetPartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member GetPartCore : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要检索的部件的统一资源标识符 (URI)。</param>
        <summary>在派生类中重写时，会返回由给定 URI 寻址的部件。</summary>
        <returns>请求的部件；或者，如果包中不存在具有指定 <paramref name="partUri" /> 的部件，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 类的 <xref:System.IO.Packaging.ZipPackage> 派生实现。  在默认操作中，<xref:System.IO.Packaging.Package.GetPart%2A> 在内部调用 <xref:System.IO.Packaging.ZipPackage> 类的 <xref:System.IO.Packaging.Package.GetPartCore%2A> 以检索 ZIP 文件中的部件。  
  
 有关包模型和包部件的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的第1章。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生类 <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> 实现由 <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> 方法调用，以根据派生类中实现的物理格式访问和返回指定的部分。  
  
派生 <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> 实现应不会对调用它的 <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> 方法所执行的顺序或操作进行任何假设。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParts () As PackagePartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePartCollection ^ GetParts();" />
      <MemberSignature Language="F#" Value="member this.GetParts : unit -&gt; System.IO.Packaging.PackagePartCollection" Usage="package.GetParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回包中所有部件的集合。</summary>
        <returns>包中包含的所有 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetParts%2A> 返回包含在包中的所有部件（包括 <xref:System.IO.Packaging.PackageRelationship> 部分）的集合。  
  
 <xref:System.IO.Packaging.Package.GetParts%2A> 绝不会返回 `null`;但是，如果包不包含任何部件，则返回的集合将包含零个元素。  
  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 基类的 <xref:System.IO.Packaging.ZipPackage> 派生实现。  在默认操作中，<xref:System.IO.Packaging.Package.GetParts%2A> 调用 <xref:System.IO.Packaging.ZipPackage> 类的 <xref:System.IO.Packaging.Package.GetPartsCore%2A> 方法以从 ZIP 文件返回部件。  
  
 有关包和包部分的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.1 节。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.Package.GetParts%2A> 方法获取 <xref:System.IO.Packaging.Package>中包含的部件的集合。  有关完整的程序源代码，请参阅[使用数字签名创建包示例](https://go.microsoft.com/fwlink/?LinkID=159966)。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> 在内部调用派生类 <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> 方法，以便根据派生类中实现的物理格式实际刷新部件。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartsCore () As PackagePart()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::IO::Packaging::PackagePart ^&gt; ^ GetPartsCore();" />
      <MemberSignature Language="F#" Value="abstract member GetPartsCore : unit -&gt; System.IO.Packaging.PackagePart[]" Usage="package.GetPartsCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，会返回包中所有部件的数组。</summary>
        <returns>包中包含的所有部件的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生类 <xref:System.IO.Packaging.Package.GetPartsCore%2A> 实现由 <xref:System.IO.Packaging.Package.GetParts%2A> 方法调用，以根据派生类中实现的物理格式访问和返回部分数组。  
  
 默认情况下，提供并使用抽象 <xref:System.IO.Packaging.Package> 类的 <xref:System.IO.Packaging.ZipPackage> 派生实现。  在默认操作中，<xref:System.IO.Packaging.Package.GetParts%2A> 在内部调用 <xref:System.IO.Packaging.ZipPackage> 类的 <xref:System.IO.Packaging.Package.GetPartCore%2A> 以从 ZIP 文件中检索部件。  
  
 有关包模型和包部件的详细信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的第1章。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> 实现应不会对调用它的 <see cref="M:System.IO.Packaging.Package.GetParts" /> 方法所执行的顺序或操作进行任何假设。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>返回具有给定标识符的包级别关系。</summary>
        <returns>具有指定 <paramref name="id" /> 的包级别关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。 `id` 类型为 xsd： ID，必须遵循[XML 架构第2部分：数据类型规范的节 twiliojava-3.3.8-with-dependencies jar 编写](https://www.w3.org/TR/xmlschema-2/#ID)中规定的命名约定。  
  
 有关打包和包关系的其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.3 节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.InvalidOperationException">包中不存在具有指定 <paramref name="id" /> 的关系。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回所有包级别关系的集合。</summary>
        <returns>包中包含的所有包级别关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 绝不会返回 `null`;但是，如果包不包含包级别关系，则返回的集合可以包含零个元素。  
  
 包级别关系定义包和关联的目标部分或资源之间的关联。  包级别关系可以是以下两种形式之一。  
  
-   在 <xref:System.IO.Packaging.Package> 到包中的目标部分之间。  
  
-   <xref:System.IO.Packaging.Package> 到包外的目标资源。  
  
 在包关系中，包被视为关系的 "所有者"。  删除包时，还将删除该包拥有的所有关系。  创建或删除关系的过程不会以任何方式在物理上改变目标部分或资源。  
  
 有关打包和包关系的其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范的1.3 节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">在集合中匹配和返回的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
        <summary>返回与给定的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 匹配的所有包级别关系的集合。</summary>
        <returns>与指定的 <paramref name="relationshipType" /> 匹配的包级别关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 绝不会返回 `null`;但是，如果没有与指定 `relationshipType`匹配的包级别关系，则返回的集合可能包含零个元素。  
  
 下表显示了由开放式打包约定（OPC）规范定义的包级别 `relationshipType` Uri。  
  
|包级别关系|关系类型 URI|  
|---------------------------------|---------------------------|  
|核心属性|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|数字签名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|数字签名证书|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|数字签名源|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|缩略图|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何检索已为包定义的关系。  有关完整示例，请参阅[读取包示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> 是一个空字符串。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开包。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新的 <xref:System.IO.Packaging.Package>，它将 <xref:System.IO.Packaging.PackageRelationship> 和 <xref:System.IO.Packaging.PackagePart> 元素与存储的数据结合在一起。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (stream As Stream) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">在其上打开包的 IO 流。</param>
        <summary>在给定的 IO 流上打开包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <summary>打开位于给定路径和文件名的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 此 <xref:System.IO.Packaging.Package.Open%2A> 方法使用 <xref:System.IO.FileMode.OpenOrCreate>、<xref:System.IO.FileAccess.ReadWrite>和 <xref:System.IO.FileShare.None> 的默认属性打开包（若要指定不同的属性，请使用其他 Open 方法重载之一）。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新的 <xref:System.IO.Packaging.Package>，它将 <xref:System.IO.Packaging.PackageRelationship> 和 <xref:System.IO.Packaging.PackagePart> 元素与存储的数据结合在一起。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (stream As Stream, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">在其上打开包的 IO 流。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <summary>使用给定的 IO 流和文件模式打开包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> 值无效。</exception>
        <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <summary>使用给定的文件模式打开位于给定路径的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 此 <xref:System.IO.Packaging.Package.Open%2A> 方法将使用默认属性打开包 <xref:System.IO.FileAccess.ReadWrite> 和 <xref:System.IO.FileShare.None> （若要指定不同的属性，请使用其他 Open 方法重载之一）。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新的 <xref:System.IO.Packaging.Package>，它将 <xref:System.IO.Packaging.PackageRelationship> 和 <xref:System.IO.Packaging.PackagePart> 元素与存储的数据结合在一起。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> 的值无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (stream As Stream, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">在其上打开包的 IO 流。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <param name="packageAccess">用于打开包的文件访问。</param>
        <summary>使用给定的 IO 流、文件模式和文件访问设置打开包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值无效。</exception>
        <exception cref="T:System.IO.IOException">要打开的包需要读权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的；或者，要打开的包需要写权限或读/写权限，且指定的 <paramref name="stream" /> 是只写的。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <param name="packageAccess">用于打开包的文件访问。</param>
        <summary>使用给定的文件模式和文件访问设置打开位于给定路径的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 此 <xref:System.IO.Packaging.Package.Open%2A> 方法将使用默认的 <xref:System.IO.FileShare.None> 属性打开包（若要指定不同的属性，请使用 <xref:System.IO.Packaging.Package.Open%2A> 方法重载）。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何打开和读取包含 <xref:System.IO.Packaging.PackageRelationship> 和 <xref:System.IO.Packaging.PackagePart> 元素以及存储数据的 <xref:System.IO.Packaging.Package>。  有关完整示例，请参阅[读取包示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 的值无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess, packageShare As FileShare) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess, System::IO::FileShare packageShare);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess, packageShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">包的路径和文件名。</param>
        <param name="packageMode">用于打开包的文件模式。</param>
        <param name="packageAccess">用于打开包的文件访问。</param>
        <param name="packageShare">用于打开包的文件共享模式。</param>
        <summary>使用给定的文件模式、文件访问和文件共享设置打开位于给定路径的包。</summary>
        <returns>打开的包。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> 是 <xref:System.IO.Packaging.Package.Open%2A> 方法使用的默认包类型。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
   
  
## Examples  
 下面的示例演示如何创建一个新的 <xref:System.IO.Packaging.Package>，它将 <xref:System.IO.Packaging.PackageRelationship> 和 <xref:System.IO.Packaging.PackagePart> 元素与存储的数据结合在一起。  有关完整示例，请参阅[编写包示例](https://go.microsoft.com/fwlink/?LinkID=160055)。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" />、<paramref name="packageAccess" /> 或 <paramref name="packageShare" /> 的值无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PackageProperties : System.IO.Packaging.PackageProperties" Usage="System.IO.Packaging.Package.PackageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包的核心属性。</summary>
        <value>包的核心属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关核心包属性的其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范中的3.1 节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartExists (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PartExists(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member PartExists : Uri -&gt; bool&#xA;override this.PartExists : Uri -&gt; bool" Usage="package.PartExists partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要检查的部件的 <see cref="T:System.Uri" />。</param>
        <summary>指示具有给定 URI 的部件是否在包中。</summary>
        <returns>如果具有指定的 <paramref name="partUri" /> 的部件在包中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 应以正斜杠字符 "/" 开头，并绝对从包的根开始。  
  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> 统一资源标识符 (URI)。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取信息）。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="package.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要检查的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>指示具有给定 ID 的包级别关系是否包含在包中。</summary>
        <returns>如果具有指定的 <paramref name="id" /> 的包级别关系在包中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关其他信息，请参阅 <https://go.microsoft.com/fwlink/?LinkID=71255>上可供下载的开放打包约定（OPC）规范。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.ObjectDisposedException">包未打开（已调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的。</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="package.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，不是为应用程序使用而设计的。  改用类型安全的 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
