<Type Name="PackUriHelper" FullName="System.IO.Packaging.PackUriHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="619fbaea6d0ffe2f326bbcdc60defad4f48888a9" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83979520" /></Metadata><TypeSignature Language="C#" Value="public static class PackUriHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PackUriHelper extends System.Object" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackUriHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class PackUriHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackUriHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type PackUriHelper = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackUriHelper extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.IO.Packaging" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.5.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供实用工具方法来撰写和分析 pack URI 对象。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ComparePackUri">
      <MemberSignature Language="C#" Value="public static int ComparePackUri (Uri firstPackUri, Uri secondPackUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ComparePackUri(class System.Uri firstPackUri, class System.Uri secondPackUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComparePackUri (firstPackUri As Uri, secondPackUri As Uri) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ComparePackUri(Uri ^ firstPackUri, Uri ^ secondPackUri);" />
      <MemberSignature Language="F#" Value="static member ComparePackUri : Uri * Uri -&gt; int" Usage="System.IO.Packaging.PackUriHelper.ComparePackUri (firstPackUri, secondPackUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstPackUri" Type="System.Uri" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
        <Parameter Name="secondPackUri" Type="System.Uri" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
      </Parameters>
      <Docs>
        <param name="firstPackUri">第一个包 URI。</param>
        <param name="secondPackUri">第二个包 URI。</param>
        <summary>返回一个值，该值指示两个包 URI 是否等效。</summary>
        <returns>一个带符号整数，指示 <paramref name="firstPackUri" /> 和 <paramref name="secondPackUri" /> 之间的关系。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 含义 
 </description></listheader><item><term> 小于 0 
 </term><description><paramref name="firstPackUri" /> 小于 <paramref name="secondPackUri" />。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="firstPackUri" /> 等效于 <paramref name="secondPackUri" />。  
  
 </description></item><item><term> 大于 0 
 </term><description><paramref name="firstPackUri" /> 大于 <paramref name="secondPackUri" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果同时 `null``firstPackUri` 和 `secondPackUri`，<xref:System.IO.Packaging.PackUriHelper.ComparePackUri%2A> 将返回0。 比较包 Uri 时，空 URI 始终小于非空 URI。    对于 `firstPackUri` 和 `secondPackUri` 均为绝对包 Uri 的情况，<xref:System.IO.Packaging.PackUriHelper.ComparePackUri%2A> 执行比较。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="firstPackUri" /> 或 <paramref name="secondPackUri" /> 不是绝对 URI。  
  
- 或 - 
<paramref name="firstPackUri" /> 或 <paramref name="secondPackUri" /> 不以“pack://”方案开头。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="ComparePartUri">
      <MemberSignature Language="C#" Value="public static int ComparePartUri (Uri firstPartUri, Uri secondPartUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ComparePartUri(class System.Uri firstPartUri, class System.Uri secondPartUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComparePartUri (firstPartUri As Uri, secondPartUri As Uri) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ComparePartUri(Uri ^ firstPartUri, Uri ^ secondPartUri);" />
      <MemberSignature Language="F#" Value="static member ComparePartUri : Uri * Uri -&gt; int" Usage="System.IO.Packaging.PackUriHelper.ComparePartUri (firstPartUri, secondPartUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstPartUri" Type="System.Uri" />
        <Parameter Name="secondPartUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="firstPartUri">第一个 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
        <param name="secondPartUri">第二个 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
        <summary>返回一个值，该值指示两个包部件 URI 是否相等。</summary>
        <returns>一个值，指示 <paramref name="firstPartUri" /> 和 <paramref name="secondPartUri" /> 之间的关系。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 含义 
 </description></listheader><item><term> 小于 0 
 </term><description><paramref name="firstPartUri" /> 小于 <paramref name="secondPartUri" />。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="firstPartUri" /> 等效于 <paramref name="secondPartUri" />。  
  
 </description></item><item><term> 大于 0 
 </term><description><paramref name="firstPartUri" /> 大于 <paramref name="secondPartUri" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果同时 `null``firstPartUri` 和 `secondPartUri`，<xref:System.IO.Packaging.PackUriHelper.ComparePartUri%2A> 将返回0。 当比较 <xref:System.IO.Packaging.PackagePart> Uri 时，空 URI 始终小于非 null URI。 对于 `firstPartUri` 和 `secondPartUri` 都是相对 <xref:System.IO.Packaging.PackagePart> Uri 的情况，<xref:System.IO.Packaging.PackUriHelper.ComparePartUri%2A> 执行比较。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="firstPartUri" /> 或 <paramref name="secondPartUri" /> 不是有效的部件 URI 语法。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建新包 URI。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.Create%2A> 方法的示例事例。  
  
|`packageUri`|`partUri`|`fragment`|返回的 pack URI|  
|------------------|---------------|----------------|-----------------------|  
|`http://www.proseware.com/mypackage.pkg`|/page1.xaml|#intro|pack://http:,,www.proseware.com,mypackage.pkg/page1.xaml#intro|  
|`http://www.proseware.com/mypackage.pkg`|/page2.xaml|**null**|pack：//http：，，，proseware，mypackage，.pkg/page2|  
|`http://www.proseware.com/mypackage.pkg`|/a/page4.xaml|**null**|pack：//http：，，，proseware，mypackage，.pkg/a/page4|  
|`http://www.proseware.com/mypackage.pkg`|/%41/%61.xml|**null**|pack：//http：，，，proseware，mypackage，.pkg/A/.xml|  
|`http://www.proseware.com/mypackage.pkg`|/%25XY.xml|**null**|pack：//http：，，，proseware，mypackage，.pkg/%2 5 XY .xml|  
|`http://www.proseware.com/mypackage.pkg`|/a/page5.xaml|#summary|pack://http:,,www.proseware.com,mypackage.pkg/a/page5.xaml#summary|  
|`http://www.proseware.com/packages.aspx?pkg04`|/page1.xaml|#intro|pack://http:,,www.proseware.com,packages.aspx%3fpkg04/page1.xaml#intro|  
|`http://www.proseware.com/mypackage.pkg`|**null**|**null**|pack：//http：、、proseware、mypackage。 .pkg|  
|`ftp://ftp.proseware.com/packages/mypackage1.abc`|/a/mydoc.xaml|**null**|pack://ftp:,,ftp.proseware.com,packages,mypackage1.abc/a/mydoc.xaml|  
|`file:///d:/packages/mypackage2.pkg`|/a/bar.xaml|#xref|pack://file：,,, d：、包、mypackage2. .pkg/a/bar。 xaml # x|  
  
 编写包 URI 是一个多步骤过程。  例如，形成包 URI 的一个步骤是将 `packageUri` 的正斜杠（/）字符替换为逗号（，）。  
  
 有关字符串转换和如何构造 pack Uri 的详细信息，请参阅 "开放打包约定规范" 中的附录 A 4 "字符串转换示例[" 和附录](https://go.microsoft.com/fwlink/?LinkID=71255)b. 3 "编写包 URI"。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Uri Create (Uri packageUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri Create(class System.Uri packageUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (packageUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ Create(Uri ^ packageUri);" />
      <MemberSignature Language="F#" Value="static member Create : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.Create packageUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageUri" Type="System.Uri" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
      </Parameters>
      <Docs>
        <param name="packageUri">引用的 <see cref="T:System.IO.Packaging.Package" /> 的 URI。</param>
        <summary>创建一个指向包的新包 URI。</summary>
        <returns>由给定的 <paramref name="packageUri" /> 引用的 <see cref="T:System.IO.Packaging.Package" /> 的包 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 不得指定为 `null` 或为空。  
  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.Create%2A>的示例事例。  
  
|`packageUri`|返回的 pack URI|  
|------------------|-----------------------|  
|`http://www.proseware.com/mypackage.pkg`|pack：//http：、、proseware、mypackage。 .pkg|  
|ftp://ftp.proseware.com/packages/mypackage1.abc|pack：//ftp：，，，proseware，包，mypackage1|  
|file:///d:/packages/mypackage2.pkg|pack://file：,,, d：，包，mypackage2. .pkg|  
  
 编写包 URI 是一个多步骤过程。  例如，形成包 URI 的一个步骤是将 `packageUri` 的正斜杠（/）字符替换为逗号（，）。  
  
 有关字符串转换和如何构造 pack Uri 的详细信息，请参阅 "开放打包约定规范" 中的附录 A 4 "字符串转换示例[" 和附录](https://go.microsoft.com/fwlink/?LinkID=71255)b. 3 "编写包 URI"。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.PackUriHelper.Create%2A> 方法定义引用包的包 URI。  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubGetFixDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubgetfixdoc)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubGetFixDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubgetfixdoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 不是绝对 URI。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Uri Create (Uri packageUri, Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri Create(class System.Uri packageUri, class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (packageUri As Uri, partUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ Create(Uri ^ packageUri, Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="static member Create : Uri * Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.Create (packageUri, partUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageUri" Type="System.Uri" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
        <Parameter Name="partUri" Type="System.Uri" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
      </Parameters>
      <Docs>
        <param name="packageUri"><see cref="T:System.IO.Packaging.Package" /> 的 URI。</param>
        <param name="partUri">包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
        <summary>在给定 <see cref="T:System.IO.Packaging.Package" /> URI 和包中部件的 URI 的情况下创建包 URI。</summary>
        <returns>给定 <see cref="T:System.IO.Packaging.PackagePart" /> 的包 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 不得指定为 null 或为空。  
  
 如果 `null``partUri`，则返回的 pack URI 指向包。  
  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.Create%2A> 方法的示例事例。  
  
|`packageUri`|`partUri`|返回的 pack URI|  
|------------------|---------------|-----------------------|  
|`http://www.proseware.com/mypackage.pkg`|/page2.xaml|pack：//http：，，，proseware，mypackage，.pkg/page2|  
|`http://www.proseware.com/mypackage.pkg`|/a/page4.xaml|pack：//http：，，，proseware，mypackage，.pkg/a/page4|  
|`http://www.proseware.com/mypackage.pkg`|/%41/%61.xml|pack：//http：，，，proseware，mypackage，.pkg/A/.xml|  
|`http://www.proseware.com/mypackage.pkg`|/%25XY.xml|pack：//http：，，，proseware，mypackage，.pkg/%2 5 XY .xml|  
|`http://www.proseware.com/mypackage.pkg`|**null**|pack：//http：、、proseware、mypackage。 .pkg|  
|ftp://ftp.proseware.com/packages/mypackage1.abc|/a/mydoc.xaml|pack://ftp:,,ftp.proseware.com,packages,mypackage1.abc/a/mydoc.xaml|  
|file:///d:/packages/mypackage2.pkg|/a/bar.xaml|pack://file：,,, d：、包、mypackage2. .pkg/a/bar。 xaml|  
  
 编写包 URI 是一个多步骤过程。  例如，形成包 URI 的一个步骤是将 `packageUri` 的正斜杠（/）字符替换为逗号（，）。  
  
 有关字符串转换和如何构造 pack Uri 的详细信息，请参阅 "开放打包约定规范" 中的附录 A 4 "字符串转换示例[" 和附录](https://go.microsoft.com/fwlink/?LinkID=71255)b. 3 "编写包 URI"。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.PackUriHelper.Create%28System.Uri%29> 方法定义引用包的包 URI。  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubGetFixDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubgetfixdoc)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubGetFixDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubgetfixdoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 不是绝对 URI。  
  
- 或 - 
 <paramref name="partUri" /> 不是有效的部件 URI 语法。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Uri Create (Uri packageUri, Uri partUri, string fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri Create(class System.Uri packageUri, class System.Uri partUri, string fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (packageUri As Uri, partUri As Uri, fragment As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ Create(Uri ^ packageUri, Uri ^ partUri, System::String ^ fragment);" />
      <MemberSignature Language="F#" Value="static member Create : Uri * Uri * string -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.Create (packageUri, partUri, fragment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageUri" Type="System.Uri" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
        <Parameter Name="partUri" Type="System.Uri" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
        <Parameter Name="fragment" Type="System.String" Index="2" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
      </Parameters>
      <Docs>
        <param name="packageUri"><see cref="T:System.IO.Packaging.Package" /> 的 URI。</param>
        <param name="partUri">包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
        <param name="fragment">标识包部件中的元素的“#”引用。</param>
        <summary>在给定 <see cref="T:System.IO.Packaging.Package" /> URI、包中部件的 URI 以及要追加的“#”片段的情况下创建包 URI。</summary>
        <returns>标识指定包、包部件和片段的包 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` 不得指定为 `null` 或为空。  
  
 如果 `null``partUri`，则返回的 pack URI 指向包。  
  
 `fragment` 不能为空字符串，但可以指定为 `null`。  如果未指定为 `null`，则 `fragment` 字符串必须以 "#" 字符开头。  有关 `fragment` 引用的语法的详细信息，请参阅[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)的 3.5 "片段" 一节。  
  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.Create%2A> 方法的示例事例。  
  
|`packageUri`|`partUri`|`fragment`|返回的 pack URI|  
|------------------|---------------|----------------|-----------------------|  
|`http://www.proseware.com/mypackage.pkg`|/page1.xaml|#intro|pack://http:,,www.proseware.com,mypackage.pkg/page1.xaml#intro|  
|`http://www.proseware.com/mypackage.pkg`|/page2.xaml|**null**|pack：//http：，，，proseware，mypackage，.pkg/page2|  
|`http://www.proseware.com/mypackage.pkg`|/a/page4.xaml|**null**|pack：//http：，，，proseware，mypackage，.pkg/a/page4|  
|`http://www.proseware.com/mypackage.pkg`|/%41/%61.xml|**null**|pack：//http：，，，proseware，mypackage，.pkg/A/.xml|  
|`http://www.proseware.com/mypackage.pkg`|/%25XY.xml|**null**|pack：//http：，，，proseware，mypackage，.pkg/%2 5 XY .xml|  
|`http://www.proseware.com/mypackage.pkg`|/a/page5.xaml|#summary|pack://http:,,www.proseware.com,mypackage.pkg/a/page5.xaml#summary|  
|`http://www.proseware.com/packages.aspx?pkg04`|/page1.xaml|#intro|pack://http:,,www.proseware.com,packages.aspx%3fpkg04/page1.xaml#intro|  
|`http://www.proseware.com/mypackage.pkg`|**null**|**null**|pack：//http：、、proseware、mypackage。 .pkg|  
|`ftp://ftp.proseware.com/packages/mypackage1.abc`|/a/mydoc.xaml|**null**|pack://ftp:,,ftp.proseware.com,packages,mypackage1.abc/a/mydoc.xaml|  
|`file:///d:/packages/mypackage2.pkg`|/a/bar.xaml|#xref|pack://file：,,, d：、包、mypackage2. .pkg/a/bar。 xaml # x|  
  
 编写包 URI 是一个多步骤过程。  例如，形成包 URI 的一个步骤是将 `packageUri` 的正斜杠（/）字符替换为逗号（，）。  
  
 有关字符串转换和如何构造 pack Uri 的详细信息，请参阅 "开放打包约定规范" 中的附录 A 4 "字符串转换示例[" 和附录](https://go.microsoft.com/fwlink/?LinkID=71255)b. 3 "编写包 URI"。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.PackUriHelper.Create%28System.Uri%29> 方法定义引用包的包 URI。  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubGetFixDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubgetfixdoc)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubGetFixDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubgetfixdoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> 不是绝对 URI。  
  
- 或 - 
 <paramref name="partUri" /> 不是有效的部件 URI 语法。  
  
- 或 - 
 <paramref name="fragment" /> 为空或不以“#”开头。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePartUri">
      <MemberSignature Language="C#" Value="public static Uri CreatePartUri (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri CreatePartUri(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreatePartUri (partUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ CreatePartUri(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="static member CreatePartUri : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.CreatePartUri partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</param>
        <summary>创建格式化的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</summary>
        <returns>格式化的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 始终从 <xref:System.IO.Packaging.Package> 根引用 <xref:System.IO.Packaging.PackagePart> 的 URI。  
  
 返回的 <xref:System.IO.Packaging.PackagePart> URI 是绝对路径，该路径始终以 "/" 开头并且符合[开放打包约定规范](https://go.microsoft.com/fwlink/?LinkID=71255)中定义的语法。  
  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.CreatePartUri%2A>的示例事例。  
  
|`partUri`|返回的部件 URI|  
|---------------|-----------------------|  
|picture1.jpg|/picture1.jpg|  
|/picture2.jpg|/picture2.jpg|  
|a/mydoc.xaml|/a/mydoc.xaml|  
|/b/bar.xaml|/b/bar.xaml|  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Packaging.PackUriHelper.CreatePartUri%2A> 方法定义 <xref:System.IO.Packaging.PackagePart> 元素的相对 Uri。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePartUri](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreateparturi)]
 [!code-vb[PackageWrite#PackageWriteCreatePartUri](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreateparturi)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160055">编写包示例</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是绝对 <see cref="T:System.Uri" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNormalizedPartUri">
      <MemberSignature Language="C#" Value="public static Uri GetNormalizedPartUri (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri GetNormalizedPartUri(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNormalizedPartUri (partUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ GetNormalizedPartUri(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="static member GetNormalizedPartUri : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.GetNormalizedPartUri partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要规范化的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</param>
        <summary>返回指定 <see cref="T:System.IO.Packaging.PackagePart" /> URI 的规范化形式。</summary>
        <returns>给定 <paramref name="partUri" /> 的规范化形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri%2A> 按大小写折叠到大写（<xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType>）并返回结果来规范化 `partUri`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.String.Normalize" />
        <altmember cref="T:System.Text.NormalizationForm" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 没有有效的 <see cref="T:System.Uri" /> 语法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPackageUri">
      <MemberSignature Language="C#" Value="public static Uri GetPackageUri (Uri packUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri GetPackageUri(class System.Uri packUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPackageUri (packUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ GetPackageUri(Uri ^ packUri);" />
      <MemberSignature Language="F#" Value="static member GetPackageUri : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.GetPackageUri packUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packUri" Type="System.Uri" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
      </Parameters>
      <Docs>
        <param name="packUri">从中返回 <see cref="T:System.IO.Packaging.Package" /> URI 的包 URI。</param>
        <summary>返回指向所指定包 URI 的整个程序包的内部 URI。</summary>
        <returns>来自指定 <paramref name="packUri" /> 的 <see cref="T:System.IO.Packaging.Package" /> 的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.GetPackageUri%2A>的示例事例。  
  
|`packUri`|返回的包 URI|  
|---------------|--------------------------|  
|pack://http:,,www.proseware.com,mypackage.xyz/a/mydoc.xaml|`http://www.proseware.com/mypackage.xyz`|  
|pack：//http：，，，proseware，包 .aspx %3 f mypackage/a/bar。 xaml|`http://www.proseware.com/packages.aspx?mypackage`|  
|pack：//http：、、proseware、mypackage。 .pkg|`http://www.proseware.com/mypackage.pkg`|  
|pack：//ftp：，，，proseware，包，mypackage1/a/picture|`ftp://ftp.proseware.com/packages/mypackage1.abc`|  
|pack://file：,,, d：、包、mypackage2. .pkg/a/bar。 xaml|`file:///d:/packages/mypackage2.pkg`|  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.IO.Packaging.PackUriHelper.Create" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
        <exception cref="T:System.ArgumentNullException"><paramref name="packUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packUri" /> 不是绝对 <see cref="T:System.Uri" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartUri">
      <MemberSignature Language="C#" Value="public static Uri GetPartUri (Uri packUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri GetPartUri(class System.Uri packUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPartUri (packUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ GetPartUri(Uri ^ packUri);" />
      <MemberSignature Language="F#" Value="static member GetPartUri : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.GetPartUri packUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packUri" Type="System.Uri" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-3.0;netcore-3.0;dotnet-plat-ext-3.1;netcore-3.1;dotnet-plat-ext-5.0;net-5.0" />
      </Parameters>
      <Docs>
        <param name="packUri">从中返回 <see cref="T:System.IO.Packaging.PackagePart" /> URI 的包 URI。</param>
        <summary>返回指定包 URI 内的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。</summary>
        <returns>给定 <paramref name="packUri" /> 中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI，如果 <paramref name="packUri" /> 指向包而不是 <see cref="T:System.IO.Packaging.PackagePart" />，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回 <xref:System.IO.Packaging.PackagePart> URI 相对于包根，是始终以 "/" 开头并且符合[开放打包约定规范](https://go.microsoft.com/fwlink/?LinkID=71255)中定义的语法的绝对路径。  
  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.GetPartUri%2A>的示例事例。  
  
|`packUri`|返回的部件 URI|  
|---------------|-----------------------|  
|pack://http:,,www.proseware.com,mypackage.xyz/a/mydoc.xaml|/a/mydoc.xaml|  
|pack：//http：，，，proseware，包 .aspx %3 f mypackage/a/bar。 xaml|/a/bar.xaml|  
|pack：//http：、、proseware、mypackage。 .pkg|Null|  
|pack：//ftp：，，，proseware，包，mypackage1/a/picture|/a/picture.jpg|  
|pack://file：,,, d：、包、mypackage2. .pkg/a/bar。 xaml|/a/bar.xaml|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
        <exception cref="T:System.ArgumentNullException">如果 <paramref name="packUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">如果 <paramref name="packUri" /> 不是绝对 <see cref="T:System.Uri" />。

- 或 -

<paramref name="packUri" /> 不具有“pack://”方案。
          
- 或 - 
从 <paramref name="packUri" /> 中提取的 partUri 不符合有效 partUri 语法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipPartUri">
      <MemberSignature Language="C#" Value="public static Uri GetRelationshipPartUri (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri GetRelationshipPartUri(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelationshipPartUri (partUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ GetRelationshipPartUri(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="static member GetRelationshipPartUri : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.GetRelationshipPartUri partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">要返回关联 <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 的 URI 的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
        <summary>返回与指定的 <see cref="T:System.IO.Packaging.PackagePart" /> 关联的关系部件的 URI。</summary>
        <returns>与由 <paramref name="partUri" /> 标识的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 关联的 <see cref="T:System.IO.Packaging.PackagePart" /> 部件的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须标识 <xref:System.IO.Packaging.Package> （"/"）或不是 <xref:System.IO.Packaging.PackageRelationship> 部分的 <xref:System.IO.Packaging.PackagePart>。  
  
 有关 <xref:System.IO.Packaging.PackageRelationship> 部分的详细信息，请参阅开放打包约定规范中的 "关系" 9.3 一节，可供下载（在[规范和许可证下载](https://go.microsoft.com/fwlink/?LinkID=71255)中）。  
  
   
  
## Examples  
 [WPF 中的 Pack URI](/dotnet/framework/wpf/app-development/pack-uris-in-wpf)  
  
 [开放式打包约定规范](https://go.microsoft.com/fwlink/?LinkID=71255)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 语法对于包部件 URI 无效。  
  
- 或 - 
 <paramref name="partUri" /> 为绝对 URI。  
  
- 或 - 
 <paramref name="partUri" /> 引用关系部件。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelativeUri">
      <MemberSignature Language="C#" Value="public static Uri GetRelativeUri (Uri sourcePartUri, Uri targetPartUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri GetRelativeUri(class System.Uri sourcePartUri, class System.Uri targetPartUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativeUri (sourcePartUri As Uri, targetPartUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ GetRelativeUri(Uri ^ sourcePartUri, Uri ^ targetPartUri);" />
      <MemberSignature Language="F#" Value="static member GetRelativeUri : Uri * Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.GetRelativeUri (sourcePartUri, targetPartUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourcePartUri" Type="System.Uri" />
        <Parameter Name="targetPartUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="sourcePartUri">源部件的 URI。</param>
        <param name="targetPartUri">目标部件的 URI。</param>
        <summary>返回两个指定的 <see cref="T:System.IO.Packaging.PackagePart" /> URI 之间的相对 URI。</summary>
        <returns>从 <paramref name="sourcePartUri" /> 到 <paramref name="targetPartUri" /> 的相对 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.GetRelativeUri%2A>的示例事例。  
  
|`sourcePartUri`|`targetPartUri`|返回的相对 URI|  
|---------------------|---------------------|---------------------------|  
|/mydoc/markup/page.xml|/mydoc/markup/picture.jpg|图片 .jpg|  
|/mydoc/markup/page.xml|/mydoc/picture.jpg|../picture.jpg|  
|/mydoc/markup/page.xml|/mydoc/images/picture.jpg|../images/picture.jpg|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourcePartUri" /> 或 <paramref name="targetPartUri" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
        <exception cref="T:System.ArgumentException"><paramref name="sourcePartUri" /> 或 <paramref name="targetPartUri" /> 没有有效的 <see cref="T:System.Uri" /> 语法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSourcePartUriFromRelationshipPartUri">
      <MemberSignature Language="C#" Value="public static Uri GetSourcePartUriFromRelationshipPartUri (Uri relationshipPartUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri GetSourcePartUriFromRelationshipPartUri(class System.Uri relationshipPartUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourcePartUriFromRelationshipPartUri (relationshipPartUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ GetSourcePartUriFromRelationshipPartUri(Uri ^ relationshipPartUri);" />
      <MemberSignature Language="F#" Value="static member GetSourcePartUriFromRelationshipPartUri : Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri relationshipPartUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipPartUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="relationshipPartUri">要从中返回 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 的关系部件的 URI。</param>
        <summary>使用指定的 URI 从 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 中返回 <see cref="T:System.IO.Packaging.PackageRelationship" />。</summary>
        <returns>来自于具有指定 <paramref name="relationshipPartUri" /> 的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 关系部件的 <xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> 属性必须标识 <xref:System.IO.Packaging.PackagePart.Package%2A> （"/"）或不是 <xref:System.IO.Packaging.PackageRelationship>的 <xref:System.IO.Packaging.PackagePart>。  
  
 例如，如果包部分 "/files/document.xaml" 是关系部分 "/files/_rels/document.xaml.rels" 的源所有者，则调用具有 "/files/_rels/document.xaml.rels" 的 `relationshipPartUri` 参数的 <xref:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri%2A> 将返回 "/files/document.xaml" 的 <xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipPartUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipPartUri" /> 为绝对 URI。  
  
- 或 - 
 <paramref name="relationshipPartUri" /> 语法对于 <see cref="T:System.IO.Packaging.PackagePart" /> 无效。  
  
- 或 - 
 <paramref name="relationshipPartUri" /> 不引用关系部件。  
  
- 或 - 
关系部件的 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 会引用其他关系部件（无效）。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="IsRelationshipPartUri">
      <MemberSignature Language="C#" Value="public static bool IsRelationshipPartUri (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRelationshipPartUri(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsRelationshipPartUri (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsRelationshipPartUri(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="static member IsRelationshipPartUri : Uri -&gt; bool" Usage="System.IO.Packaging.PackUriHelper.IsRelationshipPartUri partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">用于检查 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的 URI。</param>
        <summary>返回一个值，它指示指定的 URI 是否为 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的 URI。</summary>
        <returns>如果 <paramref name="partUri" /> 标识 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
此方法不检查部分内容;它仅基于名称。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 为绝对 URI。  
  
- 或 - 
 <paramref name="partUri" /> 是无效的 <see cref="T:System.IO.Packaging.PackagePart" /> 语法。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="ResolvePartUri">
      <MemberSignature Language="C#" Value="public static Uri ResolvePartUri (Uri sourcePartUri, Uri targetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri ResolvePartUri(class System.Uri sourcePartUri, class System.Uri targetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResolvePartUri (sourcePartUri As Uri, targetUri As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Uri ^ ResolvePartUri(Uri ^ sourcePartUri, Uri ^ targetUri);" />
      <MemberSignature Language="F#" Value="static member ResolvePartUri : Uri * Uri -&gt; Uri" Usage="System.IO.Packaging.PackUriHelper.ResolvePartUri (sourcePartUri, targetUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourcePartUri" Type="System.Uri" />
        <Parameter Name="targetUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="sourcePartUri">源部件的 URI，或指定 <see cref="T:System.IO.Packaging.Package" /> 根的“/”。</param>
        <param name="targetUri">到目标部件的相对 URI。</param>
        <summary>返回部件 URI，给定源部件 URI 和带有指向目标部件的相对路径的 URI。</summary>
        <returns>指定 <paramref name="SourcePartUri" /> 和 <paramref name="targetUri" /> 参数之间解析的目标部件的 URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表说明 <xref:System.IO.Packaging.PackUriHelper.ResolvePartUri%2A>的示例事例。  
  
|`sourcePartUri`|`targetUri`|返回的 URI|  
|---------------------|-----------------|------------------|  
|/mydoc/markup/page.xml|图片 .jpg|/mydoc/markup/picture.jpg|  
|/mydoc/markup/page.xml|images/picture.jpg|/mydoc/markup/images/picture.jpg|  
|/mydoc/markup/page.xml|./picture.jpg|/mydoc/markup/picture.jpg|  
|/mydoc/markup/page.xml|../picture.jpg|/mydoc/picture.jpg|  
|/mydoc/markup/page.xml|../images/picture.jpg|/mydoc/images/picture.jpg|  
|/|images/picture.jpg|/images/picture.jpg|  
  
   
  
## Examples  
 下面的示例显示如何使用 <xref:System.IO.Packaging.PackUriHelper.ResolvePartUri%2A> 方法。  有关完整示例，请参阅[读取包示例](https://go.microsoft.com/fwlink/?LinkID=160034)。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourcePartUri" /> 或 <paramref name="targetUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="sourcePartUri" /> 不是有效的部件 URI。  
  
- 或 - 
 <paramref name="targetUri" /> 不是有效的相对 URI。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="UriSchemePack">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemePack;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemePack" />
      <MemberSignature Language="DocId" Value="F:System.IO.Packaging.PackUriHelper.UriSchemePack" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UriSchemePack As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ UriSchemePack;" />
      <MemberSignature Language="F#" Value=" staticval mutable UriSchemePack : string" Usage="System.IO.Packaging.PackUriHelper.UriSchemePack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>定义 pack URI 方案名称“pack”。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
