<Type Name="PackagePart" FullName="System.IO.Packaging.PackagePart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f7a563c3bc7907ccbe494fecdd999ebe80967f1" /><Meta Name="ms.sourcegitcommit" Value="ec905a25e6dd05a6a3ffa7f30bf59f3095a8cd67" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/01/2020" /><Meta Name="ms.locfileid" Value="89248611" /></Metadata><TypeSignature Language="C#" Value="public abstract class PackagePart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PackagePart extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackagePart" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PackagePart" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackagePart abstract" />
  <TypeSignature Language="F#" Value="type PackagePart = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.IO.Packaging" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.5.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为存储在 <see cref="T:System.IO.Packaging.Package" /> 中的部分提供基类。  此类为抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart>包含三个基本元素：  
  
|Access|说明|  
|------------|-----------------|  
|<xref:System.IO.Packaging.PackagePart.Uri%2A>|部件的 URI。|  
|<xref:System.IO.Packaging.PackagePart.ContentType%2A>|[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)]内容流的类型。|  
|<xref:System.IO.Packaging.PackagePart.GetStream%2A>|此部分的内容数据流。|  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [WPF 中的 Pack URI](/dotnet/framework/wpf/app-development/pack-uris-in-wpf)  
  
 [开放式打包约定规范](https://go.microsoft.com/fwlink/?LinkID=71255)  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (package As Package, partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.PackagePart : System.IO.Packaging.Package * Uri -&gt; System.IO.Packaging.PackagePart" Usage="new System.IO.Packaging.PackagePart (package, partUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="partUri">部件的 URI，它相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
        <summary>使用指定的父 <see cref="T:System.IO.Packaging.PackagePart" /> 和部件 URI 初始化 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是 <xref:System.IO.Packaging.PackagePart> 符合 [RFC 3986](https://tools.ietf.org/html/rfc3986) *统一资源标识符的有效 uri， (uri) 泛型语法* 规范和 [开放打包约定](https://go.microsoft.com/fwlink/?LinkID=71255) 规范。  
  
 当 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 部分的不是直接已知的，并且在调用时将设置为以后，请使用此构造函数 <xref:System.IO.Packaging.Package.CreatePart%2A> 。  
  
 默认情况下， <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 部件的属性将初始化为 <xref:System.IO.Packaging.CompressionOption.NotCompressed> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;net-5.0;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (package As Package, partUri As Uri, contentType As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.PackagePart : System.IO.Packaging.Package * Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="new System.IO.Packaging.PackagePart (package, partUri, contentType)" />
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string? contentType);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="partUri">部件的 URI，它相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
        <param name="contentType">部分数据流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型。</param>
        <summary>使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" />、部件 URI 和 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是 <xref:System.IO.Packaging.PackagePart> 符合 [RFC 3986](https://tools.ietf.org/html/rfc3986) *统一资源标识符的有效 uri， (uri) 泛型语法* 规范和 [开放打包约定](https://go.microsoft.com/fwlink/?LinkID=71255) 规范。  
  
 默认情况下， <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 部件的属性将初始化为 <xref:System.IO.Packaging.CompressionOption.NotCompressed> 。  
  
 `contentType` 必须是 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 根据 [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文本传输协议-HTTP*、节3.7 生成的类型。  下表显示了 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 文档中使用的内容类型的示例 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 。  
  
|说明|内容类型|  
|-----------------|------------------|  
|字体|application/vnd.apple.mpegurl. ms-opentype|  
|ICC 配置文件|application/vnd.apple.mpegurl. ms-color. iccprofile|  
|JPEG 图像|image/jpeg|  
|模糊字体|application/vnd.apple.mpegurl. ms-package. obfuscated-opentype|  
|PNG 图像|image/png|  
|PrintTicket|application/vnd.apple.mpegurl. ms-printing + xml|  
|TIFF 图像|image/tiff|  
|Windows Media 照片图像|image/vnd.apple.mpegurl. ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;net-5.0;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (package As Package, partUri As Uri, contentType As String, compressionOption As CompressionOption)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PackagePart(System::IO::Packaging::Package ^ package, Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.PackagePart : System.IO.Packaging.Package * Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="new System.IO.Packaging.PackagePart (package, partUri, contentType, compressionOption)" />
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string? contentType, System.IO.Packaging.CompressionOption compressionOption);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="package">此部分的父 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="partUri">部件的 URI，它相对于父 <see cref="T:System.IO.Packaging.Package" /> 根。</param>
        <param name="contentType">部分的数据流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型。</param>
        <param name="compressionOption">部分数据流的压缩选项。</param>
        <summary>使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" />、部件 URI、[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型和 <see cref="T:System.IO.Packaging.CompressionOption" /> 初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` 必须是 <xref:System.IO.Packaging.PackagePart> 符合 [RFC 3986](https://tools.ietf.org/html/rfc3986) *统一资源标识符的有效 uri， (uri) 泛型语法* 规范和 [开放打包约定](https://go.microsoft.com/fwlink/?LinkID=71255) 规范。  
  
 `contentType` 必须是 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 根据 [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文本传输协议-HTTP*、节3.7 生成的类型。  下表显示了 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 文档中使用的内容类型的示例 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 。  
  
|说明|内容类型|  
|-----------------|------------------|  
|字体|application/vnd.apple.mpegurl. ms-opentype|  
|ICC 配置文件|application/vnd.apple.mpegurl. ms-color. iccprofile|  
|JPEG 图像|image/jpeg|  
|模糊字体|application/vnd.apple.mpegurl. ms-package. obfuscated-opentype|  
|PNG 图像|image/png|  
|PrintTicket|application/vnd.apple.mpegurl. ms-printing + xml|  
|TIFF 图像|image/tiff|  
|Windows Media 照片图像|image/vnd.apple.mpegurl. ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> 不是有效的 <see cref="T:System.IO.Packaging.PackagePart" /> URI。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" /> 值无效。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="CompressionOption">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.CompressionOption CompressionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Packaging.CompressionOption CompressionOption" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.CompressionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompressionOption As CompressionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::CompressionOption CompressionOption { System::IO::Packaging::CompressionOption get(); };" />
      <MemberSignature Language="F#" Value="member this.CompressionOption : System.IO.Packaging.CompressionOption" Usage="System.IO.Packaging.PackagePart.CompressionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.CompressionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取部分内容流的压缩选项。</summary>
        <value>部分内容流的压缩选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 是只读属性，只能在父对象处于打开状态时对其进行访问 <xref:System.IO.Packaging.Package> 。  
  
 该 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 属性是由构造函数自动设置的 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> 。  在由构造函数设置后，将 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 无法更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string" Usage="System.IO.Packaging.PackagePart.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取内容流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</summary>
        <value>部分的内容数据流的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 是只读属性，只能在父对象处于打开状态时对其进行访问 <xref:System.IO.Packaging.Package> 。  
  
 该 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 属性是由构造函数自动设置的 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> 。  在由构造函数设置后，将 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 无法更改。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A>属性的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型根据[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616.html) *超文本传输协议-HTTP*、节3.7 而形成。  下表显示了 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 文档中使用的内容类型的示例 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] 。  
  
|说明|内容类型|  
|-----------------|------------------|  
|字体|application/vnd.apple.mpegurl. ms-opentype|  
|ICC 配置文件|application/vnd.apple.mpegurl. ms-color. iccprofile|  
|JPEG 图像|image/jpeg|  
|模糊字体|application/vnd.apple.mpegurl. ms-package. obfuscated-opentype|  
|PNG 图像|image/png|  
|PrintTicket|application/vnd.apple.mpegurl. ms-printing + xml|  
|TIFF 图像|image/tiff|  
|Windows Media 照片图像|image/vnd.apple.mpegurl. ms-photo|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。  
  
\- 或 - 
派生类 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法返回的字符串为空。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分级关系定义此部件与目标部件或资源之间的关联。  部分级别关系可以是以下两种形式之一。  
  
-   在源与之间的 <xref:System.IO.Packaging.PackagePart> 目标之间 <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.Package> 。  
  
-   源 <xref:System.IO.Packaging.PackagePart> 与包外部的目标资源之间的差异。  
  
 在部分关系中，源部分被视为关系的 "所有者"。  删除源部件时，还将删除该部件拥有的所有关系。  创建或删除关系的过程不会以任何方式在物理上改变目标部分或资源。  
  
 此 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 方法不会以任何方式物理更改源部分或目标部分或资源。  
  
 关系的目标不能是另一个关系。  
  
 有关包关系的详细信息，请参阅 * (OPC) 规范的开放打包约定 * 的第1.3 部分，可在下载 <https://go.microsoft.com/fwlink/?LinkID=71255> 。  
  
 有关 XPS 文档的详细信息，请参阅 *OPEN XML 纸张规范 (XPS) * 可供下载 <https://go.microsoft.com/fwlink/?LinkID=67000> 。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationship (targetUri As Uri, targetMode As TargetMode, relationshipType As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="packagePart.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的 URI。</param>
        <param name="targetMode">枚举值之一。 例如，如果目标部分在 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 的内部，则为 <see cref="T:System.IO.Packaging.Package" />；如果目标是 <see cref="F:System.IO.Packaging.TargetMode.External" /> 外部的资源，则为 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="relationshipType">关系的角色。</param>
        <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
        <returns>此 <see cref="T:System.IO.Packaging.PackagePart" /> 与目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分级关系定义此部件与目标部件或资源之间的关联。  部分级别关系可以是以下两种形式之一。  
  
-   在源与之间的 <xref:System.IO.Packaging.PackagePart> 目标之间 <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.Package> 。  
  
-   源 <xref:System.IO.Packaging.PackagePart> 与包外部的目标资源之间的差异。  
  
 在部分关系中，源部分被视为关系的 "所有者"。  删除源部件时，还将删除该部件拥有的所有关系。  创建或删除关系的过程不会以任何方式在物理上改变目标部分或资源。  
  
 此 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 方法不会以任何方式物理更改源部分或目标部分或资源。  
  
 关系的目标不能是另一个关系。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.Internal> ，则 `targetUri` 必须是根据 [RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符形成的相对 Uri， * (URI) 泛型语法* 规范。  内部相对 URI 可以是以正斜杠开头的绝对路径 ( "/" ) 字符，如 "/page1.xaml" 或 "/images/picture4.jpg"）或相对路径（如 ".。。/imagespicture1.jpg "，它解析为包根 ("/") 为基 URI。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.External> ，则 `targetUri` 可以是根据 [RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符形成的绝对 uri 或相对 uri， *) 泛型语法规范 (URI* 。 `"https://www.microsoft.com/page2.xml"` 引用外部目标资源 "page2.xml" 的绝对 URI 的示例。  "images/picture1.jpg" 是相对 URI 的一个示例，它也引用外部目标资源 "1.jpg"，但会根据包本身的 URI 进行解析。  
  
 `relationshipType` 必须是根据 [RFC 3986](https://tools.ietf.org/html/rfc3986) *统一资源标识符（Uri) 泛型语法规范 (URI* 组成的 uri。  不同的包类型可以定义不同的部分级别关系类型。  下表显示了 `relationshipType` 为符合 *Open XML 纸张规范 (XPS) *的文档定义的部分级 uri。  
  
|XPS 文档部件级关系|关系类型 URI|  
|-------------------------------------------|---------------------------|  
|数字签名定义|`http://schemas.microsoft.com/xps/2005/06/signature-definitions`|  
|DiscardControl|`http://schemas.microsoft.com/xps/2005/06/discard-control`|  
|DocumentStructure|`http://schemas.microsoft.com/xps/2005/06/documentstructure`|  
|PrintTicket|`http://schemas.microsoft.com/xps/2005/06/printticket`|  
|所需资源|`http://schemas.microsoft.com/xps/2005/06/required-resource`|  
|限制字体|`http://schemas.microsoft.com/xps/2005/06/restricted-font`|  
|StartPart|`http://schemas.microsoft.com/xps/2005/06/fixedrepresentation`|  
|StoryFragments|`http://schemas.microsoft.com/xps/2005/06/storyfragments`|  
  
 有关包关系的详细信息，请参阅 * (OPC) 规范的开放打包约定 * 的第1.3 部分，可在下载 <https://go.microsoft.com/fwlink/?LinkID=71255> 。  
  
 有关 XPS 文档的详细信息，请参阅 *OPEN XML 纸张规范 (XPS) * 可供下载 [https://go.microsoft.com/fwlink/?LinkID=67000](https://go.microsoft.com/fwlink/?LinkID=67000) 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" /> 参数不是有效的 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。</exception>
        <exception cref="T:System.ArgumentException">由 <paramref name="targetUri" /> 标识的部分是关系（关系的目标不能是另一个关系）。  
  
\- 或 - 
 将 <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，但 <paramref name="targetUri" /> 是一个绝对外部 URI。</exception>
        <exception cref="T:System.IO.IOException">包是只读的（无法添加新关系）。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;net-5.0;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationship (targetUri As Uri, targetMode As TargetMode, relationshipType As String, id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="packagePart.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string? id);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">目标部件的 URI。</param>
        <param name="targetMode">枚举值之一。 例如，如果目标部分在 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 的内部，则为 <see cref="T:System.IO.Packaging.Package" />；如果目标是 <see cref="F:System.IO.Packaging.TargetMode.External" /> 外部的资源，则为 <see cref="T:System.IO.Packaging.Package" />。</param>
        <param name="relationshipType">关系的角色。</param>
        <param name="id">关系的唯一 ID。</param>
        <summary>创建此 <see cref="T:System.IO.Packaging.PackagePart" /> 与指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</summary>
        <returns>此 <see cref="T:System.IO.Packaging.PackagePart" /> 与目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源之间的部分级关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分级关系定义此部件与目标部件或资源之间的关联。  部分级别关系可以是以下两种形式之一。  
  
-   在源与之间的 <xref:System.IO.Packaging.PackagePart> 目标之间 <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.Package> 。  
  
-   源 <xref:System.IO.Packaging.PackagePart> 与包外部的目标资源之间的差异。  
  
 在部分关系中，源部分被视为关系的 "所有者"。  删除源部件时，还将删除该部件拥有的所有关系。  创建或删除关系的过程不会以任何方式在物理上改变目标部分或资源。  
  
 `id` 必须是有效的 XML 标识符。  `id`类型为 xsd： ID，必须遵循*XML 架构第2部分：数据类型*规范中指定的命名约定 (参阅 [https://www.w3.org/TR/xmlschema-2/#ID](https://www.w3.org/TR/xmlschema-2/#ID)) 。  
  
 此 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> 方法不会以任何方式物理更改源部分或目标部分或资源。  
  
 关系的目标不能是另一个关系。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.Internal> ，则 `targetUri` 必须是根据 [RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符形成的相对 Uri， * (URI) 泛型语法* 规范。  内部相对 URI 可以是以正斜杠开头的绝对路径 ( "/" ) 字符，如 "/page1.xaml" 或 "/images/picture4.jpg"）或相对路径（如 ".。。/imagespicture1.jpg "，它解析为包根 ("/") 为基 URI。  
  
 如果 `targetMode` 指定为 <xref:System.IO.Packaging.TargetMode.External> ，则 `targetUri` 可以是根据 [RFC 3986](https://tools.ietf.org/html/rfc3986)统一资源标识符形成的绝对 uri 或相对 uri， *) 泛型语法规范 (URI* 。  " https://www.microsoft.com/page2.xml " 是引用外部目标资源 "page2.xml" 的绝对 URI 的示例。  "images/picture1.jpg" 是相对 URI 的一个示例，它也引用外部目标资源 "1.jpg"，但会根据包本身的 URI 进行解析。  
  
 `relationshipType` 必须是根据 [RFC 3986](https://tools.ietf.org/html/rfc3986) *统一资源标识符（Uri) 泛型语法规范 (URI* 组成的 uri。  不同的包类型可以定义不同的部分级别关系类型。  下表显示了 `relationshipType` 为符合 *Open XML 纸张规范 (XPS) *的文档定义的部分级 uri。  
  
|XPS 文档部件级关系|关系类型 URI|  
|-------------------------------------------|---------------------------|  
|数字签名定义|http://schemas.microsoft.com/xps/2005/06/signature-definitions|  
|DiscardControl|http://schemas.microsoft.com/xps/2005/06/discard-control|  
|DocumentStructure|http://schemas.microsoft.com/xps/2005/06/documentstructure|  
|PrintTicket|http://schemas.microsoft.com/xps/2005/06/printticket|  
|所需资源|http://schemas.microsoft.com/xps/2005/06/required-resource|  
|限制字体|http://schemas.microsoft.com/xps/2005/06/restricted-font|  
|StartPart|http://schemas.microsoft.com/xps/2005/06/fixedrepresentation|  
|StoryFragments|http://schemas.microsoft.com/xps/2005/06/storyfragments|  
  
 有关包关系的详细信息，请参阅 * (OPC) 规范的开放打包约定 * 的第1.3 部分，可在下载 <https://go.microsoft.com/fwlink/?LinkID=71255> 。  
  
 有关 XPS 文档的详细信息，请参阅 *OPEN XML 纸张规范 (XPS) * 可供下载 [https://go.microsoft.com/fwlink/?LinkID=67000](https://go.microsoft.com/fwlink/?LinkID=67000) 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" /> 参数不是有效的 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。</exception>
        <exception cref="T:System.ArgumentException">由 <paramref name="targetUri" /> 标识的部分是关系（关系的目标不能是另一个关系）。  
  
\- 或 - 
 将 <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />，但 <paramref name="targetUri" /> 是一个绝对外部 URI。</exception>
        <exception cref="T:System.IO.IOException">包是只读的（无法添加新关系）。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。  
  
\- 或 - 
已存在具有指定 <paramref name="id" /> 的部分。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="packagePart.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要删除的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>删除指定的部分级 <see cref="T:System.IO.Packaging.PackageRelationship" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。  `id`类型为 xsd： ID，必须遵循*XML 架构第2部分：数据类型*规范中指定的命名约定 (参阅 [https://www.w3.org/TR/xmlschema-2/#ID](https://www.w3.org/TR/xmlschema-2/#ID)) 。  
  
 如果指定的 `id` <xref:System.IO.Packaging.PackageRelationship.Id%2A> 对于此部分拥有的任何关系都不匹配，则不会删除任何关系，也不会引发异常。  
  
 除了删除指定关系外，该 <xref:System.IO.Packaging.PackagePart.DeleteRelationship%2A> 方法不会以物理方式更改此部分或目标部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">包是只读的（无法删除关系）。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetContentTypeCore">
      <MemberSignature Language="C#" Value="protected virtual string GetContentTypeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetContentTypeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetContentTypeCore () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetContentTypeCore();" />
      <MemberSignature Language="F#" Value="abstract member GetContentTypeCore : unit -&gt; string&#xA;override this.GetContentTypeCore : unit -&gt; string" Usage="packagePart.GetContentTypeCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当在派生类中重写时，返回部分内容的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</summary>
        <returns>部分内容的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A> 是抽象基类的虚拟方法 <xref:System.IO.Packaging.PackagePart> 。 仅在无法在构造时提供内容类型值的派生类型中实现此方法，或者如果计算内容类型值为重要或成本高昂的操作，则为。 返回值必须是有效的 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 内容类型。  
  
 派生类可以调用 <xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A> 将 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 派生类的属性初始化为默认值。  <xref:System.IO.Packaging.PackagePart.ContentType%2A>设置属性后，无法对其进行更改。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">派生类不为 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法提供所需的重写实现。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="packagePart.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>返回具有指定 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的关系。</summary>
        <returns>与指定 <paramref name="id" /> 相匹配的关系。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。  `id`类型为 xsd： ID，必须遵循*XML 架构第2部分：数据类型*规范中指定的命名约定 (参阅 [https://www.w3.org/TR/xmlschema-2/#ID](https://www.w3.org/TR/xmlschema-2/#ID)) 。  
  
 您可以使用 <xref:System.IO.Packaging.PackagePart.RelationshipExists%2A> 方法来确定具有指定的关系 <xref:System.IO.Packaging.PackageRelationship.Id%2A> 是否属于此部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> 是一个空字符串。</exception>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。  
  
\- 或 - 
包中不存在具有指定 <paramref name="id" /> 的关系。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="packagePart.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此部分拥有的所有关系的集合。</summary>
        <returns>此部分拥有的所有关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的集合从不 `null` 为; 但是，如果该部件未定义任何关系，则该集合可能包含零个元素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="packagePart.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">要在集合中查找并返回的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
        <summary>返回与指定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 相匹配的关系的集合。</summary>
        <returns>与指定 <paramref name="relationshipType" /> 相匹配的关系的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的集合始终为 `null` ; 但是，如果没有与为部件定义的指定匹配的关系，则集合可能包含零个元素 `relationshipType` 。  
  
 字符串中的所有前导空格或尾随空格 `relationshipType` 都将自动裁剪。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> 是一个空字符串。</exception>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">开放式打包约定规范</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回部分内容数据流。</summary>
        <block subset="none" type="usage"><para>
            <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 在内部调用派生 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法，以实际打开并返回基于派生类中实现的物理格式的部分数据流。  
  
默认情况下，将 <see cref="T:System.IO.Packaging.ZipPackagePart" /> <see cref="T:System.IO.Packaging.PackagePart" /> 提供并使用抽象类的子类实现。  在默认操作中，在 <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 内部调用 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> <see cref="T:System.IO.Packaging.ZipPackagePart" /> 类以打开并返回 ZIP 文件中的部分数据流。</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberSignature Language="F#" Value="member this.GetStream : unit -&gt; System.IO.Stream" Usage="packagePart.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回部分内容数据流。</summary>
        <returns>此部分的内容数据流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法会打开内容流，其具有 <xref:System.IO.FileMode> <xref:System.IO.FileMode.OpenOrCreate> 和 <xref:System.IO.FileAccess> 权限，这些权限与父级相同 <xref:System.IO.Packaging.Package> 。  
  
 重载 <xref:System.IO.Packaging.PackagePart.GetStream%2A> 方法允许您设置特定的 <xref:System.IO.FileMode> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 <see langword="null" />。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream" /> 在内部调用派生 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法，以实际打开并返回基于派生类中实现的物理格式的部分数据流。  
  
默认情况下，将 <see cref="T:System.IO.Packaging.ZipPackagePart" /> <see cref="T:System.IO.Packaging.PackagePart" /> 提供并使用抽象类的子类实现。  在默认操作中，在 <see cref="M:System.IO.Packaging.PackagePart.GetStream" /> 内部调用 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> <see cref="T:System.IO.Packaging.ZipPackagePart" /> 类以打开并返回 ZIP 文件中的部分数据流。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (mode As FileMode) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream(System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="member this.GetStream : System.IO.FileMode -&gt; System.IO.Stream" Usage="packagePart.GetStream mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="mode">打开内容流时采用的 I/O 模式。</param>
        <summary>返回在指定 I/O <see cref="T:System.IO.FileMode" /> 中打开的内容流。</summary>
        <returns>此部分的内容流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileAccess>返回内容流的权限与父对象的权限相同 <xref:System.IO.Packaging.Package> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 参数不是有效的 <see cref="T:System.IO.FileMode" /> 枚举值。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="mode" /> 参数与包和部分流不兼容。  
  
\- 或 - 
派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 <see langword="null" />。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" /> 在内部调用派生 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法，以实际打开并返回基于派生类中实现的物理格式的部分数据流。  
  
默认情况下，将 <see cref="T:System.IO.Packaging.ZipPackagePart" /> <see cref="T:System.IO.Packaging.PackagePart" /> 提供并使用抽象类的子类实现。  在默认操作中，在 <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" /> 内部调用 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> <see cref="T:System.IO.Packaging.ZipPackagePart" /> 类以打开并返回 ZIP 文件中的部分数据流。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (mode As FileMode, access As FileAccess) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream(System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="member this.GetStream : System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Stream" Usage="packagePart.GetStream (mode, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">打开内容流时采用的 I/O 模式。</param>
        <param name="access">打开内容流时使用的访问权限。</param>
        <summary>返回使用指定 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 打开的部分内容流。</summary>
        <returns>此部分的内容流。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 参数不是有效的 <see cref="T:System.IO.FileMode" /> 枚举值。  
  
\- 或 - 
<paramref name="access" /> 参数不是有效的 <see cref="T:System.IO.FileAccess" /> 枚举值。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="mode" /> 或 <paramref name="access" /> 与包和部分流不兼容。  
  
\- 或 - 
<paramref name="access" /> 参数指定为 <see cref="F:System.IO.FileAccess.Read" />，但 <paramref name="mode" /> 参数需要写访问权。  （<see cref="T:System.IO.FileMode" />、<see cref="F:System.IO.FileMode.Create" />、<see cref="F:System.IO.FileMode.CreateNew" /> 和 <see cref="F:System.IO.FileMode.Truncate" /> 的 <see cref="F:System.IO.FileMode.Append" /> 值需要 <see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" /> 访问权限。） 
\- 或 - 
派生子类的 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法返回的流对象是 <see langword="null" />。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> 在内部调用派生 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法，以实际打开并返回基于派生类中实现的物理格式的部分数据流。  
  
默认情况下，将 <see cref="T:System.IO.Packaging.ZipPackagePart" /> <see cref="T:System.IO.Packaging.PackagePart" /> 提供并使用抽象类的子类实现。  在默认操作中，在 <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> 内部调用 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> <see cref="T:System.IO.Packaging.ZipPackagePart" /> 类以打开并返回 ZIP 文件中的部分数据流。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetStreamCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Stream GetStreamCore (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Stream GetStreamCore(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetStreamCore (mode As FileMode, access As FileAccess) As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Stream ^ GetStreamCore(System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="abstract member GetStreamCore : System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Stream" Usage="packagePart.GetStreamCore (mode, access)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">打开内容流时采用的 I/O 模式。</param>
        <param name="access">打开内容流时使用的访问权限。</param>
        <summary>当在派生类中重写时，返回使用指定的 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 打开的部分内容流。</summary>
        <returns>此部分的内容数据流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序不应 <xref:System.IO.Packaging.PackagePart.GetStreamCore%2A> 直接调用，而应调用 <xref:System.IO.Packaging.PackagePart.GetStream%2A> 。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 实现不应对调用它的方法所执行的顺序或操作进行任何假设 <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 。</para></block>
        <block subset="none" type="usage"><para>派生 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 方法由方法调用， <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 以打开并返回基于派生类中实现的物理格式的部分数据流。  
  
默认情况下，将 <see cref="T:System.IO.Packaging.ZipPackagePart" /> <see cref="T:System.IO.Packaging.PackagePart" /> 提供并使用抽象类的子类实现。  在默认操作中，在 <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 内部调用 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> <see cref="T:System.IO.Packaging.ZipPackagePart" /> 类以打开并返回 ZIP 文件中的部分数据流。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Package">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.Package Package { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.Package Package" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Package" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Package As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::Package ^ Package { System::IO::Packaging::Package ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Package : System.IO.Packaging.Package" Usage="System.IO.Packaging.PackagePart.Package" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此部分的父 <see cref="T:System.IO.Packaging.Package" />。</summary>
        <value>此部分的父包。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.Package%2A> 是只读属性，只能在父对象处于打开状态时对其进行访问 <xref:System.IO.Packaging.Package> 。  
  
 该 <xref:System.IO.Packaging.PackagePart.Package%2A> 属性是由构造函数自动设置的 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> 。  在由构造函数设置后，将无法更改该部件的父项 <xref:System.IO.Packaging.PackagePart.Package%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="packagePart.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">要检查的关系的 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>返回一个值，指示此部分是否拥有具有指定 <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的关系。</summary>
        <returns>如果此部分拥有具有指定 <paramref name="id" /> 的关系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 必须是有效的 XML 标识符。  `id`类型为 xsd： ID，必须遵循*XML 架构第2部分：数据类型*规范中指定的命名约定 (参阅 [https://www.w3.org/TR/xmlschema-2/#ID](https://www.w3.org/TR/xmlschema-2/#ID)) 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> 不是有效的 XML 标识符。</exception>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <exception cref="T:System.IO.IOException">包是只写的（无法读取关系信息）。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Uri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Uri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Uri { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="System.IO.Packaging.PackagePart.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取部件的 URI。</summary>
        <value>相对于包根的部件的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackagePart.Uri%2A> 是只读属性，只能在父对象处于打开状态时对其进行访问 <xref:System.IO.Packaging.Package> 。  
  
 该 <xref:System.IO.Packaging.PackagePart.Uri%2A> 属性是由构造函数自动设置的 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> 。  在由构造函数设置后， <xref:System.IO.Packaging.PackagePart.Uri%2A> 无法更改部分的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已删除此部分。  
  
\- 或 - 
<see cref="P:System.IO.Packaging.PackagePart.Package" /> 没有打开（调用了 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" />）。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>
