<Type Name="SequenceMarshal" FullName="System.Runtime.InteropServices.SequenceMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca9c7e4ed44546f7428db54e59b567f898365e89" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86763051" /></Metadata><TypeSignature Language="C#" Value="public static class SequenceMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SequenceMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SequenceMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class SequenceMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class SequenceMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type SequenceMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Memory" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供与 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 进行互操作的方法集合。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (System.Buffers.ReadOnlySequence&lt;T&gt;? sequence, out ArraySegment&lt;T&gt;? segment);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.Buffers.ReadOnlySequence`1&lt;!!T&gt; sequence, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (sequence As ReadOnlySequence(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(System::Buffers::ReadOnlySequence&lt;T&gt; sequence, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : System.Buffers.ReadOnlySequence&lt;'T&gt; * ArraySegment -&gt; bool" Usage="System.Runtime.InteropServices.SequenceMarshal.TryGetArray (sequence, segment)" />
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (System.Buffers.ReadOnlySequence&lt;T&gt; sequence, out ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">只读序列的类型。</typeparam>
        <param name="sequence">要从中检索数组段的只读序列。</param>
        <param name="segment">返回的数组段。</param>
        <summary>获取基础只读序列中的数组段。</summary>
        <returns>如果可以检索数组段，则为 <see langword="true" />；否则为 <see langword="false" /> 且返回默认数组段。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetReadOnlyMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetReadOnlyMemory&lt;T&gt; (System.Buffers.ReadOnlySequence&lt;T&gt;? sequence, out ReadOnlyMemory&lt;T&gt;? memory);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetReadOnlyMemory&lt;T&gt;(valuetype System.Buffers.ReadOnlySequence`1&lt;!!T&gt; sequence, [out] valuetype System.ReadOnlyMemory`1&lt;!!T&gt;&amp; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetReadOnlyMemory(Of T) (sequence As ReadOnlySequence(Of T), ByRef memory As ReadOnlyMemory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetReadOnlyMemory(System::Buffers::ReadOnlySequence&lt;T&gt; sequence, [Runtime::InteropServices::Out] ReadOnlyMemory&lt;T&gt; % memory);" />
      <MemberSignature Language="F#" Value="static member TryGetReadOnlyMemory : System.Buffers.ReadOnlySequence&lt;'T&gt; * ReadOnlyMemory -&gt; bool" Usage="System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory (sequence, memory)" />
      <MemberSignature Language="C#" Value="public static bool TryGetReadOnlyMemory&lt;T&gt; (System.Buffers.ReadOnlySequence&lt;T&gt; sequence, out ReadOnlyMemory&lt;T&gt; memory);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">只读序列的类型。</typeparam>
        <param name="sequence">要从中检索内存的只读序列。</param>
        <param name="memory">返回的类型为 T 的只读内存。</param>
        <summary>尝试检索指定的只读序列中的只读内存。</summary>
        <returns>如果可以检索只读内存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetReadOnlySequenceSegment&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetReadOnlySequenceSegment&lt;T&gt; (System.Buffers.ReadOnlySequence&lt;T&gt;? sequence, out System.Buffers.ReadOnlySequenceSegment&lt;T&gt;? startSegment, out int startIndex, out System.Buffers.ReadOnlySequenceSegment&lt;T&gt;? endSegment, out int endIndex);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetReadOnlySequenceSegment&lt;T&gt;(valuetype System.Buffers.ReadOnlySequence`1&lt;!!T&gt; sequence, [out] class System.Buffers.ReadOnlySequenceSegment`1&lt;!!T&gt;&amp; startSegment, [out] int32&amp; startIndex, [out] class System.Buffers.ReadOnlySequenceSegment`1&lt;!!T&gt;&amp; endSegment, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetReadOnlySequenceSegment(Of T) (sequence As ReadOnlySequence(Of T), ByRef startSegment As ReadOnlySequenceSegment(Of T), ByRef startIndex As Integer, ByRef endSegment As ReadOnlySequenceSegment(Of T), ByRef endIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetReadOnlySequenceSegment(System::Buffers::ReadOnlySequence&lt;T&gt; sequence, [Runtime::InteropServices::Out] System::Buffers::ReadOnlySequenceSegment&lt;T&gt; ^ % startSegment, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] System::Buffers::ReadOnlySequenceSegment&lt;T&gt; ^ % endSegment, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="static member TryGetReadOnlySequenceSegment : System.Buffers.ReadOnlySequence&lt;'T&gt; * ReadOnlySequenceSegment * int * ReadOnlySequenceSegment * int -&gt; bool" Usage="System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment (sequence, startSegment, startIndex, endSegment, endIndex)" />
      <MemberSignature Language="C#" Value="public static bool TryGetReadOnlySequenceSegment&lt;T&gt; (System.Buffers.ReadOnlySequence&lt;T&gt; sequence, out System.Buffers.ReadOnlySequenceSegment&lt;T&gt; startSegment, out int startIndex, out System.Buffers.ReadOnlySequenceSegment&lt;T&gt; endSegment, out int endIndex);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sequence" Type="System.Buffers.ReadOnlySequence&lt;T&gt;" />
        <Parameter Name="startSegment" Type="System.Buffers.ReadOnlySequenceSegment&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endSegment" Type="System.Buffers.ReadOnlySequenceSegment&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">只读序列的类型。</typeparam>
        <param name="sequence">从中检索只读序列段的只读序列。</param>
        <param name="startSegment">只读序列段的开头。</param>
        <param name="startIndex">初始位置。</param>
        <param name="endSegment">只读序列段的结尾。</param>
        <param name="endIndex">最终位置。</param>
        <summary>尝试检索指定的只读序列中的只读序列段。</summary>
        <returns>如果可以检索只读序列段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ref System.Buffers.SequenceReader&lt;byte&gt; reader, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Buffers.SequenceReader`1&lt;unsigned int8&gt;&amp; reader, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (ByRef reader As SequenceReader(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(System::Buffers::SequenceReader&lt;System::Byte&gt; % reader, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : SequenceReader * 'T -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.SequenceMarshal.TryRead (reader, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Buffers.SequenceReader&lt;System.Byte&gt;" RefType="ref" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
        <Parameter Name="value" Type="T" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">值的类型。</typeparam>
        <param name="reader">对序列读取器的引用。</param>
        <param name="value">如果读取成功，则为返回值。 如果（由于空间不足）失败，<paramref name="value" /> 将为 <see langword="default" />。</param>
        <summary>尝试读取缓冲区外的指定类型。 将此方法与任意结构一起使用不太安全 - 请参阅注释以获取详细信息。</summary>
        <returns>如果读取尝试成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> Read 是位的直接副本。 如果结构依赖于其成员的特定状态才能正常运行，这可能会导致异常。 如果要读取 endian 特定的整数，请使用显式重载，如 [TryReadLittleEndian (SequenceReader \<Byte> 、Int32) ](xref:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian%2A)。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
