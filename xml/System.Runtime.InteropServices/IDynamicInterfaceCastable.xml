<Type Name="IDynamicInterfaceCastable" FullName="System.Runtime.InteropServices.IDynamicInterfaceCastable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31326aec14dbc7d4426d7c89d7fd90bc51f217c3" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89862400" /></Metadata><TypeSignature Language="C#" Value="public interface IDynamicInterfaceCastable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicInterfaceCastable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.IDynamicInterfaceCastable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicInterfaceCastable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDynamicInterfaceCastable" />
  <TypeSignature Language="F#" Value="type IDynamicInterfaceCastable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>用于参与类型强制转换失败的接口。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

此接口在值类型上的实现将被忽略。 仅允许非值类型通过此接口参与类型转换失败。

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetInterfaceImplementation">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle GetInterfaceImplementation (RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.RuntimeTypeHandle GetInterfaceImplementation(valuetype System.RuntimeTypeHandle interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceImplementation (interfaceType As RuntimeTypeHandle) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeTypeHandle GetInterfaceImplementation(RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceImplementation : RuntimeTypeHandle -&gt; RuntimeTypeHandle" Usage="iDynamicInterfaceCastable.GetInterfaceImplementation interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="interfaceType">接口类型。</param>
        <summary>当类的元数据中找不到给定接口类型时，在接口调度期间调用。</summary>
        <returns>应该用于在当前对象上为 <paramref name="interfaceType" /> 调度的类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

调用此函数时，应已通过说明对该对象到给定接口的强制转换 `castclass/isinst` 。
返回的类型必须是接口类型并标记为 <xref:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute> 。 否则， <xref:System.InvalidOperationException> 将引发。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">返回的类型不是接口类型，或者未使用 <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> 进行标记。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInterfaceImplemented">
      <MemberSignature Language="C#" Value="public bool IsInterfaceImplemented (RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInterfaceImplemented(valuetype System.RuntimeTypeHandle interfaceType, bool throwIfNotImplemented) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInterfaceImplemented (interfaceType As RuntimeTypeHandle, throwIfNotImplemented As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInterfaceImplemented(RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="F#" Value="abstract member IsInterfaceImplemented : RuntimeTypeHandle * bool -&gt; bool" Usage="iDynamicInterfaceCastable.IsInterfaceImplemented (interfaceType, throwIfNotImplemented)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
        <Parameter Name="throwIfNotImplemented" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="interfaceType">接口类型。</param>
        <param name="throwIfNotImplemented">指示函数是应引发异常，还是应返回 <see langword="false" />。</param>
        <summary>在将实现的类实例强制转换为该类的元数据中不包含的接口类型时调用。</summary>
        <returns>如果此对象可以强制转换为给定接口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

如果将此对象强制转换为给定接口类型会失败，则会调用此方法。 此处强制转换指的 `isinst` `castclass` 是在为其提供接口类型作为目标类型的情况下的 IL 和说明。
如果 `throwIfNotImplemented` 为 `false` ，则此函数应避免引发异常。 如果 `throwIfNotImplemented` 为 `true` 并且此函数返回 `false` ，则 <xref:System.InvalidCastException> 将引发，除非实现引发了异常。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
