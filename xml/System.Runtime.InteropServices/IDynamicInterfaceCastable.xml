<Type Name="IDynamicInterfaceCastable" FullName="System.Runtime.InteropServices.IDynamicInterfaceCastable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9314c57351d9a95637ff30629f63745b0e1f6b02" /><Meta Name="ms.sourcegitcommit" Value="6fca7f55940a389853cc2d183619073ce0d69092" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/26/2020" /><Meta Name="ms.locfileid" Value="88868142" /></Metadata><TypeSignature Language="C#" Value="public interface IDynamicInterfaceCastable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicInterfaceCastable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.IDynamicInterfaceCastable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicInterfaceCastable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDynamicInterfaceCastable" />
  <TypeSignature Language="F#" Value="type IDynamicInterfaceCastable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="da148-101">用于参与类型强制转换失败的接口。</span><span class="sxs-lookup"><span data-stu-id="da148-101">Interface used to participate in a type cast failure.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="da148-102">此接口在值类型上的实现将被忽略。</span><span class="sxs-lookup"><span data-stu-id="da148-102">Implementation of this interface on a value type will be ignored.</span></span> <span data-ttu-id="da148-103">仅允许非值类型通过此接口参与类型转换失败。</span><span class="sxs-lookup"><span data-stu-id="da148-103">Only non-value types are allowed to participate in a type cast failure through this interface.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetInterfaceImplementation">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle GetInterfaceImplementation (RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.RuntimeTypeHandle GetInterfaceImplementation(valuetype System.RuntimeTypeHandle interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceImplementation (interfaceType As RuntimeTypeHandle) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeTypeHandle GetInterfaceImplementation(RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceImplementation : RuntimeTypeHandle -&gt; RuntimeTypeHandle" Usage="iDynamicInterfaceCastable.GetInterfaceImplementation interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="da148-104">接口类型。</span><span class="sxs-lookup"><span data-stu-id="da148-104">The interface type.</span></span></param>
        <summary><span data-ttu-id="da148-105">当类的元数据中找不到给定接口类型时，在接口调度期间调用。</span><span class="sxs-lookup"><span data-stu-id="da148-105">Called during interface dispatch when the given interface type cannot be found in the class's metadata.</span></span></summary>
        <returns><span data-ttu-id="da148-106">应该用于在当前对象上为 <paramref name="interfaceType" /> 调度的类型。</span><span class="sxs-lookup"><span data-stu-id="da148-106">The type that should be used to dispatch for <paramref name="interfaceType" /> on the current object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="da148-107">调用此函数时，应已通过说明对该对象到给定接口的强制转换 `castclass/isinst` 。</span><span class="sxs-lookup"><span data-stu-id="da148-107">When this function is called, the cast of this object to the given interface should already have been verified through the `castclass/isinst` instructions.</span></span>
<span data-ttu-id="da148-108">返回的类型必须是接口类型并标记为 <xref:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="da148-108">The returned type must be an interface type and be marked with the <xref:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute>.</span></span> <span data-ttu-id="da148-109">否则， <xref:System.InvalidOperationException> 将引发。</span><span class="sxs-lookup"><span data-stu-id="da148-109">Otherwise, <xref:System.InvalidOperationException> will be thrown.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="da148-110">返回的类型不是接口类型，或者未使用 <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> 进行标记。</span><span class="sxs-lookup"><span data-stu-id="da148-110">The returned type is not an interface type, or it was not marked with the <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsInterfaceImplemented">
      <MemberSignature Language="C#" Value="public bool IsInterfaceImplemented (RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInterfaceImplemented(valuetype System.RuntimeTypeHandle interfaceType, bool throwIfNotImplemented) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInterfaceImplemented (interfaceType As RuntimeTypeHandle, throwIfNotImplemented As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInterfaceImplemented(RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="F#" Value="abstract member IsInterfaceImplemented : RuntimeTypeHandle * bool -&gt; bool" Usage="iDynamicInterfaceCastable.IsInterfaceImplemented (interfaceType, throwIfNotImplemented)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
        <Parameter Name="throwIfNotImplemented" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="da148-111">接口类型。</span><span class="sxs-lookup"><span data-stu-id="da148-111">The interface type.</span></span></param>
        <param name="throwIfNotImplemented"><span data-ttu-id="da148-112">指示函数是应引发异常，还是应返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="da148-112">Indicates if the function should throw an exception instead of returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="da148-113">在将实现的类实例强制转换为该类的元数据中不包含的接口类型时调用。</span><span class="sxs-lookup"><span data-stu-id="da148-113">Called when an implementing class instance is cast to an interface type that is not contained in the class's metadata.</span></span></summary>
        <returns><span data-ttu-id="da148-114">如果此对象可以强制转换为给定接口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="da148-114"><see langword="true" /> if this object can be cast to the given interface; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="da148-115">如果将此对象强制转换为给定接口类型会失败，则会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="da148-115">This is called if casting this object to the given interface type would otherwise fail.</span></span> <span data-ttu-id="da148-116">此处强制转换指的 `isinst` `castclass` 是在为其提供接口类型作为目标类型的情况下的 IL 和说明。</span><span class="sxs-lookup"><span data-stu-id="da148-116">Casting here means the IL `isinst` and `castclass` instructions in the case where they are given an interface type as the target type.</span></span>
<span data-ttu-id="da148-117">如果 `throwIfNotImplemented` 为 `false` ，则此函数应避免引发异常。</span><span class="sxs-lookup"><span data-stu-id="da148-117">If `throwIfNotImplemented` is `false`, this function should avoid throwing exceptions.</span></span> <span data-ttu-id="da148-118">如果 `throwIfNotImplemented` 为 `true` 并且此函数返回 `false` ，则 <xref:System.InvalidCastException> 将引发，除非实现引发了异常。</span><span class="sxs-lookup"><span data-stu-id="da148-118">If `throwIfNotImplemented` is `true` and this function returns `false`, then <xref:System.InvalidCastException> will be thrown unless an exception is thrown by the implementation.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
