<Type Name="ExtensibleClassFactory" FullName="System.Runtime.InteropServices.ExtensibleClassFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="46f1f358bdb52c32f5076a22fc81232e956f93c1" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86764481" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExtensibleClassFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExtensibleClassFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ExtensibleClassFactory" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExtensibleClassFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExtensibleClassFactory sealed" />
  <TypeSignature Language="F#" Value="type ExtensibleClassFactory = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f8462-101">在创建过程中启用从非托管对象扩展的托管对象的自定义。</span><span class="sxs-lookup"><span data-stu-id="f8462-101">Enables customization of managed objects that extend from unmanaged objects during creation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8462-102">`ExtensibleClassFactory`允许用户指定在 `delegate` 构造运行时可调用包装过程中调用的， (RCW) 提供基础 COM 对象的实例。</span><span class="sxs-lookup"><span data-stu-id="f8462-102">The `ExtensibleClassFactory` allows users to specify a `delegate` that is called during construction of a runtime callable wrapper (RCW) that provides an instance of the underlying COM object.</span></span> <span data-ttu-id="f8462-103">实际上，回调作为 RCW 包装的 COM 对象的类工厂。</span><span class="sxs-lookup"><span data-stu-id="f8462-103">In effect, the callback acts as the class factory for the COM object wrapped by the RCW.</span></span> <span data-ttu-id="f8462-104">在没有回调的情况下，公共语言运行时通过调用创建基础 COM 对象 `CoCreateInstance` 。</span><span class="sxs-lookup"><span data-stu-id="f8462-104">Without the callback, the common language runtime creates the underlying COM object by calling `CoCreateInstance`.</span></span> <span data-ttu-id="f8462-105">此回调提供了一种激活基础对象（如使用 COM 名字对象或提供单一实例对象）的替代方法。</span><span class="sxs-lookup"><span data-stu-id="f8462-105">This callback provides an alternative way of activating the underlying object, such as with a COM moniker or by providing a singleton object.</span></span> <span data-ttu-id="f8462-106">此 <xref:System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback%2A> 方法必须在 `static` 扩展 RCW 的类的初始化表达式中调用。</span><span class="sxs-lookup"><span data-stu-id="f8462-106">The <xref:System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback%2A> method must be called in the `static` initializer of the class that is extending the RCW.</span></span> <span data-ttu-id="f8462-107">每个对象类型只允许一个对象创建回调。</span><span class="sxs-lookup"><span data-stu-id="f8462-107">Only one object creation callback is permitted per object type.</span></span> <span data-ttu-id="f8462-108">激活可扩展的 RCW 后，将注册回调。</span><span class="sxs-lookup"><span data-stu-id="f8462-108">When the extensible RCW is activated, the callback is registered.</span></span> <span data-ttu-id="f8462-109">需要创建基础 COM 对象时，调用回调以提供对对象的引用。</span><span class="sxs-lookup"><span data-stu-id="f8462-109">When the underlying COM object needs to be created, the callback is called to provide a reference to the object.</span></span> <span data-ttu-id="f8462-110">回调必须返回 `IUnknown` 基对象的接口指针。</span><span class="sxs-lookup"><span data-stu-id="f8462-110">The callback must return an `IUnknown` interface pointer for the base object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8462-111">注册 `delegate` 每当从非托管类型扩展的托管类型的实例需要分配聚合的非托管对象时，都会调用。</span><span class="sxs-lookup"><span data-stu-id="f8462-111">Registers a `delegate` that will be called whenever an instance of a managed type that extends from an unmanaged type needs to allocate the aggregated unmanaged object.</span></span> <span data-ttu-id="f8462-112">这 `delegate` 应该会分配和聚合非托管对象，并调用来代替 `CoCreateInstance` 。</span><span class="sxs-lookup"><span data-stu-id="f8462-112">This `delegate` is expected to allocate and aggregate the unmanaged object and is called in place of a `CoCreateInstance`.</span></span> <span data-ttu-id="f8462-113">必须在要 `static` 对其进行回调的类的初始值设定项的上下文中调用此例程。</span><span class="sxs-lookup"><span data-stu-id="f8462-113">This routine must be called in the context of the `static` initializer for the class for which the callbacks will be made.</span></span>  
  
 [!code-cpp[Classic ExtensibleClassFactory Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ExtensibleClassFactory Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ExtensibleClassFactory Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ExtensibleClassFactory Example/CS/source.cs#1)]
 [!code-vb[Classic ExtensibleClassFactory Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ExtensibleClassFactory Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="RegisterObjectCreationCallback">
      <MemberSignature Language="C#" Value="public static void RegisterObjectCreationCallback (System.Runtime.InteropServices.ObjectCreationDelegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterObjectCreationCallback(class System.Runtime.InteropServices.ObjectCreationDelegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback(System.Runtime.InteropServices.ObjectCreationDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterObjectCreationCallback (callback As ObjectCreationDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterObjectCreationCallback(System::Runtime::InteropServices::ObjectCreationDelegate ^ callback);" />
      <MemberSignature Language="F#" Value="static member RegisterObjectCreationCallback : System.Runtime.InteropServices.ObjectCreationDelegate -&gt; unit" Usage="System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Runtime.InteropServices.ObjectCreationDelegate" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f8462-114">代替 <see langword="delegate" /> 调用的 <see langword="CoCreateInstance" />。</span><span class="sxs-lookup"><span data-stu-id="f8462-114">A <see langword="delegate" /> that is called in place of <see langword="CoCreateInstance" />.</span></span></param>
        <summary><span data-ttu-id="f8462-115">注册一个 <see langword="delegate" />，每次从非托管类型扩展的托管类型的实例需要分配聚合的非托管对象时，都要调用该委托。</span><span class="sxs-lookup"><span data-stu-id="f8462-115">Registers a <see langword="delegate" /> that is called when an instance of a managed type, that extends from an unmanaged type, needs to allocate the aggregated unmanaged object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8462-116">这将 `delegate` 分配并聚合非托管对象，并调用来代替 `CoCreateInstance` 。</span><span class="sxs-lookup"><span data-stu-id="f8462-116">This `delegate` allocates and aggregates the unmanaged object and is called in place of `CoCreateInstance`.</span></span> <span data-ttu-id="f8462-117">`delegate`必须在要 `static` 对其进行回调的类初始值设定项的上下文中注册此项。</span><span class="sxs-lookup"><span data-stu-id="f8462-117">This `delegate` must be registered in the context of the `static` class initializer for which the callbacks will be made.</span></span>  
  
 <span data-ttu-id="f8462-118">层次结构中只有一个类应注册 `delegate` 回调。</span><span class="sxs-lookup"><span data-stu-id="f8462-118">Only one class in an hierarchy should register a `delegate` callback.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
