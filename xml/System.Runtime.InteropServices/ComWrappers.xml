<Type Name="ComWrappers" FullName="System.Runtime.InteropServices.ComWrappers">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27c879530337a8a66a03fb6f8b07a240fda169d7" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89981999" /></Metadata><TypeSignature Language="C#" Value="public abstract class ComWrappers" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ComWrappers extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ComWrappers" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ComWrappers" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComWrappers abstract" />
  <TypeSignature Language="F#" Value="type ComWrappers = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="eac86-101">用于管理 COM IUnknown 类型包装器的类。</span><span class="sxs-lookup"><span data-stu-id="eac86-101">Class for managing wrappers of COM IUnknown types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ComWrappers();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eac86-102">实例构造函数。</span><span class="sxs-lookup"><span data-stu-id="eac86-102">Instance constructor.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeVtables">
      <MemberSignature Language="C#" Value="protected abstract System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry* ComputeVtables (object? obj, System.Runtime.InteropServices.CreateComInterfaceFlags flags, out int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Runtime.InteropServices.ComWrappers/ComInterfaceEntry* ComputeVtables(object obj, valuetype System.Runtime.InteropServices.CreateComInterfaceFlags flags, [out] int32&amp; count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Runtime::InteropServices::ComWrappers::ComInterfaceEntry* ComputeVtables(System::Object ^ obj, System::Runtime::InteropServices::CreateComInterfaceFlags flags, [Runtime::InteropServices::Out] int % count);" />
      <MemberSignature Language="F#" Value="abstract member ComputeVtables : obj * System.Runtime.InteropServices.CreateComInterfaceFlags * int -&gt; nativeptr&lt;System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry&gt;" Usage="comWrappers.ComputeVtables (obj, flags, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateComInterfaceFlags" />
        <Parameter Name="count" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="eac86-103">返回的 VTable 的目标。</span><span class="sxs-lookup"><span data-stu-id="eac86-103">Target of the returned Vtables.</span></span></param>
        <param name="flags"><span data-ttu-id="eac86-104">用于计算 VTable 的标志。</span><span class="sxs-lookup"><span data-stu-id="eac86-104">Flags used to compute Vtables.</span></span></param>
        <param name="count"><span data-ttu-id="eac86-105">返回的内存中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="eac86-105">The number of elements contained in the returned memory.</span></span></param>
        <summary><span data-ttu-id="eac86-106">采用 <paramref name="flags" /> 的值计算 <paramref name="obj" /> 所需的 Vtable。</span><span class="sxs-lookup"><span data-stu-id="eac86-106">Computes the desired Vtable for <paramref name="obj" />, respecting the values of <paramref name="flags" />.</span></span></summary>
        <returns><span data-ttu-id="eac86-107">包含所有 COM 接口项的内存的 <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> 指针。</span><span class="sxs-lookup"><span data-stu-id="eac86-107"><see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> pointer containing memory for all COM interface entries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-108">从此函数返回的所有内存都必须为非托管内存或固定托管内存，或已使用 API 分配 <xref:System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(System.Type,System.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="eac86-108">All memory returned from this function must either be unmanaged memory or pinned managed memory, or have been allocated with the <xref:System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(System.Type,System.Int32)> API.</span></span>
 
<span data-ttu-id="eac86-109">如果无法创建接口项并且返回了负数 `count` 或 `null` 和非零 `count` ，则对的调用 <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)> 将引发 <xref:System.ArgumentException> 。</span><span class="sxs-lookup"><span data-stu-id="eac86-109">If the interface entries cannot be created and a negative `count` or `null` and a non-zero `count` are returned, the call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)> will throw a <xref:System.ArgumentException>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="protected abstract object CreateObject (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateObject(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateObject (externalComObject As IntPtr, flags As CreateObjectFlags) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Object ^ CreateObject(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags);" />
      <MemberSignature Language="F#" Value="abstract member CreateObject : nativeint * System.Runtime.InteropServices.CreateObjectFlags -&gt; obj" Usage="comWrappers.CreateObject (externalComObject, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
      </Parameters>
      <Docs>
        <param name="externalComObject"><span data-ttu-id="eac86-110">要导入便于在 .NET 运行时中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-110">Object to import for usage into the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="eac86-111">用于描述外部对象的标志。</span><span class="sxs-lookup"><span data-stu-id="eac86-111">Flags used to describe the external object.</span></span></param>
        <summary><span data-ttu-id="eac86-112">采用 <paramref name="flags" /> 的值为 <paramref name="externalComObject" /> 指向的对象创建托管对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-112">Creates a managed object for the object that <paramref name="externalComObject" /> points to, respecting the values of <paramref name="flags" />.</span></span></summary>
        <returns><span data-ttu-id="eac86-113">与所提供的外部 COM 对象关联的托管对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-113">A managed object associated with the supplied external COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-114">如果无法创建对象并返回该对象，则对 `null` 的调用 <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)> 将引发 <xref:System.ArgumentNullException> 。</span><span class="sxs-lookup"><span data-stu-id="eac86-114">If the object cannot be created and `null` is returned, the call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)> will throw a <xref:System.ArgumentNullException>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownImpl">
      <MemberSignature Language="C#" Value="protected static void GetIUnknownImpl (out IntPtr fpQueryInterface, out IntPtr fpAddRef, out IntPtr fpRelease);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void GetIUnknownImpl([out] native int&amp; fpQueryInterface, [out] native int&amp; fpAddRef, [out] native int&amp; fpRelease) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub GetIUnknownImpl (ByRef fpQueryInterface As IntPtr, ByRef fpAddRef As IntPtr, ByRef fpRelease As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void GetIUnknownImpl([Runtime::InteropServices::Out] IntPtr % fpQueryInterface, [Runtime::InteropServices::Out] IntPtr % fpAddRef, [Runtime::InteropServices::Out] IntPtr % fpRelease);" />
      <MemberSignature Language="F#" Value="static member GetIUnknownImpl : nativeint * nativeint * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl (fpQueryInterface, fpAddRef, fpRelease)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fpQueryInterface" Type="System.IntPtr" RefType="out" />
        <Parameter Name="fpAddRef" Type="System.IntPtr" RefType="out" />
        <Parameter Name="fpRelease" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="fpQueryInterface"><span data-ttu-id="eac86-115">指向 QueryInterface 的函数指针。</span><span class="sxs-lookup"><span data-stu-id="eac86-115">Function pointer to QueryInterface.</span></span></param>
        <param name="fpAddRef"><span data-ttu-id="eac86-116">指向 AddRef 的函数指针。</span><span class="sxs-lookup"><span data-stu-id="eac86-116">Function pointer to AddRef.</span></span></param>
        <param name="fpRelease"><span data-ttu-id="eac86-117">要发布的函数指针。</span><span class="sxs-lookup"><span data-stu-id="eac86-117">Function pointer to Release.</span></span></param>
        <summary><span data-ttu-id="eac86-118">获取运行时提供的 IUnknown 实现。</span><span class="sxs-lookup"><span data-stu-id="eac86-118">Gets the runtime-provided IUnknown implementation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateComInterfaceForObject">
      <MemberSignature Language="C#" Value="public IntPtr GetOrCreateComInterfaceForObject (object instance, System.Runtime.InteropServices.CreateComInterfaceFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetOrCreateComInterfaceForObject(object instance, valuetype System.Runtime.InteropServices.CreateComInterfaceFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateComInterfaceForObject (instance As Object, flags As CreateComInterfaceFlags) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetOrCreateComInterfaceForObject(System::Object ^ instance, System::Runtime::InteropServices::CreateComInterfaceFlags flags);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateComInterfaceForObject : obj * System.Runtime.InteropServices.CreateComInterfaceFlags -&gt; nativeint" Usage="comWrappers.GetOrCreateComInterfaceForObject (instance, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateComInterfaceFlags" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eac86-119">要在 .NET 运行时外部公开的托管对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-119">The managed object to expose outside the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="eac86-120">用于配置生成的接口的标志。</span><span class="sxs-lookup"><span data-stu-id="eac86-120">Flags used to configure the generated interface.</span></span></param>
        <summary><span data-ttu-id="eac86-121">创建提供的对象的 COM 表示形式，该对象可传递给非托管环境。</span><span class="sxs-lookup"><span data-stu-id="eac86-121">Creates a COM representation of the supplied object that can be passed to a non-managed environment.</span></span></summary>
        <returns><span data-ttu-id="eac86-122">生成的 COM 接口，它可在 .NET 运行时外部传递。</span><span class="sxs-lookup"><span data-stu-id="eac86-122">The generated COM interface that can be passed outside the .NET runtime.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-123">如果先前为使用此实例的指定创建了 COM 表示形式 `instance` <xref:System.Runtime.InteropServices.ComWrappers> ，则将返回以前创建的 com 接口。</span><span class="sxs-lookup"><span data-stu-id="eac86-123">If a COM representation was previously created for the specified `instance` using this <xref:System.Runtime.InteropServices.ComWrappers> instance, the previously created COM interface will be returned.</span></span> <span data-ttu-id="eac86-124">如果不是，则将创建一个新的。</span><span class="sxs-lookup"><span data-stu-id="eac86-124">If not, a new one will be created.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrCreateObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreateObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreateObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags -&gt; obj" Usage="comWrappers.GetOrCreateObjectForComInstance (externalComObject, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
      </Parameters>
      <Docs>
        <param name="externalComObject"><span data-ttu-id="eac86-125">要导入便于在 .NET 运行时中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-125">Object to import for usage into the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="eac86-126">用于描述外部对象的标志。</span><span class="sxs-lookup"><span data-stu-id="eac86-126">Flags used to describe the external object.</span></span></param>
        <summary><span data-ttu-id="eac86-127">获取当前注册的托管对象，或创建新的托管对象并对其进行注册。</span><span class="sxs-lookup"><span data-stu-id="eac86-127">Gets the currently registered managed object or creates a new managed object and registers it.</span></span></summary>
        <returns><span data-ttu-id="eac86-128">与所提供的外部 COM 对象关联的托管对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-128">A managed object associated with the supplied external COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-129">如果以前为使用此实例的指定创建了托管对象 `externalComObject` <xref:System.Runtime.InteropServices.ComWrappers> ，则将返回以前创建的对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-129">If a managed object was previously created for the specified `externalComObject` using this <xref:System.Runtime.InteropServices.ComWrappers> instance, the previously created object will be returned.</span></span> <span data-ttu-id="eac86-130">如果不是，则将创建一个新的。</span><span class="sxs-lookup"><span data-stu-id="eac86-130">If not, a new one will be created.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrRegisterObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrRegisterObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrRegisterObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrRegisterObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags, wrapper As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrRegisterObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags, System::Object ^ wrapper);" />
      <MemberSignature Language="F#" Value="member this.GetOrRegisterObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags * obj -&gt; obj" Usage="comWrappers.GetOrRegisterObjectForComInstance (externalComObject, flags, wrapper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
        <Parameter Name="wrapper" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="externalComObject"><span data-ttu-id="eac86-131">要导入便于在 .NET 运行时中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-131">Object to import for usage into the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="eac86-132">用于描述外部对象的标志。</span><span class="sxs-lookup"><span data-stu-id="eac86-132">Flags used to describe the external object.</span></span></param>
        <param name="wrapper"><span data-ttu-id="eac86-133">要用作外部对象的包装器的对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-133">The object to use as the wrapper for the external object.</span></span></param>
        <summary><span data-ttu-id="eac86-134">获取当前注册的托管对象，或使用提供的托管对象并对其进行注册。</span><span class="sxs-lookup"><span data-stu-id="eac86-134">Gets the currently registered managed object or uses the supplied managed object and registers it.</span></span></summary>
        <returns><span data-ttu-id="eac86-135">与所提供的外部 COM 对象关联的托管对象。</span><span class="sxs-lookup"><span data-stu-id="eac86-135">A managed object associated with the supplied external COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-136">如果该 `wrapper` 实例已具有关联的外部对象，则 <xref:System.NotSupportedException> 将引发。</span><span class="sxs-lookup"><span data-stu-id="eac86-136">If the `wrapper` instance already has an associated external object a <xref:System.NotSupportedException> will be thrown.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="eac86-137">包装器实例已与外部对象关联。</span><span class="sxs-lookup"><span data-stu-id="eac86-137">The wrapper instance is already associated with an external object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForMarshalling">
      <MemberSignature Language="C#" Value="public static void RegisterForMarshalling (System.Runtime.InteropServices.ComWrappers instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForMarshalling(class System.Runtime.InteropServices.ComWrappers instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForMarshalling (instance As ComWrappers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForMarshalling(System::Runtime::InteropServices::ComWrappers ^ instance);" />
      <MemberSignature Language="F#" Value="static member RegisterForMarshalling : System.Runtime.InteropServices.ComWrappers -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Runtime.InteropServices.ComWrappers" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eac86-138">要注册的实例。</span><span class="sxs-lookup"><span data-stu-id="eac86-138">The instance to register.</span></span></param>
        <summary><span data-ttu-id="eac86-139">注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作在运行时进行封送的全局实例。</span><span class="sxs-lookup"><span data-stu-id="eac86-139">Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for marshalling in the runtime.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-140">此函数只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="eac86-140">This function can only be called a single time.</span></span> <span data-ttu-id="eac86-141">对此函数的后续调用将导致 <xref:System.InvalidOperationException> 引发。</span><span class="sxs-lookup"><span data-stu-id="eac86-141">Subsequent calls to this function will result in a <xref:System.InvalidOperationException> being thrown.</span></span>
<span data-ttu-id="eac86-142">可以使用此全局实例的方案包括： \* 与 COM 相关的封送 Api 的使用 \* P/使用 COM 相关类型调用 \* COM 激活</span><span class="sxs-lookup"><span data-stu-id="eac86-142">Scenarios where this global instance may be used are: \* Usage of COM-related Marshal APIs \* P/Invokes with COM-related types \* COM activation</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eac86-143">该方法被调用了多次。</span><span class="sxs-lookup"><span data-stu-id="eac86-143">The method was called more than once.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForTrackerSupport">
      <MemberSignature Language="C#" Value="public static void RegisterForTrackerSupport (System.Runtime.InteropServices.ComWrappers instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForTrackerSupport(class System.Runtime.InteropServices.ComWrappers instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForTrackerSupport (instance As ComWrappers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForTrackerSupport(System::Runtime::InteropServices::ComWrappers ^ instance);" />
      <MemberSignature Language="F#" Value="static member RegisterForTrackerSupport : System.Runtime.InteropServices.ComWrappers -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Runtime.InteropServices.ComWrappers" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eac86-144">要注册的实例。</span><span class="sxs-lookup"><span data-stu-id="eac86-144">The instance to register.</span></span></param>
        <summary><span data-ttu-id="eac86-145">注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作引用跟踪器支持的全局实例。</span><span class="sxs-lookup"><span data-stu-id="eac86-145">Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for reference tracker support.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eac86-146">此函数只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="eac86-146">This function can only be called a single time.</span></span> <span data-ttu-id="eac86-147">对此函数的后续调用将导致 <xref:System.InvalidOperationException> 引发。</span><span class="sxs-lookup"><span data-stu-id="eac86-147">Subsequent calls to this function will result in a <xref:System.InvalidOperationException> being thrown.</span></span>
<span data-ttu-id="eac86-148">可以使用此全局实例的方案包括：通过和标志进行对象跟踪 <xref:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport> <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject> 。</span><span class="sxs-lookup"><span data-stu-id="eac86-148">Scenarios where this global instance may be used are: \* Object tracking via the <xref:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport> and <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject> flags.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="eac86-149">该方法被调用了多次。</span><span class="sxs-lookup"><span data-stu-id="eac86-149">The method was called more than once.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseObjects">
      <MemberSignature Language="C#" Value="protected abstract void ReleaseObjects (System.Collections.IEnumerable objects);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReleaseObjects(class System.Collections.IEnumerable objects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ReleaseObjects (objects As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void ReleaseObjects(System::Collections::IEnumerable ^ objects);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseObjects : System.Collections.IEnumerable -&gt; unit" Usage="comWrappers.ReleaseObjects objects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="objects"><span data-ttu-id="eac86-150">要释放的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="eac86-150">Collection of objects to release.</span></span></param>
        <summary><span data-ttu-id="eac86-151">释放普通对象或 COM 接口生存期之外的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="eac86-151">Releases a collection of objects outside of the normal object or COM interface lifetime.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
