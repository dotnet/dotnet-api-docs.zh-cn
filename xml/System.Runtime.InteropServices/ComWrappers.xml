<Type Name="ComWrappers" FullName="System.Runtime.InteropServices.ComWrappers">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e54d3101b8849b3bff74c21bd972777468e805f" /><Meta Name="ms.sourcegitcommit" Value="c861111304129386e389ea61ecfbb7d3e51dc3cd" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/11/2020" /><Meta Name="ms.locfileid" Value="94507288" /></Metadata><TypeSignature Language="C#" Value="public abstract class ComWrappers" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ComWrappers extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ComWrappers" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ComWrappers" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComWrappers abstract" />
  <TypeSignature Language="F#" Value="type ComWrappers = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3e320-101">用于管理 COM IUnknown 类型包装器的类。</span><span class="sxs-lookup"><span data-stu-id="3e320-101">Class for managing wrappers of COM IUnknown types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="3e320-102"><xref:System.Runtime.InteropServices.ComWrappers>API 支持 `IUnknown` ABI，这与内置的 COM 互操作性支持无关。</span><span class="sxs-lookup"><span data-stu-id="3e320-102">The <xref:System.Runtime.InteropServices.ComWrappers> API provides support for the `IUnknown` ABI, independent of the built-in COM interoperability support.</span></span> <span data-ttu-id="3e320-103">`ComWrappers`API 公开了开发人员以高效方式替换内置版本所需的最小运行时支持。</span><span class="sxs-lookup"><span data-stu-id="3e320-103">The `ComWrappers` API exposes the minimal runtime support that's needed for developers to replace the built-in version in an efficient manner.</span></span>

<span data-ttu-id="3e320-104">通常在运行时中，托管对象的本机代理被称为 COM 可调用包装器 (CCW) ，而本机对象的托管代理则称为运行时可调用包装器 (RCW) 。</span><span class="sxs-lookup"><span data-stu-id="3e320-104">Traditionally in the runtime, a native proxy to managed object is called a COM Callable Wrapper (CCW), and a managed proxy to a native object is called a Runtime Callable Wrapper (RCW).</span></span> <span data-ttu-id="3e320-105">但是，在此处使用时，不应将这些术语与同名的内置功能 (，即 [CCW](https://docs.microsoft.com/dotnet/standard/native-interop/com-callable-wrapper) 和 [RCW](https://docs.microsoft.com/dotnet/standard/native-interop/runtime-callable-wrapper)) 。</span><span class="sxs-lookup"><span data-stu-id="3e320-105">However, when used here, those terms should not be confused with the built-in features of the same name (that is, [CCW](https://docs.microsoft.com/dotnet/standard/native-interop/com-callable-wrapper) and [RCW](https://docs.microsoft.com/dotnet/standard/native-interop/runtime-callable-wrapper)).</span></span> <span data-ttu-id="3e320-106">与内置功能不同，精确生存期管理、调度方法以及参数和返回值的封送处理的大多数责任将留给 `ComWrappers` 实施者。</span><span class="sxs-lookup"><span data-stu-id="3e320-106">Unlike the built-in features, a majority of the responsibility for accurate lifetime management, dispatching methods, and marshalling of arguments and return values is left to the `ComWrappers` implementer.</span></span>

<span data-ttu-id="3e320-107">"最小支持" 由以下功能定义：</span><span class="sxs-lookup"><span data-stu-id="3e320-107">"Minimal support" is defined by the following features:</span></span>

1. <span data-ttu-id="3e320-108">托管对象和本机代理之间的高效映射 (例如，CCW) 。</span><span class="sxs-lookup"><span data-stu-id="3e320-108">Efficient mapping between a managed object and a native proxy (for example, CCW).</span></span>
2. <span data-ttu-id="3e320-109">本机及其托管代理之间的高效映射 `IUnknown` (例如，RCW) 。</span><span class="sxs-lookup"><span data-stu-id="3e320-109">Efficient mapping between a native `IUnknown` and its managed proxy (for example, RCW).</span></span>
3. <span data-ttu-id="3e320-110">通过 [IReferenceTrackerHost](/windows/win32/api/windows.ui.xaml.hosting.referencetracker/nn-windows-ui-xaml-hosting-referencetracker-ireferencetrackerhost) 接口协定与垃圾回收器集成。</span><span class="sxs-lookup"><span data-stu-id="3e320-110">Integration with the garbage collector through the [IReferenceTrackerHost](/windows/win32/api/windows.ui.xaml.hosting.referencetracker/nn-windows-ui-xaml-hosting-referencetracker-ireferencetrackerhost) interface contract.</span></span>

   <span data-ttu-id="3e320-111">利用这种方案是一种高级方案。</span><span class="sxs-lookup"><span data-stu-id="3e320-111">Leveraging this is an advanced scenario.</span></span>

### <a name="proxy-state"></a><span data-ttu-id="3e320-112">代理状态</span><span class="sxs-lookup"><span data-stu-id="3e320-112">Proxy state</span></span>

<span data-ttu-id="3e320-113">本部分提供了在其各自创建后的本机和托管代理状态的说明和说明。</span><span class="sxs-lookup"><span data-stu-id="3e320-113">This section provides descriptions and illustrations of native and managed proxy state after their respective creation.</span></span>

<span data-ttu-id="3e320-114">在下图中，强引用以实线 (来描述 `===`) ，弱引用以虚线 () 形式描述 `= = =` 。</span><span class="sxs-lookup"><span data-stu-id="3e320-114">In the following illustrations, a strong reference is depicted as a solid line (`===`) and a weak reference is depicted as a dashed line (`= = =`).</span></span> <span data-ttu-id="3e320-115">术语 "强引用" 和 "弱引用" 应解释为 "扩展生存期" 和 "未扩展生存期"，而不是表示特定实现。</span><span class="sxs-lookup"><span data-stu-id="3e320-115">The terms "strong reference" and "weak reference" should be interpreted as "extending lifetime" and "not extending lifetime", as opposed to implying a specific implementation.</span></span>

<span data-ttu-id="3e320-116">下图显示了调用后托管对象和本机代理的状态 <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="3e320-116">The following illustration shows the state of the managed object and native proxy after a call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)?displayProperty=nameWithType>.</span></span>

```
 --------------------                  ----------------------
|   Managed object   |                |     Native proxy     |
|                    |                | Ref count: 1         |
|  ----------------  |                |  ------------------  |
| | Weak reference |=| = = = = = = = >| | Strong reference | |
| |    to proxy    | |<===============|=|    to object     | |
|  ----------------  |                |  ------------------  |
 --------------------                  ----------------------
```

<span data-ttu-id="3e320-117">下图显示了调用后的本机对象和托管代理的状态 <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="3e320-117">The next illustration shows the state of the native object and managed proxy after a call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3e320-118">"标识" 的概念遵循的[规则 `IUnknown` ](https://docs.microsoft.com/windows/win32/com/rules-for-implementing-queryinterface#objects-must-have-identity)。</span><span class="sxs-lookup"><span data-stu-id="3e320-118">The concept of "identity" follows the [rules for `IUnknown`](https://docs.microsoft.com/windows/win32/com/rules-for-implementing-queryinterface#objects-must-have-identity).</span></span>

```
 ------------------               ------------------
|  Native object   |< = = = = = =|                  |
| Ref count: +1    |             | Mapping from     |
 ------------------              | native identity  |
 ------------------------        | to managed proxy |
|   Managed proxy        |< = = =|                  |
| Created by ComWrappers |        ------------------
|   implementer.         |
| Optional AddRef() on   |
|   native object.       |
 ------------------------
```
<span data-ttu-id="3e320-119">请注意，运行时透视中仅存在弱引用。</span><span class="sxs-lookup"><span data-stu-id="3e320-119">Observe that only weak references exist from the runtime perspective.</span></span> <span data-ttu-id="3e320-120">`+1`本机对象的引用计数假定为由托管代理创建者执行 (即， `ComWrappers` 实施者) 确保本机对象与其托管的代理之间的关联生存期。</span><span class="sxs-lookup"><span data-stu-id="3e320-120">The `+1` reference count on the native object is assumed to be performed by the managed proxy creator (that is, the `ComWrappers` implementer) to ensure the associated lifetime between the native object and its managed proxy.</span></span> <span data-ttu-id="3e320-121">有一个可选的强引用 (即， `AddRef()` 托管代理中提到) ，用于支持前面提到的方案 (3) 。</span><span class="sxs-lookup"><span data-stu-id="3e320-121">There is an optional strong reference (that is, `AddRef()`) mentioned in the managed proxy, which is used to support scenario (3) mentioned earlier.</span></span> <span data-ttu-id="3e320-122">请参阅 <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3e320-122">See <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3e320-123">如果具有此可选的强引用，则引用计数将为 `+2` 。</span><span class="sxs-lookup"><span data-stu-id="3e320-123">With this optional strong reference, the reference count would be `+2`.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ComWrappers();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e320-124">实例构造函数。</span><span class="sxs-lookup"><span data-stu-id="3e320-124">Instance constructor.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeVtables">
      <MemberSignature Language="C#" Value="protected abstract System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry* ComputeVtables (object? obj, System.Runtime.InteropServices.CreateComInterfaceFlags flags, out int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Runtime.InteropServices.ComWrappers/ComInterfaceEntry* ComputeVtables(object obj, valuetype System.Runtime.InteropServices.CreateComInterfaceFlags flags, [out] int32&amp; count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Runtime::InteropServices::ComWrappers::ComInterfaceEntry* ComputeVtables(System::Object ^ obj, System::Runtime::InteropServices::CreateComInterfaceFlags flags, [Runtime::InteropServices::Out] int % count);" />
      <MemberSignature Language="F#" Value="abstract member ComputeVtables : obj * System.Runtime.InteropServices.CreateComInterfaceFlags * int -&gt; nativeptr&lt;System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry&gt;" Usage="comWrappers.ComputeVtables (obj, flags, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateComInterfaceFlags" />
        <Parameter Name="count" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="3e320-125">返回的 VTable 的目标。</span><span class="sxs-lookup"><span data-stu-id="3e320-125">Target of the returned Vtables.</span></span></param>
        <param name="flags"><span data-ttu-id="3e320-126">用于计算 VTable 的标志。</span><span class="sxs-lookup"><span data-stu-id="3e320-126">Flags used to compute Vtables.</span></span></param>
        <param name="count"><span data-ttu-id="3e320-127">返回的内存中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="3e320-127">The number of elements contained in the returned memory.</span></span></param>
        <summary><span data-ttu-id="3e320-128">采用 <paramref name="flags" /> 的值计算 <paramref name="obj" /> 所需的 Vtable。</span><span class="sxs-lookup"><span data-stu-id="3e320-128">Computes the desired Vtable for <paramref name="obj" />, respecting the values of <paramref name="flags" />.</span></span></summary>
        <returns><span data-ttu-id="3e320-129">包含所有 COM 接口项的内存的 <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> 指针。</span><span class="sxs-lookup"><span data-stu-id="3e320-129"><see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> pointer containing memory for all COM interface entries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-130">从此函数返回的所有内存都必须为非托管内存或固定托管内存，或已使用 API 分配 <xref:System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(System.Type,System.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="3e320-130">All memory returned from this function must either be unmanaged memory or pinned managed memory, or have been allocated with the <xref:System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(System.Type,System.Int32)> API.</span></span>
 
<span data-ttu-id="3e320-131">如果无法创建接口项并且返回了负数 `count` 或 `null` 和非零 `count` ，则对的调用 <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)> 将引发 <xref:System.ArgumentException> 。</span><span class="sxs-lookup"><span data-stu-id="3e320-131">If the interface entries cannot be created and a negative `count` or `null` and a non-zero `count` are returned, the call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)> will throw a <xref:System.ArgumentException>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="protected abstract object CreateObject (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateObject(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateObject (externalComObject As IntPtr, flags As CreateObjectFlags) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Object ^ CreateObject(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags);" />
      <MemberSignature Language="F#" Value="abstract member CreateObject : nativeint * System.Runtime.InteropServices.CreateObjectFlags -&gt; obj" Usage="comWrappers.CreateObject (externalComObject, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
      </Parameters>
      <Docs>
        <param name="externalComObject"><span data-ttu-id="3e320-132">要导入便于在 .NET 运行时中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-132">Object to import for usage into the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="3e320-133">用于描述外部对象的标志。</span><span class="sxs-lookup"><span data-stu-id="3e320-133">Flags used to describe the external object.</span></span></param>
        <summary><span data-ttu-id="3e320-134">采用 <paramref name="flags" /> 的值为 <paramref name="externalComObject" /> 指向的对象创建托管对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-134">Creates a managed object for the object that <paramref name="externalComObject" /> points to, respecting the values of <paramref name="flags" />.</span></span></summary>
        <returns><span data-ttu-id="3e320-135">与所提供的外部 COM 对象关联的托管对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-135">A managed object associated with the supplied external COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-136">如果无法创建对象并返回该对象，则对 `null` 的调用 <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)> 将引发 <xref:System.ArgumentNullException> 。</span><span class="sxs-lookup"><span data-stu-id="3e320-136">If the object cannot be created and `null` is returned, the call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)> will throw a <xref:System.ArgumentNullException>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownImpl">
      <MemberSignature Language="C#" Value="protected static void GetIUnknownImpl (out IntPtr fpQueryInterface, out IntPtr fpAddRef, out IntPtr fpRelease);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void GetIUnknownImpl([out] native int&amp; fpQueryInterface, [out] native int&amp; fpAddRef, [out] native int&amp; fpRelease) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub GetIUnknownImpl (ByRef fpQueryInterface As IntPtr, ByRef fpAddRef As IntPtr, ByRef fpRelease As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void GetIUnknownImpl([Runtime::InteropServices::Out] IntPtr % fpQueryInterface, [Runtime::InteropServices::Out] IntPtr % fpAddRef, [Runtime::InteropServices::Out] IntPtr % fpRelease);" />
      <MemberSignature Language="F#" Value="static member GetIUnknownImpl : nativeint * nativeint * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl (fpQueryInterface, fpAddRef, fpRelease)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fpQueryInterface" Type="System.IntPtr" RefType="out" />
        <Parameter Name="fpAddRef" Type="System.IntPtr" RefType="out" />
        <Parameter Name="fpRelease" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="fpQueryInterface"><span data-ttu-id="3e320-137">指向 QueryInterface 的函数指针。</span><span class="sxs-lookup"><span data-stu-id="3e320-137">Function pointer to QueryInterface.</span></span></param>
        <param name="fpAddRef"><span data-ttu-id="3e320-138">指向 AddRef 的函数指针。</span><span class="sxs-lookup"><span data-stu-id="3e320-138">Function pointer to AddRef.</span></span></param>
        <param name="fpRelease"><span data-ttu-id="3e320-139">要发布的函数指针。</span><span class="sxs-lookup"><span data-stu-id="3e320-139">Function pointer to Release.</span></span></param>
        <summary><span data-ttu-id="3e320-140">获取运行时提供的 IUnknown 实现。</span><span class="sxs-lookup"><span data-stu-id="3e320-140">Gets the runtime-provided IUnknown implementation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateComInterfaceForObject">
      <MemberSignature Language="C#" Value="public IntPtr GetOrCreateComInterfaceForObject (object instance, System.Runtime.InteropServices.CreateComInterfaceFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetOrCreateComInterfaceForObject(object instance, valuetype System.Runtime.InteropServices.CreateComInterfaceFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateComInterfaceForObject (instance As Object, flags As CreateComInterfaceFlags) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetOrCreateComInterfaceForObject(System::Object ^ instance, System::Runtime::InteropServices::CreateComInterfaceFlags flags);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateComInterfaceForObject : obj * System.Runtime.InteropServices.CreateComInterfaceFlags -&gt; nativeint" Usage="comWrappers.GetOrCreateComInterfaceForObject (instance, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateComInterfaceFlags" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3e320-141">要在 .NET 运行时外部公开的托管对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-141">The managed object to expose outside the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="3e320-142">用于配置生成的接口的标志。</span><span class="sxs-lookup"><span data-stu-id="3e320-142">Flags used to configure the generated interface.</span></span></param>
        <summary><span data-ttu-id="3e320-143">创建提供的对象的 COM 表示形式，该对象可传递给非托管环境。</span><span class="sxs-lookup"><span data-stu-id="3e320-143">Creates a COM representation of the supplied object that can be passed to a non-managed environment.</span></span></summary>
        <returns><span data-ttu-id="3e320-144">生成的 COM 接口，它可在 .NET 运行时外部传递。</span><span class="sxs-lookup"><span data-stu-id="3e320-144">The generated COM interface that can be passed outside the .NET runtime.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-145">如果先前为使用此实例的指定创建了 COM 表示形式 `instance` <xref:System.Runtime.InteropServices.ComWrappers> ，则将返回以前创建的 com 接口。</span><span class="sxs-lookup"><span data-stu-id="3e320-145">If a COM representation was previously created for the specified `instance` using this <xref:System.Runtime.InteropServices.ComWrappers> instance, the previously created COM interface will be returned.</span></span> <span data-ttu-id="3e320-146">如果不是，则将创建一个新的。</span><span class="sxs-lookup"><span data-stu-id="3e320-146">If not, a new one will be created.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrCreateObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreateObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreateObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags -&gt; obj" Usage="comWrappers.GetOrCreateObjectForComInstance (externalComObject, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
      </Parameters>
      <Docs>
        <param name="externalComObject"><span data-ttu-id="3e320-147">要导入便于在 .NET 运行时中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-147">Object to import for usage into the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="3e320-148">用于描述外部对象的标志。</span><span class="sxs-lookup"><span data-stu-id="3e320-148">Flags used to describe the external object.</span></span></param>
        <summary><span data-ttu-id="3e320-149">获取当前注册的托管对象，或创建新的托管对象并对其进行注册。</span><span class="sxs-lookup"><span data-stu-id="3e320-149">Gets the currently registered managed object or creates a new managed object and registers it.</span></span></summary>
        <returns><span data-ttu-id="3e320-150">与所提供的外部 COM 对象关联的托管对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-150">A managed object associated with the supplied external COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-151">如果以前为使用此实例的指定创建了托管对象 `externalComObject` <xref:System.Runtime.InteropServices.ComWrappers> ，则将返回以前创建的对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-151">If a managed object was previously created for the specified `externalComObject` using this <xref:System.Runtime.InteropServices.ComWrappers> instance, the previously created object will be returned.</span></span> <span data-ttu-id="3e320-152">如果不是，则将创建一个新的。</span><span class="sxs-lookup"><span data-stu-id="3e320-152">If not, a new one will be created.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrRegisterObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrRegisterObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrRegisterObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrRegisterObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags, wrapper As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrRegisterObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags, System::Object ^ wrapper);" />
      <MemberSignature Language="F#" Value="member this.GetOrRegisterObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags * obj -&gt; obj" Usage="comWrappers.GetOrRegisterObjectForComInstance (externalComObject, flags, wrapper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
        <Parameter Name="wrapper" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="externalComObject"><span data-ttu-id="3e320-153">要导入便于在 .NET 运行时中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-153">Object to import for usage into the .NET runtime.</span></span></param>
        <param name="flags"><span data-ttu-id="3e320-154">用于描述外部对象的标志。</span><span class="sxs-lookup"><span data-stu-id="3e320-154">Flags used to describe the external object.</span></span></param>
        <param name="wrapper"><span data-ttu-id="3e320-155">要用作外部对象的包装器的对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-155">The object to use as the wrapper for the external object.</span></span></param>
        <summary><span data-ttu-id="3e320-156">获取当前注册的托管对象，或使用提供的托管对象并对其进行注册。</span><span class="sxs-lookup"><span data-stu-id="3e320-156">Gets the currently registered managed object or uses the supplied managed object and registers it.</span></span></summary>
        <returns><span data-ttu-id="3e320-157">与所提供的外部 COM 对象关联的托管对象。</span><span class="sxs-lookup"><span data-stu-id="3e320-157">A managed object associated with the supplied external COM object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-158">如果该 `wrapper` 实例已具有关联的外部对象，则 <xref:System.NotSupportedException> 将引发。</span><span class="sxs-lookup"><span data-stu-id="3e320-158">If the `wrapper` instance already has an associated external object a <xref:System.NotSupportedException> will be thrown.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3e320-159">包装器实例已与外部对象关联。</span><span class="sxs-lookup"><span data-stu-id="3e320-159">The wrapper instance is already associated with an external object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForMarshalling">
      <MemberSignature Language="C#" Value="public static void RegisterForMarshalling (System.Runtime.InteropServices.ComWrappers instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForMarshalling(class System.Runtime.InteropServices.ComWrappers instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForMarshalling (instance As ComWrappers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForMarshalling(System::Runtime::InteropServices::ComWrappers ^ instance);" />
      <MemberSignature Language="F#" Value="static member RegisterForMarshalling : System.Runtime.InteropServices.ComWrappers -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Runtime.InteropServices.ComWrappers" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3e320-160">要注册的实例。</span><span class="sxs-lookup"><span data-stu-id="3e320-160">The instance to register.</span></span></param>
        <summary><span data-ttu-id="3e320-161">注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作在运行时进行封送的全局实例。</span><span class="sxs-lookup"><span data-stu-id="3e320-161">Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for marshalling in the runtime.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-162">此函数只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="3e320-162">This function can only be called a single time.</span></span> <span data-ttu-id="3e320-163">对此函数的后续调用将导致 <xref:System.InvalidOperationException> 引发。</span><span class="sxs-lookup"><span data-stu-id="3e320-163">Subsequent calls to this function will result in a <xref:System.InvalidOperationException> being thrown.</span></span>
<span data-ttu-id="3e320-164">可以使用此全局实例的方案包括： \* 与 COM 相关的封送 Api 的使用 \* P/使用 COM 相关类型调用 \* COM 激活</span><span class="sxs-lookup"><span data-stu-id="3e320-164">Scenarios where this global instance may be used are: \* Usage of COM-related Marshal APIs \* P/Invokes with COM-related types \* COM activation</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3e320-165">该方法被调用了多次。</span><span class="sxs-lookup"><span data-stu-id="3e320-165">The method was called more than once.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForTrackerSupport">
      <MemberSignature Language="C#" Value="public static void RegisterForTrackerSupport (System.Runtime.InteropServices.ComWrappers instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForTrackerSupport(class System.Runtime.InteropServices.ComWrappers instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForTrackerSupport (instance As ComWrappers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForTrackerSupport(System::Runtime::InteropServices::ComWrappers ^ instance);" />
      <MemberSignature Language="F#" Value="static member RegisterForTrackerSupport : System.Runtime.InteropServices.ComWrappers -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Runtime.InteropServices.ComWrappers" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3e320-166">要注册的实例。</span><span class="sxs-lookup"><span data-stu-id="3e320-166">The instance to register.</span></span></param>
        <summary><span data-ttu-id="3e320-167">注册具有以下用途的 <see cref="T:System.Runtime.InteropServices.ComWrappers" /> 实例：用作引用跟踪器支持的全局实例。</span><span class="sxs-lookup"><span data-stu-id="3e320-167">Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for reference tracker support.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3e320-168">此函数只能调用一次。</span><span class="sxs-lookup"><span data-stu-id="3e320-168">This function can only be called a single time.</span></span> <span data-ttu-id="3e320-169">对此函数的后续调用将导致 <xref:System.InvalidOperationException> 引发。</span><span class="sxs-lookup"><span data-stu-id="3e320-169">Subsequent calls to this function will result in a <xref:System.InvalidOperationException> being thrown.</span></span>
<span data-ttu-id="3e320-170">可以使用此全局实例的方案包括：通过和标志进行对象跟踪 <xref:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport> <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject> 。</span><span class="sxs-lookup"><span data-stu-id="3e320-170">Scenarios where this global instance may be used are: \* Object tracking via the <xref:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport> and <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject> flags.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3e320-171">该方法被调用了多次。</span><span class="sxs-lookup"><span data-stu-id="3e320-171">The method was called more than once.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseObjects">
      <MemberSignature Language="C#" Value="protected abstract void ReleaseObjects (System.Collections.IEnumerable objects);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReleaseObjects(class System.Collections.IEnumerable objects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ReleaseObjects (objects As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void ReleaseObjects(System::Collections::IEnumerable ^ objects);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseObjects : System.Collections.IEnumerable -&gt; unit" Usage="comWrappers.ReleaseObjects objects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="objects"><span data-ttu-id="3e320-172">要释放的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="3e320-172">Collection of objects to release.</span></span></param>
        <summary><span data-ttu-id="3e320-173">释放普通对象或 COM 接口生存期之外的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="3e320-173">Releases a collection of objects outside of the normal object or COM interface lifetime.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
