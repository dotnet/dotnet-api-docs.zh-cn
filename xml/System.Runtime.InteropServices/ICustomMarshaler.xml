<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ab65082e4e83c3890a36f7890b21f0f400430a7" /><Meta Name="ms.sourcegitcommit" Value="8d63c26d96c3714a8a31c9727613bb05c11660f2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/04/2020" /><Meta Name="ms.locfileid" Value="89468050" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dd887-101">提供用于处理方法调用的自定义包装器。</span><span class="sxs-lookup"><span data-stu-id="dd887-101">Provides custom wrappers for handling method calls.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd887-102">封送拆收器在新旧接口的功能之间提供桥梁。</span><span class="sxs-lookup"><span data-stu-id="dd887-102">A marshaler provides a bridge between the functionality of old and new interfaces.</span></span> <span data-ttu-id="dd887-103">自定义封送具有以下优势：</span><span class="sxs-lookup"><span data-stu-id="dd887-103">Custom marshaling provides the following benefits:</span></span>  
  
-   <span data-ttu-id="dd887-104">它使设计为使用旧接口的客户端应用程序也可以使用实现新接口的服务器。</span><span class="sxs-lookup"><span data-stu-id="dd887-104">It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</span></span>  
  
-   <span data-ttu-id="dd887-105">它允许生成的客户端应用程序使用新接口来处理实现旧接口的服务器。</span><span class="sxs-lookup"><span data-stu-id="dd887-105">It enables client applications built to work with a new interface to work with servers that implement an old interface.</span></span>  
  
 <span data-ttu-id="dd887-106">如果某个接口引入了不同的封送行为，或以不同方式向组件对象模型公开 (COM) ，则可以设计自定义封送拆收器，而不是使用互操作封送拆收器。</span><span class="sxs-lookup"><span data-stu-id="dd887-106">If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</span></span> <span data-ttu-id="dd887-107">通过使用自定义封送拆收器，你可以最大程度地减少新 .NET Framework 组件和现有 COM 组件之间的差异。</span><span class="sxs-lookup"><span data-stu-id="dd887-107">By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</span></span>  
  
 <span data-ttu-id="dd887-108">例如，假设您正在开发一个名为的托管接口 `INew` 。</span><span class="sxs-lookup"><span data-stu-id="dd887-108">For example, suppose that you are developing a managed interface called `INew`.</span></span> <span data-ttu-id="dd887-109">如果通过标准 COM 可调用包装将此接口公开给 COM (CCW) ，则它具有与托管接口相同的方法，并使用内置于互操作封送拆收器中的封送规则。</span><span class="sxs-lookup"><span data-stu-id="dd887-109">When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</span></span> <span data-ttu-id="dd887-110">现在假设所谓的已知 COM 接口 `IOld` 已提供与接口相同的功能 `INew` 。</span><span class="sxs-lookup"><span data-stu-id="dd887-110">Now suppose that a well-known COM interface called `IOld` already provides the same functionality as the `INew` interface.</span></span> <span data-ttu-id="dd887-111">通过设计自定义封送拆收器，你可以提供的非托管实现， `IOld` 它只是将调用委托给接口的托管实现 `INew` 。</span><span class="sxs-lookup"><span data-stu-id="dd887-111">By designing a custom marshaler, you can provide an unmanaged implementation of `IOld` that simply delegates the calls to the managed implementation of the `INew` interface.</span></span> <span data-ttu-id="dd887-112">因此，自定义封送拆收器充当托管和非托管接口之间的桥梁。</span><span class="sxs-lookup"><span data-stu-id="dd887-112">Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd887-113">从托管代码调用到仅调度接口上的非托管代码时，不会调用自定义封送拆收器。</span><span class="sxs-lookup"><span data-stu-id="dd887-113">Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</span></span>  
  
## <a name="defining-the-marshaling-type"></a><span data-ttu-id="dd887-114">定义封送处理类型</span><span class="sxs-lookup"><span data-stu-id="dd887-114">Defining the Marshaling Type</span></span>  
 <span data-ttu-id="dd887-115">在可以生成自定义封送拆收器之前，必须定义将被封送的托管和非托管接口。</span><span class="sxs-lookup"><span data-stu-id="dd887-115">Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</span></span> <span data-ttu-id="dd887-116">这些接口通常执行相同的功能，但以不同方式向托管和非托管对象公开。</span><span class="sxs-lookup"><span data-stu-id="dd887-116">These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</span></span>  
  
 <span data-ttu-id="dd887-117">托管编译器从元数据生成托管接口，生成的接口看起来像其他任何托管接口。</span><span class="sxs-lookup"><span data-stu-id="dd887-117">A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</span></span> <span data-ttu-id="dd887-118">下面的示例演示一个典型接口。</span><span class="sxs-lookup"><span data-stu-id="dd887-118">The following example shows a typical interface.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 <span data-ttu-id="dd887-119"> (IDL) 中定义接口定义语言的非托管类型，并将其与 Microsoft 接口定义语言 (MIDL) 编译器一起编译。</span><span class="sxs-lookup"><span data-stu-id="dd887-119">You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</span></span> <span data-ttu-id="dd887-120">在 library 语句中定义接口，并为其分配一个具有通用唯一标识符 (UUID) 属性的接口 ID，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="dd887-120">You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</span></span>  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 <span data-ttu-id="dd887-121">MIDL 编译器将生成多个输出文件。</span><span class="sxs-lookup"><span data-stu-id="dd887-121">The MIDL compiler produces several output files.</span></span> <span data-ttu-id="dd887-122">如果在旧 .idl 中定义了接口，则输出文件 Old_i。 c `const` 使用接口的接口标识符 (IID) 定义一个变量，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="dd887-122">If the interface is defined in Old.idl, the output file Old_i.c defines a `const` variable with the interface identifier (IID) of the interface, as the following example demonstrates.</span></span>  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 <span data-ttu-id="dd887-123">旧 .h 文件也由 MIDL 生成。</span><span class="sxs-lookup"><span data-stu-id="dd887-123">The Old.h file is also produced by MIDL.</span></span> <span data-ttu-id="dd887-124">它包含可在 c + + 源代码中包含的接口的 c + + 定义。</span><span class="sxs-lookup"><span data-stu-id="dd887-124">It contains a C++ definition of the interface that can be included in your C++ source code.</span></span>  
  
## <a name="implementing-the-icustommarshaler-interface"></a><span data-ttu-id="dd887-125">实现 ICustomMarshaler 接口</span><span class="sxs-lookup"><span data-stu-id="dd887-125">Implementing the ICustomMarshaler Interface</span></span>  
 <span data-ttu-id="dd887-126">自定义封送拆收器必须实现 <xref:System.Runtime.InteropServices.ICustomMarshaler> 接口，才能向运行时提供适当的包装。</span><span class="sxs-lookup"><span data-stu-id="dd887-126">Your custom marshaler must implement the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface to provide the appropriate wrappers to the runtime.</span></span>  
  
 <span data-ttu-id="dd887-127">下面的 c # 代码显示了必须由所有自定义封送拆收器实现的基接口。</span><span class="sxs-lookup"><span data-stu-id="dd887-127">The following C# code displays the base interface that must be implemented by all custom marshalers.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <span data-ttu-id="dd887-128"><xref:System.Runtime.InteropServices.ICustomMarshaler>接口包括提供转换支持、清除支持和有关要封送的数据的信息的方法。</span><span class="sxs-lookup"><span data-stu-id="dd887-128">The <xref:System.Runtime.InteropServices.ICustomMarshaler> interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</span></span>  
  
|<span data-ttu-id="dd887-129">操作类型</span><span class="sxs-lookup"><span data-stu-id="dd887-129">Type of operation</span></span>|<span data-ttu-id="dd887-130">ICustomMarshaler 方法</span><span class="sxs-lookup"><span data-stu-id="dd887-130">ICustomMarshaler method</span></span>|<span data-ttu-id="dd887-131">说明</span><span class="sxs-lookup"><span data-stu-id="dd887-131">Description</span></span>|  
|-----------------------|-----------------------------|-----------------|  
|<span data-ttu-id="dd887-132">从本机到托管代码的转换 () </span><span class="sxs-lookup"><span data-stu-id="dd887-132">Conversion (from native to managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|<span data-ttu-id="dd887-133">将指向本机数据的指针封送到托管对象。</span><span class="sxs-lookup"><span data-stu-id="dd887-133">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="dd887-134">此方法返回可封送作为参数传递的非托管接口 (RCW) 的自定义运行时可调用包装。</span><span class="sxs-lookup"><span data-stu-id="dd887-134">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="dd887-135">封送拆收器应为该类型返回自定义 RCW 的实例。</span><span class="sxs-lookup"><span data-stu-id="dd887-135">The marshaler should return an instance of the custom RCW for that type.</span></span>|  
|<span data-ttu-id="dd887-136">从托管代码到本机代码的转换 () </span><span class="sxs-lookup"><span data-stu-id="dd887-136">Conversion (from managed to native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|<span data-ttu-id="dd887-137">将托管对象封送到指向本机数据的指针。</span><span class="sxs-lookup"><span data-stu-id="dd887-137">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="dd887-138">此方法返回自定义 COM 可调用包装器 (CCW) ，它可以封送作为参数传递的托管接口。</span><span class="sxs-lookup"><span data-stu-id="dd887-138">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="dd887-139">封送拆收器应返回该类型的自定义 CCW 的实例。</span><span class="sxs-lookup"><span data-stu-id="dd887-139">The marshaler should return an instance of the custom CCW for that type.</span></span>|  
|<span data-ttu-id="dd887-140">本机代码的清理 () </span><span class="sxs-lookup"><span data-stu-id="dd887-140">Cleanup (of native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|<span data-ttu-id="dd887-141">启用封送拆收器以清理方法返回的 CCW) 中的本机数据 (<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dd887-141">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>|  
|<span data-ttu-id="dd887-142"> (托管代码的清除) </span><span class="sxs-lookup"><span data-stu-id="dd887-142">Cleanup (of managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|<span data-ttu-id="dd887-143">允许封送拆收器清理由方法返回的 (RCW) 的托管数据 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dd887-143">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>|  
|<span data-ttu-id="dd887-144">有关本机代码的信息 () </span><span class="sxs-lookup"><span data-stu-id="dd887-144">Information (about native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|<span data-ttu-id="dd887-145">返回要封送处理的非托管数据的大小。</span><span class="sxs-lookup"><span data-stu-id="dd887-145">Returns the size of the unmanaged data to be marshaled.</span></span>|  
  
### <a name="conversion"></a><span data-ttu-id="dd887-146">转换</span><span class="sxs-lookup"><span data-stu-id="dd887-146">Conversion</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="dd887-147">将指向本机数据的指针封送到托管对象。</span><span class="sxs-lookup"><span data-stu-id="dd887-147">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="dd887-148">此方法返回可封送作为参数传递的非托管接口 (RCW) 的自定义运行时可调用包装。</span><span class="sxs-lookup"><span data-stu-id="dd887-148">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="dd887-149">封送拆收器应为该类型返回自定义 RCW 的实例。</span><span class="sxs-lookup"><span data-stu-id="dd887-149">The marshaler should return an instance of the custom RCW for that type.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="dd887-150">将托管对象封送到指向本机数据的指针。</span><span class="sxs-lookup"><span data-stu-id="dd887-150">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="dd887-151">此方法返回自定义 COM 可调用包装器 (CCW) ，它可以封送作为参数传递的托管接口。</span><span class="sxs-lookup"><span data-stu-id="dd887-151">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="dd887-152">封送拆收器应返回该类型的自定义 CCW 的实例。</span><span class="sxs-lookup"><span data-stu-id="dd887-152">The marshaler should return an instance of the custom CCW for that type.</span></span>  
  
### <a name="cleanup"></a><span data-ttu-id="dd887-153">清理</span><span class="sxs-lookup"><span data-stu-id="dd887-153">Cleanup</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="dd887-154">启用封送拆收器以清理方法返回的 CCW) 中的本机数据 (<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dd887-154">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="dd887-155">允许封送拆收器清理由方法返回的 (RCW) 的托管数据 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dd887-155">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>  
  
### <a name="size-information"></a><span data-ttu-id="dd887-156">大小信息</span><span class="sxs-lookup"><span data-stu-id="dd887-156">Size Information</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="dd887-157">返回要封送处理的非托管数据的大小。</span><span class="sxs-lookup"><span data-stu-id="dd887-157">Returns the size of the unmanaged data to be marshaled.</span></span>  
  
## <a name="implementing-the-getinstance-method"></a><span data-ttu-id="dd887-158">实现 GetInstance 方法</span><span class="sxs-lookup"><span data-stu-id="dd887-158">Implementing the GetInstance Method</span></span>  
 <span data-ttu-id="dd887-159">除了实现 <xref:System.Runtime.InteropServices.ICustomMarshaler> 接口外，自定义封送拆收器还必须实现一个 `static` 名 `GetInstance` 为的方法，该方法接受 <xref:System.String> 作为参数并且具有返回类型 <xref:System.Runtime.InteropServices.ICustomMarshaler> 。</span><span class="sxs-lookup"><span data-stu-id="dd887-159">In addition to implementing the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface, custom marshalers must implement a `static` method called `GetInstance` that accepts a <xref:System.String> as a parameter and has a return type of <xref:System.Runtime.InteropServices.ICustomMarshaler>.</span></span> <span data-ttu-id="dd887-160">此 `static` 方法由公共语言运行时的 COM 互操作层调用，以实例化自定义封送拆收器的实例。</span><span class="sxs-lookup"><span data-stu-id="dd887-160">This `static` method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</span></span> <span data-ttu-id="dd887-161">传递给的字符串 `GetInstance` 是一个 cookie，该方法可用于自定义返回的自定义封送拆收器。</span><span class="sxs-lookup"><span data-stu-id="dd887-161">The string that is passed to `GetInstance` is a cookie that the method can use to customize the returned custom marshaler.</span></span> <span data-ttu-id="dd887-162">下面的示例演示了一个最小但完整的 <xref:System.Runtime.InteropServices.ICustomMarshaler> 实现。</span><span class="sxs-lookup"><span data-stu-id="dd887-162">The following example shows a minimal, but complete, <xref:System.Runtime.InteropServices.ICustomMarshaler> implementation.</span></span> 
  
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#6)]
  
## <a name="applying-marshalasattribute"></a><span data-ttu-id="dd887-163">应用 MarshalAsAttribute</span><span class="sxs-lookup"><span data-stu-id="dd887-163">Applying MarshalAsAttribute</span></span>  
 <span data-ttu-id="dd887-164">若要使用自定义封送拆收器，必须将特性应用于要 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 封送的参数或字段。</span><span class="sxs-lookup"><span data-stu-id="dd887-164">To use a custom marshaler, you must apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute to the parameter or field that is being marshaled.</span></span>  
  
 <span data-ttu-id="dd887-165">还必须将 <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 枚举值传递到 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dd887-165">You must also pass the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> constructor.</span></span> <span data-ttu-id="dd887-166">此外，还必须指定 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 包含以下命名参数之一的字段：</span><span class="sxs-lookup"><span data-stu-id="dd887-166">In addition, you must specify the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field with one of the following named parameters:</span></span>  
  
-   <span data-ttu-id="dd887-167"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (必需) ：自定义封送拆收器的程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="dd887-167"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (required): The assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="dd887-168">名称应包括自定义封送拆收器的命名空间和类。</span><span class="sxs-lookup"><span data-stu-id="dd887-168">The name should include the namespace and class of the custom marshaler.</span></span> <span data-ttu-id="dd887-169">如果未在中使用自定义封送拆收器，则必须指定定义它的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="dd887-169">If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="dd887-170">您可以使用 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 字段而不是 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 字段。</span><span class="sxs-lookup"><span data-stu-id="dd887-170">You can use the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> field instead of the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field.</span></span> <span data-ttu-id="dd887-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 采用更易于指定的类型。</span><span class="sxs-lookup"><span data-stu-id="dd887-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> takes a type that is easier to specify.</span></span>  
  
-   <span data-ttu-id="dd887-172"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (可选) ：传递到自定义封送拆收器的 cookie。</span><span class="sxs-lookup"><span data-stu-id="dd887-172"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (optional): A cookie that is passed to the custom marshaler.</span></span> <span data-ttu-id="dd887-173">可以使用 cookie 向封送拆收器提供附加信息。</span><span class="sxs-lookup"><span data-stu-id="dd887-173">You can use the cookie to provide additional information to the marshaler.</span></span> <span data-ttu-id="dd887-174">例如，如果使用相同的封送拆收器来提供多个包装，cookie 会标识特定包装。</span><span class="sxs-lookup"><span data-stu-id="dd887-174">For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</span></span> <span data-ttu-id="dd887-175">Cookie 传递给 `GetInstance` 封送拆收器的方法。</span><span class="sxs-lookup"><span data-stu-id="dd887-175">The cookie is passed to the `GetInstance` method of the marshaler.</span></span>  
  
 <span data-ttu-id="dd887-176"><xref:System.Runtime.InteropServices.MarshalAsAttribute>属性标识自定义封送拆收器，使其可以激活适当的包装。</span><span class="sxs-lookup"><span data-stu-id="dd887-176">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute identifies the custom marshaler so it can activate the appropriate wrapper.</span></span> <span data-ttu-id="dd887-177">然后，公共语言运行时的互操作服务将检查属性，并在第一次需要封送参数 (参数或字段) 时创建自定义封送拆收器。</span><span class="sxs-lookup"><span data-stu-id="dd887-177">The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</span></span>  
  
 <span data-ttu-id="dd887-178">然后，运行时调用 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 自定义封送拆收器上的和方法，以激活正确的包装程序来处理调用。</span><span class="sxs-lookup"><span data-stu-id="dd887-178">The runtime then calls the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> and <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> methods on the custom marshaler to activate the correct wrapper to handle the call.</span></span>  
  
## <a name="using-a-custom-marshaler"></a><span data-ttu-id="dd887-179">使用自定义封送拆收器</span><span class="sxs-lookup"><span data-stu-id="dd887-179">Using a Custom Marshaler</span></span>  
 <span data-ttu-id="dd887-180">自定义封送拆收器完成后，可以将其用作特定类型的自定义包装器。</span><span class="sxs-lookup"><span data-stu-id="dd887-180">When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</span></span> <span data-ttu-id="dd887-181">下面的示例演示了 `IUserData` 托管接口的定义：</span><span class="sxs-lookup"><span data-stu-id="dd887-181">The following example shows the definition of the `IUserData` managed interface:</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 <span data-ttu-id="dd887-182">在下面的示例中， `IUserData` 接口使用 `NewOldMarshaler` 自定义封送拆收器来使非托管客户端应用程序将 `IOld` 接口传递到 `DoSomeStuff` 方法。</span><span class="sxs-lookup"><span data-stu-id="dd887-182">In the following example, the `IUserData` interface uses the `NewOldMarshaler` custom marshaler to enable unmanaged client applications to pass an `IOld` interface to the `DoSomeStuff` method.</span></span> <span data-ttu-id="dd887-183">`DoSomeStuff` `INew` 如前面的示例所示，方法的托管说明采用接口，而非托管版本 `DoSomeStuff` 采用 `IOld` 接口指针，如以下示例中所示。</span><span class="sxs-lookup"><span data-stu-id="dd887-183">The managed description of the `DoSomeStuff` method takes an `INew` interface, as shown in the previous example, whereas the unmanaged version of `DoSomeStuff` takes an `IOld` interface pointer, as shown in the following example.</span></span>  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 <span data-ttu-id="dd887-184">通过导出的托管定义生成的类型库将 `IUserData` 生成在此示例中显示的非托管定义，而不是标准定义。</span><span class="sxs-lookup"><span data-stu-id="dd887-184">The type library that is generated by exporting the managed definition of `IUserData` yields the unmanaged definition shown in this example instead of the standard definition.</span></span> <span data-ttu-id="dd887-185"><xref:System.Runtime.InteropServices.MarshalAsAttribute>应用于该 `INew` 方法的托管定义中的参数的特性 `DoSomeStuff` 指示该参数使用自定义封送拆收器，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="dd887-185">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute applied to the `INew` argument in the managed definition of the `DoSomeStuff` method indicates that the argument uses a custom marshaler, as the following example shows.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 <span data-ttu-id="dd887-186">在前面的示例中，提供给特性的第一个参数 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 是 <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 枚举值 `UnmanagedType.CustomMarshaler` 。</span><span class="sxs-lookup"><span data-stu-id="dd887-186">In the previous examples, the first parameter provided to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute is the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value `UnmanagedType.CustomMarshaler`.</span></span>  
  
 <span data-ttu-id="dd887-187">第二个参数是 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 字段，它提供自定义封送拆收器的程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="dd887-187">The second parameter is the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field, which provides the assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="dd887-188">此名称包含自定义封送拆收器的命名空间和类 (`MarshalType="MyCompany.NewOldMarshaler"`) 。</span><span class="sxs-lookup"><span data-stu-id="dd887-188">This name consists of the namespace and class of the custom marshaler (`MarshalType="MyCompany.NewOldMarshaler"`).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj"><span data-ttu-id="dd887-189">要销毁的托管对象。</span><span class="sxs-lookup"><span data-stu-id="dd887-189">The managed object to be destroyed.</span></span></param>
        <summary><span data-ttu-id="dd887-190">不再需要时执行必要的托管数据的清除。</span><span class="sxs-lookup"><span data-stu-id="dd887-190">Performs necessary cleanup of the managed data when it is no longer needed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="dd887-191">指向要销毁的非托管数据的指针。</span><span class="sxs-lookup"><span data-stu-id="dd887-191">A pointer to the unmanaged data to be destroyed.</span></span></param>
        <summary><span data-ttu-id="dd887-192">不再需要时执行必要的非托管数据的清除。</span><span class="sxs-lookup"><span data-stu-id="dd887-192">Performs necessary cleanup of the unmanaged data when it is no longer needed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dd887-193">返回要封送的本机数据的大小。</span><span class="sxs-lookup"><span data-stu-id="dd887-193">Returns the size of the native data to be marshaled.</span></span></summary>
        <returns><span data-ttu-id="dd887-194">本机数据的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="dd887-194">The size, in bytes, of the native data.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj"><span data-ttu-id="dd887-195">要转换的托管对象。</span><span class="sxs-lookup"><span data-stu-id="dd887-195">The managed object to be converted.</span></span></param>
        <summary><span data-ttu-id="dd887-196">将托管数据转换为非托管数据。</span><span class="sxs-lookup"><span data-stu-id="dd887-196">Converts the managed data to unmanaged data.</span></span></summary>
        <returns><span data-ttu-id="dd887-197">指向托管对象的 COM 视图的指针。</span><span class="sxs-lookup"><span data-stu-id="dd887-197">A pointer to the COM view of the managed object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="dd887-198">指向要包装的非托管数据的指针。</span><span class="sxs-lookup"><span data-stu-id="dd887-198">A pointer to the unmanaged data to be wrapped.</span></span></param>
        <summary><span data-ttu-id="dd887-199">将非托管数据转换为托管数据。</span><span class="sxs-lookup"><span data-stu-id="dd887-199">Converts the unmanaged data to managed data.</span></span></summary>
        <returns><span data-ttu-id="dd887-200">表示 COM 数据的托管视图的对象。</span><span class="sxs-lookup"><span data-stu-id="dd887-200">An object that represents the managed view of the COM data.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
