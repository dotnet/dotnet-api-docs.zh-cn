<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9ea560b57d1b1186ca215d6b4bd09d57d9e7d2b4" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83975080" /></Metadata><TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.InteropServices" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2b64b-101">指示非托管动态链接库 (DLL) 将特性化方法公开为静态入口点。</span><span class="sxs-lookup"><span data-stu-id="2b64b-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-102">可以将此特性应用于方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="2b64b-103"><xref:System.Runtime.InteropServices.DllImportAttribute> 属性提供调用从非托管 DLL 导出的函数所需的信息。</span><span class="sxs-lookup"><span data-stu-id="2b64b-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="2b64b-104">至少必须提供包含入口点的 DLL 的名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="2b64b-105">将此特性直接应用于C#和C++方法定义;但是，当你使用 `Declare` 语句时，Visual Basic 编译器将发出此特性。</span><span class="sxs-lookup"><span data-stu-id="2b64b-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="2b64b-106">对于包含 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>、<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>、<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>、<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>或 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段的复杂方法定义，请将此特性直接应用于 Visual Basic 方法定义。</span><span class="sxs-lookup"><span data-stu-id="2b64b-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="2b64b-107">**注意**JScript 不支持此特性。</span><span class="sxs-lookup"><span data-stu-id="2b64b-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="2b64b-108">可以使用C#或 Visual Basic 包装器类从 JScript 程序访问非托管 API 方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="2b64b-109">有关使用平台调用服务访问非托管 Dll 中的函数的其他信息，请参阅使用[非托管 Dll 函数](/dotnet/framework/interop/consuming-unmanaged-dll-functions)。</span><span class="sxs-lookup"><span data-stu-id="2b64b-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](/dotnet/framework/interop/consuming-unmanaged-dll-functions).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b64b-110"><xref:System.Runtime.InteropServices.DllImportAttribute> 不支持对泛型类型进行封送处理。</span><span class="sxs-lookup"><span data-stu-id="2b64b-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-111">下面的代码示例演示如何使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 特性导入 Win32 `MessageBox` 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2b64b-112">然后，该代码示例调用导入的方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName"><span data-ttu-id="2b64b-113">包含非托管方法的 DLL 的名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-113">The name of the DLL that contains the unmanaged method.</span></span> <span data-ttu-id="2b64b-114">如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-114">This can include an assembly display name, if the DLL is included in an assembly.</span></span></param>
        <summary><span data-ttu-id="2b64b-115">使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2b64b-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-116">如果程序集中包含非托管 DLL 文件，例如，通过使用链接器或 `/linkresource` 编译器选项，则可以将程序集显示名称指定为 `dllName`的一部分。</span><span class="sxs-lookup"><span data-stu-id="2b64b-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="2b64b-117">例如，如果一个名为 `unmanaged.dll` 的非托管 DLL 包含在名为 `MyAssembly`的托管程序集中，则可以指定该特性，如下面的代码所示。</span><span class="sxs-lookup"><span data-stu-id="2b64b-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-118">下面的代码示例演示如何使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 特性导入 Win32 `MessageBox` 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2b64b-119">然后，该代码示例调用导入的方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-120">将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</span><span class="sxs-lookup"><span data-stu-id="2b64b-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-121">如果 `true`，则启用最佳映射行为;否则，最佳映射会被禁用。</span><span class="sxs-lookup"><span data-stu-id="2b64b-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="2b64b-122">默认情况下，将 `true` <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 字段。</span><span class="sxs-lookup"><span data-stu-id="2b64b-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="2b64b-123">此字段的设置将覆盖 <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> 属性的任何级别设置。</span><span class="sxs-lookup"><span data-stu-id="2b64b-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="2b64b-124">公共语言运行时将任何托管的 Unicode 字符转换为 ANSI 字符，这些字符传递给在 Windows 98 或 Windows Me 上执行的非托管方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="2b64b-125">最佳映射允许互操作封送拆收器在不存在精确匹配时提供一个匹配的字符。</span><span class="sxs-lookup"><span data-stu-id="2b64b-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="2b64b-126">例如，封送拆收器将接受 ANSI 字符的非托管方法的 Unicode 版权字符转换为 "c"。</span><span class="sxs-lookup"><span data-stu-id="2b64b-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="2b64b-127">某些字符缺乏最佳表示形式;这些字符称为无法映射。</span><span class="sxs-lookup"><span data-stu-id="2b64b-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="2b64b-128">无法映射的字符通常转换为默认值 "？"ANSI 字符。</span><span class="sxs-lookup"><span data-stu-id="2b64b-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b64b-129">某些 Unicode 字符将转换为危险字符，如反斜杠 "\\" 字符，这可能会无意中更改路径。</span><span class="sxs-lookup"><span data-stu-id="2b64b-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="2b64b-130">通过将 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段设置为 "`true`，可以通过引发异常来向调用方发出无法映射的字符的信号。</span><span class="sxs-lookup"><span data-stu-id="2b64b-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b64b-131">将 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 提供的默认值和 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段传递给托管数组（其元素为 ANSI 字符或 LPSTRs 为非托管安全数组）时，不能更改这些默认值。</span><span class="sxs-lookup"><span data-stu-id="2b64b-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="2b64b-132">最佳映射始终处于启用状态，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="2b64b-133">请注意，此组合可能会危及安全模型。</span><span class="sxs-lookup"><span data-stu-id="2b64b-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-134">在某些情况下, Visual Basic 开发人员使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 代替 `Declare` 语句在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2b64b-135">设置 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="2b64b-136">下面的示例演示如何通过以下方法将最严格的字符映射安全应用到平台调用方法定义: 指定 ANSI 字符集，禁用最佳匹配映射行为，并在未映射的 Unicode 字符上引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="2b64b-137">互操作封送处理</span><span class="sxs-lookup"><span data-stu-id="2b64b-137">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-138">指示入口点的调用约定。</span><span class="sxs-lookup"><span data-stu-id="2b64b-138">Indicates the calling convention of an entry point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-139">设置 <xref:System.Runtime.InteropServices.CallingConvention> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-139">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="2b64b-140">"<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>" 字段的默认值为 "<xref:System.Runtime.InteropServices.CallingConvention.Winapi>"，这反过来又默认为 <xref:System.Runtime.InteropServices.CallingConvention.StdCall> 约定。</span><span class="sxs-lookup"><span data-stu-id="2b64b-140">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-141">在某些情况下, Visual Basic 开发人员使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 代替 `Declare` 语句在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2b64b-142">设置 <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-143">指示如何向方法封送字符串参数，并控制名称重整。</span><span class="sxs-lookup"><span data-stu-id="2b64b-143">Indicates how to marshal string parameters to the method and controls name mangling.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-144">将此字段与 <xref:System.Runtime.InteropServices.CharSet> 枚举的成员一起使用，以指定字符串参数的封送处理行为，并指定要调用的入口点名称（给定的准确名称或以 "A" 或 "W" 结尾的名称）。</span><span class="sxs-lookup"><span data-stu-id="2b64b-144">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="2b64b-145">C#和 Visual Basic 的默认枚举成员是 `CharSet.Ansi`，的C++默认枚举成员是 `CharSet.None`，它等效于 `CharSet.Ansi`。</span><span class="sxs-lookup"><span data-stu-id="2b64b-145">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="2b64b-146">在 Visual Basic 中，使用 `Declare` 语句指定 `CharSet` 字段。</span><span class="sxs-lookup"><span data-stu-id="2b64b-146">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="2b64b-147"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> 字段会影响 `CharSet` 字段的行为，以确定要调用的入口点名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-147">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="2b64b-148">有关与 `CharSet` 字段相关联的字符串封送处理和名称匹配行为的详细说明和示例，请参阅[指定字符集](/dotnet/framework/interop/specifying-a-character-set)。</span><span class="sxs-lookup"><span data-stu-id="2b64b-148">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](/dotnet/framework/interop/specifying-a-character-set).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-149">下面的代码示例演示如何使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 特性导入 Win32 `MessageBox` 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-149">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2b64b-150">然后，该代码示例调用导入的方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-150">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-151">指示要调用的 DLL 入口点的名称或序号。</span><span class="sxs-lookup"><span data-stu-id="2b64b-151">Indicates the name or ordinal of the DLL entry point to be called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-152">您可以通过提供指示包含入口点的 DLL 的名称的字符串指定入口点名称，也可以通过其序号标识入口点。</span><span class="sxs-lookup"><span data-stu-id="2b64b-152">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="2b64b-153">序数前面带有 # 号，例如 #1。</span><span class="sxs-lookup"><span data-stu-id="2b64b-153">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="2b64b-154">如果省略此字段，则公共语言运行时将使用标记有 <xref:System.Runtime.InteropServices.DllImportAttribute>的 the.NET 方法的名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-154">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="2b64b-155">有关其他信息，请参阅[在 dll 中标识函数](/dotnet/framework/interop/identifying-functions-in-dlls)。</span><span class="sxs-lookup"><span data-stu-id="2b64b-155">For additional information, see [Identifying Functions in DLLs](/dotnet/framework/interop/identifying-functions-in-dlls).</span></span> <span data-ttu-id="2b64b-156">有关演示如何使用 <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> 字段的示例，请参阅[指定入口点](/dotnet/framework/interop/specifying-an-entry-point)。</span><span class="sxs-lookup"><span data-stu-id="2b64b-156">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](/dotnet/framework/interop/specifying-an-entry-point).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-157">下面的代码示例演示如何使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 特性导入 Win32 `MessageBox` 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-157">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="2b64b-158">此代码示例使用 <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> 属性指定要导入的函数，然后将名称更改为 `MyNewMessageBoxMethod`。</span><span class="sxs-lookup"><span data-stu-id="2b64b-158">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-159">控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行时在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-159">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-160">如果 `false`，则当 <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> 字段设置为 `CharSet.Ansi`时，将调用追加了字母 A 的入口点名称，并且 <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> 字段设置为 `CharSet.Unicode`时，将调用追加了字母 W 的入口点名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-160">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="2b64b-161">通常，托管编译器将设置此字段。</span><span class="sxs-lookup"><span data-stu-id="2b64b-161">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="2b64b-162">下表显示了 "<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet>" 和 "<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>" 字段之间的关系，该关系基于编程语言所强加的默认值。</span><span class="sxs-lookup"><span data-stu-id="2b64b-162">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="2b64b-163">您可以重写默认设置，但请谨慎操作。</span><span class="sxs-lookup"><span data-stu-id="2b64b-163">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="2b64b-164">Language</span><span class="sxs-lookup"><span data-stu-id="2b64b-164">Language</span></span>|<span data-ttu-id="2b64b-165">ANSI</span><span class="sxs-lookup"><span data-stu-id="2b64b-165">ANSI</span></span>|<span data-ttu-id="2b64b-166">Unicode</span><span class="sxs-lookup"><span data-stu-id="2b64b-166">Unicode</span></span>|<span data-ttu-id="2b64b-167">自动</span><span class="sxs-lookup"><span data-stu-id="2b64b-167">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="2b64b-168">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="2b64b-168">Visual Basic</span></span>|<span data-ttu-id="2b64b-169">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="2b64b-169">ExactSpelling:=True</span></span>|<span data-ttu-id="2b64b-170">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="2b64b-170">ExactSpelling:=True</span></span>|<span data-ttu-id="2b64b-171">ExactSpelling:=False</span><span class="sxs-lookup"><span data-stu-id="2b64b-171">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="2b64b-172">C#</span><span class="sxs-lookup"><span data-stu-id="2b64b-172">C#</span></span>|<span data-ttu-id="2b64b-173">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2b64b-173">ExactSpelling=false</span></span>|<span data-ttu-id="2b64b-174">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2b64b-174">ExactSpelling=false</span></span>|<span data-ttu-id="2b64b-175">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2b64b-175">ExactSpelling=false</span></span>|  
|<span data-ttu-id="2b64b-176">C++</span><span class="sxs-lookup"><span data-stu-id="2b64b-176">C++</span></span>|<span data-ttu-id="2b64b-177">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2b64b-177">ExactSpelling=false</span></span>|<span data-ttu-id="2b64b-178">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2b64b-178">ExactSpelling=false</span></span>|<span data-ttu-id="2b64b-179">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="2b64b-179">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-180">在某些情况下, Visual Basic 开发人员会使用<xref:System.Runtime.InteropServices.DllImportAttribute>代替 `Declare` 语句在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-180">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2b64b-181">设置 <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-181">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-182">指示是否直接转换具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值的非托管方法，或是否自动将 <see langword="HRESULT" /> 或 <see langword="retval" /> 返回值转换为异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-182">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-183">将 "<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>" 字段设置为 "`true`，以将非托管签名与 `HRESULT` 或 `retval` 值直接转换;将其设置为 "`false`" 可将 `HRESULT` 或 `retval` 值自动转换为异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-183">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="2b64b-184">默认情况下，"<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>" 字段是 `true`的。</span><span class="sxs-lookup"><span data-stu-id="2b64b-184">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="2b64b-185">当 `true`时，生成的方法签名返回一个包含 `HRESULT` 值的整数值。</span><span class="sxs-lookup"><span data-stu-id="2b64b-185">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="2b64b-186">在这种情况下，您必须手动检查返回值，并在应用程序中相应地做出响应。</span><span class="sxs-lookup"><span data-stu-id="2b64b-186">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="2b64b-187">将 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 字段设置为 "`false`" 时，生成的方法签名包含 void 返回类型，而不是整数（`HRESULT`）返回类型。</span><span class="sxs-lookup"><span data-stu-id="2b64b-187">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="2b64b-188">当非托管方法生成 `HRESULT`时，运行时会自动忽略 `S_OK` （或0）的返回值，而不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-188">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="2b64b-189">对于除 `S_OK`以外的 `HRESULT`，运行时将自动引发与 `HRESULT`对应的异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-189">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="2b64b-190">请注意，<xref:System.Runtime.InteropServices.DllImportAttribute> 特性仅执行到返回 `HRESULT`的方法的这一转换。</span><span class="sxs-lookup"><span data-stu-id="2b64b-190">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="2b64b-191">当异常更适合应用程序的错误报告结构时，您可以决定将默认错误报告行为从 `HRESULT`更改为异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-191">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="2b64b-192">此字段类似于 <xref:System.Runtime.InteropServices.PreserveSigAttribute>;但是，与 "<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>" 字段不同的是，属性的默认值为 "`false`"。</span><span class="sxs-lookup"><span data-stu-id="2b64b-192">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="2b64b-193">在某些情况下, Visual Basic 开发人员会使用<xref:System.Runtime.InteropServices.DllImportAttribute>代替 `Declare` 语句在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-193">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2b64b-194">设置 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-194">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-195">下面的代码示例使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 导入一次非托管 `SHAutoComplete` 函数，并将 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 字段设置为 `true`，并再次将 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 字段设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="2b64b-195">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="2b64b-196">此代码示例将导致 `SHAutoComplete` 函数在出现一次异常的情况下生成任何错误，并 `HRESULT` 下一个。</span><span class="sxs-lookup"><span data-stu-id="2b64b-196">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-197">指示被调用方在从属性化方法返回之前是否调用 <see langword="SetLastError" /> Windows API 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-197">Indicates whether the callee calls the <see langword="SetLastError" /> Windows API function before returning from the attributed method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-198">`true` 指示被调用方将调用 `SetLastError`;否则，`false`。</span><span class="sxs-lookup"><span data-stu-id="2b64b-198">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="2b64b-199">默认为 `false`。</span><span class="sxs-lookup"><span data-stu-id="2b64b-199">The default is `false`.</span></span>  
  
 <span data-ttu-id="2b64b-200">运行时封送拆收器调用 `GetLastError` 并缓存返回的值，以防止其他 API 调用覆盖它。</span><span class="sxs-lookup"><span data-stu-id="2b64b-200">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="2b64b-201">可以通过调用 <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>来检索错误代码。</span><span class="sxs-lookup"><span data-stu-id="2b64b-201">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-202">在某些情况下, Visual Basic 开发人员会使用<xref:System.Runtime.InteropServices.DllImportAttribute>代替 `Declare` 语句在托管代码中定义 DLL 函数。</span><span class="sxs-lookup"><span data-stu-id="2b64b-202">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="2b64b-203">设置 <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-203">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-204">启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-204">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-205">`true` 指示每次互操作封送拆收器转换不可映射的字符时引发异常;`false`，指示禁用了 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段。</span><span class="sxs-lookup"><span data-stu-id="2b64b-205">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="2b64b-206">默认情况下，`false` 此字段。</span><span class="sxs-lookup"><span data-stu-id="2b64b-206">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="2b64b-207">公共语言运行时将任何托管的 Unicode 字符转换为 ANSI 字符，这些字符传递给在 Windows 98 或 Windows Me 上执行的非托管方法。</span><span class="sxs-lookup"><span data-stu-id="2b64b-207">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="2b64b-208">最佳映射允许互操作封送拆收器在不存在精确匹配时提供一个匹配的字符。</span><span class="sxs-lookup"><span data-stu-id="2b64b-208">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="2b64b-209">例如，封送拆收器将接受 ANSI 字符的非托管方法的 Unicode 版权字符转换为 "c"。</span><span class="sxs-lookup"><span data-stu-id="2b64b-209">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="2b64b-210">某些字符缺乏最佳表示形式;这些字符称为无法映射。</span><span class="sxs-lookup"><span data-stu-id="2b64b-210">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="2b64b-211">无法映射的字符通常转换为默认值 "？"ANSI 字符。</span><span class="sxs-lookup"><span data-stu-id="2b64b-211">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b64b-212">某些 Unicode 字符将转换为危险字符，如反斜杠 "\\" 字符，这可能会无意中更改路径。</span><span class="sxs-lookup"><span data-stu-id="2b64b-212">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="2b64b-213">通过将 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段设置为 "`true`，可以通过引发异常来向调用方发出无法映射的字符的信号。</span><span class="sxs-lookup"><span data-stu-id="2b64b-213">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b64b-214">将 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 提供的默认值和 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段传递给托管数组（其元素为 ANSI 字符或 LPSTRs 为非托管安全数组）时，不能更改这些默认值。</span><span class="sxs-lookup"><span data-stu-id="2b64b-214">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="2b64b-215">最佳映射始终处于启用状态，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-215">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="2b64b-216">请注意，此组合可能会危及安全模型。</span><span class="sxs-lookup"><span data-stu-id="2b64b-216">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b64b-217">在某些情况下，Visual Basic 开发人员使用 <xref:System.Runtime.InteropServices.DllImportAttribute> 在托管代码中定义 DLL 函数，而不是使用 `Declare` 语句。</span><span class="sxs-lookup"><span data-stu-id="2b64b-217">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="2b64b-218">设置 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 字段便是这其中的一种情况。</span><span class="sxs-lookup"><span data-stu-id="2b64b-218">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="2b64b-219">下面的示例演示如何通过以下方法将最严格的字符映射安全应用到平台调用方法定义: 指定 ANSI 字符集，禁用最佳匹配映射行为，并在未映射的 Unicode 字符上引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b64b-219">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="2b64b-220">互操作封送处理</span><span class="sxs-lookup"><span data-stu-id="2b64b-220">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b64b-221">获取包含入口点的 DLL 文件的名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-221">Gets the name of the DLL file that contains the entry point.</span></span></summary>
        <value><span data-ttu-id="2b64b-222">包含入口点的 DLL 文件的名称。</span><span class="sxs-lookup"><span data-stu-id="2b64b-222">The name of the DLL file that contains the entry point.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b64b-223">可以提供完整路径或相对路径。</span><span class="sxs-lookup"><span data-stu-id="2b64b-223">You can provide a full or relative path.</span></span> <span data-ttu-id="2b64b-224">如果不提供路径，则 DLL 必须在运行时位于当前路径中，除非该 DLL 是通过其他方法加载的。</span><span class="sxs-lookup"><span data-stu-id="2b64b-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="2b64b-225">但请注意，如果移动了 DLL，则使用完全限定路径会引入导致。</span><span class="sxs-lookup"><span data-stu-id="2b64b-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
