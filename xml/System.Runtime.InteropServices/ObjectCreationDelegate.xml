<Type Name="ObjectCreationDelegate" FullName="System.Runtime.InteropServices.ObjectCreationDelegate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0927f8a661908cb61f643a3fbe674bf1c0012fb" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89784591" /></Metadata><TypeSignature Language="C#" Value="public delegate IntPtr ObjectCreationDelegate(IntPtr aggregator);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ObjectCreationDelegate extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ObjectCreationDelegate" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ObjectCreationDelegate(aggregator As IntPtr) As IntPtr " />
  <TypeSignature Language="C++ CLI" Value="public delegate IntPtr ObjectCreationDelegate(IntPtr aggregator);" />
  <TypeSignature Language="F#" Value="type ObjectCreationDelegate = delegate of nativeint -&gt; nativeint" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="aggregator" Type="System.IntPtr" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.IntPtr</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="aggregator"><span data-ttu-id="0b99f-101">指向托管对象的 <see langword="IUnknown" /> 接口的指针。</span><span class="sxs-lookup"><span data-stu-id="0b99f-101">A pointer to the managed object's <see langword="IUnknown" /> interface.</span></span></param>
    <summary><span data-ttu-id="0b99f-102">创建 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="0b99f-102">Creates a COM object.</span></span></summary>
    <returns><span data-ttu-id="0b99f-103">表示 COM 对象的 <see langword="IUnknown" /> 接口的 <see cref="T:System.IntPtr" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0b99f-103">An <see cref="T:System.IntPtr" /> object that represents the <see langword="IUnknown" /> interface of the COM object.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b99f-104">`CoCreateInstance`当托管对象需要创建其非托管部分的新实例时，调用此委托以创建 COM 对象作为替代方法。</span><span class="sxs-lookup"><span data-stu-id="0b99f-104">This delegate is called to create a COM object as an alternative to `CoCreateInstance` when a managed object needs to create a new instance of its unmanaged portion.</span></span> <span data-ttu-id="0b99f-105">`IUnknown`托管对象的接口作为参数传递，并且委托应返回 `IUnknown` 非托管对象的接口。</span><span class="sxs-lookup"><span data-stu-id="0b99f-105">The `IUnknown` interface of the managed object is passed as a parameter and the delegate should return the `IUnknown` interface of the unmanaged object.</span></span> <span data-ttu-id="0b99f-106">这两个接口都作为类型 <xref:System.IntPtr> 进行传递，以避免封送处理。</span><span class="sxs-lookup"><span data-stu-id="0b99f-106">Both interfaces are passed as type <xref:System.IntPtr> to avoid marshaling.</span></span>  
  
 <span data-ttu-id="0b99f-107">和的每个派生类 <xref:System.Delegate> <xref:System.MulticastDelegate> 都有一个构造函数和一个 `Invoke` 方法。</span><span class="sxs-lookup"><span data-stu-id="0b99f-107">Every derived class of <xref:System.Delegate> and <xref:System.MulticastDelegate> has a constructor and an `Invoke` method.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
