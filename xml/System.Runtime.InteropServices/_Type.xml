<Type Name="_Type" FullName="System.Runtime.InteropServices._Type">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80a455c14e4b5f40cd39f43b7657e8d90d18ee9c" /><Meta Name="ms.sourcegitcommit" Value="5a1772308619a503b0c695dfca01b279c555fa43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/15/2021" /><Meta Name="ms.locfileid" Value="98238744" /></Metadata><TypeSignature Language="C#" Value="public interface _Type" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Type" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._Type" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Type" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Type" />
  <TypeSignature Language="F#" Value="type _Type = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="649f6-101">向非托管代码公开 <see cref="T:System.Type" /> 类的公共成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-101">Exposes the public members of the <see cref="T:System.Type" /> class to the unmanaged code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-102">此接口用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-102">This interface is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-103">此接口保留 <xref:System.Type?displayProperty=nameWithType> 可由非托管 COM 对象访问的类成员的 vtable 顺序。</span><span class="sxs-lookup"><span data-stu-id="649f6-103">This interface preserves the vtable order of the <xref:System.Type?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Runtime.InteropServices._Type.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-104">为 COM 对象提供对 <see cref="P:System.Type.Assembly" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-104">Provides COM objects with version-independent access to the <see cref="P:System.Type.Assembly" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-105">描述包含当前类型的程序集的 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="649f6-105">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-106">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-106">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-107"><xref:System.Type.Assembly%2A?displayProperty=nameWithType>属性获取 <xref:System.Reflection.Assembly> 在其中声明该类型的。</span><span class="sxs-lookup"><span data-stu-id="649f6-107">The <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property gets the <xref:System.Reflection.Assembly> in which the type is declared.</span></span> <span data-ttu-id="649f6-108">对于泛型类型，此属性获取 <xref:System.Reflection.Assembly> 在其中定义该泛型类型的。</span><span class="sxs-lookup"><span data-stu-id="649f6-108">For generic types, this property gets the <xref:System.Reflection.Assembly> in which the generic type is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-109">为 COM 对象提供对 <see cref="P:System.Type.AssemblyQualifiedName" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-109">Provides COM objects with version-independent access to the <see cref="P:System.Type.AssemblyQualifiedName" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-110"><see cref="T:System.Type" /> 的程序集限定名，包括从中加载 <see cref="T:System.Type" /> 的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-110">The assembly-qualified name of the <see cref="T:System.Type" />, including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-111">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-111">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-112"><xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>属性获取的程序集限定名称 <xref:System.Type> ，包括从中加载的程序集的名称 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-112">The <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property gets the assembly-qualified name of the <xref:System.Type>, including the name of the assembly from which the <xref:System.Type> was loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Runtime.InteropServices._Type.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-113">为 COM 对象提供对 <see cref="P:System.Type.Attributes" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-113">Provides COM objects with version-independent access to the <see cref="P:System.Type.Attributes" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-114">表示 <see cref="T:System.Reflection.TypeAttributes" /> 的属性集的 <see cref="T:System.Type" /> 对象，除非 <see cref="T:System.Type" /> 表示泛型类型形参，在此情况下该值未指定。</span><span class="sxs-lookup"><span data-stu-id="649f6-114">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-115">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-115">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-116"><xref:System.Type.Attributes%2A?displayProperty=nameWithType>属性获取与关联的特性 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-116">The <xref:System.Type.Attributes%2A?displayProperty=nameWithType> property gets the attributes associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Runtime.InteropServices._Type.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-117">为 COM 对象提供对 <see cref="P:System.Type.BaseType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-117">Provides COM objects with version-independent access to the <see cref="P:System.Type.BaseType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-118">当前 <see cref="T:System.Type" /> 直接继承的 <see cref="T:System.Type" />；如果当前 <see langword="null" /> 表示 <see cref="T:System.Object" /> 类，则为 <see langword="Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-118">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-119">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-119">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-120"><xref:System.Type.BaseType%2A?displayProperty=nameWithType>属性获取当前直接从中继承的类型 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-120">The <xref:System.Type.BaseType%2A?displayProperty=nameWithType> property gets the type from which the current <xref:System.Type> directly inherits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-121">为 COM 对象提供对 <see cref="P:System.Type.DeclaringType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-121">Provides COM objects with version-independent access to the <see cref="P:System.Type.DeclaringType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-122">声明该成员的类的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-122">The <see cref="T:System.Type" /> object for the class that declares this member.</span></span> <span data-ttu-id="649f6-123">如果该类型是嵌套类型，则该属性返回封闭类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-123">If the type is a nested type, this property returns the enclosing type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-124">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-124">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-125"><xref:System.Type.DeclaringType%2A?displayProperty=nameWithType>属性获取声明该成员的类。</span><span class="sxs-lookup"><span data-stu-id="649f6-125">The <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-126">为 COM 对象提供对 <see cref="Overload:System.Type.Equals" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-126">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.Equals" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-127">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-127">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-128"><xref:System.Type.Equals%2A?displayProperty=nameWithType>方法确定当前的基础系统类型 <xref:System.Type> 是否与指定或的基础系统类型相同 <xref:System.Object> <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-128">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object> or <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="649f6-129">.</span><span class="sxs-lookup"><span data-stu-id="649f6-129">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_Type.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="649f6-130"><see cref="T:System.Object" />，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</span><span class="sxs-lookup"><span data-stu-id="649f6-130">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="649f6-131">为 COM 对象提供对 <see cref="M:System.Type.Equals(System.Object)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-131">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-132">如果 <see langword="true" /> 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-132"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-133">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-133">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-134"><xref:System.Type.Equals%2A?displayProperty=nameWithType>方法确定当前的基础系统类型是否与指定的 <xref:System.Type> 基础系统类型相同 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-134">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="abstract member Equals : Type -&gt; bool" Usage="_Type.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="649f6-135"><see cref="T:System.Type" />，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</span><span class="sxs-lookup"><span data-stu-id="649f6-135">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="649f6-136">为 COM 对象提供对 <see cref="M:System.Type.Equals(System.Type)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-136">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-137">如果 <see langword="true" /> 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-137"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-138">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-138">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-139"><xref:System.Type.Equals%2A?displayProperty=nameWithType>方法确定当前的基础系统类型是否与指定的 <xref:System.Type> 基础系统类型相同 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-139">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="_Type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="649f6-140">对照 <paramref name="filterCriteria" /> 比较接口的 <see cref="T:System.Reflection.TypeFilter" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="649f6-140">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <paramref name="filterCriteria" />.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="649f6-141">确定接口是否应包括在返回数组中的搜索判据。</span><span class="sxs-lookup"><span data-stu-id="649f6-141">The search criteria that determines whether an interface should be included in the returned array.</span></span></param>
        <summary><span data-ttu-id="649f6-142">为 COM 对象提供对 <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-142">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-143"><see cref="T:System.Type" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 实现或继承的接口的筛选列表。</span><span class="sxs-lookup"><span data-stu-id="649f6-143">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-144">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-144">-or-</span></span> 
<span data-ttu-id="649f6-145">如果没有匹配筛选器的接口由当前 <see cref="T:System.Type" /> 实现或继承，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-145">An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-146">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-146">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-147"><xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType>方法返回对象的数组，这些 <xref:System.Type> 对象表示由当前实现或继承的接口的筛选列表 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-147">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects representing a filtered list of interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="_Type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType"><span data-ttu-id="649f6-148">指示要搜索的成员类型的 <see langword="MemberTypes" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-148">A <see langword="MemberTypes" /> object indicating the type of member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-149">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-149">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-150">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-150">-or-</span></span> 
<span data-ttu-id="649f6-151">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-151">Zero, to return <see langword="null" />.</span></span></param>
        <param name="filter"><span data-ttu-id="649f6-152">执行比较的委托，如果当前被检查的成员匹配 <see langword="true" />，则返回 <paramref name="filterCriteria" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-152">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</span></span> <span data-ttu-id="649f6-153">可以使用该类提供的 <see langword="FilterAttribute" />、<see langword="FilterName" /> 和 <see langword="FilterNameIgnoreCase" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="649f6-153">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span></span> <span data-ttu-id="649f6-154">第一个委托使用 <see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的字段作为搜索判据，另两个委托使用 <see langword="String" /> 对象作为搜索判据。</span><span class="sxs-lookup"><span data-stu-id="649f6-154">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="649f6-155">确定成员是否在 <see langword="MemberInfo" /> 对象数组中返回的搜索判据。</span><span class="sxs-lookup"><span data-stu-id="649f6-155">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span></span>  
  
<span data-ttu-id="649f6-156"><see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的字段可以和该类提供的 <see langword="FilterAttribute" /> 委托一起使用。</span><span class="sxs-lookup"><span data-stu-id="649f6-156">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span></span></param>
        <summary><span data-ttu-id="649f6-157">为 COM 对象提供对 <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-157">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-158">指定成员类型的 <see cref="T:System.Reflection.MemberInfo" /> 对象的筛选数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-158">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span>  
  
<span data-ttu-id="649f6-159">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-159">-or-</span></span> 
<span data-ttu-id="649f6-160">如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有匹配筛选判据的 <see cref="T:System.Type" /> 类型成员，则为 <paramref name="memberType" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-160">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-161">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-161">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-162"><xref:System.Type.FindMembers%2A?displayProperty=nameWithType>方法返回 <xref:System.Reflection.MemberInfo> 指定成员类型的对象的筛选数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-162">The <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> method returns a filtered array of <xref:System.Reflection.MemberInfo> objects of the specified member type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Runtime.InteropServices._Type.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-163">为 COM 对象提供对 <see cref="P:System.Type.FullName" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-163">Provides COM objects with version-independent access to the <see cref="P:System.Type.FullName" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-164">包含 <see cref="T:System.Type" /> 的完全限定名（包括 <see cref="T:System.Type" /> 的命名空间，但不包括程序集）的字符串。</span><span class="sxs-lookup"><span data-stu-id="649f6-164">A string containing the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-165">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-165">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-166"><xref:System.Type.FullName%2A?displayProperty=nameWithType>属性获取的完全限定名 <xref:System.Type> ，包括的命名空间， <xref:System.Type> 但不包括程序集。</span><span class="sxs-lookup"><span data-stu-id="649f6-166">The <xref:System.Type.FullName%2A?displayProperty=nameWithType> property gets the fully qualified name of the <xref:System.Type>, including the namespace of the <xref:System.Type> but not the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int" Usage="_Type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-167">为 COM 对象提供对 <see cref="M:System.Type.GetArrayRank" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-167">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetArrayRank" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-168">包含当前 <see cref="T:System.Type" /> 中维数的 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-168">An <see cref="T:System.Int32" /> containing the number of dimensions in the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-169">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-169">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-170"><xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType>方法获取中的维数 <xref:System.Array> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-170">The <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> method gets the number of dimensions in an <xref:System.Array>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-171">为 COM 对象提供对 <see cref="Overload:System.Type.GetConstructor" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-171">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructor" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-172">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-172">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-173"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType>方法获取当前的特定构造函数 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-173">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method gets a specific constructor of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="649f6-174">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-174">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span></span>  
  
<span data-ttu-id="649f6-175">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-175">-or-</span></span> 
<span data-ttu-id="649f6-176"><see cref="T:System.Type" /> 对象的空数组，用于获取不带参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="649f6-176">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span></span> <span data-ttu-id="649f6-177">这样的空数组由 <see langword="static" /> 字段 <see cref="F:System.Type.EmptyTypes" /> 提供。</span><span class="sxs-lookup"><span data-stu-id="649f6-177">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <summary><span data-ttu-id="649f6-178">为 COM 对象提供对 <see cref="M:System.Type.GetConstructor(System.Type[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-178">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-179">为表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-179">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-180">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-180">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-181"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType>方法搜索其参数与指定数组中的类型匹配的公共实例构造函数。</span><span class="sxs-lookup"><span data-stu-id="649f6-181">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a public instance constructor whose parameters match the types in the specified array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (bindingAttr As BindingFlags, binder As Binder, types As Type(), modifiers As ParameterModifier()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-182">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-182">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-183">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-183">-or-</span></span> 
<span data-ttu-id="649f6-184">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-184">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-185">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-185">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-186">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-186">-or-</span></span> 
 <span data-ttu-id="649f6-187">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-187"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-188"><see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-188">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="649f6-189">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-189">-or-</span></span> 
<span data-ttu-id="649f6-190">获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="649f6-190">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span>  
  
<span data-ttu-id="649f6-191">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-191">-or-</span></span> 
 <span data-ttu-id="649f6-192"><see cref="F:System.Type.EmptyTypes" />.</span><span class="sxs-lookup"><span data-stu-id="649f6-192"><see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-193"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与参数类型数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-193">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span></span> <span data-ttu-id="649f6-194">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-194">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-195">为 COM 对象提供对 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-195">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-196">表示符合指定需求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-196">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-197">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-197">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-198"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType>方法使用指定的绑定约束，搜索其参数与指定的参数类型和修饰符匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="649f6-198">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-199">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-199">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-200">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-200">-or-</span></span> 
<span data-ttu-id="649f6-201">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-201">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-202">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-202">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-203">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-203">-or-</span></span> 
 <span data-ttu-id="649f6-204">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-204"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="649f6-205"><see cref="T:System.Reflection.CallingConventions" /> 对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。</span><span class="sxs-lookup"><span data-stu-id="649f6-205">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-206"><see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-206">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="649f6-207">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-207">-or-</span></span> 
<span data-ttu-id="649f6-208">获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="649f6-208">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-209"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-209">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="649f6-210">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-210">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-211">为 COM 对象提供对 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-211">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-212">表示符合指定需求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-212">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-213">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-213">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-214"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType>方法使用指定的绑定约束和指定的调用约定搜索其参数与指定的参数类型和修饰符匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="649f6-214">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-215">为 COM 对象提供对 <see cref="Overload:System.Type.GetConstructors" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-215">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructors" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-216">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-216">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-217"><xref:System.Type.GetConstructors%2A?displayProperty=nameWithType>方法获取当前的构造函数 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-217">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method gets the constructors of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-218">为 COM 对象提供对 <see cref="M:System.Type.GetConstructors" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-218">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-219"><see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。</span><span class="sxs-lookup"><span data-stu-id="649f6-219">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span></span> <span data-ttu-id="649f6-220">如果当前 <see cref="T:System.Type" /> 没有定义公共实例构造函数，或者当前 <see cref="T:System.Type" /> 表示泛型类型或方法定义的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-220">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-221">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-221">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-222"><xref:System.Type.GetConstructors%2A?displayProperty=nameWithType>方法返回为当前定义的所有公共构造函数 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-222">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method returns all the public constructors defined for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-223">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-223">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-224">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-224">-or-</span></span> 
<span data-ttu-id="649f6-225">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-225">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-226">为 COM 对象提供对 <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-226">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-227">表示为当前 <see cref="T:System.Reflection.ConstructorInfo" /> 定义的匹配指定绑定约束的所有构造函数的 <see cref="T:System.Type" /> 对象数组，包括类型初始值设定项（如果定义的话）。</span><span class="sxs-lookup"><span data-stu-id="649f6-227">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span></span> <span data-ttu-id="649f6-228">如果当前 <see cref="T:System.Type" /> 没有定义构造函数，或者定义的构造函数都不符合绑定约束，或者当前 <see cref="T:System.Type" /> 表示泛型类型或方法定义的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-228">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-229">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-229">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-230"><xref:System.Type.GetConstructors%2A?displayProperty=nameWithType>方法使用指定的搜索为当前定义的构造函数 <xref:System.Type> <xref:System.Reflection.BindingFlags> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-230">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method searches for the constructors defined for the current <xref:System.Type>, using the specified <xref:System.Reflection.BindingFlags>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-231">为 COM 对象提供对 <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-231">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-232">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-232">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-233"><xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>方法返回应用于此成员的所有属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-233">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_Type.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="649f6-234">指定是否搜索此成员的继承链以查找属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-234">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="649f6-235">为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-235">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-236">应用于此成员的自定义属性的数组；如果未应用任何特性，则为包含零 (0) 个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-236">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-237">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-237">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-238"><xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType>方法返回应用于此成员的所有属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-238">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_Type.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="649f6-239">要搜索的属性的类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-239">The type of attribute to search for.</span></span> <span data-ttu-id="649f6-240">仅返回可分配给此类型的属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-240">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="649f6-241">指定是否搜索此成员的继承链以查找属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-241">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="649f6-242">为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-242">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-243">应用于此成员的自定义属性的数组；如果未应用任何特性，则为包含零 (0) 个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-243">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-244">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-244">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-245"><xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType>方法返回应用于此成员的所有属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-245">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-246">为 COM 对象提供对 <see cref="M:System.Type.GetDefaultMembers" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-246">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetDefaultMembers" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-247">表示当前 <see cref="T:System.Reflection.MemberInfo" /> 的所有默认成员的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-247">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-248">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-248">-or-</span></span> 
<span data-ttu-id="649f6-249">如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有默认成员，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-249">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-250">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-250">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-251"><xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType>方法搜索为设置了的当前定义的成员 <xref:System.Type> <xref:System.Reflection.DefaultMemberAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-251">The <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type> whose <xref:System.Reflection.DefaultMemberAttribute> is set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="_Type.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-252">为 COM 对象提供对 <see cref="M:System.Type.GetElementType" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-252">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetElementType" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-253">当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-253">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
<span data-ttu-id="649f6-254">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-254">-or-</span></span> 
 <span data-ttu-id="649f6-255">如果当前 <see cref="T:System.Type" /> 不是数组或指针，或者不是通过引用传递的，或者表示泛型类型，或者表示泛型类型或方法定义的类型参数，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-255"><see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-256">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-256">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-257"><xref:System.Type.GetElementType%2A?displayProperty=nameWithType>方法返回 <xref:System.Type> 当前数组、指针或引用类型包含的或引用的对象的。</span><span class="sxs-lookup"><span data-stu-id="649f6-257">The <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> method returns the <xref:System.Type> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-258">为 COM 对象提供对 <see cref="Overload:System.Type.GetEvent" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-258">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvent" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-259">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-260"><xref:System.Type.GetEvent%2A?displayProperty=nameWithType>方法获取由当前声明或继承的特定事件 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-260">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method gets a specific event declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-261">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-261">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-262">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-262">-or-</span></span> 
<span data-ttu-id="649f6-263">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-263">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-264">为 COM 对象提供对 <see cref="M:System.Type.GetEvent(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-264">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-265"><see cref="T:System.Reflection.EventInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。</span><span class="sxs-lookup"><span data-stu-id="649f6-265">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-266">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-266">-or-</span></span> 
<span data-ttu-id="649f6-267">如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-267">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-268">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-268">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-269"><xref:System.Type.GetEvent%2A?displayProperty=nameWithType>方法 <xref:System.Type> 使用指定的绑定约束，搜索由当前声明或继承的事件。</span><span class="sxs-lookup"><span data-stu-id="649f6-269">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-270">包含事件名称的 <see cref="T:System.String" />，该事件是由当前 <see cref="T:System.Type" /> 声明或继承的。</span><span class="sxs-lookup"><span data-stu-id="649f6-270">The <see cref="T:System.String" /> containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-271">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-271">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-272">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-272">-or-</span></span> 
<span data-ttu-id="649f6-273">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-273">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-274">为 COM 对象提供对 <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-274">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-275">如找到，则为表示由当前 <see cref="T:System.Type" /> 声明或继承的指定事件的 <see cref="T:System.Reflection.EventInfo" /> 对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-275">The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-276">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-276">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-277"><xref:System.Type.GetEvent%2A?displayProperty=nameWithType>方法 <xref:System.Reflection.EventInfo> 使用指定的绑定约束，返回表示指定事件的对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-277">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method returns the <xref:System.Reflection.EventInfo> object representing the specified event, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-278">为 COM 对象提供对 <see cref="Overload:System.Type.GetEvents" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-278">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvents" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-279">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-279">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-280"><xref:System.Type.GetEvents%2A?displayProperty=nameWithType>方法获取由当前声明或继承的事件 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-280">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method gets the events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-281">为 COM 对象提供对 <see cref="M:System.Type.GetEvents" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-281">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-282"><see cref="T:System.Reflection.EventInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的所有公共事件。</span><span class="sxs-lookup"><span data-stu-id="649f6-282">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-283">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-283">-or-</span></span> 
<span data-ttu-id="649f6-284">如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有默认成员，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-284">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-285">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-285">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-286"><xref:System.Type.GetEvents%2A?displayProperty=nameWithType>方法返回由当前声明或继承的所有公共事件 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-286">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method returns all the public events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-287">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-287">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-288">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-288">-or-</span></span> 
<span data-ttu-id="649f6-289">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-289">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-290">为 COM 对象提供对 <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-290">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-291"><see cref="T:System.Reflection.EventInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。</span><span class="sxs-lookup"><span data-stu-id="649f6-291">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-292">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-292">-or-</span></span> 
<span data-ttu-id="649f6-293">如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-293">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-294">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-294">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-295"><xref:System.Type.GetEvents%2A?displayProperty=nameWithType>方法 <xref:System.Type> 使用指定的绑定约束，搜索由当前声明或继承的事件。</span><span class="sxs-lookup"><span data-stu-id="649f6-295">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-296">为 COM 对象提供对 <see cref="Overload:System.Type.GetField" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-296">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetField" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-297">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-298"><xref:System.Type.GetField%2A?displayProperty=nameWithType>方法获取当前的特定字段 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-298">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-299">包含要获取的数据字段的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-299">The <see cref="T:System.String" /> containing the name of the data field to get.</span></span></param>
        <summary><span data-ttu-id="649f6-300">为 COM 对象提供对 <see cref="M:System.Type.GetField(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-300">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-301">如找到，则为表示具有指定名称的公共字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-301">A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-302">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-303"><xref:System.Type.GetField%2A?displayProperty=nameWithType>方法搜索具有指定名称的公共字段。</span><span class="sxs-lookup"><span data-stu-id="649f6-303">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the public field with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-304">包含要获取的数据字段的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-304">The <see cref="T:System.String" /> containing the name of the data field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-305">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-305">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-306">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-306">-or-</span></span> 
<span data-ttu-id="649f6-307">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-307">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-308">为 COM 对象提供对 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-308">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-309">表示符合指定要求的字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-309">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-310">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-311"><xref:System.Type.GetField%2A?displayProperty=nameWithType>方法使用指定绑定约束搜索指定字段。</span><span class="sxs-lookup"><span data-stu-id="649f6-311">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the specified field, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-312">为 COM 对象提供对 <see cref="Overload:System.Type.GetFields" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-312">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetFields" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-313">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-313">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-314"><xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法获取当前的特定字段 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-314">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-315">为 COM 对象提供对 <see cref="M:System.Type.GetFields" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-315">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-316">表示为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的所有公共字段的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-316">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-317">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-317">-or-</span></span> 
<span data-ttu-id="649f6-318">如果没有为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的公共字段，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-318">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-319">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-319">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-320"><xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法返回当前的所有公共字段 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-320">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method returns all the public fields of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-321">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-321">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-322">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-322">-or-</span></span> 
<span data-ttu-id="649f6-323">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-323">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-324">为 COM 对象提供对 <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-324">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-325">表示为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的匹配指定绑定约束的所有字段的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-325">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-326">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-326">-or-</span></span> 
<span data-ttu-id="649f6-327">如果没有为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-327">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-328">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-328">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-329"><xref:System.Type.GetFields%2A?displayProperty=nameWithType>方法 <xref:System.Type> 使用指定的绑定约束，搜索为当前定义的字段。</span><span class="sxs-lookup"><span data-stu-id="649f6-329">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method searches for the fields defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_Type.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-330">为 COM 对象提供对 <see cref="M:System.Type.GetHashCode" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-330">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetHashCode" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-331">包含此实例的哈希代码的 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-331">An <see cref="T:System.Int32" /> containing the hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-332">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-332">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-333"><xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-333">The <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames : Guid * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="649f6-334">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="649f6-334">Reserved for future use.</span></span> <span data-ttu-id="649f6-335">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="649f6-335">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="649f6-336">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-336">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="649f6-337">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="649f6-337">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="649f6-338">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="649f6-338">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="649f6-339">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="649f6-339">Caller-allocated array that receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="649f6-340">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="649f6-340">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-341">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-341">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649f6-342">有关详细信息，请参阅 [IDispatch：： idispatch.getidsofnames](/windows/win32/api/oaidl/nf-oaidl-idispatch-getidsofnames)。</span><span class="sxs-lookup"><span data-stu-id="649f6-342">For more information, see [IDispatch::GetIDsOfNames](/windows/win32/api/oaidl/nf-oaidl-idispatch-getidsofnames).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-343">为 COM 对象提供对 <see cref="Overload:System.Type.GetInterface" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-343">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetInterface" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-344">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-344">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-345"><xref:System.Type.GetInterface%2A?displayProperty=nameWithType>方法获取由当前实现或继承的特定接口 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-345">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method gets a specific interface implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type" Usage="_Type.GetInterface name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-346">包含要获取的接口名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-346">The <see cref="T:System.String" /> containing the name of the interface to get.</span></span> <span data-ttu-id="649f6-347">对于泛型接口，这是重整名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-347">For generic interfaces, this is the mangled name.</span></span></param>
        <summary><span data-ttu-id="649f6-348">为 COM 对象提供对 <see cref="M:System.Type.GetInterface(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-348">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-349">表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的 <see cref="T:System.Type" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-349">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-350">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-350">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-351"><xref:System.Type.GetInterface%2A?displayProperty=nameWithType>方法搜索具有指定名称的接口。</span><span class="sxs-lookup"><span data-stu-id="649f6-351">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the interface with the specified name.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="_Type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-352">包含要获取的接口名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-352">The <see cref="T:System.String" /> containing the name of the interface to get.</span></span> <span data-ttu-id="649f6-353">对于泛型接口，这是重整名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-353">For generic interfaces, this is the mangled name.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="649f6-354"><see langword="true" />，表示对 <paramref name="name" /> 执行不区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="649f6-354"><see langword="true" /> to perform a case-insensitive search for <paramref name="name" />.</span></span>  
  
<span data-ttu-id="649f6-355">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-355">-or-</span></span> 
 <span data-ttu-id="649f6-356"><see langword="false" />，表示对 <paramref name="name" /> 执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="649f6-356"><see langword="false" /> to perform a case-sensitive search for <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="649f6-357">为 COM 对象提供对 <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-357">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-358">表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的 <see cref="T:System.Type" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-358">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-359">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-359">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-360"><xref:System.Type.GetInterface%2A?displayProperty=nameWithType>方法搜索指定的接口，指定是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="649f6-360">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the specified interface, specifying whether to do a case-sensitive search.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="_Type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="649f6-361">要检索其映射的接口的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-361">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</span></span></param>
        <summary><span data-ttu-id="649f6-362">为 COM 对象提供对 <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-362">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-363">表示 <paramref name="interfaceType" /> 的接口映射的 <see cref="T:System.Reflection.InterfaceMapping" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-363">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-364">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-364">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-365"><xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType>方法返回指定接口类型的接口映射。</span><span class="sxs-lookup"><span data-stu-id="649f6-365">The <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> method returns an interface mapping for the specified interface type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="_Type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-366">为 COM 对象提供对 <see cref="M:System.Type.GetInterfaces" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-366">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaces" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-367">表示由当前 <see cref="T:System.Type" /> 实现或继承的所有接口的 <see cref="T:System.Type" />对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-367">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-368">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-368">-or-</span></span> 
<span data-ttu-id="649f6-369">如果没有由当前 <see cref="T:System.Type" /> 实现或继承的接口，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-369">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-370">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-370">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-371"><xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>方法获取由当前实现或继承的所有接口 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-371">The <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> method gets all the interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-372">为 COM 对象提供对 <see cref="Overload:System.Type.GetMember" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-372">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMember" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-373">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-373">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-374"><xref:System.Type.GetMember%2A?displayProperty=nameWithType>方法获取当前的指定成员 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-374">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method gets the specified members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-375">包含要获取的公共成员名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-375">The <see cref="T:System.String" /> containing the name of the public members to get.</span></span></param>
        <summary><span data-ttu-id="649f6-376">为 COM 对象提供对 <see cref="M:System.Type.GetMember(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-376">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-377">一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-377">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-378">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-378">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-379"><xref:System.Type.GetMember%2A?displayProperty=nameWithType>方法搜索具有指定名称的公共成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-379">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the public members with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-380">包含要获取的成员的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-380">The <see cref="T:System.String" /> containing the name of the members to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-381">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-381">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-382">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-382">-or-</span></span> 
<span data-ttu-id="649f6-383">零，返回空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-383">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="649f6-384">为 COM 对象提供对 <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-384">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-385">一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-385">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-386">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-386">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-387"><xref:System.Type.GetMember%2A?displayProperty=nameWithType>方法使用指定绑定约束搜索指定成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-387">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-388">包含要获取的成员的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-388">The <see cref="T:System.String" /> containing the name of the members to get.</span></span></param>
        <param name="type"><span data-ttu-id="649f6-389">要搜索的 <see cref="T:System.Reflection.MemberTypes" /> 值。</span><span class="sxs-lookup"><span data-stu-id="649f6-389">The <see cref="T:System.Reflection.MemberTypes" /> value to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-390">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-390">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-391">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-391">-or-</span></span> 
<span data-ttu-id="649f6-392">零，返回空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-392">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="649f6-393">为 COM 对象提供对 <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-393">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-394">一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-394">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-395">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-395">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-396"><xref:System.Type.GetMember%2A?displayProperty=nameWithType>方法使用指定的绑定约束搜索指定成员类型的指定成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-396">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members of the specified member type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-397">为 COM 对象提供对 <see cref="Overload:System.Type.GetMembers" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-397">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMembers" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-398">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-398">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-399"><xref:System.Type.GetMembers%2A?displayProperty=nameWithType>方法获取当前的 (属性、方法、字段、事件等) 的成员 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-399">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method gets the members (properties, methods, fields, events, and so on) of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-400">为 COM 对象提供对 <see cref="M:System.Type.GetMembers" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-400">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-401">表示当前 <see cref="T:System.Reflection.MemberInfo" /> 的所有公共成员的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-401">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-402">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-402">-or-</span></span> 
<span data-ttu-id="649f6-403">如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有公共成员，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-403">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-404">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-404">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-405"><xref:System.Type.GetMembers%2A?displayProperty=nameWithType>方法返回当前的所有公共成员 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-405">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method returns all the public members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-406">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-406">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-407">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-407">-or-</span></span> 
<span data-ttu-id="649f6-408">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-408">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-409">为 COM 对象提供对 <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-409">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-410">表示为当前 <see cref="T:System.Reflection.MemberInfo" /> 定义的匹配指定绑定约束的所有成员的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-410">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-411">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-411">-or-</span></span> 
<span data-ttu-id="649f6-412">如果没有为当前 <see cref="T:System.Reflection.MemberInfo" /> 定义的成员，或者如果没有一个定义的成员匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-412">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-413">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-413">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-414"><xref:System.Type.GetMembers%2A?displayProperty=nameWithType>方法 <xref:System.Type> 使用指定的绑定约束，搜索为当前定义的成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-414">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-415">为 COM 对象提供对 <see cref="Overload:System.Type.GetMethod" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-415">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethod" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-416">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-416">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-417"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-417">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-418">包含要获取的公共方法的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-418">The <see cref="T:System.String" /> containing the name of the public method to get.</span></span></param>
        <summary><span data-ttu-id="649f6-419">为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-419">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-420">表示具有指定名称的公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-420">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-421">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-421">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-422"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法搜索具有指定名称的公共方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-422">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the public method with the specified name.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-423">包含要获取的方法名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-423">The <see cref="T:System.String" /> containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-424">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-424">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-425">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-425">-or-</span></span> 
<span data-ttu-id="649f6-426">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-426">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-427">为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-427">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-428">表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-428">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-429">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-429">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-430"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法使用指定绑定约束搜索指定方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-430">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-431">包含要获取的公共方法的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-431">The <see cref="T:System.String" /> containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-432">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-432">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="649f6-433">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-433">-or-</span></span> 
<span data-ttu-id="649f6-434">一个类型为 <see cref="T:System.Type" /> （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-434">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="649f6-435">为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-435">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-436">表示其参数与指定参数类型匹配的公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-436">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-437">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-437">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-438"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法搜索其参数与指定参数类型匹配的指定公共方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-438">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-439">包含要获取的公共方法的名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-439">The <see cref="T:System.String" /> containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-440">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-440">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="649f6-441">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-441">-or-</span></span> 
<span data-ttu-id="649f6-442">一个类型为 <see cref="T:System.Type" /> （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-442">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-443"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-443">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="649f6-444">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-444">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-445">为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-445">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-446">表示符合指定要求的公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-446">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-447">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-447">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-448"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法搜索其参数与指定的参数类型和修饰符匹配的指定公共方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-448">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags, binder As Binder, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-449">包含要获取的方法名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-449">The <see cref="T:System.String" /> containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-450">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-450">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-451">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-451">-or-</span></span> 
<span data-ttu-id="649f6-452">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-452">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-453">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-453">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-454">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-454">-or-</span></span> 
 <span data-ttu-id="649f6-455">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-455"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-456">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-456">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="649f6-457">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-457">-or-</span></span> 
<span data-ttu-id="649f6-458">一个类型为 <see cref="T:System.Type" /> （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-458">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-459"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-459">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="649f6-460">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-460">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-461">为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-461">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-462">表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-462">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-463">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-463">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-464"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法使用指定的绑定约束，搜索其参数与指定的参数类型和修饰符匹配的指定方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-464">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags, binder As Binder, callConvention As CallingConventions, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-465">包含要获取的方法名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-465">The <see cref="T:System.String" /> containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-466">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-466">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-467">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-467">-or-</span></span> 
<span data-ttu-id="649f6-468">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-468">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-469">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-469">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-470">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-470">-or-</span></span> 
 <span data-ttu-id="649f6-471">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-471"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="649f6-472"><see cref="T:System.Reflection.CallingConventions" /> 对象用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</span><span class="sxs-lookup"><span data-stu-id="649f6-472">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-473">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-473">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="649f6-474">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-474">-or-</span></span> 
<span data-ttu-id="649f6-475">一个类型为 <see cref="T:System.Type" /> （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-475">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-476"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-476">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="649f6-477">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-477">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-478">为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-478">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-479">表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-479">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-480">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-480">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-481"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType>方法使用指定的绑定约束和指定的调用约定，搜索其参数与指定的参数类型和修饰符匹配的指定方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-481">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-482">为 COM 对象提供对 <see cref="Overload:System.Type.GetMethods" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-482">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethods" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-483">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-483">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-484"><xref:System.Type.GetMethods%2A?displayProperty=nameWithType>方法获取当前的方法 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-484">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method gets the methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-485">为 COM 对象提供对 <see cref="M:System.Type.GetMethods" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-485">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-486">表示为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的所有公共方法的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-486">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-487">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-487">-or-</span></span> 
<span data-ttu-id="649f6-488">如果没有为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的公共方法，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-488">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-489">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-489">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-490"><xref:System.Type.GetMethods%2A?displayProperty=nameWithType>方法返回当前的所有公共方法 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-490">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method returns all the public methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-491">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-491">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-492">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-492">-or-</span></span> 
<span data-ttu-id="649f6-493">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-493">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-494">为 COM 对象提供对 <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-494">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-495">表示为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的匹配指定绑定约束的所有方法的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-495">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-496">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-496">-or-</span></span> 
<span data-ttu-id="649f6-497">如果没有为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的方法，或者如果没有一个定义的方法匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-497">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-498">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-498">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-499"><xref:System.Type.GetMethods%2A?displayProperty=nameWithType>方法 <xref:System.Type> 使用指定的绑定约束，搜索为当前定义的方法。</span><span class="sxs-lookup"><span data-stu-id="649f6-499">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method searches for the methods defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-500">为 COM 对象提供对 <see cref="Overload:System.Type.GetNestedType" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-500">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedType" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-501">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-501">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-502"><xref:System.Type.GetNestedType%2A?displayProperty=nameWithType>方法获取嵌套在当前中的特定类型 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-502">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method gets a specific type nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type" Usage="_Type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-503">包含要获取的嵌套类型的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="649f6-503">The string containing the name of the nested type to get.</span></span></param>
        <summary><span data-ttu-id="649f6-504">为 COM 对象提供对 <see cref="M:System.Type.GetNestedType(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-504">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-505">如找到，则为表示具有指定名称的公共嵌套类型的 <see cref="T:System.Type" /> 对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-505">A <see cref="T:System.Type" /> object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-506">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-506">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-507"><xref:System.Type.GetNestedType%2A?displayProperty=nameWithType>方法搜索具有指定名称的公共嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-507">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the public nested type with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="_Type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-508">包含要获取的嵌套类型的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="649f6-508">The string containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-509">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-509">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-510">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-510">-or-</span></span> 
<span data-ttu-id="649f6-511">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-511">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-512">为 COM 对象提供对 <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-512">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-513">表示符合指定要求的嵌套类型的 <see cref="T:System.Type" /> 对象（如果找到）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-513">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-514">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-514">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-515"><xref:System.Type.GetNestedType%2A?displayProperty=nameWithType>方法使用指定绑定约束搜索指定嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-515">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the specified nested type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-516">为 COM 对象提供对 <see cref="Overload:System.Type.GetNestedTypes" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-516">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedTypes" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-517">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-517">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-518"><xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType>方法获取嵌套在当前中的类型 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-518">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method gets the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]" Usage="_Type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-519">为 COM 对象提供对 <see cref="M:System.Type.GetNestedTypes" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-519">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-520">表示嵌套在当前 <see cref="T:System.Type" /> 中的所有类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-520">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-521">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-521">-or-</span></span> 
<span data-ttu-id="649f6-522">如果没有嵌套在当前 <see cref="T:System.Type" /> 中的类型，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-522">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-523">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-523">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-524"><xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType>方法返回嵌套在当前中的所有类型 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-524">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method returns all the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="_Type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-525">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-525">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-526">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-526">-or-</span></span> 
<span data-ttu-id="649f6-527">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-527">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-528">为 COM 对象提供对 <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> 方法的版本无关的访问，并使用指定绑定约束搜索嵌套在当前 <see cref="T:System.Type" /> 中的类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-528">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> method, and searches for the types nested within the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="649f6-529"><see cref="T:System.Type" /> 对象数组，表示当前 <see cref="T:System.Type" /> 中嵌套的与指定的绑定约束匹配的所有类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-529">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-530">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-530">-or-</span></span> 
<span data-ttu-id="649f6-531">如果当前 <see cref="T:System.Type" /> 中未嵌套任何类型，或者如果没有一个嵌套类型与绑定约束匹配，则为类型 <see cref="T:System.Type" /> 的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-531">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-532">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-532">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-533">为 COM 对象提供对 <see cref="Overload:System.Type.GetProperties" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-533">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperties" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-534">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-534">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-535"><xref:System.Type.GetProperties%2A?displayProperty=nameWithType>方法获取当前的属性 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-535">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method gets the properties of the current <xref:System.Type>.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-536">为 COM 对象提供对 <see cref="M:System.Type.GetProperties" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-536">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-537">表示当前 <see cref="T:System.Reflection.PropertyInfo" /> 的所有公共属性的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-537">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="649f6-538">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-538">-or-</span></span> 
<span data-ttu-id="649f6-539">如果当前 <see cref="T:System.Reflection.PropertyInfo" /> 没有公共属性，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-539">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-540">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-540">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-541"><xref:System.Type.GetProperties%2A?displayProperty=nameWithType>方法返回当前的所有公共属性 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-541">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method returns all the public properties of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="649f6-542">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-542">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-543">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-543">-or-</span></span> 
<span data-ttu-id="649f6-544">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-544">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-545">为 COM 对象提供对 <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-545">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-546">表示当前 <see cref="T:System.Reflection.PropertyInfo" /> 的匹配指定绑定约束的所有属性的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-546">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="649f6-547">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-547">-or-</span></span> 
<span data-ttu-id="649f6-548">如果当前 <see cref="T:System.Reflection.PropertyInfo" /> 没有属性，或者如果没有一个属性匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-548">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-549">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-549">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-550"><xref:System.Type.GetProperties%2A?displayProperty=nameWithType>方法 <xref:System.Type> 使用指定的绑定约束搜索当前的属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-550">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method searches for the properties of the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-551">为 COM 对象提供对 <see cref="Overload:System.Type.GetProperty" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-551">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperty" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-552">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-552">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-553"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法获取当前的特定属性 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-553">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method gets a specific property of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-554">包含要获取的公共属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-554">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <summary><span data-ttu-id="649f6-555">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-555">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-556">表示具有指定名称的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-556">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-557">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-557">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-558"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法搜索具有指定名称的公共属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-558">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-559">包含要获取的属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-559">The <see cref="T:System.String" /> containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-560">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-560">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-561">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-561">-or-</span></span> 
<span data-ttu-id="649f6-562">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-562">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="649f6-563">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-563">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-564">表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-564">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-565">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-565">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-566"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法使用指定绑定约束搜索指定属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-566">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-567">包含要获取的公共属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-567">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="649f6-568">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-568">The return type of the property.</span></span></param>
        <summary><span data-ttu-id="649f6-569">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-569">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-570">表示具有指定名称的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-570">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-571">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-571">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-572"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法搜索具有指定名称和返回类型的公共属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-572">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name and return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-573">包含要获取的公共属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-573">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-574">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="649f6-575">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-575">-or-</span></span> 
<span data-ttu-id="649f6-576">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="649f6-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="649f6-577">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-577">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-578">表示其参数与指定参数类型匹配的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-578">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-579">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-579">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-580"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法搜索其参数与指定参数类型匹配的指定公共属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-580">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span> 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-581">包含要获取的公共属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-581">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="649f6-582">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-582">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-583">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-583">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="649f6-584">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-584">-or-</span></span> 
<span data-ttu-id="649f6-585">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="649f6-585">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="649f6-586">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-586">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-587">表示其参数与指定参数类型匹配的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-587">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-588">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-588">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-589"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法搜索其参数与指定参数类型匹配的指定公共属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-589">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-590">包含要获取的公共属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-590">The <see cref="T:System.String" /> containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="649f6-591">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-591">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-592">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-592">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="649f6-593">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-593">-or-</span></span> 
<span data-ttu-id="649f6-594">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="649f6-594">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-595"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-595">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="649f6-596">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-596">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-597">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-597">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-598">表示符合指定要求的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-598">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-599">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-599">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-600"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法搜索其参数与指定的参数类型和修饰符匹配的指定公共属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-600">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags, binder As Binder, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-601">包含要获取的属性名的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-601">The <see cref="T:System.String" /> containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="649f6-602">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-602">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="649f6-603">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-603">-or-</span></span> 
<span data-ttu-id="649f6-604">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-604">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-605">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-605">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-606">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-606">-or-</span></span> 
 <span data-ttu-id="649f6-607">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-607"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="649f6-608">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-608">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="649f6-609">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-609">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="649f6-610">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-610">-or-</span></span> 
<span data-ttu-id="649f6-611">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="649f6-611">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-612"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-612">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="649f6-613">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-613">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="649f6-614">为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-614">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-615">表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-615">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-616">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-616">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-617"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType>方法使用指定的绑定约束，搜索其参数与指定的参数类型和修饰符匹配的指定属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-617">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_Type.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-618">为 COM 对象提供对 <see cref="M:System.Type.GetType" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-618">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-619">当前的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-619">The current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-620">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-620">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-621"><xref:System.Type.GetType%2A?displayProperty=nameWithType>方法获取当前的 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-621">The <xref:System.Type.GetType%2A?displayProperty=nameWithType> method gets the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="649f6-622">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="649f6-622">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="649f6-623">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="649f6-623">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="649f6-624">接收一个指针，指向请求的类型信息对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-624">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="649f6-625">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="649f6-625">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-626">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-626">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649f6-627">有关详细信息，请参阅 [IDispatch：： GetTypeInfo](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfo)。</span><span class="sxs-lookup"><span data-stu-id="649f6-627">For more information, see [IDispatch::GetTypeInfo](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfo).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount : uint32 -&gt; unit" Usage="_Type.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="649f6-628">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="649f6-628">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="649f6-629">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="649f6-629">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-630">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-630">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649f6-631">有关详细信息，请参阅 [IDispatch：： GetTypeInfoCount](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfocount)。</span><span class="sxs-lookup"><span data-stu-id="649f6-631">For more information, see [IDispatch::GetTypeInfoCount](/windows/win32/api/oaidl/nf-oaidl-idispatch-gettypeinfocount).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Runtime.InteropServices._Type.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-632">为 COM 对象提供对 <see cref="P:System.Type.GUID" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-632">Provides COM objects with version-independent access to the <see cref="P:System.Type.GUID" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-633">获取与 <see cref="T:System.Type" /> 关联的 GUID。</span><span class="sxs-lookup"><span data-stu-id="649f6-633">The GUID associated with the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-634">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-634">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-635"><xref:System.Type.GUID%2A?displayProperty=nameWithType>属性获取与关联的 GUID <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-635">The <xref:System.Type.GUID%2A?displayProperty=nameWithType> property gets the GUID associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Runtime.InteropServices._Type.HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-636">为 COM 对象提供对 <see cref="P:System.Type.HasElementType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-636">Provides COM objects with version-independent access to the <see cref="P:System.Type.HasElementType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-637">如果 <see langword="true" /> 为数组、指针或按引用传递，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-637"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-638">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-638">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-639"><xref:System.Type.HasElementType%2A?displayProperty=nameWithType> 属性</span><span class="sxs-lookup"><span data-stu-id="649f6-639">The <xref:System.Type.HasElementType%2A?displayProperty=nameWithType> property</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 * Guid * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_Type.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="649f6-640">标识成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-640">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="649f6-641">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="649f6-641">Reserved for future use.</span></span> <span data-ttu-id="649f6-642">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="649f6-642">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="649f6-643">要在其中解释自变量的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="649f6-643">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="649f6-644">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="649f6-644">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="649f6-645">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="649f6-645">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="649f6-646">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="649f6-646">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="649f6-647">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="649f6-647">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="649f6-648">第一个出错参数的索引。</span><span class="sxs-lookup"><span data-stu-id="649f6-648">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="649f6-649">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-649">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-650">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-650">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="649f6-651">有关详细信息，请参阅 [IDispatch：： Invoke](/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke)。</span><span class="sxs-lookup"><span data-stu-id="649f6-651">For more information, see [IDispatch::Invoke](/windows/win32/api/oaidl/nf-oaidl-idispatch-invoke).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="649f6-652">为 COM 对象提供对 <see cref="Overload:System.Type.InvokeMember" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-652">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.InvokeMember" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-653">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-653">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-654"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法调用当前的特定成员 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-654">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes a specific member of the current <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="649f6-655">.</span><span class="sxs-lookup"><span data-stu-id="649f6-655">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-656"><see cref="T:System.String" />，它包含要调用的构造函数、方法、属性或字段成员的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-656">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="649f6-657">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-657">-or-</span></span> 
<span data-ttu-id="649f6-658">空字符串 ("")，表示调用默认成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-658">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="649f6-659">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-659">-or-</span></span> 
<span data-ttu-id="649f6-660">对于 IDispatch 成员，一个表示 DispID 的字符串，例如“[DispID=3]”。</span><span class="sxs-lookup"><span data-stu-id="649f6-660">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="649f6-661">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-661">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="649f6-662">访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。</span><span class="sxs-lookup"><span data-stu-id="649f6-662">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="649f6-663">查找类型无需指定。</span><span class="sxs-lookup"><span data-stu-id="649f6-663">The type of lookup need not be specified.</span></span> <span data-ttu-id="649f6-664">如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-664">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-665">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-665">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-666">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-666">-or-</span></span> 
 <span data-ttu-id="649f6-667">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-667"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="target"><span data-ttu-id="649f6-668">要在其上调用指定成员的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-668">The <see cref="T:System.Object" /> on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="649f6-669">包含传递给要调用的成员的参数的数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-669">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <summary><span data-ttu-id="649f6-670">为 COM 对象提供对 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-670">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-671">表示被调用成员的返回值的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-671">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-672">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-672">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-673"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法使用指定的绑定约束并匹配指定的参数列表，调用指定的成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-673">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object(), culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-674"><see cref="T:System.String" />，它包含要调用的构造函数、方法、属性或字段成员的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-674">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="649f6-675">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-675">-or-</span></span> 
<span data-ttu-id="649f6-676">空字符串 ("")，表示调用默认成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-676">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="649f6-677">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-677">-or-</span></span> 
<span data-ttu-id="649f6-678">对于 IDispatch 成员，一个表示 DispID 的字符串，例如“[DispID=3]”。</span><span class="sxs-lookup"><span data-stu-id="649f6-678">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="649f6-679">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-679">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="649f6-680">访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。</span><span class="sxs-lookup"><span data-stu-id="649f6-680">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="649f6-681">查找类型无需指定。</span><span class="sxs-lookup"><span data-stu-id="649f6-681">The type of lookup need not be specified.</span></span> <span data-ttu-id="649f6-682">如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-682">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-683">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-683">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-684">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-684">-or-</span></span> 
 <span data-ttu-id="649f6-685">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-685"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="target"><span data-ttu-id="649f6-686">要在其上调用指定成员的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-686">The <see cref="T:System.Object" /> on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="649f6-687">包含传递给要调用的成员的参数的数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-687">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="culture"><span data-ttu-id="649f6-688">表示要使用的全局化区域设置的 <see cref="T:System.Globalization.CultureInfo" /> 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。</span><span class="sxs-lookup"><span data-stu-id="649f6-688">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="649f6-689">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-689">-or-</span></span> 
 <span data-ttu-id="649f6-690"><see langword="null" />，表示使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-690"><see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <summary><span data-ttu-id="649f6-691">为 COM 对象提供对 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-691">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-692">表示被调用成员的返回值的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-692">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-693">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-693">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-694"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法使用指定的绑定约束并匹配指定的参数列表和区域性来调用指定的成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-694">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (name As String, invokeAttr As BindingFlags, binder As Binder, target As Object, args As Object(), modifiers As ParameterModifier(), culture As CultureInfo, namedParameters As String()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="649f6-695"><see cref="T:System.String" />，它包含要调用的构造函数、方法、属性或字段成员的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-695">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="649f6-696">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-696">-or-</span></span> 
<span data-ttu-id="649f6-697">空字符串 ("")，表示调用默认成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-697">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="649f6-698">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-698">-or-</span></span> 
<span data-ttu-id="649f6-699">对于 IDispatch 成员，一个表示 DispID 的字符串，例如“[DispID=3]”。</span><span class="sxs-lookup"><span data-stu-id="649f6-699">For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="649f6-700">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="649f6-700">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="649f6-701">访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。</span><span class="sxs-lookup"><span data-stu-id="649f6-701">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="649f6-702">查找类型无需指定。</span><span class="sxs-lookup"><span data-stu-id="649f6-702">The type of lookup need not be specified.</span></span> <span data-ttu-id="649f6-703">如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-703">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span></span></param>
        <param name="binder"><span data-ttu-id="649f6-704">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制转换参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-704">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="649f6-705">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-705">-or-</span></span> 
 <span data-ttu-id="649f6-706">若为 <see langword="null" />，则使用 <see cref="P:System.Type.DefaultBinder" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-706"><see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="target"><span data-ttu-id="649f6-707">要在其上调用指定成员的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-707">The <see cref="T:System.Object" /> on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="649f6-708">包含传递给要调用的成员的参数的数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-708">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="modifiers"><span data-ttu-id="649f6-709"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="args" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="649f6-709">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array.</span></span> <span data-ttu-id="649f6-710">参数的关联的属性存储在成员的签名中。</span><span class="sxs-lookup"><span data-stu-id="649f6-710">A parameter's associated attributes are stored in the member's signature.</span></span> <span data-ttu-id="649f6-711">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-711">The default binder does not process this parameter.</span></span></param>
        <param name="culture"><span data-ttu-id="649f6-712">表示要使用的全局化区域设置的 <see cref="T:System.Globalization.CultureInfo" /> 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。</span><span class="sxs-lookup"><span data-stu-id="649f6-712">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="649f6-713">- 或 -</span><span class="sxs-lookup"><span data-stu-id="649f6-713">-or-</span></span> 
 <span data-ttu-id="649f6-714"><see langword="null" />，表示使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-714"><see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="649f6-715">包含参数名称的数组，<paramref name="args" /> 数组中的值将传递给这些参数。</span><span class="sxs-lookup"><span data-stu-id="649f6-715">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</span></span></param>
        <summary><span data-ttu-id="649f6-716">为 COM 对象提供对 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-716">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-717">表示被调用成员的返回值的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-717">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-718">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-718">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-719"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法使用指定的绑定约束并匹配指定的参数列表、修饰符和区域性，调用指定成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-719">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers, and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-720">为 COM 对象提供对 <see cref="P:System.Type.IsAbstract" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-720">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAbstract" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-721">如果 <see cref="T:System.Type" /> 是抽象的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-721"><see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-722">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-722">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-723"><xref:System.Type.IsAbstract%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为抽象的并且必须被重写。</span><span class="sxs-lookup"><span data-stu-id="649f6-723">The <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is abstract and must be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-724">为 COM 对象提供对 <see cref="P:System.Type.IsAnsiClass" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-724">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAnsiClass" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-725">如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="AnsiClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-725"><see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-726">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-726">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-727"><xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否为选择了字符串格式属性 `AnsiClass` <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-727">The <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Runtime.InteropServices._Type.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-728">为 COM 对象提供对 <see cref="P:System.Type.IsArray" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-728">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsArray" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-729">如果 <see langword="true" /> 是数组，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-729"><see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-730">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-730">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-731"><xref:System.Type.IsArray%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为数组。</span><span class="sxs-lookup"><span data-stu-id="649f6-731">The <xref:System.Type.IsArray%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool" Usage="_Type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="649f6-732">要与当前的 <see cref="T:System.Type" /> 进行比较的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-732">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="649f6-733">为 COM 对象提供对 <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-733">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-734">如果满足下列任一条件，则为 <see langword="true" />：<paramref name="c" /> 和当前 <see cref="T:System.Type" /> 表示同一类型；当前 <see cref="T:System.Type" /> 位于 <paramref name="c" /> 的继承层次结构中；当前 <see cref="T:System.Type" /> 是 <paramref name="c" /> 实现的接口；<paramref name="c" /> 是泛型类型参数且当前 <see cref="T:System.Type" /> 表示 <paramref name="c" /> 的约束之一。</span><span class="sxs-lookup"><span data-stu-id="649f6-734"><see langword="true" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same type, or if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current <see cref="T:System.Type" /> represents one of the constraints of <paramref name="c" />.</span></span> <span data-ttu-id="649f6-735">如果这些条件都不成立，或者 <paramref name="c" /> 为 <see langword="null" />，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-735"><see langword="false" /> if none of these conditions are the case, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-736">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-736">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-737">为 COM 对象提供对 <see cref="P:System.Type.IsAutoClass" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-737">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoClass" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-738">如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="AutoClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-738"><see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-739">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-739">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-740"><xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否为选择了字符串格式属性 `AutoClass` <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-740">The <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-741">为 COM 对象提供对 <see cref="P:System.Type.IsAutoLayout" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-741">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoLayout" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-742">如果为 <see cref="T:System.Type" /> 选定了类布局属性 <see langword="true" />，则为 <see langword="AutoLayout" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-742"><see langword="true" /> if the class layout attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-743">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-743">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-744"><xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否为选择了类布局特性 `AutoLayout` <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-744">The <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `AutoLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Runtime.InteropServices._Type.IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-745">为 COM 对象提供对 <see cref="P:System.Type.IsByRef" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-745">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsByRef" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-746">如果 <see cref="T:System.Type" /> 按引用传递，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-746"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-747">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-747">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-748"><xref:System.Type.IsByRef%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 通过引用传递。</span><span class="sxs-lookup"><span data-stu-id="649f6-748">The <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is passed by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Runtime.InteropServices._Type.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-749">为 COM 对象提供对 <see cref="P:System.Type.IsClass" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-749">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsClass" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-750">如果 <see cref="T:System.Type" /> 是类，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-750"><see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-751">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-751">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-752"><xref:System.Type.IsClass%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为类; 即，不是值类型或接口。</span><span class="sxs-lookup"><span data-stu-id="649f6-752">The <xref:System.Type.IsClass%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a class; that is, not a value type or interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-753">为 COM 对象提供对 <see cref="P:System.Type.IsCOMObject" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-753">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsCOMObject" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-754">如果 <see langword="true" /> 为 COM 对象，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-754"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-755">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-755">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-756"><xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-756">The <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a COM object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Runtime.InteropServices._Type.IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-757">为 COM 对象提供对 <see cref="P:System.Type.IsContextful" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-757">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsContextful" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-758">如果 <see cref="T:System.Type" /> 能够在某个上下文中承载，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-758"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-759">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-759">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-760"><xref:System.Type.IsContextful%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 可以在上下文中承载。</span><span class="sxs-lookup"><span data-stu-id="649f6-760">The <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> can be hosted in a context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_Type.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="649f6-761">将应用自定义属性的 <see langword="Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-761">The <see langword="Type" /> object to which the custom attributes are applied.</span></span></param>
        <param name="inherit"><span data-ttu-id="649f6-762">指定是否搜索此成员的继承链以查找属性。</span><span class="sxs-lookup"><span data-stu-id="649f6-762">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="649f6-763">为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-763">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-764">如果此成员应用了一个或多个 <paramref name="attributeType" /> 实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-764"><see langword="true" /> if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-765">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-765">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-766"><xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType>方法指示是否将一个或多个实例 `attributeType` 应用于此成员。</span><span class="sxs-lookup"><span data-stu-id="649f6-766">The <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> method indicates whether one or more instance of `attributeType` is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Runtime.InteropServices._Type.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-767">为 COM 对象提供对 <see cref="P:System.Type.IsEnum" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-767">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsEnum" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-768">如果当前 <see langword="true" /> 表示枚举，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-768"><see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-769">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-769">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-770"><xref:System.Type.IsEnum%2A?displayProperty=nameWithType>属性获取一个值，该值指示当前的是否 <xref:System.Type> 表示枚举。</span><span class="sxs-lookup"><span data-stu-id="649f6-770">The <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> property gets a value indicating whether the current <xref:System.Type> represents an enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-771">为 COM 对象提供对 <see cref="P:System.Type.IsExplicitLayout" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-771">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsExplicitLayout" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-772">如果为 <see cref="T:System.Type" /> 选定了类布局属性 <see langword="true" />，则为 <see langword="ExplicitLayout" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-772"><see langword="true" /> if the class layout attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-773">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-773">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-774"><xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否为选择了类布局特性 `ExplicitLayout` <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-774">The <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `ExplicitLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Runtime.InteropServices._Type.IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-775">为 COM 对象提供对 <see cref="P:System.Type.IsImport" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-775">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsImport" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-776">如果 <see cref="T:System.Type" /> 具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-776"><see langword="true" /> if the <see cref="T:System.Type" /> has <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-777">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-777">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-778"><xref:System.Type.IsImport%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 具有 <xref:System.Runtime.InteropServices.ComImportAttribute> ，指示它是从 COM 类型库导入的。</span><span class="sxs-lookup"><span data-stu-id="649f6-778">The <xref:System.Type.IsImport%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has <xref:System.Runtime.InteropServices.ComImportAttribute>, indicating that it was imported from a COM type library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool" Usage="_Type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="649f6-779">将与当前 <see cref="T:System.Type" /> 进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-779">The object to compare with the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="649f6-780">为 COM 对象提供对 <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-780">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-781">如果满足下列任一条件，则为 <see langword="true" />：当前 <see cref="T:System.Type" /> 位于由 <paramref name="o" /> 表示的对象的继承层次结构中；当前 <see cref="T:System.Type" /> 是 <paramref name="o" /> 支持的接口。</span><span class="sxs-lookup"><span data-stu-id="649f6-781"><see langword="true" /> if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="o" /> supports.</span></span> <span data-ttu-id="649f6-782">如果不属于其中任一种情况，或者 <paramref name="o" /> 为 <see langword="null" /> 或者当前 <see cref="T:System.Type" /> 为开放式泛型类型（即 <see cref="P:System.Type.ContainsGenericParameters" /> 返回 <see langword="true" />），则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-782"><see langword="false" /> if neither of these conditions is the case, or if <paramref name="o" /> is <see langword="null" />, or if the current <see cref="T:System.Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-783">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-783">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-784"><xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType>方法确定指定的对象是否是当前的实例 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-784">The <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> method determines whether the specified object is an instance of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Runtime.InteropServices._Type.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-785">为 COM 对象提供对 <see cref="P:System.Type.IsInterface" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-785">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsInterface" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-786">如果 <see langword="true" /> 是接口，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-786"><see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-787">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-787">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-788"><xref:System.Type.IsInterface%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 是一个接口; 即，不是类或值类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-788">The <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an interface; that is, not a class or a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-789">为 COM 对象提供对 <see cref="P:System.Type.IsLayoutSequential" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-789">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsLayoutSequential" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-790">如果为 <see cref="T:System.Type" /> 选定了类布局属性 <see langword="true" />，则为 <see langword="SequentialLayout" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-790"><see langword="true" /> if the class layout attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-791">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-791">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-792"><xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否为选择了类布局特性 `SequentialLayout` <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-792">The <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `SequentialLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-793">为 COM 对象提供对 <see cref="P:System.Type.IsMarshalByRef" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-793">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsMarshalByRef" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-794">如果 <see langword="true" /> 是由引用封送的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-794"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-795">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-795">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-796"><xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType>属性获取一个值，该值指示该类型是否按引用进行封送。</span><span class="sxs-lookup"><span data-stu-id="649f6-796">The <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the Type is marshaled by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-797">为 COM 对象提供对 <see cref="P:System.Type.IsNestedAssembly" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-797">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedAssembly" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-798">如果 <see langword="true" /> 是嵌套的并且仅在它自己的程序集中可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-798"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-799">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-799">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-800"><xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 是嵌套的并且仅在它自己的程序集内可见。</span><span class="sxs-lookup"><span data-stu-id="649f6-800">The <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-801">为 COM 对象提供对 <see cref="P:System.Type.IsNestedFamANDAssem" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-801">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamANDAssem" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-802">如果 <see cref="T:System.Type" /> 是嵌套的并且只对同时属于它自己的家族和它自己的程序集的类可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-802"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-803">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-803">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-804"><xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 是嵌套的并且只对同时属于它自己的家族和它自己的程序集的类可见。</span><span class="sxs-lookup"><span data-stu-id="649f6-804">The <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-805">为 COM 对象提供对 <see cref="P:System.Type.IsNestedFamily" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-805">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamily" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-806">如果 <see langword="true" /> 是嵌套的并且仅在它自己的家族中可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-806"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-807">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-807">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-808"><xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 是嵌套的并且仅在它自己的家族内可见。</span><span class="sxs-lookup"><span data-stu-id="649f6-808">The <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own family.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-809">为 COM 对象提供对 <see cref="P:System.Type.IsNestedFamORAssem" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-809">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamORAssem" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-810">如果 <see langword="true" /> 是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-810"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-811">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-811">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-812"><xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 是嵌套的并且只对属于它自己的系列或其自己的程序集的类可见。</span><span class="sxs-lookup"><span data-stu-id="649f6-812">The <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-813">为 COM 对象提供对 <see cref="P:System.Type.IsNestedPrivate" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-813">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPrivate" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-814">如果 <see langword="true" /> 是嵌套的并声明为私有，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-814"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-815">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-815">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-816"><xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 嵌套并声明为私有。</span><span class="sxs-lookup"><span data-stu-id="649f6-816">The <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and declared private.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-817">为 COM 对象提供对 <see cref="P:System.Type.IsNestedPublic" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-817">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPublic" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-818">如果类是嵌套的并且声明为公共的，则为<see langword="true" /> ；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-818"><see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-819">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-819">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-820"><xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType>属性获取一个值，该值指示类是否是嵌套的并且声明为公共的。</span><span class="sxs-lookup"><span data-stu-id="649f6-820">The <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> property gets a value indicating whether a class is nested and declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-821">为 COM 对象提供对 <see cref="P:System.Type.IsNotPublic" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-821">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNotPublic" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-822">如果顶级 <see cref="T:System.Type" /> 不是声明为公共的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-822"><see langword="true" /> if the top-level <see cref="T:System.Type" /> is not declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-823">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-823">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-824"><xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType>属性获取一个值，该值指示顶级是否 <xref:System.Type> 未声明为公共的。</span><span class="sxs-lookup"><span data-stu-id="649f6-824">The <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is not declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Runtime.InteropServices._Type.IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-825">为 COM 对象提供对 <see cref="P:System.Type.IsPointer" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-825">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPointer" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-826">如果 <see cref="T:System.Type" /> 是指针，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-826"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-827">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-827">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-828"><xref:System.Type.IsPointer%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为指针。</span><span class="sxs-lookup"><span data-stu-id="649f6-828">The <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a pointer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-829">为 COM 对象提供对 <see cref="P:System.Type.IsPrimitive" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-829">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPrimitive" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-830">如果 <see langword="true" /> 为基元类型之一，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-830"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-831">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-831">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-832"><xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为基元类型之一。</span><span class="sxs-lookup"><span data-stu-id="649f6-832">The <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is one of the primitive types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Runtime.InteropServices._Type.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-833">为 COM 对象提供对 <see cref="P:System.Type.IsPublic" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-833">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPublic" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-834">如果顶级 <see cref="T:System.Type" /> 声明为公共的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-834"><see langword="true" /> if the top-level <see cref="T:System.Type" /> is declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-835">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-835">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-836"><xref:System.Type.IsPublic%2A?displayProperty=nameWithType>属性获取一个值，该值指示顶级是否 <xref:System.Type> 声明为公共的。</span><span class="sxs-lookup"><span data-stu-id="649f6-836">The <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Runtime.InteropServices._Type.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-837">为 COM 对象提供对 <see cref="P:System.Type.IsSealed" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-837">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSealed" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-838">如果 <see langword="true" /> 被声明为密封的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-838"><see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-839">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-839">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-840"><xref:System.Type.IsSealed%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 声明为密封的。</span><span class="sxs-lookup"><span data-stu-id="649f6-840">The <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is declared sealed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-841">为 COM 对象提供对 <see cref="P:System.Type.IsSerializable" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-841">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSerializable" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-842">如果 <see cref="T:System.Type" /> 是可序列化的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-842"><see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-843">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-843">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-844"><xref:System.Type.IsSerializable%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 可序列化。</span><span class="sxs-lookup"><span data-stu-id="649f6-844">The <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is serializable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-845">为 COM 对象提供对 <see cref="P:System.Type.IsSpecialName" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-845">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSpecialName" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-846">如果 <see cref="T:System.Type" /> 具有需要特殊处理的名称，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-846"><see langword="true" /> if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-847">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-847">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-848"><xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 具有需要特殊处理的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-848">The <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has a name that requires special handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool" Usage="_Type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="649f6-849">要与当前的 <see cref="T:System.Type" /> 进行比较的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-849">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="649f6-850">为 COM 对象提供对 <see cref="M:System.Type.IsSubclassOf(System.Type)" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-850">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsSubclassOf(System.Type)" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-851">如果 <see cref="T:System.Type" /> 由 <paramref name="c" /> 参数表示并且当前的 <see cref="T:System.Type" /> 表示类，并且当前的 <see cref="T:System.Type" /> 所表示的类是从 <paramref name="c" /> 所表示的类派生的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-851"><see langword="true" /> if the <see cref="T:System.Type" /> represented by the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent classes, and the class represented by the current <see cref="T:System.Type" /> derives from the class represented by <paramref name="c" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="649f6-852">如果 <paramref name="c" /> 和当前的 <see cref="T:System.Type" /> 表示相同的类，则此方法还返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-852">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-853">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-853">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-854"><xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType>方法确定当前表示的类是否是 <xref:System.Type> 从指定的表示的类派生的 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-854">The <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> method determines whether the class represented by the current <xref:System.Type> derives from the class represented by the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-855">为 COM 对象提供对 <see cref="P:System.Type.IsUnicodeClass" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-855">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsUnicodeClass" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-856">如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="UnicodeClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-856"><see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-857">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-857">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-858"><xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否为选择了字符串格式属性 `UnicodeClass` <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-858">The <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Runtime.InteropServices._Type.IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-859">为 COM 对象提供对 <see cref="P:System.Type.IsValueType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-859">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsValueType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-860">如果 <see langword="true" /> 是值类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-860"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-861">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-861">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-862"><xref:System.Type.IsValueType%2A?displayProperty=nameWithType>属性获取一个值，该值指示是否 <xref:System.Type> 为值类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-862">The <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._Type.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-863">为 COM 对象提供对 <see cref="P:System.Type.MemberType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-863">Provides COM objects with version-independent access to the <see cref="P:System.Type.MemberType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-864">一个 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是类型还是嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-864">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-865">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-865">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-866"><xref:System.Type.MemberType%2A?displayProperty=nameWithType>属性获取一个 <xref:System.Reflection.MemberTypes> 值，该值指示此成员是类型还是嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-866">The <xref:System.Type.MemberType%2A?displayProperty=nameWithType> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a type or a nested type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Runtime.InteropServices._Type.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-867">为 COM 对象提供对 <see cref="P:System.Type.Module" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-867">Provides COM objects with version-independent access to the <see cref="P:System.Type.Module" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-868">在其中定义当前 <see cref="T:System.Type" /> 的模块的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-868">The name of the module in which the current <see cref="T:System.Type" /> is defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-869">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-869">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-870"><xref:System.Type.Module%2A?displayProperty=nameWithType>属性获取在其中定义了当前的)  (DLL 的模块 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-870">The <xref:System.Type.Module%2A?displayProperty=nameWithType> property gets the module (the DLL) in which the current <xref:System.Type> is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-871">为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-871">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-872"><see cref="T:System.Type" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="649f6-872">The name of the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-873">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-873">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-874"><xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType>属性获取的名称 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-874">The <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> property gets the name of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Runtime.InteropServices._Type.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-875">为 COM 对象提供对 <see cref="P:System.Type.Namespace" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-875">Provides COM objects with version-independent access to the <see cref="P:System.Type.Namespace" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-876"><see cref="T:System.Type" /> 的命名空间。</span><span class="sxs-lookup"><span data-stu-id="649f6-876">The namespace of the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-877">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-877">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-878"><xref:System.Type.Namespace%2A?displayProperty=nameWithType>属性获取的命名空间 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-878">The <xref:System.Type.Namespace%2A?displayProperty=nameWithType> property gets the namespace of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-879">为 COM 对象提供对 <see cref="P:System.Type.ReflectedType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-879">Provides COM objects with version-independent access to the <see cref="P:System.Type.ReflectedType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-880"><see cref="T:System.Type" /> 对象，通过它获取了此 <see cref="T:System.Reflection.MemberInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-880">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-881">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-881">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-882"><xref:System.Type.ReflectedType%2A?displayProperty=nameWithType>属性获取用于获取该成员的类对象。</span><span class="sxs-lookup"><span data-stu-id="649f6-882">The <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> property gets the class object that was used to obtain this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_Type.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="649f6-883">为 COM 对象提供对 <see cref="M:System.Type.ToString" /> 方法的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-883">Provides COM objects with version-independent access to the <see cref="M:System.Type.ToString" /> method.</span></span></summary>
        <returns><span data-ttu-id="649f6-884">表示当前 <see cref="T:System.String" /> 的名称的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-884">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-885">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-885">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-886"><xref:System.Type.ToString%2A?displayProperty=nameWithType>方法返回当前的名称 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-886">The <xref:System.Type.ToString%2A?displayProperty=nameWithType> method returns the name of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-887">为 COM 对象提供对 <see cref="P:System.Type.TypeHandle" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-887">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeHandle" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-888">当前 <see cref="T:System.Type" /> 的句柄。</span><span class="sxs-lookup"><span data-stu-id="649f6-888">The handle for the current <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-889">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-889">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-890"><xref:System.Type.TypeHandle%2A?displayProperty=nameWithType>属性获取当前的句柄 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-890">The <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property gets the handle for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-891">为 COM 对象提供对 <see cref="P:System.Type.TypeInitializer" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-891">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeInitializer" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-892">包含 <see cref="T:System.Reflection.ConstructorInfo" /> 的类构造函数的名称的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="649f6-892">A <see cref="T:System.Reflection.ConstructorInfo" /> containing the name of the class constructor for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-893">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-893">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-894"><xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType>属性获取的初始值设定项 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="649f6-894">The <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> property gets the initializer for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="649f6-895">为 COM 对象提供对 <see cref="P:System.Type.UnderlyingSystemType" /> 属性的与版本无关的访问。</span><span class="sxs-lookup"><span data-stu-id="649f6-895">Provides COM objects with version-independent access to the <see cref="P:System.Type.UnderlyingSystemType" /> property.</span></span></summary>
        <value><span data-ttu-id="649f6-896"><see cref="T:System.Type" /> 的基础系统类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-896">The underlying system type for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="649f6-897">此属性用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="649f6-897">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="649f6-898"><xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType>属性指示由表示此类型的公共语言运行时提供的类型。</span><span class="sxs-lookup"><span data-stu-id="649f6-898">The <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> property indicates the type provided by the common language runtime that represents this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
