<Type Name="SuppressGCTransitionAttribute" FullName="System.Runtime.InteropServices.SuppressGCTransitionAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f1ee401625ff08c65ddd9314d102ba7a6f5fadc" /><Meta Name="ms.sourcegitcommit" Value="ff93f301301180af9a0213650c5b4edb28570fd0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/18/2020" /><Meta Name="ms.locfileid" Value="88557078" /></Metadata><TypeSignature Language="C#" Value="public sealed class SuppressGCTransitionAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SuppressGCTransitionAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SuppressGCTransitionAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SuppressGCTransitionAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type SuppressGCTransitionAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="43f4d-101">指示在进行非托管函数调用时应跳过垃圾回收转换。</span><span class="sxs-lookup"><span data-stu-id="43f4d-101">Indicates that a garbage collection transition should be skipped when an unmanaged function call is made.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="43f4d-102">如果应用于不带的方法，则忽略此特性 <xref:System.Runtime.InteropServices.DllImportAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="43f4d-102">This attribute is ignored if applied to a method without the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>
 
 <span data-ttu-id="43f4d-103">放弃此转换可以在转换成本超过非托管函数的执行时间时产生优势。</span><span class="sxs-lookup"><span data-stu-id="43f4d-103">Forgoing this transition can yield benefits when the cost of the transition is more than the execution time of the unmanaged function.</span></span> <span data-ttu-id="43f4d-104">但是，若要避免这种转换，会删除运行时通过普通 P/Invoke 提供的某些保证。</span><span class="sxs-lookup"><span data-stu-id="43f4d-104">However, avoiding this transition removes some of the guarantees the runtime provides through a normal P/Invoke.</span></span> <span data-ttu-id="43f4d-105">退出托管运行时以输入非托管函数时，GC 必须从协作模式转换为抢先模式。</span><span class="sxs-lookup"><span data-stu-id="43f4d-105">When exiting the managed runtime to enter an unmanaged function, the GC must transition from Cooperative mode into Preemptive mode.</span></span> <span data-ttu-id="43f4d-106">有关这些模式的完整详细信息，请参阅 https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/clr-code-guide.md#2.1.8 。</span><span class="sxs-lookup"><span data-stu-id="43f4d-106">Full details on these modes can be found at https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/clr-code-guide.md#2.1.8.</span></span>
<span data-ttu-id="43f4d-107">禁止 GC 转换是一种高级方案，不应在不充分了解潜在后果的情况下执行此操作。</span><span class="sxs-lookup"><span data-stu-id="43f4d-107">Suppressing the GC transition is an advanced scenario and should not be done without fully understanding potential consequences.</span></span>
 
 <span data-ttu-id="43f4d-108">其中的一个后果是对 [混合模式调试](https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode)的影响。</span><span class="sxs-lookup"><span data-stu-id="43f4d-108">One of these consequences is an impact to [Mixed-mode debugging](https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).</span></span>
<span data-ttu-id="43f4d-109">在混合模式调试期间，不能单步执行或设置已使用此特性标记的 P/Invoke 中的断点。</span><span class="sxs-lookup"><span data-stu-id="43f4d-109">During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that has been marked with this attribute.</span></span> <span data-ttu-id="43f4d-110">解决方法是切换到本机调试，并在本机函数中设置断点。</span><span class="sxs-lookup"><span data-stu-id="43f4d-110">A workaround is to switch to native debugging and set a breakpoint in the native function.</span></span>
<span data-ttu-id="43f4d-111">通常，如果调试 P/Invoke 非常重要（例如，逐句通过本机代码或诊断从本机代码引发的异常），则不建议使用此属性。</span><span class="sxs-lookup"><span data-stu-id="43f4d-111">In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example, stepping through the native code or diagnosing an exception thrown from the native code.</span></span>
 
 <span data-ttu-id="43f4d-112">应用此特性的 P/Invoke 方法必须具有以下所有属性：</span><span class="sxs-lookup"><span data-stu-id="43f4d-112">The P/Invoke method that this attribute is applied to must have all of the following properties:</span></span>
 * <span data-ttu-id="43f4d-113">本机函数始终执行 (小于1微秒) 的时间。</span><span class="sxs-lookup"><span data-stu-id="43f4d-113">Native function always executes for a trivial amount of time (less than 1 microsecond).</span></span>
 * <span data-ttu-id="43f4d-114">本机函数不会执行阻塞 syscall (例如，任何类型的 i/o) 。</span><span class="sxs-lookup"><span data-stu-id="43f4d-114">Native function does not perform a blocking syscall (for example, any type of I/O).</span></span>
 * <span data-ttu-id="43f4d-115">本机函数不回调到运行时 (例如，反向 P/Invoke) 。</span><span class="sxs-lookup"><span data-stu-id="43f4d-115">Native function does not call back into the runtime (for example, Reverse P/Invoke).</span></span>
 * <span data-ttu-id="43f4d-116">本机函数不引发异常。</span><span class="sxs-lookup"><span data-stu-id="43f4d-116">Native function does not throw exceptions.</span></span>
 * <span data-ttu-id="43f4d-117">本机函数不操作锁或其他并发基元。</span><span class="sxs-lookup"><span data-stu-id="43f4d-117">Native function does not manipulate locks or other concurrency primitives.</span></span>
 
 <span data-ttu-id="43f4d-118">此属性的无效用法的后果包括：</span><span class="sxs-lookup"><span data-stu-id="43f4d-118">Consequences of invalid uses of this attribute include:</span></span>
 
 * <span data-ttu-id="43f4d-119">GC 不足。</span><span class="sxs-lookup"><span data-stu-id="43f4d-119">GC starvation.</span></span>
 * <span data-ttu-id="43f4d-120">立即终止运行时。</span><span class="sxs-lookup"><span data-stu-id="43f4d-120">Immediate runtime termination.</span></span>
 * <span data-ttu-id="43f4d-121">数据损坏。</span><span class="sxs-lookup"><span data-stu-id="43f4d-121">Data corruption.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SuppressGCTransitionAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SuppressGCTransitionAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SuppressGCTransitionAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
