<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d710484dd1f3825661cde28e8820fc8ba9280dd" /><Meta Name="ms.sourcegitcommit" Value="90e82d48d4bce064ad27923f7caabf4204a38519" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/11/2020" /><Meta Name="ms.locfileid" Value="90023523" /></Metadata><TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="914e6-101">字典中的键的类型。</span><span class="sxs-lookup"><span data-stu-id="914e6-101">The type of keys in the dictionary.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="914e6-102">字典中值的类型。</span><span class="sxs-lookup"><span data-stu-id="914e6-102">The type of values in the dictionary.</span></span></typeparam>
    <summary><span data-ttu-id="914e6-103">表示键/值对的泛型集合。</span><span class="sxs-lookup"><span data-stu-id="914e6-103">Represents a generic collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-104"><xref:System.Collections.Generic.IDictionary%602>接口是键/值对的泛型集合的基接口。</span><span class="sxs-lookup"><span data-stu-id="914e6-104">The <xref:System.Collections.Generic.IDictionary%602> interface is the base interface for generic collections of key/value pairs.</span></span>  
  
 <span data-ttu-id="914e6-105">每个元素都是存储在对象中的键/值对 <xref:System.Collections.Generic.KeyValuePair%602> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-105">Each element is a key/value pair stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="914e6-106">每个对都必须有一个唯一键。</span><span class="sxs-lookup"><span data-stu-id="914e6-106">Each pair must have a unique key.</span></span> <span data-ttu-id="914e6-107">实现在是否允许时可能有所不同 `key` `null` 。</span><span class="sxs-lookup"><span data-stu-id="914e6-107">Implementations can vary in whether they allow `key` to be `null`.</span></span> <span data-ttu-id="914e6-108">值可以为 `null` ，并且不必是唯一的。</span><span class="sxs-lookup"><span data-stu-id="914e6-108">The value can be `null` and does not have to be unique.</span></span> <span data-ttu-id="914e6-109"><xref:System.Collections.Generic.IDictionary%602>接口允许枚举包含的键和值，但不表示任何特定的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="914e6-109">The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="914e6-110">`foreach`C + + 中的 c # 语言 (的语句在 `For Each` Visual Basic 中， `for each`) 返回集合中元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="914e6-110">The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="914e6-111">由于的每个元素 <xref:System.Collections.Generic.IDictionary%602> 都是键/值对，因此元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="914e6-111">Since each element of the <xref:System.Collections.Generic.IDictionary%602> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="914e6-112">相反，元素类型为 <xref:System.Collections.Generic.KeyValuePair%602> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-112">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="914e6-113">例如：</span><span class="sxs-lookup"><span data-stu-id="914e6-113">For example:</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp" id="Snippet11":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs" id="Snippet11":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb" id="Snippet11":::
  
 <span data-ttu-id="914e6-114">`foreach`语句是枚举器周围的包装器，它仅允许从集合读取，而不是写入到集合中。</span><span class="sxs-lookup"><span data-stu-id="914e6-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="914e6-115">因为键可以被继承并且其行为发生了更改，所以使用方法进行的比较无法保证其绝对唯一性 <xref:System.Type.Equals%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-115">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-116">下面的代码示例 <xref:System.Collections.Generic.Dictionary%602> 使用字符串键创建一个空的字符串，并通过接口进行访问 <xref:System.Collections.Generic.IDictionary%602> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-116">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with string keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="914e6-117">此代码示例使用 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 方法添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-117">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="914e6-118">该示例演示了在 <xref:System.Collections.Generic.IDictionary%602.Add%2A> <xref:System.ArgumentException> 尝试添加重复键时该方法将引发。</span><span class="sxs-lookup"><span data-stu-id="914e6-118">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="914e6-119">该示例使用 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性 (c # 中的索引器 ) 来检索值，演示在 <xref:System.Collections.Generic.KeyNotFoundException> 请求的键不存在时引发的，并显示与键关联的值可以替换。</span><span class="sxs-lookup"><span data-stu-id="914e6-119">The example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="914e6-120">该示例演示了如何使用 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 方法来检索值（如果程序经常必须尝试字典中不存在的键值），以及如何使用 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> 方法测试在调用方法之前是否存在某个键 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-120">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="914e6-121">最后，该示例演示如何枚举字典中的键和值，以及如何使用属性单独枚举值 <xref:System.Collections.Generic.IDictionary%602.Values%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-121">Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
  :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp" id="Snippet1"::: 
  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs" interactive="try-dotnet" id="Snippet1"::: 
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb" id="Snippet1"::: 

 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="914e6-122">实现类必须有一种方法来比较键。</span><span class="sxs-lookup"><span data-stu-id="914e6-122">The implementing class must have a means to compare keys.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="914e6-123">用作要添加的元素的键的对象。</span><span class="sxs-lookup"><span data-stu-id="914e6-123">The object to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="914e6-124">用作要添加的元素的值的对象。</span><span class="sxs-lookup"><span data-stu-id="914e6-124">The object to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="914e6-125">向 <see cref="T:System.Collections.Generic.IDictionary`2" /> 添加一个带有所提供的键和值的元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-125">Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-126">你还可以使用 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性来添加新元素，方法是设置字典中不存在的键的值; 例如， `myCollection["myNonexistentKey"] = myValue` 在 c # 中 (`myCollection("myNonexistentKey") = myValue` Visual Basic) 。</span><span class="sxs-lookup"><span data-stu-id="914e6-126">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="914e6-127">但是，如果字典中已存在指定的键，则设置 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="914e6-127">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="914e6-128">与此相反， <xref:System.Collections.Generic.IDictionary%602.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-128">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="914e6-129">实现在确定对象的相等性方面可能有所不同;例如， <xref:System.Collections.Generic.List%601> 类使用 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> ，而 <xref:System.Collections.Generic.Dictionary%602> 类允许用户指定 <xref:System.Collections.Generic.IComparer%601> 要用于比较键的实现。</span><span class="sxs-lookup"><span data-stu-id="914e6-129">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="914e6-130">实现在是否允许时可能有所不同 `key` `null` 。</span><span class="sxs-lookup"><span data-stu-id="914e6-130">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-131">下面的代码示例创建一个空 <xref:System.Collections.Generic.Dictionary%602> 的字符串，其中包含整数键，并通过接口进行访问 <xref:System.Collections.Generic.IDictionary%602> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-131">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with integer keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span> <span data-ttu-id="914e6-132">此代码示例使用 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 方法添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-132">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="914e6-133">该示例演示了 <xref:System.Collections.Generic.IDictionary%602.Add%2A> <xref:System.ArgumentException> 在尝试添加重复键时方法引发。</span><span class="sxs-lookup"><span data-stu-id="914e6-133">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="914e6-134">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-134">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-135">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-135">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
  :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp" id="Snippet2":::
  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs" interactive="try-dotnet-method" id="Snippet2":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb" id="Snippet2":::
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="914e6-136"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-136"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="914e6-137"><see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-137">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="914e6-138"><see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="914e6-138">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="914e6-139">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="914e6-139">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="914e6-140">确定是否 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-140">Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="914e6-141">如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-141"><see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-142">实现在确定对象的相等性方面可能有所不同;例如， <xref:System.Collections.Generic.List%601> 类使用 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> ，而 <xref:System.Collections.Generic.Dictionary%602> 类允许用户指定 <xref:System.Collections.Generic.IComparer%601> 要用于比较键的实现。</span><span class="sxs-lookup"><span data-stu-id="914e6-142">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="914e6-143">实现在是否允许时可能有所不同 `key` `null` 。</span><span class="sxs-lookup"><span data-stu-id="914e6-143">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-144">下面的代码示例演示如何使用 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> 方法来测试在调用方法之前是否存在某个键 <xref:System.Collections.Generic.IDictionary%602.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-144">The following code example shows how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span> <span data-ttu-id="914e6-145">它还演示了如何使用 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 方法，如果程序经常尝试不在字典中的键值，则这可能是一种更有效的方法来检索值。</span><span class="sxs-lookup"><span data-stu-id="914e6-145">It also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</span></span> <span data-ttu-id="914e6-146">最后，它演示了如何使用 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性 (c # ) 中的索引器插入项。</span><span class="sxs-lookup"><span data-stu-id="914e6-146">Finally, it shows how to insert items using <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="914e6-147">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-147">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-148">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-148">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="914e6-149"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-149"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="914e6-150">要获取或设置的元素的键。</span><span class="sxs-lookup"><span data-stu-id="914e6-150">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="914e6-151">获取或设置具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-151">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="914e6-152">带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-152">The element with the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-153">此属性提供了使用以下语法访问集合中的特定元素的功能： `myCollection[key]` (`myCollection(key)` 在 Visual Basic) 中。</span><span class="sxs-lookup"><span data-stu-id="914e6-153">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="914e6-154">你还可以使用 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性来添加新元素，方法是设置字典中不存在的键的值; 例如， `myCollection["myNonexistentKey"] = myValue` 在 c # 中 (`myCollection("myNonexistentKey") = myValue` Visual Basic) 。</span><span class="sxs-lookup"><span data-stu-id="914e6-154">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="914e6-155">但是，如果字典中已存在指定的键，则设置 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="914e6-155">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="914e6-156">与此相反， <xref:System.Collections.Generic.IDictionary%602.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-156">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="914e6-157">实现在确定对象的相等性方面可能有所不同;例如， <xref:System.Collections.Generic.List%601> 类使用 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> ，而 <xref:System.Collections.Generic.Dictionary%602> 类允许用户指定 <xref:System.Collections.Generic.IComparer%601> 要用于比较键的实现。</span><span class="sxs-lookup"><span data-stu-id="914e6-157">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="914e6-158">C # 语言使用 [this](/dotnet/csharp/language-reference/keywords/this) 关键字来定义索引器，而不是实现 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="914e6-158">The C# language uses the [this](/dotnet/csharp/language-reference/keywords/this) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span> <span data-ttu-id="914e6-159">Visual Basic 将 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="914e6-159">Visual Basic implements <xref:System.Collections.Generic.IDictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="914e6-160">实现在是否允许时可能有所不同 `key` `null` 。</span><span class="sxs-lookup"><span data-stu-id="914e6-160">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-161">下面的代码示例使用 <xref:System.Collections.Generic.IDictionary%602.Item%2A> ) c # 中的索引器 (属性来检索值，演示在 <xref:System.Collections.Generic.KeyNotFoundException> 请求的键不存在时引发的，并显示与键关联的值可以替换。</span><span class="sxs-lookup"><span data-stu-id="914e6-161">The following code example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="914e6-162">该示例还演示了如何使用 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 方法作为一种更有效的方法来检索值（如果程序经常需要尝试不在字典中的键值）。</span><span class="sxs-lookup"><span data-stu-id="914e6-162">The example also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="914e6-163">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-163">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-164">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-164">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="914e6-165"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="914e6-166">检索了属性但没有找到 <paramref name="key" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-166">The property is retrieved and <paramref name="key" /> is not found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="914e6-167">设置了该属性，但 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="914e6-167">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="914e6-168">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-168">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="914e6-169">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</span><span class="sxs-lookup"><span data-stu-id="914e6-169">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-170">返回的中的键顺序 <xref:System.Collections.Generic.ICollection%601> 未指定，但保证其顺序与属性返回的中的相应值的顺序相同 <xref:System.Collections.Generic.ICollection%601> <xref:System.Collections.Generic.IDictionary%602.Values%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-170">The order of the keys in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-171">下面的代码示例演示如何使用属性单独枚举键 <xref:System.Collections.Generic.IDictionary%602.Keys%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-171">The following code example shows how to enumerate keys alone using the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="914e6-172">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-172">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-173">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-173">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="914e6-174">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="914e6-174">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="914e6-175">从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除包含指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="914e6-175">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <returns><span data-ttu-id="914e6-176">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-176"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="914e6-177">如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-177">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-178">实现在确定对象的相等性方面可能有所不同;例如， <xref:System.Collections.Generic.List%601> 类使用 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> ，而 <xref:System.Collections.Generic.Dictionary%602> 类允许用户指定 <xref:System.Collections.Generic.IComparer%601> 要用于比较键的实现。</span><span class="sxs-lookup"><span data-stu-id="914e6-178">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-179">下面的代码示例演示如何使用方法从字典中移除键/值对 <xref:System.Collections.Generic.IDictionary%602.Remove%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-179">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.IDictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="914e6-180">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-180">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-181">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-181">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="914e6-182"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-182"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="914e6-183"><see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="914e6-183">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key * 'Value -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="914e6-184">要获取其值的键。</span><span class="sxs-lookup"><span data-stu-id="914e6-184">The key whose value to get.</span></span></param>
        <param name="value"><span data-ttu-id="914e6-185">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="914e6-185">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter.</span></span> <span data-ttu-id="914e6-186">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="914e6-186">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="914e6-187">获取与指定键关联的值。</span><span class="sxs-lookup"><span data-stu-id="914e6-187">Gets the value associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="914e6-188">如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-188"><see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-189">此方法结合了 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> 方法和属性的功能 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-189">This method combines the functionality of the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="914e6-190">如果未找到键，则 `value` 参数将为类型 `TValue` 获取适当的默认值；例如，为整数类型获取零 (0)，为布尔值类型获取 `false`，为引用类型获取 `null`。</span><span class="sxs-lookup"><span data-stu-id="914e6-190">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-191">该示例演示如何使用 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 方法来检索值。</span><span class="sxs-lookup"><span data-stu-id="914e6-191">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method to retrieve values.</span></span> <span data-ttu-id="914e6-192">如果程序经常尝试不在字典中的键值，则 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> 方法比使用 <xref:System.Collections.Generic.IDictionary%602.Item%2A> 属性 (c # ) 中的索引器更有效，这会在尝试检索不存在的键时引发异常。</span><span class="sxs-lookup"><span data-stu-id="914e6-192">If a program frequently tries key values that are not in a dictionary, the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method can be more efficient than using the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="914e6-193">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-193">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-194">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-194">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="914e6-195"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="914e6-195"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="914e6-196">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="914e6-196">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="914e6-197">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</span><span class="sxs-lookup"><span data-stu-id="914e6-197">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="914e6-198">返回的中的值的顺序 <xref:System.Collections.Generic.ICollection%601> 未指定，但保证其顺序与属性返回的中的对应键的顺序相同 <xref:System.Collections.Generic.ICollection%601> <xref:System.Collections.Generic.IDictionary%602.Keys%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-198">The order of the values in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="914e6-199">下面的代码示例演示如何使用属性单独枚举值 <xref:System.Collections.Generic.IDictionary%602.Values%2A> 。</span><span class="sxs-lookup"><span data-stu-id="914e6-199">The following code example shows how to enumerate values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="914e6-200">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="914e6-200">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="914e6-201">请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="914e6-201">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>
