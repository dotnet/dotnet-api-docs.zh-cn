<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d77270103606b8fe9d4ae9640ffe25d3b3c1cb76" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100329193" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Collections" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Count = {Count}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Count = {Count}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="1b294-101">指定堆栈中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="1b294-101">Specifies the type of elements in the stack.</span></span></typeparam>
    <summary><span data-ttu-id="1b294-102">表示相同指定类型的实例可变大小的后进先出 (LIFO) 集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-102">Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-103"><xref:System.Collections.Generic.Stack%601> 以数组的形式实现。</span><span class="sxs-lookup"><span data-stu-id="1b294-103"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="1b294-104">当需要临时存储信息时，堆栈和队列很有用;也就是说，当你可能想要在检索元素值后丢弃该元素时。</span><span class="sxs-lookup"><span data-stu-id="1b294-104">Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="1b294-105"><xref:System.Collections.Generic.Queue%601>如果需要以存储在集合中的相同顺序访问该信息，请使用。</span><span class="sxs-lookup"><span data-stu-id="1b294-105">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="1b294-106"><xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>如果需要按相反的顺序访问该信息，请使用。</span><span class="sxs-lookup"><span data-stu-id="1b294-106">Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> if you need to access the information in reverse order.</span></span>  
  
 <span data-ttu-id="1b294-107"><xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> 当需要同时从多个线程访问集合时，请使用和类型。</span><span class="sxs-lookup"><span data-stu-id="1b294-107">Use the <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> and <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> types when you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="1b294-108">的常见用途 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 是在调用其他过程的过程中保留变量状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-108">A common use for <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> is to preserve variable states during calls to other procedures.</span></span>  
  
 <span data-ttu-id="1b294-109">可以对及其元素执行三个主要操作 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="1b294-109">Three main operations can be performed on a <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> and its elements:</span></span>  
  
-   <span data-ttu-id="1b294-110"><xref:System.Collections.Generic.Stack%601.Push%2A> 在顶部插入一个元素 <xref:System.Collections.Stack> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-110"><xref:System.Collections.Generic.Stack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
-   <span data-ttu-id="1b294-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> 从的顶部移除一个元素 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> removes an element from the top of the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
-   <span data-ttu-id="1b294-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> 返回位于顶部的元素，但不将 <xref:System.Collections.Generic.Stack%601> 其从中移除 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> returns an element that is at the top of the <xref:System.Collections.Generic.Stack%601> but does not remove it from the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-113">的容量 <xref:System.Collections.Generic.Stack%601> 是可容纳的元素数 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-113">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="1b294-114">当向添加元素时 <xref:System.Collections.Generic.Stack%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-114">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="1b294-115">可以通过调用来减少容量 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="1b294-116">如果 <xref:System.Collections.Generic.Stack%601.Count%2A> 小于堆栈的容量， <xref:System.Collections.Generic.Stack%601.Push%2A> 则是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-116">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="1b294-117">如果需要增加容量以容纳新元素， <xref:System.Collections.Generic.Stack%601.Push%2A> 则会变成 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-117">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="1b294-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="1b294-119"><xref:System.Collections.Generic.Stack%601> 接受 `null` 作为引用类型的有效值，并允许重复元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-119"><xref:System.Collections.Generic.Stack%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-120">下面的代码示例演示了泛型类的几个方法 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-120">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span> <span data-ttu-id="1b294-121">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-121">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-122">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-122">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-123"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-123">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-124"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-124">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-125"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-125">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-126">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-126">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-127">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-127">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-128"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-128">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-129"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-129">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb" id="Snippet1":::
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="1b294-130"><see langword="Shared" />此类型) 成员 Visual Basic 的公共静态 (是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="1b294-130">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="1b294-131">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="1b294-131">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="1b294-132"><see cref="T:System.Collections.Generic.Stack`1" />只要不修改集合，就可以同时支持多个读取器。</span><span class="sxs-lookup"><span data-stu-id="1b294-132">A <see cref="T:System.Collections.Generic.Stack`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="1b294-133">尽管如此，枚举集合本身并不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="1b294-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="1b294-134">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="1b294-135">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span></threadsafe>
    <related type="Article" href="/dotnet/csharp/programming-guide/concepts/iterators"><span data-ttu-id="1b294-136">迭代器 (C#)</span><span class="sxs-lookup"><span data-stu-id="1b294-136">Iterators (C#)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/concepts/iterators"><span data-ttu-id="1b294-137">迭代器 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1b294-137">Iterators (Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1b294-138">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1b294-138">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-139">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-139">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-140">的容量 <xref:System.Collections.Generic.Stack%601> 是可容纳的元素数 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-140">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="1b294-141">当向添加元素时 <xref:System.Collections.Generic.Stack%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-141">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="1b294-142">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-142">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-143">可以通过调用来减少容量 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-143">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="1b294-144">此构造函数是一个 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-144">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-145">下面的代码示例演示了此构造函数和泛型类的几个方法 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-145">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="1b294-146">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-146">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-147">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-147">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-148"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-148">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-149"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-149">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-150"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-150">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-151">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-151">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-152">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-152">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-153"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-153">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-154"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-154">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="1b294-155">从中复制元素的集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-155">The collection to copy elements from.</span></span></param>
        <summary><span data-ttu-id="1b294-156">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-156">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-157">的容量 <xref:System.Collections.Generic.Stack%601> 是可容纳的元素数 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-157">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="1b294-158">当向添加元素时 <xref:System.Collections.Generic.Stack%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-158">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="1b294-159">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-159">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-160">可以通过调用来减少容量 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-160">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="1b294-161">按照集合的读取顺序，将元素复制到 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.IEnumerator%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-161">The elements are copied onto the <xref:System.Collections.Generic.Stack%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="1b294-162">此构造函数是一个 O (`n`) 操作，其中 `n` 是中的元素数 `collection` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-162">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-163">下面的代码示例演示了此构造函数和泛型类的几个方法 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-163">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="1b294-164">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-164">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-165">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-165">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-166"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-166">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-167"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-167">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-168"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-168">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-169">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-169">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-170">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-170">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-171"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-171">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-172"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-172">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1b294-173"><paramref name="collection" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-173"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="1b294-174"><see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="1b294-174">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="1b294-175">初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。</span><span class="sxs-lookup"><span data-stu-id="1b294-175">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-176">的容量 <xref:System.Collections.Generic.Stack%601> 是可容纳的元素数 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-176">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="1b294-177">当向添加元素时 <xref:System.Collections.Generic.Stack%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-177">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="1b294-178">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-178">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-179">可以通过调用来减少容量 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-179">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="1b294-180">此构造函数是一个 O (`n`) 操作，其中， `n` 为 `capacity` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-180">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1b294-181"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="1b294-181"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-182">从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-182">Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-183"><xref:System.Collections.Generic.Stack%601.Count%2A> 将设置为零，同时还会释放集合元素中其他对象的引用。</span><span class="sxs-lookup"><span data-stu-id="1b294-183"><xref:System.Collections.Generic.Stack%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="1b294-184">容量保持不变。</span><span class="sxs-lookup"><span data-stu-id="1b294-184">The capacity remains unchanged.</span></span> <span data-ttu-id="1b294-185">若要重置的容量 <xref:System.Collections.Generic.Stack%601> ，请调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-185">To reset the capacity of the <xref:System.Collections.Generic.Stack%601>, call <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span> <span data-ttu-id="1b294-186">修整空会将的 <xref:System.Collections.Generic.Stack%601> 容量设置 <xref:System.Collections.Generic.Stack%601> 为默认容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-186">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="1b294-187">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-187">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-188">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-188">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-189">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-189">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-190">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-190">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-191"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-191">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-192"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-192">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-193"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-193">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-194">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-194">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-195">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-195">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-196"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-196">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-197"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-197">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1b294-198">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中定位的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-198">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="1b294-199">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-199">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="1b294-200">确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</span><span class="sxs-lookup"><span data-stu-id="1b294-200">Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="1b294-201">如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Stack`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-201"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-202">此方法使用的默认相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> `T` （列表中的值的类型）确定相等性。</span><span class="sxs-lookup"><span data-stu-id="1b294-202">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="1b294-203">此方法执行线性搜索;因此，此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-203">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-204">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-204">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-205">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-205">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-206">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-206">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-207"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-207">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-208"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-208">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-209"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-209">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-210">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-210">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-211">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-211">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-212"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-212">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-213"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-213">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections"><span data-ttu-id="1b294-214">在集合中执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="1b294-214">Performing Culture-Insensitive String Operations in Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1b294-215">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Stack`1" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="1b294-215">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="1b294-216"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="1b294-216">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="1b294-217"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="1b294-217">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="1b294-218">从指定的数组索引处开始，将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到现有的一维 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="1b294-218">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-219">元素将按后进先出 (后进先出) 顺序复制到数组，类似于通过连续调用返回的元素的顺序 <xref:System.Collections.Generic.Stack%601.Pop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-219">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="1b294-220">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-220">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-221">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-221">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-222">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-222">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-223">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-223">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-224"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-224">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-225"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-225">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-226"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-226">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-227">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-227">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-228">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-228">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-229"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-229">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-230"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-230">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1b294-231"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-231"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1b294-232"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="1b294-232"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1b294-233">源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="1b294-233">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1b294-234">获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="1b294-234">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <value><span data-ttu-id="1b294-235"><see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="1b294-235">The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-236">的容量 <xref:System.Collections.Generic.Stack%601> 是可存储的元素数 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-236">The capacity of the <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can store.</span></span> <span data-ttu-id="1b294-237"><xref:System.Collections.Generic.Stack%601.Count%2A> 实际在中的元素的数目 <xref:System.Collections.Generic.Stack%601> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-237"><xref:System.Collections.Generic.Stack%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-238">容量始终大于或等于 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-238">The capacity is always greater than or equal to <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="1b294-239">如果在 <xref:System.Collections.Generic.Stack%601.Count%2A> 添加元素时超出容量，则会在复制旧元素并添加新元素之前自动重新分配内部数组，增加容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-239">If <xref:System.Collections.Generic.Stack%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="1b294-240">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="1b294-240">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-241">下面的代码示例演示了泛型类的多个属性和方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.Count%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="1b294-241">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="1b294-242">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-242">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-243">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-243">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-244"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-244">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-245"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-245">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-246"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-246">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-247">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-247">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-248">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-248">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-249"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-249">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-250"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-250">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-251">返回 <see cref="T:System.Collections.Generic.Stack`1" /> 的一个枚举数。</span><span class="sxs-lookup"><span data-stu-id="1b294-251">Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="1b294-252"><see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 的一个 <see cref="T:System.Collections.Generic.Stack`1" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-252">An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-253">C `foreach` + + 中的 c # 语言 (在 `for each` `For Each` Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="1b294-253">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="1b294-254">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="1b294-254">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="1b294-255">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-255">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="1b294-256">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="1b294-256">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="1b294-257">在此位置上，未定义 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="1b294-257">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="1b294-258">因此，在读取 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-258">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="1b294-259">在调用 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-259"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="1b294-260"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-260"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="1b294-261">如果 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-261">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="1b294-262">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-262">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="1b294-263">如果最后一次调用 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="1b294-263">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="1b294-264">无法再次将 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="1b294-264">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="1b294-265">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="1b294-265">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="1b294-266">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-266">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1b294-267">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="1b294-267">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="1b294-268">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-268">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="1b294-269">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-269">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="1b294-270">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-270">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="1b294-271">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-271">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-272">下面的代码示例演示了 <xref:System.Collections.Generic.Stack%601> 泛型类是可枚举的。</span><span class="sxs-lookup"><span data-stu-id="1b294-272">The following code example demonstrates that the <xref:System.Collections.Generic.Stack%601> generic class is enumerable.</span></span> <span data-ttu-id="1b294-273">在 `foreach` `For Each` c + +) 的 Visual Basic 中 (的语句 `for each` 用于枚举队列。</span><span class="sxs-lookup"><span data-stu-id="1b294-273">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="1b294-274">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-274">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-275">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-275">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-276"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-276">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-277"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-277">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-278"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-278">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-279">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-279">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-280">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-280">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-281"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-281">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-282"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-282">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-283">返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象但不将其移除。</span><span class="sxs-lookup"><span data-stu-id="1b294-283">Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="1b294-284">位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-284">The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-285">此方法类似于 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法，但 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="1b294-285">This method is similar to the <xref:System.Collections.Generic.Stack%601.Pop%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-286">如果类型 `T` 为引用类型，则 `null` 可以在需要时将推送到 <xref:System.Collections.Generic.Stack%601> 作为占位符。</span><span class="sxs-lookup"><span data-stu-id="1b294-286">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="1b294-287">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-287">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-288">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-288">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-289">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-289">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-290">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-290">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-291"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-291">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-292"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-292">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-293"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-293">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-294">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-294">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-295">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-295">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-296"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-296">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-297"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-297">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1b294-298"><see cref="T:System.Collections.Generic.Stack`1" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-298">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-299">删除并返回 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-299">Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="1b294-300">从 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部移除的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-300">The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-301">此方法类似于 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法，但 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Stack%601>。</span><span class="sxs-lookup"><span data-stu-id="1b294-301">This method is similar to the <xref:System.Collections.Generic.Stack%601.Peek%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="1b294-302">如果类型 `T` 为引用类型，则 `null` 可以在需要时将推送到 <xref:System.Collections.Generic.Stack%601> 作为占位符。</span><span class="sxs-lookup"><span data-stu-id="1b294-302">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="1b294-303"><xref:System.Collections.Generic.Stack%601> 以数组的形式实现。</span><span class="sxs-lookup"><span data-stu-id="1b294-303"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span> <span data-ttu-id="1b294-304">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-304">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-305">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-305">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Pop%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-306">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-306">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-307">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-307">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-308"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-308">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-309"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-309">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-310"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-310">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-311">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-311">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-312">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-312">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-313"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-313">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-314"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-314">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1b294-315"><see cref="T:System.Collections.Generic.Stack`1" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-315">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1b294-316">要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-316">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span> <span data-ttu-id="1b294-317">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-317">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="1b294-318">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部插入一个对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-318">Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-319"><xref:System.Collections.Generic.Stack%601> 以数组的形式实现。</span><span class="sxs-lookup"><span data-stu-id="1b294-319"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="1b294-320">如果 <xref:System.Collections.Generic.Stack%601.Count%2A> 已等于容量，则会 <xref:System.Collections.Generic.Stack%601> 自动重新分配内部数组，并将现有元素复制到新数组，然后再添加新的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-320">If <xref:System.Collections.Generic.Stack%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Stack%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="1b294-321">如果类型 `T` 为引用类型，则 `null` 可以在需要时将推送到 <xref:System.Collections.Generic.Stack%601> 作为占位符。</span><span class="sxs-lookup"><span data-stu-id="1b294-321">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span> <span data-ttu-id="1b294-322">它占据堆栈中的一个槽，并将其视为任何对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-322">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="1b294-323">如果 <xref:System.Collections.Generic.Stack%601.Count%2A> 小于堆栈的容量， <xref:System.Collections.Generic.Stack%601.Push%2A> 则是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-323">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="1b294-324">如果需要增加容量以容纳新元素， <xref:System.Collections.Generic.Stack%601.Push%2A> 则会变成 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-324">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-325">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-325">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Push%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-326">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-326">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-327">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-327">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-328"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-328">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-329"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-329">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-330"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-330">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-331">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-331">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-332">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-332">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-333"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-333">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-334"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-334">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="stack.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-335">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="1b294-335">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="1b294-336">可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-336">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-337">C `foreach` + + 中的 c # 语言 (在 `for each` `For Each` Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="1b294-337">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="1b294-338">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="1b294-338">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="1b294-339">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-339">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="1b294-340">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="1b294-340">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="1b294-341">在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="1b294-341">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="1b294-342">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-342">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="1b294-343">在调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 之前，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-343"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="1b294-344"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-344"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="1b294-345">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-345">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="1b294-346">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-346">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="1b294-347">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="1b294-347">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="1b294-348">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="1b294-348">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="1b294-349">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="1b294-349">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="1b294-350">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-350">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1b294-351">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="1b294-351">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="1b294-352">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-352">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="1b294-353">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-353">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="1b294-354">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-354">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="1b294-355">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-355">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, arrayIndex As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="stack.System.Collections.ICollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1b294-356">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="1b294-356">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="1b294-357"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="1b294-357">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="1b294-358"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="1b294-358">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="1b294-359">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="1b294-359">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="1b294-360">如果源的类型 <xref:System.Collections.ICollection> 不能自动强制转换为目标的类型 `array` ，则引发的非泛型实现 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> <xref:System.InvalidCastException> ，而泛型实现将引发 <xref:System.ArgumentException> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-360">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="1b294-361">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-361">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1b294-362"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-362"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1b294-363"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="1b294-363"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1b294-364"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="1b294-364"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="1b294-365">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1b294-365">-or-</span></span> 
 <span data-ttu-id="1b294-366"><paramref name="array" /> 没有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="1b294-366"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="1b294-367">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1b294-367">-or-</span></span> 
<span data-ttu-id="1b294-368">源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="1b294-368">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="1b294-369">- 或 -</span><span class="sxs-lookup"><span data-stu-id="1b294-369">-or-</span></span> 
<span data-ttu-id="1b294-370">无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="1b294-370">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1b294-371">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="1b294-371">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="1b294-372">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-372"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="1b294-373">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-373">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-374">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-374">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="1b294-375">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="1b294-375">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="1b294-376">在极少数情况下，枚举与写入访问争用，必须在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-376">In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="1b294-377">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-377">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="1b294-378"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，该对象可用于同步对的访问 <xref:System.Collections.ICollection> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-378"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="1b294-379">仅当所有线程在访问集合之前锁定此对象时，同步才有效。</span><span class="sxs-lookup"><span data-stu-id="1b294-379">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="1b294-380">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="1b294-380">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1b294-381">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-381">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="1b294-382">用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-382">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="1b294-383">在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。</span><span class="sxs-lookup"><span data-stu-id="1b294-383">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-384">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-384">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="1b294-385">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="1b294-385">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="1b294-386">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-386">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="1b294-387">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-387">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="1b294-388"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，该对象可用于同步对的访问 <xref:System.Collections.ICollection> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-388"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="1b294-389">仅当所有线程在访问集合之前锁定此对象时，同步才有效。</span><span class="sxs-lookup"><span data-stu-id="1b294-389">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="1b294-390">下面的代码演示 <xref:System.Collections.ICollection.SyncRoot%2A> c #、c + + 和 Visual Basic 的属性的用法。</span><span class="sxs-lookup"><span data-stu-id="1b294-390">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="1b294-391">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="1b294-391">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="stack.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-392">返回循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="1b294-392">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="1b294-393">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-393">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-394">C `foreach` + + 中的 c # 语言 (在 `for each` `For Each` Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="1b294-394">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="1b294-395">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="1b294-395">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="1b294-396">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-396">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="1b294-397">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="1b294-397">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="1b294-398"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="1b294-398"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="1b294-399">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="1b294-399">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="1b294-400">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-400">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="1b294-401">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-401"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="1b294-402"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-402"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="1b294-403">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-403">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="1b294-404">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="1b294-404">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="1b294-405">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.IEnumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="1b294-405">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="1b294-406">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="1b294-406">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="1b294-407">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="1b294-407">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="1b294-408">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-408">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1b294-409">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="1b294-409">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="1b294-410">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="1b294-410">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="1b294-411">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-411">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="1b294-412">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="1b294-412">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="1b294-413">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-413">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-414">将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到新数组中。</span><span class="sxs-lookup"><span data-stu-id="1b294-414">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="1b294-415">新数组，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素的副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-415">A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-416">元素将按后进先出 (后进先出) 顺序复制到数组，类似于通过连续调用返回的元素的顺序 <xref:System.Collections.Generic.Stack%601.Pop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-416">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="1b294-417">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-417">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b294-418">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Stack%601> ，包括 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1b294-418">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="1b294-419">此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。</span><span class="sxs-lookup"><span data-stu-id="1b294-419">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="1b294-420">枚举堆栈的元素，这不会更改堆栈的状态。</span><span class="sxs-lookup"><span data-stu-id="1b294-420">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="1b294-421"><xref:System.Collections.Generic.Stack%601.Pop%2A>方法用于弹出堆栈中的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="1b294-421">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="1b294-422"><xref:System.Collections.Generic.Stack%601.Peek%2A>方法用于查看堆栈上的下一项，然后 <xref:System.Collections.Generic.Stack%601.Pop%2A> 使用方法将它弹出。</span><span class="sxs-lookup"><span data-stu-id="1b294-422">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="1b294-423"><xref:System.Collections.Generic.Stack%601.ToArray%2A>方法用于创建数组，并将堆栈元素复制到该数组，然后将该数组传递给 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 采用的构造函数，并 <xref:System.Collections.Generic.IEnumerable%601> 使用反转元素的顺序创建堆栈副本。</span><span class="sxs-lookup"><span data-stu-id="1b294-423">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="1b294-424">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-424">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="1b294-425">创建堆栈大小两倍的数组，并 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="1b294-425">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="1b294-426"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>再次使用构造函数来创建具有反转的元素顺序的堆栈副本; 因此，这三个 null 元素位于末尾。</span><span class="sxs-lookup"><span data-stu-id="1b294-426">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="1b294-427"><xref:System.Collections.Generic.Stack%601.Contains%2A>方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后， <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Stack%601.Count%2A> 属性会显示堆栈为空。</span><span class="sxs-lookup"><span data-stu-id="1b294-427">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b294-428">如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。</span><span class="sxs-lookup"><span data-stu-id="1b294-428">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b294-429">如果没有新元素添加到集合中，则可以使用此方法最大程度地减少集合的内存开销。</span><span class="sxs-lookup"><span data-stu-id="1b294-429">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="1b294-430">但重新分配和复制较大的成本 <xref:System.Collections.Generic.Stack%601> 可能很大，因此， <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 如果列表的容量超过90%，此方法不会执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="1b294-430">The cost of reallocating and copying a large <xref:System.Collections.Generic.Stack%601> can be considerable, however, so the <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="1b294-431">这样可以避免因相对较小的收益而产生较大的重新分配成本。</span><span class="sxs-lookup"><span data-stu-id="1b294-431">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="1b294-432">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-432">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="1b294-433">若要将重置 <xref:System.Collections.Generic.Stack%601> 为其初始状态，请 <xref:System.Collections.Generic.Stack%601.Clear%2A> 在调用方法之前调用方法 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1b294-433">To reset a <xref:System.Collections.Generic.Stack%601> to its initial state, call the <xref:System.Collections.Generic.Stack%601.Clear%2A> method before calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="1b294-434">修整空会将的 <xref:System.Collections.Generic.Stack%601> 容量设置 <xref:System.Collections.Generic.Stack%601> 为默认容量。</span><span class="sxs-lookup"><span data-stu-id="1b294-434">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="1b294-435">如果存在，则为 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象；否则为 <typeparamref name="T" /> 的默认值。</span><span class="sxs-lookup"><span data-stu-id="1b294-435">If present, the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, the default value of <typeparamref name="T" />.</span></span></param>
        <summary><span data-ttu-id="1b294-436">返回一个值，该值指示 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部是否有对象；如果有，则将其复制到 <paramref name="result" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="1b294-436">Returns a value that indicates whether there is an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />, and if one is present, copies it to the <paramref name="result" /> parameter.</span></span> <span data-ttu-id="1b294-437">不从 <see cref="T:System.Collections.Generic.Stack`1" /> 中删除对象。</span><span class="sxs-lookup"><span data-stu-id="1b294-437">The object is not removed from the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="1b294-438">如果 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部有对象，则为 <see langword="true" />；如果 <see cref="T:System.Collections.Generic.Stack`1" /> 为空，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-438"><see langword="true" /> if there is an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />; <see langword="false" /> if the <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop : 'T -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="1b294-439">如果存在，则为 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象；否则为 <typeparamref name="T" /> 的默认值。</span><span class="sxs-lookup"><span data-stu-id="1b294-439">If present, the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, the default value of <typeparamref name="T" />.</span></span></param>
        <summary><span data-ttu-id="1b294-440">返回一个值，该值指示 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部是否有对象；如果有，则将其复制到 <paramref name="result" /> 参数，并从 <see cref="T:System.Collections.Generic.Stack`1" /> 中删除它。</span><span class="sxs-lookup"><span data-stu-id="1b294-440">Returns a value that indicates whether there is an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />, and if one is present, copies it to the <paramref name="result" /> parameter, and removes it from the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns><span data-ttu-id="1b294-441">如果 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部有对象，则为 <see langword="true" />；如果 <see cref="T:System.Collections.Generic.Stack`1" /> 为空，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1b294-441"><see langword="true" /> if there is an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />; <see langword="false" /> if the <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
