<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="de5436268ab16f586757a48a36553a266adc6bee" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83940377" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Collections" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">指定堆栈中元素的类型。</typeparam>
    <summary>表示可变大小的后进先出 (LIFO) 集合（对于相同指定类型的实例）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 以数组的形式实现。  
  
 当需要临时存储信息时，堆栈和队列很有用;也就是说，当你可能想要在检索元素值后丢弃该元素时。 如果需要以存储在集合中的相同顺序访问信息，请使用 <xref:System.Collections.Generic.Queue%601>。 如果需要按相反的顺序访问该信息，请使用 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>。  
  
 当需要同时从多个线程访问集合时，使用 <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> 和 <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> 类型。  
  
 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 的常见用途是在调用其他过程的过程中保留变量状态。  
  
 可对 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 及其元素执行三个主要操作：  
  
-   <xref:System.Collections.Generic.Stack%601.Push%2A> 在 <xref:System.Collections.Stack>顶部插入元素。  
  
-   <xref:System.Collections.Generic.Stack%601.Pop%2A> 从 <xref:System.Collections.Generic.Stack%601>顶部删除元素。  
  
-   <xref:System.Collections.Generic.Stack%601.Peek%2A> 返回位于 <xref:System.Collections.Generic.Stack%601> 顶部的元素，但不会将其从 <xref:System.Collections.Generic.Stack%601>中删除。  
  
 <xref:System.Collections.Generic.Stack%601> 的容量是 <xref:System.Collections.Generic.Stack%601> 可以容纳的元素数。 将元素添加到 <xref:System.Collections.Generic.Stack%601>时，将根据需要通过重新分配内部数组来自动增加容量。 可以通过调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>来减少容量。  
  
 如果 <xref:System.Collections.Generic.Stack%601.Count%2A> 小于堆栈的容量，则 <xref:System.Collections.Generic.Stack%601.Push%2A> 为 O （1）操作。 如果需要增加容量以容纳新元素，<xref:System.Collections.Generic.Stack%601.Push%2A> 会成为 O （`n`）运算，`n` <xref:System.Collections.Generic.Stack%601.Count%2A>。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 为 O （1）操作。  
  
 <xref:System.Collections.Generic.Stack%601> 接受 `null` 作为引用类型的有效值，并允许重复元素。  
  
   
  
## Examples  
 下面的代码示例演示了 <xref:System.Collections.Generic.Stack%601> 泛型类的几个方法。 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型的公共静态（<see langword="Shared" /> Visual Basic）成员是线程安全的。 但不保证所有实例成员都是线程安全的。  
  
只要没有修改集合，<see cref="T:System.Collections.Generic.Stack`1" /> 就可以同时支持多个读取器。  尽管如此，枚举集合本身并不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。  若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">迭代器（C# 和 Visual Basic）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 的容量是 <xref:System.Collections.Generic.Stack%601> 可以容纳的元素数。 将元素添加到 <xref:System.Collections.Generic.Stack%601>时，将根据需要通过重新分配内部数组来自动增加容量。  
  
 如果集合的大小可为估算值，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.Stack%601>时执行多个大小调整操作。  
  
 可以通过调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>来减少容量。  
  
 此构造函数的运算复杂度为 O （1）。  
  
   
  
## Examples  
 下面的代码示例演示了此构造函数以及 <xref:System.Collections.Generic.Stack%601> 泛型类的几个方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">从中复制元素的集合。</param>
        <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 的容量是 <xref:System.Collections.Generic.Stack%601> 可以容纳的元素数。 将元素添加到 <xref:System.Collections.Generic.Stack%601>时，将根据需要通过重新分配内部数组来自动增加容量。  
  
 如果集合的大小可为估算值，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.Stack%601>时执行多个大小调整操作。  
  
 可以通过调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>来减少容量。  
  
 按集合的 <xref:System.Collections.Generic.IEnumerator%601> 读取元素的顺序将这些元素复制到 <xref:System.Collections.Generic.Stack%601>。  
  
 此构造函数是一个 O （`n`）运算，其中 `n` 是 `collection`中的元素数目。  
  
   
  
## Examples  
 下面的代码示例演示了此构造函数以及 <xref:System.Collections.Generic.Stack%601> 泛型类的几个方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。</param>
        <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 的容量是 <xref:System.Collections.Generic.Stack%601> 可以容纳的元素数。 将元素添加到 <xref:System.Collections.Generic.Stack%601>时，将根据需要通过重新分配内部数组来自动增加容量。  
  
 如果集合的大小可为估算值，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.Stack%601>时执行多个大小调整操作。  
  
 可以通过调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>来减少容量。  
  
 此构造函数是一个 O （`n`）操作，在此操作中 `capacity``n`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> 小于零。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601.Count%2A> 设置为零，还会释放对集合的元素的其他对象的引用。  
  
 容量保持不变。 若要重置 <xref:System.Collections.Generic.Stack%601>的容量，请调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>。 修整空 <xref:System.Collections.Generic.Stack%601> 会将 <xref:System.Collections.Generic.Stack%601> 的容量设置为默认容量。  
  
 此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A>的。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中查找的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
        <summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</summary>
        <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Stack`1" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用默认的相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 来确定 `T`（列表中值的类型）的相等性。  
  
 此方法执行线性搜索;因此，此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A>的。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections">在集合中执行不区分区域性的字符串操作</related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">作为从 <see cref="T:System.Array" /> 复制的元素目标的一维 <see cref="T:System.Collections.Generic.Stack`1" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
        <param name="arrayIndex">
          <paramref name="array" /> 中要从其开始复制的从零开始的索引。</param>
        <summary>从指定的数组索引处开始，将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到现有的一维 <see cref="T:System.Array" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素将按后进先出（LIFO）顺序复制到数组，类似于对 <xref:System.Collections.Generic.Stack%601.Pop%2A>的连续调用返回的元素的顺序。  
  
 此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A>的。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</summary>
        <value><see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 的容量是 <xref:System.Collections.Generic.Stack%601> 可存储的元素数。 <xref:System.Collections.Generic.Stack%601.Count%2A> 是实际处于 <xref:System.Collections.Generic.Stack%601>中的元素的数目。  
  
 容量始终大于或等于 <xref:System.Collections.Generic.Stack%601.Count%2A>。 如果在添加元素时 <xref:System.Collections.Generic.Stack%601.Count%2A> 超过容量，则会在复制旧元素并添加新元素之前自动重新分配内部数组，从而增加容量。  
  
 检索此属性的值的运算复杂度为 O(1)。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的多个属性和方法，包括 <xref:System.Collections.Generic.Stack%601.Count%2A> 属性。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Collections.Generic.Stack`1" /> 的一个枚举数。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）隐藏了枚举器的复杂性。 因此，建议使用 `foreach`，而不是直接操作枚举数。  
  
 枚举器可用于读取集合中的数据，但不能用于修改基础集合。  
  
 最初，枚举数定位在集合中第一个元素的前面。 在此位置上，未定义 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>。 因此，在读取 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。  
  
 在调用 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回相同的对象。 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 设置为下一个元素。  
  
 如果 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回 `false`。 当枚举器位于此位置时，对 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 的后续调用也将返回 `false`。 如果对的最后一个调用 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 未定义。 无法再次将 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。  
  
 只要集合保持不变，枚举器就仍有效。 如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 或 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。  
  
 枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。 若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。  若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。  
  
 不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。  
  
 此方法为 O （1）操作。  
  
   
  
## Examples  
 下面的代码示例演示了 <xref:System.Collections.Generic.Stack%601> 的泛型类是可枚举的。 `foreach` 语句（`For Each` Visual Basic 中 `for each` C++）用于枚举队列。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象但不将其移除。</summary>
        <returns>位于 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法类似于 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法，但 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Stack%601>。  
  
 如果类型 `T` 是引用类型，则可以根据需要将 `null` 作为占位符推送到 <xref:System.Collections.Generic.Stack%601> 上。  
  
 此方法为 O （1）操作。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1" /> 为空。</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除并返回 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象。</summary>
        <returns>从 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部移除的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法类似于 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法，但 <xref:System.Collections.Generic.Stack%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Stack%601>。  
  
 如果类型 `T` 是引用类型，则可以根据需要将 `null` 作为占位符推送到 <xref:System.Collections.Generic.Stack%601> 上。  
  
 <xref:System.Collections.Generic.Stack%601> 以数组的形式实现。 此方法为 O （1）操作。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1" /> 为空。</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
        <summary>在 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部插入一个对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 以数组的形式实现。  
  
 如果 <xref:System.Collections.Generic.Stack%601.Count%2A> 已经等于容量 <xref:System.Collections.Generic.Stack%601>，则会自动重新分配内部数组，并将现有元素复制到新数组，然后再添加新元素。  
  
 如果类型 `T` 是引用类型，则可以根据需要将 `null` 作为占位符推送到 <xref:System.Collections.Generic.Stack%601> 上。 它占据堆栈中的一个槽，并将其视为任何对象。  
  
 如果 <xref:System.Collections.Generic.Stack%601.Count%2A> 小于堆栈的容量，则 <xref:System.Collections.Generic.Stack%601.Push%2A> 为 O （1）操作。 如果需要增加容量以容纳新元素，<xref:System.Collections.Generic.Stack%601.Push%2A> 会成为 O （`n`）运算，`n` <xref:System.Collections.Generic.Stack%601.Count%2A>。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="stack.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回循环访问集合的枚举器。</summary>
        <returns>一个可用于遍历集合的<see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）隐藏了枚举器的复杂性。 因此，建议使用 `foreach`，而不是直接操作枚举数。  
  
 枚举器可用于读取集合中的数据，但不能用于修改基础集合。  
  
 最初，枚举数定位在集合中第一个元素的前面。 在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。 因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 将枚举器向前移动到集合的第一个元素。  
  
 在调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 之前，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回相同的对象。 <xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。  
  
 如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。 当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。 如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 未定义。 无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。  
  
 只要集合保持不变，枚举器就仍有效。 如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。  
  
 枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。 若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。  若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。  
  
 不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。  
  
 此方法为 O （1）操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, arrayIndex As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="stack.System.Collections.ICollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">作为从 <see cref="T:System.Array" /> 复制的元素目标的一维 <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
        <param name="arrayIndex">
          <paramref name="array" /> 中要从其开始复制的从零开始的索引。</param>
        <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  如果源 <xref:System.Collections.ICollection> 的类型无法自动强制转换为目标 `array`的类型，<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> 的非泛型实现将引发 <xref:System.InvalidCastException>，而泛型实现将引发 <xref:System.ArgumentException>。  
  
 此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A>的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> 是多维数组。  
  
- 或 - 
 <paramref name="array" /> 没有从零开始的索引。  
  
- 或 - 
源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。  
  
- 或 - 
源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（确保线程安全）。</summary>
        <value>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。  
  
 枚举整个集合本质上不是一个线程安全的过程。  在极少数情况下，枚举与写入访问争用，必须在整个枚举过程中锁定集合。  若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，该对象可用于同步对 <xref:System.Collections.ICollection>的访问。 仅当所有线程在访问集合之前锁定此对象时，同步才有效。  
  
 检索此属性的值的运算复杂度为 O(1)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
        <value>用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。  
  
 枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。  若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，该对象可用于同步对 <xref:System.Collections.ICollection>的访问。 仅当所有线程在访问集合之前锁定此对象时，同步才有效。 下面的代码演示如何使用C#、 C++和 Visual Basic 的 <xref:System.Collections.ICollection.SyncRoot%2A> 属性。  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 检索此属性的值的运算复杂度为 O(1)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="stack.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回循环访问集合的枚举器。</summary>
        <returns>一个可用于遍历集合的<see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）隐藏了枚举器的复杂性。 因此，建议使用 `foreach`，而不是直接操作枚举数。  
  
 枚举器可用于读取集合中的数据，但不能用于修改基础集合。  
  
 最初，枚举数定位在集合中第一个元素的前面。 <xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。  在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。 因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。  
  
 在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。 <xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。  
  
 如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。 当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。 如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.IEnumerator.Current%2A> 未定义。 若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。  
  
 只要集合保持不变，枚举器就仍有效。 如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。  
  
 枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。  若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。  
  
 不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。  
  
 此方法为 O （1）操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:System.Collections.Generic.Stack`1" /> 复制到新数组中。</summary>
        <returns>新数组，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元素将按后进先出（LIFO）顺序复制到数组，类似于对 <xref:System.Collections.Generic.Stack%601.Pop%2A>的连续调用返回的元素的顺序。  
  
 此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A>的。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Collections.Generic.Stack%601> 泛型类的若干方法，包括 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法。  
  
 此代码示例创建一个具有默认容量的字符串堆栈，并使用 <xref:System.Collections.Generic.Stack%601.Push%2A> 方法将五个字符串推送到堆栈上。 枚举堆栈的元素，这不会更改堆栈的状态。 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法用于弹出堆栈中的第一个字符串。 <xref:System.Collections.Generic.Stack%601.Peek%2A> 方法用于查看堆栈上的下一项，然后使用 <xref:System.Collections.Generic.Stack%601.Pop%2A> 方法将它弹出。  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 方法用于创建数组，并将堆栈元素复制到该数组，然后将数组传递给采用 <xref:System.Collections.Generic.IEnumerable%601>的 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数，并使用反转元素的顺序创建堆栈副本。 将显示副本的元素。  
  
 创建堆栈大小两倍的数组，并使用 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 方法从数组中间开始复制数组元素。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 构造函数将再次用于创建具有反向元素顺序的堆栈副本;因此，这三个 null 元素位于末尾。  
  
 <xref:System.Collections.Generic.Stack%601.Contains%2A> 方法用于显示字符串 "四" 位于堆栈的第一个副本中，在此之后，<xref:System.Collections.Generic.Stack%601.Clear%2A> 方法会清除副本，<xref:System.Collections.Generic.Stack%601.Count%2A> 属性显示堆栈为空。  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有新元素添加到集合中，则可以使用此方法最大程度地减少集合的内存开销。 但重新分配和复制大型 <xref:System.Collections.Generic.Stack%601> 的成本可能很大，因此，如果列表的容量超过90%，则 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 方法不会执行任何操作。 这样可以避免因相对较小的收益而产生较大的重新分配成本。  
  
 此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.Stack%601.Count%2A>的。  
  
 若要将 <xref:System.Collections.Generic.Stack%601> 重置为其初始状态，请在调用 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 方法之前调用 <xref:System.Collections.Generic.Stack%601.Clear%2A> 方法。 修整空 <xref:System.Collections.Generic.Stack%601> 会将 <xref:System.Collections.Generic.Stack%601> 的容量设置为默认容量。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result">如果存在，则为 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象；否则为 <typeparamref name="T" /> 的默认值。</param>
        <summary>返回一个值，该值指示 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部是否有对象；如果有，则将其复制到 <paramref name="result" /> 参数。 不从 <see cref="T:System.Collections.Generic.Stack`1" /> 中删除对象。</summary>
        <returns>如果 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部有对象，则为 <see langword="true" />；如果 <see cref="T:System.Collections.Generic.Stack`1" /> 为空，则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop : 'T -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result">如果存在，则为 <see cref="T:System.Collections.Generic.Stack`1" /> 顶部的对象；否则为 <typeparamref name="T" /> 的默认值。</param>
        <summary>返回一个值，该值指示 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部是否有对象；如果有，则将其复制到 <paramref name="result" /> 参数，并从 <see cref="T:System.Collections.Generic.Stack`1" /> 中删除它。</summary>
        <returns>如果 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部有对象，则为 <see langword="true" />；如果 <see cref="T:System.Collections.Generic.Stack`1" /> 为空，则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
