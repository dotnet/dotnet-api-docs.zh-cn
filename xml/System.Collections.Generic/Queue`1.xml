<Type Name="Queue&lt;T&gt;" FullName="System.Collections.Generic.Queue&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9813f439b4e8e302565a56e50532849f28e17a0" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100293647" /></Metadata><TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface ICollection" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::ICollection" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System" FromVersion="4.0.0.0" To="System.Collections" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Count = {Count}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Count = {Count}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="8cd88-101">指定队列中元素的类型。</span><span class="sxs-lookup"><span data-stu-id="8cd88-101">Specifies the type of elements in the queue.</span></span></typeparam>
    <summary><span data-ttu-id="8cd88-102">表示对象的先进先出集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-102">Represents a first-in, first-out collection of objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-103">此类将泛型队列实现为循环数组。</span><span class="sxs-lookup"><span data-stu-id="8cd88-103">This class implements a generic queue as a circular array.</span></span> <span data-ttu-id="8cd88-104">存储在中的对象 <xref:System.Collections.Generic.Queue%601> 将在一端插入并从另一个中删除。</span><span class="sxs-lookup"><span data-stu-id="8cd88-104">Objects stored in a <xref:System.Collections.Generic.Queue%601> are inserted at one end and removed from the other.</span></span> <span data-ttu-id="8cd88-105">如果需要临时存储信息，则队列和堆栈非常有用;也就是说，当你可能想要在检索元素值后丢弃该元素时。</span><span class="sxs-lookup"><span data-stu-id="8cd88-105">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="8cd88-106"><xref:System.Collections.Generic.Queue%601>如果需要以存储在集合中的相同顺序访问该信息，请使用。</span><span class="sxs-lookup"><span data-stu-id="8cd88-106">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="8cd88-107"><xref:System.Collections.Generic.Stack%601>如果需要按相反的顺序访问该信息，请使用。</span><span class="sxs-lookup"><span data-stu-id="8cd88-107">Use <xref:System.Collections.Generic.Stack%601> if you need to access the information in reverse order.</span></span> <span data-ttu-id="8cd88-108"><xref:System.Collections.Concurrent.ConcurrentQueue%601> <xref:System.Collections.Concurrent.ConcurrentStack%601> 如果需要从多个线程同时访问集合，请使用或。</span><span class="sxs-lookup"><span data-stu-id="8cd88-108">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="8cd88-109">可以对及其元素执行三个主要操作 <xref:System.Collections.Generic.Queue%601> ：</span><span class="sxs-lookup"><span data-stu-id="8cd88-109">Three main operations can be performed on a <xref:System.Collections.Generic.Queue%601> and its elements:</span></span>  
  
-   <span data-ttu-id="8cd88-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> 将一个元素添加到的末尾 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="8cd88-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 从的开头移除最旧的元素 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="8cd88-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> 速览返回位于开始处的最早的元素，但不将 <xref:System.Collections.Generic.Queue%601> 其从中移除 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> peek returns the oldest element that is at the start of the <xref:System.Collections.Generic.Queue%601> but does not remove it from the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-113">的容量 <xref:System.Collections.Generic.Queue%601> 是可容纳的元素数 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-113">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="8cd88-114">当向添加元素时 <xref:System.Collections.Generic.Queue%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-114">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="8cd88-115">可以通过调用来减少容量 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-116"><xref:System.Collections.Generic.Queue%601> 接受 `null` 作为引用类型的有效值，并允许重复元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-116"><xref:System.Collections.Generic.Queue%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-117">下面的代码示例演示了泛型类的几个方法 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-117">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="8cd88-118">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-118">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-119">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-119">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-120"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-120">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-121"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-121">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-122"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-122">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-123">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-123">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-124">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-124">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-125">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-125">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-126"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-126">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8cd88-127"><see langword="Shared" />此类型) 成员 Visual Basic 的公共静态 (是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="8cd88-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="8cd88-128">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="8cd88-128">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="8cd88-129"><see cref="T:System.Collections.Generic.Queue`1" />只要不修改集合，就可以同时支持多个读取器。</span><span class="sxs-lookup"><span data-stu-id="8cd88-129">A <see cref="T:System.Collections.Generic.Queue`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="8cd88-130">尽管如此，枚举集合本身并不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8cd88-130">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8cd88-131">对于线程安全队列，请参阅 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-131">For a thread-safe queue, see <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8cd88-132">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8cd88-132">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Examples  
 <span data-ttu-id="8cd88-133">下面的代码示例演示了此构造函数和泛型类的几个其他方法 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-133">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="8cd88-134">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-134">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-135">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-135">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-136"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-136">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-137"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-137">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-138"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-138">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-139">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-139">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-140">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-140">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-141">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-141">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-142"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-142">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-143">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有默认初始容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-143">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-144">的容量 <xref:System.Collections.Generic.Queue%601> 是可容纳的元素数 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-144">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="8cd88-145">当向添加元素时 <xref:System.Collections.Generic.Queue%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-145">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8cd88-146">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-146">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-147">可以通过调用来减少容量 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-147">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-148">此构造函数是一个 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-148">This constructor is an O(1) operation.</span></span>  
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="8cd88-149">其元素被复制到新的 <see cref="T:System.Collections.Generic.Queue`1" /> 中的集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-149">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></param>
        <summary><span data-ttu-id="8cd88-150">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-150">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-151">的容量 <xref:System.Collections.Generic.Queue%601> 是可容纳的元素数 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-151">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="8cd88-152">当向添加元素时 <xref:System.Collections.Generic.Queue%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-152">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8cd88-153">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-153">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-154">可以通过调用来减少容量 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-154">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-155">按照集合的读取顺序，将元素复制到 <xref:System.Collections.Generic.Queue%601> <xref:System.Collections.Generic.IEnumerator%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-155">The elements are copied onto the <xref:System.Collections.Generic.Queue%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="8cd88-156">此构造函数是一个 O (`n`) 操作，其中 `n` 是中的元素数 `collection` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-156">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd88-157"><paramref name="collection" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-157"><paramref name="collection" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : int -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="8cd88-158"><see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-158">The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1" /> can contain.</span></span></param>
        <summary><span data-ttu-id="8cd88-159">初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有指定的初始容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-159">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the specified initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-160">的容量 <xref:System.Collections.Generic.Queue%601> 是可容纳的元素数 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-160">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="8cd88-161">当向添加元素时 <xref:System.Collections.Generic.Queue%601> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-161">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="8cd88-162">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-162">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-163">可以通过调用来减少容量 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-163">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-164">此构造函数是一个 O (`n`) 操作，其中， `n` 为 `capacity` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-164">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cd88-165"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="8cd88-165"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-166">从 <see cref="T:System.Collections.Generic.Queue`1" /> 中移除所有对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-166">Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-167"><xref:System.Collections.Generic.Queue%601.Count%2A> 将设置为零，同时还会释放集合元素中其他对象的引用。</span><span class="sxs-lookup"><span data-stu-id="8cd88-167"><xref:System.Collections.Generic.Queue%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="8cd88-168">容量保持不变。</span><span class="sxs-lookup"><span data-stu-id="8cd88-168">The capacity remains unchanged.</span></span> <span data-ttu-id="8cd88-169">若要重置的容量 <xref:System.Collections.Generic.Queue%601> ，请调用 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-169">To reset the capacity of the <xref:System.Collections.Generic.Queue%601>, call <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span> <span data-ttu-id="8cd88-170">修整空会将的 <xref:System.Collections.Generic.Queue%601> 容量设置 <xref:System.Collections.Generic.Queue%601> 为默认容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-170">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="8cd88-171">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-171">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-172">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-172">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="8cd88-173">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-173">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-174">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-174">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-175"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-175">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-176"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-176">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-177"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-177">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-178">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-178">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-179">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-179">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-180">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-180">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-181"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-181">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="queue.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8cd88-182">要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中定位的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-182">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="8cd88-183">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-183">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="8cd88-184">确定某元素是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。</span><span class="sxs-lookup"><span data-stu-id="8cd88-184">Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cd88-185">如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Queue`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-185"><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-186">此方法使用的默认相等比较器 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> `T` （即队列中的值的类型）来确定相等性。</span><span class="sxs-lookup"><span data-stu-id="8cd88-186">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the queue.</span></span>  
  
 <span data-ttu-id="8cd88-187">此方法执行线性搜索;因此，此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-187">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-188">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.Contains%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-188">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="8cd88-189">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-189">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-190">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-190">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-191"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-191">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-192"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-192">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-193"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-193">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-194">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-194">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-195">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-195">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-196">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-196">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-197"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-197">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="8cd88-198">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="8cd88-198">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="queue.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8cd88-199">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="8cd88-199">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="8cd88-200"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8cd88-200">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="8cd88-201"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="8cd88-201">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8cd88-202">从指定数组索引开始将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="8cd88-202">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-203">元素 <xref:System.Array> 按枚举器循环访问的相同顺序复制到中 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-203">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-204">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-204">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd88-205"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-205"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cd88-206"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="8cd88-206"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd88-207">源 <see cref="T:System.Collections.Generic.Queue`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="8cd88-207">The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Queue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd88-208">获取 <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-208">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <value><span data-ttu-id="8cd88-209"><see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-209">The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-210">的容量 <xref:System.Collections.Generic.Queue%601> 是可存储的元素数 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-210">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can store.</span></span> <span data-ttu-id="8cd88-211"><xref:System.Collections.Generic.Queue%601.Count%2A> 实际在中的元素的数目 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-211"><xref:System.Collections.Generic.Queue%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-212">容量始终大于或等于 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-212">The capacity is always greater than or equal to <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span> <span data-ttu-id="8cd88-213">如果在 <xref:System.Collections.Generic.Queue%601.Count%2A> 添加元素时超出容量，则会在复制旧元素并添加新元素之前自动重新分配内部数组，增加容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-213">If <xref:System.Collections.Generic.Queue%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="8cd88-214">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8cd88-214">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-215">下面的代码示例演示了泛型类的多个属性和方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.Count%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8cd88-215">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="8cd88-216">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-216">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-217">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-217">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-218"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-218">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-219"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-219">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-220"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-220">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-221">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-221">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-222">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-222">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-223">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-223">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-224"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-224">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public T Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; 'T" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-225">移除并返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-225">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cd88-226">从 <see cref="T:System.Collections.Generic.Queue`1" /> 的开始处移除的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-226">The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-227">此方法类似于 <xref:System.Collections.Generic.Queue%601.Peek%2A> 方法，但 <xref:System.Collections.Generic.Queue%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="8cd88-227">This method is similar to the <xref:System.Collections.Generic.Queue%601.Peek%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-228">如果类型 `T` 为引用类型，则 `null` 可将添加到 <xref:System.Collections.Generic.Queue%601> 作为值。</span><span class="sxs-lookup"><span data-stu-id="8cd88-228">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="8cd88-229">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-229">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-230">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-230">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method.</span></span>  
  
 <span data-ttu-id="8cd88-231">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-231">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-232">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-232">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-233"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-233">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-234"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-234">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-235"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-235">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-236">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-236">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-237">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-237">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-238">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-238">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-239"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-239">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8cd88-240"><see cref="T:System.Collections.Generic.Queue`1" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-240">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="queue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8cd88-241">要添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-241">The object to add to the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span> <span data-ttu-id="8cd88-242">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-242">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="8cd88-243">将对象添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的结尾处。</span><span class="sxs-lookup"><span data-stu-id="8cd88-243">Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-244">如果 <xref:System.Collections.Generic.Queue%601.Count%2A> 已等于容量，则会 <xref:System.Collections.Generic.Queue%601> 自动重新分配内部数组，并将现有元素复制到新数组，然后再添加新的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-244">If <xref:System.Collections.Generic.Queue%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Queue%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="8cd88-245">如果 <xref:System.Collections.Generic.Queue%601.Count%2A> 小于内部数组的容量，则此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-245">If <xref:System.Collections.Generic.Queue%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="8cd88-246">如果需要重新分配内部数组以容纳新元素，则此方法将变成 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-246">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-247">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-247">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method.</span></span>  
  
 <span data-ttu-id="8cd88-248">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-248">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-249">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-249">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-250"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-250">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-251"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-251">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-252"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-252">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-253">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-253">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-254">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-254">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-255">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-255">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-256"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-256">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Queue`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Queue(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Queue&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Queue&lt;'T&gt;.Enumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Queue&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-257">返回循环访问 <see cref="T:System.Collections.Generic.Queue`1" /> 的枚举数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-257">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cd88-258"><see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 的一个 <see cref="T:System.Collections.Generic.Queue`1" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-258">An <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-259">C `foreach` + + 中的 c # 语言 (在 `for each` `For Each` Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="8cd88-259">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8cd88-260">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-260">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8cd88-261">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-261">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8cd88-262">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="8cd88-262">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8cd88-263">在此位置上，未定义 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="8cd88-263">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8cd88-264">因此，在读取 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-264">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-265">在调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-265"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="8cd88-266"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-266"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8cd88-267">如果 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-267">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8cd88-268">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-268">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8cd88-269">如果最后一次调用 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="8cd88-269">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8cd88-270">无法再次将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="8cd88-270">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="8cd88-271">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="8cd88-271">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8cd88-272">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-272">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="8cd88-273">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8cd88-273">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8cd88-274">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-274">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8cd88-275">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-275">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8cd88-276">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-276">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8cd88-277">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-277">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-278">下面的代码示例演示了 <xref:System.Collections.Generic.Queue%601> 泛型类是可枚举的。</span><span class="sxs-lookup"><span data-stu-id="8cd88-278">The following code example demonstrates that the <xref:System.Collections.Generic.Queue%601> generic class is enumerable.</span></span> <span data-ttu-id="8cd88-279">在 `foreach` `For Each` c + +) 的 Visual Basic 中 (的语句 `for each` 用于枚举队列。</span><span class="sxs-lookup"><span data-stu-id="8cd88-279">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="8cd88-280">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-280">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-281">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-281">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-282"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-282">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-283"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-283">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-284"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-284">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-285">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-285">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-286">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-286">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-287">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-287">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-288"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-288">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Queue`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-289">返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象但不将其移除。</span><span class="sxs-lookup"><span data-stu-id="8cd88-289">Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="8cd88-290">位于 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-290">The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-291">此方法类似于 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 方法，但 <xref:System.Collections.Generic.Queue%601.Peek%2A> 不修改 <xref:System.Collections.Generic.Queue%601>。</span><span class="sxs-lookup"><span data-stu-id="8cd88-291">This method is similar to the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="8cd88-292">如果类型 `T` 为引用类型，则 `null` 可将添加到 <xref:System.Collections.Generic.Queue%601> 作为值。</span><span class="sxs-lookup"><span data-stu-id="8cd88-292">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="8cd88-293">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-293">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-294">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.Peek%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-294">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="8cd88-295">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-295">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-296">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-296">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-297"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-297">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-298"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-298">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-299"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-299">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-300">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-300">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-301">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-301">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-302">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-302">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-303"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-303">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8cd88-304"><see cref="T:System.Collections.Generic.Queue`1" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-304">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="queue.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-305">返回循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-305">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="8cd88-306">可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-306">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-307">C `foreach` + + 中的 c # 语言 (在 `for each` `For Each` Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="8cd88-307">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8cd88-308">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-308">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8cd88-309">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-309">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8cd88-310">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="8cd88-310">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8cd88-311">在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="8cd88-311">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="8cd88-312">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-312">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-313">在调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 之前，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-313"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="8cd88-314"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-314"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8cd88-315">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-315">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8cd88-316">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-316">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8cd88-317">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="8cd88-317">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="8cd88-318">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="8cd88-318">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="8cd88-319">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="8cd88-319">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8cd88-320">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-320">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="8cd88-321">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8cd88-321">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8cd88-322">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-322">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8cd88-323">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-323">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8cd88-324">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-324">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8cd88-325">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-325">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="queue.System.Collections.ICollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8cd88-326">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="8cd88-326">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="8cd88-327"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8cd88-327">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="8cd88-328"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="8cd88-328">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8cd88-329">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="8cd88-329">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8cd88-330">如果源的类型 <xref:System.Collections.ICollection> 不能自动强制转换为目标的类型 `array` ，则引发的非泛型实现 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> <xref:System.InvalidCastException> ，而泛型实现将引发 <xref:System.ArgumentException> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-330">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="8cd88-331">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-331">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8cd88-332"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-332"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8cd88-333"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="8cd88-333"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8cd88-334"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="8cd88-334"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="8cd88-335">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8cd88-335">-or-</span></span> 
 <span data-ttu-id="8cd88-336"><paramref name="array" /> 没有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8cd88-336"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="8cd88-337">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8cd88-337">-or-</span></span> 
<span data-ttu-id="8cd88-338">源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="8cd88-338">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="8cd88-339">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8cd88-339">-or-</span></span> 
<span data-ttu-id="8cd88-340">无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="8cd88-340">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd88-341">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="8cd88-341">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="8cd88-342">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-342"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="8cd88-343">在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-343">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-344">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-344">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8cd88-345">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8cd88-345">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8cd88-346">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-346">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8cd88-347">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-347">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8cd88-348"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，该对象可用于同步对 <xref:System.Collections.ICollection> 的访问。</span><span class="sxs-lookup"><span data-stu-id="8cd88-348"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="8cd88-349">仅当所有线程在访问集合之前锁定此对象时，同步才有效。</span><span class="sxs-lookup"><span data-stu-id="8cd88-349">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="8cd88-350">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8cd88-350">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8cd88-351">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-351">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="8cd88-352">用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-352">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="8cd88-353">在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回当前实例。</span><span class="sxs-lookup"><span data-stu-id="8cd88-353">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-354">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-354">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8cd88-355">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8cd88-355">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8cd88-356">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-356">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8cd88-357">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-357">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8cd88-358"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，该对象可用于同步对 <xref:System.Collections.ICollection> 的访问。</span><span class="sxs-lookup"><span data-stu-id="8cd88-358"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="8cd88-359">仅当所有线程在访问集合之前锁定此对象时，同步才有效。</span><span class="sxs-lookup"><span data-stu-id="8cd88-359">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="8cd88-360">下面的代码演示 <xref:System.Collections.ICollection.SyncRoot%2A> c #、c + + 和 Visual Basic 的属性的用法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-360">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="8cd88-361">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="8cd88-361">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="queue.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-362">返回循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-362">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="8cd88-363">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-363">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-364">C `foreach` + + 中的 c # 语言 (在 `for each` `For Each` Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="8cd88-364">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8cd88-365">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-365">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8cd88-366">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-366">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8cd88-367">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="8cd88-367">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8cd88-368"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="8cd88-368"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="8cd88-369">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="8cd88-369">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8cd88-370">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-370">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-371">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-371"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="8cd88-372"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-372"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8cd88-373">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-373">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8cd88-374">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-374">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8cd88-375">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.IEnumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="8cd88-375">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8cd88-376">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="8cd88-376">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-377">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="8cd88-377">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8cd88-378">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-378">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> 
  
 <span data-ttu-id="8cd88-379">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="8cd88-379">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="8cd88-380">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="8cd88-380">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="8cd88-381">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-381">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="8cd88-382">中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不同步。</span><span class="sxs-lookup"><span data-stu-id="8cd88-382">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="8cd88-383">此方法是 O (1) 操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-383">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-384">将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="8cd88-384">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to a new array.</span></span></summary>
        <returns><span data-ttu-id="8cd88-385">包含从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的新数组。</span><span class="sxs-lookup"><span data-stu-id="8cd88-385">A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-386"><xref:System.Collections.Generic.Queue%601>未修改。</span><span class="sxs-lookup"><span data-stu-id="8cd88-386">The <xref:System.Collections.Generic.Queue%601> is not modified.</span></span> <span data-ttu-id="8cd88-387">新数组中元素的顺序与从开始到其结尾的元素的顺序相同 <xref:System.Collections.Generic.Queue%601> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-387">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Generic.Queue%601> to its end.</span></span>  
  
 <span data-ttu-id="8cd88-388">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-388">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8cd88-389">下面的代码示例演示了泛型类的若干方法 <xref:System.Collections.Generic.Queue%601> ，包括 <xref:System.Collections.Generic.Queue%601.ToArray%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8cd88-389">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="8cd88-390">此代码示例创建具有默认容量的字符串队列，并使用 <xref:System.Collections.Generic.Queue%601.Enqueue%2A> 方法将五个字符串进行排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-390">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="8cd88-391">枚举队列的元素，而不会更改队列的状态。</span><span class="sxs-lookup"><span data-stu-id="8cd88-391">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="8cd88-392"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>方法用于取消对第一个字符串的排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-392">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="8cd88-393"><xref:System.Collections.Generic.Queue%601.Peek%2A>方法用于查看队列中的下一项，然后 <xref:System.Collections.Generic.Queue%601.Dequeue%2A> 使用方法将其取消排队。</span><span class="sxs-lookup"><span data-stu-id="8cd88-393">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="8cd88-394"><xref:System.Collections.Generic.Queue%601.ToArray%2A>方法用于创建数组，并将队列元素复制到该数组，然后将数组传递给 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 采用的构造函数 <xref:System.Collections.Generic.IEnumerable%601> ，创建队列的副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-394">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="8cd88-395">将显示副本的元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-395">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="8cd88-396">创建队列大小两倍的数组，并 <xref:System.Collections.Generic.Queue%601.CopyTo%2A> 使用方法从数组中间开始复制数组元素。</span><span class="sxs-lookup"><span data-stu-id="8cd88-396">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="8cd88-397">在 <xref:System.Collections.Generic.Queue%601.%23ctor%2A> 开始时，将再次使用构造函数来创建包含三个 null 元素的队列的第二个副本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-397">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="8cd88-398"><xref:System.Collections.Generic.Queue%601.Contains%2A>方法用于显示字符串 "四" 位于队列的第一个副本中，在此之后， <xref:System.Collections.Generic.Queue%601.Clear%2A> 方法会清除副本， <xref:System.Collections.Generic.Queue%601.Count%2A> 属性显示该队列为空。</span><span class="sxs-lookup"><span data-stu-id="8cd88-398">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="queue.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cd88-399">如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Queue`1" /> 中的实际元素数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-399">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8cd88-400">如果没有新元素添加到集合中，则可以使用此方法最大程度地减少集合的内存开销。</span><span class="sxs-lookup"><span data-stu-id="8cd88-400">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="8cd88-401">但重新分配和复制较大的成本 <xref:System.Collections.Generic.Queue%601> 可能很大，因此， <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 如果列表的容量超过90%，此方法不会执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="8cd88-401">The cost of reallocating and copying a large <xref:System.Collections.Generic.Queue%601> can be considerable, however, so the <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="8cd88-402">这样可以避免因相对较小的收益而产生较大的重新分配成本。</span><span class="sxs-lookup"><span data-stu-id="8cd88-402">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="8cd88-403">此方法是 O (`n`) 操作，其中 `n` 是 <xref:System.Collections.Generic.Queue%601.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-403">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="8cd88-404">若要将重置 <xref:System.Collections.Generic.Queue%601> 为其初始状态，请 <xref:System.Collections.Generic.Queue%601.Clear%2A> 在调用方法之前调用方法 <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8cd88-404">To reset a <xref:System.Collections.Generic.Queue%601> to its initial state, call the <xref:System.Collections.Generic.Queue%601.Clear%2A> method before calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="8cd88-405">修整空会将的 <xref:System.Collections.Generic.Queue%601> 容量设置 <xref:System.Collections.Generic.Queue%601> 为默认容量。</span><span class="sxs-lookup"><span data-stu-id="8cd88-405">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue : 'T -&gt; bool" Usage="queue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="8cd88-406">已删除的对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-406">The removed object.</span></span></param>
        <summary><span data-ttu-id="8cd88-407">删除位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开头的对象，并将它复制到 <paramref name="result" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-407">Removes the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />, and copies it to the <paramref name="result" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="8cd88-408">如果对象成功删除，则为 <see langword="true" />；如果 <see cref="T:System.Collections.Generic.Queue`1" /> 为空，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-408"><see langword="true" /> if the object is successfully removed; <see langword="false" /> if the <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek : 'T -&gt; bool" Usage="queue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="8cd88-409">如果存在，则为 <see cref="T:System.Collections.Generic.Queue`1" /> 开头的对象；否则为 <typeparamref name="T" /> 的默认值。</span><span class="sxs-lookup"><span data-stu-id="8cd88-409">If present, the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, the default value of <typeparamref name="T" />.</span></span></param>
        <summary><span data-ttu-id="8cd88-410">返回一个值，该值指示 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头是否有对象；如果有，则将其复制到 <paramref name="result" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="8cd88-410">Returns a value that indicates whether there is an object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />, and if one is present, copies it to the <paramref name="result" /> parameter.</span></span> <span data-ttu-id="8cd88-411">不从 <see cref="T:System.Collections.Generic.Queue`1" /> 中删除对象。</span><span class="sxs-lookup"><span data-stu-id="8cd88-411">The object is not removed from the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns><span data-ttu-id="8cd88-412">如果 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头有对象，则为 <see langword="true" />；如果 <see cref="T:System.Collections.Generic.Queue`1" /> 为空，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8cd88-412"><see langword="true" /> if there is an object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />; <see langword="false" /> if the <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
