<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7dcd927287bb52590e38801de58415361fea9131" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91907613" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;T&gt; : System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;T&gt; implements class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of T)&#xA;Implements IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">要枚举的对象的类型。</typeparam>
    <summary>公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> 命名空间中的集合的基接口 <xref:System.Collections.Generic> <xref:System.Collections.Generic.List%601> ，如、 <xref:System.Collections.Generic.Dictionary%602> 、和 <xref:System.Collections.Generic.Stack%601> 其他泛型集合 <xref:System.Collections.ObjectModel.ObservableCollection%601> <xref:System.Collections.Concurrent.ConcurrentStack%601> （如和）。 <xref:System.Collections.Generic.IEnumerable%601>可以使用语句来枚举实现的集合 `foreach` 。  
  
 有关此接口的非泛型版本，请参阅 <xref:System.Collections.IEnumerable?displayProperty=nameWithType> 。  
  
 <xref:System.Collections.Generic.IEnumerable%601> 包含实现此接口时必须实现的单个方法; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>，它返回 <xref:System.Collections.Generic.IEnumerator%601> 对象。 返回的 <xref:System.Collections.Generic.IEnumerator%601> 功能通过公开属性来循环访问集合 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 。  
  
   
  
## Examples  
 下面的示例演示如何实现 <xref:System.Collections.Generic.IEnumerable%601> 接口以及如何使用该实现创建 LINQ 查询。 实现时 <xref:System.Collections.Generic.IEnumerable%601> ，您还必须实现 <xref:System.Collections.Generic.IEnumerator%601> 或（仅适用于 c #），才能使用 [yield](/dotnet/csharp/language-reference/keywords/yield) 关键字。 <xref:System.Collections.Generic.IEnumerator%601>还需要 <xref:System.IDisposable> 实现实现，这将在本示例中看到。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 有关演示如何实现接口的另一个 c # 示例 <xref:System.Collections.Generic.IEnumerable%601> ，请参阅 [泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 此示例使用 `yield` 关键字，而不是实现 <xref:System.Collections.Generic.IEnumerator%601> 。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>若要保持与迭代非泛型集合的方法保持兼容，请 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现 <see cref="T:System.Collections.IEnumerable" /> 。 这允许将泛型集合传递到需要对象的方法 <see cref="T:System.Collections.IEnumerable" /> 。</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t">演练：在 Visual Basic 中实现 IEnumerable(Of T)</related>
    <related type="Article" href="/dotnet/csharp/programming-guide/concepts/iterators">迭代器 (C#)</related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/concepts/iterators">迭代器 (Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">泛型示例</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个循环访问集合的枚举器。</summary>
        <returns>用于循环访问集合的枚举数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的 <xref:System.Collections.Generic.IEnumerator%601> 功能通过公开属性来循环访问集合 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 。您可以使用枚举器读取集合中的数据，但不能修改该集合。  
  
 最初，枚举数定位在集合中第一个元素的前面。 在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。 因此，在读取的值之前，必须调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 方法，以将枚举器前进到集合的第一个元素 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 返回相同的对象，直到 <xref:System.Collections.IEnumerator.MoveNext%2A> 再次调用以 <xref:System.Collections.IEnumerator.MoveNext%2A> 将设置为 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 下一个元素。  
  
 如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。 当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。 如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 则未定义。 无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。  

 如果对集合所做的更改（如添加、修改或删除元素），则枚举器的行为是不确定的。  
  
 枚举器没有对集合的独占访问权限，因此只要集合保持不变，枚举数就会保持有效。 如果对集合进行了更改（如添加、修改或删除元素），则枚举器会失效，你可能会收到意外的结果。 此外，枚举集合不是线程安全的过程。 若要确保线程安全，应在枚举器期间锁定集合，或在集合上实现同步。  
  
 命名空间中集合的默认实现 <xref:System.Collections.Generic?displayProperty=nameWithType> 不会同步。  
  
   
  
## Examples  
 下面的示例演示如何实现 <xref:System.Collections.Generic.IEnumerable%601> 接口，并使用该实现创建 LINQ 查询。 实现时 <xref:System.Collections.Generic.IEnumerable%601> ，您还必须实现 <xref:System.Collections.Generic.IEnumerator%601> 或（仅适用于 c #），才能使用 [yield](/dotnet/csharp/language-reference/keywords/yield) 关键字。 <xref:System.Collections.Generic.IEnumerator%601>还需要 <xref:System.IDisposable> 实现实现，这将在本示例中看到。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 有关演示如何实现接口的另一个 c # 示例 <xref:System.Collections.Generic.IEnumerable%601> ，请参阅 [泛型示例](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)。 此示例使用 `yield` 关键字而不是实现 <xref:System.Collections.Generic.IEnumerator%601> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/control-flow/walkthrough-implementing-ienumerable-of-t">演练：在 Visual Basic 中实现 IEnumerable(Of T)</related>
        <related type="Article" href="/dotnet/csharp/programming-guide/concepts/iterators">迭代器 (C#)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/concepts/iterators">迭代器 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
