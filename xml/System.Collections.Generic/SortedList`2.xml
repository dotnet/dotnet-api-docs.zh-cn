<Type Name="SortedList&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.SortedList&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9a05877ac72d0bbf664426643de082fcd5d49057" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83940610" /></Metadata><TypeSignature Language="C#" Value="public class SortedList&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;, System.Collections.IDictionary" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SortedList`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.SortedList`2" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IDictionary, IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public ref class SortedList : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IDictionary&lt;TKey, TValue&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyDictionary&lt;TKey, TValue&gt;, System::Collections::IDictionary" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type SortedList&lt;'Key, 'Value&gt; = class&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface IDictionary&lt;'Key, 'Value&gt;&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IReadOnlyDictionary&lt;'Key, 'Value&gt;&#xA;    interface ICollection&#xA;    interface IDictionary" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class SortedList&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.IDictionary" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IDictionary, IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue))" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public ref class SortedList : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IDictionary&lt;TKey, TValue&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::IDictionary" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type SortedList&lt;'Key, 'Value&gt; = class&#xA;    interface IDictionary&lt;'Key, 'Value&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type SortedList&lt;'Key, 'Value&gt; = class&#xA;    interface IDictionary&lt;'Key, 'Value&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IReadOnlyDictionary&lt;'Key, 'Value&gt;&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type SortedList&lt;'Key, 'Value&gt; = class&#xA;    interface IDictionary&lt;'Key, 'Value&gt;&#xA;    interface IDictionary&#xA;    interface IReadOnlyDictionary&lt;'Key, 'Value&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_DictionaryDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="ae507-101">集合中的键的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-101">The type of keys in the collection.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="ae507-102">集合中值的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-102">The type of values in the collection.</span></span></typeparam>
    <summary><span data-ttu-id="ae507-103">表示基于相关的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现按键进行排序的键/值对的集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-103">Represents a collection of key/value pairs that are sorted by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1" /> implementation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-104"><xref:System.Collections.Generic.SortedList%602> 泛型类是具有 O （log `n`）检索的键/值对的数组，其中 n 是字典中的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-104">The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary.</span></span> <span data-ttu-id="ae507-105">在这种情况下，它类似于 <xref:System.Collections.Generic.SortedDictionary%602> 的泛型类。</span><span class="sxs-lookup"><span data-stu-id="ae507-105">In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class.</span></span> <span data-ttu-id="ae507-106">这两个类具有相似的对象模型，并且都具有 O （log `n`）检索。</span><span class="sxs-lookup"><span data-stu-id="ae507-106">The two classes have similar object models, and both have O(log `n`) retrieval.</span></span> <span data-ttu-id="ae507-107">这两个类的不同之处在于内存使用和插入和删除的速度：</span><span class="sxs-lookup"><span data-stu-id="ae507-107">Where the two classes differ is in memory use and speed of insertion and removal:</span></span>  
  
-   <span data-ttu-id="ae507-108"><xref:System.Collections.Generic.SortedList%602> 比 <xref:System.Collections.Generic.SortedDictionary%602>使用的内存更少。</span><span class="sxs-lookup"><span data-stu-id="ae507-108"><xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>.</span></span>  
  
-   <span data-ttu-id="ae507-109">对于未排序的数据，O （log `n`），<xref:System.Collections.Generic.SortedDictionary%602> 具有更快的插入和删除操作，而不是 <xref:System.Collections.Generic.SortedList%602>的 O （`n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-109"><xref:System.Collections.Generic.SortedDictionary%602> has faster insertion and removal operations for unsorted data, O(log `n`) as opposed to O(`n`) for <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
-   <span data-ttu-id="ae507-110">如果列表是从已排序数据一次填充的，则 <xref:System.Collections.Generic.SortedList%602> 比 <xref:System.Collections.Generic.SortedDictionary%602>快。</span><span class="sxs-lookup"><span data-stu-id="ae507-110">If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>.</span></span>  
  
 <span data-ttu-id="ae507-111"><xref:System.Collections.Generic.SortedDictionary%602> 和 <xref:System.Collections.Generic.SortedList%602> 类之间的另一个区别在于，<xref:System.Collections.Generic.SortedList%602> 支持通过 <xref:System.Collections.Generic.SortedList%602.Keys%2A> 和 <xref:System.Collections.Generic.SortedList%602.Values%2A> 属性返回的集合高效索引检索键和值。</span><span class="sxs-lookup"><span data-stu-id="ae507-111">Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties.</span></span> <span data-ttu-id="ae507-112">访问属性时无需重新生成列表，因为这些列表只是键和值的内部数组的包装器。</span><span class="sxs-lookup"><span data-stu-id="ae507-112">It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values.</span></span> <span data-ttu-id="ae507-113">下面的代码演示如何使用 <xref:System.Collections.Generic.SortedList%602.Values%2A> 属性从字符串的排序列表中检索值的索引：</span><span class="sxs-lookup"><span data-stu-id="ae507-113">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="ae507-114"><xref:System.Collections.Generic.SortedList%602> 实现为键/值对的数组，按键进行排序。</span><span class="sxs-lookup"><span data-stu-id="ae507-114"><xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.</span></span>  <span data-ttu-id="ae507-115">每个元素都可以作为 <xref:System.Collections.Generic.KeyValuePair%602> 对象进行检索。</span><span class="sxs-lookup"><span data-stu-id="ae507-115">Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="ae507-116">密钥对象必须是不可变的，只要它们用作 <xref:System.Collections.Generic.SortedList%602>中的密钥。</span><span class="sxs-lookup"><span data-stu-id="ae507-116">Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-117"><xref:System.Collections.Generic.SortedList%602> 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="ae507-117">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique.</span></span> <span data-ttu-id="ae507-118">不能 `null`键，但如果列表的值的类型 `TValue`，则值可以为引用类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-118">A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="ae507-119"><xref:System.Collections.Generic.SortedList%602> 需要一个要进行排序和执行比较的比较器实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-119"><xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons.</span></span>  <span data-ttu-id="ae507-120">默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查键类型是否 `TKey` 实现 <xref:System.IComparable%601?displayProperty=nameWithType> 并使用该实现（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="ae507-120">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="ae507-121">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 将检查密钥类型是否 `TKey` 实现 <xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-121">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="ae507-122">如果键类型 `TKey` 未实现任何一个接口，可以在接受 `comparer` 参数的构造函数重载中指定一个 <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-122">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="ae507-123"><xref:System.Collections.Generic.SortedList%602> 的容量是 <xref:System.Collections.Generic.SortedList%602> 可以容纳的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-123">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold.</span></span> <span data-ttu-id="ae507-124">将元素添加到 <xref:System.Collections.Generic.SortedList%602>时，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-124">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="ae507-125">可以通过调用 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 或显式设置 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 属性来减少容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-125">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="ae507-126">减少容量会重新分配内存，并复制 <xref:System.Collections.Generic.SortedList%602>中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-126">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-127">**仅 .NET Framework：** 对于非常大的 <xref:System.Collections.Generic.SortedList%602> 对象，可以通过将[`<gcAllowVeryLargeObjects>`](/dotnet/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element)配置元素的 `enabled` 属性设置为运行时环境中的 `true`，来将64位系统上的最大容量增加到2000000000个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-127">**.NET Framework only:** For very large <xref:System.Collections.Generic.SortedList%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](/dotnet/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="ae507-128">C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）返回集合中元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-128">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="ae507-129">由于 <xref:System.Collections.Generic.SortedList%602> 的元素是键/值对，因此元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-129">Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="ae507-130">而是 <xref:System.Collections.Generic.KeyValuePair%602>元素类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-130">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="ae507-131">例如：</span><span class="sxs-lookup"><span data-stu-id="ae507-131">For example:</span></span>  
  
 [!code-cpp[Generic.SortedList#12](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)]
 [!code-csharp[Generic.SortedList#12](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)]
 [!code-vb[Generic.SortedList#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)]  
  
 <span data-ttu-id="ae507-132">`foreach` 语句是枚举器周围的包装器，它仅允许从集合读取，而不允许写入。</span><span class="sxs-lookup"><span data-stu-id="ae507-132">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-133">下面的代码示例使用字符串键创建一个空的字符串 <xref:System.Collections.Generic.SortedList%602>，并使用 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-133">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="ae507-134">该示例演示了在尝试添加重复键时 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法引发了 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-134">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="ae507-135">该示例使用 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性（中C#的索引器）来检索值，演示在请求的键不存在时引发 <xref:System.Collections.Generic.KeyNotFoundException>，并显示与键关联的值可以替换。</span><span class="sxs-lookup"><span data-stu-id="ae507-135">The example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="ae507-136">该示例演示如何使用<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>方法作为更高效的方法来检索值，如果程序必须经常尝试在已排序的列表中，不并显示如何使用<xref:System.Collections.Generic.SortedList%602.ContainsKey%2A>方法来测试某个键是否存在之前调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ae507-136">The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="ae507-137">该示例演示如何枚举已排序列表中的键和值，以及如何使用 <xref:System.Collections.Generic.SortedList%602.Keys%2A> 属性和 <xref:System.Collections.Generic.SortedList%602.Values%2A> 属性单独枚举键和值。</span><span class="sxs-lookup"><span data-stu-id="ae507-137">The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property and the <xref:System.Collections.Generic.SortedList%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="ae507-138">最后，该示例演示 <xref:System.Collections.Generic.SortedList%602.Remove%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ae507-138">Finally, the example demonstrates the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.</span></span>  
  
 [!code-cpp[Generic.SortedList#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#1)]
 [!code-csharp[Generic.SortedList#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#1)]
 [!code-vb[Generic.SortedList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="ae507-139">此类型的公共静态（<see langword="Shared" /> Visual Basic）成员是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="ae507-139">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="ae507-140">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="ae507-140">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="ae507-141">只要没有修改集合，<see cref="T:System.Collections.Generic.SortedList`2" /> 就可以同时支持多个读取器。</span><span class="sxs-lookup"><span data-stu-id="ae507-141">A <see cref="T:System.Collections.Generic.SortedList`2" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span>  <span data-ttu-id="ae507-142">尽管如此，枚举集合本身并不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="ae507-142">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="ae507-143">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-143">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="ae507-144">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="ae507-144">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span></threadsafe>
    <altmember cref="T:System.Collections.Generic.IDictionary`2" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="T:System.Collections.Generic.SortedDictionary`2" />
    <altmember cref="T:System.Collections.Generic.KeyValuePair`2" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ae507-145">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ae507-145">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-146">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有默认的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-146">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-147"><xref:System.Collections.Generic.SortedList%602> 中的每个键都必须根据默认比较器唯一。</span><span class="sxs-lookup"><span data-stu-id="ae507-147">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="ae507-148">此构造函数使用 <xref:System.Collections.Generic.SortedList%602>初始容量的默认值。</span><span class="sxs-lookup"><span data-stu-id="ae507-148">This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-149">若要设置初始容量，请使用 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="ae507-149">To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="ae507-150">如果可以估计集合的最终大小，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.SortedList%602>时执行多个大小调整操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-150">If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-151">此构造函数对 `TKey`使用默认比较器。</span><span class="sxs-lookup"><span data-stu-id="ae507-151">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="ae507-152">若要指定比较器，请使用 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="ae507-152">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="ae507-153">默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查键类型是否 `TKey` 实现 <xref:System.IComparable%601?displayProperty=nameWithType> 并使用该实现（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="ae507-153">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="ae507-154">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 将检查密钥类型是否 `TKey` 实现 <xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-154">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="ae507-155">如果键类型 `TKey` 未实现任何一个接口，可以在接受 `comparer` 参数的构造函数重载中指定一个 <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-155">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="ae507-156">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="ae507-156">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-157">下面的代码示例使用字符串键创建一个空的字符串 <xref:System.Collections.Generic.SortedList%602>，并使用 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-157">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="ae507-158">该示例演示了在尝试添加重复键时 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法引发了 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-158">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="ae507-159">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-159">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]
 [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]
 [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="ae507-160">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-160">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="ae507-161">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-161">-or-</span></span> 
 <span data-ttu-id="ae507-162">为 <see langword="null" />，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-162"><see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span></span></param>
        <summary><span data-ttu-id="ae507-163">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有默认的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-163">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-164">根据指定的比较器，<xref:System.Collections.Generic.SortedList%602> 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="ae507-164">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="ae507-165">此构造函数使用 <xref:System.Collections.Generic.SortedList%602>初始容量的默认值。</span><span class="sxs-lookup"><span data-stu-id="ae507-165">This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-166">若要设置初始容量，请使用 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="ae507-166">To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="ae507-167">如果可以估计集合的最终大小，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.SortedList%602>时执行多个大小调整操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-167">If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-168">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="ae507-168">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-169">下面的代码示例创建一个排序列表，其中包含当前区域性的不区分大小写的比较器。</span><span class="sxs-lookup"><span data-stu-id="ae507-169">The following code example creates a sorted list with a case-insensitive comparer for the current culture.</span></span> <span data-ttu-id="ae507-170">该示例将添加四个元素，其中一些包含小写键，一些具有大写键。</span><span class="sxs-lookup"><span data-stu-id="ae507-170">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="ae507-171">然后，该示例尝试添加一个元素，该元素具有仅大小写不同于现有密钥的键，并捕获产生的异常，并显示一条错误消息。</span><span class="sxs-lookup"><span data-stu-id="ae507-171">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="ae507-172">最后，此示例以不区分大小写的排序顺序显示元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-172">Finally, the example displays the elements in case-insensitive sort order.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; dictionary" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary"><span data-ttu-id="ae507-173"><see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-173">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></param>
        <summary><span data-ttu-id="ae507-174">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-174">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient capacity to accommodate the number of elements copied, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-175"><xref:System.Collections.Generic.SortedList%602> 中的每个键都必须根据默认比较器唯一;同样，源 `dictionary` 中的每个键也必须根据默认比较器唯一。</span><span class="sxs-lookup"><span data-stu-id="ae507-175">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer; likewise, every key in the source `dictionary` must also be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="ae507-176">新 <xref:System.Collections.Generic.SortedList%602> 的容量设置为 `dictionary`中的元素数，因此在填充列表时，不会发生调整大小。</span><span class="sxs-lookup"><span data-stu-id="ae507-176">The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.</span></span>  
  
 <span data-ttu-id="ae507-177">此构造函数对 `TKey`使用默认比较器。</span><span class="sxs-lookup"><span data-stu-id="ae507-177">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="ae507-178">若要指定比较器，请使用 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="ae507-178">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="ae507-179">默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查键类型是否 `TKey` 实现 <xref:System.IComparable%601?displayProperty=nameWithType> 并使用该实现（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="ae507-179">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="ae507-180">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 将检查密钥类型是否 `TKey` 实现 <xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-180">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="ae507-181">如果键类型 `TKey` 未实现任何一个接口，可以在接受 `comparer` 参数的构造函数重载中指定一个 <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-181">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="ae507-182">如果排序 `dictionary` 中的数据，则此构造函数是一个 O （`n`）运算，其中 `n` 是 `dictionary`中的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-182">If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span> <span data-ttu-id="ae507-183">否则，它是 O （`n`\*`n`）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-183">Otherwise it is an O(`n`\*`n`) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-184">下面的代码示例演示如何使用 <xref:System.Collections.Generic.SortedList%602> 通过将 <xref:System.Collections.Generic.Dictionary%602> 传递到 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29> 构造函数来创建 <xref:System.Collections.Generic.Dictionary%602>中信息的已排序副本。</span><span class="sxs-lookup"><span data-stu-id="ae507-184">The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a sorted copy of the information in a <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29> constructor.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IDic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IDic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-185"><paramref name="dictionary" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-185"><paramref name="dictionary" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-186"><paramref name="dictionary" /> 包含一个或多个重复键。</span><span class="sxs-lookup"><span data-stu-id="ae507-186"><paramref name="dictionary" /> contains one or more duplicate keys.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : int -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="ae507-187"><see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-187">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span></span></param>
        <summary><span data-ttu-id="ae507-188">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有指定的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-188">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-189"><xref:System.Collections.Generic.SortedList%602> 中的每个键都必须根据默认比较器唯一。</span><span class="sxs-lookup"><span data-stu-id="ae507-189">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="ae507-190"><xref:System.Collections.Generic.SortedList%602> 的容量是在调整大小之前 <xref:System.Collections.Generic.SortedList%602> 可以容纳的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-190">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing.</span></span> <span data-ttu-id="ae507-191">将元素添加到 <xref:System.Collections.Generic.SortedList%602>时，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-191">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="ae507-192">如果集合的大小可为估算值，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.SortedList%602>时执行多个大小调整操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-192">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-193">可以通过调用 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 或显式设置 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 属性来减少容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-193">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="ae507-194">减少容量会重新分配内存，并复制 <xref:System.Collections.Generic.SortedList%602>中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-194">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-195">此构造函数对 `TKey`使用默认比较器。</span><span class="sxs-lookup"><span data-stu-id="ae507-195">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="ae507-196">若要指定比较器，请使用 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="ae507-196">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="ae507-197">默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查键类型是否 `TKey` 实现 <xref:System.IComparable%601?displayProperty=nameWithType> 并使用该实现（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="ae507-197">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="ae507-198">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 将检查密钥类型是否 `TKey` 实现 <xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-198">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="ae507-199">如果键类型 `TKey` 未实现任何一个接口，可以在接受 `comparer` 参数的构造函数重载中指定一个 <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-199">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="ae507-200">此构造函数是一个 O （`n`）操作，在此操作中 `capacity``n`。</span><span class="sxs-lookup"><span data-stu-id="ae507-200">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-201">下面的代码示例创建一个初始容量为4的排序列表，并使用4个条目填充它。</span><span class="sxs-lookup"><span data-stu-id="ae507-201">The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_Int32#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_Int32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ae507-202"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ae507-202"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary, class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; (dictionary, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary"><span data-ttu-id="ae507-203"><see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-203">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="ae507-204">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-204">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="ae507-205">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-205">-or-</span></span> 
 <span data-ttu-id="ae507-206">为 <see langword="null" />，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-206"><see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span></span></param>
        <summary><span data-ttu-id="ae507-207">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-207">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient capacity to accommodate the number of elements copied, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-208">根据指定的比较器，<xref:System.Collections.Generic.SortedList%602> 中的每个键都必须是唯一的;同样，根据指定的比较器，源 `dictionary` 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="ae507-208">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="ae507-209">新 <xref:System.Collections.Generic.SortedList%602> 的容量设置为 `dictionary`中的元素数，因此在填充列表时，不会发生调整大小。</span><span class="sxs-lookup"><span data-stu-id="ae507-209">The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.</span></span>  
  
 <span data-ttu-id="ae507-210">如果排序 `dictionary` 中的数据，则此构造函数是一个 O （`n`）运算，其中 `n` 是 `dictionary`中的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-210">If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span> <span data-ttu-id="ae507-211">否则，它是 O （`n`\*`n`）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-211">Otherwise it is an O(`n`\*`n`) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-212">下面的代码示例演示如何使用 <xref:System.Collections.Generic.SortedList%602> 通过将 <xref:System.Collections.Generic.Dictionary%602> 传递到 <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> 构造函数来在不区分大小写的 <xref:System.Collections.Generic.Dictionary%602>中创建信息的不区分大小写的排序副本。</span><span class="sxs-lookup"><span data-stu-id="ae507-212">The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a case-insensitive sorted copy of the information in a case-insensitive <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="ae507-213">在此示例中，不区分大小写的比较器适用于当前区域性。</span><span class="sxs-lookup"><span data-stu-id="ae507-213">In this example, the case-insensitive comparers are for the current culture.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-214"><paramref name="dictionary" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-214"><paramref name="dictionary" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-215"><paramref name="dictionary" /> 包含一个或多个重复键。</span><span class="sxs-lookup"><span data-stu-id="ae507-215"><paramref name="dictionary" /> contains one or more duplicate keys.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int capacity, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int capacity, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : int * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; (capacity, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="ae507-216"><see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-216">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span></span></param>
        <param name="comparer"><span data-ttu-id="ae507-217">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-217">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span></span>  
  
<span data-ttu-id="ae507-218">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-218">-or-</span></span> 
 <span data-ttu-id="ae507-219">为 <see langword="null" />，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-219"><see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span></span></param>
        <summary><span data-ttu-id="ae507-220">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有指定的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-220">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-221">根据指定的比较器，<xref:System.Collections.Generic.SortedList%602> 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="ae507-221">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="ae507-222"><xref:System.Collections.Generic.SortedList%602> 的容量是在调整大小之前 <xref:System.Collections.Generic.SortedList%602> 可以容纳的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-222">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing.</span></span> <span data-ttu-id="ae507-223">将元素添加到 <xref:System.Collections.Generic.SortedList%602>时，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-223">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="ae507-224">如果集合的大小可为估算值，则指定初始容量就无需在将元素添加到 <xref:System.Collections.Generic.SortedList%602>时执行多个大小调整操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-224">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-225">可以通过调用 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 或显式设置 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 属性来减少容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-225">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="ae507-226">减少容量会重新分配内存，并复制 <xref:System.Collections.Generic.SortedList%602>中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-226">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-227">此构造函数是一个 O （`n`）操作，在此操作中 `capacity``n`。</span><span class="sxs-lookup"><span data-stu-id="ae507-227">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-228">下面的代码示例创建一个排序列表，其初始容量为5，并为当前区域性创建不区分大小写的比较器。</span><span class="sxs-lookup"><span data-stu-id="ae507-228">The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture.</span></span> <span data-ttu-id="ae507-229">该示例将添加四个元素，其中一些包含小写键，一些具有大写键。</span><span class="sxs-lookup"><span data-stu-id="ae507-229">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="ae507-230">然后，该示例尝试添加一个元素，该元素具有仅大小写不同于现有密钥的键，并捕获产生的异常，并显示一条错误消息。</span><span class="sxs-lookup"><span data-stu-id="ae507-230">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="ae507-231">最后，此示例以不区分大小写的排序顺序显示元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-231">Finally, the example displays the elements in case-insensitive sort order.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ae507-232"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ae507-232"><paramref name="capacity" /> is less than zero.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit&#xA;override this.Add : 'Key * 'Value -&gt; unit" Usage="sortedList.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-233">要添加的元素的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-233">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="ae507-234">要添加的元素的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-234">The value of the element to add.</span></span> <span data-ttu-id="ae507-235">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-235">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="ae507-236">将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。</span><span class="sxs-lookup"><span data-stu-id="ae507-236">Adds an element with the specified key and value into the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-237">不能 `null`键，但是如果已排序列表中的值的类型 `TValue`，则值可以为引用类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-237">A key cannot be `null`, but a value can be, if the type of values in the sorted list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="ae507-238">你还可以使用 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性来添加新元素，方法是设置 <xref:System.Collections.Generic.SortedList%602>中不存在的键的值;例如，`myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="ae507-238">You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="ae507-239">但是，如果 <xref:System.Collections.Generic.SortedList%602>中已经存在指定的键，则设置 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性将覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="ae507-239">However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="ae507-240">与此相反，<xref:System.Collections.Generic.SortedList%602.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-240">In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="ae507-241">如果 <xref:System.Collections.Generic.SortedList%602.Count%2A> 已等于 <xref:System.Collections.Generic.SortedList%602.Capacity%2A>，则会自动重新分配内部数组，并将现有元素复制到新数组，然后再添加新元素，从而增加了 <xref:System.Collections.Generic.SortedList%602> 的容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-241">If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="ae507-242">对于未排序的数据，此方法是一种 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-242">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-243">如果在列表的末尾添加新元素，则它是 O （log `n`）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-243">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="ae507-244">如果插入操作导致大小调整，则操作为 O （`n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-244">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-245">下面的代码示例使用字符串键创建一个空的字符串 <xref:System.Collections.Generic.SortedList%602>，并使用 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-245">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="ae507-246">该示例演示了在尝试添加重复键时 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法引发了 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-246">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="ae507-247">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-247">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]
 [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]
 [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-248"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-248"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-249"><see cref="T:System.Collections.Generic.SortedList`2" /> 中已存在具有相同键的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-249">An element with the same key already exists in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-250">获取或设置 <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-250">Gets or sets the number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span></span></summary>
        <value><span data-ttu-id="ae507-251"><see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-251">The number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-252"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 是 <xref:System.Collections.Generic.SortedList%602> 可存储的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-252"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store.</span></span> <span data-ttu-id="ae507-253"><xref:System.Collections.Generic.SortedList%602.Count%2A> 是实际处于 <xref:System.Collections.Generic.SortedList%602>中的元素的数目。</span><span class="sxs-lookup"><span data-stu-id="ae507-253"><xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-254"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 始终大于或等于 <xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-254"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-255">如果在添加元素时 <xref:System.Collections.Generic.SortedList%602.Count%2A> 超过 <xref:System.Collections.Generic.SortedList%602.Capacity%2A>，则会在复制旧元素并添加新元素之前自动重新分配内部数组，从而增加容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-255">If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="ae507-256">可以通过调用 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 或显式设置 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 属性来减少容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-256">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="ae507-257">如果显式设置了 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 的值，则还将重新分配内部数组以容纳指定的容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-257">When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="ae507-258">检索此属性的值的运算复杂度为 O （1）;设置属性是一个 O （`n`）运算，其中 `n` 是新容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-258">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ae507-259"><see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-259"><see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="ae507-260">系统上没有足够的可用内存。</span><span class="sxs-lookup"><span data-stu-id="ae507-260">There is not enough memory available on the system.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Count" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="sortedList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-261">从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中删除所有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-261">Removes all elements from the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-262"><xref:System.Collections.Generic.SortedList%602.Count%2A> 设置为零，还会释放对集合的元素的其他对象的引用。</span><span class="sxs-lookup"><span data-stu-id="ae507-262"><xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="ae507-263"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="ae507-263"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="ae507-264">若要重置 <xref:System.Collections.Generic.SortedList%602>的容量，请调用 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 或直接设置 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="ae507-264">To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly.</span></span> <span data-ttu-id="ae507-265">修整空 <xref:System.Collections.Generic.SortedList%602> 会将 <xref:System.Collections.Generic.SortedList%602> 的容量设置为默认容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-265">Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.</span></span>  
  
 <span data-ttu-id="ae507-266">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-266">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.TrimExcess" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IComparer&lt;'Key&gt;" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-267">获取该排序列表的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-267">Gets the <see cref="T:System.Collections.Generic.IComparer`1" /> for the sorted list.</span></span></summary>
        <value><span data-ttu-id="ae507-268">当前 <see cref="T:System.IComparable`1" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-268">The <see cref="T:System.IComparable`1" /> for the current <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-269">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-269">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool&#xA;override this.ContainsKey : 'Key -&gt; bool" Usage="sortedList.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-270">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-270">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></param>
        <summary><span data-ttu-id="ae507-271">确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定键。</span><span class="sxs-lookup"><span data-stu-id="ae507-271">Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific key.</span></span></summary>
        <returns><span data-ttu-id="ae507-272">如果 <see cref="T:System.Collections.Generic.SortedList`2" /> 包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-272"><see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-273">此方法是一个 O （log `n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-273">This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-274">下面的代码示例演示如何使用 <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> 方法来测试在调用 <xref:System.Collections.Generic.SortedList%602.Add%2A> 方法之前是否存在某个键。</span><span class="sxs-lookup"><span data-stu-id="ae507-274">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.</span></span> <span data-ttu-id="ae507-275">它还演示了如何使用 <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> 方法检索值，这是在程序频繁尝试排序列表中没有的键时检索值的有效方法。</span><span class="sxs-lookup"><span data-stu-id="ae507-275">It also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list.</span></span> <span data-ttu-id="ae507-276">最后，它通过使用 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性（中C#的索引器）来显示测试项是否存在的最不有效方法。</span><span class="sxs-lookup"><span data-stu-id="ae507-276">Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="ae507-277">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-277">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#6)]
 [!code-csharp[Generic.SortedList#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#6)]
 [!code-vb[Generic.SortedList#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#6)]  
[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-278"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-278"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public bool ContainsValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsValue (value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsValue(TValue value);" />
      <MemberSignature Language="F#" Value="member this.ContainsValue : 'Value -&gt; bool" Usage="sortedList.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ae507-279">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-279">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span> <span data-ttu-id="ae507-280">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-280">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="ae507-281">确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定值。</span><span class="sxs-lookup"><span data-stu-id="ae507-281">Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="ae507-282">如果 <see langword="true" /> 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-282"><see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-283">此方法使用 `TValue`值类型的默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 来确定相等性。</span><span class="sxs-lookup"><span data-stu-id="ae507-283">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for the value type `TValue`.</span></span>  <span data-ttu-id="ae507-284"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查值类型是否 `TValue` 实现 <xref:System.IComparable%601?displayProperty=nameWithType> 并使用该实现（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="ae507-284"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="ae507-285">否则，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 会检查值类型是否 `TValue` 实现 <xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-285">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="ae507-286">如果值类型 `TValue` 未实现任何一个接口，则此方法使用 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-286">If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ae507-287">此方法执行线性搜索;因此，平均执行时间与 <xref:System.Collections.Generic.SortedList%602.Count%2A>成正比。</span><span class="sxs-lookup"><span data-stu-id="ae507-287">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-288">也就是说，此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-288">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-289">获取包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。</span><span class="sxs-lookup"><span data-stu-id="ae507-289">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <value><span data-ttu-id="ae507-290">包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。</span><span class="sxs-lookup"><span data-stu-id="ae507-290">The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-291"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 是 <xref:System.Collections.Generic.SortedList%602> 可存储的元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-291"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store.</span></span> <span data-ttu-id="ae507-292"><xref:System.Collections.Generic.SortedList%602.Count%2A> 是实际处于 <xref:System.Collections.Generic.SortedList%602>中的元素的数目。</span><span class="sxs-lookup"><span data-stu-id="ae507-292"><xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-293"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 始终大于或等于 <xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-293"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-294">如果在添加元素时 <xref:System.Collections.Generic.SortedList%602.Count%2A> 超过 <xref:System.Collections.Generic.SortedList%602.Capacity%2A>，则会在复制旧元素并添加新元素之前自动重新分配内部数组，从而增加容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-294">If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="ae507-295">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-295">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;" Usage="sortedList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-296">返回循环访问 <see cref="T:System.Collections.Generic.SortedList`2" /> 的枚举器。</span><span class="sxs-lookup"><span data-stu-id="ae507-296">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <returns><span data-ttu-id="ae507-297"><see cref="T:System.Collections.Generic.IEnumerator`1" /> 的类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-297">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> for the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-298">C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="ae507-298">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="ae507-299">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="ae507-299">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="ae507-300">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-300">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="ae507-301">使用内部树按排序顺序维护字典。</span><span class="sxs-lookup"><span data-stu-id="ae507-301">The dictionary is maintained in a sorted order using an internal tree.</span></span> <span data-ttu-id="ae507-302">每个新元素都置于正确的排序位置，并且在每次删除元素时，都会调整树来维护排序顺序。</span><span class="sxs-lookup"><span data-stu-id="ae507-302">Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed.</span></span> <span data-ttu-id="ae507-303">在枚举时，将保留排序顺序。</span><span class="sxs-lookup"><span data-stu-id="ae507-303">While enumerating, the sort order is maintained.</span></span>  
  
 <span data-ttu-id="ae507-304">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="ae507-304">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="ae507-305">在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-305">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="ae507-306">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-306">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="ae507-307">在调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 之前，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-307"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="ae507-308"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-308"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="ae507-309">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-309">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="ae507-310">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-310">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`.</span></span> <span data-ttu-id="ae507-311">如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 未定义。</span><span class="sxs-lookup"><span data-stu-id="ae507-311">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="ae507-312">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="ae507-312">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="ae507-313">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="ae507-313">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="ae507-314">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-314">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="ae507-315">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="ae507-315">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="ae507-316">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-316">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="ae507-317">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="ae507-317">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="ae507-318">不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-318">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="ae507-319">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-319">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public int IndexOfKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfKey (key As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfKey(TKey key);" />
      <MemberSignature Language="F#" Value="member this.IndexOfKey : 'Key -&gt; int" Usage="sortedList.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-320">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-320">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></param>
        <summary><span data-ttu-id="ae507-321">在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定键并返回从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-321">Searches for the specified key and returns the zero-based index within the entire <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <returns><span data-ttu-id="ae507-322">如果找到，则为整个 <paramref name="key" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 的从零开始的索引；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="ae507-322">The zero-based index of <paramref name="key" /> within the entire <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-323">此方法执行二进制搜索;因此，此方法是 O （log `n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-323">This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-324"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-324"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public int IndexOfValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfValue (value As TValue) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfValue(TValue value);" />
      <MemberSignature Language="F#" Value="member this.IndexOfValue : 'Value -&gt; int" Usage="sortedList.IndexOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ae507-325">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-325">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span>  <span data-ttu-id="ae507-326">对于引用类型，该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-326">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="ae507-327">在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定的值，并返回第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-327">Searches for the specified value and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <returns><span data-ttu-id="ae507-328">如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 第一个匹配项的从零开始的索引；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="ae507-328">The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-329">此方法使用 `TValue`值类型的默认比较器 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 来确定相等性。</span><span class="sxs-lookup"><span data-stu-id="ae507-329">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for the value type `TValue`.</span></span>  <span data-ttu-id="ae507-330"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查值类型是否 `TValue` 实现 <xref:System.IComparable%601?displayProperty=nameWithType> 并使用该实现（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="ae507-330"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="ae507-331">否则，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 会检查值类型是否 `TValue` 实现 <xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-331">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="ae507-332">如果值类型 `TValue` 未实现任何一个接口，则此方法使用 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ae507-332">If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ae507-333">此方法执行线性搜索;因此，平均执行时间与 <xref:System.Collections.Generic.SortedList%602.Count%2A>成正比。</span><span class="sxs-lookup"><span data-stu-id="ae507-333">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-334">也就是说，此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-334">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-335">要获取或设置其值的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-335">The key whose value to get or set.</span></span></param>
        <summary><span data-ttu-id="ae507-336">获取或设置与指定的键关联的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-336">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="ae507-337">与指定键关联的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-337">The value associated with the specified key.</span></span> <span data-ttu-id="ae507-338">如果找不到指定的键，则 get 操作会引发一个 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个使用指定键的新元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-338">If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" /> and a set operation creates a new element using the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-339">通过此属性，可以使用以下语法来访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="ae507-339">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="ae507-340">不能 `null`键，但如果列表的值的类型 `TValue`，则值可以为引用类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-340">A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="ae507-341">如果在检索值时找不到该密钥，则会引发 <xref:System.Collections.Generic.KeyNotFoundException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-341">If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown.</span></span> <span data-ttu-id="ae507-342">如果在设置值时找不到该键，则添加键和值。</span><span class="sxs-lookup"><span data-stu-id="ae507-342">If the key is not found when a value is being set, the key and value are added.</span></span>  
  
 <span data-ttu-id="ae507-343">你还可以使用 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性来添加新元素，方法是设置 <xref:System.Collections.Generic.SortedList%602>中不存在的键的值;例如，`myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="ae507-343">You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="ae507-344">但是，如果 <xref:System.Collections.Generic.SortedList%602>中已经存在指定的键，则设置 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性将覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="ae507-344">However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="ae507-345">与此相反，<xref:System.Collections.Generic.SortedList%602.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-345">In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="ae507-346">C#语言使用[`this`](/dotnet/csharp/language-reference/keywords/this)关键字来定义索引器，而不是实现 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="ae507-346">The C# language uses the [`this`](/dotnet/csharp/language-reference/keywords/this) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.</span></span> <span data-ttu-id="ae507-347">Visual Basic 将 <xref:System.Collections.Generic.SortedList%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="ae507-347">Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="ae507-348">检索此属性的值是一个 O （log `n`）操作，其中 n 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-348">Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-349">如果键已在 <xref:System.Collections.Generic.SortedList%602>中，则设置属性是 O （log `n`）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-349">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-350">如果键不在列表中，则为未排序的数据设置属性是 O （`n`）运算，如果在列表的末尾添加新元素，则为 O （log `n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-350">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="ae507-351">如果插入操作导致大小调整，则操作为 O （`n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-351">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-352">下面的代码示例使用 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性（中C#的索引器）来检索值，演示在请求的项不存在时引发 <xref:System.Collections.Generic.KeyNotFoundException>，并显示与键关联的值可以替换。</span><span class="sxs-lookup"><span data-stu-id="ae507-352">The following code example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="ae507-353">该示例还演示了如何使用 <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> 方法作为一种更有效的方法来检索值（如果程序经常必须尝试排序列表中不是的键值）。</span><span class="sxs-lookup"><span data-stu-id="ae507-353">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.</span></span>  
  
 <span data-ttu-id="ae507-354">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-354">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#3)]
 [!code-csharp[Generic.SortedList#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#3)]
 [!code-vb[Generic.SortedList#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#3)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-355"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-355"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="ae507-356">已检索该属性且集合中不存在 <paramref name="key" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-356">The property is retrieved and <paramref name="key" /> does not exist in the collection.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IList(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;TKey&gt; ^ Keys { System::Collections::Generic::IList&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.IList&lt;'Key&gt;" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-357">获取一个按排序顺序包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键的集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-357">Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />, in sorted order.</span></span></summary>
        <value><span data-ttu-id="ae507-358">一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-358">A <see cref="T:System.Collections.Generic.IList`1" /> containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-359"><xref:System.Collections.Generic.IList%601> 中的键顺序与 <xref:System.Collections.Generic.SortedList%602>中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="ae507-359">The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-360">返回的 <xref:System.Collections.Generic.IList%601> 不是静态副本;相反，<xref:System.Collections.Generic.IList%601> 引用原始 <xref:System.Collections.Generic.SortedList%602>中的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-360">The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-361">因此，对 <xref:System.Collections.Generic.SortedList%602> 所做的更改将继续在 <xref:System.Collections.Generic.IList%601>中反映出来。</span><span class="sxs-lookup"><span data-stu-id="ae507-361">Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.</span></span>  
  
 <span data-ttu-id="ae507-362"><xref:System.Collections.Generic.SortedList%602.Keys%2A> 属性返回的集合提供了一种通过索引检索密钥的有效方法。</span><span class="sxs-lookup"><span data-stu-id="ae507-362">The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index.</span></span> <span data-ttu-id="ae507-363">访问属性时无需重新生成列表，因为列表只是用于内部键数组的包装器。</span><span class="sxs-lookup"><span data-stu-id="ae507-363">It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys.</span></span> <span data-ttu-id="ae507-364">下面的代码演示如何使用 <xref:System.Collections.Generic.SortedList%602.Keys%2A> 属性从具有字符串键的元素的排序列表中检索键的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-364">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="ae507-365">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-365">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-366">下面的代码示例演示如何使用 <xref:System.Collections.Generic.SortedList%602.Keys%2A> 属性枚举已排序列表中的键，以及如何枚举已排序列表中的键和值。</span><span class="sxs-lookup"><span data-stu-id="ae507-366">The following code example shows how to enumerate the keys in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property, and how to enumerate the keys and values in the sorted list.</span></span>  
  
 <span data-ttu-id="ae507-367">该示例还演示了如何使用 <xref:System.Collections.Generic.SortedList%602.Keys%2A> 属性来高效地检索键的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-367">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for efficient indexed retrieval of keys.</span></span>  
  
 <span data-ttu-id="ae507-368">此代码是可以编译和执行的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-368">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="ae507-369">请参阅 <xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="ae507-369">See <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 [!code-cpp[Generic.SortedList#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#9)]
 [!code-csharp[Generic.SortedList#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#9)]
 [!code-vb[Generic.SortedList#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#9)]  
[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]
[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]
[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool&#xA;override this.Remove : 'Key -&gt; bool" Usage="sortedList.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-370">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-370">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="ae507-371">从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除包含指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-371">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <returns><span data-ttu-id="ae507-372">如果已成功删除该元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-372"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="ae507-373">如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.SortedList`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-373">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-374">此方法执行二进制搜索;但是，元素将上移以填充打开的位置，因此，此方法是 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-374">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-375">下面的代码示例演示如何使用 <xref:System.Collections.Generic.SortedList%602.Remove%2A> 方法从排序列表中移除键/值对。</span><span class="sxs-lookup"><span data-stu-id="ae507-375">The following code example shows how to remove a key/value pair from the sorted list using the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="ae507-376">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-376">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#10)]
 [!code-csharp[Generic.SortedList#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#10)]
 [!code-vb[Generic.SortedList#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-377"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-377"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="sortedList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ae507-378">待删除元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-378">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="ae507-379">移除 <see cref="T:System.Collections.Generic.SortedList`2" /> 的指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-379">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-380">此方法执行二进制搜索;但是，元素将上移以填充打开的位置，因此，此方法是 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-380">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ae507-381"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ae507-381"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="ae507-382">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-382">-or-</span></span> 
 <span data-ttu-id="ae507-383"><paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.SortedList`2.Count" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-383"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Add;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt; -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt; -&gt; unit" Usage="sortedList.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add keyValuePair" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair"><span data-ttu-id="ae507-384">要添加到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-384">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></param>
        <summary><span data-ttu-id="ae507-385">向 <see cref="T:System.Collections.Generic.ICollection`1" /> 中添加键/值对。</span><span class="sxs-lookup"><span data-stu-id="ae507-385">Adds a key/value pair to the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Contains;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt; -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt; -&gt; bool" Usage="sortedList.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains keyValuePair" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair"><span data-ttu-id="ae507-386">要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中查找的 <see cref="T:System.Collections.Generic.ICollection`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-386">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></param>
        <summary><span data-ttu-id="ae507-387">确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-387">Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific element.</span></span></summary>
        <returns><span data-ttu-id="ae507-388">如果在 <see langword="true" /> 中找到 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-388"><see langword="true" /> if <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;[] * int -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;[] * int -&gt; unit" Usage="sortedList.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="ae507-389">作为从 <see cref="T:System.Array" /> 复制的元素目标的一维 <see cref="T:System.Collections.Generic.ICollection`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-389">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span> <span data-ttu-id="ae507-390"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-390">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="ae507-391">
          <paramref name="array" /> 中要从其开始复制的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-391">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="ae507-392">从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="ae507-392">Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-393"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-393"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ae507-394"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ae507-394"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-395">源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="ae507-395">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey,TValue&gt;&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly : bool" Usage="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-396">获取一个值，用于指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="ae507-396">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="ae507-397">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-397"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ae507-398">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-398">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Remove;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt; -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove : System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt; -&gt; bool" Usage="sortedList.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove keyValuePair" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair"><span data-ttu-id="ae507-399">要从 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中删除的 <see cref="T:System.Collections.Generic.ICollection`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-399">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></param>
        <summary><span data-ttu-id="ae507-400">从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定键/值对的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="ae507-400">Removes the first occurrence of a specific key/value pair from the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="ae507-401">如果从 <see langword="true" /> 中成功移除 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-401"><see langword="true" /> if <paramref name="keyValuePair" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ae507-402">如果在原始 <see langword="false" /> 中没有找到 <paramref name="keyValuePair" />，此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-402">This method also returns <see langword="false" /> if <paramref name="keyValuePair" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection(Of TKey) Implements IDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TKey&gt; ^ System::Collections::Generic::IDictionary&lt;TKey,TValue&gt;::Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-403">获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-403">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="ae507-404">一个 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-404">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection(Of TValue) Implements IDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TValue&gt; ^ System::Collections::Generic::IDictionary&lt;TKey,TValue&gt;::Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-405">获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-405">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="ae507-406">包含 <see cref="T:System.Collections.Generic.IDictionary`2" />中的值的对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-406">An object containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;" Usage="sortedList.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-407">返回循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="ae507-407">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="ae507-408">一个可用于遍历集合的<see cref="T:System.Collections.Generic.IEnumerator`1" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-408">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ System::Collections::Generic::IReadOnlyDictionary&lt;TKey,TValue&gt;::Keys { System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys : seq&lt;'Key&gt;" Usage="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-409">获取包含只读字典中的键的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-409">Gets an enumerable collection that contains the keys in the read-only dictionary.</span></span></summary>
        <value><span data-ttu-id="ae507-410">包含只读字典中的键的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-410">An enumerable collection that contains the keys in the read-only dictionary.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ System::Collections::Generic::IReadOnlyDictionary&lt;TKey,TValue&gt;::Values { System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values : seq&lt;'Value&gt;" Usage="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-411">获取包含只读字典中的值的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-411">Gets an enumerable collection that contains the values in the read-only dictionary.</span></span></summary>
        <value><span data-ttu-id="ae507-412">包含只读字典中的值的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-412">An enumerable collection that contains the values in the read-only dictionary.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, arrayIndex As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="sortedList.System.Collections.ICollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="ae507-413">作为从 <see cref="T:System.Array" /> 复制的元素目标的一维 <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-413">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="ae507-414"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-414">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="ae507-415">
          <paramref name="array" /> 中要从其开始复制的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-415">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="ae507-416">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="ae507-416">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ae507-417">如果源 <xref:System.Collections.ICollection> 的类型无法自动强制转换为目标 `array`的类型，<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> 的非泛型实现将引发 <xref:System.InvalidCastException>，而泛型实现将引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-417">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="ae507-418">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-418">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-419"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-419"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ae507-420"><paramref name="arrayIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="ae507-420"><paramref name="arrayIndex" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-421"><paramref name="array" /> 是多维数组。</span><span class="sxs-lookup"><span data-stu-id="ae507-421"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="ae507-422">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-422">-or-</span></span> 
 <span data-ttu-id="ae507-423"><paramref name="array" /> 没有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="ae507-423"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="ae507-424">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-424">-or-</span></span> 
<span data-ttu-id="ae507-425">源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="ae507-425">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="ae507-426">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-426">-or-</span></span> 
<span data-ttu-id="ae507-427">源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-427">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-428">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（确保线程安全）。</span><span class="sxs-lookup"><span data-stu-id="ae507-428">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="ae507-429">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-429"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="ae507-430">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-430">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-431">不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-431">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="ae507-432">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="ae507-432">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="ae507-433">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-433">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="ae507-434">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="ae507-434">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="ae507-435"><xref:System.Collections.ICollection.SyncRoot%2A> 属性返回一个对象，该对象可用于同步对 <xref:System.Collections.ICollection>的访问。</span><span class="sxs-lookup"><span data-stu-id="ae507-435">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="ae507-436">仅当所有线程在访问集合之前锁定此对象时，同步才有效。</span><span class="sxs-lookup"><span data-stu-id="ae507-436">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="ae507-437">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-437">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-438">获取用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-438">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="ae507-439">用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-439">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span>  <span data-ttu-id="ae507-440">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回当前实例。</span><span class="sxs-lookup"><span data-stu-id="ae507-440">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-441">不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-441">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="ae507-442">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="ae507-442">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="ae507-443">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-443">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="ae507-444">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="ae507-444">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="ae507-445"><xref:System.Collections.ICollection.SyncRoot%2A> 属性返回一个对象，该对象可用于同步对 <xref:System.Collections.ICollection>的访问。</span><span class="sxs-lookup"><span data-stu-id="ae507-445">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="ae507-446">仅当所有线程在访问集合之前锁定此对象时，同步才有效。</span><span class="sxs-lookup"><span data-stu-id="ae507-446">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="ae507-447">下面的代码演示如何使用C#、 C++和 Visual Basic 的 <xref:System.Collections.ICollection.SyncRoot%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="ae507-447">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="ae507-448">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-448">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IDictionary.Add : obj * obj -&gt; unit&#xA;override this.System.Collections.IDictionary.Add : obj * obj -&gt; unit" Usage="sortedList.System.Collections.IDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-449">用作要添加的元素的键的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-449">The <see cref="T:System.Object" /> to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="ae507-450">用作要添加的元素的键的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-450">The <see cref="T:System.Object" /> to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="ae507-451">向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-451">Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-452">你还可以使用 <xref:System.Collections.IDictionary.Item%2A> 属性来添加新元素，方法是设置字典中不存在的键的值;例如，`myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="ae507-452">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="ae507-453">但是，如果字典中已存在指定的键，则设置 <xref:System.Collections.IDictionary.Item%2A> 属性会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="ae507-453">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="ae507-454">与此相反，<xref:System.Collections.IDictionary.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-454">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="ae507-455">对于未排序的数据，此方法是一种 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-455">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-456">如果在列表的末尾添加新元素，则它是 O （log `n`）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-456">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="ae507-457">如果插入操作导致大小调整，则操作为 O （`n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-457">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-458">下面的代码示例演示如何通过 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口访问 <xref:System.Collections.Generic.SortedList%602> 类。</span><span class="sxs-lookup"><span data-stu-id="ae507-458">The following code example shows how to access the <xref:System.Collections.Generic.SortedList%602> class through the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="ae507-459">此代码示例使用字符串键创建一个空的字符串 <xref:System.Collections.Generic.SortedList%602>，并使用 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-459">The code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method to add some elements.</span></span> <span data-ttu-id="ae507-460">该示例演示了在尝试添加重复键时，或在提供了错误数据类型的键或值时，<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-460">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="ae507-461">此代码示例演示如何使用 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的其他几个成员。</span><span class="sxs-lookup"><span data-stu-id="ae507-461">The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-462"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-462"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-463"><paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的键类型 <paramref name="TKey" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-463"><paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.IDictionary" />.</span></span>  
  
<span data-ttu-id="ae507-464">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-464">-or-</span></span> 
 <span data-ttu-id="ae507-465"><paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的值类型 <paramref name="TValue" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-465"><paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.IDictionary" />.</span></span>  
  
<span data-ttu-id="ae507-466">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-466">-or-</span></span> 
<span data-ttu-id="ae507-467"><see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-467">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" />.</span></span></exception>
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IDictionary.Contains : obj -&gt; bool&#xA;override this.System.Collections.IDictionary.Contains : obj -&gt; bool" Usage="sortedList.System.Collections.IDictionary.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-468">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-468">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</span></span></param>
        <summary><span data-ttu-id="ae507-469">确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-469">Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="ae507-470">如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-470"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-471">如果 `key` 的类型不能分配给 <xref:System.Collections.Generic.SortedList%602>的键类型 `TKey`，则此方法返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-471">This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-472">此方法是一个 O （log `n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-472">This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-473">下面的代码示例演示如何将 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A> 方法与 <xref:System.Collections.Generic.SortedList%602>结合使用。</span><span class="sxs-lookup"><span data-stu-id="ae507-473">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A> method of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-474">该示例演示如果提供了错误数据类型的键，该方法将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-474">The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="ae507-475">此代码示例是为 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法提供的更大示例的一部分，包括输出。</span><span class="sxs-lookup"><span data-stu-id="ae507-475">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#6)]
[!code-vb[Generic.SortedList.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#6)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-476"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-476"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IDictionaryEnumerator Implements IDictionary.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IDictionaryEnumerator ^ System.Collections.IDictionary.GetEnumerator() = System::Collections::IDictionary::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IDictionary.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.System.Collections.IDictionary.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="sortedList.System.Collections.IDictionary.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-477">返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-477">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="ae507-478">
          <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-478">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-479">C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="ae507-479">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="ae507-480">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="ae507-480">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="ae507-481">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-481">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="ae507-482">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="ae507-482">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="ae507-483"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="ae507-483"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="ae507-484">在此位置上，未定义 <xref:System.Collections.IDictionaryEnumerator.Entry%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-484">At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="ae507-485">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-485">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.</span></span>  
  
 <span data-ttu-id="ae507-486">在调用 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-486"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="ae507-487"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-487"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.</span></span>  
  
 <span data-ttu-id="ae507-488">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-488">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="ae507-489">当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-489">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="ae507-490">如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 未定义。</span><span class="sxs-lookup"><span data-stu-id="ae507-490">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="ae507-491">若要再次将 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-491">To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="ae507-492">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="ae507-492">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="ae507-493">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-493">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="ae507-494">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="ae507-494">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="ae507-495">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-495">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="ae507-496">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="ae507-496">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="ae507-497">不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-497">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="ae507-498">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-498">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-499">下面的代码示例演示如何使用 `foreach` 语句（`For Each` Visual Basic 中 `for each` 中C++的）枚举排序列表中的键/值对，后者隐藏了枚举器的使用。</span><span class="sxs-lookup"><span data-stu-id="ae507-499">The following code example shows how to enumerate the key/value pairs in the sorted list by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator.</span></span> <span data-ttu-id="ae507-500">特别要注意的是，<xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的枚举器将返回 <xref:System.Collections.DictionaryEntry> 对象，而不是 <xref:System.Collections.Generic.KeyValuePair%602> 对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-500">In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="ae507-501">此代码示例是为 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法提供的更大示例的一部分，包括输出。</span><span class="sxs-lookup"><span data-stu-id="ae507-501">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IDictionary.IsFixedSize : bool" Usage="System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-502">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="ae507-502">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="ae507-503">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-503"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="ae507-504">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-504">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-505">具有固定大小的集合在创建之后不能再添加或移除元素，但是允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-505">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="ae507-506">具有固定大小的集合就是一个集合，其中包含阻止添加和移除元素的包装;因此，如果对基础集合进行了更改，包括添加或删除元素，则固定大小的集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="ae507-506">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="ae507-507">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-507">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IDictionary.IsFixedSize" />
        <altmember cref="P:System.Collections.IDictionary.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IDictionary.IsReadOnly : bool" Usage="System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-508">获取一个值，用于指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="ae507-508">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="ae507-509">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-509"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="ae507-510">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-510">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-511">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-511">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="ae507-512">只读集合就是一个集合，其中包含阻止修改集合的包装器;因此，如果对基础集合进行了更改，只读集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="ae507-512">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="ae507-513">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-513">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IDictionary.IsReadOnly" />
        <altmember cref="P:System.Collections.IDictionary.IsFixedSize" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IDictionary::Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IDictionary.Item(obj) : obj with get, set" Usage="System.Collections.IDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-514">要获取或设置的元素的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-514">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="ae507-515">获取或设置具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-515">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="ae507-516">如果 <see langword="null" /> 不在字典中或 <paramref name="key" /> 的类型属于不能分配给 <paramref name="key" /> 的键类型 <paramref name="TKey" />，则为具有指定键的元素或 <see cref="T:System.Collections.Generic.SortedList`2" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-516">The element with the specified key, or <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-517">如果 `key` 的类型不能分配给 <xref:System.Collections.Generic.SortedList%602>的键类型 `TKey`，则此属性将返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="ae507-517">This property returns `null` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-518">通过此属性，可以使用以下语法来访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="ae507-518">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="ae507-519">你还可以使用 <xref:System.Collections.IDictionary.Item%2A> 属性来添加新元素，方法是设置字典中不存在的键的值;例如，`myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="ae507-519">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="ae507-520">但是，如果字典中已存在指定的键，则设置 <xref:System.Collections.IDictionary.Item%2A> 属性会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="ae507-520">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="ae507-521">与此相反，<xref:System.Collections.IDictionary.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-521">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="ae507-522">该C#语言使用[this](/dotnet/csharp/language-reference/keywords/this)关键字来定义索引器，而不是实现 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="ae507-522">The C# language uses the [this](/dotnet/csharp/language-reference/keywords/this) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property.</span></span> <span data-ttu-id="ae507-523">Visual Basic 将 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="ae507-523">Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="ae507-524">检索此属性的值是一个 O （log `n`）操作，其中 n 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-524">Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="ae507-525">如果键已在 <xref:System.Collections.Generic.SortedList%602>中，则设置属性是 O （log `n`）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-525">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-526">如果键不在列表中，则为未排序的数据设置属性是 O （`n`）运算，如果在列表的末尾添加新元素，则为 O （log `n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-526">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="ae507-527">如果插入操作导致大小调整，则操作为 O （`n`）。</span><span class="sxs-lookup"><span data-stu-id="ae507-527">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-528">下面的代码示例演示如何使用具有 <xref:System.Collections.Generic.SortedList%602>的 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> 属性C#（中的索引器），以及该属性与 <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> 属性不同的方式。</span><span class="sxs-lookup"><span data-stu-id="ae507-528">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>, and ways the property differs from the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="ae507-529">该示例显示，与 <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> 属性一样，<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> 属性可更改与现有键关联的值，如果指定键不在排序列表中，则可用于添加新的键/值对。</span><span class="sxs-lookup"><span data-stu-id="ae507-529">The example shows that, like the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list.</span></span> <span data-ttu-id="ae507-530">该示例还演示了与 <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> 属性不同的是，如果 `key` 不在排序列表中，<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> 属性不会引发异常，而是返回空引用。</span><span class="sxs-lookup"><span data-stu-id="ae507-530">The example also shows that unlike the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property does not throw an exception if `key` is not in the sorted list, returning a null reference instead.</span></span> <span data-ttu-id="ae507-531">最后，该示例演示如果 `key` 不是正确的数据类型，则获取 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> 属性返回空引用; 如果 `key` 不是正确的数据类型，则设置属性将引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae507-531">Finally, the example demonstrates that getting the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.</span></span>  
  
 <span data-ttu-id="ae507-532">此代码示例是为 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法提供的更大示例的一部分，包括输出。</span><span class="sxs-lookup"><span data-stu-id="ae507-532">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#3)]
[!code-vb[Generic.SortedList.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#3)]  
[!code-csharp[Generic.SortedList.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.SortedList.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#4)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-533"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-533"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ae507-534">正在分配值，并且 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的键类型 <paramref name="TKey" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-534">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span>  
  
<span data-ttu-id="ae507-535">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ae507-535">-or-</span></span> 
<span data-ttu-id="ae507-536">正在分配值，并且 <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的值类型 <paramref name="TValue" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="ae507-536">A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IDictionary.Keys : System.Collections.ICollection" Usage="System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-537">获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-537">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <value><span data-ttu-id="ae507-538">一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-538">An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-539"><xref:System.Collections.ICollection> 中的键顺序与 <xref:System.Collections.Generic.SortedList%602>中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="ae507-539">The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-540">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-540">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-541">下面的代码示例演示如何使用具有 <xref:System.Collections.Generic.SortedDictionary%602>的 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的 <xref:System.Collections.IDictionary.Keys%2A> 属性，以列出字典中的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-541">The following code example shows how to use the <xref:System.Collections.IDictionary.Keys%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedDictionary%602>, to list the keys in the dictionary.</span></span> <span data-ttu-id="ae507-542">该示例还演示如何枚举排序列表中的键/值对;请注意，<xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的枚举器将返回 <xref:System.Collections.DictionaryEntry> 对象，而不是 <xref:System.Collections.Generic.KeyValuePair%602> 对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-542">The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="ae507-543">此代码示例是为 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法提供的更大示例的一部分，包括输出。</span><span class="sxs-lookup"><span data-stu-id="ae507-543">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#9)]
[!code-vb[Generic.SortedList.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#9)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IDictionary.Remove : obj -&gt; unit&#xA;override this.System.Collections.IDictionary.Remove : obj -&gt; unit" Usage="sortedList.System.Collections.IDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-544">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-544">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="ae507-545">从 <see cref="T:System.Collections.IDictionary" /> 中移除包含指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-545">Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-546">此方法执行二进制搜索;但是，元素将上移以填充打开的位置，因此，此方法是 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-546">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-547">下面的代码示例演示如何将 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A> 与 <xref:System.Collections.Generic.SortedList%602>结合使用。</span><span class="sxs-lookup"><span data-stu-id="ae507-547">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A> of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-548">此代码示例是为 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法提供的更大示例的一部分，包括输出。</span><span class="sxs-lookup"><span data-stu-id="ae507-548">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#10)]
[!code-vb[Generic.SortedList.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#10)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-549"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-549"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IDictionary.Values : System.Collections.ICollection" Usage="System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-550">获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-550">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <value><span data-ttu-id="ae507-551">一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-551">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-552"><xref:System.Collections.ICollection> 中的值的顺序与 <xref:System.Collections.Generic.SortedList%602>中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="ae507-552">The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-553">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-553">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-554">下面的代码示例演示如何使用具有 <xref:System.Collections.Generic.SortedList%602>的 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A> 属性来列出已排序列表中的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-554">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>, to list the values in the sorted list.</span></span> <span data-ttu-id="ae507-555">该示例还演示如何枚举排序列表中的键/值对;请注意，<xref:System.Collections.IDictionary?displayProperty=nameWithType> 接口的枚举器将返回 <xref:System.Collections.DictionaryEntry> 对象，而不是 <xref:System.Collections.Generic.KeyValuePair%602> 对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-555">The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="ae507-556">此代码示例是为 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> 方法提供的更大示例的一部分，包括输出。</span><span class="sxs-lookup"><span data-stu-id="ae507-556">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#8)]
[!code-vb[Generic.SortedList.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#8)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="sortedList.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-557">返回循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="ae507-557">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="ae507-558">一个可用于遍历集合的<see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-558">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-559">C#语言的 `foreach` 语句（`for each` 中C++`For Each` Visual Basic）隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="ae507-559">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="ae507-560">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="ae507-560">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="ae507-561">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-561">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="ae507-562">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="ae507-562">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="ae507-563"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="ae507-563"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="ae507-564">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-564">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="ae507-565">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-565">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="ae507-566">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="ae507-566"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="ae507-567"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="ae507-567"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="ae507-568">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位到集合中的最后一个元素之后，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-568">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="ae507-569">当枚举器位于此位置时，对 <xref:System.Collections.IEnumerator.MoveNext%2A> 的后续调用也将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ae507-569">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="ae507-570">如果对的最后一个调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false`，则 <xref:System.Collections.IEnumerator.Current%2A> 未定义。</span><span class="sxs-lookup"><span data-stu-id="ae507-570">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="ae507-571">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="ae507-571">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="ae507-572">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="ae507-572">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="ae507-573">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对 <xref:System.Collections.IEnumerator.MoveNext%2A> 或 <xref:System.Collections.IEnumerator.Reset%2A> 的下一次调用引发了 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="ae507-573">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="ae507-574">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="ae507-574">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="ae507-575">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-575">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="ae507-576">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="ae507-576">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="ae507-577">不同步 <xref:System.Collections.Generic?displayProperty=nameWithType> 中集合的默认实现。</span><span class="sxs-lookup"><span data-stu-id="ae507-577">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="ae507-578">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-578">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="sortedList.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae507-579">如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的实际元素数。</span><span class="sxs-lookup"><span data-stu-id="ae507-579">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.SortedList`2" />, if that number is less than 90 percent of current capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-580">如果没有新元素添加到集合中，则可以使用此方法最大程度地减少集合的内存开销。</span><span class="sxs-lookup"><span data-stu-id="ae507-580">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="ae507-581">但重新分配和复制大型 <xref:System.Collections.Generic.SortedList%602> 的成本可能很大，因此，如果列表的容量超过90%，则 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 方法不会执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="ae507-581">The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="ae507-582">这样可以避免因相对较小的收益而产生较大的重新分配成本。</span><span class="sxs-lookup"><span data-stu-id="ae507-582">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="ae507-583">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-583">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 <span data-ttu-id="ae507-584">若要将 <xref:System.Collections.Generic.SortedList%602> 重置为其初始状态，请在调用 <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> 方法之前调用 <xref:System.Collections.Generic.SortedList%602.Clear%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ae507-584">To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method.</span></span> <span data-ttu-id="ae507-585">修整空 <xref:System.Collections.Generic.SortedList%602> 会将 <xref:System.Collections.Generic.SortedList%602> 的容量设置为默认容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-585">Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.</span></span>  
  
 <span data-ttu-id="ae507-586">还可以使用 <xref:System.Collections.Generic.SortedList%602.Capacity%2A> 属性设置容量。</span><span class="sxs-lookup"><span data-stu-id="ae507-586">The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key * 'Value -&gt; bool&#xA;override this.TryGetValue : 'Key * 'Value -&gt; bool" Usage="sortedList.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="ae507-587">要获取其值的键。</span><span class="sxs-lookup"><span data-stu-id="ae507-587">The key whose value to get.</span></span></param>
        <param name="value"><span data-ttu-id="ae507-588">如果找到指定的键，此方法将返回与该键关联的值；否则返回 <paramref name="value" /> 参数类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="ae507-588">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter.</span></span> <span data-ttu-id="ae507-589">此参数在传递时尚未初始化。</span><span class="sxs-lookup"><span data-stu-id="ae507-589">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="ae507-590">获取与指定的键关联的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-590">Gets the value associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="ae507-591">如果 <see cref="T:System.Collections.Generic.SortedList`2" /> 包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-591"><see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-592">此方法将 <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> 方法和 <xref:System.Collections.Generic.SortedList%602.Item%2A> 属性的功能组合在一起。</span><span class="sxs-lookup"><span data-stu-id="ae507-592">This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="ae507-593">如果未找到该键，则 `value` 参数将获取值类型 `TValue`的适当默认值;例如，对于整数类型，为零（0），对于布尔类型 `false`，对于引用类型为 `null`。</span><span class="sxs-lookup"><span data-stu-id="ae507-593">If the key is not found, then the `value` parameter gets the appropriate default value for the value type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
 <span data-ttu-id="ae507-594">此方法执行二进制搜索;因此，此方法是 O （log `n`）操作，其中 `n` 是 <xref:System.Collections.Generic.SortedList%602.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="ae507-594">This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-595">该示例演示如何使用 <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> 方法，以便在经常尝试排序列表中不是的键的程序中检索值。</span><span class="sxs-lookup"><span data-stu-id="ae507-595">The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list.</span></span> <span data-ttu-id="ae507-596">相反，此示例还演示了在尝试检索不存在的键时C#，<xref:System.Collections.Generic.SortedList%602.Item%2A> 属性（中的索引器）如何引发异常。</span><span class="sxs-lookup"><span data-stu-id="ae507-596">For contrast, the example also shows how the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="ae507-597">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-597">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
 [!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
 [!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ae507-598"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ae507-598"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IList(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;TValue&gt; ^ Values { System::Collections::Generic::IList&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.IList&lt;'Value&gt;" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ae507-599">获得一个包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值的集合。</span><span class="sxs-lookup"><span data-stu-id="ae507-599">Gets a collection containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></summary>
        <value><span data-ttu-id="ae507-600">一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-600">A <see cref="T:System.Collections.Generic.IList`1" /> containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae507-601"><xref:System.Collections.Generic.IList%601> 中的值的顺序与 <xref:System.Collections.Generic.SortedList%602>中的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="ae507-601">The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="ae507-602">返回的 <xref:System.Collections.Generic.IList%601> 不是静态副本;相反，<xref:System.Collections.Generic.IList%601> 引用原始 <xref:System.Collections.Generic.SortedList%602>中的值。</span><span class="sxs-lookup"><span data-stu-id="ae507-602">The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="ae507-603">因此，对 <xref:System.Collections.Generic.SortedList%602> 所做的更改将继续在 <xref:System.Collections.Generic.IList%601>中反映出来。</span><span class="sxs-lookup"><span data-stu-id="ae507-603">Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.</span></span>  
  
 <span data-ttu-id="ae507-604"><xref:System.Collections.Generic.SortedList%602.Values%2A> 属性返回的集合提供了一种有效的方法来按索引检索值。</span><span class="sxs-lookup"><span data-stu-id="ae507-604">The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index.</span></span> <span data-ttu-id="ae507-605">访问属性时无需重新生成列表，因为列表只是内部值数组的包装器。</span><span class="sxs-lookup"><span data-stu-id="ae507-605">It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values.</span></span> <span data-ttu-id="ae507-606">下面的代码演示如何使用 <xref:System.Collections.Generic.SortedList%602.Values%2A> 属性从字符串的排序列表中检索值的索引：</span><span class="sxs-lookup"><span data-stu-id="ae507-606">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="ae507-607">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="ae507-607">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae507-608">此代码示例演示如何使用 <xref:System.Collections.Generic.SortedList%602.Values%2A> 属性枚举已排序列表中的值，以及如何枚举已排序列表中的键和值。</span><span class="sxs-lookup"><span data-stu-id="ae507-608">This code example shows how to enumerate the values in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Values%2A> property, and how to enumerate the keys and values in the sorted list.</span></span>  
  
 <span data-ttu-id="ae507-609">该示例还演示了如何使用 <xref:System.Collections.Generic.SortedList%602.Values%2A> 属性来高效索引检索值。</span><span class="sxs-lookup"><span data-stu-id="ae507-609">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for efficient indexed retrieval of values.</span></span>  
  
 <span data-ttu-id="ae507-610">此代码示例是为 <xref:System.Collections.Generic.SortedList%602> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="ae507-610">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#8)]
 [!code-csharp[Generic.SortedList#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#8)]
 [!code-vb[Generic.SortedList#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#8)]  
[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]
[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]
[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>
