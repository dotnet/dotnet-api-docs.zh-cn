<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd1115c9459ac5eb868c8466e9b02c334f3021d2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83972457" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.1</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>允许你使用其他源的数据有效地批量加载 SQL Server 表。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server 包含一个用于将数据从一个表移到另一个**表的常用**命令提示实用工具，无论是在单个服务器上还是在服务器之间。 利用 <xref:System.Data.SqlClient.SqlBulkCopy> 类，您可以编写提供类似功能的托管代码解决方案。 还可以通过其他方式将数据加载到 SQL Server 表中（例如 INSERT 语句），但 <xref:System.Data.SqlClient.SqlBulkCopy> 对它们提供显著的性能优势。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 类可用于只将数据写入 SQL Server 表。 但是，数据源不限于 SQL Server;可以使用任何数据源，只要数据可以加载到 <xref:System.Data.DataTable> 实例或使用 <xref:System.Data.IDataReader> 实例进行读取即可。  
  
 在将类型 <xref:System.Data.SqlTypes.SqlDateTime> 的 <xref:System.Data.DataTable> 列大容量加载到类型为 SQL Server 2008 中添加的日期/时间类型之一的 SQL Server 列时，<xref:System.Data.SqlClient.SqlBulkCopy> 将会失败。  
  
   
  
## Examples  
 下面的控制台应用程序演示了如何使用 <xref:System.Data.SqlClient.SqlBulkCopy> 类加载数据。 在此示例中，<xref:System.Data.SqlClient.SqlDataReader> 用于将数据从 SQL Server AdventureWorks 数据库的 Production.Product 表复制到相同数据库的一个类似的表中。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 <see langword="Integrated Security = true" />，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
        <summary>使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的指定打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于在初始化 <xref:System.Data.SqlClient.SqlBulkCopy> 实例时连接已打开，因此在关闭 <xref:System.Data.SqlClient.SqlBulkCopy> 实例之后，连接仍保持打开状态。  
  
 如果 `connection` 参数为 null，则会引发 <xref:System.ArgumentNullException>。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何使用已打开的连接大容量加载数据。 在此示例中，<xref:System.Data.SqlClient.SqlDataReader> 用于将数据从 SQL Server AdventureWorks 数据库的 Production.Product 表复制到相同数据库的一个类似的表中。 此示例只为了方便演示。 在生产应用程序中，不能使用 `SqlBulkCopy` 将数据从一个表移到同一数据库的另一个表中。 请注意，源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">定义将打开供 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果该连接字符串不使用 <see langword="Integrated Security = true" />，则可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
        <summary>基于提供的 <paramref name="connectionString" /> 初始化并打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 该构造函数使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大容量复制操作结束时，连接会自动关闭。  
  
 如果 `connectionString` 为 null，则会引发 <xref:System.ArgumentNullException>。 如果 `connectionString` 为空字符串，则会引发 <xref:System.ArgumentException>。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何使用指定为字符串的连接大容量加载数据。 当 <xref:System.Data.SqlClient.SqlBulkCopy> 实例关闭时，连接会自动关闭。  
  
 在此示例中，首先将源数据从 SQL Server 表读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">定义将打开供 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果该连接字符串不使用 <see langword="Integrated Security = true" />，则可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
        <param name="copyOptions"><see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，可确定将哪些数据源行复制到目标表中。</param>
        <summary>基于提供的 <paramref name="connectionString" /> 初始化并打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 构造函数使用该 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以获取有关 <xref:System.Data.SqlClient.SqlBulkCopyOptions> 主题中的所有大容量复制选项的详细信息。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何使用指定为字符串的连接执行大容量加载。 在加载目标表时，选项设置为使用源表的 "标识" 列中的值。 在此示例中，首先将源数据从 SQL Server 表读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 源表和目标表每个都包含一个标识列。 默认情况下，在目标表中为添加的每个行生成**标识**列的新值。 在此示例中，当打开连接时，将设置一个选项，该选项强制大容量加载进程改为使用源表中的**标识**值。 若要查看选项如何更改大容量加载的工作方式，请运行包含 dbo 的示例 **。BulkCopyDemoMatchingColumns**表为空。 从源加载所有行。 然后再次运行该示例而不清空该表。 引发异常，并且代码向控制台写入一条消息，通知您由于 primary key 约束冲突而未添加行。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 <see langword="Integrated Security = true" />，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
        <param name="copyOptions"><see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，可确定将哪些数据源行复制到目标表中。</param>
        <param name="externalTransaction">现有的 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 实例，批量复制操作将在该实例下进行。</param>
        <summary>使用提供的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的现有打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。 如果提供非空 <see cref="T:System.Data.SqlClient.SqlTransaction" />，则复制操作将在该事务中执行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果选项包括 `UseInternalTransaction` 并且 `externalTransaction` 参数不为 null，则会引发**InvalidArgumentException** 。  
  
 有关演示如何在事务中使用 `SqlBulkCopy` 的示例，请参阅[事务和大容量复制操作](/dotnet/framework/data/adonet/sql/transaction-and-bulk-copy-operations)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>每个批处理中的行数。 在每个批处理结束时，批处理中的行将发送到服务器。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> 属性的整数值；如果未设置任何值，则为零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当处理 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 行或没有更多的行要发送到目标数据源时，批处理完成。  
  
 零（默认值）指示每个 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作都是一个批处理。  
  
 如果在未使用 "<xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>" 选项的情况下声明了 <xref:System.Data.SqlClient.SqlBulkCopy> 实例，则会一次向服务器 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 行发送行，但不会执行与事务相关的操作。 如果 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 有效，则每批行都作为单独的事务插入。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 属性可随时设置。 如果大容量复制已在进行中，则根据以前的批大小调整当前批的大小。 后续批次使用新的大小。 如果 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 初始为零并在 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作已在进行时更改，则该操作将以单个批处理的方式加载数据。 对同一 <xref:System.Data.SqlClient.SqlBulkCopy> 实例执行的任何后续 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作都使用新 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何以批处理50行的方式大容量加载数据。 有关演示 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 如何与事务一起使用的示例，请参阅[事务和大容量复制操作](/dotnet/framework/data/adonet/sql/transaction-and-bulk-copy-operations)。  
  
 在此示例中，首先将源数据从 SQL Server 表读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>超时之前要完成操作的秒数。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> 属性的整数值。 默认为 30 秒。 值为 0 表示没有限制；大容量复制将无限期等待。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果操作超时，则不会提交事务，并从目标表中删除所有复制的行。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何在大容量加载数据时修改超时时间为60秒。  
  
 在此示例中，首先将源数据从 SQL Server 表读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 [!INCLUDE[tsql](~/includes/tsql-md.md)]`INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对 <xref:System.Data.SqlClient.SqlBulkCopy> 对象调用 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 后，其他操作将不会成功。 对 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 方法的调用将引发 <xref:System.InvalidOperationException>。  
  
 从 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 事件调用 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 方法将导致引发 <xref:System.InvalidOperationException>。  
  
 请注意，打开的 <xref:System.Data.SqlClient.SqlBulkCopy> 实例在 `using` 块的末尾隐式关闭。  
  
   
  
## Examples  
 下面的示例使用同一个 <xref:System.Data.SqlClient.SqlBulkCopy> 实例将销售订单及其关联详细信息添加到两个目标表。 由于**AdventureWorks**销售订单表很大，因此该示例只读取某个帐号号下的订单，并将这些订单和详细信息大容量复制到目标表中。 仅当大容量复制操作完成后，才使用 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 方法。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 项的集合。 列映射定义数据源中的列与目标中的列之间的关系。</summary>
        <value>列映射集合。 默认情况下为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果数据源和目标表具有相同的列数，并且数据源中每个源列的序号位置与相应目标列的序号位置匹配，则不需要 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 集合。 但是，如果列数不同，或者序号位置不一致，则必须使用 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 确保将数据复制到正确的列。  
  
 在执行大容量复制操作期间，可以访问此集合，但不能对其进行更改。 任何更改尝试都将引发 <xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>服务器上的目标表的名称。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性的字符串值，如果未提供任何值，则为 null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 时未设置 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A>，将引发 <xref:System.ArgumentNullException>。  
  
 如果 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 在 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作运行时修改，则更改不会影响当前操作。 新 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 值将在下一次调用 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 方法时使用。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 是由三部分组成的名称（`<database>.<owningschema>.<name>`）。 可以使用表名称的数据库和所属架构（如果选择）对表名称进行限定。 但是，如果表名使用下划线（"_"）或任何其他特殊字符，则必须使用方括号（`[<database>.<owningschema>.<name_01>]`）对名称进行转义。 有关详细信息，请参阅 [Database Identifiers](/sql/relational-databases/databases/database-identifiers)。  
  
 您可以使用 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 属性的值（例如 `tempdb..#table` 或 `tempdb.<owner>.#table`）将数据大容量复制到临时表中。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何使用已打开的连接大容量加载数据。 目标表是**AdventureWorks**数据库中的表。  
  
 在此示例中，首先使用连接来将 SQL Server 表中的数据读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>启用或禁用 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象，以流式传输 <see cref="T:System.Data.IDataReader" /> 对象中的数据。</summary>
        <value>如果 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象可以流式传输 <see cref="T:System.Data.IDataReader" /> 对象中的数据，则为 <see langword="true" />；否则为 false。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`<xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> 时，<xref:System.Data.SqlClient.SqlBulkCopy> 使用 <xref:System.Data.CommandBehavior.SequentialAccess>从 <xref:System.Data.IDataReader> 对象中读取内容，使用 <xref:System.Data.IDataReader> 流式处理功能优化内存使用。 当该参数设置为 false 时，<xref:System.Data.SqlClient.SqlBulkCopy> 类将 <xref:System.Data.IDataReader> 对象返回的所有数据加载到内存中，然后将其发送到 SQL Server 或 SQL Azure。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>定义生成通知事件之前要处理的行数。</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性的整数值，如果未设置任何属性，则为零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性设计用于阐释大容量复制操作进度的用户界面组件。 它指示生成通知事件之前要处理的行数。 即使正在进行大容量复制操作，也可以随时设置 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 属性。 在大容量复制操作过程中所做的更改将在下一次通知后生效。 新设置适用于在同一实例上的所有后续操作。  
  
 如果 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 设置为小于零的数字，则会引发 <xref:System.ArgumentOutOfRangeException>。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何使用已打开的连接大容量加载数据。 设置 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 属性，以便在将每50行复制到表后调用事件处理程序。  
  
 在此示例中，首先使用连接来将 SQL Server 表中的数据读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 然后，打开第二个连接以大容量复制数据。 请注意，源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>每当 <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性指定的行数被处理后会发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 和 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 的设置是独立的。 收到 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 事件并不意味着已将所有行发送到服务器或已提交。  
  
 不能从该事件调用 SqlBulkCopy （<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>）或 SqlConnection。关闭（<xref:System.Data.SqlClient.SqlConnection.Close%2A>）。 执行此操作将导致引发 <xref:System.InvalidOperationException>，且 <xref:System.Data.SqlClient.SqlBulkCopy> 对象状态不会更改。 如果用户想要从事件中取消操作，则可以使用 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> 的 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> 属性。 （有关使用 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> 属性的示例，请参阅[事务和批量复制操作](/dotnet/framework/data/adonet/sql/transaction-and-bulk-copy-operations)。）  
  
 在执行大容量复制操作期间，连接中不支持任何操作（例如事务活动），建议您不要使用 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 事件期间使用的相同连接。 但是，你可以打开其他连接。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何使用已打开的连接大容量加载数据。 设置 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 属性，以便在将每50行复制到表后调用事件处理程序。  
  
 在此示例中，首先使用连接来将 SQL Server 表中的数据读取到 <xref:System.Data.SqlClient.SqlDataReader> 实例。 请注意，源数据不必位于 SQL Server 上;可以使用任何可读取到 <xref:System.Data.IDataReader> 或加载到 <xref:System.Data.DataTable>的数据源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="sqlBulkCopy.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的当前实例占用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 `Dispose` 后，应调用 <xref:System.Data.SqlClient.SqlBulkCopy>。 `Dispose` 方法使 <xref:System.Data.SqlClient.SqlBulkCopy> 处于不可用状态。 调用 `Dispose`后，必须释放对 <xref:System.Data.SqlClient.SqlBulkCopy> 的所有引用，以便垃圾回收器可以回收 <xref:System.Data.SqlClient.SqlBulkCopy> 占用的内存。  
  
 有关详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。  
  
> [!NOTE]
>  每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.Data.SqlClient.SqlBulkCopy>。 否则，在垃圾回收器调用 <xref:System.Data.SqlClient.SqlBulkCopy> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将所有行从数据源复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果禁用多个活动的结果集（MARS），<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 会使连接繁忙。 如果启用了 MARS，则可以在同一连接中将对 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 的调用交替到其他命令。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，其行将复制到目标表。</param>
        <summary>将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
        <summary>将所有行从提供的 <see cref="T:System.Data.DataRow" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当大容量复制操作正在进行时，关联的目标 <xref:System.Data.SqlClient.SqlConnection> 忙于提供服务，并且不能对该连接执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 集合从 <xref:System.Data.DataRow> 列映射到目标数据库表。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何从 <xref:System.Data.DataRow> 数组大容量加载数据。 目标表是**AdventureWorks**数据库中的表。  
  
 在此示例中，将在运行时创建 <xref:System.Data.DataTable>。 将从要复制到目标表的 <xref:System.Data.DataTable> 中选择单个行。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
        <summary>将所有行从提供的 <see cref="T:System.Data.DataTable" /> 复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable> 中的所有行都将复制到目标表中，但已删除的行除外。  
  
 当大容量复制操作正在进行时，关联的目标 <xref:System.Data.SqlClient.SqlConnection> 忙于提供服务，并且不能对该连接执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 集合从 <xref:System.Data.DataTable> 列映射到目标数据库表。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何从 <xref:System.Data.DataTable>中大容量加载数据。 目标表是**AdventureWorks**数据库中的表。  
  
 在此示例中，<xref:System.Data.DataTable> 在运行时创建，是 `SqlBulkCopy` 操作的源。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，其行将复制到目标表。</param>
        <summary>将所有行从提供的 <see cref="T:System.Data.IDataReader" /> 复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 复制操作从读取器中的下一个可用行开始。 大多数情况下，读取器只是由 <xref:System.Data.IDbCommand.ExecuteReader%2A> 或类似调用返回，因此下一个可用行是第一行。 若要处理多个结果，请对数据读取器调用 <xref:System.Data.IDataReader.NextResult%2A> 并再次调用 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>。  
  
 请注意，使用 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 会修改读取器的状态。 方法将调用 <xref:System.Data.IDataReader.Read%2A>，直到该方法返回 false、中止操作或发生错误。 这意味着，当 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作完成时，数据读取器将处于不同的状态，可能在结果集的末尾。  
  
 当大容量复制操作正在进行时，关联的目标 <xref:System.Data.SqlClient.SqlConnection> 忙于提供服务，并且不能对该连接执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 集合将数据读取器列映射到目标数据库表。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何从 <xref:System.Data.SqlClient.SqlDataReader>中大容量加载数据。 目标表是**AdventureWorks**数据库中的表。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
        <param name="rowState">一个来自 <see cref="T:System.Data.DataRowState" /> 枚举的值。 只有与行状态匹配的行才会复制到目标中。</param>
        <summary>仅将与提供的 <see cref="T:System.Data.DataTable" /> 中提供的行状态匹配的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅在 `rowState` 参数中指示的状态 <xref:System.Data.DataTable> 中的行被复制到目标表中。  
  
> [!NOTE]
>  如果指定 <xref:System.Data.DataRowState.Deleted>，则任何 <xref:System.Data.DataRowState.Unchanged>、<xref:System.Data.DataRowState.Added>和 <xref:System.Data.DataRowState.Modified> 行也将复制到服务器。 不会引发异常。  
  
 当大容量复制操作正在进行时，关联的目标 <xref:System.Data.SqlClient.SqlConnection> 忙于提供服务，并且不能对该连接执行任何其他操作。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 集合从 <xref:System.Data.DataTable> 列映射到目标数据库表。  
  
   
  
## Examples  
 下面的控制台应用程序演示如何只大容量加载 <xref:System.Data.DataTable> 中与指定状态匹配的行。 在这种情况下，只会添加未更改的行。 目标表是**AdventureWorks**数据库中的表。  
  
 在此示例中，将在运行时创建一个 <xref:System.Data.DataTable>，并向其中添加三个行。 在执行 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 方法之前，将对其中一行进行编辑。 使用 `DataRowState.Unchanged` `rowState` 参数调用 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 方法，因此仅将两个未更改的行大容量复制到目标。  
  
> [!IMPORTANT]
>  除非已按照[大容量复制示例设置](/dotnet/framework/data/adonet/sql/bulk-copy-example-setup)中所述创建了工作表，否则此示例将不会运行。 提供此代码是为了演示仅使用 SqlBulkCopy 时的语法。 如果源表和目标表位于同一个 SQL Server 实例中，则使用 Transact-sql `INSERT ... SELECT` 语句复制数据会更加简单快捷。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server">SQL Server 中的批量复制操作</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET 概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" /> 的异步版本，它将所有行从数据源复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果禁用多个活动的结果集（MARS），<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 会使连接繁忙。 如果启用了 MARS，则可以在同一连接中将对 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 的调用交替到其他命令。  
  
 失败时回滚的行数取决于以下几项：  
  
-   如果指定 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction>。  
  
-   如果有您自己的事务。  
  
-   <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 的值。  
  
 如果在向服务器发送数据时出现错误，则将回滚当前批处理（由 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>指定）。 如果未指定 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 并且您有自己的事务，则将回滚整个事务（还包括以前的所有批处理）。  
  
 使用 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 了解已复制到服务器的行数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，其行将复制到目标表。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.DataRow" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，它将提供的 <see cref="T:System.Data.DataTable" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，其行将复制到目标表。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，它将提供的 <see cref="T:System.Data.IDataReader" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，<see cref="T:System.Data.IDataReader" /> 已关闭。  
  
在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，与 <see cref="T:System.Data.IDataReader" /> 相关的连接已关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netcore-1.0;netcore-1.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，其行将复制到目标表。</param>
        <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
        <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow(), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
        <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.DataRow" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。  
  
取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
        <param name="rowState">一个来自 <see cref="T:System.Data.DataRowState" /> 枚举的值。 只有与行状态匹配的行才会复制到目标中。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，它只将匹配所提供 <see cref="T:System.Data.DataTable" /> 中所提供行状态的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
        <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，它将提供的 <see cref="T:System.Data.DataTable" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。  
  
取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，其行将复制到目标表。</param>
        <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，它将提供的 <see cref="T:System.Data.IDataReader" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。  
  
取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，<see cref="T:System.Data.IDataReader" /> 已关闭。  
  
在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，与 <see cref="T:System.Data.IDataReader" /> 相关的连接已关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
        <param name="rowState">一个来自 <see cref="T:System.Data.DataRowState" /> 枚举的值。 只有与行状态匹配的行才会复制到目标中。</param>
        <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
        <summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，它只将匹配所提供 <see cref="T:System.Data.DataTable" /> 中所提供行状态的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。  
  
取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
        <returns>表示异步操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 SQL Server 的 .NET Framework 数据提供程序中的异步编程的详细信息，请参阅[异步编程](/dotnet/framework/data/adonet/asynchronous-programming)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。  
  
在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 期间连接断开或关闭。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。  
  
在任务对象中返回后存在连接池超时。  
  
在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。  
  
 在连接字符串中指定 <see langword="Context Connection=true" />。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
