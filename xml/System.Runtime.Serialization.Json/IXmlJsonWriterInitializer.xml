<Type Name="IXmlJsonWriterInitializer" FullName="System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="287420fffe9747314f0914cfe460e428eab33972" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86755075" /></Metadata><TypeSignature Language="C#" Value="public interface IXmlJsonWriterInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IXmlJsonWriterInitializer" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IXmlJsonWriterInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IXmlJsonWriterInitializer" />
  <TypeSignature Language="F#" Value="type IXmlJsonWriterInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.Serialization.Json" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.ServiceModel.Web" FromVersion="4.0.0.0" To="System.Runtime.Serialization" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="efaff-101">指定在重用 JavaScript 对象表示法 (JSON) 编写器向特定输出流写入数据时对该编写器进行初始化的接口。</span><span class="sxs-lookup"><span data-stu-id="efaff-101">Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efaff-102"><xref:System.Xml.XmlDictionaryWriter> 方法创建的 <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> 对象实现了此接口，在创建后，这些对象可立即开始写入 JSON 编码数据。</span><span class="sxs-lookup"><span data-stu-id="efaff-102">The <xref:System.Xml.XmlDictionaryWriter> objects created by the <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> methods implement this interface and when created are immediately ready to write JSON-encoded data.</span></span> <span data-ttu-id="efaff-103">但是，如果用户要重用相同的 <xref:System.Xml.XmlDictionaryWriter> 对象将新 JSON 文档写入另一个输出流，则必须使用 <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> 方法将编写器初始化为相应的流。</span><span class="sxs-lookup"><span data-stu-id="efaff-103">But if a user wants to reuse the same <xref:System.Xml.XmlDictionaryWriter> object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> method.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetOutput">
      <MemberSignature Language="C#" Value="public void SetOutput (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutput(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutput (stream As Stream, encoding As Encoding, ownsStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutput(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream);" />
      <MemberSignature Language="F#" Value="abstract member SetOutput : System.IO.Stream * System.Text.Encoding * bool -&gt; unit" Usage="iXmlJsonWriterInitializer.SetOutput (stream, encoding, ownsStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="efaff-104">编写器将写入到的输出 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="efaff-104">The output <see cref="T:System.IO.Stream" /> to which the writer writes.</span></span></param>
        <param name="encoding"><span data-ttu-id="efaff-105">指定输出流字符编码的 <see cref="T:System.Text.Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="efaff-105">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding of the output stream.</span></span></param>
        <param name="ownsStream"><span data-ttu-id="efaff-106">如果为 <see langword="true" />，则在完成时写入器关闭输出流；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="efaff-106">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="efaff-107">使用指定的字符编码将 JavaScript 对象表示法 (JSON) 编写器初始化（或重新初始化）为指定的输出流。</span><span class="sxs-lookup"><span data-stu-id="efaff-107">Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efaff-108"><xref:System.Xml.XmlDictionaryWriter> 方法创建的 <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> 对象实现了此接口，在创建后，这些对象可立即开始写入 JSON 编码数据。</span><span class="sxs-lookup"><span data-stu-id="efaff-108">The <xref:System.Xml.XmlDictionaryWriter> objects created by the <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> methods implement this interface and when created are immediately ready to write JSON-encoded data.</span></span> <span data-ttu-id="efaff-109">但是，如果用户要重用相同的 <xref:System.Xml.XmlDictionaryWriter> 对象将新 JSON 文档写入另一个输出流，则必须使用 <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> 方法将编写器初始化为相应的流。</span><span class="sxs-lookup"><span data-stu-id="efaff-109">But if a user wants to reuse the same <xref:System.Xml.XmlDictionaryWriter> object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="efaff-110"><xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> 创建的编写器可以处理 UTF-8 和 UTF-16（Little-Endian 或 Big-Endian）编码。</span><span class="sxs-lookup"><span data-stu-id="efaff-110">The writers created by <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> can handle the UTF-8 and the UTF-16 (big- or little-endian) encodings.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
