<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0c232415633e7dbf3574087f8d1e13220b236f59" /><Meta Name="ms.sourcegitcommit" Value="53b005dec6dcff97c7bac97cf446d9ae6bda93f0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/24/2020" /><Meta Name="ms.locfileid" Value="91208162" /></Metadata><TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextFieldParser extends System.Object implements class System.IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1f045-101">提供分析结构化文本文件的方法和属性。</span><span class="sxs-lookup"><span data-stu-id="1f045-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-102">`TextFieldParser`对象提供用于分析结构化文本文件的方法和属性。</span><span class="sxs-lookup"><span data-stu-id="1f045-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="1f045-103">使用分析文本文件的 `TextFieldParser` 方式类似于遍历文本文件，而使用 `ReadFields` 方法提取文本字段类似于拆分字符串。</span><span class="sxs-lookup"><span data-stu-id="1f045-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while using the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="1f045-104">`TextFieldParser`可以分析两种类型的文件：分隔或固定宽度。</span><span class="sxs-lookup"><span data-stu-id="1f045-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="1f045-105">某些属性（如 `Delimiters` 和） `HasFieldsEnclosedInQuotes` 仅在处理带分隔符的文件时才有意义，而 `FieldWidths` 属性仅在处理固定宽度的文件时才有意义。</span><span class="sxs-lookup"><span data-stu-id="1f045-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="1f045-106">下表列出了涉及对象的任务的示例 `Microsoft.VisualBasic.FileIO.TextFieldParser` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="1f045-107">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-107">To</span></span>|<span data-ttu-id="1f045-108">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-109">从带分隔符的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-109">Read from a delimited text file</span></span>|[<span data-ttu-id="1f045-110">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-110">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|<span data-ttu-id="1f045-111">从固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="1f045-112">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-112">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
|<span data-ttu-id="1f045-113">从具有多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="1f045-114">如何：读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-114">How to: Read From Text Files with Multiple Formats</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-115">此示例分析以制表符分隔的文本文件 `Bigfile` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-116">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-116">Objects (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-117">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-117">Parsing Text Files with the TextFieldParser Object</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="1f045-118">关于异常的疑难解答：Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="1f045-118">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1f045-119">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-120">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-120">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1f045-121"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-121"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1f045-122">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="1f045-122">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="1f045-123">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-123">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-124">创建一个新的 `TextFieldParser` 对象，用于分析由参数表示的文件或流 `stream` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-124">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-125"><paramref name="stream" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-125"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-126">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-126"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-127">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-127">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-128">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-128">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-129">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-129">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-130">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-130">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="1f045-131"><see cref="T:System.IO.TextReader" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-131"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="1f045-132">要分析的 <see cref="T:System.IO.TextReader" /> 流。</span><span class="sxs-lookup"><span data-stu-id="1f045-132">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="1f045-133">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-133">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-134">创建一个新的 `TextFieldParser` 对象，用于分析由参数表示的文件或流 `reader` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-134">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-135"><paramref name="reader" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-135"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-136">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-136">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-137">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-137">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-138">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-138">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-139">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-139">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1f045-140"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-140"><see langword="String" />.</span></span> <span data-ttu-id="1f045-141">要分析的文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="1f045-141">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="1f045-142">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-142">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-143">创建一个新的 `TextFieldParser` 对象，用于分析参数指定的文件 `path` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-143">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-144"><paramref name="path" /> 是一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="1f045-144"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-145">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-145">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-146">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-146">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-147">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-147">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-148">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-148">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1f045-149"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-149"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1f045-150">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="1f045-150">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1f045-151"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-151"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1f045-152">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-152">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1f045-153">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-153">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="1f045-154">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-154">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-155">创建一个新的 `TextFieldParser` 对象，用于分析由参数表示的文件或流 `stream` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-155">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1f045-156">使用特定的区域性设置编译一组字符并使用不同的区域性设置检索这些相同的字符时，这些字符可能无法可解释，并且可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f045-156">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-157"><paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-157"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-158">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-158"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-159">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-159">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-160">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-160">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-161">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-161">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-162">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-162">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1f045-163"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-163"><see langword="String" />.</span></span> <span data-ttu-id="1f045-164">要分析的文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="1f045-164">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1f045-165"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-165"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1f045-166">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-166">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1f045-167">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-167">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="1f045-168">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-168">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-169">创建一个新的 `TextFieldParser` 对象，用于分析参数指定的文件 `path` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-169">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1f045-170">使用特定的区域性设置编译一组字符并使用不同的区域性设置检索这些相同的字符时，这些字符可能无法可解释，并且可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f045-170">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-171"><paramref name="path" /> 是一个空字符串，或 <paramref name="defaultEncoding" /> 为<see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-171"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-172">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-172">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-173">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-173">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-174">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-174">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-175">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-175">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1f045-176"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-176"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1f045-177">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="1f045-177">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1f045-178"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-178"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1f045-179">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-179">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1f045-180">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-180">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="1f045-181"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-181"><see langword="Boolean" />.</span></span> <span data-ttu-id="1f045-182">指示是否在文件头查找字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="1f045-182">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="1f045-183">默认值为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-183">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="1f045-184">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-184">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-185">创建一个新的 `TextFieldParser` 对象，用于分析由参数表示的文件或流 `stream` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-185">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="1f045-186">如果 `detectEncoding` 参数为 `True` ，则此构造函数将尝试通过查看文件或流的前三个字节来检测编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-186">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="1f045-187">如果文件以适当的字节顺序标记开头，则它会自动识别 UTF-8、小字节序 Unicode 和大字节序 Unicode 文本。</span><span class="sxs-lookup"><span data-stu-id="1f045-187">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="1f045-188">否则，将使用指定的编码 `defaultEncoding` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-188">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1f045-189">使用特定的区域性设置编译一组字符并使用不同的区域性设置检索这些相同的字符时，这些字符可能无法可解释，并且可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f045-189">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-190"><paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-190"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-191">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-191"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-192">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-192">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-193">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-193">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-194">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-194">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-195">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-195">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="1f045-196"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-196"><see langword="String" />.</span></span> <span data-ttu-id="1f045-197">要分析的文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="1f045-197">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1f045-198"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-198"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1f045-199">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-199">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1f045-200">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-200">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="1f045-201"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-201"><see langword="Boolean" />.</span></span> <span data-ttu-id="1f045-202">指示是否在文件头查找字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="1f045-202">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="1f045-203">默认值为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-203">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="1f045-204">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-204">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-205">创建一个新的 `TextFieldParser` 对象，用于分析参数指定的文件 `path` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-205">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="1f045-206">如果 `detectEncoding` 参数为 `True` ，则此构造函数将尝试通过查看文件或流的前三个字节来检测编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-206">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="1f045-207">如果文件以适当的字节顺序标记开头，则它会自动识别 UTF-8、小字节序 Unicode 和大字节序 Unicode 文本。</span><span class="sxs-lookup"><span data-stu-id="1f045-207">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="1f045-208">否则，将使用指定的编码 `defaultEncoding` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-208">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1f045-209">使用特定的区域性设置编译一组字符并使用不同的区域性设置检索这些相同的字符时，这些字符可能无法可解释，并且可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f045-209">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-210"><paramref name="path" /> 是一个空字符串，或 <paramref name="defaultEncoding" /> 为<see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-210"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-211">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-211">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-212">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-212">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-213">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-213">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-214">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-214">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, defaultEncoding As Encoding, detectEncoding As Boolean, leaveOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1f045-215"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-215"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="1f045-216">要分析的流。</span><span class="sxs-lookup"><span data-stu-id="1f045-216">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="1f045-217"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-217"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="1f045-218">在无法从文件确定编码时要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-218">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="1f045-219">默认值为 <see cref="P:System.Text.Encoding.UTF8" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-219">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="1f045-220"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-220"><see langword="Boolean" />.</span></span> <span data-ttu-id="1f045-221">指示是否在文件头查找字节顺序标记。</span><span class="sxs-lookup"><span data-stu-id="1f045-221">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="1f045-222">默认值为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-222">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="1f045-223"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="1f045-223"><see langword="Boolean" />.</span></span> <span data-ttu-id="1f045-224">指示在 <see langword="TextFieldParser" /> 对象关闭时，是否将 <paramref name="stream" /> 保留为打开状态。</span><span class="sxs-lookup"><span data-stu-id="1f045-224">Indicates whether to leave <paramref name="stream" /> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="1f045-225">默认值为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-225">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="1f045-226">初始化 <see langword="TextFieldParser" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1f045-226">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-227">创建一个新的 `TextFieldParser` 对象，用于分析由参数表示的文件或流 `stream` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-227">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="1f045-228">如果 `detectEncoding` 参数为 `True` ，则此构造函数将尝试通过查看文件或流的前三个字节来检测编码。</span><span class="sxs-lookup"><span data-stu-id="1f045-228">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="1f045-229">如果文件以适当的字节顺序标记开头，则它会自动识别 UTF-8、小字节序 Unicode 和大字节序 Unicode 文本。</span><span class="sxs-lookup"><span data-stu-id="1f045-229">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="1f045-230">否则，将使用指定的编码 `defaultEncoding` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-230">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1f045-231">使用特定的区域性设置编译一组字符并使用不同的区域性设置检索这些相同的字符时，这些字符可能无法可解释，并且可能会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f045-231">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f045-232"><paramref name="stream" /> 或 <paramref name="defaultEncoding" /> 为 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-232"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-233">无法读取 <paramref name="stream" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-233"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-234">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-234">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-235">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-235">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-236">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-236">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-237">如何：在 Visual Basic 中读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-237">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-238">关闭当前的 <see langword="TextFieldParser" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="1f045-238">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1f045-239">此示例关闭 `TextFieldParser.FileReader` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-239">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-240">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-240">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-241">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-241">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[]? CommentTokens { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-242">定义注释标记。</span><span class="sxs-lookup"><span data-stu-id="1f045-242">Defines comment tokens.</span></span> <span data-ttu-id="1f045-243">注释标记是一个字符串，当位于行首时，指示该行是一个注释并且分析器应该忽略该行。</span><span class="sxs-lookup"><span data-stu-id="1f045-243">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="1f045-244">一个字符串数组，它包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象的所有注释标记。</span><span class="sxs-lookup"><span data-stu-id="1f045-244">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-245">这是一个高级成员;除非您单击 " **全部** " 选项卡，否则它不会显示在 IntelliSense 中。</span><span class="sxs-lookup"><span data-stu-id="1f045-245">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1f045-246">长度为零的注释标记将被忽略。</span><span class="sxs-lookup"><span data-stu-id="1f045-246">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f045-247">此示例指定对于 `TextFieldParser` ， `FileReader` 应忽略 ( ") 以单引号开头的行。</span><span class="sxs-lookup"><span data-stu-id="1f045-247">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-248">注释标记包含空白。</span><span class="sxs-lookup"><span data-stu-id="1f045-248">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-249">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-249">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-250">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-250">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-251">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-251">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-252">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-252">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[]? Delimiters { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-253">定义文本文件的分隔符。</span><span class="sxs-lookup"><span data-stu-id="1f045-253">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="1f045-254">一个字符串数组，它包含 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象的所有字段分隔符。</span><span class="sxs-lookup"><span data-stu-id="1f045-254">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-255">仅当属性设置为时，此属性才有意义 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> `FieldType.Delimited` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-255">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="1f045-256">还可以使用方法来定义文本文件的分隔符 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="1f045-256">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="1f045-257">下表列出了涉及属性的任务的示例 `Delimiters` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-257">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="1f045-258">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-258">To</span></span>|<span data-ttu-id="1f045-259">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-259">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-260">从带分隔符的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-260">Read from a delimited text file</span></span>|[<span data-ttu-id="1f045-261">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-261">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-262">此示例指定对象的分隔符 `TextFieldParser` `FileReader` 为逗号 ( ) 。</span><span class="sxs-lookup"><span data-stu-id="1f045-262">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-263">分隔符值设置为换行符、空字符串或 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-263">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-264">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-264">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-265">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-265">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1f045-266">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="1f045-266">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-267">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-267">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-268">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="1f045-268">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-269">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-269">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="1f045-270">布尔值。</span><span class="sxs-lookup"><span data-stu-id="1f045-270">Boolean.</span></span> <span data-ttu-id="1f045-271">若为 <see langword="True" />，释放托管资源和非托管资源；若为 <see langword="False" />，则只释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="1f045-271"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="1f045-272">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="1f045-272">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-273">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-273">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-274">如果在当前光标位置到文件末尾之间没有非空、非注释行，则返回 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-274">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value><span data-ttu-id="1f045-275">如果没有更多可供读取的数据，则为 <see langword="True" />；否则为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-275"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-276">在从文件读取时，可以使用此属性来确定要读取的数据的结尾。</span><span class="sxs-lookup"><span data-stu-id="1f045-276">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="1f045-277">下表列出了涉及属性的任务的示例 `EndOfData` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-277">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="1f045-278">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-278">To</span></span>|<span data-ttu-id="1f045-279">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-279">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-280">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-280">Read from a delimited file</span></span>|[<span data-ttu-id="1f045-281">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-281">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|<span data-ttu-id="1f045-282">从固定宽度的文件读取</span><span class="sxs-lookup"><span data-stu-id="1f045-282">Read from a fixed-width file</span></span>|[<span data-ttu-id="1f045-283">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-283">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-284">此示例使用 `EndofData` 属性，通过将文件中的所有字段循环使用 `TextFieldReader` `FileReader` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-284">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-285">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-285">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-286">返回导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行。</span><span class="sxs-lookup"><span data-stu-id="1f045-286">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="1f045-287">导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行。</span><span class="sxs-lookup"><span data-stu-id="1f045-287">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-288">如果未 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 引发任何异常，则返回空字符串。</span><span class="sxs-lookup"><span data-stu-id="1f045-288">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="1f045-289"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>属性可用于显示导致异常的行号。</span><span class="sxs-lookup"><span data-stu-id="1f045-289">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="1f045-290">下表列出了涉及属性的任务的示例 `ErrorLine` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-290">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="1f045-291">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-291">To</span></span>|<span data-ttu-id="1f045-292">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-292">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-293">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-293">Read from a delimited file</span></span>|[<span data-ttu-id="1f045-294">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-294">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|<span data-ttu-id="1f045-295">从固定宽度的文件读取</span><span class="sxs-lookup"><span data-stu-id="1f045-295">Read from a fixed-width file</span></span>|[<span data-ttu-id="1f045-296">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-296">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-297">此示例使用 `ErrorLine` 属性来显示导致当前异常的行 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 。</span><span class="sxs-lookup"><span data-stu-id="1f045-297">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-298">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-298">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-299">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-299">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-300">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-300">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-301">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-301">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-302">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-302">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement"><span data-ttu-id="1f045-303">Try...Catch...Finally 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-303">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-304">返回导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行的行号。</span><span class="sxs-lookup"><span data-stu-id="1f045-304">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="1f045-305">导致最近发生的 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 异常的行的行号。</span><span class="sxs-lookup"><span data-stu-id="1f045-305">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-306">如果未 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 引发任何异常，则返回-1。</span><span class="sxs-lookup"><span data-stu-id="1f045-306">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="1f045-307"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>属性可用于显示导致异常的行号。</span><span class="sxs-lookup"><span data-stu-id="1f045-307">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="1f045-308">在确定行号时，不会忽略空行和注释。</span><span class="sxs-lookup"><span data-stu-id="1f045-308">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="1f045-309">下表列出了涉及属性的任务的示例 `ErrorLineNumber` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-309">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="1f045-310">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-310">To</span></span>|<span data-ttu-id="1f045-311">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-311">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-312">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-312">Read from a delimited file</span></span>|[<span data-ttu-id="1f045-313">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-313">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|<span data-ttu-id="1f045-314">从固定宽度的文件读取</span><span class="sxs-lookup"><span data-stu-id="1f045-314">Read from a fixed-width file</span></span>|[<span data-ttu-id="1f045-315">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-315">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-316">此示例使用 `ErrorLineNumber` 属性来显示导致当前异常的行的位置 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 。</span><span class="sxs-lookup"><span data-stu-id="1f045-316">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-317">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-317">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-318">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-318">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-319">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-319">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-320">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-320">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-321">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-321">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement"><span data-ttu-id="1f045-322">Try...Catch...Finally 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-322">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[]? FieldWidths { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-323">表示正在分析的文本文件中每一列的宽度。</span><span class="sxs-lookup"><span data-stu-id="1f045-323">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="1f045-324">一个整数数组，它包含正在分析的文本文件中每一列的宽度。</span><span class="sxs-lookup"><span data-stu-id="1f045-324">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-325">仅当属性设置为时，此属性才有意义 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> `FieldType.FixedWidth` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-325">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="1f045-326">如果数组中的最后一项小于或等于零，则认为该字段的宽度是可变的。</span><span class="sxs-lookup"><span data-stu-id="1f045-326">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="1f045-327"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>方法还可用于设置字段宽度。</span><span class="sxs-lookup"><span data-stu-id="1f045-327">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="1f045-328">下表列出了涉及属性的任务的示例 `FieldWidths` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-328">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="1f045-329">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-329">To</span></span>|<span data-ttu-id="1f045-330">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-330">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-331">从固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-331">Read from a fixed-width text file</span></span>|[<span data-ttu-id="1f045-332">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-332">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-333">此示例读取文件 `ParserText.txt` ，并指定宽度; 第一列的宽度为5个字符，第二列是10，第三个为11，第四个为可变宽度</span><span class="sxs-lookup"><span data-stu-id="1f045-333">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-334">除数组最后一个条目外的任意位置中的宽度值小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="1f045-334">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-335">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-335">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-336">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-336">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-337">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-337">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-338">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-338">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-339">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-339">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="1f045-340">关于异常的疑难解答：Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="1f045-340">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance void Finalize() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-341">允许 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象在由垃圾回收功能回收之前尝试释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="1f045-341">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-342">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-342">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-343">指示在分析分隔的文件时是否用引号将字段括起来。</span><span class="sxs-lookup"><span data-stu-id="1f045-343">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value><span data-ttu-id="1f045-344">如果将字段用引号括起来，则为 <see langword="True" />；否则为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-344"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-345">这是一个高级成员;除非您单击 " **全部** " 选项卡，否则它不会显示在 IntelliSense 中。</span><span class="sxs-lookup"><span data-stu-id="1f045-345">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1f045-346">如果属性为 `True` ，则分析器假设字段括在引号中 ( "" ) 并且可以包含行尾。</span><span class="sxs-lookup"><span data-stu-id="1f045-346">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="1f045-347">例如，如果字段用引号引起来， `abc, "field2a,field2b", field3` 并且此属性为 `True` ，则括在引号中的所有文本都将按原样返回; 此示例将返回 `abc|field2a,field2b|field3` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-347">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="1f045-348">将此属性设置为 `False` 将使此示例返回 `abc|"field2a|field2b"|field3` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-348">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f045-349">此示例将的 `HasFieldsEnclosedInQuotes` 属性设置 `True` 为 `myReader` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-349">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-350">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-350">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-351">返回当前行号，如果流中没有更多字符，则返回 -1。</span><span class="sxs-lookup"><span data-stu-id="1f045-351">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="1f045-352">当前行号。</span><span class="sxs-lookup"><span data-stu-id="1f045-352">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-353">这是一个高级成员;除非您单击 " **全部** " 选项卡，否则它不会显示在 IntelliSense 中。</span><span class="sxs-lookup"><span data-stu-id="1f045-353">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1f045-354">在确定行号时，不会忽略空行和注释。</span><span class="sxs-lookup"><span data-stu-id="1f045-354">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f045-355">此示例在文本文件中搜索名称 "."，并报告在哪个行 () 出现此错误。</span><span class="sxs-lookup"><span data-stu-id="1f045-355">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-356">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-356">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PeekChars(int32 numberOfChars) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars"><span data-ttu-id="1f045-357">要读取的字符数。</span><span class="sxs-lookup"><span data-stu-id="1f045-357">The number of characters to read.</span></span> <span data-ttu-id="1f045-358">必需。</span><span class="sxs-lookup"><span data-stu-id="1f045-358">Required.</span></span></param>
        <summary><span data-ttu-id="1f045-359">读取指定数目的字符但不前移光标。</span><span class="sxs-lookup"><span data-stu-id="1f045-359">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="1f045-360">包含读取的指定数量的字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="1f045-360">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-361">`numberOfChars`该值必须小于该行中的字符总数。</span><span class="sxs-lookup"><span data-stu-id="1f045-361">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="1f045-362">如果不是，则返回的字符串 `PeekChars` 将被截断为行的长度。</span><span class="sxs-lookup"><span data-stu-id="1f045-362">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="1f045-363">空行将被忽略。</span><span class="sxs-lookup"><span data-stu-id="1f045-363">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="1f045-364">不返回行尾字符。</span><span class="sxs-lookup"><span data-stu-id="1f045-364">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="1f045-365">`PeekChars`方法不执行分析; 分隔字段内的行尾字符被解释为行的实际结尾。</span><span class="sxs-lookup"><span data-stu-id="1f045-365">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="1f045-366">下表列出了涉及方法的任务的示例 `PeekChars` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-366">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="1f045-367">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-367">To</span></span>|<span data-ttu-id="1f045-368">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-368">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-369">在分析字段之前确定字段的格式</span><span class="sxs-lookup"><span data-stu-id="1f045-369">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="1f045-370">如何：读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-370">How to: Read From Text Files with Multiple Formats</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-371">此示例使用 `PeekChars` 查找数据的末尾，并在该位置停止分析文件。</span><span class="sxs-lookup"><span data-stu-id="1f045-371">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-372"><paramref name="numberOfChars" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="1f045-372"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-373">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-373">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-374">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-374">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="1f045-375">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-375">Reading from Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[]? ReadFields ();" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] ReadFields() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-376">读取当前行的所有字段，以字符串数组的形式返回这些字段，并将光标前进到包含数据的下一行。</span><span class="sxs-lookup"><span data-stu-id="1f045-376">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="1f045-377">包含当前行的字段值的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="1f045-377">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-378">为了使用户能够分析多种格式的文本文件，该 `ReadFields` 方法将检查、和的值（ `TextFieldType` `Delimiters` `FieldWidths` 如果指定了这些值）。</span><span class="sxs-lookup"><span data-stu-id="1f045-378">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="1f045-379">用户需要适当地配置 `TextFieldType` 和 `FieldWidths` 或 `Delimiters` 属性。</span><span class="sxs-lookup"><span data-stu-id="1f045-379">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="1f045-380">如果 `TextFieldType` 设置为 `Delimited` ，并且 `Delimiters` 未设置，或者如果 `TextFieldType` 设置为 `FixedWidth` 和，则 `FieldWidths` 引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f045-380">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="1f045-381">如果 `ReadFields` 遇到空白行，将跳过这些行，并返回下一个非空行。</span><span class="sxs-lookup"><span data-stu-id="1f045-381">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="1f045-382">如果该 `ReadFields` 方法无法分析当前行，则会引发异常，并且不会移动到下一行。</span><span class="sxs-lookup"><span data-stu-id="1f045-382">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="1f045-383">这使应用程序能够再次尝试分析该行。</span><span class="sxs-lookup"><span data-stu-id="1f045-383">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="1f045-384">下表列出了涉及方法的任务的示例 `ReadFields` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-384">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="1f045-385">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-385">To</span></span>|<span data-ttu-id="1f045-386">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-386">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-387">从带分隔符的文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-387">Read from a delimited file</span></span>|[<span data-ttu-id="1f045-388">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-388">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|<span data-ttu-id="1f045-389">从固定宽度的文件读取</span><span class="sxs-lookup"><span data-stu-id="1f045-389">Read from a fixed-width file</span></span>|[<span data-ttu-id="1f045-390">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-390">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-391">此示例使用 `ReadFields` 方法从逗号分隔的文件中读取 `ParserText.txt` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-391">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="1f045-392">此示例将字段写入 `Testfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="1f045-392">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="1f045-393">不能使用指定格式分析字段。</span><span class="sxs-lookup"><span data-stu-id="1f045-393">A field cannot be parsed by using the specified format.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-394">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-394">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-395">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-395">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-396">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-396">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-397">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-397">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-398">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-398">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadLine() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-399">将当前行作为字符串返回，并将光标前进到下一行。</span><span class="sxs-lookup"><span data-stu-id="1f045-399">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="1f045-400">文件或流中的当前行。</span><span class="sxs-lookup"><span data-stu-id="1f045-400">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-401">`ReadLine`方法不执行分析; 分隔字段内的行尾字符被解释为行的实际结尾。</span><span class="sxs-lookup"><span data-stu-id="1f045-401">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="1f045-402">`Nothing` 如果到达了文件的末尾，则返回。</span><span class="sxs-lookup"><span data-stu-id="1f045-402">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f045-403">此示例读取文件并将 `ParserText.txt` 其写入 `Testfile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-403">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="1f045-404">如果不 `Testfile.txt` 存在，则由 `WriteAllText` 方法创建。</span><span class="sxs-lookup"><span data-stu-id="1f045-404">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="1f045-405">此示例将字段作为单个字符串写入;若要使每行显示在目标文件中各自的行上， `VbCrLf` 应在每行的末尾追加一个字符。</span><span class="sxs-lookup"><span data-stu-id="1f045-405">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-406">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-406">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-407">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-407">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadToEnd() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-408">读取文本文件的其余部分并作为一个字符串返回。</span><span class="sxs-lookup"><span data-stu-id="1f045-408">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="1f045-409">文件或流中的其余文本。</span><span class="sxs-lookup"><span data-stu-id="1f045-409">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-410">这是一个高级成员;除非您单击 " **全部** " 选项卡，否则它不会显示在 IntelliSense 中。</span><span class="sxs-lookup"><span data-stu-id="1f045-410">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="1f045-411">如果没有更多要读取的内容，因为已达到文件的末尾， `Nothing` 则返回。</span><span class="sxs-lookup"><span data-stu-id="1f045-411">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="1f045-412">`ReadToEnd`方法不会忽略空白行和注释。</span><span class="sxs-lookup"><span data-stu-id="1f045-412">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f045-413">此示例使用 `ReadToEnd` 方法读取整个文件 `ParserText.txt` ，并将其写入文件 `Testfile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-413">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="1f045-414">如果不 `Testfile.txt` 存在，则由 `WriteAllText` 方法创建。</span><span class="sxs-lookup"><span data-stu-id="1f045-414">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-415">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-415">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-416">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-416">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[]? delimiters);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDelimiters(string[] delimiters) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="1f045-417"><see langword="String" /> 类型的数组。</span><span class="sxs-lookup"><span data-stu-id="1f045-417">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="1f045-418">将读取器的分隔符设为指定的值，并将字段类型设为 <see langword="Delimited" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-418">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-419">`Delimiters`设置此方法后，将清除属性的现有内容。</span><span class="sxs-lookup"><span data-stu-id="1f045-419">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="1f045-420">此方法提供了一种方法来设置分隔符，而无需创建数组。</span><span class="sxs-lookup"><span data-stu-id="1f045-420">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="1f045-421">下表列出了涉及方法的任务的示例 `SetDelimiters` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-421">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="1f045-422">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-422">To</span></span>|<span data-ttu-id="1f045-423">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-423">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-424">分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-424">Parse a text file</span></span>|[<span data-ttu-id="1f045-425">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-425">Parsing Text Files with the TextFieldParser Object</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-426">此示例将打开一个文本字段分析器，并将分隔符定义为 `vbTab` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-426">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="1f045-427">将路径替换 `C:\logs\test.log` 为要分析的文件的路径和名称。</span><span class="sxs-lookup"><span data-stu-id="1f045-427">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1f045-428">分隔符为零长度 ()。</span><span class="sxs-lookup"><span data-stu-id="1f045-428">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-429">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-429">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-430">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-430">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-431">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-431">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFieldWidths(int32[] fieldWidths) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="1f045-432"><see langword="Integer" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="1f045-432">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="1f045-433">将读取器的分隔符设置为指定值。</span><span class="sxs-lookup"><span data-stu-id="1f045-433">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-434">`Delimiters`设置此属性时，将清除属性的现有内容。</span><span class="sxs-lookup"><span data-stu-id="1f045-434">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="1f045-435">此方法提供了一种方法来设置分隔符，而无需创建数组。</span><span class="sxs-lookup"><span data-stu-id="1f045-435">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="1f045-436">下表列出了涉及方法的任务的示例 `SetFieldWidths` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-436">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="1f045-437">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-437">To</span></span>|<span data-ttu-id="1f045-438">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-438">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-439">分析文本文件。</span><span class="sxs-lookup"><span data-stu-id="1f045-439">Parse a text file.</span></span>|[<span data-ttu-id="1f045-440">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-440">Parsing Text Files with the TextFieldParser Object</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-441">此示例将打开一个文本字段分析器，并将字段宽度定义为 `5` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-441">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="1f045-442">将路径替换 `C:\logs\test.log` 为要分析的文件的路径和名称。</span><span class="sxs-lookup"><span data-stu-id="1f045-442">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="1f045-443">下面的示例打开一个文本字段分析器，并将字段宽度定义为 `5` 、 `10` 和变量。</span><span class="sxs-lookup"><span data-stu-id="1f045-443">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="1f045-444">将路径替换 `C:\logs\test.log` 为要分析的文件的路径和名称。</span><span class="sxs-lookup"><span data-stu-id="1f045-444">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-445">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-445">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-446">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-446">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="textFieldParser.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1f045-447">释放由 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 对象使用的资源。</span><span class="sxs-lookup"><span data-stu-id="1f045-447">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1f045-448">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="1f045-448">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="1f045-449">它只能在 `TextFieldParser` 实例被强制转换为 <xref:System.IDisposable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="1f045-449">It can be used only when the `TextFieldParser` instance is cast to an <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="1f045-450">建议的替代方法是调用 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="1f045-450">The recommended alternative is to call the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose%2A> method.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-451">指定要分析的文件是分隔的还是固定宽度的。</span><span class="sxs-lookup"><span data-stu-id="1f045-451">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="1f045-452">一个 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 值，它指示要分析的文件是分隔的还是固定宽度的。</span><span class="sxs-lookup"><span data-stu-id="1f045-452">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-453">此属性的默认值为分隔。</span><span class="sxs-lookup"><span data-stu-id="1f045-453">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="1f045-454">下表列出了涉及属性的任务的示例 `TextFieldType` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-454">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="1f045-455">功能</span><span class="sxs-lookup"><span data-stu-id="1f045-455">To</span></span>|<span data-ttu-id="1f045-456">查看</span><span class="sxs-lookup"><span data-stu-id="1f045-456">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="1f045-457">从带分隔符的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-457">Read from a delimited text file</span></span>|[<span data-ttu-id="1f045-458">如何：读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-458">How to: Read From Comma-Delimited Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files)|  
|<span data-ttu-id="1f045-459">从固定宽度文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-459">Read from a fixed-width text file</span></span>|[<span data-ttu-id="1f045-460">如何：读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-460">How to: Read From Fixed-width Text Files</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files)|  
|<span data-ttu-id="1f045-461">从具有多种格式的文本文件中读取</span><span class="sxs-lookup"><span data-stu-id="1f045-461">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="1f045-462">如何：读取具有多种格式的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-462">How to: Read From Text Files with Multiple Formats</span></span>](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats)|  
  
   
  
## Examples  
 <span data-ttu-id="1f045-463">此示例创建一个 `TextFieldParser` 、 `FileReader` ，并指定它是分隔的。</span><span class="sxs-lookup"><span data-stu-id="1f045-463">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="1f045-464">此示例将创建一个 `TextFieldParser` ， `FileReader` 并将其指定为固定宽度。</span><span class="sxs-lookup"><span data-stu-id="1f045-464">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-465">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-465">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-466">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-466">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-467">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-467">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-468">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-468">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-469">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-469">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="1f045-470">关于异常的疑难解答：Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="1f045-470">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1f045-471">指示是否应移除字段值中的前导和尾随空白。</span><span class="sxs-lookup"><span data-stu-id="1f045-471">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value><span data-ttu-id="1f045-472">如果应移除字段值中的前导和尾随空白，则为 <see langword="True" />；否则为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="1f045-472"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f045-473">此属性的默认值为 `True`。</span><span class="sxs-lookup"><span data-stu-id="1f045-473">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f045-474">此示例创建一个 `TextFieldParser` ， `FileReader` 并将属性设置 `TrimWhiteSpace` 为 `True` 。</span><span class="sxs-lookup"><span data-stu-id="1f045-474">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/"><span data-ttu-id="1f045-475">对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1f045-475">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object"><span data-ttu-id="1f045-476">使用 TextFieldParser 对象分析文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-476">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files"><span data-ttu-id="1f045-477">如何：在 Visual Basic 中读取逗号分隔的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-477">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files"><span data-ttu-id="1f045-478">如何：在 Visual Basic 中读取固定宽度的文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-478">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats"><span data-ttu-id="1f045-479">如何：在 Visual Basic 中使用多种格式读取文本文件</span><span class="sxs-lookup"><span data-stu-id="1f045-479">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
