<Type Name="WebSuccessAuditEvent" FullName="System.Web.Management.WebSuccessAuditEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f826c5e8056eadeca62488eeb48f66e7f30e499" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89718299" /></Metadata><TypeSignature Language="C#" Value="public class WebSuccessAuditEvent : System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebSuccessAuditEvent extends System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebSuccessAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebSuccessAuditEvent&#xA;Inherits WebAuditEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebSuccessAuditEvent : System::Web::Management::WebAuditEvent" />
  <TypeSignature Language="F#" Value="type WebSuccessAuditEvent = class&#xA;    inherit WebAuditEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebAuditEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供有关成功安全事件的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET health monitoring 允许生产和运营人员管理已部署的 Web 应用程序。 <xref:System.Web.Management>命名空间包含负责打包应用程序运行状况数据的运行状况事件类型，以及负责处理此数据的提供程序类型。 它还包含在运行状况事件的管理过程中可帮助的支持类型。  
  
 <xref:System.Web.Management.WebSuccessAuditEvent>当与安全相关的操作成功时，将使用类。 例如，对 Web 请求的 URL 授权是成功的。  
  
 以下列表描述了 ASP.NET 为其引发类型的事件的功能 <xref:System.Web.Management.WebSuccessAuditEvent> ：  
  
-   文件授权。 审核成功的条件。 仅当 Windows 标识与请求关联时，ASP.NET 才会尝试进行文件授权。 相关事件审核代码为 <xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationSuccess> 。  
  
-   URL 授权。 它表示授予授权的 URL 资源的访问权限。 审核成功的条件。 相关事件审核代码为 <xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationSuccess> 。  
  
-   其他安全条件。 下面是相关事件代码的列表：  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>  
  
 当 <xref:System.Web.Management.WebSuccessAuditEvent> 引发时，ASP.NET 运行状况监视会递增相关的 "审核成功事件" 性能计数器，然后检查 `healthMonitoring` 配置以确定是否有任何提供程序订阅该事件。 如果提供程序订阅该事件，则 ASP.NET 会将事件调度到它们以进行处理。  
  
> [!NOTE]
>  若要在系统监视器 (PerfMon) 中查看 "已引发审核成功事件" 性能计数器，请在 "**添加计数器**" 窗口中选择 "**性能对象**" 下拉列表中的 " **ASP.NET** "，选择 "**引发的审核成功事件**性能计数器"，然后单击 "**添加**" 按钮。 有关详细信息，请参阅 [监视 ASP.NET 应用程序性能](https://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5)。  
  
 由于成功审核表示预期条件，因此你可能不想订阅它们。 若要为站点提供访问审核，您可以订阅它们。  
  
> [!NOTE]
>  在大多数情况下，你将能够使用已实现的 ASP.NET health 监视类型，并且将通过在 "配置" 部分中指定值来控制运行状况监视系统 `healthMonitoring` 。 还可以从运行状况监视类型派生，以创建自己的自定义事件和提供程序。 有关从类派生的示例 <xref:System.Web.Management.WebSuccessAuditEvent> ，请参阅本主题中提供的示例。  
  
   
  
## Examples  
 下面的代码示例演示如何从 <xref:System.Web.Management.WebSuccessAuditEvent> 类派生以创建自定义审核事件。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#1)]  
  
 下面的示例摘自配置文件，该文件使 ASP.NET 运行状况监视能够使用事件。  
  
```  
<healthMonitoring   
..enabled="true"  
..heartBeatInterval="0">   
  <providers>  
    <add name="EventLogProvider"   
    type="System.Web.Management.EventLogWebEventProvider,  
    System.Web,Version=2.0.3600.0,Culture=neutral,  
    PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  <eventMappings>  
    <add  name="SampleWebSuccessAuditEvent"   
      type="SamplesAspNet.SampleWebSuccessAuditEvent,  
      websuccessauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  <rules>  
    <add name="Custom Failure Audit Default"  
      eventName=" SampleWebFailureAuditEvent "  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebAuditEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
    <related type="Article" href="https://msdn.microsoft.com/library/e003f224-70fe-4cd8-a71a-2dc81e2d7e4c">ASP.NET 运行状况监视概述</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebSuccessAuditEvent : string * obj * int -&gt; System.Web.Management.WebSuccessAuditEvent" Usage="new System.Web.Management.WebSuccessAuditEvent (message, eventSource, eventCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">事件说明。</param>
        <param name="eventSource">作为事件源的对象。</param>
        <param name="eventCode">与该事件关联的代码。 实现自定义事件时，事件代码必须大于 <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />。</param>
        <summary>使用所提供的参数初始化 <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数由 ASP.NET health 监视系统在内部使用。 你永远不会使用它来实例化 <xref:System.Web.Management.WebSuccessAuditEvent> 对象，但你可以在实现继承自此类的事件类型时调用此构造函数。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>构造函数不应在代码中直接使用。 它由 ASP.NET 调用。 <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>从类派生时，可以调用构造函数 <xref:System.Web.Management.WebSuccessAuditEvent> 。  
  
   
  
## Examples  
 下面的代码示例演示如何在类中调用此构造函数 `SampleWebSuccessAuditEvent` 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.Management.WebSuccessAuditEvent> 。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebSuccessAuditEvent : string * obj * int * int -&gt; System.Web.Management.WebSuccessAuditEvent" Usage="new System.Web.Management.WebSuccessAuditEvent (message, eventSource, eventCode, eventDetailCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">事件说明。</param>
        <param name="eventSource">作为事件源的对象。</param>
        <param name="eventCode">与该事件关联的代码。 实现自定义事件时，事件代码必须大于 <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />。</param>
        <param name="eventDetailCode">用于指定事件的详细标识符的 <see cref="T:System.Web.Management.WebEventCodes" /> 值。</param>
        <summary>使用所提供的参数初始化 <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数由 ASP.NET health 监视系统在内部使用。 你永远不会使用它来实例化 <xref:System.Web.Management.WebSuccessAuditEvent> 对象，但你可以在实现继承自此类的事件类型时调用此构造函数。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>构造函数不应在代码中直接使用。 它由 ASP.NET 调用。 <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>从类派生时，可以调用构造函数 <xref:System.Web.Management.WebSuccessAuditEvent> 。  
  
   
  
## Examples  
 下面的代码示例演示如何在类中调用此构造函数 `SampleWebSuccessAuditEvent` 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.Management.WebSuccessAuditEvent> 。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected internal override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.IncrementPerfCounters" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub IncrementPerfCounters ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void IncrementPerfCounters();" />
      <MemberSignature Language="F#" Value="override this.IncrementPerfCounters : unit -&gt; unit" Usage="webSuccessAuditEvent.IncrementPerfCounters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>递增“引发的审核成功事件”性能计数器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "引发的审核成功事件" 性能计数器跟踪自应用程序启动以来引发的成功审核事件数。 此方法还调用 parent <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A> 方法，这会递增引发的事件计数器。 此计数器跟踪引发的事件总数。  
  
 若要在系统监视器 (PerfMon) 中查看这些性能计数器，请在 " **添加计数器** " 窗口中选择 " **ASP.NET** "，从 " **性能对象** " 下拉列表中选择要查看的性能计数器，然后单击 " **添加** " 按钮。 有关详细信息，请参阅 [监视 ASP.NET 应用程序性能](https://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
