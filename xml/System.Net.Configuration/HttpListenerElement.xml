<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ebfc69c2cace7684af18597ec5901bc9b4c971d7" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953847" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示配置文件中的 HttpListener 元素。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类对应于 \<httpListener > 元素（网络设置）配置元素。 此类提供对可以存储在配置文件中的信息的编程访问。  
  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 属性指示 <xref:System.Net.HttpListener> 是否使用原始非转义 URI 而不是转换的 URI （其中任何百分比编码值都已转换）并执行其他规范化步骤。  
  
 当 <xref:System.Net.HttpListener> 实例通过 `http.sys` 服务收到请求时，它会创建 `http.sys`提供的 URI 字符串的实例，并将其公开为 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> 属性。  
  
 `http.sys` 服务公开了两个请求 URI 字符串：  
  
-   原始 URI  
  
-   转换的 URI  
  
 原始 URI 是 HTTP 请求的请求行中提供的 <xref:System.Uri?displayProperty=nameWithType>：  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 `http.sys` 为上述请求提供的原始 URI 为 "/path/"。 这表示 HTTP 谓词后的字符串，因为它是通过网络发送的。  
  
 `http.sys` 服务通过使用 HTTP 请求行中提供的 URI 和主机标头确定请求应转发到的源服务器，从请求中提供的信息创建转换的 URI。 这是通过将请求中的信息与一组已注册的 URI 前缀进行比较来完成的。 HTTP 服务器 SDK 文档将此转换的 URI 称为[HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108)结构。  
  
 为了能够将请求与已注册的 URI 前缀进行比较，需要对请求进行一些规范化。 对于上面的示例，转换后的 URI 如下所示：  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` 服务将 <xref:System.Uri.Host%2A?displayProperty=nameWithType> 属性值与请求行中的字符串结合起来，以创建转换的 URI。 此外，`http.sys` 和 <xref:System.Uri?displayProperty=nameWithType> 类还会执行以下操作：  
  
-   取消转义所有百分比编码值。  
  
-   将百分号编码的非 ASCII 字符转换为 UTF-16 字符表示形式。 请注意，支持 UTF-8 和 ANSI/DBCS 字符以及 Unicode 字符（使用% uXXXX 格式的 Unicode 编码）。  
  
-   执行其他规范化步骤，如路径压缩。  
  
 由于请求不包含任何有关用于百分比编码值的编码的信息，因此只需分析百分比编码的值就不能确定正确的编码。  
  
 因此 `http.sys` 提供了两个注册表项用于修改进程：  
  
|注册表项|默认值|说明|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|如果为零，则 `http.sys` 仅接受 UTF-8 编码的 Url。<br /><br /> 如果非零，则 `http.sys` 还会接受请求中 ANSI 编码或 DBCS 编码的 Url。|  
|FavorUTF8|1|如果非零，则 `http.sys` 始终首先尝试将 URL 解码为 UTF-8;如果该转换失败并且 EnableNonUTF8 为非零，则 Http.sys 会尝试将其解码为 ANSI 或 DBCS。<br /><br /> 如果为零（并且 EnableNonUTF8 为非零），`http.sys` 将尝试将其解码为 ANSI 或 DBCS;如果未成功，则它将尝试 UTF-8 转换。|  
  
 <xref:System.Net.HttpListener> 收到请求时，它会将转换的 URI 从 `http.sys` 作为输入 <xref:System.Net.HttpListenerRequest.Url%2A> 属性。  
  
 除了 Uri 中的字符和数字以外，还需要支持字符。 例如，以下 URI 用于检索客户编号 "1/3812" 的客户信息：  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 请注意 Uri （% 2F）中的百分号编码的斜杠。 这是必需的，因为在这种情况下，斜杠字符表示数据而不是路径分隔符。  
  
 将字符串传递到 Uri 构造函数将导致以下 URI：  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 将路径拆分为其段将导致以下元素：  
  
 `Customer('1`  
  
 `3812')`  
  
 这不是请求发送方的意图。  
  
 如果 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 属性设置为 false，则当 <xref:System.Net.HttpListener> 收到请求时，它将使用原始 URI，而不是将转换的 URI 作为 <xref:System.Net.HttpListenerRequest.Url%2A> 属性的输入 `http.sys`。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/network/">网络设置架构</related>
    <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt; 元素（网络设置）</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Configuration.HttpListenerElement" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于 <see cref="T:System.Net.HttpListener" /> 对象的默认超时元素。</summary>
        <value>用于 <see cref="T:System.Net.HttpListener" /> 对象的超时元素。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Net.HttpListener" /> 是否使用未经转义的原始 URI，而非经过转换的 URI。</summary>
        <value>一个布尔值，该值指示 <see cref="T:System.Net.HttpListener" /> 是否使用未经转义的原始 URI，而非经过转换的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 属性指示 <xref:System.Net.HttpListener> 是否使用原始非转义 URI 而不是转换的 URI （其中任何百分比编码值都已转换）并执行其他规范化步骤。  
  
 当 <xref:System.Net.HttpListener> 实例通过 `http.sys` 服务收到请求时，它会创建 `http.sys`提供的 URI 字符串的实例，并将其公开为 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> 属性。  
  
 `http.sys` 服务公开了两个请求 URI 字符串：  
  
-   原始 URI  
  
-   转换的 URI  
  
 原始 URI 是 HTTP 请求的请求行中提供的 <xref:System.Uri?displayProperty=nameWithType>：  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 `http.sys` 为上述请求提供的原始 URI 为 "/path/"。 这表示 HTTP 谓词后的字符串，因为它是通过网络发送的。  
  
 `http.sys` 服务通过使用 HTTP 请求行中提供的 URI 和主机标头确定请求应转发到的源服务器，从请求中提供的信息创建转换的 URI。 这是通过将请求中的信息与一组已注册的 URI 前缀进行比较来完成的。 HTTP 服务器 SDK 文档将此转换的 URI 称为[HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108)结构。  
  
 为了能够将请求与已注册的 URI 前缀进行比较，需要对请求进行一些规范化。 对于上面的示例，转换后的 URI 如下所示：  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` 服务将 <xref:System.Uri.Host%2A?displayProperty=nameWithType> 属性值与请求行中的字符串结合起来，以创建转换的 URI。 此外，`http.sys` 和 <xref:System.Uri?displayProperty=nameWithType> 类还会执行以下操作：  
  
-   取消转义所有百分比编码值。  
  
-   将百分号编码的非 ASCII 字符转换为 UTF-16 字符表示形式。 请注意，支持 UTF-8 和 ANSI/DBCS 字符以及 Unicode 字符（使用% uXXXX 格式的 Unicode 编码）。  
  
-   执行其他规范化步骤，如路径压缩。  
  
 由于请求不包含任何有关用于百分比编码值的编码的信息，因此只需分析百分比编码的值就不能确定正确的编码。  
  
 因此 `http.sys` 提供了两个注册表项用于修改进程：  
  
|注册表项|默认值|说明|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|如果为零，则 `http.sys` 仅接受 UTF-8 编码的 Url。<br /><br /> 如果非零，则 `http.sys` 还会接受请求中 ANSI 编码或 DBCS 编码的 Url。|  
|FavorUTF8|1|如果非零，则 `http.sys` 始终首先尝试将 URL 解码为 UTF-8;如果该转换失败并且 EnableNonUTF8 为非零，则 Http.sys 会尝试将其解码为 ANSI 或 DBCS。<br /><br /> 如果为零（并且 EnableNonUTF8 为非零），`http.sys` 将尝试将其解码为 ANSI 或 DBCS;如果未成功，则它将尝试 UTF-8 转换。|  
  
 <xref:System.Net.HttpListener> 收到请求时，它会将转换的 URI 从 `http.sys` 作为输入 <xref:System.Net.HttpListenerRequest.Url%2A> 属性。  
  
 除了 Uri 中的字符和数字以外，还需要支持字符。 例如，以下 URI 用于检索客户编号 "1/3812" 的客户信息：  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 请注意 Uri （% 2F）中的百分号编码的斜杠。 这是必需的，因为在这种情况下，斜杠字符表示数据而不是路径分隔符。  
  
 将字符串传递到 Uri 构造函数将导致以下 URI：  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 将路径拆分为其段将导致以下元素：  
  
 `Customer('1`  
  
 `3812')`  
  
 这不是请求发送方的意图。  
  
 如果 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> 属性设置为 false，则当 <xref:System.Net.HttpListener> 收到请求时，它将使用原始 URI，而不是将转换的 URI 作为 <xref:System.Net.HttpListenerRequest.Url%2A> 属性的输入 `http.sys`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/network/">网络设置架构</related>
        <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt; 元素（网络设置）</related>
      </Docs>
    </Member>
  </Members>
</Type>
