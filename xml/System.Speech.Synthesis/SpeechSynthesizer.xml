<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d3ca5fa899ed39eb78dde170e1d685bfb3cd925" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86589587" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="5072d-101">提供对已安装的语音合成引擎的功能的访问。</span><span class="sxs-lookup"><span data-stu-id="5072d-101">Provides access to the functionality of an installed speech synthesis engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-102">当你创建新的 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象时，它将使用默认系统声音。</span><span class="sxs-lookup"><span data-stu-id="5072d-102">When you create a new <xref:System.Speech.Synthesis.SpeechSynthesizer> object, it uses the default system voice.</span></span> <span data-ttu-id="5072d-103">若要将配置 <xref:System.Speech.Synthesis.SpeechSynthesizer> 为使用其中一个安装的语音合成 (文本到语音) 声音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-103">To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method.</span></span> <span data-ttu-id="5072d-104">若要获取有关已安装的声音的信息，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类。</span><span class="sxs-lookup"><span data-stu-id="5072d-104">To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.</span></span>  
  
 <span data-ttu-id="5072d-105">此类还可控制语音合成的以下方面：</span><span class="sxs-lookup"><span data-stu-id="5072d-105">This class also provides control over the following aspects of speech synthesis:</span></span>  
  
-   <span data-ttu-id="5072d-106">若要为对象配置输出 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A> 、、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-106">To configure the output for the <xref:System.Speech.Synthesis.SpeechSynthesizer> object, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.</span></span>  
  
-   <span data-ttu-id="5072d-107">若要生成语音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-107">To generate speech, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span> <span data-ttu-id="5072d-108"><xref:System.Speech.Synthesis.SpeechSynthesizer>可以从文本、 <xref:System.Speech.Synthesis.Prompt> 或 <xref:System.Speech.Synthesis.PromptBuilder> 对象或[语音合成标记语言（ (SSML) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)）生成语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-108">The <xref:System.Speech.Synthesis.SpeechSynthesizer> can produce speech from text, a <xref:System.Speech.Synthesis.Prompt> or <xref:System.Speech.Synthesis.PromptBuilder> object, or from [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).</span></span>  
  
-   <span data-ttu-id="5072d-109">若要暂停和继续语音合成，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-109">To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.</span></span>  
  
-   <span data-ttu-id="5072d-110">若要添加或删除字典，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-110">To add or remove lexicons, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> methods.</span></span> <span data-ttu-id="5072d-111"><xref:System.Speech.Synthesis.SpeechSynthesizer>可以使用一个或多个词典来指导其单词的发音。</span><span class="sxs-lookup"><span data-stu-id="5072d-111">The <xref:System.Speech.Synthesis.SpeechSynthesizer> can use one or more lexicons to guide its pronunciation of words.</span></span>  
  
-   <span data-ttu-id="5072d-112">若要修改语音输出的传送，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-112">To modify the delivery of speech output, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> properties.</span></span>  
  
 <span data-ttu-id="5072d-113">在出现 <xref:System.Speech.Synthesis.SpeechSynthesizer> 提示时，引发事件时引发事件： (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>) 。</span><span class="sxs-lookup"><span data-stu-id="5072d-113">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises events when it encounters certain features in prompts: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>).</span></span> <span data-ttu-id="5072d-114">它还会引发报告开始 (的事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) 和结束 (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 说话操作的) ，并在说话语音 (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>) 。</span><span class="sxs-lookup"><span data-stu-id="5072d-114">It also raises events that report on the start (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) and end (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) of speak operations and on the change of the speaking voice (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5072d-115">每次释放对 <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Speech.Synthesis.SpeechSynthesizer>。</span><span class="sxs-lookup"><span data-stu-id="5072d-115">Always call <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> before you release your last reference to the <xref:System.Speech.Synthesis.SpeechSynthesizer>.</span></span> <span data-ttu-id="5072d-116">否则，在垃圾回收器调用 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象的 <xref:System.Object.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="5072d-116">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Speech.Synthesis.SpeechSynthesizer> object's <xref:System.Object.Finalize%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-117">下面的示例是一个控制台应用程序的一部分，该应用程序初始化 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象并讲述一个字符串。</span><span class="sxs-lookup"><span data-stu-id="5072d-117">The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and speaks a string.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)"><span data-ttu-id="5072d-118">语音合成</span><span class="sxs-lookup"><span data-stu-id="5072d-118">Speech Synthesis</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-119">初始化 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="5072d-119">Initializes a new instance of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-120">初始化新的实例时 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，它将使用默认系统语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-120">When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, it uses the default system voice.</span></span> <span data-ttu-id="5072d-121">若要将配置 <xref:System.Speech.Synthesis.SpeechSynthesizer> 为使用其中一个安装的语音合成 (文本到语音) 声音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-121">To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis (text-to-speech) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method.</span></span> <span data-ttu-id="5072d-122">若要获取有关已安装的声音的信息，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类。</span><span class="sxs-lookup"><span data-stu-id="5072d-122">To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLexicon (uri As Uri, mediaType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="5072d-123">词典信息的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-123">The location of the lexicon information.</span></span></param>
        <param name="mediaType"><span data-ttu-id="5072d-124">词典的媒体类型。</span><span class="sxs-lookup"><span data-stu-id="5072d-124">The media type of the lexicon.</span></span> <span data-ttu-id="5072d-125">媒体类型值不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="5072d-125">Media type values are not case sensitive.</span></span></param>
        <summary><span data-ttu-id="5072d-126">将 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 添加到该对象的词典中。</span><span class="sxs-lookup"><span data-stu-id="5072d-126">Adds a lexicon to the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-127">发音词典是单词或短语的集合及其发音，其中包括来自支持的拼音字母表中的字母和字符。</span><span class="sxs-lookup"><span data-stu-id="5072d-127">A pronunciation lexicon is a collection of words or phrases together with their pronunciations, which consist of letters and characters from a supported phonetic alphabet.</span></span> <span data-ttu-id="5072d-128">在应用程序中，可以使用字典为专用词汇指定自定义发音。</span><span class="sxs-lookup"><span data-stu-id="5072d-128">You can use a lexicon to specify custom pronunciations for specialized vocabulary in your application.</span></span>  
  
 <span data-ttu-id="5072d-129">外部词典文件中指定的发音优先于语音合成器的内部词典或词典的发音。</span><span class="sxs-lookup"><span data-stu-id="5072d-129">Pronunciations specified in an external lexicon file take precedence over the pronunciations of the speech synthesizer's internal lexicon or dictionary.</span></span> <span data-ttu-id="5072d-130">但是，在使用、或方法创建的提示中，以内联方式指定的发音 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> 优先于在任何词典中指定的发音。</span><span class="sxs-lookup"><span data-stu-id="5072d-130">However, pronunciations specified inline in prompts created with any of the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods take precedence over pronunciations specified in any lexicon.</span></span> <span data-ttu-id="5072d-131">内嵌发音仅适用于单词的单个匹配项。</span><span class="sxs-lookup"><span data-stu-id="5072d-131">Inline pronunciations apply only to a single occurrence of a word.</span></span> <span data-ttu-id="5072d-132">有关详细信息，请参阅 [词典和拼音字母表](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) 。</span><span class="sxs-lookup"><span data-stu-id="5072d-132">See [Lexicons and Phonetic Alphabets](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) for more information.</span></span>  
  
 <span data-ttu-id="5072d-133">您可以向一个对象添加多个词典 <xref:System.Speech.Synthesis.SpeechSynthesizer> 。对于参数，当前支持两个值 `mediaType` ：</span><span class="sxs-lookup"><span data-stu-id="5072d-133">You can add multiple lexicons to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object.Two values are currently supported for the `mediaType` parameter:</span></span>  
  
-   <span data-ttu-id="5072d-134">值 `application/pls+xml` 指示词典符合 [发音词典规范 (PLS) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201766)。</span><span class="sxs-lookup"><span data-stu-id="5072d-134">The value `application/pls+xml` indicates that the lexicon conforms to the [Pronunciation Lexicon Specification (PLS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201766).</span></span> <span data-ttu-id="5072d-135">这是要使用的首选格式。</span><span class="sxs-lookup"><span data-stu-id="5072d-135">This is the preferred format to use.</span></span>  
  
-   <span data-ttu-id="5072d-136">该值 `application/vdn.ms-sapi-lex` 指示词典格式是一种 Microsoft 专有格式的未压缩词典。</span><span class="sxs-lookup"><span data-stu-id="5072d-136">The value `application/vdn.ms-sapi-lex` indicates that the lexicon format is Uncompressed Lexicon, which is a Microsoft-proprietary format.</span></span> <span data-ttu-id="5072d-137">这是旧格式，建议使用上述 PLS 格式。</span><span class="sxs-lookup"><span data-stu-id="5072d-137">This is a legacy format and we recommend that you use the PLS format described above.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-138">下面的示例演示添加和删除包含单词 "blue" 的自定义发音的字典的效果。</span><span class="sxs-lookup"><span data-stu-id="5072d-138">The following example demonstrates the effect of adding and removing a lexicon that contains a custom pronunciation for the word "blue".</span></span> <span data-ttu-id="5072d-139">字典将 "blue" 的发音定义为 "bleep"。</span><span class="sxs-lookup"><span data-stu-id="5072d-139">The lexicon defines the pronunciation of "blue" to sound like "bleep".</span></span> <span data-ttu-id="5072d-140">加载词典时，语音合成器使用词典中定义的发音。</span><span class="sxs-lookup"><span data-stu-id="5072d-140">While the lexicon is loaded, the speech synthesizer uses the pronunciation defined in the lexicon.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="5072d-141">以下是词典文件 pls 的内容：</span><span class="sxs-lookup"><span data-stu-id="5072d-141">Following are the contents of the lexicon file Blue.pls:</span></span>  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-142"><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 在提示中遇到书签时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-142">Raised when the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> encounters a bookmark in a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-143"><xref:System.Speech.Synthesis.SpeechSynthesizer>当处理 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 、、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 或方法中的任何时，将引发此事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-143">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span> <span data-ttu-id="5072d-144">有关与事件关联的数据的信息，请参阅 <xref:System.Speech.Synthesis.BookmarkReachedEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-144">For information about data associated with the event, see <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.</span></span>  
  
 <span data-ttu-id="5072d-145">您可以使用方法添加书签 <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-145">You can add bookmarks using the <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-146">下面的示例创建一个提示，其中包含两个书签，并将输出发送到 WAV 文件以进行播放。</span><span class="sxs-lookup"><span data-stu-id="5072d-146">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="5072d-147">事件的处理程序会 <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> 在事件引发到控制台时写入书签的名称及其在音频流中的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-147">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-148">处置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象并释放会话期间使用的资源。</span><span class="sxs-lookup"><span data-stu-id="5072d-148">Disposes the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-149">方法在未能调用 <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> 的情况下的事件中充当防护措施来清理资源。</span><span class="sxs-lookup"><span data-stu-id="5072d-149">Acts as a safeguard to clean up resources in the event that the <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> method is not called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-150">获取 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 正在讲话的提示。</span><span class="sxs-lookup"><span data-stu-id="5072d-150">Gets the prompt that the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> is speaking.</span></span></summary>
        <returns><span data-ttu-id="5072d-151">返回当前正在朗读的提示对象。</span><span class="sxs-lookup"><span data-stu-id="5072d-151">Returns the prompt object that is currently being spoken.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5072d-152">返回系统上当前安装的语音合成（文字到语音）语音的集合。</span><span class="sxs-lookup"><span data-stu-id="5072d-152">Returns the collection of speech synthesis (text-to-speech) voices that are currently installed on the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-153">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法将验证每个声音 (的文本到语音转换引擎是否在注册表中找到) 满足某些最低标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-153">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices (engines for text-to-speech) it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-154">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-154">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-155">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-155">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-156">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-156">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-157">返回所有安装的语音合成（文字到语音）语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-157">Returns all of the installed speech synthesis (text-to-speech) voices.</span></span></summary>
        <returns><span data-ttu-id="5072d-158">返回当前安装在系统的语音的只读集合。</span><span class="sxs-lookup"><span data-stu-id="5072d-158">Returns a read-only collection of the voices currently installed on the system.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-159">语音是系统上安装的语音合成 (文本到语音转换或 TTS) 的引擎。</span><span class="sxs-lookup"><span data-stu-id="5072d-159">A voice is an engine for speech synthesis (text-to-speech or TTS) that is installed on the system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-160">下面的示例是一个控制台应用程序的一部分，该应用程序初始化 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象并输出到控制台，其中列出了语音) 合成 (引擎，并演示了每个语音可用的信息。</span><span class="sxs-lookup"><span data-stu-id="5072d-160">The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="5072d-161">语音必须支持的区域设置。</span><span class="sxs-lookup"><span data-stu-id="5072d-161">The locale that the voice must support.</span></span></param>
        <summary><span data-ttu-id="5072d-162">返回支持特定区域设置的所有安装的语音合成（文字到语音）语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-162">Returns all of the installed speech synthesis  (text-to-speech) voices that support a specific locale.</span></span></summary>
        <returns><span data-ttu-id="5072d-163">返回当前安装在支持指定区域设置的系统的语音的只读集合。</span><span class="sxs-lookup"><span data-stu-id="5072d-163">Returns a read-only collection of the voices currently installed on the system that support the specified locale.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-164">如果任何已安装的声音都不支持指定的区域设置，则此方法将返回一个空集合。</span><span class="sxs-lookup"><span data-stu-id="5072d-164">If none of the installed voices support the specified locale, this method returns an empty collection.</span></span>  
  
 <span data-ttu-id="5072d-165">Microsoft Windows 和 Speech API 接受所有有效的语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="5072d-165">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="5072d-166">若要使用 Culture 属性中指定的语言执行文本到语音转换，必须安装支持该语言-国家/地区代码的语音合成引擎。</span><span class="sxs-lookup"><span data-stu-id="5072d-166">To perform text-to-speech using the language specified in the Culture property, a speech synthesis engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="5072d-167">Microsoft Windows 7 随附的语音合成引擎使用以下语言-国家/地区代码：</span><span class="sxs-lookup"><span data-stu-id="5072d-167">The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5072d-168">en-us。</span><span class="sxs-lookup"><span data-stu-id="5072d-168">en-US.</span></span> <span data-ttu-id="5072d-169">英语（美国）</span><span class="sxs-lookup"><span data-stu-id="5072d-169">English (United States)</span></span>  
  
-   <span data-ttu-id="5072d-170">zh-chs-CN。</span><span class="sxs-lookup"><span data-stu-id="5072d-170">zh-CN.</span></span> <span data-ttu-id="5072d-171">中文（中国）</span><span class="sxs-lookup"><span data-stu-id="5072d-171">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5072d-172">zh-chs-幼圆。</span><span class="sxs-lookup"><span data-stu-id="5072d-172">zh-TW.</span></span> <span data-ttu-id="5072d-173">中文（台湾）</span><span class="sxs-lookup"><span data-stu-id="5072d-173">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5072d-174">还允许使用两个字母的语言代码，例如 "en"。</span><span class="sxs-lookup"><span data-stu-id="5072d-174">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-175">下面的示例是一个控制台应用程序的一部分，该应用程序初始化 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象并向控制台输出支持 en-us 区域设置的已安装语音列表。</span><span class="sxs-lookup"><span data-stu-id="5072d-175">The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices that support the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-176">暂停 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="5072d-176">Pauses the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-177">当音素达到时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-177">Raised when a phoneme is reached.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-178">音素是书写语言的基本组成部分，通常是字母 (或表示一个或多个不同声音的两个字母) 的组合。</span><span class="sxs-lookup"><span data-stu-id="5072d-178">A phoneme is a basic component of written language, typically a letter of an alphabet (or the combination of two letters) that represents one or more distinct sounds.</span></span> <span data-ttu-id="5072d-179">例如，字母 "c" 是在 "cinder" 中听起来像 "s" 的音素，或类似于 "catch" 中的 "k"。</span><span class="sxs-lookup"><span data-stu-id="5072d-179">For example, the letter "c" is a phoneme that may sound like "s" in "cinder", or like "k" in "catch".</span></span> <span data-ttu-id="5072d-180">书面字词是音素的行为。</span><span class="sxs-lookup"><span data-stu-id="5072d-180">A written word is an assemblage of phonemes.</span></span> <span data-ttu-id="5072d-181">更改 word 中的音素将更改其拼写。</span><span class="sxs-lookup"><span data-stu-id="5072d-181">Changing a phoneme in a word will alter its spelling.</span></span>  
  
 <span data-ttu-id="5072d-182"><xref:System.Speech.Synthesis.SpeechSynthesizer>实例 <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> 为构成音素的单词的每个部分生成一个事件。</span><span class="sxs-lookup"><span data-stu-id="5072d-182">A <xref:System.Speech.Synthesis.SpeechSynthesizer> instance generates a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event for each portion of a word that constitutes a phoneme.</span></span> <span data-ttu-id="5072d-183">例如，对于 "主题" 一词，会生成三个 <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> 事件：一个用于 "th" 声音，一个用于 "e" 声，另一个用于 "m" 声 (我的) 。</span><span class="sxs-lookup"><span data-stu-id="5072d-183">For example, for the word "theme" would generate three <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> events; one for the "th" sound, one for the "e" sound, and one for the "m" sound (me).</span></span>  
  
 <span data-ttu-id="5072d-184">有关与事件关联的数据的示例和信息，请参阅 <xref:System.Speech.Synthesis.PhonemeReachedEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-184">For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-185">获取或设置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的语速。</span><span class="sxs-lookup"><span data-stu-id="5072d-185">Gets or sets the speaking rate of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="5072d-186">返回 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的语速，在 -10 到 10 之间。</span><span class="sxs-lookup"><span data-stu-id="5072d-186">Returns the speaking rate of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object, from -10 through 10.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5072d-187">下面的示例将讲话速率设置为-2 的字符串讲述。</span><span class="sxs-lookup"><span data-stu-id="5072d-187">The following example speaks a string with the speaking rate set to -2.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveLexicon (uri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="5072d-188">词典文档的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-188">The location of the lexicon document.</span></span></param>
        <summary><span data-ttu-id="5072d-189">从 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象中移除词典。</span><span class="sxs-lookup"><span data-stu-id="5072d-189">Removes a lexicon from the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-190">有关示例，请参见 <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>。</span><span class="sxs-lookup"><span data-stu-id="5072d-190">See <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-191">继续 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象（在它暂停后）。</span><span class="sxs-lookup"><span data-stu-id="5072d-191">Resumes the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object after it has been paused.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="5072d-192">要选择该的语音的名称。</span><span class="sxs-lookup"><span data-stu-id="5072d-192">The name of the voice to select.</span></span></param>
        <summary><span data-ttu-id="5072d-193">通过名称选择特定语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-193">Selects a specific voice by name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-194">使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类获取可选择的已安装的文本到语音 (TTS) 语音的名称。</span><span class="sxs-lookup"><span data-stu-id="5072d-194">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="5072d-195">若要选择一种语音，请将该属性的全部内容 <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> 作为该方法的参数进行传递 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-195">To select a voice, pass the entire contents of the <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> property as the argument for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span> <span data-ttu-id="5072d-196"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象选择 `name` 语音的属性中包含的第一个已安装语音 <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-196">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that contains `name` in the voice's <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="5072d-197"><xref:System.Speech.Synthesis.SpeechSynthesizer>执行区分大小写的子字符串比较以确定声音是否与匹配 `name` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-197">The <xref:System.Speech.Synthesis.SpeechSynthesizer> performs a case-sensitive, substring comparison to determine if the voice matches the `name`.</span></span>  
  
 <span data-ttu-id="5072d-198">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法会验证它在注册表中找到的每个声音是否满足某些最小标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-198">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-199">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-199">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-200">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-200">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-201">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-201">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5072d-202">若要选择按性别、年龄或区域设置的语音，请使用其中一种 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-202">To select a voice by gender, age, or locale, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5072d-203">选择具有特定性格的语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-203">Selects a voice with specific characteristics.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-204">使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类获取可选择的已安装的文本到语音 (TTS) 语音的名称。</span><span class="sxs-lookup"><span data-stu-id="5072d-204">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="5072d-205"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象选择与指定特性匹配的第一个已安装语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-205">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice that matches the specified characteristics.</span></span>  
  
 <span data-ttu-id="5072d-206">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法会验证它在注册表中找到的每个声音是否满足某些最小标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-206">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-207">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-207">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-208">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-208">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-209">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-209">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5072d-210">若要按名称选择语音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 方法</span><span class="sxs-lookup"><span data-stu-id="5072d-210">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5072d-211">选择语音的性别。</span><span class="sxs-lookup"><span data-stu-id="5072d-211">The gender of the voice to select.</span></span></param>
        <summary><span data-ttu-id="5072d-212">选择具有特定性别的语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-212">Selects a voice with a specific gender.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-213">使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类获取可选择的已安装的文本到语音 (TTS) 语音的名称。</span><span class="sxs-lookup"><span data-stu-id="5072d-213">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="5072d-214"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象选择其 <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> 属性与参数匹配的第一个已安装语音 `gender` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-214">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> property matches the `gender` parameter.</span></span>  
  
 <span data-ttu-id="5072d-215">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法会验证它在注册表中找到的每个声音是否满足某些最小标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-215">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-216">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-216">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-217">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-217">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-218">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-218">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5072d-219">若要根据其他特征选择语音，请参阅其他 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-219">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 <span data-ttu-id="5072d-220">若要按名称选择语音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-220">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5072d-221">选择语音的性别。</span><span class="sxs-lookup"><span data-stu-id="5072d-221">The gender of the voice to select.</span></span></param>
        <param name="age"><span data-ttu-id="5072d-222">要选择该的语音的年龄。</span><span class="sxs-lookup"><span data-stu-id="5072d-222">The age of the voice to select.</span></span></param>
        <summary><span data-ttu-id="5072d-223">选择具有特定性别和年龄的语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-223">Selects a voice with a specific gender and age.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-224">使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类获取可选择的已安装的文本到语音 (TTS) 语音的名称。</span><span class="sxs-lookup"><span data-stu-id="5072d-224">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="5072d-225"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象选择第一个安装的语音 <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> ，其和 <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> 属性与 `gender` 和 `age` 参数匹配。</span><span class="sxs-lookup"><span data-stu-id="5072d-225">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object selects the first installed voice whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters.</span></span>  
  
 <span data-ttu-id="5072d-226">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法会验证它在注册表中找到的每个声音是否满足某些最小标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-226">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-227">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-227">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-228">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-228">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-229">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-229">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5072d-230">若要根据其他特征选择语音，请参阅其他 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-230">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 <span data-ttu-id="5072d-231">若要按名称选择语音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-231">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5072d-232">选择语音的性别。</span><span class="sxs-lookup"><span data-stu-id="5072d-232">The gender of the voice to select.</span></span></param>
        <param name="age"><span data-ttu-id="5072d-233">要选择该的语音的年龄。</span><span class="sxs-lookup"><span data-stu-id="5072d-233">The age of the voice to select.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="5072d-234">要选择该语音的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-234">The position of the voice to select.</span></span></param>
        <summary><span data-ttu-id="5072d-235">根据语音的排序位置选择具有特定性别和年龄的语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-235">Selects a voice with a specific gender and age, based on the position in which the voices are ordered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-236">使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类获取可选择的已安装的文本到语音 (TTS) 语音的名称。</span><span class="sxs-lookup"><span data-stu-id="5072d-236">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names of installed text-to-speech (TTS) voices that you can select.</span></span> <span data-ttu-id="5072d-237"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象将查找其 <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> 和 <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> 属性与 `gender` 和参数匹配 `age` 的已安装语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-237">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds installed voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> and <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> properties match the `gender` and `age` parameters.</span></span> <span data-ttu-id="5072d-238"><xref:System.Speech.Synthesis.SpeechSynthesizer>计算所找到的匹配项的数目，并在计数等于参数时返回声音 `voiceAlternate` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-238">The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="5072d-239">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法会验证它在注册表中找到的每个声音是否满足某些最小标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-239">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-240">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-240">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-241">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-241">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-242">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-242">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5072d-243">若要根据其他特征选择语音，请参阅其他 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 重载。</span><span class="sxs-lookup"><span data-stu-id="5072d-243">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.</span></span>  
  
 <span data-ttu-id="5072d-244">若要按名称选择语音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-244">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="5072d-245">选择语音的性别。</span><span class="sxs-lookup"><span data-stu-id="5072d-245">The gender of the voice to select.</span></span></param>
        <param name="age"><span data-ttu-id="5072d-246">要选择该的语音的年龄。</span><span class="sxs-lookup"><span data-stu-id="5072d-246">The age of the voice to select.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="5072d-247">要选择该语音的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-247">The position of the voice to select.</span></span></param>
        <param name="culture"><span data-ttu-id="5072d-248">要选择该的语音的区域设置。</span><span class="sxs-lookup"><span data-stu-id="5072d-248">The locale of the voice to select.</span></span></param>
        <summary><span data-ttu-id="5072d-249">根据语音的排序位置选择具有特定性别、年龄和区域设置的语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-249">Selects a voice with a specific gender, age, and locale, based on the position in which the voices are ordered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-250"><xref:System.Speech.Synthesis.SpeechSynthesizer>对象查找其 <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> 、 <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> 和 <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> 属性与 `gender` 、 `age` 和 `culture` 参数匹配的声音。</span><span class="sxs-lookup"><span data-stu-id="5072d-250">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object finds voices whose <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, and <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> properties match the `gender`, `age`, and `culture` parameters.</span></span> <span data-ttu-id="5072d-251"><xref:System.Speech.Synthesis.SpeechSynthesizer>计算所找到的匹配项的数目，并在计数等于参数时返回声音 `voiceAlternate` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-251">The <xref:System.Speech.Synthesis.SpeechSynthesizer> counts the matches it finds, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="5072d-252">Microsoft Windows 和 Speech API 接受所有有效的语言-国家/地区代码。</span><span class="sxs-lookup"><span data-stu-id="5072d-252">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="5072d-253">若要使用参数中指定的语言执行文本到语音转换 `culture` ，必须安装支持该语言-国家/地区代码的语音合成引擎。</span><span class="sxs-lookup"><span data-stu-id="5072d-253">To perform text-to-speech using the language specified in the `culture` parameter, a speech synthesis engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="5072d-254">Microsoft Windows 7 随附的语音合成引擎使用以下语言-国家/地区代码：</span><span class="sxs-lookup"><span data-stu-id="5072d-254">The speech synthesis engines that shipped with Microsoft Windows 7 work with the following language-country codes:</span></span>  
  
-   <span data-ttu-id="5072d-255">en-us。</span><span class="sxs-lookup"><span data-stu-id="5072d-255">en-US.</span></span> <span data-ttu-id="5072d-256">英语（美国）</span><span class="sxs-lookup"><span data-stu-id="5072d-256">English (United States)</span></span>  
  
-   <span data-ttu-id="5072d-257">zh-chs-CN。</span><span class="sxs-lookup"><span data-stu-id="5072d-257">zh-CN.</span></span> <span data-ttu-id="5072d-258">中文（中国）</span><span class="sxs-lookup"><span data-stu-id="5072d-258">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5072d-259">zh-chs-幼圆。</span><span class="sxs-lookup"><span data-stu-id="5072d-259">zh-TW.</span></span> <span data-ttu-id="5072d-260">中文（台湾）</span><span class="sxs-lookup"><span data-stu-id="5072d-260">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5072d-261">还允许使用两个字母的语言代码，例如 "en"。</span><span class="sxs-lookup"><span data-stu-id="5072d-261">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 <span data-ttu-id="5072d-262">当应用程序调用时 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ，该方法会验证它在注册表中找到的每个声音是否满足某些最小标准。</span><span class="sxs-lookup"><span data-stu-id="5072d-262">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="5072d-263">对于验证失败的任何语音， <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 将其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性设置为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-263">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="5072d-264">应用程序无法选择其 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性为的声音 `False` 。</span><span class="sxs-lookup"><span data-stu-id="5072d-264">An application cannot select a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="5072d-265">通常，应用程序不会设置语音的 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="5072d-265">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5072d-266">若要根据其他特征选择语音，请参阅其他 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 重载。</span><span class="sxs-lookup"><span data-stu-id="5072d-266">To select a voice based on other characteristics, see the other <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> overloads.</span></span>  
  
 <span data-ttu-id="5072d-267">若要按名称选择语音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-267">To select a voice by name, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination"><span data-ttu-id="5072d-268">要追加合成输出的流。</span><span class="sxs-lookup"><span data-stu-id="5072d-268">The stream to which to append synthesis output.</span></span></param>
        <param name="formatInfo"><span data-ttu-id="5072d-269">用于合成输出的格式。</span><span class="sxs-lookup"><span data-stu-id="5072d-269">The format to use for the synthesis output.</span></span></param>
        <summary><span data-ttu-id="5072d-270">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以追加输出到音频流。</span><span class="sxs-lookup"><span data-stu-id="5072d-270">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-271">调用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 以释放对 <xref:System.Speech.Synthesis.SpeechSynthesizer> 流的引用。</span><span class="sxs-lookup"><span data-stu-id="5072d-271">Call <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s  reference to the stream.</span></span>  
  
 <span data-ttu-id="5072d-272">有关其他输出配置选项，请参阅 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-272">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-273">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以发送输出到默认音频设备。</span><span class="sxs-lookup"><span data-stu-id="5072d-273">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to send output to the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-274">可以使用 Windows "**控制面板**" 中的 "**声音**" 窗口配置计算机的默认音频设备。</span><span class="sxs-lookup"><span data-stu-id="5072d-274">You can use the  **Sound** window in the Windows **Control Panel** to configure the default audio device for the computer.</span></span>  
  
 <span data-ttu-id="5072d-275">有关其他输出配置选项，请参阅 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-275">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-276">下面的示例使用合成器将短语告诉默认音频输出。</span><span class="sxs-lookup"><span data-stu-id="5072d-276">The following example uses the synthesizer to speak a phrase to the default audio output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-277">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以不从对设备、文件或流的聚合操作中发送输出。</span><span class="sxs-lookup"><span data-stu-id="5072d-277">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to not send output from synthesis operations to a device, file, or stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-278">使用此方法可释放对 <xref:System.Speech.Synthesis.SpeechSynthesizer> 文件或流的引用。</span><span class="sxs-lookup"><span data-stu-id="5072d-278">Use this method to release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s reference to a file or stream.</span></span> <span data-ttu-id="5072d-279">有关示例，请参见 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>。</span><span class="sxs-lookup"><span data-stu-id="5072d-279">See <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> for an example.</span></span>  
  
 <span data-ttu-id="5072d-280">有关其他输出配置选项，请参阅 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-280">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5072d-281">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以追加输出到波形音频格式文件。</span><span class="sxs-lookup"><span data-stu-id="5072d-281">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a Waveform audio format file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-282">若要释放对 <xref:System.Speech.Synthesis.SpeechSynthesizer> 文件的引用，请重新配置 <xref:System.Speech.Synthesis.SpeechSynthesizer> 的输出，例如通过调用来重新配置 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-282">To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s  reference to the file, reconfigure the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.</span></span>  
  
 <span data-ttu-id="5072d-283">有关其他输出配置选项，请参阅 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-283">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5072d-284">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="5072d-284">The path to the file.</span></span></param>
        <summary><span data-ttu-id="5072d-285">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以追加输出到包含波形格式音频的文件。</span><span class="sxs-lookup"><span data-stu-id="5072d-285">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a file that contains Waveform format audio.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-286">若要配置输出并指定音频格式，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-286">To configure the output and specify the audio format, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-287">下面的示例使用实例 <xref:System.Media.SoundPlayer> 来播放已输出到 .wav 文件的提示。</span><span class="sxs-lookup"><span data-stu-id="5072d-287">The following example uses an instance of <xref:System.Media.SoundPlayer> to play a prompt that has been output to a .wav file.</span></span> <span data-ttu-id="5072d-288">由于 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 调用是异步的，因此 <xref:System.Media.SoundPlayer> (创建实例，并在 <xref:System.Media.SoundPlayer.Play%2A> 事件的处理程序中) 调用方法 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-288">Because the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> call is asynchronous, the <xref:System.Media.SoundPlayer> instance is created (and the <xref:System.Media.SoundPlayer.Play%2A> method invoked) in the handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5072d-289">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="5072d-289">The path to the file.</span></span></param>
        <param name="formatInfo"><span data-ttu-id="5072d-290">音频格式信息。</span><span class="sxs-lookup"><span data-stu-id="5072d-290">The audio format information.</span></span></param>
        <summary><span data-ttu-id="5072d-291">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以追加输出到指定格式中的波形音频格式文件。</span><span class="sxs-lookup"><span data-stu-id="5072d-291">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a Waveform audio format file in a specified format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5072d-292">下面的示例指定了语音合成的输出格式，并将其发送到 WAV 文件。</span><span class="sxs-lookup"><span data-stu-id="5072d-292">The following example specifies the format of the output of speech synthesis and sends it to a WAV file.</span></span>  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination"><span data-ttu-id="5072d-293">要追加合成输出的流。</span><span class="sxs-lookup"><span data-stu-id="5072d-293">The stream to which to append synthesis output.</span></span></param>
        <summary><span data-ttu-id="5072d-294">配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象以追加输出到包含波形格式音频的流。</span><span class="sxs-lookup"><span data-stu-id="5072d-294">Configures the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object to append output to a stream that contains Waveform format audio.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-295">若要释放对 <xref:System.Speech.Synthesis.SpeechSynthesizer> 流的引用，请重新配置合成器的输出，例如通过调用来重新配置 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-295">To release the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s reference to the stream, reconfigure the synthesizer's output, for example, by calling <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.</span></span>  
  
 <span data-ttu-id="5072d-296">有关其他输出配置选项，请参阅 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-296">For other output configuration options, see the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-297">下面的示例将短语输出到 WAV 流。</span><span class="sxs-lookup"><span data-stu-id="5072d-297">The following example outputs a phrase to a WAV stream.</span></span>  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5072d-298">从字符串、 <see cref="T:System.Speech.Synthesis.Prompt" /> 对象或 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> 对象同步生成语音输出。</span><span class="sxs-lookup"><span data-stu-id="5072d-298">Generates speech output synchronously from a string, a <see cref="T:System.Speech.Synthesis.Prompt" /> object, or a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-299"><xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法以同步方式生成语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-299">The <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> methods generate speech synchronously.</span></span> <span data-ttu-id="5072d-300">方法不会返回，直到实例的内容 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 完全被播讲。</span><span class="sxs-lookup"><span data-stu-id="5072d-300">The methods do not return until the content of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> instance has been completely spoken.</span></span> <span data-ttu-id="5072d-301">这是生成语音的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-301">This is the simplest way to generate speech.</span></span> <span data-ttu-id="5072d-302">但是，如果应用程序需要在说话时执行任务（例如突出显示文本、绘制动画、监视器控件或其他任务），请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 方法或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 方法以异步方式生成语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-302">However, if your application needs to perform tasks while speaking, for example highlight text, paint animation, monitor controls, or other tasks, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method to generate speech asynchronously.</span></span>  
  
 <span data-ttu-id="5072d-303">在调用此方法的过程中， <xref:System.Speech.Synthesis.SpeechSynthesizer> 可能会引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="5072d-303">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="5072d-304"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span><span class="sxs-lookup"><span data-stu-id="5072d-304"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="5072d-305">合成器的讲述状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-305">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="5072d-306"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span><span class="sxs-lookup"><span data-stu-id="5072d-306"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="5072d-307">合成器开始生成语音时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-307">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="5072d-308"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-308"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="5072d-309">每次合成器达到一种语言的字母或字母组合时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-309">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="5072d-310"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span><span class="sxs-lookup"><span data-stu-id="5072d-310"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="5072d-311">每次合成器完成字词时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-311">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="5072d-312"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-312"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="5072d-313">每次出现口述输出时，需要更改嘴或用于生成语音的面部肌肉的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-313">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="5072d-314"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-314"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="5072d-315">当合成器在提示符处遇到书签时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-315">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="5072d-316"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span><span class="sxs-lookup"><span data-stu-id="5072d-316"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="5072d-317">合成器的说话声音发生变化时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-317">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
 <span data-ttu-id="5072d-318">在 <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 处理任何方法时不会引发事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-318">The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (prompt As Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt"><span data-ttu-id="5072d-319">要朗读的内容。</span><span class="sxs-lookup"><span data-stu-id="5072d-319">The content to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-320">同步使用 <see cref="T:System.Speech.Synthesis.Prompt" /> 对象内容的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-320">Synchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.Prompt" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-321">若要异步朗读对象的内容 <xref:System.Speech.Synthesis.Prompt> ，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-321">To asynchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-322">下面的示例 <xref:System.Speech.Synthesis.Prompt> 从字符串创建对象并将该对象作为参数传递给 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-322">The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (promptBuilder As PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="5072d-323">要朗读的内容。</span><span class="sxs-lookup"><span data-stu-id="5072d-323">The content to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-324">同步使用 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> 对象内容的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-324">Synchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-325">若要异步朗读对象的内容 <xref:System.Speech.Synthesis.PromptBuilder> ，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-325">To asynchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-326">下面的示例 <xref:System.Speech.Synthesis.PromptBuilder> 从字符串创建对象并将该对象作为参数传递给 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-326">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5072d-327">要朗读的文本。</span><span class="sxs-lookup"><span data-stu-id="5072d-327">The text to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-328">同步使用字符串内容的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-328">Synchronously speaks the contents of a string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-329">若要同步朗读包含 SSML 标记的字符串，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-329">To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method.</span></span> <span data-ttu-id="5072d-330">若要以异步方式说出字符串的内容，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-330">To asynchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-331">如下面的示例中所示， <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 方法提供了同步生成语音输出的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-331">As shown in the following example, the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method provides the simplest means to generate speech output synchronously.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5072d-332">从字符串、 <see cref="T:System.Speech.Synthesis.Prompt" /> 对象或 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> 对象异步生成语音输出。</span><span class="sxs-lookup"><span data-stu-id="5072d-332">Generates speech output asynchronously from a string, a <see cref="T:System.Speech.Synthesis.Prompt" /> object, or a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-333"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>方法以异步方式生成语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-333">The <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> methods generate speech asynchronously.</span></span> <span data-ttu-id="5072d-334">方法会立即返回，而不会等待对象的内容 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 完成说话。</span><span class="sxs-lookup"><span data-stu-id="5072d-334">The methods return immediately without waiting for the content of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> object to finish speaking.</span></span> <span data-ttu-id="5072d-335"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>如果你的应用程序需要在说话时执行任务，例如突出显示文本、绘制动画、监视器控件或其他任务，请使用。</span><span class="sxs-lookup"><span data-stu-id="5072d-335">Use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> if your application needs to perform tasks while speaking, for example highlight text, paint animation, monitor controls, or other tasks.</span></span>  
  
 <span data-ttu-id="5072d-336">在调用此方法的过程中， <xref:System.Speech.Synthesis.SpeechSynthesizer> 可能会引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="5072d-336">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="5072d-337"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span><span class="sxs-lookup"><span data-stu-id="5072d-337"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="5072d-338">合成器的讲述状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-338">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="5072d-339"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span><span class="sxs-lookup"><span data-stu-id="5072d-339"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="5072d-340">合成器开始生成语音时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-340">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="5072d-341"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-341"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="5072d-342">每次合成器达到一种语言的字母或字母组合时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-342">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="5072d-343"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span><span class="sxs-lookup"><span data-stu-id="5072d-343"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="5072d-344">每次合成器完成字词时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-344">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="5072d-345"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-345"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="5072d-346">每次出现口述输出时，需要更改嘴或用于生成语音的面部肌肉的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-346">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="5072d-347"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-347"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="5072d-348">当合成器在提示符处遇到书签时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-348">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="5072d-349"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span><span class="sxs-lookup"><span data-stu-id="5072d-349"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="5072d-350">合成器的说话声音发生变化时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-350">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="5072d-351"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</span><span class="sxs-lookup"><span data-stu-id="5072d-351"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</span></span> <span data-ttu-id="5072d-352">合成器完成操作时引发 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-352">Raised when the synthesizer finishes a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation.</span></span>  
  
 <span data-ttu-id="5072d-353">如果你的应用程序不需要在说话时执行任务，则可以使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 方法或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 方法同步生成语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-353">If your application does not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsync (prompt As Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt"><span data-ttu-id="5072d-354">要朗读的内容。</span><span class="sxs-lookup"><span data-stu-id="5072d-354">The content to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-355">异步使用 <see cref="T:System.Speech.Synthesis.Prompt" /> 对象内容的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-355">Asynchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.Prompt" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-356">您可以使用或方法取消对提示的异步处理 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-356">You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.</span></span>  
  
 <span data-ttu-id="5072d-357">若要同步朗读对象的内容 <xref:System.Speech.Synthesis.Prompt> ，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-357">To synchronously speak the contents of a <xref:System.Speech.Synthesis.Prompt> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-358">下面的示例 <xref:System.Speech.Synthesis.Prompt> 从字符串创建对象并将该对象作为参数传递给 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-358">The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (promptBuilder As PromptBuilder) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="5072d-359">要朗读的内容。</span><span class="sxs-lookup"><span data-stu-id="5072d-359">The content to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-360">异步使用 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> 对象内容的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-360">Asynchronously speaks the contents of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="5072d-361">返回包含要使用的内容的对象。</span><span class="sxs-lookup"><span data-stu-id="5072d-361">Returns the object that contains the content to speak.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-362">若要同步朗读对象的内容 <xref:System.Speech.Synthesis.PromptBuilder> ，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-362">To synchronously speak the contents of a <xref:System.Speech.Synthesis.PromptBuilder> object, use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-363">下面的示例 <xref:System.Speech.Synthesis.PromptBuilder> 从字符串创建对象并将该对象作为参数传递给 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-363">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5072d-364">要朗读的文本。</span><span class="sxs-lookup"><span data-stu-id="5072d-364">The text to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-365">异步使用字符串内容的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-365">Asynchronously speaks the contents of a string.</span></span></summary>
        <returns><span data-ttu-id="5072d-366">返回包含要使用的内容的对象。</span><span class="sxs-lookup"><span data-stu-id="5072d-366">Returns the object that contains the content to speak.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-367">若要以异步方式口述包含 SSML 标记的字符串，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-367">To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span> <span data-ttu-id="5072d-368">若要同步朗读字符串的内容，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-368">To synchronously speak the contents of a string, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span> <span data-ttu-id="5072d-369">您可以使用或方法取消对提示的异步处理 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-369">You can cancel the asynchronous speaking of a prompt with the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-370">如下面的示例中所示， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 方法提供了异步生成语音输出的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-370">As shown in the following example, the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> method provides the simplest means to generate speech output asynchronously.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancel (prompt As Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt"><span data-ttu-id="5072d-371">内容中移除调用操作。</span><span class="sxs-lookup"><span data-stu-id="5072d-371">The content for which to cancel a speak operation.</span></span></param>
        <summary><span data-ttu-id="5072d-372">取消一个排队的提示的异步合成操作。</span><span class="sxs-lookup"><span data-stu-id="5072d-372">Cancels the asynchronous synthesis operation for a queued prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-373">你还可以使用此方法为以下项取消异步操作：</span><span class="sxs-lookup"><span data-stu-id="5072d-373">You can also use this method to cancel an asynchronous speak operation for the following:</span></span>  
  
-   <span data-ttu-id="5072d-374"><xref:System.String>由方法指定的的内容 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-374">The contents of a <xref:System.String> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="5072d-375"><xref:System.Speech.Synthesis.PromptBuilder>由方法指定的的内容 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-375">The contents of a <xref:System.Speech.Synthesis.PromptBuilder> specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="5072d-376"><xref:System.String>包含由方法指定的 SSML 的的内容 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-376">The contents of a <xref:System.String> containing SSML specified by a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5072d-377">当你调用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> 或时 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> ，系统将创建一个 <xref:System.Speech.Synthesis.Prompt> 对象并使用该方法的参数的内容填充该对象，并返回该 <xref:System.Speech.Synthesis.Prompt> 对象。</span><span class="sxs-lookup"><span data-stu-id="5072d-377">When you call <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech creates a <xref:System.Speech.Synthesis.Prompt> object and populates it with the contents of the method's parameter, and returns the <xref:System.Speech.Synthesis.Prompt> object.</span></span> <span data-ttu-id="5072d-378">如果保留返回的的副本 <xref:System.Speech.Synthesis.Prompt> ，则可以将其传递到， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> 以取消或对象中指定的内容 <xref:System.String> <xref:System.Speech.Synthesis.PromptBuilder> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-378">If you retain a copy of the returned <xref:System.Speech.Synthesis.Prompt>, you can pass it into <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> to cancel speaking content specified in a <xref:System.String> or a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5072d-379">取消所有排队、异步、语音合成操作。</span><span class="sxs-lookup"><span data-stu-id="5072d-379">Cancels all queued, asynchronous, speech synthesis operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5072d-380">下面的示例演示 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> 如何使用来取消异步的提示，以便能够口述新提示符。</span><span class="sxs-lookup"><span data-stu-id="5072d-380">The following example show a use of <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> to cancel the asynchronous speaking of a prompt, so that a new prompt can be spoken.</span></span> <span data-ttu-id="5072d-381">请注意，在 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 取消操作时，将激发该事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-381">Note that the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event fires when a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation is cancelled.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-382">当 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 完成提示的讲话的时候引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-382">Raised when the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> completes the speaking of a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-383">在 <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 任何或方法完成时引发事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-383">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event at the completion of any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> or  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5072d-384"><xref:System.Speech.Synthesis.SpeakCompletedEventArgs>类没有属性，并且不会从事件返回数据 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-384">The <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> class has no properties, and does not return data from the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.</span></span> <span data-ttu-id="5072d-385">提供它是为了使应用程序作者能够编写事件的事件处理程序 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-385">It is provided to enable application authors to write event handlers for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-386">在 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 使用提示的每个单词后引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-386">Raised after the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> speaks each individual word of a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-387"><xref:System.Speech.Synthesis.SpeechSynthesizer>使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 或方法中的任何一个在提示符下讲述的新字词，都将引发此事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-387">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event for each new word that it speaks in a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span> <span data-ttu-id="5072d-388">有关与事件关联的数据的示例和详细信息，请参阅 <xref:System.Speech.Synthesis.SpeakProgressEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-388">For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5072d-389">要朗读的 SSML。</span><span class="sxs-lookup"><span data-stu-id="5072d-389">The SSML string to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-390">同步包含 SSML 标记的 <see cref="T:System.String" /> 的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-390">Synchronously speaks a <see cref="T:System.String" /> that contains SSML markup.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-391">参数的内容 `textToSpeak` 必须包括一个 `speak` 元素，并且必须符合 [语音合成标记语言 (SSML) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)。</span><span class="sxs-lookup"><span data-stu-id="5072d-391">The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).</span></span> <span data-ttu-id="5072d-392">有关详细信息，请参阅 [语音合成标记语言参考](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)。</span><span class="sxs-lookup"><span data-stu-id="5072d-392">For more information, see [Speech Synthesis Markup Language Reference](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).</span></span>  
  
 <span data-ttu-id="5072d-393">若要以异步方式口述包含 SSML 标记的字符串，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-393">To asynchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method.</span></span> <span data-ttu-id="5072d-394">您可以使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 来启动同步，而不包含 SSML 标记的字符串。</span><span class="sxs-lookup"><span data-stu-id="5072d-394">You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> to initiate the synchronous speaking of a string that does not contain SSML markup.</span></span>  
  
 <span data-ttu-id="5072d-395">在调用此方法的过程中， <xref:System.Speech.Synthesis.SpeechSynthesizer> 可能会引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="5072d-395">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="5072d-396"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span><span class="sxs-lookup"><span data-stu-id="5072d-396"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="5072d-397">合成器的讲述状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-397">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="5072d-398"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span><span class="sxs-lookup"><span data-stu-id="5072d-398"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="5072d-399">合成器开始生成语音时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-399">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="5072d-400"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-400"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="5072d-401">每次合成器达到一种语言的字母或字母组合时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-401">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="5072d-402"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span><span class="sxs-lookup"><span data-stu-id="5072d-402"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="5072d-403">每次合成器完成字词时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-403">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="5072d-404"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-404"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="5072d-405">每次出现口述输出时，需要更改嘴或用于生成语音的面部肌肉的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-405">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="5072d-406"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-406"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="5072d-407">当合成器在提示符处遇到书签时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-407">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="5072d-408"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span><span class="sxs-lookup"><span data-stu-id="5072d-408"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="5072d-409">合成器的说话声音发生变化时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-409">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
 <span data-ttu-id="5072d-410">在 <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> 处理方法时不会引发事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-410">The <xref:System.Speech.Synthesis.SpeechSynthesizer> does not raise the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event while processing the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-411">下面的示例将日期1/29/2009 呈现为日期，以月、日、年顺序显示。</span><span class="sxs-lookup"><span data-stu-id="5072d-411">The following example renders the date 1/29/2009 as a date, in month, day, year order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="5072d-412">要朗读的 SMML 标记。</span><span class="sxs-lookup"><span data-stu-id="5072d-412">The SMML markup to speak.</span></span></param>
        <summary><span data-ttu-id="5072d-413">异步使用包含 SSML 标记的 <see cref="T:System.String" /> 的语言。</span><span class="sxs-lookup"><span data-stu-id="5072d-413">Asynchronously speaks a <see cref="T:System.String" /> that contains SSML markup.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-414">参数的内容 `textToSpeak` 必须包括一个 `speak` 元素，并且必须符合 [语音合成标记语言 (SSML) 版本 1.0](https://go.microsoft.com/fwlink/?LinkId=201763)。</span><span class="sxs-lookup"><span data-stu-id="5072d-414">The contents of the `textToSpeak` parameter must include a `speak` element and must conform to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).</span></span> <span data-ttu-id="5072d-415">有关详细信息，请参阅 [语音合成标记语言参考](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94)。</span><span class="sxs-lookup"><span data-stu-id="5072d-415">For more information, see [Speech Synthesis Markup Language Reference](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).</span></span>  
  
 <span data-ttu-id="5072d-416">若要同步朗读包含 SSML 标记的字符串，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-416">To synchronously speak a string that contains SSML markup, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method.</span></span> <span data-ttu-id="5072d-417">可以使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 启动不包含 SSML 标记的字符串的异步播放。</span><span class="sxs-lookup"><span data-stu-id="5072d-417">You can use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> to initiate the asynchronous speaking of a string that does not contain SSML markup.</span></span>  
  
 <span data-ttu-id="5072d-418">在调用此方法的过程中， <xref:System.Speech.Synthesis.SpeechSynthesizer> 可能会引发以下事件：</span><span class="sxs-lookup"><span data-stu-id="5072d-418">During a call to this method, the <xref:System.Speech.Synthesis.SpeechSynthesizer> can raise the following events:</span></span>  
  
-   <span data-ttu-id="5072d-419"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span><span class="sxs-lookup"><span data-stu-id="5072d-419"><xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</span></span> <span data-ttu-id="5072d-420">合成器的讲述状态更改时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-420">Raised when the speaking state of the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="5072d-421"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span><span class="sxs-lookup"><span data-stu-id="5072d-421"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</span></span> <span data-ttu-id="5072d-422">合成器开始生成语音时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-422">Raised when the synthesizer begins generating speech.</span></span>  
  
-   <span data-ttu-id="5072d-423"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-423"><xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</span></span> <span data-ttu-id="5072d-424">每次合成器达到一种语言的字母或字母组合时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-424">Raised each time the synthesizer reaches a letter or combination of letters that constitute a discreet sound of speech in a language.</span></span>  
  
-   <span data-ttu-id="5072d-425"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span><span class="sxs-lookup"><span data-stu-id="5072d-425"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</span></span> <span data-ttu-id="5072d-426">每次合成器完成字词时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-426">Raised each time the synthesizer completes speaking a word.</span></span>  
  
-   <span data-ttu-id="5072d-427"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-427"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</span></span> <span data-ttu-id="5072d-428">每次出现口述输出时，需要更改嘴或用于生成语音的面部肌肉的位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-428">Raised each time spoken output requires a change in the position of the mouth or the facial muscles used to produce speech.</span></span>  
  
-   <span data-ttu-id="5072d-429"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span><span class="sxs-lookup"><span data-stu-id="5072d-429"><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</span></span> <span data-ttu-id="5072d-430">当合成器在提示符处遇到书签时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-430">Raised when the synthesizer encounters a bookmark in a prompt.</span></span>  
  
-   <span data-ttu-id="5072d-431"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span><span class="sxs-lookup"><span data-stu-id="5072d-431"><xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</span></span> <span data-ttu-id="5072d-432">合成器的说话声音发生变化时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-432">Raised when the speaking voice for the synthesizer changes.</span></span>  
  
-   <span data-ttu-id="5072d-433"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</span><span class="sxs-lookup"><span data-stu-id="5072d-433"><xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</span></span> <span data-ttu-id="5072d-434">合成器完成操作处理后引发 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-434">Raised when the synthesizer finishes processing a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> operation.</span></span>  
  
 <span data-ttu-id="5072d-435">如果应用程序的 dos 不需要在说话时执行任务，则可以使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 方法来同步生成语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-435">If your application dos not need to perform tasks while speaking, you can use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> or the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> method to generate speech synchronously.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-436">当 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 开始提示的讲话的时候引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-436">Raised when the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> begins the speaking of a prompt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-437"><xref:System.Speech.Synthesis.SpeechSynthesizer>当使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 或方法之一开始处理提示符时，将引发此事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-437">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when it begins processing a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5072d-438"><xref:System.Speech.Synthesis.SpeakStartedEventArgs>类没有属性，并且不会从事件返回数据 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-438">The <xref:System.Speech.Synthesis.SpeakStartedEventArgs> class has no properties, and does not return data from the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> event.</span></span> <span data-ttu-id="5072d-439">提供它是为了使应用程序作者能够编写事件的事件处理程序 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-439">It is provided to enable application authors to write event handlers for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-440">获取 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的当前语速。</span><span class="sxs-lookup"><span data-stu-id="5072d-440">Gets the current speaking state of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="5072d-441">返回 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的当前语速。</span><span class="sxs-lookup"><span data-stu-id="5072d-441">Returns the current speaking state of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-442">若要在更改后获取的新状态 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，请使用 <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> 类的属性 <xref:System.Speech.Synthesis.StateChangedEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-442">To get the new state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> after it changes, use the <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> property of the <xref:System.Speech.Synthesis.StateChangedEventArgs> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-443">下面的示例演示了在 <xref:System.Speech.Synthesis.SpeechSynthesizer> 出现提示之前、期间和之后的状态。</span><span class="sxs-lookup"><span data-stu-id="5072d-443">The following example illustrates the state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> before, during, and after speaking a prompt.</span></span>  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-444">当 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 的状态更改的时候引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-444">Raised when the state of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-445"><xref:System.Speech.Synthesis.SpeechSynthesizer>当其讲话发生更改时，将引发此事件 <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-445">The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises this event when its speaking <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> changes.</span></span> <span data-ttu-id="5072d-446">有关与事件关联的数据的示例和详细信息，请参阅 <xref:System.Speech.Synthesis.StateChangedEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-446">For an example and more information about data associated with the event, see <xref:System.Speech.Synthesis.StateChangedEventArgs>.</span></span>  
  
 <span data-ttu-id="5072d-447">若要暂停和继续语音合成，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> 和 <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-447">To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-448">当 viseme 达到时引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-448">Raised when a viseme is reached.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-449">Viseme 是 pronouncing 音素时，嘴的基本位置。</span><span class="sxs-lookup"><span data-stu-id="5072d-449">A viseme is the basic position of the mouth and face when pronouncing a phoneme.</span></span> <span data-ttu-id="5072d-450">Visemes 是音素的直观表示形式。</span><span class="sxs-lookup"><span data-stu-id="5072d-450">Visemes are visual representations of phonemes.</span></span>  
  
 <span data-ttu-id="5072d-451">对于美国英语，visemes 支持21个，其中每个都对应于一个或多个音素。</span><span class="sxs-lookup"><span data-stu-id="5072d-451">System.Speech supports 21 visemes for US English, each of which corresponds to one or more phonemes.</span></span>  <span data-ttu-id="5072d-452"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 当到达新的音素时，将引发事件，而与以前的音素不同，则会引发 viseme。</span><span class="sxs-lookup"><span data-stu-id="5072d-452"><xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> events are raised when a new phoneme reached has a different corresponding viseme than the previous phoneme reached.</span></span> <span data-ttu-id="5072d-453">由于某些 visemes 表示多个音素，因此， <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 如果到达的下一个音素与上一个音素相同的 viseme，则不会生成事件。</span><span class="sxs-lookup"><span data-stu-id="5072d-453">Since some visemes represent more than one phoneme, a <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> event is not generated if the next phoneme reached corresponds to the same viseme as the previous phoneme.</span></span> <span data-ttu-id="5072d-454">例如，对于说词 "this zone"，将为 " <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> this" 中的 "s" 和 "zone" 中的 "z" 引发事件。</span><span class="sxs-lookup"><span data-stu-id="5072d-454">For example, for the spoken words "this zone", a <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> event is raised for the "s" in "this" and the "z" in "zone".</span></span> <span data-ttu-id="5072d-455">但是， <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 不会为 "区域" 中的 "z" 引发事件，因为它对应于 "this" 中与 "s" 相同的 viseme。</span><span class="sxs-lookup"><span data-stu-id="5072d-455">However, a <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> event is not raised for the "z" in "zone" because it corresponds to the same viseme as the "s" in "this".</span></span>  
  
 <span data-ttu-id="5072d-456">下面是21个 SAPI 音素和音素组的列表，它们对应于美国英语的 viseme。</span><span class="sxs-lookup"><span data-stu-id="5072d-456">The following is a list of the 21 SAPI phonemes and phoneme groups that correspond to a viseme in US English.</span></span>  
  
|<span data-ttu-id="5072d-457">Viseme</span><span class="sxs-lookup"><span data-stu-id="5072d-457">Viseme</span></span>|<span data-ttu-id="5072d-458">音素 (s) </span><span class="sxs-lookup"><span data-stu-id="5072d-458">Phoneme(s)</span></span>|  
|------------|------------------|  
|<span data-ttu-id="5072d-459">0</span><span class="sxs-lookup"><span data-stu-id="5072d-459">0</span></span>|<span data-ttu-id="5072d-460">黑屏</span><span class="sxs-lookup"><span data-stu-id="5072d-460">silence</span></span>|  
|<span data-ttu-id="5072d-461">1</span><span class="sxs-lookup"><span data-stu-id="5072d-461">1</span></span>|<span data-ttu-id="5072d-462">ae，ax，ah</span><span class="sxs-lookup"><span data-stu-id="5072d-462">ae, ax, ah</span></span>|  
|<span data-ttu-id="5072d-463">2</span><span class="sxs-lookup"><span data-stu-id="5072d-463">2</span></span>|<span data-ttu-id="5072d-464">aa</span><span class="sxs-lookup"><span data-stu-id="5072d-464">aa</span></span>|  
|<span data-ttu-id="5072d-465">3</span><span class="sxs-lookup"><span data-stu-id="5072d-465">3</span></span>|<span data-ttu-id="5072d-466">ao</span><span class="sxs-lookup"><span data-stu-id="5072d-466">ao</span></span>|  
|<span data-ttu-id="5072d-467">4</span><span class="sxs-lookup"><span data-stu-id="5072d-467">4</span></span>|<span data-ttu-id="5072d-468">3om-ey-2vk，eh，糟糕</span><span class="sxs-lookup"><span data-stu-id="5072d-468">ey, eh, uh</span></span>|  
|<span data-ttu-id="5072d-469">5</span><span class="sxs-lookup"><span data-stu-id="5072d-469">5</span></span>|<span data-ttu-id="5072d-470">l</span><span class="sxs-lookup"><span data-stu-id="5072d-470">er</span></span>|  
|<span data-ttu-id="5072d-471">6</span><span class="sxs-lookup"><span data-stu-id="5072d-471">6</span></span>|<span data-ttu-id="5072d-472">y、url-iy-ung、ih、ix</span><span class="sxs-lookup"><span data-stu-id="5072d-472">y, iy, ih, ix</span></span>|  
|<span data-ttu-id="5072d-473">7</span><span class="sxs-lookup"><span data-stu-id="5072d-473">7</span></span>|<span data-ttu-id="5072d-474">w，uw</span><span class="sxs-lookup"><span data-stu-id="5072d-474">w, uw</span></span>|  
|<span data-ttu-id="5072d-475">8</span><span class="sxs-lookup"><span data-stu-id="5072d-475">8</span></span>|<span data-ttu-id="5072d-476">ow</span><span class="sxs-lookup"><span data-stu-id="5072d-476">ow</span></span>|  
|<span data-ttu-id="5072d-477">9</span><span class="sxs-lookup"><span data-stu-id="5072d-477">9</span></span>|<span data-ttu-id="5072d-478">aw</span><span class="sxs-lookup"><span data-stu-id="5072d-478">aw</span></span>|  
|<span data-ttu-id="5072d-479">10</span><span class="sxs-lookup"><span data-stu-id="5072d-479">10</span></span>|<span data-ttu-id="5072d-480">oy</span><span class="sxs-lookup"><span data-stu-id="5072d-480">oy</span></span>|  
|<span data-ttu-id="5072d-481">11</span><span class="sxs-lookup"><span data-stu-id="5072d-481">11</span></span>|<span data-ttu-id="5072d-482">ay</span><span class="sxs-lookup"><span data-stu-id="5072d-482">ay</span></span>|  
|<span data-ttu-id="5072d-483">12</span><span class="sxs-lookup"><span data-stu-id="5072d-483">12</span></span>|<span data-ttu-id="5072d-484">h</span><span class="sxs-lookup"><span data-stu-id="5072d-484">h</span></span>|  
|<span data-ttu-id="5072d-485">13</span><span class="sxs-lookup"><span data-stu-id="5072d-485">13</span></span>|<span data-ttu-id="5072d-486">r</span><span class="sxs-lookup"><span data-stu-id="5072d-486">r</span></span>|  
|<span data-ttu-id="5072d-487">14</span><span class="sxs-lookup"><span data-stu-id="5072d-487">14</span></span>|<span data-ttu-id="5072d-488">l</span><span class="sxs-lookup"><span data-stu-id="5072d-488">l</span></span>|  
|<span data-ttu-id="5072d-489">15</span><span class="sxs-lookup"><span data-stu-id="5072d-489">15</span></span>|<span data-ttu-id="5072d-490">s、z</span><span class="sxs-lookup"><span data-stu-id="5072d-490">s, z</span></span>|  
|<span data-ttu-id="5072d-491">16</span><span class="sxs-lookup"><span data-stu-id="5072d-491">16</span></span>|<span data-ttu-id="5072d-492">sh、ch、yey-jh-tfz、zh-chs</span><span class="sxs-lookup"><span data-stu-id="5072d-492">sh, ch, jh, zh</span></span>|  
|<span data-ttu-id="5072d-493">17</span><span class="sxs-lookup"><span data-stu-id="5072d-493">17</span></span>|<span data-ttu-id="5072d-494">th，dh</span><span class="sxs-lookup"><span data-stu-id="5072d-494">th, dh</span></span>|  
|<span data-ttu-id="5072d-495">18</span><span class="sxs-lookup"><span data-stu-id="5072d-495">18</span></span>|<span data-ttu-id="5072d-496">f、v</span><span class="sxs-lookup"><span data-stu-id="5072d-496">f, v</span></span>|  
|<span data-ttu-id="5072d-497">19</span><span class="sxs-lookup"><span data-stu-id="5072d-497">19</span></span>|<span data-ttu-id="5072d-498">d、t、n</span><span class="sxs-lookup"><span data-stu-id="5072d-498">d, t, n</span></span>|  
|<span data-ttu-id="5072d-499">20</span><span class="sxs-lookup"><span data-stu-id="5072d-499">20</span></span>|<span data-ttu-id="5072d-500">k、g、ng</span><span class="sxs-lookup"><span data-stu-id="5072d-500">k, g, ng</span></span>|  
|<span data-ttu-id="5072d-501">21</span><span class="sxs-lookup"><span data-stu-id="5072d-501">21</span></span>|<span data-ttu-id="5072d-502">p，b，m</span><span class="sxs-lookup"><span data-stu-id="5072d-502">p, b, m</span></span>|  
  
 <span data-ttu-id="5072d-503">有关与事件关联的数据的信息 `VisemeReached` ，请参阅 <xref:System.Speech.Synthesis.VisemeReachedEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-503">For information about data associated with the `VisemeReached` event, see <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-504">获取有关当前 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的语音的信息。</span><span class="sxs-lookup"><span data-stu-id="5072d-504">Gets information about the current voice of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="5072d-505">返回有关当前 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的语音的信息。</span><span class="sxs-lookup"><span data-stu-id="5072d-505">Returns information about the current voice of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-506">初始化新的时 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，它将使用默认系统声音。</span><span class="sxs-lookup"><span data-stu-id="5072d-506">When you initialize a new <xref:System.Speech.Synthesis.SpeechSynthesizer>, it uses the default system voice.</span></span> <span data-ttu-id="5072d-507">若要将 <xref:System.Speech.Synthesis.SpeechSynthesizer> 对象配置为使用其中一个已安装的语音合成声音，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="5072d-507">To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> object to use one of the installed speech synthesis voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method.</span></span> <span data-ttu-id="5072d-508">若要获取有关已安装的声音的信息，请使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 方法和 <xref:System.Speech.Synthesis.VoiceInfo> 类。</span><span class="sxs-lookup"><span data-stu-id="5072d-508">To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5072d-509">下面的示例初始化实例 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，并获取有关当前语音的信息。</span><span class="sxs-lookup"><span data-stu-id="5072d-509">The following example initializes an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer> and gets information about the current voice.</span></span>  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-510">当 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 的语音更改的时候引发。</span><span class="sxs-lookup"><span data-stu-id="5072d-510">Raised when the voice of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5072d-511">有关与事件关联的数据的示例和信息，请参阅 <xref:System.Speech.Synthesis.VoiceChangeEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="5072d-511">For an example and information about data associated with the event, see <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.</span></span>  
  
 <span data-ttu-id="5072d-512">可以更改 <xref:System.Speech.Synthesis.SpeechSynthesizer> 使用的任何 <xref:System.Speech.Synthesis.PromptBuilder> <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 方法或 <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> 或 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> 方法的语音。</span><span class="sxs-lookup"><span data-stu-id="5072d-512">You can change the voice that the <xref:System.Speech.Synthesis.SpeechSynthesizer> uses with any of the <xref:System.Speech.Synthesis.PromptBuilder>'s <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods or the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5072d-513">获取或设置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 对象的输出量。</span><span class="sxs-lookup"><span data-stu-id="5072d-513">Get or sets the output volume of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> object.</span></span></summary>
        <value><span data-ttu-id="5072d-514">返回 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 的量（0 到 100）。</span><span class="sxs-lookup"><span data-stu-id="5072d-514">Returns the volume of the <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5072d-515">下面的示例设置 <xref:System.Speech.Synthesis.SpeechSynthesizer> 合成声音和 WAV 文件的音频输出量。</span><span class="sxs-lookup"><span data-stu-id="5072d-515">The following example sets the volume of the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s audio output for the synthesized voice and the WAV file.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
