<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="411bf592c3c2d63be5ebf4175af6666733d18625" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89986308" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供与当前应用程序相关的属性、方法和事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对象公开的属性 `My.Application` 返回仅与当前应用程序或 DLL 关联的数据。 无法使用 `My.Application` 更改任何系统级信息。  
  
 `My.Application` 对象由以下类组成：  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> 提供了所有项目中的可用成员。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 提供 Windows 窗体应用程序中可用的成员。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> 提供控制台应用程序中可用的成员。  
  
   
  
## Examples  
 此示例使用 `My.Application.GetEnvironmentVariable` 方法获取并显示 PATH 环境变量的值（如果此值可用）。 否则，它将显示一条消息，指示路径环境变量不存在。  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. 字符串形式的区域性名称。 有关可能名称的列表，请参见 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>更改当前线程用于字符串操作和字符串格式设置的区域性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.ChangeCulture`方法更改当前线程的 <xref:System.Threading.Thread.CurrentCulture%2A> 属性。 <xref:System.Threading.Thread.CurrentCulture%2A> 确定该线程上所有计算的日期、时间、货币、数字、文本排序顺序、字符串比较和大小写的默认格式。  
  
 若要检索当前区域性，可以使用 <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A> 属性或 <xref:System.Threading.Thread.CurrentCulture%2A> 属性。  
  
 此 <xref:System.Threading.Thread.CurrentCulture%2A> 设置与语言设置不同。 它仅包含与地理区域的标准设置相关的数据。 因此， <xref:System.Threading.Thread.CurrentCulture%2A> 属性只能设置为特定区域性或 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 。  
  
 使用 `My.Application.ChangeUICulture` 方法可更改当前线程用来检索特定于区域性的资源的区域性。  
  
> [!IMPORTANT]
>  `My.Application.ChangeCulture`方法要求 <xref:System.Security.Permissions.SecurityPermission> 具有具有集的 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 。 由于与线程关联的安全状态，因此操作线程是危险的。 因此，只有在需要时才应向可信代码提供此权限。 不能在不完全受信任的代码中更改线程的区域性。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例演示更改区域性如何更改日期的字符串表示形式。  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> 不是有效的区域性名称。</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. 字符串形式的区域性名称。 有关可能名称的列表，请参见 <see cref="T:System.Globalization.CultureInfo" />。</param>
        <summary>更改当前线程用来检索特定于区域性的资源的区域性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.ChangeUICulture`方法更改当前线程的 <xref:System.Threading.Thread.CurrentUICulture%2A> 属性。 <xref:System.Threading.Thread.CurrentUICulture%2A>属性确定资源管理器和对象使用的区域性 `My.Resources` ; 它使用此信息在运行时查找区域性特定的资源。  
  
 若要检索当前 UI 区域性，可以使用 <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A> 属性或 <xref:System.Threading.Thread.CurrentUICulture%2A> 属性。  
  
 使用 `My.Application.ChangeCulture` 方法可更改当前线程用于字符串操作和字符串格式设置的区域性。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.ChangeUICulture` 方法设置 `My.Resources` 对象用于检索资源的区域性。  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 要使此示例正常运行，应用程序必须 `Message` 在应用程序的资源文件中包含一个名为的字符串，应用程序应具有该资源文件的法语区域性版本 `Resources.fr-FR.resx` 。 有关详细信息，请参阅 [如何：添加或删除资源](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)。  
  
 如果应用程序没有该资源文件的法语区域性版本，则 `My.Resources` 对象将从默认区域性资源文件中检索资源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> 不是有效的区域性名称。</exception>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前线程用于字符串操作和字符串格式设置的区域性。</summary>
        <value>一个 <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示当前线程用于字符串操作和字符串格式设置的区域性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.CurrentCulture`属性获取 <xref:System.Globalization.CultureInfo> 当前线程用于字符串操作和字符串格式设置的对象。 此对象与属性返回的对象相同 <xref:System.Threading.Thread.CurrentCulture%2A> ，后者控制该线程上的许多与字符串相关的计算。 <xref:System.Threading.Thread.CurrentCulture%2A>属性确定日期、时间、货币和数字的默认格式。 它还确定如何对字符串进行排序、比较和大写。  
  
 若要更改区域性，可以使用 <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A> 方法或为属性分配不同的 <xref:System.Globalization.CultureInfo> 对象 <xref:System.Threading.Thread.CurrentCulture%2A> 。  
  
 此 <xref:System.Threading.Thread.CurrentCulture%2A> 设置与语言设置不同。 它仅包含与地理区域的标准设置相关的数据。  
  
 使用 `My.Application.CurrentUICulture` 属性可以获取当前线程用来检索特定于区域性的资源的区域性。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例演示区域性如何影响日期的字符串表示形式。  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">一个 <see langword="String" />，包含环境变量名。</param>
        <summary>返回指定环境变量的值。</summary>
        <returns>一个 <see langword="String" />，包含名为 <paramref name="name" /> 的环境变量的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.GetEnvironmentVariable`方法返回名为的环境变量 `name` 。 此方法类似于 <xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType> ，不同之处在于，如果指定的环境变量不存在，则此方法将引发异常 `name` 。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.GetEnvironmentVariable` 方法获取并显示 PATH 环境变量的值（如果可用）。 否则，它将显示一条消息，指示路径环境变量不存在。  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> 指定的环境变量不存在。</exception>
        <exception cref="T:System.Security.SecurityException">调用代码没有访问权限为 <see langword="Read" /> 的 <see cref="T:System.Security.Permissions.EnvironmentPermission" />。</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象提供用来获取有关应用程序的程序集的信息（如版本号、说明等等）的属性。</summary>
        <value>当前应用程序的 <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例使用 `My.Application.Info.Version` 属性来显示应用程序的版本。  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象提供用来将事件和异常信息写入应用程序的日志侦听器的属性和方法。</summary>
        <value>当前应用程序的 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 本示例将演示如何使用 `My.Application.Log.WriteEntry` 方法来记录跟踪信息。 有关详细信息，请参阅 [如何：编写日志消息](/dotnet/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前线程用来检索特定于区域性的资源的区域性。</summary>
        <value>一个 <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示当前线程用来检索特定于区域性的资源的区域性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.CurrentUICulture`属性获取 <xref:System.Globalization.CultureInfo> 当前线程用来检索特定于区域性的资源的对象。 此对象与属性返回的对象相同 <xref:System.Threading.Thread.CurrentUICulture%2A> 。 <xref:System.Threading.Thread.CurrentUICulture%2A>属性确定资源管理器和对象所使用的区域性 `My.Resources` ，它需要在运行时查找区域性特定的资源。  
  
 若要更改区域性，可以使用 <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> 方法或为属性分配不同的 <xref:System.Globalization.CultureInfo> 对象 <xref:System.Threading.Thread.CurrentUICulture%2A> 。  
  
 此 <xref:System.Threading.Thread.CurrentCulture%2A> 设置与语言设置不同。 它仅包含与地理区域的标准设置相关的数据。  
  
 使用 `My.Application.CurrentCulture` 属性可获取当前线程用于字符串操作和字符串格式设置的区域性。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|**是**|  
|控制台应用程序|**是**|  
|Windows 窗体控件库|**是**|  
|Web 控件库|否|  
|Windows 服务|**是**|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.CurrentCulture` 属性来缓存当前区域性，然后使用将其更改 <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> 。 `My.Application.ChangeUICulture`方法设置 `My.Resources` 对象用于检索资源的区域性。  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 要使此示例正常运行，应用程序必须 `Message` 在应用程序的资源文件中包含一个名为的字符串，应用程序应具有该资源文件的法语区域性版本 `Resources.fr-FR.resx` 。 有关详细信息，请参阅 [如何：添加或删除资源](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d)。  
  
 如果应用程序没有该资源文件的法语区域性版本，则 `My.Resources` 对象将从默认区域性资源文件中检索资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/my-resources-object">Resources 对象 (Visual Basic) </related>
      </Docs>
    </Member>
  </Members>
</Type>
