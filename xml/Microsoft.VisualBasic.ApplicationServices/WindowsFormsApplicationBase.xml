<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fff869e83df5b9e084a19b7bedc39aab93cf71a4" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83956624" /></Metadata><TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <TypeSignature Language="F#" Value="type WindowsFormsApplicationBase = class&#xA;    inherit ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供与当前应用程序相关的属性、方法和事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application` 对象公开的属性返回仅与当前应用程序或 DLL 关联的数据。 无法使用 `My.Application` 更改任何系统级信息。  
  
 `My.Application` 对象由以下类组成：  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> 提供了所有项目中的可用成员。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 提供 Windows 窗体应用程序中可用的成员。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> 提供了可在控制台应用程序中使用的成员。  
  
   
  
## Examples  
 此示例使用循环来循环访问应用程序的打开的窗体，选择可由当前线程直接访问的窗体，并在 <xref:System.Windows.Forms.ListBox> 控件中显示其标题。 有关如何访问打开的窗体的信息，请参阅 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>。  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 此示例要求 Windows 窗体应用程序具有一个名为 `Form1` 的窗体，该窗体包含一个名为 `ListBox1`的列表框。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
    <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (authenticationMode As AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.AuthenticationMode -&gt; Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" Usage="new Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase authenticationMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">用于指定应用程序的身份验证模式的枚举值之一。</param>
        <summary>使用指定的身份验证模式初始化 <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `authenticationMode` 参数是 <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> 枚举值，则此构造函数尝试将当前线程的 <xref:System.Threading.Thread.CurrentPrincipal%2A> 属性设置为当前用户的 <xref:System.Security.Principal.WindowsPrincipal>。  
  
 如果 `authenticationMode` 参数是 <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> 枚举值，则此构造函数保持当前线程的 <xref:System.Threading.Thread.CurrentPrincipal%2A> 属性不变。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : System.Windows.Forms.ApplicationContext" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Windows 窗体应用程序当前线程的 <see cref="T:System.Windows.Forms.ApplicationContext" /> 对象。</summary>
        <value>有关当前线程的上下文信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个高级成员;除非您单击 "**全部**" 选项卡，否则它不会显示在 IntelliSense 中。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberSignature Language="F#" Value="member this.DoEvents : unit -&gt; unit" Usage="windowsFormsApplicationBase.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>处理当前在消息队列中的所有 Windows 消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过 `My.Application.DoEvents` 方法，你的应用程序可以处理运行代码时可能引发的其他事件。 `My.Application.DoEvents` 方法与 <xref:System.Windows.Forms.Application.DoEvents%2A> 方法具有相同的行为。  
  
 运行 Windows 窗体应用程序时，会创建一个新的窗体，该窗体随后将等待处理事件。 每次窗体处理一个事件（例如按钮单击）时，它都会处理与该事件关联的所有代码。 所有其他事件都在队列中等待。 当代码处理事件时，应用程序不会响应。 例如，如果将另一窗口拖到顶部，则窗口不会重新绘制。  
  
 如果在代码中调用 `My.Application.DoEvents`，应用程序可以处理其他事件。 例如，如果代码将数据添加到循环中的 <xref:System.Windows.Forms.ListBox>，并在循环的每个步骤调用 `My.Application.DoEvents`后，窗体将在拖动另一窗口时重新绘制。 如果从代码中删除 `My.Application.DoEvents`，则在完成执行该按钮的 click 事件处理程序之前，将不会重新绘制窗体。  
  
 通常，在循环中使用此方法来处理消息。  
  
> [!NOTE]
>  `My.Application.DoEvents` 方法不以与窗体相同的方式处理事件。 使用多线程处理可以直接处理事件。 有关详细信息，请参阅[多线程应用程序](https://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6)。  
  
> [!CAUTION]
>  如果处理用户界面（UI）事件的方法调用 `My.Application.DoEvents` 方法，则该方法可能会在完成之前重新进入。 出现这种情况的原因可能是 `My.Application.DoEvents` 方法处理 Windows 消息，而 Windows 消息则可能引发事件。  
  
 下表列出了涉及 `My.Application.DoEvents` 方法的任务的示例。  
  
|目标|请参阅|  
|-|-|  
|允许窗体在繁忙的情况下响应 UI 输入|[演练：处理事件](/dotnet/visual-basic/programming-guide/language-features/events/walkthrough-handling-events)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.DoEvents` 方法来允许 `TextBox1` 更新的 UI。  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 此代码应采用具有 `Text` 属性的 `TextBox1` 组件的形式。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualStyles : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定此应用程序是否将 Windows XP 样式用于窗口、控件等。</summary>
        <value><see cref="T:System.Boolean" /> 值，指示此应用程序是否将 XP Windows 样式用于窗口、控件等。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> 方法使用此属性来确定是否调用 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.HideSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.HideSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>隐藏应用程序的初始屏幕。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 类在单独的线程上创建初始屏幕。 此方法封送对正确线程的调用。  
  
 在主窗体完成加载时调用此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleInstance : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示此应用程序是否是单实例应用程序。</summary>
        <value><see langword="True" />，指示此应用程序是单实例应用程序;否则，<see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> 方法使用此属性来确定此应用程序是否为单实例应用程序。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainForm : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此应用程序的主窗体。</summary>
        <value>此应用程序的主窗体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 `MainForm` 属性可获取或设置 Visual Basic 应用程序启动/关闭模型使用的 <xref:System.Windows.Forms.Form> 对象作为应用程序的主窗体。  
  
 此属性支持 Visual Basic 的应用程序启动/关闭模型。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 当应用程序关闭时，对此属性所做的更改不会保留。 若要永久更改主窗体，必须在 "**项目设计器**" 中更改设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSplashScreenDisplayTime : int with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置显示初始屏幕的最小时间长度（以毫秒为单位）。</summary>
        <value>初始屏幕的最小显示时间长度（以毫秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.MinimumSplashScreenDisplayTime` 属性允许您指定应用程序初始屏幕的最小显示时间长度。 如果主窗体完成初始化的时间比此属性指定的时间少，初始屏幕将一直保持到所请求的时间量，此时将显示主窗体。 如果应用程序需要较长时间才能启动，则在主窗体变为活动状态后，初始屏幕将关闭。  
  
 使用 "项目设计器" 将初始屏幕添加到应用程序时，它会将 `My.Application.MinimumSplashScreenDisplayTime` 属性设置为2000，提供两秒钟的最小显示时间。  
  
 此属性支持 Visual Basic 应用程序模型。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 应在重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> 或 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> 方法的方法中设置 `My.Application.MinimumSplashScreenDisplayTime` 属性。 在默认情况下，将在 Applicationevents.vb 文件中输入重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 类的方法的代码。  
  
| |  
|-|  
|访问用于重写成员的代码编辑器窗口|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。<br /><br />有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例演示如何通过重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> 属性来设置 `My.Application.MinimumSplashScreenDisplayTime` 属性。  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 此示例要求项目具有初始屏幕。  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入此代码。 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在网络可用性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次网络可用性发生变化时，应用程序都会引发 `NetworkAvailabilityChanged` 事件。 您可以使用 `e` 参数的 <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> 属性来获取网络连接的新状态。 若要获取网络连接的当前状态，请使用 <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> 属性。  
  
 此事件在应用程序的主线程上通过其他用户界面事件引发。 这样，事件处理程序便可以直接访问应用程序的 UI。 但是，如果在引发此事件时，应用程序正在忙于处理另一个用户界面事件，则在其他事件处理程序完成或调用 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> 方法之前，将无法处理此事件。  
  
 <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> 事件提供与此事件相同的功能，但可用于所有应用程序类型。  
  
 `NetworkAvailabilityChanged` 事件处理程序的代码存储在 Applicationevents.vb 文件中，该文件在默认情况下处于隐藏状态。  
  
| |  
|-|  
|访问应用程序事件的 "代码编辑器" 窗口|  
|1. 在解决方案资源管理器中选择了一个项目 **。** 单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。<br /><br />有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。|  
  
> [!NOTE]
>  即使集线器与较大的网络断开连接，许多网络中心也会提供网络连接。 因此，对于有线连接，此事件表示计算机和集线器之间的连接发生更改。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 当网络可用性发生变化时，此示例将调用默认 `Form1` 类的 `SetConnectionStatus` 方法。  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入代码。 若要访问此窗口，请按照本主题的 "备注" 部分中的说明进行操作。  
  
 项目应具有一个名为 `Form1`的窗体。 它应该具有一个名为 `SetConnectionStatus` 的方法，该方法采用 `Boolean` 参数。  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateMainForm : unit -&gt; unit&#xA;override this.OnCreateMainForm : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateMainForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写后，允许设计器发出配置初始屏幕和主窗体的代码。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法不执行任何操作。 但是，当你在 Visual Basic**项目设计器**中选择应用程序的主窗体时，设计器将使用将 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> 属性设置为主窗体的新实例的方法来重写此方法。  
  
 此方法由 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> 方法调用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateSplashScreen : unit -&gt; unit&#xA;override this.OnCreateSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnCreateSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写后，允许设计器发出初始化初始屏幕的代码。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法不执行任何操作。 若你从 Visual Basic 项目设计器为应用程序选择初始屏幕，设计器会使用将 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> 属性设置为初始屏幕窗体新实例的方法重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> 方法。  
  
 此方法由 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> 方法调用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool&#xA;override this.OnInitialize : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; -&gt; bool" Usage="windowsFormsApplicationBase.OnInitialize commandLineArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">只读集合，包含命令行参数作为当前应用程序的字符串。</param>
        <summary>设置可视样式、文本显示样式以及应用程序主线程的当前主体（如果应用程序使用 Windows 身份验证），如果定义了初始屏幕，还要初始化初始屏幕。</summary>
        <returns><see cref="T:System.Boolean" />，指示是否应继续启动应用程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法设置主应用程序线程的视觉样式、文本显示样式和当前主体（若此应用程序使用 Windows 身份验证），并调用 `ShowSplashScreen`（若 `/nosplash` 和 `-nosplash` 均未被用作命令行参数）。  
  
 此方法调用下列方法：  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> 列中的一个值匹配。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> 列中的一个值匹配。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberSignature Language="F#" Value="abstract member OnRun : unit -&gt; unit&#xA;override this.OnRun : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnRun " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在初始化完成后，提供主应用程序准备好开始运行时可运行的起点。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，在它进入 Windows 窗体消息循环之前，此方法调用 `OnCreateMainForm`（用于创建应用程序的主窗体）和 `HideSplashScreen`（用于关闭初始屏幕）方法：  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> 列中的一个值匹配。 为设计器发出初始化主窗体提供方法。  
  
     默认情况下，此方法不执行任何操作。 不过，从 Visual Basic 项目设计器为应用程序选择主窗体时，设计器会使用将 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> 属性设置为主窗体新实例的方法重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> 方法。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A> 列中的一个值匹配。 如果应用程序定义了初始屏幕并且它已打开，则此方法将关闭初始屏幕。  
  
     默认情况下，此方法会关闭初始屏幕。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="windowsFormsApplicationBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写后，允许代码在应用程序关闭时运行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若主应用程序中出现未处理的异常，此方法将不会运行。  
  
 默认情况下，此方法引发 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> 事件。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool&#xA;override this.OnStartup : Microsoft.VisualBasic.ApplicationServices.StartupEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnStartup eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">应用程序的命令行参数，指示是否应取消应用程序启动。</param>
        <summary>在派生类中重写后，允许代码在应用程序启动时运行。</summary>
        <returns><see cref="T:System.Boolean" />，指示应用程序是否应继续启动。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法引发 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> 事件。 事件处理程序可以设置事件参数的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性。 如果 `True`<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>，则此方法返回 `False` 以取消应用程序启动。 否则，该方法将返回 `True`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit&#xA;override this.OnStartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs -&gt; unit" Usage="windowsFormsApplicationBase.OnStartupNextInstance eventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">后续应用程序实例的命令行参数，并且指示第一个应用程序实例是否应在退出异常处理程序后进入前台。</param>
        <summary>在派生类中重写后，允许代码在单实例应用程序的后续实例启动时运行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法引发 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> 事件。 事件处理程序可以设置事件参数的 <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> 属性。 如果 `True`<xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A>，则该方法将激活主窗体。 否则，主窗体将保持其当前状态。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool&#xA;override this.OnUnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs -&gt; bool" Usage="windowsFormsApplicationBase.OnUnhandledException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件的相关数据。</param>
        <summary>在派生类中重写后，允许代码在应用程序中出现未经处理的异常时运行。</summary>
        <returns>一个 <see cref="T:System.Boolean" />，它指示是否已引发 <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" /> 事件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，只要未附加调试器且用户正在处理 `UnhandledException` 事件，此方法就会引发 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> 事件。 事件处理程序可以设置 <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> 属性。 如果 <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> `False`，或如果未处理该事件，应用程序将在从异常处理程序返回时退出。 否则，将对应用程序的控制返回到 Windows 窗体的消息循环。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序中所有打开的窗体的集合。</summary>
        <value>一个集合，其中包含应用程序的所有打开窗体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.OpenForms` 属性获取应用程序的所有打开窗体的集合。 此行为与 <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType> 属性相同。  
  
> [!NOTE]
>  `My.Application.OpenForms` 属性返回所有打开的窗体，而不管哪个线程打开了窗体。 在访问之前，应检查每个窗体的 <xref:System.Windows.Forms.Control.InvokeRequired%2A> 属性;否则，可能会引发 <xref:System.InvalidOperationException> 异常。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例循环访问应用程序的打开的窗体，选择当前线程可直接访问的窗体，并在 <xref:System.Windows.Forms.ListBox> 控件中显示其标题。 此示例要求 Windows 窗体应用程序具有一个名为 `Form1` 的窗体，该窗体包含一个名为 `ListBox1`的列表框。  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 此示例将遍历应用程序的打开的窗体，并在 <xref:System.Windows.Forms.ListBox> 控件中显示其标题。  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="member this.Run : string[] -&gt; unit" Usage="windowsFormsApplicationBase.Run commandLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine"><see langword="Sub Main" /> 中的命令行。</param>
        <summary>设置或启动 Visual Basic 应用程序模型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.Run` 方法为 Visual Basic 应用程序模型提供支持。 此方法只应从应用程序的 `Sub Main`调用。 默认情况下，Windows 窗体应用程序的 `Sub Main` 将调用此方法。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Visual Basic 应用程序模型概述</related>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveMySettingsOnExit : bool with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定应用程序在退出时是否保存用户设置。</summary>
        <value><see langword="True" />，表示应用程序在退出时保存用户设置。 否则，<see langword="False" /> 指示不会隐式保存设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SaveMySettingsOnExit` 属性允许用户在运行时更改应用程序保存设置的方式。 您可以使用 `My.Settings` 对象的 <xref:System.Configuration.ApplicationSettingsBase.Save%2A> 方法显式保存设置更改。 有关更改和保存设置的详细信息，请参阅[应用程序属性](https://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254)。  
  
 当应用程序关闭时，对此属性所做的更改不会保留。 若要永久更改 `SaveMySettingsOnExit` 属性，必须在 "**项目设计器**" 中更改设置：  
  
| |  
|-|  
|更改 "项目设计器" 中的设置|  
|1. 在**解决方案资源管理器**中选择了一个项目。 单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 选择 **"关闭时保存设置"**。|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例有两部分。  
  
-   `InitializeSaveMySettingsOnExit` 子例程，该子例程将 <xref:System.Windows.Forms.CheckBox> 控件的选中状态初始化为 `SaveMySettingsOnExit` 属性的当前值。  
  
-   `SaveMySettingsOnExit_CheckedChanged` 子例程，该子例程处理对 <xref:System.Windows.Forms.CheckBox> 控件的更改以更新 `My.Application.SaveMySettingsOnExit` 属性。  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 要使此示例正常运行，应用程序必须具有一个名为 `SaveMySettingsOnExit`<xref:System.Windows.Forms.CheckBox> 控件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberSignature Language="F#" Value="member this.ShowSplashScreen : unit -&gt; unit" Usage="windowsFormsApplicationBase.ShowSplashScreen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定应用程序是否定义了初始屏幕，如果进行了定义，则显示该初始屏幕。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此方法以线程安全的方式调用 `OnCreateSplashScreen`。  
  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> 方法包含显示初始屏幕至少达 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> 属性指定的毫秒数的代码。 若要使用此功能，必须在重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> 或 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> 方法的方法中设置 `My.Application.MinimumSplashScreenDisplayTime` 属性，或使用 "**项目设计器**" 将初始屏幕添加到应用程序。 有关详细信息，请参阅 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>。  
  
 此方法由 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> 方法调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberSignature Language="F#" Value="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " Usage="member this.Shutdown : Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Shutdown As ShutdownEventHandler " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在应用程序关闭时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序在退出前引发 `Shutdown` 事件。 这允许您控制应用程序关闭其资源的方式。 此事件是 Visual Basic 应用程序模型的一部分。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 `Shutdown` 事件处理程序的代码存储在 Applicationevents.vb 文件中，该文件在默认情况下处于隐藏状态。  
  
| |  
|-|  
|访问应用程序事件的 "代码编辑器" 窗口|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。<br /><br />有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例在应用程序关闭时记录消息。  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入代码。 若要访问此窗口，请按照本主题的 "备注" 部分中的说明进行操作。 有关详细信息，请参阅[如何：在应用程序启动或关闭时记录消息](/dotnet/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down">如何：当应用程序启动或关闭时记录消息</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">“项目设计器” -&gt;“应用程序”页 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Visual Basic 应用程序模型概述</related>
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownStyle : Microsoft.VisualBasic.ApplicationServices.ShutdownMode with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定应用程序的主窗体关闭时执行的操作。</summary>
        <value>枚举值之一，它指示应用程序在主窗体关闭时应执行的操作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> 方法检查此属性的值，以确定应用程序是否应在主窗体关闭时关闭，或者是否应将其他打开的窗体升级为新的主窗体。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : System.Windows.Forms.Form with get, set" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此应用程序的初始屏幕。</summary>
        <value>应用程序的初始屏幕。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.SplashScreen` 属性允许您获取或设置应用程序用作初始屏幕的 <xref:System.Windows.Forms.Form> 对象，这是在启动应用程序时显示的第一个图形窗体。  
  
 此属性支持 Visual Basic 应用程序模型。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 当应用程序关闭时，对此属性所做的更改不会保留。 若要永久更改初始屏幕，必须在 "**项目设计器**" 中更改设置。  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.SplashScreen` 属性和 `My.Application.Startup` 事件，在应用程序启动时使用状态信息更新初始屏幕。  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 此示例要求项目具有一个名为 `SplashScreen1`的初始屏幕。 初始屏幕需要具有一个名为 `Status` 的属性，该属性将更新其用户界面。  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入此代码。 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">相同的值被赋予此属性和 <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" /> 属性。</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " Usage="member this.Startup : Microsoft.VisualBasic.ApplicationServices.StartupEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Startup As StartupEventHandler " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在应用程序启动时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正常（非单实例）应用程序每次启动时都会引发 `Startup` 事件。 仅当应用程序尚未处于活动状态时，单实例应用程序才会引发 `Startup` 事件;否则，会引发 `StartupNextInstance` 事件。 有关详细信息，请参阅 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>。  
  
 此事件是 Visual Basic 应用程序模型的一部分。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 您可以使用 `e` 参数的 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性来控制应用程序的启动窗体的加载。 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为 `True`时，启动窗体不会启动。 在这种情况下，代码应调用另一个启动代码路径。  
  
 您可以使用 `e` 参数的 <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> 属性或 <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> 属性来访问应用程序的命令行参数。  
  
 `Startup` 事件处理程序的代码存储在 Applicationevents.vb 文件中，该文件在默认情况下处于隐藏状态。  
  
| |  
|-|  
|访问应用程序事件的 "代码编辑器" 窗口|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。<br /><br /> 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.SplashScreen` 属性和 `My.Application.Startup` 事件，在应用程序启动时使用状态信息更新初始屏幕。  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 此示例要求项目具有一个名为 `SplashScreen1`的初始屏幕。 初始屏幕需要具有名为 `Status` 的属性，以更新其用户界面。  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入代码。 若要访问此窗口，请按照本主题的 "备注" 部分中的说明进行操作。 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">“项目设计器” -&gt;“应用程序”页 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Visual Basic 应用程序模型概述</related>
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberSignature Language="F#" Value="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " Usage="member this.StartupNextInstance : Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StartupNextInstance As StartupNextInstanceEventHandler " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在尝试启动单实例应用程序，而该应用程序已处于活动状态时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你尝试在应用程序已处于活动状态时重新启动它时，单实例应用程序会引发 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> 事件。 第一次启动单实例应用程序时，它会引发 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> 事件。 有关详细信息，请参阅 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>。  
  
 此事件是 Visual Basic 应用程序模型的一部分。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 此事件在应用程序的主线程上通过其他用户界面事件引发。 这样，事件处理程序便可以直接访问应用程序的用户界面。 但是，如果在引发此事件时，应用程序正在忙于处理另一个用户界面事件，则在其他事件处理程序完成或调用 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> 方法之前，将无法处理此事件。  
  
> [!NOTE]
>  仅在单实例应用程序中引发 `StartupNextInstance` 事件。 若要为应用程序启用单实例行为，必须选中 "项目设计器" 中的 "**生成单个实例应用程序**" 复选框。  
  
| |  
|-|  
|将应用程序设置为单一实例|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 选中 "**生成单个实例应用程序**" 复选框。|  
  
 必须使用 `e` 参数的 <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> 属性访问自变量，以便以后尝试启动单实例应用程序。 <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> 属性提供了用于启动单实例应用程序的第一个实例的参数。  
  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> 事件处理程序的代码存储在 Applicationevents.vb 文件中，该文件在默认情况下处于隐藏状态。  
  
| |  
|-|  
|访问应用程序事件的 "代码编辑器" 窗口|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。<br /><br />有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。|  
  
 下表列出了涉及 `My.Application.StartupNextInstance` 事件的任务的示例。  
  
|目标|请参阅|  
|-|-|  
|检查第一个应用程序实例的命令行参数|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|是|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> 事件处理程序的 `e` 参数来检查应用程序的命令行参数。 如果找到了以 `/input=`开头的参数，则会显示该参数的其余部分。  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入代码。 若要访问此窗口，请按照本主题的 "备注" 部分中的说明进行操作。 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">“项目设计器” -&gt;“应用程序”页 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Visual Basic 应用程序模型概述</related>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " Usage="member this.UnhandledException : Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在应用程序遇到未经处理的异常时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序遇到未经处理的异常时，将引发 `UnhandledException` 事件。 此事件是 Visual Basic 应用程序模型的一部分。 有关详细信息，请参阅[Visual Basic 应用程序模型的概述](/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model)。  
  
 您可以使用 `e` 参数的 <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> 属性访问引发此事件的未处理异常。  
  
 您可以使用 `e` 参数的 <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> 属性控制应用程序是否退出。 默认情况下，<xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> `True`。 因此，在完成 `UnhandledException` 事件处理程序后，应用程序会退出。 可以在 `UnhandledException` 事件处理程序中将值设置为 `False`，以使应用程序保持运行状态，并使应用程序返回到等待状态。  
  
 `UnhandledException` 事件处理程序的代码存储在 Applicationevents.vb 文件中，该文件在默认情况下处于隐藏状态。  
  
| |  
|-|  
|访问应用程序事件的 "代码编辑器" 窗口|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。|  
  
 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
> [!NOTE]
>  Visual Basic 编译器会阻止生成的用于调试的应用程序引发此事件，使调试器能够处理未经处理的异常。 这意味着，如果你正在测试应用程序，请在 Visual Studio 集成开发环境调试器下运行该应用程序，将不会调用你的 `UnhandledException` 事件处理程序。 有关生成用于调试的应用程序的详细信息，请参阅[/debug （Visual Basic）](/dotnet/visual-basic/reference/command-line-compiler/debug)。  
  
## <a name="tasks"></a>任务  
 下表列出了涉及 `My.Application.UnhandledException` 事件的任务的示例。  
  
|目标|请参阅|  
|-|-|  
|记录未处理的异常|[如何：日志异常](/dotnet/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions)|  
  
## <a name="availability-by-project-type"></a>按项目类型的可用性  
  
|项目类型|可用|  
|-|-|  
|Windows 窗体应用程序|**是**|  
|类库|否|  
|控制台应用程序|否|  
|Windows 窗体控件库|否|  
|Web 控件库|否|  
|Windows 服务|否|  
|网站|否|  
  
   
  
## Examples  
 此示例使用 `My.Application.UnhandledException` 事件记录所有未经处理的异常。  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入代码。 若要访问此窗口，请按照本主题的 "备注" 部分中的过程进行操作。 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
 由于在将调试器附加到应用程序时不会引发 `UnhandledException` 事件，因此必须在 Visual Studio 集成开发环境外部运行此示例。  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model">Visual Basic 应用程序模型概述</related>
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool" Usage="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在派生类中重写时，此属性允许设计器为应用程序窗体指定默认的文本呈现引擎。</summary>
        <value><see langword="Boolean" /> 列中的一个值匹配。 值为 <see langword="False" /> 指示应用程序应使用 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] 的默认文本呈现引擎。 如果该值为 <see langword="True" />，则指示应用程序应使用 Visual Basic .NET 2002 和 Visual Basic .NET 2003 的文本呈现引擎。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此属性将返回 `False`，以指示用于 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] 的 GDI 文本呈现引擎可用于应用程序的窗体。 但是，你可以重写此属性以返回 `True`，并指定应用程序的窗体使用在 Visual Basic .NET 2002 和 Visual Basic .NET 2003 中使用的 GDI + 文本呈现引擎。  
  
 此属性由 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 构造函数调用。  
  
 在默认情况下，将在 Applicationevents.vb 文件中输入重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> 类的方法的代码。  
  
| |  
|-|  
|访问用于重写成员的代码编辑器窗口|  
|1. 在**解决方案资源管理器**中选择一个项目，然后单击 "**项目**" 菜单上的 "**属性**"。<br />2. 单击 "**应用程序**" 选项卡。<br />3. 单击 "**查看应用程序事件**" 按钮以打开代码编辑器。<br /><br />有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。|  
  
   
  
## Examples  
 此示例演示如何通过重写 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> 属性，将 GDI + 文本呈现引擎设置为应用程序的默认呈现引擎。  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 您必须在 "代码编辑器" 窗口中为应用程序事件输入此代码。 有关更多信息，请参见 [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/customizing-extending-my/extending-the-visual-basic-application-model">扩展 Visual Basic 应用程序模型</related>
        <related type="Article" href="/visualstudio/ide/reference/application-page-project-designer-visual-basic">“项目设计器” -&gt;“应用程序”页 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
