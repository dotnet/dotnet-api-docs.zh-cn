<Type Name="TypeProvider" FullName="System.Workflow.ComponentModel.Compiler.TypeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e035ba755615d86498fc09c91251bf1d5ef3452" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102070488" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeProvider : IDisposable, IServiceProvider, System.Workflow.ComponentModel.Compiler.ITypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeProvider extends System.Object implements class System.IDisposable, class System.IServiceProvider, class System.Workflow.ComponentModel.Compiler.ITypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeProvider&#xA;Implements IDisposable, IServiceProvider, ITypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeProvider sealed : IDisposable, IServiceProvider, System::Workflow::ComponentModel::Compiler::ITypeProvider" />
  <TypeSignature Language="F#" Value="type TypeProvider = class&#xA;    interface ITypeProvider&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.Compiler.ITypeProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="56c32-101"><see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> 的实现，充当指示的程序集和代码编译单元内类型的容器。</span><span class="sxs-lookup"><span data-stu-id="56c32-101">An implementation of <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> that acts as a container of types within the indicated assemblies and code compile units.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="56c32-102">除了处理已编译的程序集（<xref:System.Workflow.ComponentModel.Compiler.ITypeProvider> 和 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%2A> 方法）外，此 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A> 实现还可以处理尚未编译的类型 (<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit%2A>)。</span><span class="sxs-lookup"><span data-stu-id="56c32-102">This <xref:System.Workflow.ComponentModel.Compiler.ITypeProvider> implementation, in addition to handling compiled assemblies (<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%2A> and <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A> methods), can handle types that have not been compiled yet (<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit%2A>).</span></span> <span data-ttu-id="56c32-103">将为使用 <xref:System.Type?displayProperty=nameWithType> 引用的类型返回 <xref:System.CodeDom.CodeCompileUnit> 的受限实现。</span><span class="sxs-lookup"><span data-stu-id="56c32-103">The limited implementation of <xref:System.Type?displayProperty=nameWithType> is returned for types referenced using <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56c32-104"><xref:System.Workflow.ComponentModel.Compiler.TypeProvider> 仅从引用的程序集中返回公共类型，并从本地程序集中返回公共和非公共类型。</span><span class="sxs-lookup"><span data-stu-id="56c32-104"><xref:System.Workflow.ComponentModel.Compiler.TypeProvider> only returns public types from referenced assemblies, and both public and non-public types from local assemblies.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeProvider(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Compiler.TypeProvider : IServiceProvider -&gt; System.Workflow.ComponentModel.Compiler.TypeProvider" Usage="new System.Workflow.ComponentModel.Compiler.TypeProvider serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"><span data-ttu-id="56c32-105">此实例的包装的 <see cref="T:System.IServiceProvider" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-105">The encapsulated <see cref="T:System.IServiceProvider" /> for this instance.</span></span></param>
        <summary><span data-ttu-id="56c32-106">初始化 <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="56c32-106">Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="56c32-107">下面的代码示例演示如何创建 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="56c32-107">The following code example shows how to create a new instance of the <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> class.</span></span>  <span data-ttu-id="56c32-108">此代码示例摘自 WorkflowLoader.cs 文件中的 BasicDesignerHosting SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="56c32-108">This code example is part of the BasicDesignerHosting SDK Sample from the WorkflowLoader.cs file.</span></span> <span data-ttu-id="56c32-109">有关详细信息，请参阅 [基本设计器宿主](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90))。</span><span class="sxs-lookup"><span data-stu-id="56c32-109">For more information, see [Basic Designer Hosting](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90)).</span></span>  
  
 [!code-csharp[WF_Samples#256](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#256)]
 [!code-vb[WF_Samples#256](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#256)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssembly">
      <MemberSignature Language="C#" Value="public void AddAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssembly (assembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.AddAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.AddAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="56c32-110">要为其添加引用的 <see cref="P:System.Type.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-110">The <see cref="P:System.Type.Assembly" /> to add a reference for.</span></span></param>
        <summary><span data-ttu-id="56c32-111">添加已经加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="56c32-111">Adds an already-loaded assembly.</span></span> <span data-ttu-id="56c32-112">调用方负责加载程序集，而且 <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> 包括此程序集中的类型以便在调用 <see cref="Overload:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType" /> 时进行分配。</span><span class="sxs-lookup"><span data-stu-id="56c32-112">It is the caller's responsibility to load the assembly, and <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> includes the types from this assembly for dispensing when <see cref="Overload:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType" /> is called.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-113"><paramref name="assembly" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-113"><paramref name="assembly" /> is a null reference (Visual Basic <see langword="Nothing" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddAssemblyReference">
      <MemberSignature Language="C#" Value="public void AddAssemblyReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssemblyReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyReference : string -&gt; unit" Usage="typeProvider.AddAssemblyReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="56c32-114">要添加的 <see cref="P:System.Type.Assembly" /> 的路径。</span><span class="sxs-lookup"><span data-stu-id="56c32-114">The path of the <see cref="P:System.Type.Assembly" /> to add.</span></span></param>
        <summary><span data-ttu-id="56c32-115">将对 <see cref="P:System.Type.Assembly" /> 的引用添加到内部列表。</span><span class="sxs-lookup"><span data-stu-id="56c32-115">Adds a reference to the <see cref="P:System.Type.Assembly" /> to the internal list.</span></span> <span data-ttu-id="56c32-116">此程序集用于在 <see cref="T:System.Type" /> 方法中查找 <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-116">This assembly is used for the <see cref="T:System.Type" /> lookup in the <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="56c32-117">下面的代码示例演示如何创建 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> 类的新实例并运行 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="56c32-117">The following code example shows how to create a new instance of the <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> class and run the <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A> method.</span></span> <span data-ttu-id="56c32-118">此代码示例摘自 WorkflowLoader.cs 文件中的 BasicDesignerHosting SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="56c32-118">This code example is part of the BasicDesignerHosting SDK Sample from the WorkflowLoader.cs file.</span></span> <span data-ttu-id="56c32-119">有关详细信息，请参阅 [基本设计器宿主](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90))。</span><span class="sxs-lookup"><span data-stu-id="56c32-119">For more information, see [Basic Designer Hosting](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90)).</span></span>  
  
 [!code-csharp[Wf_samples#256](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#256)]
 [!code-vb[Wf_samples#256](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#256)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-120"><paramref name="path" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-120"><paramref name="path" /> is a null reference (Visual Basic <see langword="Nothing" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void AddCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCodeCompileUnit (codeCompileUnit As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="member this.AddCodeCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="typeProvider.AddCodeCompileUnit codeCompileUnit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="56c32-121">要添加的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-121">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to add.</span></span></param>
        <summary><span data-ttu-id="56c32-122">将对 <see cref="T:System.CodeDom.CodeCompileUnit" /> 的引用添加到内部列表。</span><span class="sxs-lookup"><span data-stu-id="56c32-122">Adds a reference to the <see cref="T:System.CodeDom.CodeCompileUnit" /> to the internal list.</span></span> <span data-ttu-id="56c32-123">此 <see cref="T:System.CodeDom.CodeCompileUnit" /> 用于在 <see cref="T:System.Type" /> 方法中查找 <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-123">This <see cref="T:System.CodeDom.CodeCompileUnit" /> is used for the <see cref="T:System.Type" /> lookup in the <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-124"><paramref name="codeCompileUnit" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-124"><paramref name="codeCompileUnit" /> is a null reference (Visual Basic <see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="56c32-125"><paramref name="codeCompileUnit" /> 已在此实例中引用。</span><span class="sxs-lookup"><span data-stu-id="56c32-125"><paramref name="codeCompileUnit" /> is already referenced in this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyNameResolver">
      <MemberSignature Language="C#" Value="public Func&lt;Type,string&gt; AssemblyNameResolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Type, string&gt; AssemblyNameResolver" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property AssemblyNameResolver As Func(Of Type, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Type ^, System::String ^&gt; ^ AssemblyNameResolver { Func&lt;Type ^, System::String ^&gt; ^ get(); void set(Func&lt;Type ^, System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyNameResolver : Func&lt;Type, string&gt; with get, set" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Type,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-126">获取或设置引用包含一个参数和一个返回值的方法的委托，该方法返回指定类型所属的程序集显示名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-126">Gets or sets the delegate that references a method with one parameter and one return value that returns the assembly display name in which a specified type belongs to.</span></span></summary>
        <value><span data-ttu-id="56c32-127">引用包含一个参数和一个返回值的方法的委托，该方法返回指定类型所属的程序集显示名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-127">The delegate that references a method with one parameter and one return value that returns the assembly display name that a specified type belongs to.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="typeProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="56c32-128">释放由 <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="56c32-128">Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyName">
      <MemberSignature Language="C#" Value="public string GetAssemblyName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAssemblyName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetAssemblyName(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblyName (type As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAssemblyName(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetAssemblyName : Type -&gt; string" Usage="typeProvider.GetAssemblyName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="56c32-129">要获取其程序集名称的类型。</span><span class="sxs-lookup"><span data-stu-id="56c32-129">The type whose assembly name to get.</span></span></param>
        <summary><span data-ttu-id="56c32-130">返回在其中声明指定类型的程序集的程序集显示名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-130">Returns the assembly display name of the assembly in which the specified type is declared.</span></span></summary>
        <returns><span data-ttu-id="56c32-131">在其中声明指定类型的程序集的程序集显示名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-131">The assembly display name of the assembly in which the specified type is declared.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public static string[] GetEnumNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetEnumNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnumNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetEnumNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetEnumNames : Type -&gt; string[]" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="56c32-132">要从中获取名称的类型。</span><span class="sxs-lookup"><span data-stu-id="56c32-132">The type to obtain the names from.</span></span></param>
        <summary><span data-ttu-id="56c32-133">提供一个字符串数组，其中包含指定的 <see cref="T:System.Enum" /> 的名称并按索引顺序排列。</span><span class="sxs-lookup"><span data-stu-id="56c32-133">Provides a string array that contains the names for the specified <see cref="T:System.Enum" /> in indexed order.</span></span></summary>
        <returns><span data-ttu-id="56c32-134">按索引顺序排列的指定的 <see cref="T:System.Enum" /> 名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-134">The names for the specified <see cref="T:System.Enum" /> in indexed order.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-135"><paramref name="enumType" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-135"><paramref name="enumType" /> is a null reference (Visual Basic <see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="56c32-136"><paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-136"><paramref name="enumType" /> Is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventHandlerType">
      <MemberSignature Language="C#" Value="public static Type GetEventHandlerType (System.Reflection.EventInfo eventInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetEventHandlerType(class System.Reflection.EventInfo eventInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType(System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEventHandlerType (eventInfo As EventInfo) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetEventHandlerType(System::Reflection::EventInfo ^ eventInfo);" />
      <MemberSignature Language="F#" Value="static member GetEventHandlerType : System.Reflection.EventInfo -&gt; Type" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType eventInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="56c32-137">要获取其 <see cref="T:System.Reflection.EventInfo" /> 类型的 <see cref="T:System.EventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-137">The <see cref="T:System.Reflection.EventInfo" /> to obtain the <see cref="T:System.EventHandler" /> type of.</span></span></param>
        <summary><span data-ttu-id="56c32-138">如果提供对 <see cref="T:System.Type" /> 的引用，则获取 <see cref="T:System.EventHandler" /> 的 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-138">Gets the <see cref="T:System.Type" /> of an <see cref="T:System.EventHandler" />, given a reference to an <see cref="T:System.Reflection.EventInfo" />.</span></span></summary>
        <returns><span data-ttu-id="56c32-139">提供对 <see cref="T:System.Type" /> 的引用的情况下 <see cref="T:System.EventHandler" /> 的 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-139">The <see cref="T:System.Type" /> of an <see cref="T:System.EventHandler" />, given a reference to an <see cref="T:System.Reflection.EventInfo" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-140"><paramref name="eventInfo" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-140"><paramref name="eventInfo" /> is a null reference (Visual Basic <see langword="Nothing" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="typeProvider.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="56c32-141"><see cref="T:System.Type" /> 要提供的服务 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-141">The service <see cref="T:System.Type" /> that the <see cref="T:System.Object" /> is to provide.</span></span></param>
        <summary><span data-ttu-id="56c32-142">获取提供指定服务 <see cref="T:System.Object" /> 的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-142">Gets the <see cref="T:System.Object" /> that provides the designated service <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="56c32-143">提供指定服务 <see cref="T:System.Object" /> 的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-143">The <see cref="T:System.Object" /> that provides the designated service <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-144">如果与此实例关联的包装 <xref:System.IServiceProvider> 是一个空引用（在 Visual Basic 中为 `Nothing`），则返回一个空引用 (`Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="56c32-144">If the encapsulated <xref:System.IServiceProvider> associated with this instance is a null reference (`Nothing` in Visual Basic) then a null reference (`Nothing`) is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="56c32-145">获取通过搜索添加的程序集引用和代码编译单元而传递的限定类型名中的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-145">Gets the <see cref="T:System.Type" /> from the qualified type name passed by searching through the assembly references and code compile units that are added.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="typeProvider.GetType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="56c32-146">类型名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-146">The type name.</span></span></param>
        <summary><span data-ttu-id="56c32-147">从使用 <see langword="TypeProvider" />、<see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" /> 或 <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" /> 添加到 <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" /> 的一组程序集中获取类型。</span><span class="sxs-lookup"><span data-stu-id="56c32-147">Gets the type from the set of assemblies added to the <see langword="TypeProvider" /> using <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />, or <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</span></span></summary>
        <returns><span data-ttu-id="56c32-148">请求的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-148">The requested <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-149">如果名称在程序集的缓存和此实例的编译单元中不能解析，将返回一个空引用（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="56c32-149">If the name is not resolvable within the cache of assemblies and compiled units of this instance, a null reference (Visual Basic `Nothing`) is returned.</span></span> <span data-ttu-id="56c32-150">调用此重载与调用参数 `throwOnError` 的值设置为 `true` 的两参数重载相同。</span><span class="sxs-lookup"><span data-stu-id="56c32-150">Invoking this overload is the same as invoking the two parameter overloads with the value of the parameter `throwOnError` set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-151"><paramref name="name" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）</span><span class="sxs-lookup"><span data-stu-id="56c32-151"><paramref name="name" /> is a null reference (<see langword="Nothing" /> in Visual Basic)</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string name, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (name As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool -&gt; Type" Usage="typeProvider.GetType (name, throwOnError)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="56c32-152">类型名称。</span><span class="sxs-lookup"><span data-stu-id="56c32-152">The type name.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="56c32-153">一个指示 <paramref name="name" /> 不可解析时是否引发异常的值。</span><span class="sxs-lookup"><span data-stu-id="56c32-153">A value that indicates whether to throw an exception if <paramref name="name" /> is not resolvable.</span></span></param>
        <summary><span data-ttu-id="56c32-154">从使用 <see langword="TypeProvider" />、<see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" /> 或 <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" /> 添加到 <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" /> 的一组程序集中获取类型。</span><span class="sxs-lookup"><span data-stu-id="56c32-154">Gets the type from the set of assemblies added to the <see langword="TypeProvider" /> using <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />, or <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</span></span></summary>
        <returns><span data-ttu-id="56c32-155">请求的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-155">The requested <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-156">如果名称在程序集的缓存和此实例的编译单元中不可解析，则返回一个空引用 (`Nothing`)，前提是 `throwOnError` 为 `false`。</span><span class="sxs-lookup"><span data-stu-id="56c32-156">If the name is not resolvable within the cache of assemblies and compiled units of this instance, a null reference (`Nothing`) is returned; in the case that `throwOnError` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-157"><paramref name="name" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）</span><span class="sxs-lookup"><span data-stu-id="56c32-157"><paramref name="name" /> is a null reference (<see langword="Nothing" /> in Visual Basic)</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="56c32-158"><paramref name="name" /> 不可解析，因此 <paramref name="throwOnError" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-158"><paramref name="name" /> is not resolvable and <paramref name="throwOnError" /> is <see langword="true" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypes">
      <MemberSignature Language="C#" Value="public Type[] GetTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetTypes : unit -&gt; Type[]&#xA;override this.GetTypes : unit -&gt; Type[]" Usage="typeProvider.GetTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="56c32-159">创建一个包含此实例已知的每个 <see cref="T:System.Type" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="56c32-159">Creates an array that contains each <see cref="T:System.Type" /> known to this instance.</span></span></summary>
        <returns><span data-ttu-id="56c32-160">包含此实例已知的每个 <see cref="T:System.Type" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="56c32-160">An array that contains each <see cref="T:System.Type" /> known to this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException"><span data-ttu-id="56c32-161">未能加载的任何 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-161">Any <see cref="T:System.Type" /> fails to load.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssignable">
      <MemberSignature Language="C#" Value="public static bool IsAssignable (Type toType, Type fromType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignable(class System.Type toType, class System.Type fromType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAssignable (toType As Type, fromType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAssignable(Type ^ toType, Type ^ fromType);" />
      <MemberSignature Language="F#" Value="static member IsAssignable : Type * Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable (toType, fromType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toType" Type="System.Type" />
        <Parameter Name="fromType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="toType"><span data-ttu-id="56c32-162">赋值的目标 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-162">The target <see cref="T:System.Type" /> of the assignment.</span></span></param>
        <param name="fromType"><span data-ttu-id="56c32-163">赋值的源 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-163">The source <see cref="T:System.Type" /> of the assignment.</span></span></param>
        <summary><span data-ttu-id="56c32-164">指示是否可以安全地将一个类型分配给另一个类型。</span><span class="sxs-lookup"><span data-stu-id="56c32-164">Indicates whether one type can be safely assigned to another type.</span></span></summary>
        <returns><span data-ttu-id="56c32-165">如果可以安全执行赋值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-165"><see langword="true" /> if the assignment can be safely made; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public static bool IsEnum (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEnum(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEnum (type As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEnum(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsEnum : Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="56c32-166">要测试的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-166">The <see cref="T:System.Type" /> to be tested.</span></span></param>
        <summary><span data-ttu-id="56c32-167">指示 <see cref="T:System.Type" /> 的类型是否为 <see cref="T:System.Enum" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-167">Indicates whether a <see cref="T:System.Type" /> is of type <see cref="T:System.Enum" /> .</span></span></summary>
        <returns><span data-ttu-id="56c32-168">如果 <see langword="true" /> 为 <see cref="T:System.Type" />，则为 <see cref="T:System.Enum" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-168"><see langword="true" /> if the <see cref="T:System.Type" /> is an <see cref="T:System.Enum" /> ; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-169"><paramref name="type" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-169"><paramref name="type" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public static bool IsSubclassOf (Type subclass, Type superClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubclassOf(class System.Type subclass, class System.Type superClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubclassOf (subclass As Type, superClass As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubclassOf(Type ^ subclass, Type ^ superClass);" />
      <MemberSignature Language="F#" Value="static member IsSubclassOf : Type * Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf (subclass, superClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subclass" Type="System.Type" />
        <Parameter Name="superClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="subclass"><span data-ttu-id="56c32-170">将作为派生类进行测试的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-170">The <see cref="T:System.Type" /> being tested as a derived class.</span></span></param>
        <param name="superClass"><span data-ttu-id="56c32-171">将作为类进行测试的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-171">The <see cref="T:System.Type" /> being tested as the class.</span></span></param>
        <summary><span data-ttu-id="56c32-172">指示一个 <see cref="T:System.Type" /> 是否为另一个 <see cref="T:System.Type" /> 的派生类。</span><span class="sxs-lookup"><span data-stu-id="56c32-172">Indicates whether a <see cref="T:System.Type" /> is a derived class of another <see cref="T:System.Type" /> .</span></span></summary>
        <returns><span data-ttu-id="56c32-173">如果所测试的关系为 true，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-173"><see langword="true" /> if the tested relationship is true; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedProperty">
      <MemberSignature Language="C#" Value="public bool IsSupportedProperty (System.Reflection.PropertyInfo property, object declaringInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSupportedProperty(class System.Reflection.PropertyInfo property, object declaringInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedProperty(System.Reflection.PropertyInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupportedProperty (property As PropertyInfo, declaringInstance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSupportedProperty(System::Reflection::PropertyInfo ^ property, System::Object ^ declaringInstance);" />
      <MemberSignature Language="F#" Value="member this.IsSupportedProperty : System.Reflection.PropertyInfo * obj -&gt; bool" Usage="typeProvider.IsSupportedProperty (property, declaringInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="declaringInstance" Type="System.Object" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="56c32-174">要解析的属性。</span><span class="sxs-lookup"><span data-stu-id="56c32-174">The property to resolve.</span></span></param>
        <param name="declaringInstance"><span data-ttu-id="56c32-175">在其中声明指定属性的实例。</span><span class="sxs-lookup"><span data-stu-id="56c32-175">The instance in which the specified property is declared.</span></span></param>
        <summary><span data-ttu-id="56c32-176">返回一个值，该值确定目标 .NET Framework 是否支持指定的属性。</span><span class="sxs-lookup"><span data-stu-id="56c32-176">Returns a value that determines whether the specified property is supported in the target .NET Framework.</span></span></summary>
        <returns><span data-ttu-id="56c32-177"><see langword="true" /> 如果目标 .NET Framework 支持指定的属性，则为; 否则为。否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="56c32-177"><see langword="true" /> if the specified property is supported in the target .NET Framework; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedPropertyResolver">
      <MemberSignature Language="C#" Value="public Func&lt;System.Reflection.PropertyInfo,object,bool&gt; IsSupportedPropertyResolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class System.Reflection.PropertyInfo, object, bool&gt; IsSupportedPropertyResolver" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSupportedPropertyResolver As Func(Of PropertyInfo, Object, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ IsSupportedPropertyResolver { Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ get(); void set(Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IsSupportedPropertyResolver : Func&lt;System.Reflection.PropertyInfo, obj, bool&gt; with get, set" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Reflection.PropertyInfo,System.Object,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-178">获取或设置一个委托，该委托引用具有两个参数的方法和一个返回值，该值确定是否在目标 .NET Framework 中支持指定的属性。</span><span class="sxs-lookup"><span data-stu-id="56c32-178">Gets or sets the delegate that references a method with two parameters and one return value that determines whether a specified property is supported in the target .NET Framework.</span></span></summary>
        <value><span data-ttu-id="56c32-179">委托，它引用具有两个参数和一个返回值的方法，该方法确定是否在目标 .NET Framework 中支持指定的属性。</span><span class="sxs-lookup"><span data-stu-id="56c32-179">The delegate that references a method with two parameters and one return value that determines whether a specified property is supported in the target .NET Framework.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LocalAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly LocalAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ LocalAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAssembly : System.Reflection.Assembly" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.LocalAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-180">获取一个值，该值表示在本地为此实例定义的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-180">Gets a value that represents the locally defined <see cref="T:System.Reflection.Assembly" /> for this instance.</span></span></summary>
        <value><span data-ttu-id="56c32-181">在本地为此实例定义的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-181">The locally defined <see cref="T:System.Reflection.Assembly" /> for this instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.Reflection.Assembly&gt; ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferencedAssemblies As ICollection(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ ReferencedAssemblies { System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.ReferencedAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-182">获取由 <see cref="T:System.Type" /> 引用的所有程序集的集合。</span><span class="sxs-lookup"><span data-stu-id="56c32-182">Gets a collection of all assemblies referenced by the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="56c32-183">由 <see cref="T:System.Type" /> 引用的所有程序集的集合。</span><span class="sxs-lookup"><span data-stu-id="56c32-183">A collection of all assemblies referenced by the <see cref="T:System.Type" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void RefreshCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit, EventHandler refresher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit, class System.EventHandler refresher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RefreshCodeCompileUnit(System.CodeDom.CodeCompileUnit,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCodeCompileUnit (codeCompileUnit As CodeCompileUnit, refresher As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit, EventHandler ^ refresher);" />
      <MemberSignature Language="F#" Value="member this.RefreshCodeCompileUnit : System.CodeDom.CodeCompileUnit * EventHandler -&gt; unit" Usage="typeProvider.RefreshCodeCompileUnit (codeCompileUnit, refresher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="refresher" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="56c32-184">用来刷新的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-184">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to refresh with.</span></span></param>
        <param name="refresher"><span data-ttu-id="56c32-185">要向其委托此事件的 <see cref="T:System.EventHandler" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-185">The <see cref="T:System.EventHandler" /> to delegate this event to.</span></span></param>
        <summary><span data-ttu-id="56c32-186">更新与此实例关联的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 引用。</span><span class="sxs-lookup"><span data-stu-id="56c32-186">Updates the <see cref="T:System.CodeDom.CodeCompileUnit" /> reference associated with this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-187">调用此方法时引发 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>。</span><span class="sxs-lookup"><span data-stu-id="56c32-187">The <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> is raised when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-188"><paramref name="codeCompileUnit" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="56c32-188"><paramref name="codeCompileUnit" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="56c32-189">此实例已经引用了主题 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-189">This instance already references the subject <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAssembly">
      <MemberSignature Language="C#" Value="public void RemoveAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAssembly (assembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.RemoveAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.RemoveAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="56c32-190">要从此实例中移除的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-190">The <see cref="T:System.Reflection.Assembly" /> to remove from this instance.</span></span></param>
        <summary><span data-ttu-id="56c32-191">从此实例中移除所有对主题 <see cref="T:System.Reflection.Assembly" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="56c32-191">Removes all references to the subject <see cref="T:System.Reflection.Assembly" /> from this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-192">调用此方法时引发 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>。</span><span class="sxs-lookup"><span data-stu-id="56c32-192">The <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> is raised when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-193"><paramref name="assembly" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）</span><span class="sxs-lookup"><span data-stu-id="56c32-193"><paramref name="assembly" /> is a null reference (<see langword="Nothing" /> in Visual Basic)</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAssemblyReference">
      <MemberSignature Language="C#" Value="public void RemoveAssemblyReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAssemblyReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAssemblyReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAssemblyReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.RemoveAssemblyReference : string -&gt; unit" Usage="typeProvider.RemoveAssemblyReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="56c32-194">要移除的 <see cref="T:System.Reflection.Assembly" /> 的路径。</span><span class="sxs-lookup"><span data-stu-id="56c32-194">The path of the <see cref="T:System.Reflection.Assembly" /> to be removed.</span></span></param>
        <summary><span data-ttu-id="56c32-195">从此实例中移除基于路径的 <see cref="T:System.Reflection.Assembly" /> 引用。</span><span class="sxs-lookup"><span data-stu-id="56c32-195">Removes a path-based <see cref="T:System.Reflection.Assembly" /> reference from this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-196">调用此方法时引发 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>。</span><span class="sxs-lookup"><span data-stu-id="56c32-196">The <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> is raised when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-197"><paramref name="path" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）</span><span class="sxs-lookup"><span data-stu-id="56c32-197"><paramref name="path" /> is a null reference (<see langword="Nothing" /> in Visual Basic)</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void RemoveCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCodeCompileUnit (codeCompileUnit As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="member this.RemoveCodeCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="typeProvider.RemoveCodeCompileUnit codeCompileUnit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="56c32-198">要删除的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-198">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to be removed.</span></span></param>
        <summary><span data-ttu-id="56c32-199">从此实例中移除所有对主题 <see cref="T:System.CodeDom.CodeCompileUnit" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="56c32-199">Removes all references to the subject <see cref="T:System.CodeDom.CodeCompileUnit" /> from this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-200">调用此方法时引发 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>。</span><span class="sxs-lookup"><span data-stu-id="56c32-200">The <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> is raised when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56c32-201"><paramref name="codeCompileUnit" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）</span><span class="sxs-lookup"><span data-stu-id="56c32-201"><paramref name="codeCompileUnit" /> is a null reference (<see langword="Nothing" /> in Visual Basic)</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLocalAssembly">
      <MemberSignature Language="C#" Value="public void SetLocalAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalAssembly (assembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.SetLocalAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.SetLocalAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="56c32-202">用于设置此值的 <see cref="T:System.Reflection.Assembly" /></span><span class="sxs-lookup"><span data-stu-id="56c32-202">The <see cref="T:System.Reflection.Assembly" /> used to set this value</span></span></param>
        <summary><span data-ttu-id="56c32-203">将本地 <see cref="T:System.Reflection.Assembly" /> 的值设置为引用的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-203">Sets the value of the local <see cref="T:System.Reflection.Assembly" /> to the referenced <see cref="T:System.Reflection.Assembly" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-204">调用此方法时引发 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged>。</span><span class="sxs-lookup"><span data-stu-id="56c32-204">The <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> is raised when this method is invoked.</span></span> <span data-ttu-id="56c32-205">应在调用 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly%28System.Reflection.Assembly%29> 之前调用 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%28System.Reflection.Assembly%29>，否则，它对 <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> 没有任何影响。</span><span class="sxs-lookup"><span data-stu-id="56c32-205">Call <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly%28System.Reflection.Assembly%29> before you call <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%28System.Reflection.Assembly%29> otherwise it has no affect on the <xref:System.Workflow.ComponentModel.Compiler.TypeProvider>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeLoadErrors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;object,Exception&gt; TypeLoadErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;object, class System.Exception&gt; TypeLoadErrors" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeLoadErrors As IDictionary(Of Object, Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::Object ^, Exception ^&gt; ^ TypeLoadErrors { System::Collections::Generic::IDictionary&lt;System::Object ^, Exception ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeLoadErrors : System.Collections.Generic.IDictionary&lt;obj, Exception&gt;" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Object,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-206">获取由导致 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" /> 键控的加载错误异常的 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-206">Gets an <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> that causes the <see cref="T:System.Exception" />.</span></span></summary>
        <value><span data-ttu-id="56c32-207">由导致 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" /> 键控的加载错误异常的 <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="56c32-207">An <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> that causes the <see cref="T:System.Exception" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56c32-208">每次引用此属性时均会创建一个更新并分离的 <xref:System.Collections.IDictionary>。</span><span class="sxs-lookup"><span data-stu-id="56c32-208">An updated, detached <xref:System.Collections.IDictionary> is created at each reference to this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeLoadErrorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TypeLoadErrorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TypeLoadErrorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeLoadErrorsChanged As EventHandler " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ TypeLoadErrorsChanged;" />
      <MemberSignature Language="F#" Value="member this.TypeLoadErrorsChanged : EventHandler " Usage="member this.TypeLoadErrorsChanged : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event TypeLoadErrorsChanged As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrorsChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-209">当修改集合 <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="56c32-209">Occurs when the collection <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> is modified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypesChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TypesChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TypesChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypesChanged As EventHandler " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ TypesChanged;" />
      <MemberSignature Language="F#" Value="member this.TypesChanged : EventHandler " Usage="member this.TypesChanged : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event TypesChanged As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypesChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56c32-210">在修改已定义类型的集合时发生。</span><span class="sxs-lookup"><span data-stu-id="56c32-210">Occurs when the collection of defined types is modified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
