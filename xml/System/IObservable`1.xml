<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f91e14e9d21b0df178d17c5736438af37c05dc9f" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94470472" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">提供通知信息的对象。</typeparam>
    <summary>定义基于推送的通知的提供程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601>和 <xref:System.IObservable%601> 接口为基于推送的通知（也称为观察者设计模式）提供通用机制。 <xref:System.IObservable%601>接口表示类，该类 (提供程序) 发送通知; <xref:System.IObserver%601> 接口表示在观察程序)  (接收它们的类。 `T` 表示提供通知信息的类。 在某些基于推送的通知中， <xref:System.IObserver%601> 实现和 `T` 可以表示相同类型。  
  
 提供程序必须实现一个方法， <xref:System.IObservable%601.Subscribe%2A> 该方法指示观察者要接收基于推送的通知。 方法的调用方传递观察程序的实例。 方法返回一个 <xref:System.IDisposable> 实现，该实现使观察程序可以在提供程序停止发送通知之前随时取消通知。  
  
 在任意给定时间，给定提供程序可以有零个、一个或多个观察程序。 提供程序负责存储对观察程序的引用，并确保它们在发送通知之前有效。 <xref:System.IObservable%601>接口不对观察器数或发送通知的顺序作出任何假设。  
  
 提供程序通过调用方法向观察者发送以下三种类型的通知 <xref:System.IObserver%601> ：  
  
-   当前数据。 提供程序可以调用 <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> 方法来传递 `T` 包含当前数据、更改的数据或新数据的对象。  
  
-   错误情况。 提供程序可以调用 <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> 方法，通知观察者发生了某种错误情况。  
  
-   无更多数据。 提供程序可以调用 <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> 方法，通知观察者它已完成发送通知。  
  
   
  
## Examples  
 下面的示例演示观察者设计模式。 它定义 `Location` 包含纬度和经度信息的类。  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationTracker`类提供 <xref:System.IObservable%601> 实现。 `TrackLocation`向其方法传递 `Location` 包含纬度和经度数据的可以为 null 的对象。 如果 `Location` 值不为 `null` ，则 `TrackLocation` 方法调用 <xref:System.IObserver%601.OnNext%2A> 每个观察程序的方法。  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 如果 `Location` 值为 `null` ，则该 `TrackLocation` 方法将实例化 `LocationUnknownException` 对象，如下例所示。 然后，它调用每个观察程序的 <xref:System.IObserver%601.OnError%2A> 方法并向其传递 `LocationUnknownException` 对象。 请注意 `LocationUnknownException` ，派生自 <xref:System.Exception> ，但不添加任何新成员。  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 观察者通过调用其方法来注册以接收来自对象的通知 `TrackLocation` <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> ，该方法将对观察者对象的引用分配给私有泛型 <xref:System.Collections.Generic.List%601> 对象。 方法返回一个 `Unsubscriber` 对象，该对象是一个 <xref:System.IDisposable> 实现，它使观察程序可以停止接收通知。 `LocationTracker`类还包含 `EndTransmission` 方法。 当没有更多的位置数据可用时，方法会调用每个观察程序的 <xref:System.IObserver%601.OnCompleted%2A> 方法，然后清除观察程序的内部列表。  
  
 在此示例中， `LocationReporter` 类提供了 <xref:System.IObserver%601> 实现。 它显示有关当前控制台位置的信息。 其构造函数包含一个 `name` 参数，该参数可使 `LocationReporter` 实例在其字符串输出中标识自身。 它还包括一个 `Subscribe` 方法，该方法将调用提供程序的 <xref:System.IObservable%601.Subscribe%2A> 方法。 这允许方法为私有变量分配返回的 <xref:System.IDisposable> 引用。 `LocationReporter`类还包括一个 `Unsubscribe` 方法，该方法调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法返回的对象的方法 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 。 下面的代码定义 `LocationReporter` 类。  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 然后，以下代码实例化提供程序和观察程序。  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="/dotnet/standard/events/observer-design-pattern">观察者设计模式</related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">将接收通知的对象。</param>
        <summary>通知提供程序观察程序将接收通知。</summary>
        <returns>对接口的引用，它允许观察程序在提供程序完成发送通知前停止接收通知。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObservable%601.Subscribe%2A>必须调用方法为基于推送的通知注册观察程序。 方法的典型实现执行 <xref:System.IObservable%601.Subscribe%2A> 以下操作：  
  
-   它在集合对象中存储对观察程序的引用，例如 <xref:System.Collections.Generic.List%601> 对象。  
  
-   它将返回对接口的引用 <xref:System.IDisposable> 。 这使观察程序可以取消订阅 (也就是说，在提供程序完成发送通知之前) 停止接收通知，并调用订阅者的 <xref:System.IObserver%601.OnCompleted%2A> 方法。  
  
 在任意给定时间，实现的特定实例 <xref:System.IObservable%601> 负责处理所有订阅并通知所有订阅服务器。 除非特定实现的文档 <xref:System.IObservable%601> 指示，否则观察程序应不会对实现进行任何假设 <xref:System.IObservable%601> ，如多个观察程序将接收的通知的顺序。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.IObservable%601.Subscribe%2A> 报告纬度和经度信息的应用程序的方法。 它定义 <xref:System.Collections.Generic.IList%601> 存储对所有观察程序的引用的集合对象。 它还返回一个名为的私有类 `Unsubscriber` ，该类实现 <xref:System.IDisposable> 接口，并使订阅服务器停止接收事件通知。  有关完整示例，请参阅主题的 "示例" 部分 <xref:System.IObservable%601> 。  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>
