<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="964e4f535ee713e26af76869be78e21c9f3aa4c8" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89852731" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="3bb23-101">提供通知信息的对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-101">The object that provides notification information.</span></span></typeparam>
    <summary><span data-ttu-id="3bb23-102">定义基于推送的通知的提供程序。</span><span class="sxs-lookup"><span data-stu-id="3bb23-102">Defines a provider for push-based notification.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bb23-103"><xref:System.IObserver%601>和 <xref:System.IObservable%601> 接口为基于推送的通知（也称为观察者设计模式）提供通用机制。</span><span class="sxs-lookup"><span data-stu-id="3bb23-103">The <xref:System.IObserver%601> and <xref:System.IObservable%601> interfaces provide a generalized mechanism for push-based notification, also known as the observer design pattern.</span></span> <span data-ttu-id="3bb23-104"><xref:System.IObservable%601>接口表示类，该类 (提供程序) 发送通知; <xref:System.IObserver%601> 接口表示在观察程序)  (接收它们的类。</span><span class="sxs-lookup"><span data-stu-id="3bb23-104">The <xref:System.IObservable%601> interface represents the class that sends notifications (the provider); the <xref:System.IObserver%601> interface represents the class that receives them (the observer).</span></span> <span data-ttu-id="3bb23-105">`T` 表示提供通知信息的类。</span><span class="sxs-lookup"><span data-stu-id="3bb23-105">`T` represents the class that provides the notification information.</span></span> <span data-ttu-id="3bb23-106">在某些基于推送的通知中， <xref:System.IObserver%601> 实现和 `T` 可以表示相同类型。</span><span class="sxs-lookup"><span data-stu-id="3bb23-106">In some push-based notifications, the <xref:System.IObserver%601> implementation and `T` can represent the same type.</span></span>  
  
 <span data-ttu-id="3bb23-107">提供程序必须实现一个方法， <xref:System.IObservable%601.Subscribe%2A> 该方法指示观察者要接收基于推送的通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-107">The provider must implement a single method, <xref:System.IObservable%601.Subscribe%2A>, that indicates that an observer wants to receive push-based notifications.</span></span> <span data-ttu-id="3bb23-108">方法的调用方传递观察程序的实例。</span><span class="sxs-lookup"><span data-stu-id="3bb23-108">Callers to the method pass an instance of the observer.</span></span> <span data-ttu-id="3bb23-109">方法返回一个 <xref:System.IDisposable> 实现，该实现使观察程序可以在提供程序停止发送通知之前随时取消通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-109">The method returns an <xref:System.IDisposable> implementation that enables observers to cancel notifications at any time before the provider has stopped sending them.</span></span>  
  
 <span data-ttu-id="3bb23-110">在任意给定时间，给定提供程序可以有零个、一个或多个观察程序。</span><span class="sxs-lookup"><span data-stu-id="3bb23-110">At any given time, a given provider may have zero, one, or multiple observers.</span></span> <span data-ttu-id="3bb23-111">提供程序负责存储对观察程序的引用，并确保它们在发送通知之前有效。</span><span class="sxs-lookup"><span data-stu-id="3bb23-111">The provider is responsible for storing references to observers and ensuring that they are valid before it sends notifications.</span></span> <span data-ttu-id="3bb23-112"><xref:System.IObservable%601>接口不对观察器数或发送通知的顺序作出任何假设。</span><span class="sxs-lookup"><span data-stu-id="3bb23-112">The <xref:System.IObservable%601> interface does not make any assumptions about the number of observers or the order in which notifications are sent.</span></span>  
  
 <span data-ttu-id="3bb23-113">提供程序通过调用方法向观察者发送以下三种类型的通知 <xref:System.IObserver%601> ：</span><span class="sxs-lookup"><span data-stu-id="3bb23-113">The provider sends the following three kinds of notifications to the observer by calling <xref:System.IObserver%601> methods:</span></span>  
  
-   <span data-ttu-id="3bb23-114">当前数据。</span><span class="sxs-lookup"><span data-stu-id="3bb23-114">The current data.</span></span> <span data-ttu-id="3bb23-115">提供程序可以调用 <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> 方法来传递 `T` 包含当前数据、更改的数据或新数据的对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-115">The provider can call the <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> method to pass the observer a `T` object that has current data, changed data, or fresh data.</span></span>  
  
-   <span data-ttu-id="3bb23-116">错误情况。</span><span class="sxs-lookup"><span data-stu-id="3bb23-116">An error condition.</span></span> <span data-ttu-id="3bb23-117">提供程序可以调用 <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> 方法，通知观察者发生了某种错误情况。</span><span class="sxs-lookup"><span data-stu-id="3bb23-117">The provider can call the <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> method to notify the observer that some error condition has occurred.</span></span>  
  
-   <span data-ttu-id="3bb23-118">无更多数据。</span><span class="sxs-lookup"><span data-stu-id="3bb23-118">No further data.</span></span> <span data-ttu-id="3bb23-119">提供程序可以调用 <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> 方法，通知观察者它已完成发送通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-119">The provider can call the <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> method to notify the observer that it has finished sending notifications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bb23-120">下面的示例演示观察者设计模式。</span><span class="sxs-lookup"><span data-stu-id="3bb23-120">The following example illustrates the observer design pattern.</span></span> <span data-ttu-id="3bb23-121">它定义 `Location` 包含纬度和经度信息的类。</span><span class="sxs-lookup"><span data-stu-id="3bb23-121">It defines a `Location` class that contains latitude and longitude information.</span></span>  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 <span data-ttu-id="3bb23-122">`LocationTracker`类提供 <xref:System.IObservable%601> 实现。</span><span class="sxs-lookup"><span data-stu-id="3bb23-122">The `LocationTracker` class provides the <xref:System.IObservable%601> implementation.</span></span> <span data-ttu-id="3bb23-123">`TrackLocation`向其方法传递 `Location` 包含纬度和经度数据的可以为 null 的对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-123">Its `TrackLocation` method is passed a nullable `Location` object that contains the latitude and longitude data.</span></span> <span data-ttu-id="3bb23-124">如果 `Location` 值不为 `null` ，则 `TrackLocation` 方法调用 <xref:System.IObserver%601.OnNext%2A> 每个观察程序的方法。</span><span class="sxs-lookup"><span data-stu-id="3bb23-124">If the `Location` value is not `null`, the `TrackLocation` method calls the <xref:System.IObserver%601.OnNext%2A> method of each observer.</span></span>  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 <span data-ttu-id="3bb23-125">如果 `Location` 值为 `null` ，则该 `TrackLocation` 方法将实例化 `LocationUnknownException` 对象，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="3bb23-125">If the `Location` value is `null`, the `TrackLocation` method instantiates a `LocationUnknownException` object, which is shown in the following example.</span></span> <span data-ttu-id="3bb23-126">然后，它调用每个观察程序的 <xref:System.IObserver%601.OnError%2A> 方法并向其传递 `LocationUnknownException` 对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-126">It then calls each observer's <xref:System.IObserver%601.OnError%2A> method and passes it the `LocationUnknownException` object.</span></span> <span data-ttu-id="3bb23-127">请注意 `LocationUnknownException` ，派生自 <xref:System.Exception> ，但不添加任何新成员。</span><span class="sxs-lookup"><span data-stu-id="3bb23-127">Note that `LocationUnknownException` derives from <xref:System.Exception>, but does not add any new members.</span></span>  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 <span data-ttu-id="3bb23-128">观察者通过调用其方法来注册以接收来自对象的通知 `TrackLocation` <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> ，该方法将对观察者对象的引用分配给私有泛型 <xref:System.Collections.Generic.List%601> 对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-128">Observers register to receive notifications from a `TrackLocation` object by calling its <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> method, which assigns a reference to the observer object to a private generic <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="3bb23-129">方法返回一个 `Unsubscriber` 对象，该对象是一个 <xref:System.IDisposable> 实现，它使观察程序可以停止接收通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-129">The method returns an `Unsubscriber` object, which is an <xref:System.IDisposable> implementation that enables observers to stop receiving notifications.</span></span> <span data-ttu-id="3bb23-130">`LocationTracker`类还包含 `EndTransmission` 方法。</span><span class="sxs-lookup"><span data-stu-id="3bb23-130">The `LocationTracker` class also includes an `EndTransmission` method.</span></span> <span data-ttu-id="3bb23-131">当没有更多的位置数据可用时，方法会调用每个观察程序的 <xref:System.IObserver%601.OnCompleted%2A> 方法，然后清除观察程序的内部列表。</span><span class="sxs-lookup"><span data-stu-id="3bb23-131">When no further location data is available, the method calls each observer's <xref:System.IObserver%601.OnCompleted%2A> method and then clears the internal list of observers.</span></span>  
  
 <span data-ttu-id="3bb23-132">在此示例中， `LocationReporter` 类提供了 <xref:System.IObserver%601> 实现。</span><span class="sxs-lookup"><span data-stu-id="3bb23-132">In this example, the `LocationReporter` class provides the <xref:System.IObserver%601> implementation.</span></span> <span data-ttu-id="3bb23-133">它显示有关当前控制台位置的信息。</span><span class="sxs-lookup"><span data-stu-id="3bb23-133">It displays information about the current location to the console.</span></span> <span data-ttu-id="3bb23-134">其构造函数包含一个 `name` 参数，该参数可使 `LocationReporter` 实例在其字符串输出中标识自身。</span><span class="sxs-lookup"><span data-stu-id="3bb23-134">Its constructor includes a `name` parameter, which enables the `LocationReporter` instance to identify itself in its string output.</span></span> <span data-ttu-id="3bb23-135">它还包括一个 `Subscribe` 方法，该方法将调用提供程序的 <xref:System.IObservable%601.Subscribe%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="3bb23-135">It also includes a `Subscribe` method, which wraps a call to the provider's <xref:System.IObservable%601.Subscribe%2A> method.</span></span> <span data-ttu-id="3bb23-136">这允许方法为私有变量分配返回的 <xref:System.IDisposable> 引用。</span><span class="sxs-lookup"><span data-stu-id="3bb23-136">This allows the method to assign the returned <xref:System.IDisposable> reference to a private variable.</span></span> <span data-ttu-id="3bb23-137">`LocationReporter`类还包括一个 `Unsubscribe` 方法，该方法调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法返回的对象的方法 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="3bb23-137">The `LocationReporter` class also includes an `Unsubscribe` method, which calls the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method of the object that is returned by the <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3bb23-138">下面的代码定义 `LocationReporter` 类。</span><span class="sxs-lookup"><span data-stu-id="3bb23-138">The following code defines the `LocationReporter` class.</span></span>  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 <span data-ttu-id="3bb23-139">然后，以下代码实例化提供程序和观察程序。</span><span class="sxs-lookup"><span data-stu-id="3bb23-139">The following code then instantiates the provider and the observer.</span></span>  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="/dotnet/standard/events/observer-design-pattern"><span data-ttu-id="3bb23-140">观察者设计模式</span><span class="sxs-lookup"><span data-stu-id="3bb23-140">The Observer Design Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer"><span data-ttu-id="3bb23-141">将接收通知的对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-141">The object that is to receive notifications.</span></span></param>
        <summary><span data-ttu-id="3bb23-142">通知提供程序观察程序将接收通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-142">Notifies the provider that an observer is to receive notifications.</span></span></summary>
        <returns><span data-ttu-id="3bb23-143">对接口的引用，它允许观察程序在提供程序完成发送通知前停止接收通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-143">A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3bb23-144"><xref:System.IObservable%601.Subscribe%2A>必须调用方法为基于推送的通知注册观察程序。</span><span class="sxs-lookup"><span data-stu-id="3bb23-144">The <xref:System.IObservable%601.Subscribe%2A> method must be called to register an observer for push-based notifications.</span></span> <span data-ttu-id="3bb23-145">方法的典型实现执行 <xref:System.IObservable%601.Subscribe%2A> 以下操作：</span><span class="sxs-lookup"><span data-stu-id="3bb23-145">A typical implementation of the <xref:System.IObservable%601.Subscribe%2A> method does the following:</span></span>  
  
-   <span data-ttu-id="3bb23-146">它在集合对象中存储对观察程序的引用，例如 <xref:System.Collections.Generic.List%601> 对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-146">It stores a reference to the observer in a collection object, such as a <xref:System.Collections.Generic.List%601> object.</span></span>  
  
-   <span data-ttu-id="3bb23-147">它将返回对接口的引用 <xref:System.IDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="3bb23-147">It returns a reference to an <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="3bb23-148">这使观察程序可以取消订阅 (也就是说，在提供程序完成发送通知之前) 停止接收通知，并调用订阅者的 <xref:System.IObserver%601.OnCompleted%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="3bb23-148">This enables observers to unsubscribe (that is, to stop receiving notifications) before the provider has finished sending them and called the subscriber's <xref:System.IObserver%601.OnCompleted%2A> method.</span></span>  
  
 <span data-ttu-id="3bb23-149">在任意给定时间，实现的特定实例 <xref:System.IObservable%601> 负责处理所有订阅并通知所有订阅服务器。</span><span class="sxs-lookup"><span data-stu-id="3bb23-149">At any given time, a particular instance of an <xref:System.IObservable%601> implementation is responsible for handling all subscriptions and notifying all subscribers.</span></span> <span data-ttu-id="3bb23-150">除非特定实现的文档 <xref:System.IObservable%601> 指示，否则观察程序应不会对实现进行任何假设 <xref:System.IObservable%601> ，如多个观察程序将接收的通知的顺序。</span><span class="sxs-lookup"><span data-stu-id="3bb23-150">Unless the documentation for a particular <xref:System.IObservable%601> implementation indicates otherwise, observers should make no assumptions about the <xref:System.IObservable%601> implementation, such as the order of notifications that multiple observers will receive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3bb23-151">下面的示例演示了 <xref:System.IObservable%601.Subscribe%2A> 报告纬度和经度信息的应用程序的方法。</span><span class="sxs-lookup"><span data-stu-id="3bb23-151">The following example illustrates the <xref:System.IObservable%601.Subscribe%2A> method for an application that reports latitude and longitude information.</span></span> <span data-ttu-id="3bb23-152">它定义 <xref:System.Collections.Generic.IList%601> 存储对所有观察程序的引用的集合对象。</span><span class="sxs-lookup"><span data-stu-id="3bb23-152">It defines an <xref:System.Collections.Generic.IList%601> collection object that stores references to all observers.</span></span> <span data-ttu-id="3bb23-153">它还返回一个名为的私有类 `Unsubscriber` ，该类实现 <xref:System.IDisposable> 接口，并使订阅服务器停止接收事件通知。</span><span class="sxs-lookup"><span data-stu-id="3bb23-153">It also returns a private class named `Unsubscriber` that implements the <xref:System.IDisposable> interface and enables subscribers to stop receiving event notifications.</span></span>  <span data-ttu-id="3bb23-154">有关完整示例，请参阅主题的 "示例" 部分 <xref:System.IObservable%601> 。</span><span class="sxs-lookup"><span data-stu-id="3bb23-154">See the Example section of the <xref:System.IObservable%601> topic for the complete example.</span></span>  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>
