<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e5a922416cec858e8006f1951c74c6abe1bb9a5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86687945" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FlagsAttribute extends System.Attribute" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指示可将枚举视为位域（即一组标志）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 位域通常用于可能会组合在一起的元素列表，而枚举常量通常用于互斥元素的列表。 因此，位域设计为与按位 "或" 运算组合以生成未命名的值，而不是枚举的常量。 与枚举常量相比，语言的使用位域有所不同。  
  
## <a name="attributes-of-the-flagsattribute"></a>FlagsAttribute 的属性  
 <xref:System.AttributeUsageAttribute> 应用于此类，其 <xref:System.AttributeUsageAttribute.Inherited%2A> 属性指定 `false` 。 此特性仅可应用于枚举。  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>FlagsAttribute 和 Enum 的准则  
  
-   <xref:System.FlagsAttribute>仅当按位运算 (and、OR、EXCLUSIVE 或) 在数值上执行时，才将自定义属性用于枚举。  
  
-   以2的幂（即1、2、4、8等）定义枚举常数。 这意味着组合枚举常量中的各个标志不会重叠。  
  
-   请考虑为常用标记组合创建枚举常数。 例如，如果您有一个枚举用于包含枚举常量和的文件 i/o 操作 `Read = 1` `Write = 2` ，请考虑创建一个 `ReadWrite = Read OR Write` 合并和标志的枚举常数 `Read` `Write` 。 此外，在某些情况下，用于合并标志的按位 "或" 运算在某些情况下可能被视为高级概念，而对于简单任务不是必需的。  
  
-   如果将一个负数定义为标志枚举常量，则请小心，因为许多标志位置可能设置为1，这可能会使代码混乱并鼓励编码错误。  
  
-   测试某个标志是否在数值中设置的一种简便方法是：在数值和标志枚举常量之间执行按位 "与" 运算，这会将数值中的所有位设置为零，而不是对应于标志，然后测试该操作的结果是否等于标志枚举常数。  
  
-   `None`用作值为零的标志枚举常量的名称。 不能使用 `None` 按位 "与" 运算中的枚举常量来测试标志，因为结果始终为零。 不过，您可以对数字值和枚举常量执行逻辑 "非按位" 比较， `None` 以确定是否设置了数值中的任何位。  
  
     如果创建的是值枚举而不是标志枚举，则创建枚举常数仍是有意义的 `None` 。 这是因为，默认情况下，由公共语言运行时将用于枚举的内存初始化为零。 因此，如果未定义值为零的常量，则在创建枚举时将包含非法值。  
  
     如果应用程序需要表示一个明显的默认情况，请考虑使用值为零的枚举常数来表示默认值。 如果没有默认的情况，请考虑使用值为零的枚举常数，表示不是由其他任何枚举常数表示的情况。  
  
-   不要定义仅用于镜像枚举自身状态的枚举值。 例如，不要定义仅标记枚举结尾的枚举常数。 如果需要确定枚举的最后一个值，请显式检查该值。 此外，如果范围内的所有值都有效，则可以对第一个和最后一个枚举常量执行范围检查。  
  
-   不要指定保留供将来使用的枚举常量。  
  
-   定义将枚举常量作为值的方法或属性时，请考虑验证值。 原因在于，您可以将数值强制转换为枚举类型，即使枚举中未定义该数值。  
  
   
  
## Examples  
 下面的示例阐释了如何使用 `FlagsAttribute` 特性，并显示对 <xref:System.Enum.ToString%2A> 声明使用的方法的影响 `FlagsAttribute` <xref:System.Enum> 。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb" id="Snippet1":::
  
 前面的示例定义了两个与颜色相关的枚举： `SingleHue` 和 `MultiHue` 。 后者具有 `FlagsAttribute` 属性; 前者不具有属性。 此示例显示了在一个整数范围（包括不表示枚举类型的基础值的整数）转换为枚举类型及其显示的字符串表示形式时的行为差异。   例如，请注意，3不能表示为 `SingleHue` 值，因为3不是任何成员的基础值 `SingleHue` ，而特性使你可以将 `FlagsAttribute` 3 表示为 `MultiHue` 的值 `Black, Red` 。  

 下面的示例使用特性定义另一个枚举 `FlagsAttribute` ，并演示如何使用按位逻辑与相等运算符来确定在枚举值中是否设置了一个或多个位域。 你还可以使用 <xref:System.Enum.HasFlag%2A?displayProperty=nameWithType> 方法来执行此操作，但本示例中未显示此方法。
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp" id="Snippet2":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb" id="Snippet2":::
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.FlagsAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例定义了一个 `PhoneService` 枚举，该枚举表示电话公司提供的通信形式。 它初始化三个表示提供给三个不同家庭的服务的变量，然后指示哪些家庭没有服务，哪些家庭只包含手机服务，哪些家庭具有手机和陆地线路服务。 最后，它隐式调用 <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> 方法以显示提供给每个家庭的服务的类型。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 下面的示例阐释了如何使用 `FlagsAttribute` 特性，并显示对 <xref:System.Enum.ToString%2A> 声明使用的方法的影响 `FlagsAttribute` <xref:System.Enum> 。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
