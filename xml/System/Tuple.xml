<Type Name="Tuple" FullName="System.Tuple">
  <Metadata><Meta Name="ms.openlocfilehash" Value="92f285834dfc425ae56131ff08d66f1c0d06c0b6" /><Meta Name="ms.sourcegitcommit" Value="bf6097023ffdd7088f0ff6f6daf84265f9b5bd8a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/16/2021" /><Meta Name="ms.locfileid" Value="98535783" /></Metadata><TypeSignature Language="C#" Value="public static class Tuple" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Tuple extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Tuple" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple" />
  <TypeSignature Language="C++ CLI" Value="public ref class Tuple abstract sealed" />
  <TypeSignature Language="F#" Value="type Tuple = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于创造元组对象的静态方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元组是具有特定数量和元素序列的数据结构。 元组的一个示例是具有三个元素的数据结构， (称为3元组或三) ，用于在第一个元素、第二个元素中的年份和第三个元素中的该年份的人员收入之间存储标识符，如人员姓名。 .NET Framework 直接支持包含1到7个元素的元组。 此外，通过在对象的属性中嵌套元组对象，可以创建八个或多个元素的元组 <xref:System.Tuple%608.Rest%2A> <xref:System.Tuple%608> 。  
  
 元组通常以四种方式使用：  
  
-   表示单个数据集。 例如，元组可以表示数据库记录，并且其组件可以表示记录的各个字段。  
  
-   提供对数据集的轻松访问和操作。  
  
-   如果为，则从方法返回多个值，而不使用 `out` 参数 (在 c # 中 ) 或 `ByRef` (Visual Basic) 中的参数。  
  
-   若要通过单个参数向方法传递多个值，则为。 例如，该 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 方法只有一个参数，该参数可让你为线程在启动时执行的方法提供一个值。 如果提供 <xref:System.Tuple%603> 对象作为方法参数，则可以为该线程的启动例程提供三个数据项。  
  
 <xref:System.Tuple>类本身不表示元组。 相反，它是一个类，该类提供静态方法用于创建 .NET Framework 支持的元组类型的实例。 它提供帮助器方法，你可以调用它来实例化元组对象，而无需显式指定每个元组组件的类型。  
  
 尽管可以通过调用类构造函数来创建元组类的实例，但执行此操作的代码可能会很繁琐。 下面的示例使用类构造函数创建一个7元组或七元组，其中包含从1950到2000的每个人口普查的纽约人口数据。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.class/cs/example1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.class/vb/example1.vb" id="Snippet1":::
  
 使用 helper 方法创建相同的元组对象更简单，如下面的示例所示。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.class/cs/example1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.class/vb/example1.vb" id="Snippet2":::
  
 <xref:System.Tuple.Create%2A>Helper 方法直接支持创建包含一到八个组件的元组对象， (即通过 octuples) 单一实例。 尽管元组可能具有的组件数没有实际限制，但帮助器方法不可用于创建包含九个或更多组件的元组。 若要创建此类元组，必须调用 <xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType> 构造函数。  
  
> [!NOTE]
>  有关使用元组的其他信息和示例，请参阅 .NET Framework 中各个元组类型的文档。 本主题末尾的 "另请参阅" 部分中列出了这些内容。  
  
   
  
## Examples  
 下面的示例创建一个8元组 (八元组) ，其中包含小于20的质数。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs" interactive="try-dotnet-method" id="Snippet17":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb" id="Snippet17":::
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Create&lt;T1&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建新的元组对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create&lt;T1&gt;">
      <MemberSignature Language="C#" Value="public static (T1) Create&lt;T1&gt; (T1 item1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`1&lt;!!T1&gt; Create&lt;T1&gt;(!!T1 item1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1) (item1 As T1) As Tuple(Of T1)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1&gt;&#xA; static Tuple&lt;T1&gt; ^ Create(T1 item1);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 -&gt; 'T1" Usage="System.Tuple.Create item1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
      </Parameters>
      <Docs>
        <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
        <param name="item1">元组仅有的分量的值。</param>
        <summary>创建新的 1 元组，即单一实例。</summary>
        <returns>值为 (<paramref name="item1" />) 的元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化1元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化1元组，其组件的类型为 <xref:System.Int32> 。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet1":::
 
 此代码等效于以下对 <xref:System.Tuple%601.%23ctor%2A> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet2":::
 
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`1" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2) Create&lt;T1,T2&gt; (T1 item1, T2 item2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`2&lt;!!T1, !!T2&gt; Create&lt;T1, T2&gt;(!!T1 item1, !!T2 item2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``2(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2) (item1 As T1, item2 As T2) As Tuple(Of T1, T2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static Tuple&lt;T1, T2&gt; ^ Create(T1 item1, T2 item2);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 -&gt; 'T1 * 'T2" Usage="System.Tuple.Create (item1, item2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <summary>创建新的 2 元组，即二元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />) 的 2 元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化2元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化2元组。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet3":::
 
 此代码等效于以下对 <xref:System.Tuple%602.%23ctor%2A> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`2" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3) Create&lt;T1,T2,T3&gt; (T1 item1, T2 item2, T3 item3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`3&lt;!!T1, !!T2, !!T3&gt; Create&lt;T1, T2, T3&gt;(!!T1 item1, !!T2 item2, !!T3 item3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``3(``0,``1,``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3) (item1 As T1, item2 As T2, item3 As T3) As Tuple(Of T1, T2, T3)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static Tuple&lt;T1, T2, T3&gt; ^ Create(T1 item1, T2 item2, T3 item3);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 -&gt; 'T1 * 'T2 * 'T3" Usage="System.Tuple.Create (item1, item2, item3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <typeparam name="T3">元组的第三个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <param name="item3">此元组的第三个分量的值。</param>
        <summary>创建新的 3 元组，即三元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />) 的 3 元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化3元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化一个3元组。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet5":::
  
 此代码等效于以下对 <xref:System.Tuple%603.%23ctor%2A?displayProperty=nameWithType> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet6":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet6":::
 
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`3" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4) Create&lt;T1,T2,T3,T4&gt; (T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; Create&lt;T1, T2, T3, T4&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``4(``0,``1,``2,``3)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4) (item1 As T1, item2 As T2, item3 As T3, item4 As T4) As Tuple(Of T1, T2, T3, T4)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA; static Tuple&lt;T1, T2, T3, T4&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'T1 * 'T2 * 'T3 * 'T4" Usage="System.Tuple.Create (item1, item2, item3, item4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <typeparam name="T3">元组的第三个分量的类型。</typeparam>
        <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <param name="item3">此元组的第三个分量的值。</param>
        <param name="item4">此元组的第四个分量的值。</param>
        <summary>创建新的 4 元组，即四元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />) 的 4 元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化4元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化4元组。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet7":::
 
 此代码等效于以下对 <xref:System.Tuple%604.%23ctor%2A?displayProperty=nameWithType> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet8":::
 
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`4" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5) Create&lt;T1,T2,T3,T4,T5&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; Create&lt;T1, T2, T3, T4, T5&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5) As Tuple(Of T1, T2, T3, T4, T5)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5" Usage="System.Tuple.Create (item1, item2, item3, item4, item5)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <typeparam name="T3">元组的第三个分量的类型。</typeparam>
        <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
        <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <param name="item3">此元组的第三个分量的值。</param>
        <param name="item4">此元组的第四个分量的值。</param>
        <param name="item5">此元组的第五个分量的值。</param>
        <summary>创建新的 5 元组，即五元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />) 的 5 元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化5元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化5元组。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet9":::
 
 此代码等效于以下对 <xref:System.Tuple%605.%23ctor%2A> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet10":::
 
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`5" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5,T6&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5,T6) Create&lt;T1,T2,T3,T4,T5,T6&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; Create&lt;T1, T2, T3, T4, T5, T6&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5, T6) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6) As Tuple(Of T1, T2, T3, T4, T5, T6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5, T6&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6" Usage="System.Tuple.Create (item1, item2, item3, item4, item5, item6)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <typeparam name="T3">元组的第三个分量的类型。</typeparam>
        <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
        <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
        <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <param name="item3">此元组的第三个分量的值。</param>
        <param name="item4">此元组的第四个分量的值。</param>
        <param name="item5">此元组的第五个分量的值。</param>
        <param name="item6">此元组的第六个分量的值。</param>
        <summary>创建新的 6 元组，即六元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />) 的 6 元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化6元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化6元组。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet11":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet11":::
 
 此代码等效于以下对 <xref:System.Tuple%606.%23ctor%2A> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet12":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet12":::
 
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`6" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5,T6,T7) Create&lt;T1,T2,T3,T4,T5,T6,T7&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; Create&lt;T1, T2, T3, T4, T5, T6, T7&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5, T6, T7) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7) As Tuple(Of T1, T2, T3, T4, T5, T6, T7)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7" Usage="System.Tuple.Create (item1, item2, item3, item4, item5, item6, item7)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <typeparam name="T3">元组的第三个分量的类型。</typeparam>
        <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
        <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
        <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
        <typeparam name="T7">元组的第七个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <param name="item3">此元组的第三个分量的值。</param>
        <param name="item4">此元组的第四个分量的值。</param>
        <param name="item5">此元组的第五个分量的值。</param>
        <param name="item6">此元组的第六个分量的值。</param>
        <param name="item7">元组的第七个分量的值。</param>
        <summary>创建新的 7 元组，即七元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />) 的 7 元组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化7元组对象，而无需显式指定其组件的类型。 下面的示例使用 <xref:System.Tuple.Create%2A> 方法实例化7元组。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet13":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet13":::
 
 此代码等效于以下对 <xref:System.Tuple%607.%23ctor%2A> 类构造函数的调用。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs" interactive="try-dotnet-method" id="Snippet14":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb" id="Snippet14":::
 
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`7" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8&gt;) Create&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`1&lt;!!T8&gt;&gt; Create&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5, T6, T7, T8) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, item8 As T8) As Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5, T6, T7, Tuple&lt;T8&gt; ^&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8" Usage="System.Tuple.Create (item1, item2, item3, item4, item5, item6, item7, item8)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="item8" Type="T8" />
      </Parameters>
      <Docs>
        <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
        <typeparam name="T2">元组的第二个分量的类型。</typeparam>
        <typeparam name="T3">元组的第三个分量的类型。</typeparam>
        <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
        <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
        <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
        <typeparam name="T7">元组的第七个分量的类型。</typeparam>
        <typeparam name="T8">元组的第八个分量的类型。</typeparam>
        <param name="item1">此元组的第一个分量的值。</param>
        <param name="item2">此元组的第二个分量的值。</param>
        <param name="item3">此元组的第三个分量的值。</param>
        <param name="item4">此元组的第四个分量的值。</param>
        <param name="item5">此元组的第五个分量的值。</param>
        <param name="item6">此元组的第六个分量的值。</param>
        <param name="item7">元组的第七个分量的值。</param>
        <param name="item8">元组的第八个分量的值。</param>
        <summary>创建新的 8 元组，即八元组。</summary>
        <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />) 的 8 元祖（八元组）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> 是一个帮助器方法，你可以调用它来实例化8元组，而无需显式指定其组件的类型。  
  
> [!NOTE]
>  必须调用  <xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType> 构造函数来创建具有九个或更多组件的元组，除非你的语言为此目的提供了特殊语法。 `Shared`类的 Visual Basic) 方法中的静态 (<xref:System.Tuple> 不能用于创建包含9个或更多组件的元组。  
  
   
  
## Examples  
 下面的示例创建一个8元组，其组件为小于20的质数。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs" interactive="try-dotnet-method" id="Snippet17":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb" id="Snippet17":::

 这等效于下面的示例，该示例使用 <xref:System.Tuple%608> 类构造函数而不是 <xref:System.Tuple.Create%2A> 工厂创建方法。 请注意， <xref:System.Tuple%608> 以这种方式实例化对象涉及更多代码，因为必须将嵌套的 <xref:System.Tuple%601> 对象声明为 <xref:System.Tuple%608> 对象的第8个组件，才能生成八元组。  
  
 [!code-csharp[System.Tuple.Create#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/ctor8.cs#20)]
 [!code-vb[System.Tuple.Create#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/ctor8.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`8" />
      </Docs>
    </Member>
  </Members>
</Type>
