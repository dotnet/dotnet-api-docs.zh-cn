<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae6514381366b6d12bc1a36d45bde0b8dff548ca" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91924559" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种功能，用以将对象的值格式化为字符串表示形式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable>接口根据格式字符串和格式提供程序，将对象转换为其字符串表示形式。  
  
 格式字符串通常定义对象的一般外观。 例如，.NET Framework 支持以下各项：  
  
-   用于对枚举值进行格式设置的标准格式字符串 (参阅) 的 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings) 。  
  
-   用于格式化数值的标准和自定义格式字符串 (参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)) 。  
  
-   用于格式化日期和时间值的标准和自定义格式字符串 (参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)) 。  
  
-   格式化时间间隔的标准和自定义格式字符串 (参阅 [标准 Timespan 格式字符串](/dotnet/standard/base-types/standard-timespan-format-strings) 和 [自定义的 timespan 格式字符串](/dotnet/standard/base-types/custom-timespan-format-strings)) 。  
  
 你还可以定义自己的格式字符串以支持应用程序定义类型的格式设置。  
  
 格式提供程序返回一个格式设置对象，该对象通常定义用于将对象转换为其字符串表示形式的符号。 例如，在将数字转换为货币值时，格式提供程序将定义显示在结果字符串中的货币符号。 .NET Framework 定义了三种格式提供程序：  
  
-   <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>类，它返回 <xref:System.Globalization.NumberFormatInfo> 用于设置数值格式的对象，或 <xref:System.Globalization.DateTimeFormatInfo> 用于设置日期和时间值格式的对象。  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>类，它返回自身的实例以设置数值的格式。  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>类，它为日期和时间值的格式返回自身的实例。  
  
 此外，还可以定义自己的自定义格式提供程序，以提供用于格式设置的特定于区域性的特定于职业的特定信息或行业特定的信息。 有关使用自定义格式提供程序实现自定义格式设置的详细信息，请参阅 <xref:System.ICustomFormatter> 。  
  
 <xref:System.IFormattable>接口定义一个方法，该方法 <xref:System.IFormattable.ToString%2A> 为实现类型提供格式设置服务。 <xref:System.IFormattable.ToString%2A>可以直接调用方法。 此外，通过 <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> 和 <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法以及在 .NET Framework 中使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 的方法，将自动调用此方法。 此类方法包括 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType> 、 <xref:System.String.Format%2A?displayProperty=nameWithType> 、和 <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType> 。 为 <xref:System.IFormattable.ToString%2A> 方法的格式字符串中的每个格式项调用方法。  
  
 <xref:System.IFormattable>接口由基本数据类型实现。  
  
   
  
## Examples  
 下面的示例定义一个实现 `Temperature` 接口的 <xref:System.IFormattable> 类。 类支持四种格式说明符： "G" 和 "C"，指示温度以摄氏显示;"F"，指示温度将以华氏显示;和 "K"，表示温度显示为 "开氏"。 此外， <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 实现还可以处理为或空的格式字符串 `null` 。 类定义的其他两种 `ToString` 方法 `Temperature` 只是包装对实现的调用 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 然后，下面的示例将 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 直接或通过使用复合格式字符串调用实现。  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>需要更好地控制字符串格式的类 <see cref="M:System.Object.ToString" /> 应实现 <see cref="T:System.IFormattable" /> 。  
  
实现的类 <see cref="T:System.IFormattable" /> 必须支持 (常规) 格式说明符的 "G"。 除了 "G" 说明符以外，类还可以定义它所支持的格式说明符的列表。 此外，类必须准备好处理的格式说明符 <see langword="null" /> 。 有关格式设置和格式设置代码的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberSignature Language="C#" Value="public string? ToString (string format, IFormatProvider formatProvider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">要使用的格式。  
  
- 或 - 
null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
        <param name="formatProvider">要用于格式化值的提供程序。  
  
- 或 - 
null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于从操作系统的当前区域设置获取数字格式信息。</param>
        <summary>使用指定格式对当前实例的值设置格式。</summary>
        <returns>采用指定格式的当前实例的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A>方法将值转换为可通过多种方式表示的字符串表示形式。 其精确格式取决于特定的符号或特定区域性、职业或行业定义的指定顺序。 可以直接调用方法。 它还由和方法自动调用 <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> ， <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 以及在 .NET Framework 中使用复合格式设置功能的方法，例如 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 、 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 和 <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。  (有关详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。 )   
  
 复合格式设置方法 <xref:System.IFormattable.ToString%2A> 为格式字符串中的每个格式项调用方法一次。 传递给方法的参数取决于在格式项的内容上调用和的特定格式设置方法，如下所示：  
  
-   如果格式项不包含格式字符串 (例如，如果仅) 格式项 `{0}` ，则会将其 `null` 作为参数的值传递 <xref:System.String?displayProperty=nameWithType> 。  
  
-   如果格式项包含格式字符串 (例如 `{0:G}`) ，则该格式字符串将作为参数的值传递 <xref:System.String?displayProperty=nameWithType> 。  
  
-   如果原始方法调用不包含 <xref:System.IFormatProvider?displayProperty=nameWithType> 参数， <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 则将作为参数的值传递 <xref:System.IFormatProvider?displayProperty=nameWithType> 。  
  
-   如果原始方法调用包含 <xref:System.IFormatProvider?displayProperty=nameWithType> 参数，则方法调用中提供的提供程序将作为参数的值传递 <xref:System.IFormatProvider?displayProperty=nameWithType> 。  
  
> [!NOTE]
>  <xref:System.IFormattable.ToString%2A>仅当对象未传递 <xref:System.ICustomFormatter> 格式提供程序或 <xref:System.ICustomFormatter.Format%2A> 自定义格式提供程序的方法返回时，复合格式设置方法才能调用该对象的实现 `null` 。  
  
 .NET Framework 包括三种格式提供程序，它们都实现 <xref:System.IFormatProvider> 接口：  
  
-   <xref:System.Globalization.NumberFormatInfo> 提供数字格式设置信息，如用于小数点和组分隔符的字符，以及货币值中的货币符号的拼写和位置。  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 提供日期相关和与时间相关的格式设置信息，例如日期模式中月份、日期和年份的位置。  
  
-   <xref:System.Globalization.CultureInfo> 包含特定区域性中的默认格式设置信息，包括数字格式信息以及与日期相关的格式设置信息。  
  
 此外，还可以定义自己的自定义格式提供程序。  
  
   
  
## Examples  
 下面的示例演示 `Temperature` 实现方法的类 <xref:System.IFormattable.ToString%2A> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.IFormattable> 。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />方法必须支持 (常规) 格式说明符的 "G"。 除了 "G" 说明符以外，类还可以定义它所支持的格式说明符的列表。 此外，类必须准备好处理的格式说明符 <see langword="null" /> 。 有关格式设置和格式设置代码的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
