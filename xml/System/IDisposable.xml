<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb6601530881b8ec866135662b2765393431f98b" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86601560" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b6960-101">提供一种用于释放非托管资源的机制。</span><span class="sxs-lookup"><span data-stu-id="b6960-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6960-102">此接口的主要用途是释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="b6960-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="b6960-103">当不再使用对象时，垃圾回收器会自动释放分配给托管对象的内存。</span><span class="sxs-lookup"><span data-stu-id="b6960-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="b6960-104">但是，无法预测何时会进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="b6960-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="b6960-105">而且，垃圾回收器不知道非托管资源，如窗口句柄，或者打开文件和流。</span><span class="sxs-lookup"><span data-stu-id="b6960-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="b6960-106">使用 <xref:System.IDisposable.Dispose%2A> 此接口的方法可与垃圾回收器一起显式释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="b6960-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="b6960-107">当不再需要对象时，对象的使用者可以调用此方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b6960-108">这是将 <xref:System.IDisposable> 接口添加到现有类的一项重大更改。</span><span class="sxs-lookup"><span data-stu-id="b6960-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="b6960-109">由于您的类型的预先存在的使用者无法调用 <xref:System.IDisposable.Dispose%2A> ，因此您不能确定您的类型持有的非托管资源是否会被释放。</span><span class="sxs-lookup"><span data-stu-id="b6960-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="b6960-110">由于 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现在不再需要某个实例所拥有的资源时由该类型的使用者调用，因此，你应将托管对象包装在 <xref:System.Runtime.InteropServices.SafeHandle> (建议的替代) 中，或者应重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 以在使用者忘记调用的事件中释放非托管资源 <xref:System.IDisposable.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6960-111">在 .NET Framework 中，c + + 编译器支持对资源进行确定性处置，并且不允许直接实现 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="b6960-112">有关如何使用此接口和方法的详细讨论 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> ，请参阅 [垃圾回收](/dotnet/standard/garbage-collection/) 和 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose) 主题。</span><span class="sxs-lookup"><span data-stu-id="b6960-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](/dotnet/standard/garbage-collection/) and [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="b6960-113">使用实现 IDisposable 的对象</span><span class="sxs-lookup"><span data-stu-id="b6960-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="b6960-114">如果你的应用程序只使用一个实现接口的对象，则在 <xref:System.IDisposable> 使用完对象后，应调用该对象的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现。</span><span class="sxs-lookup"><span data-stu-id="b6960-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="b6960-115">根据你的编程语言，你可以通过以下两种方式之一执行此操作：</span><span class="sxs-lookup"><span data-stu-id="b6960-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="b6960-116">通过使用语言构造（如 `using` c # 中的语句和 Visual Basic）。</span><span class="sxs-lookup"><span data-stu-id="b6960-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="b6960-117">通过 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 在块中包装对实现的调用 `try` / `finally` 。</span><span class="sxs-lookup"><span data-stu-id="b6960-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6960-118">用于实现的类型的文档说明 <xref:System.IDisposable> 事实，并包括调用其实现的提醒 <xref:System.IDisposable.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="b6960-119">C # 和 Visual Basic Using 语句</span><span class="sxs-lookup"><span data-stu-id="b6960-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="b6960-120">如果你的语言支持构造（如 c # 中的 [using](/dotnet/csharp/language-reference/keywords/using) 语句和 Visual Basic 中的 [using](/dotnet/visual-basic/language-reference/statements/using-statement) 语句），则可以使用它，而无需显式调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 自己。</span><span class="sxs-lookup"><span data-stu-id="b6960-120">If your language supports a construct such as the [using](/dotnet/csharp/language-reference/keywords/using) statement in C# and the [Using](/dotnet/visual-basic/language-reference/statements/using-statement) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="b6960-121">下面的示例使用此方法 `WordCount` 来定义保留文件的信息的类和其中的单词数。</span><span class="sxs-lookup"><span data-stu-id="b6960-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="b6960-122">`using`语句实际上是语法上的便利。</span><span class="sxs-lookup"><span data-stu-id="b6960-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="b6960-123">在编译时，语言编译器将为块实现中间语言 (IL) `try` / `finally` 。</span><span class="sxs-lookup"><span data-stu-id="b6960-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="b6960-124">有关语句的详细信息 `using` ，请参阅 [using 语句](/dotnet/visual-basic/language-reference/statements/using-statement) 或 [using 语句](/dotnet/csharp/language-reference/keywords/using-statement) 主题。</span><span class="sxs-lookup"><span data-stu-id="b6960-124">For more information about the `using` statement, see the [Using Statement](/dotnet/visual-basic/language-reference/statements/using-statement) or [using Statement](/dotnet/csharp/language-reference/keywords/using-statement) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="b6960-125">Try/Finally 块</span><span class="sxs-lookup"><span data-stu-id="b6960-125">The Try/Finally block</span></span>  
 <span data-ttu-id="b6960-126">如果编程语言不支持构造函数（如 `using` c # 或 Visual Basic 中的语句），或者如果不想使用它，则可以 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 从 `finally` 语句块调用实现 `try` / `finally` 。</span><span class="sxs-lookup"><span data-stu-id="b6960-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="b6960-127">下面的示例将 `using` 上一示例中的块替换为 `try` / `finally` 块。</span><span class="sxs-lookup"><span data-stu-id="b6960-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="b6960-128">有关模式的详细信息 `try` / `finally` ，请参阅[Try .。。Catch .。。Finally 语句](/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement)， [try finally](/dotnet/csharp/language-reference/keywords/try-finally)或[try-catch finally 语句](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。</span><span class="sxs-lookup"><span data-stu-id="b6960-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement), [try-finally](/dotnet/csharp/language-reference/keywords/try-finally), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="b6960-129">正在实现 IDisposable</span><span class="sxs-lookup"><span data-stu-id="b6960-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="b6960-130"><xref:System.IDisposable>仅当类型直接使用非托管资源时，才应实现。</span><span class="sxs-lookup"><span data-stu-id="b6960-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="b6960-131">当不再需要该实例时，类型使用者可以调用你的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现来释放资源。</span><span class="sxs-lookup"><span data-stu-id="b6960-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="b6960-132">若要处理其无法调用的情况 <xref:System.IDisposable.Dispose%2A> ，您应该使用从派生的类 <xref:System.Runtime.InteropServices.SafeHandle> 来包装非托管资源，或者您应该 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 为引用类型重写方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="b6960-133">在任一情况下，使用方法可以在 <xref:System.IDisposable.Dispose%2A> 使用非托管资源（例如释放、释放或重置非托管资源）后执行任何需要的清理。</span><span class="sxs-lookup"><span data-stu-id="b6960-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6960-134">如果要定义一个使用非托管资源的基类，并且该基类具有或可能已释放的子类，则应实现 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法并提供的第二个重载 `Dispose` ，如下一部分中所述。</span><span class="sxs-lookup"><span data-stu-id="b6960-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="b6960-135">IDisposable 和继承层次结构</span><span class="sxs-lookup"><span data-stu-id="b6960-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="b6960-136">具有应可释放的子类的基类必须 <xref:System.IDisposable> 按如下方式实现。</span><span class="sxs-lookup"><span data-stu-id="b6960-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="b6960-137">在 <xref:System.IDisposable> `sealed` Visual Basic) 中未 (的任何类型上实现时，应该使用此模式 `NotInheritable` 。</span><span class="sxs-lookup"><span data-stu-id="b6960-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="b6960-138">它应提供一个公共、非虚拟 <xref:System.IDisposable.Dispose> 方法和受保护的虚拟 `Dispose(Boolean disposing)` 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="b6960-139"><xref:System.IDisposable.Dispose>方法必须调用 `Dispose(true)` ，并且应禁止终止以提高性能。</span><span class="sxs-lookup"><span data-stu-id="b6960-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="b6960-140">基类型不应包括任何终结器。</span><span class="sxs-lookup"><span data-stu-id="b6960-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="b6960-141">下面的代码段反映了基类的释放模式。</span><span class="sxs-lookup"><span data-stu-id="b6960-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="b6960-142">它假定您的类型不重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="b6960-143">如果重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法，则类应实现以下模式。</span><span class="sxs-lookup"><span data-stu-id="b6960-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="b6960-144">子类应实现以下可释放模式：</span><span class="sxs-lookup"><span data-stu-id="b6960-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="b6960-145">它们必须重写 `Dispose(Boolean)` 并调用基类 `Dispose(Boolean)` 实现。</span><span class="sxs-lookup"><span data-stu-id="b6960-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="b6960-146">如果需要，他们可以提供终结器。</span><span class="sxs-lookup"><span data-stu-id="b6960-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="b6960-147">终结器必须调用 `Dispose(false)`。</span><span class="sxs-lookup"><span data-stu-id="b6960-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="b6960-148">请注意，派生类本身并不实现 <xref:System.IDisposable> 接口，并且不包含无参数 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="b6960-149">它们仅重写基类 `Dispose(Boolean)` 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="b6960-150">下面的代码段反映派生类的释放模式。</span><span class="sxs-lookup"><span data-stu-id="b6960-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="b6960-151">它假定您的类型不重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="b6960-152">下面的示例演示如何创建实现接口的资源类 <xref:System.IDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="b6960-153">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="b6960-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b6960-154">执行与释放或重置非托管资源关联的应用程序定义的任务。</span><span class="sxs-lookup"><span data-stu-id="b6960-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6960-155">使用此方法可关闭或释放由实现该接口的类的实例所持有的非托管资源，如文件、流和句柄。</span><span class="sxs-lookup"><span data-stu-id="b6960-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="b6960-156">按照约定，此方法用于与释放对象占用的资源或准备要重用的对象相关联的所有任务。</span><span class="sxs-lookup"><span data-stu-id="b6960-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b6960-157">如果使用的是实现接口的类 <xref:System.IDisposable> ，则应 <xref:System.IDisposable.Dispose%2A> 在使用完类后调用其实现。</span><span class="sxs-lookup"><span data-stu-id="b6960-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="b6960-158">有关详细信息，请参阅主题中的 "使用实现 IDisposable 的对象" 一节 <xref:System.IDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="b6960-159">实现此方法时，请确保通过包含层次结构传播调用来释放所有保存的资源。</span><span class="sxs-lookup"><span data-stu-id="b6960-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="b6960-160">例如，如果对象 A 分配一个对象 B，并且对象 B 分配一个对象 C，则的 <xref:System.IDisposable.Dispose%2A> 实现必须在 <xref:System.IDisposable.Dispose%2A> B 上调用，后者必须在 <xref:System.IDisposable.Dispose%2A> C 上调用。</span><span class="sxs-lookup"><span data-stu-id="b6960-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b6960-161">C + + 编译器支持对资源进行确定性处置，并且不允许直接实现 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="b6960-162">如果基类实现，则对象还必须调用 <xref:System.IDisposable.Dispose%2A> 其基类的方法 <xref:System.IDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="b6960-163">有关 <xref:System.IDisposable> 在基类及其子类上实现的详细信息，请参阅主题中的 "IDisposable and 继承性层次结构" 部分 <xref:System.IDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="b6960-164">如果多次调用对象的 <xref:System.IDisposable.Dispose%2A> 方法，则对象必须忽略第一个调用之后的所有调用。</span><span class="sxs-lookup"><span data-stu-id="b6960-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="b6960-165">如果对象的 <xref:System.IDisposable.Dispose%2A> 方法被多次调用，则该对象不得引发异常。</span><span class="sxs-lookup"><span data-stu-id="b6960-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="b6960-166">除外的实例方法 <xref:System.IDisposable.Dispose%2A> 可以 <xref:System.ObjectDisposedException> 在已释放资源时引发。</span><span class="sxs-lookup"><span data-stu-id="b6960-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="b6960-167">用户可能希望资源类型使用特定约定来表示已分配状态与已释放状态。</span><span class="sxs-lookup"><span data-stu-id="b6960-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="b6960-168">这种情况的一个示例是流类，通常将其视为 "打开" 或 "已关闭"。</span><span class="sxs-lookup"><span data-stu-id="b6960-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="b6960-169">具有此类约定的类的实施者可能选择使用自定义名称（例如）来实现公共方法，以 `Close` 调用 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="b6960-170">由于 <xref:System.IDisposable.Dispose%2A> 方法必须被显式调用，因此，始终不会释放非托管资源，因为对象的使用者无法调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="b6960-171">可通过两种方式来避免此问题：</span><span class="sxs-lookup"><span data-stu-id="b6960-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="b6960-172">在派生自的对象中包装托管资源 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6960-173"><xref:System.IDisposable.Dispose%2A>然后，你的实现将调用实例的 <xref:System.IDisposable.Dispose%2A> 方法 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="b6960-174">有关详细信息，请参阅主题中的 "SafeHandle 替代项" 部分 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="b6960-175">在未调用时，实现终结器以释放资源 <xref:System.IDisposable.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b6960-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="b6960-176">默认情况下，垃圾回收器在回收其内存之前会自动调用对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="b6960-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="b6960-177">但是，如果 <xref:System.IDisposable.Dispose%2A> 已调用方法，则垃圾回收器通常不需要调用已释放对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="b6960-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="b6960-178">为了防止自动终止， <xref:System.IDisposable.Dispose%2A> 实现可以调用 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b6960-179">使用访问非托管资源的对象（例如）时， <xref:System.IO.StreamWriter> 一个好的做法是使用语句创建实例 `using` 。</span><span class="sxs-lookup"><span data-stu-id="b6960-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="b6960-180">`using`语句会自动关闭流，并在 <xref:System.IDisposable.Dispose%2A> 使用对象的代码已完成时调用。</span><span class="sxs-lookup"><span data-stu-id="b6960-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="b6960-181">有关示例，请参阅 <xref:System.IO.StreamWriter> 类。</span><span class="sxs-lookup"><span data-stu-id="b6960-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6960-182">下面的示例演示如何实现 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b6960-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="b6960-183">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="b6960-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
