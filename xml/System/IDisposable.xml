<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="047b8834334ae811c619799cf3ab9b53fa43c717" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83976163" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种用于释放非托管资源的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口的主要用途是释放非托管资源。 当不再使用对象时，垃圾回收器会自动释放分配给托管对象的内存。 但是，无法预测何时会进行垃圾回收。 而且，垃圾回收器不知道非托管资源，如窗口句柄，或者打开文件和流。  
  
 使用此接口的 <xref:System.IDisposable.Dispose%2A> 方法可与垃圾回收器一起显式释放非托管资源。 当不再需要对象时，对象的使用者可以调用此方法。  
  
> [!WARNING]
>  这是将 <xref:System.IDisposable> 接口添加到现有类的一项重大更改。 由于您的类型的预先存在的使用者不能调用 <xref:System.IDisposable.Dispose%2A>，因此您不能确定您的类型持有的非托管资源是否会被释放。  
  
 因为当不再需要某一实例所拥有的资源时，由该类型的使用者调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现，因此，你应将托管对象包装在 <xref:System.Runtime.InteropServices.SafeHandle> 中（建议的替代项），或者，你应该重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>，以在使用者忘记调用 <xref:System.IDisposable.Dispose%2A>时释放非托管资源。  
  
> [!IMPORTANT]
>  在 .NET Framework 中， C++编译器支持对资源进行确定性处置，并且不允许直接实现 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 有关如何使用此接口和 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法的详细讨论，请参阅[垃圾回收](/dotnet/standard/garbage-collection/)和[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)主题。  
  
## <a name="using-an-object-that-implements-idisposable"></a>使用实现 IDisposable 的对象  
 如果应用只使用实现 <xref:System.IDisposable> 接口的对象，则在使用完对象后，应调用该对象的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现。 根据你的编程语言，你可以通过以下两种方式之一执行此操作：  
  
-   通过使用和 Visual Basic 中C#的 `using` 语句等语言构造。  
  
-   通过在 `try`/`finally` 块中包装对 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现的调用。  
  
> [!NOTE]
>  用于实现 <xref:System.IDisposable> 的类型的文档注意，这种情况下，它包括调用其 <xref:System.IDisposable.Dispose%2A> 实现的提醒。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C#和 Visual Basic Using 语句  
 如果您的语言支持构造（例如中[using](/dotnet/csharp/language-reference/keywords/using) C#的 Using 语句）和[using](/dotnet/visual-basic/language-reference/statements/using-statement)语句 Visual Basic 中，则可以使用它，而不是显式调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>。 下面的示例使用此方法来定义一个 `WordCount` 类，以保留有关文件和其中的单词数的信息。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` 语句实际上是语法上的便利。 在编译时，语言编译器实现 `try`/`finally` 块的中间语言（IL）。  
  
 有关 `using` 语句的详细信息，请参阅[Using 语句](/dotnet/visual-basic/language-reference/statements/using-statement)或[using 语句](/dotnet/csharp/language-reference/keywords/using-statement)主题。  
  
### <a name="the-tryfinally-block"></a>Try/Finally 块  
 如果你的编程语言不支持或 Visual Basic 中C#的 `using` 语句之类的构造，或者如果不想使用它，则可以从 `try`/语句的 `finally` 块调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现。`finally` 下面的示例将上一示例中的 `using` 块替换为 `try`/`finally` 块。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 有关 `try`/`finally` 模式的详细信息，请参阅[Try .。。Catch .。。Finally 语句](/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement)， [try finally](/dotnet/csharp/language-reference/keywords/try-finally)或[try-catch finally 语句](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。  
  
## <a name="implementing-idisposable"></a>正在实现 IDisposable  
 仅当类型直接使用非托管资源时，才应实现 <xref:System.IDisposable>。 当不再需要该实例时，类型使用者可调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现以释放资源。 若要处理无法调用 <xref:System.IDisposable.Dispose%2A>的情况，您应该使用从 <xref:System.Runtime.InteropServices.SafeHandle> 派生的类来包装非托管资源，或者您应该重写引用类型的 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。 在任一情况下，都可以使用 <xref:System.IDisposable.Dispose%2A> 方法来执行使用非托管资源（如释放、释放或重置非托管资源）后所需的任何清理。  
  
> [!IMPORTANT]
>  如果要定义一个使用非托管资源的基类，并且该基类具有或可能已释放的子类，则应该实现 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法，并提供 `Dispose`的第二个重载，如下一节中所述。  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 和继承层次结构  
 具有应可释放的子类的基类必须实现 <xref:System.IDisposable> 如下所示。 无论何时对任何不 `sealed` 的类型（Visual Basic 中的`NotInheritable`）实施 <xref:System.IDisposable>，都应使用此模式。  
  
-   它应提供一个公共、非虚 <xref:System.IDisposable.Dispose> 方法和一个受保护的虚拟 `Dispose(Boolean disposing)` 方法。  
  
-   <xref:System.IDisposable.Dispose> 方法必须调用 `Dispose(true)` 并且应取消对性能的终止。  
  
-   基类型不应包括任何终结器。  
  
 下面的代码段反映了基类的释放模式。 它假定您的类型不重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 如果确实要重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法，你的类应实现以下模式。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 子类应实现以下可释放模式：  
  
-   它们必须重写 `Dispose(Boolean)` 并调用基类 `Dispose(Boolean)` 实现。  
  
-   如果需要，他们可以提供终结器。 终结器必须调用 `Dispose(false)`。  
  
 请注意，派生类本身并不实现 <xref:System.IDisposable> 接口，并且不包含无参数的 <xref:System.IDisposable.Dispose%2A> 方法。 它们只会重写基类 `Dispose(Boolean)` 方法。  
  
 下面的代码段反映派生类的释放模式。 它假定您的类型不重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 下面的示例演示如何创建实现 <xref:System.IDisposable> 接口的资源类。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose">实现 Dispose 方法</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行应用程序定义的、与释放或重置非托管资源相关的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法可关闭或释放由实现该接口的类的实例所持有的非托管资源，如文件、流和句柄。 按照约定，此方法用于与释放对象占用的资源或准备要重用的对象相关联的所有任务。  
  
> [!WARNING]
>  如果使用的是实现 <xref:System.IDisposable> 接口的类，则应在使用完类后调用其 <xref:System.IDisposable.Dispose%2A> 实现。 有关详细信息，请参阅 <xref:System.IDisposable> 主题中的 "使用实现 IDisposable 的对象" 一节。  
  
 实现此方法时，请确保通过包含层次结构传播调用来释放所有保存的资源。 例如，如果对象 A 分配一个对象 B，并且对象 B 分配一个对象 C，则的 <xref:System.IDisposable.Dispose%2A> 实现必须调用 B 上的 <xref:System.IDisposable.Dispose%2A>，后者必须依次调用 C 上的 <xref:System.IDisposable.Dispose%2A>。  
  
> [!IMPORTANT]
>  C++编译器支持对资源进行确定性处置，并且不允许直接实现 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 如果基类实现 <xref:System.IDisposable>，则对象还必须调用其基类的 <xref:System.IDisposable.Dispose%2A> 方法。 有关对基类及其子类实现 <xref:System.IDisposable> 的详细信息，请参阅 <xref:System.IDisposable> 主题中的 "IDisposable and 继承性层次结构" 部分。  
  
 如果多次调用某个对象的 <xref:System.IDisposable.Dispose%2A> 方法，则该对象必须忽略第一个调用之后的所有调用。 如果对象的 <xref:System.IDisposable.Dispose%2A> 方法被多次调用，则该对象不得引发异常。 当资源已被释放时，<xref:System.IDisposable.Dispose%2A> 的实例方法可能会引发 <xref:System.ObjectDisposedException>。  
  
 用户可能希望资源类型使用特定约定来表示已分配状态与已释放状态。 这种情况的一个示例是流类，通常将其视为 "打开" 或 "已关闭"。 具有此类约定的类的实施者可选择使用自定义名称（例如 `Close`）来实现公共方法，该方法调用 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 由于 <xref:System.IDisposable.Dispose%2A> 方法必须显式调用，因此，始终不会释放非托管资源，因为对象的使用者无法调用其 <xref:System.IDisposable.Dispose%2A> 方法。 可通过两种方式来避免此问题：  
  
-   在派生自 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>的对象中包装托管资源。 然后，<xref:System.IDisposable.Dispose%2A> 实现将调用 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 实例的 <xref:System.IDisposable.Dispose%2A> 方法。 有关详细信息，请参阅 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 主题中的 "SafeHandle 替代项" 部分。  
  
-   如果未调用 <xref:System.IDisposable.Dispose%2A>，则实现终结器以释放资源。 默认情况下，垃圾回收器在回收其内存之前会自动调用对象的终结器。 但是，如果已调用 <xref:System.IDisposable.Dispose%2A> 方法，则垃圾回收器通常不需要调用已释放对象的终结器。 若要防止自动终止，<xref:System.IDisposable.Dispose%2A> 实现可调用 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 方法。  
  
 使用访问非托管资源的对象（例如 <xref:System.IO.StreamWriter>）时，最好是使用 `using` 语句创建实例。 当使用对象的代码已完成时，`using` 语句会自动关闭流并对其调用 <xref:System.IDisposable.Dispose%2A>。 有关示例，请参见 <xref:System.IO.StreamWriter> 类。  
  
   
  
## Examples  
 下面的示例演示如何实现 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose">实现 Dispose 方法</related>
      </Docs>
    </Member>
  </Members>
</Type>
