<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb6601530881b8ec866135662b2765393431f98b" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86601560" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种用于释放非托管资源的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口的主要用途是释放非托管资源。 当不再使用对象时，垃圾回收器会自动释放分配给托管对象的内存。 但是，无法预测何时会进行垃圾回收。 而且，垃圾回收器不知道非托管资源，如窗口句柄，或者打开文件和流。  
  
 使用 <xref:System.IDisposable.Dispose%2A> 此接口的方法可与垃圾回收器一起显式释放非托管资源。 当不再需要对象时，对象的使用者可以调用此方法。  
  
> [!WARNING]
>  这是将 <xref:System.IDisposable> 接口添加到现有类的一项重大更改。 由于您的类型的预先存在的使用者无法调用 <xref:System.IDisposable.Dispose%2A> ，因此您不能确定您的类型持有的非托管资源是否会被释放。  
  
 由于 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现在不再需要某个实例所拥有的资源时由该类型的使用者调用，因此，你应将托管对象包装在 <xref:System.Runtime.InteropServices.SafeHandle> (建议的替代) 中，或者应重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 以在使用者忘记调用的事件中释放非托管资源 <xref:System.IDisposable.Dispose%2A> 。  
  
> [!IMPORTANT]
>  在 .NET Framework 中，c + + 编译器支持对资源进行确定性处置，并且不允许直接实现 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 有关如何使用此接口和方法的详细讨论 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> ，请参阅 [垃圾回收](/dotnet/standard/garbage-collection/) 和 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose) 主题。  
  
## <a name="using-an-object-that-implements-idisposable"></a>使用实现 IDisposable 的对象  
 如果你的应用程序只使用一个实现接口的对象，则在 <xref:System.IDisposable> 使用完对象后，应调用该对象的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现。 根据你的编程语言，你可以通过以下两种方式之一执行此操作：  
  
-   通过使用语言构造（如 `using` c # 中的语句和 Visual Basic）。  
  
-   通过 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 在块中包装对实现的调用 `try` / `finally` 。  
  
> [!NOTE]
>  用于实现的类型的文档说明 <xref:System.IDisposable> 事实，并包括调用其实现的提醒 <xref:System.IDisposable.Dispose%2A> 。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C # 和 Visual Basic Using 语句  
 如果你的语言支持构造（如 c # 中的 [using](/dotnet/csharp/language-reference/keywords/using) 语句和 Visual Basic 中的 [using](/dotnet/visual-basic/language-reference/statements/using-statement) 语句），则可以使用它，而无需显式调用 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 自己。 下面的示例使用此方法 `WordCount` 来定义保留文件的信息的类和其中的单词数。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using`语句实际上是语法上的便利。 在编译时，语言编译器将为块实现中间语言 (IL) `try` / `finally` 。  
  
 有关语句的详细信息 `using` ，请参阅 [using 语句](/dotnet/visual-basic/language-reference/statements/using-statement) 或 [using 语句](/dotnet/csharp/language-reference/keywords/using-statement) 主题。  
  
### <a name="the-tryfinally-block"></a>Try/Finally 块  
 如果编程语言不支持构造函数（如 `using` c # 或 Visual Basic 中的语句），或者如果不想使用它，则可以 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 从 `finally` 语句块调用实现 `try` / `finally` 。 下面的示例将 `using` 上一示例中的块替换为 `try` / `finally` 块。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 有关模式的详细信息 `try` / `finally` ，请参阅[Try .。。Catch .。。Finally 语句](/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement)， [try finally](/dotnet/csharp/language-reference/keywords/try-finally)或[try-catch finally 语句](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。  
  
## <a name="implementing-idisposable"></a>正在实现 IDisposable  
 <xref:System.IDisposable>仅当类型直接使用非托管资源时，才应实现。 当不再需要该实例时，类型使用者可以调用你的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现来释放资源。 若要处理其无法调用的情况 <xref:System.IDisposable.Dispose%2A> ，您应该使用从派生的类 <xref:System.Runtime.InteropServices.SafeHandle> 来包装非托管资源，或者您应该 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 为引用类型重写方法。 在任一情况下，使用方法可以在 <xref:System.IDisposable.Dispose%2A> 使用非托管资源（例如释放、释放或重置非托管资源）后执行任何需要的清理。  
  
> [!IMPORTANT]
>  如果要定义一个使用非托管资源的基类，并且该基类具有或可能已释放的子类，则应实现 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法并提供的第二个重载 `Dispose` ，如下一部分中所述。  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 和继承层次结构  
 具有应可释放的子类的基类必须 <xref:System.IDisposable> 按如下方式实现。 在 <xref:System.IDisposable> `sealed` Visual Basic) 中未 (的任何类型上实现时，应该使用此模式 `NotInheritable` 。  
  
-   它应提供一个公共、非虚拟 <xref:System.IDisposable.Dispose> 方法和受保护的虚拟 `Dispose(Boolean disposing)` 方法。  
  
-   <xref:System.IDisposable.Dispose>方法必须调用 `Dispose(true)` ，并且应禁止终止以提高性能。  
  
-   基类型不应包括任何终结器。  
  
 下面的代码段反映了基类的释放模式。 它假定您的类型不重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 如果重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法，则类应实现以下模式。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 子类应实现以下可释放模式：  
  
-   它们必须重写 `Dispose(Boolean)` 并调用基类 `Dispose(Boolean)` 实现。  
  
-   如果需要，他们可以提供终结器。 终结器必须调用 `Dispose(false)`。  
  
 请注意，派生类本身并不实现 <xref:System.IDisposable> 接口，并且不包含无参数 <xref:System.IDisposable.Dispose%2A> 方法。 它们仅重写基类 `Dispose(Boolean)` 方法。  
  
 下面的代码段反映派生类的释放模式。 它假定您的类型不重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 下面的示例演示如何创建实现接口的资源类 <xref:System.IDisposable> 。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose">实现 Dispose 方法</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法可关闭或释放由实现该接口的类的实例所持有的非托管资源，如文件、流和句柄。 按照约定，此方法用于与释放对象占用的资源或准备要重用的对象相关联的所有任务。  
  
> [!WARNING]
>  如果使用的是实现接口的类 <xref:System.IDisposable> ，则应 <xref:System.IDisposable.Dispose%2A> 在使用完类后调用其实现。 有关详细信息，请参阅主题中的 "使用实现 IDisposable 的对象" 一节 <xref:System.IDisposable> 。  
  
 实现此方法时，请确保通过包含层次结构传播调用来释放所有保存的资源。 例如，如果对象 A 分配一个对象 B，并且对象 B 分配一个对象 C，则的 <xref:System.IDisposable.Dispose%2A> 实现必须在 <xref:System.IDisposable.Dispose%2A> B 上调用，后者必须在 <xref:System.IDisposable.Dispose%2A> C 上调用。  
  
> [!IMPORTANT]
>  C + + 编译器支持对资源进行确定性处置，并且不允许直接实现 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 如果基类实现，则对象还必须调用 <xref:System.IDisposable.Dispose%2A> 其基类的方法 <xref:System.IDisposable> 。 有关 <xref:System.IDisposable> 在基类及其子类上实现的详细信息，请参阅主题中的 "IDisposable and 继承性层次结构" 部分 <xref:System.IDisposable> 。  
  
 如果多次调用对象的 <xref:System.IDisposable.Dispose%2A> 方法，则对象必须忽略第一个调用之后的所有调用。 如果对象的 <xref:System.IDisposable.Dispose%2A> 方法被多次调用，则该对象不得引发异常。 除外的实例方法 <xref:System.IDisposable.Dispose%2A> 可以 <xref:System.ObjectDisposedException> 在已释放资源时引发。  
  
 用户可能希望资源类型使用特定约定来表示已分配状态与已释放状态。 这种情况的一个示例是流类，通常将其视为 "打开" 或 "已关闭"。 具有此类约定的类的实施者可能选择使用自定义名称（例如）来实现公共方法，以 `Close` 调用 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 由于 <xref:System.IDisposable.Dispose%2A> 方法必须被显式调用，因此，始终不会释放非托管资源，因为对象的使用者无法调用其 <xref:System.IDisposable.Dispose%2A> 方法。 可通过两种方式来避免此问题：  
  
-   在派生自的对象中包装托管资源 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 。 <xref:System.IDisposable.Dispose%2A>然后，你的实现将调用实例的 <xref:System.IDisposable.Dispose%2A> 方法 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 。 有关详细信息，请参阅主题中的 "SafeHandle 替代项" 部分 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 。  
  
-   在未调用时，实现终结器以释放资源 <xref:System.IDisposable.Dispose%2A> 。 默认情况下，垃圾回收器在回收其内存之前会自动调用对象的终结器。 但是，如果 <xref:System.IDisposable.Dispose%2A> 已调用方法，则垃圾回收器通常不需要调用已释放对象的终结器。 为了防止自动终止， <xref:System.IDisposable.Dispose%2A> 实现可以调用 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 方法。  
  
 使用访问非托管资源的对象（例如）时， <xref:System.IO.StreamWriter> 一个好的做法是使用语句创建实例 `using` 。 `using`语句会自动关闭流，并在 <xref:System.IDisposable.Dispose%2A> 使用对象的代码已完成时调用。 有关示例，请参阅 <xref:System.IO.StreamWriter> 类。  
  
   
  
## Examples  
 下面的示例演示如何实现 <xref:System.IDisposable.Dispose%2A> 方法。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose">实现 Dispose 方法</related>
      </Docs>
    </Member>
  </Members>
</Type>
