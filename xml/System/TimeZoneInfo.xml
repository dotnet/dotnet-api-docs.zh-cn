<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a0bd11bbfcc7f051b8d9fdaaf39b0538b818fccd" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83961969" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IEquatable(Of TimeZoneInfo)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface IDeserializationCallback&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" FrameworkAlternate="netcore-2.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IDeserializationCallback&#xA;    interface ISerializable&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示世界上的任何时区。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时区指使用相同时间的某个地理区域。  
  
 <xref:System.TimeZoneInfo> 类对 <xref:System.TimeZone> 类提供了重大增强功能，这仅提供有限的功能。  
  
 <xref:System.TimeZone> 类仅识别本地时区，可以在协调世界时（UTC）和本地时间之间转换时间。 <xref:System.TimeZoneInfo> 对象可以表示任意时区，<xref:System.TimeZoneInfo> 类的方法可用于将一个时区中的时间转换为任何其他时区中的相应时间。 <xref:System.TimeZoneInfo> 类的成员支持以下操作：  
  
-   检索已由操作系统定义的时区。  
  
-   枚举系统上可用的时区。  
  
-   在不同时区之间转换时间。  
  
-   正在创建操作系统尚未定义的新时区。  
  
-   序列化时区供以后检索。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo> 类的实例是不可变的。 在实例化对象后，不能修改其值。  
  
 使用 `new` 关键字无法实例化 <xref:System.TimeZoneInfo> 对象。 相反，您必须调用下表中所示 <xref:System.TimeZoneInfo> 类的一个静态成员。  
  
|静态成员名称|说明|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法|从应用程序提供的数据创建自定义时区。|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法|根据时区的标识符实例化时区。|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> 方法|反序列化一个字符串值，以重新创建以前序列化的 <xref:System.TimeZoneInfo> 对象。|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法|返回 <xref:System.TimeZoneInfo> 对象的可枚举 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>，该对象表示本地系统上可用的所有时区。|  
|<xref:System.TimeZoneInfo.Local%2A> 属性|实例化表示本地时区的 <xref:System.TimeZoneInfo> 对象。|  
|<xref:System.TimeZoneInfo.Utc%2A> 属性|实例化表示 UTC 时区的 <xref:System.TimeZoneInfo> 对象。|  
  
 你可以使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法来创建未在 Windows 系统上的本地系统注册表中或 Linux 或 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中的时区类定义的时区。 然后，可以使用 <xref:System.TimeZoneInfo.ToSerializedString%2A> 属性将时区对象的信息另存为字符串，该字符串可以存储在应用程序可访问的某种形式。 您可以使用 <xref:System.TimeZoneInfo.FromSerializedString%2A> 方法将序列化的字符串转换回 <xref:System.TimeZoneInfo> 的对象。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前时区的标准时间与协调世界时 (UTC) 之间的时差。</summary>
        <value>一个对象，它指示当前时区的标准时间与协调世界时 (UTC) 之间的时差。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性返回的时间跨度范围为14小时（适用于时区为早于协调世界时（UTC）的14小时）到-14 小时（适用于 UTC 后14小时的时区）。 早于 UTC 的时区具有正偏移量;UTC 后的时区具有负偏移量。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 值以整分钟数表示。 它不能包含分钟的小数部分。  
  
> [!NOTE]
>  由于 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 是 <xref:System.TimeZoneInfo> 对象（而不是 <xref:System.TimeZoneInfo.AdjustmentRule> 对象）的属性，因此 <xref:System.TimeZoneInfo> 类将单个相对于 UTC 的偏移量应用于时区的所有调整。 若要反映修改了其与 UTC 的偏移量的时区，必须使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法创建一个新时区。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性的不同 <xref:System.TimeZoneInfo.GetUtcOffset%2A> 之处在于：  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性返回 UTC 与时区的标准时间之间的差异;<xref:System.TimeZoneInfo.GetUtcOffset%2A> 方法返回 UTC 与时区在特定时间点的时间之间的差异。  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A> 方法反映了时区的任何调整规则的应用;<xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性没有。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性显示本地时间与协调世界时（UTC）之间的差异。  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除已缓存的时区数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 缓存的时区数据包括本地时区和协调世界时（UTC）区域中的数据。  
  
 您可以调用 `ClearCachedData` 方法，以减少专用于应用程序的时区信息缓存的内存，或反映本地系统的时区已更改这一事实。  
  
 建议不要将引用存储到本地时区和 UTC 时区。 调用 `ClearCachedData` 方法之后，这些对象变量将不确定 <xref:System.TimeZoneInfo> 不再引用 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 或 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>的对象。 例如，在下面的代码中，对 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 方法的第二次调用将引发 <xref:System.ArgumentException>，因为 `local` 变量不再被视为等于 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将时间转换为特定时区的时间。</summary>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTime (dateTime As DateTime, destinationTimeZone As TimeZoneInfo) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的日期和时间。</param>
        <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
        <summary>将时间转换为特定时区的时间。</summary>
        <returns>目标时区的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> 方法应用 `destinationTimeZone` 时区中有效的任何调整规则。  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> 方法的此重载根据 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值确定源时区，如下表所示。  
  
|Kind 属性值|源时区|方法行为|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|将本地时间转换为 `destinationTimeZone`中的时间。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|将协调世界时（UTC）转换为 `destinationTimeZone`中的时间。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假设要 <xref:System.TimeZoneInfo.Local%2A>。|将本地时间转换为 `destinationTimeZone`中的时间。|  
  
 返回的 <xref:System.DateTime> 值的 <xref:System.DateTime.Kind%2A> 属性的设置如下表所示。  
  
|条件|返回的 Kind 属性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 为 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 为 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|所有其他日期和时间值以及目标时区。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果 `dateTime` 参数的值是不明确的本地时间，则将其解释为标准时间。 如果 `dateTime` 参数是无效的本地时间，则此方法将引发 <xref:System.ArgumentException>。  
  
 如果 `dateTime` 的转换导致日期和时间值早于 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或晚于 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>，则此方法将分别返回 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>。  
  
 还可以通过调用 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> 和 <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> 方法，转换为 UTC 或从 UTC 转换。  
  
   
  
## Examples  
 下面的示例将日期和时间值的数组转换为美国和加拿大东部时区的时间。 它显示源时区依赖于源 <xref:System.DateTime> 值的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性。 它还说明 <xref:System.TimeZoneInfo.ConvertTime%2A> 方法会考虑时区调整，因为时区调整会在凌晨2:00 的源时区和目标时区进行调整。 2010年11月7日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 参数值表示无效的时间。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 参数的值为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTime (dateTimeOffset As DateTimeOffset, destinationTimeZone As TimeZoneInfo) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要转换的日期和时间。</param>
        <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
        <summary>将时间转换为特定时区的时间。</summary>
        <returns>目标时区的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> 方法应用 `destinationTimeZone` 时区中有效的任何调整规则。  
  
 此重载不同于 <xref:System.TimeZoneInfo.ConvertTime%2A> 方法的其他重载，方法是接受 <xref:System.DateTimeOffset> 值作为其第一个参数。 这会将日期和时间标识为与协调世界时（UTC）的偏移量，而不是特定时区中的日期和时间。 因此，`dateTimeOffset` 参数不能表示不明确的时间或无效的时间。  
  
 在将 `dateTimeOffset` 值转换为目标时区中的时间时，此方法将考虑目标时区中有效的任何调整规则。  
  
 如果 `dateTimeOffset` 的转换导致日期和时间值早于 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 或晚于 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>，则此方法将分别返回 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将 <xref:System.DateTimeOffset> 值的数组转换为美国和加拿大东部时区的时间。 它说明 <xref:System.TimeZoneInfo.ConvertTime%2A> 方法会考虑时区调整，因为时区调整在凌晨2:00 的源时区和目标时区进行。 2010年11月7日。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 参数的值为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTime (dateTime As DateTime, sourceTimeZone As TimeZoneInfo, destinationTimeZone As TimeZoneInfo) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的日期和时间。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> 的时区。</param>
        <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
        <summary>将时间从一个时区转换到另一个时区。</summary>
        <returns>目标时区中与源时区中的 <paramref name="dateTime" /> 参数对应的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTime%2A> 方法应用 `destinationTimeZone` 时区中有效的任何调整规则。  
  
 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值必须对应于 `sourceTimeZone` 参数，如下表所示。  
  
|DateTime 值|sourceTimeZone 值|方法行为|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等于 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|将 `dateTime` 转换为目标时区的时间。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|引发 <xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等于 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|将 `dateTime` 转换为目标时区的时间。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|引发 <xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|随时.|将 `dateTime` 转换为目标时区的时间。|  
  
 还可以通过调用 <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> 和 <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> 方法，转换为协调世界时（UTC）或从协调世界时（UTC）。  
  
 返回的 <xref:System.DateTime> 值的 <xref:System.DateTime.Kind%2A> 属性的设置如下表所示。  
  
|条件|返回的 Kind 属性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 参数为 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` 参数为 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|所有其他日期和时间值、源时区和目标时区。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果 `dateTime` 参数的值是源时区中不明确的时间，则将其解释为标准时间。 如果 `dateTime` 参数是源时区中的无效时间，则此方法将引发 <xref:System.ArgumentException>。  
  
 如果 `dateTime` 的转换导致日期和时间值早于 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或晚于 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>，则此方法将分别返回 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>。  
  
 如果 `dateTime` 参数的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 但 `sourceTimeZone` 参数未 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>，则 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> 方法将引发 <xref:System.ArgumentException> 异常。 若要确定源时区是本地时区还是通用时区，该方法将测试引用相等性，而不是测试 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> 方法的值是否相等。 请注意，<xref:System.TimeZoneInfo> 表示本地时区的对象和通过调用 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法检索到的对象没有与 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>的引用相等性。 此外，通过迭代 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法返回的集合来 <xref:System.TimeZoneInfo> 表示本地时区或通用时区的对象，并通过迭代 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 或 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>不具有引用相等性。 作为替代方法，可以调用 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> 方法。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> 方法将夏威夷标准时间转换为本地时间。  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性是 <see cref="F:System.DateTimeKind.Local" />，但 <paramref name="sourceTimeZone" /> 参数不等于 <see cref="F:System.DateTimeKind.Local" />。  
  
- 或 - 
<paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性是 <see cref="F:System.DateTimeKind.Utc" />，但 <paramref name="sourceTimeZone" /> 参数不等于 <see cref="P:System.TimeZoneInfo.Utc" />。  
  
- 或 - 
<paramref name="dateTime" /> 参数是无效时间（即，由于时区的调整规则，它表示不存在的时间）。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> 参数为 <see langword="null" />。  
  
- 或 - 

          <paramref name="destinationTimeZone" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>根据时区标识符将时间转换为另一时区中的时间。</summary>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTimeBySystemTimeZoneId (dateTime As DateTime, destinationTimeZoneId As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的日期和时间。</param>
        <param name="destinationTimeZoneId">目标时区的标识符。</param>
        <summary>根据时区标识符将时间转换为另一时区中的时间。</summary>
        <returns>目标时区的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 方法应用 `destinationTimeZoneId` 时区中有效的任何调整规则。  
  
 此重载与调用 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> 方法大致相同，不同之处在于，它允许通过其标识符而不是对象引用来指定目标时区。 当你必须转换时间而不检索对应于它的时区对象时，并且无需知道转换后的时间是标准还是夏令时时，此方法最为有用。  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> 方法根据 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值确定源时区，如下表所示。  
  
|Kind 属性值|源时区|方法行为|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|将本地时间转换为 `destinationTimeZone`中的时间。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|将协调世界时（UTC）转换为 `destinationTimeZone`中的时间。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假设要 <xref:System.TimeZoneInfo.Local%2A>。|将本地时间转换为 `destinationTimeZone`中的时间。|  
  
 返回的 <xref:System.DateTime> 值的 <xref:System.DateTime.Kind%2A> 属性的设置如下表所示。  
  
|条件|返回的 Kind 属性值|  
|---------------|----------------------------------|  
|`destinationTimeZone` 为 `TimeZoneInfo.Utc.Id`。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|任何其他 `destinationTimeZone` 值。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 如果 `dateTime` 参数的值是不明确的本地时间，则将其解释为标准时间。 如果 `dateTime` 参数是无效的本地时间，则此方法将引发 <xref:System.ArgumentException>。  
  
 如果 `dateTime` 的转换导致日期和时间值早于 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或晚于 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>，则此方法将分别返回 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>。  
  
 此方法从 Windows 系统上的注册表中的 macOS 参数 `destinationTimeZoneId` 指定的时区以及 Linux 和上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中检索有关其标识符的信息。 它无法检索使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法创建的时区对象。 `destinationTimeZoneId` 参数必须与时区标识符的长度完全一致，但如果要成功匹配，则为; 否则为。也就是说，与时区标识符的 `destinationTimeZoneId` 比较不区分大小写。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidTimeZoneException">时区标识符已找到，但注册表数据已损坏。</exception>
        <exception cref="T:System.Security.SecurityException">该进程没有读取包含时区信息的注册表项所需的权限。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">在本地系统上找不到 <paramref name="destinationTimeZoneId" /> 标识符。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTimeBySystemTimeZoneId (dateTimeOffset As DateTimeOffset, destinationTimeZoneId As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要转换的日期和时间。</param>
        <param name="destinationTimeZoneId">目标时区的标识符。</param>
        <summary>根据时区标识符将时间转换为另一时区中的时间。</summary>
        <returns>目标时区的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 方法应用 `destinationTimeZoneId` 时区中有效的任何调整规则。  
  
 此重载与调用 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> 方法相同，不同之处在于，它允许您通过其标识符而不是对象引用来指定目标时区。 当你必须转换时间而不检索对应于它的时区对象时，并且无需知道转换后的时间是标准还是夏令时时，此方法最为有用。  
  
 由于 `dateTimeOffset` 参数表示日期和时间以及该时间与协调世界时（UTC）的偏移量，因此它不能表示不明确的时间或无效的时间。  
  
 此方法检索其标识符由 Windows 系统上的注册表中的 macOS 参数 `destinationTimeZoneId` 指定的时区以及 Linux 和上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)。 它无法检索使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法创建的时区对象。 `destinationTimeZoneId` 参数必须与时区标识符的长度完全一致，但如果要成功匹配，则为; 否则为。也就是说，与时区标识符的 `destinationTimeZoneId` 比较不区分大小写。  
  
 在将 `dateTimeOffset` 值转换为目标时区中的时间时，该方法会考虑目标时区中有效的任何调整规则。  
  
 如果 `dateTimeOffset` 的转换导致日期和时间值早于 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 或晚于 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>，则此方法将分别返回 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidTimeZoneException">时区标识符已找到，但注册表数据已损坏。</exception>
        <exception cref="T:System.Security.SecurityException">该进程没有读取包含时区信息的注册表项所需的权限。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">在本地系统上找不到 <paramref name="destinationTimeZoneId" /> 标识符。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTimeBySystemTimeZoneId (dateTime As DateTime, sourceTimeZoneId As String, destinationTimeZoneId As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的日期和时间。</param>
        <param name="sourceTimeZoneId">源时区的标识符。</param>
        <param name="destinationTimeZoneId">目标时区的标识符。</param>
        <summary>根据时区标识符将时间从一个时区转换到另一个时区。</summary>
        <returns>目标时区中与源时区中的 <paramref name="dateTime" /> 参数对应的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 方法应用 `destinationTimeZoneId` 时区中有效的任何调整规则。  
  
 尽管它类似于 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 方法，但您可以使用 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> 来使用其标识符而不是其 <xref:System.TimeZoneInfo> 对象指定源和目标时区。 当你必须转换时间而不检索对应于它的时区对象时，并且无需知道转换后的时间是标准还是夏令时时，此方法最为有用。  
  
 此方法检索其标识符是来自 Windows 系统上的注册表中的 `sourceTimeZoneId` 和 `destinationTimeZoneId` 参数的时区，以及 Linux 和 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中的参数。 它无法检索使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法创建的时区对象。  
  
 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值必须对应于 `sourceTimeZoneId` 参数，如下表所示。  
  
|DateTime 值|sourceTimeZone 值|方法行为|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|等于 `TimeZoneInfo.Utc.Id`。|将 `dateTime` 转换为目标时区的时间。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Utc.Id`。|引发 <xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|等于 `TimeZoneInfo.Local.Id`。|将 `dateTime` 转换为目标时区的时间。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Local.Id`。|引发 <xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|随时.|将 `dateTime` 转换为目标时区的时间。|  
  
 由于它依赖于对 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法的调用，因此 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> 方法执行不区分大小写的搜索，以找到与 `sourceTimeZoneId` 和 `destinationTimeZoneId`相对应的时区。  
  
 如果 `dateTime` 参数的值是源时区中不明确的时间，则将其解释为标准时间。 如果 `dateTime` 参数是源时区中的无效时间，则此方法将引发 <xref:System.ArgumentException>。  
  
 如果目标时区是协调世界时（UTC）（在这种情况下，它设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>），则返回的 <xref:System.DateTime> 值的 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> 方法来显示与全球8个城市中的本地系统时间对应的时间。  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性与源时区不对应。  
  
- 或 - 
 <paramref name="dateTime" /> 是源时区中的无效时间。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="destinationTimeZoneId" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidTimeZoneException">已找到时区标识符，但注册表数据已损坏。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有读取包含时区数据的注册表项所需的权限。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">在本地系统上找不到 <paramref name="sourceTimeZoneId" /> 标识符。  
  
- 或 - 
在本地系统上找不到 <paramref name="destinationTimeZoneId" /> 标识符。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTimeFromUtc (dateTime As DateTime, destinationTimeZone As TimeZoneInfo) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">协调世界时 (UTC)。</param>
        <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
        <summary>将协调世界时 (UTC) 转换为指定时区中的时间。</summary>
        <returns>目标时区的日期和时间。 如果 <paramref name="destinationTimeZone" /> 为 <see cref="P:System.TimeZoneInfo.Utc" />，则其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />；否则其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行转换时，<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> 方法应用 `destinationTimeZone` 时区中有效的任何调整规则。  
  
 此方法的确切行为取决于 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值，如下表所示。  
  
|DateTime 属性|转换|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|引发 <xref:System.ArgumentException>。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|转换为协调世界时（UTC）。|  
  
 如果 `dateTime` 的转换导致日期和时间值早于 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或晚于 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>，则此方法将分别返回 <xref:System.DateTime.MinValue?displayProperty=nameWithType> 或 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将协调世界时（UTC）转换为中部时间。  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间转换为协调世界时 (UTC)。</summary>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTimeToUtc (dateTime As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的日期和时间。</param>
        <summary>将指定的日期和时间转换为协调世界时 (UTC)。</summary>
        <returns>与 <paramref name="dateTime" /> 参数对应的协调世界时 (UTC)。 <see cref="T:System.DateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性始终设置为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行的确切转换取决于 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值，如下表所示。  
  
|DateTime 属性|转换|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|从本地时间转换为协调世界时（UTC）。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|假定 `dateTime` 为本地时间，并将从本地时间转换为 UTC。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|返回 `dateTime` 保持不变。|  
  
 如果 `dateTime` 对应于不明确的本地时间，则该方法假定它是标准的本地时间。 如果 `dateTime` 对应于无效的本地时间，则该方法将引发 <xref:System.ArgumentException>。  
  
> [!NOTE]
>  如果当前计算机的本地时区包含多个调整规则，则 <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> 方法的此重载可以返回不同于 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 和 <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> 方法的结果。 <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> 始终将当前调整规则应用于时区转换，不管 `dateTime` 是否在其日期范围内。 在 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]上执行时，<xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> 也将当前调整规则应用于时区转换，无论 `dateTime` 是否在其日期范围内。  
  
 如果 `dateTime` 的 UTC 等效于 <xref:System.DateTime.MaxValue?displayProperty=nameWithType><xref:System.DateTime.MinValue?displayProperty=nameWithType> 或更高版本，则此方法将分别返回 <xref:System.DateTime.MinValue> 或 <xref:System.DateTime.MaxValue>。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、<xref:System.DateTimeKind.Local?displayProperty=nameWithType>和 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>分别为 <xref:System.DateTime.Kind%2A> 属性的时间值的转换。 它还说明了不明确和无效时间的转换。  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> 返回 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertTimeToUtc (dateTime As DateTime, sourceTimeZone As TimeZoneInfo) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的日期和时间。</param>
        <param name="sourceTimeZone"><paramref name="dateTime" /> 的时区。</param>
        <summary>将指定时区中的时间转换为协调世界时 (UTC)。</summary>
        <returns>与 <paramref name="dateTime" /> 参数对应的协调世界时 (UTC)。 <see cref="T:System.DateTime" /> 对象的 <see cref="P:System.DateTime.Kind" /> 属性始终设置为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性等于 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，并且 `sourceTimeZone` 参数等于 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>，则此方法将返回 `dateTime` 而不执行任何转换。  
  
 如果 `dateTime` 对应的时间不明确，则该方法假定它是源时区的标准时间。 如果 `dateTime` 对应于无效时间，则此方法将引发 <xref:System.ArgumentException>。  
  
 如果 `dateTime` 的协调世界时（UTC）等效于 <xref:System.DateTime.MaxValue?displayProperty=nameWithType><xref:System.DateTime.MinValue?displayProperty=nameWithType> 或更高版本，则此方法将分别返回 <xref:System.DateTime.MinValue> 或 <xref:System.DateTime.MaxValue>。  
  
   
  
## Examples  
 下面的示例从本地系统检索当前日期并将其转换为协调世界时（UTC），然后将其转换为东京标准时间，最后将东京标准时间转换回 UTC。 请注意，这两个 UTC 时间是相同的。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />。<see langword="Kind" /> 为 <see cref="F:System.DateTimeKind.Utc" />，而 <paramref name="sourceTimeZone" /> 不等于 <see cref="P:System.TimeZoneInfo.Utc" />。  
  
- 或 - 
 <paramref name="dateTime" />。<see langword="Kind" /> 为 <see cref="F:System.DateTimeKind.Local" />，而 <paramref name="sourceTimeZone" /> 不等于 <see cref="P:System.TimeZoneInfo.Local" />。  
  
- 或 - 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> 返回 <see langword="true" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/standard/datetime/converting-between-time-zones">在不同时区之间转换时间</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>定义在本地计算机上未找到的时区。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="id">时区的标识符。</param>
        <param name="baseUtcOffset">一个对象，它表示此时区和协调世界时 (UTC) 之间的时差。</param>
        <param name="displayName">新时区的显示名称。</param>
        <param name="standardDisplayName">新时区的标准时间的名称。</param>
        <summary>创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称以及标准时间显示名称。</summary>
        <returns>新时区。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> 方法的此重载适用于创建没有调整（即，不支持夏令时的时区）的时区。 若要定义包括夏令时调整的时区，请使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 或 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法。  
  
 下表显示了向 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法提供的参数与方法调用返回的 <xref:System.TimeZoneInfo> 对象的属性之间的关系。  
  
|CreateCustomTimeZone 参数|TimeZoneInfo 属性|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 通常，时区的标准时间名称及其标识符是相同的。 但是，时区标识符的长度不应超过32个字符。 传递到 `displayName` 参数的字符串采用相当标准的格式。 显示名称的第一部分是时区相对于协调世界时的基本偏移量，由括号括起来（表示格林尼治标准时间）。 后跟一个字符串，该字符串标识时区本身，或时区中的一个或多个城市、区域或国家/地区。 例如：  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 下面的示例为南极洲的莫森和 Holme 托架区域创建自定义时区。 然后，它显示将本地时间转换为新时区中的时间的结果。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="baseUtcOffset" /> 参数不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 参数大于 14 小时或小于 -14 小时。</exception>
        <related type="Article" href="/dotnet/standard/datetime/create-time-zones-without-adjustment-rules">如何：创建不带调整规则的时区</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="id">时区的标识符。</param>
        <param name="baseUtcOffset">一个对象，它表示此时区和协调世界时 (UTC) 之间的时差。</param>
        <param name="displayName">新时区的显示名称。</param>
        <param name="standardDisplayName">新时区的标准时间名称。</param>
        <param name="daylightDisplayName">新时区的夏令制名称。</param>
        <param name="adjustmentRules">一个数组，它将基本 UTC 偏移量增加了特定的期间。</param>
        <summary>创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称、标准时间名称、夏时制名称和夏时制规则。</summary>
        <returns>一个表示新时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法的此重载适用于创建支持夏令时的时区。 若要定义不支持夏令时的时区，请使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 或 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法。  
  
 下表显示了向 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法提供的参数与方法调用返回的 <xref:System.TimeZoneInfo> 对象的成员之间的关系。  
  
|CreateCustomTimeZone 参数|TimeZoneInfo 成员|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|<xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法返回 <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 对象的数组。|  
  
 通常，时区的标准时间名称及其标识符是相同的。 但是，时区标识符的长度不应超过32个字符。 传递到 `displayName` 参数的字符串采用相当标准的格式。 显示名称的第一部分是时区相对于协调世界时的基本偏移量，由括号括起来（表示格林尼治标准时间）。 后跟一个字符串，该字符串标识时区本身，或时区中的一个或多个城市、区域或国家/地区。 例如：  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` 参数为时区的所有调整规则定义自定义时区相对于协调世界时（UTC）的偏移量。 换句话说，<xref:System.TimeZoneInfo> 对象模型假定时区与 UTC 之间的偏移量在时区的整个生命周期内都是固定的，并独立于特定调整规则。 若要反映已更改其与 UTC 的偏移量的时区，你必须创建一个新的时区对象。  
  
 时区的调整规则是通过执行以下操作定义的：  
  
1.  调用 <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> 或 <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> 方法以定义每个调整规则的开始和结束转换时间。  
  
2.  为每个调整规则调用 <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> 方法。  
  
3.  将调整规则分配给可作为 `adjustmentRules` 参数传递的数组。  
  
   
  
## Examples  
 下面的示例为南极洲中的 Palmer 工作站和安特卫普岛创建自定义时区。 然后，它将本地时间转换为新时区中的时间，并显示结果。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="baseUtcOffset" /> 参数不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 参数大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.InvalidTimeZoneException">在 <paramref name="adjustmentRules" /> 参数中指定的调整规则重叠。  
  
- 或 - 
在 <paramref name="adjustmentRules" /> 参数中指定的调整规则未按时间顺序排列。  
  
- 或 - 
<paramref name="adjustmentRules" /> 中的一个或多个元素为 <see langword="null" />。  
  
- 或 - 
一个日期可能有多个应用于它的调整规则。  
  
- 或 - 
<paramref name="baseUtcOffset" /> 参数与 <paramref name="adjustmentRules" /> 数组中一个或多个对象的 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值的和大于 14 小时或小于 -14 小时。</exception>
        <related type="Article" href="/dotnet/standard/datetime/create-time-zones-with-adjustment-rules">如何：创建带有调整规则的时区</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="id">时区的标识符。</param>
        <param name="baseUtcOffset">一个 <see cref="T:System.TimeSpan" /> 对象，它表示此时区和协调世界时 (UTC) 之间的时差。</param>
        <param name="displayName">新时区的显示名称。</param>
        <param name="standardDisplayName">新时区的标准时间名称。</param>
        <param name="daylightDisplayName">新时区的夏令制名称。</param>
        <param name="adjustmentRules">一个 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的数组，这些对象增加特定期间的基本 UTC 偏移量。</param>
        <param name="disableDaylightSavingTime">如果为 <see langword="true" /> ，则丢弃包含新对象的 <paramref name="adjustmentRules" /> 中与夏令制相关的任何信息；否则为 <see langword="false" />。</param>
        <summary>创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称、标准时间名称、夏令制名称、夏令制规则以及指示返回的对象是否反映夏令制信息的值。</summary>
        <returns>新时区。 如果 <paramref name="disableDaylightSavingTime" /> 参数为 <see langword="true" />，则返回的对象没有夏令制数据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法的此重载来创建自定义时区，其在运行时按条件确定其对夏令时的支持。  
  
 下表显示了向 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法提供的参数与方法调用返回的 <xref:System.TimeZoneInfo> 对象的成员之间的关系。  
  
|CreateCustomTimeZone 参数|TimeZoneInfo 属性|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|如果 `disableDaylightSavingTime` `false`，则为 <xref:System.TimeZoneInfo.DaylightName%2A>;如果 `disableDaylightSavingTime` `true`，则 <xref:System.String.Empty?displayProperty=nameWithType>。|  
|`adjustmentRules`|如果 `false``disableDaylightSavingTime`，则为 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法返回 <xref:System.TimeZoneInfo.AdjustmentRule> 对象的数组;如果 `disableDaylightSavingTime` `true`，<xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法返回空数组。|  
|`disableDaylightSavingTime`|不 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>。|  
  
 通常，时区的标准时间名称及其标识符是相同的。 但是，时区标识符的长度不应超过32个字符。 传递到 `displayName` 参数的字符串采用相当标准的格式。 显示名称的第一部分是时区相对于协调世界时的基本偏移量，由括号括起来（表示格林尼治标准时间）。 后跟一个字符串，该字符串标识时区本身，或时区中的一个或多个城市、区域或国家/地区。 例如：  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 时区的调整规则是通过执行以下操作定义的：  
  
1.  调用 <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> 或 <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> 方法以定义每个调整规则的起始和结束转换规则。  
  
2.  为每个调整规则调用 <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> 方法。  
  
3.  将调整规则分配给可作为 `adjustmentRules` 参数传递的数组。  
  
 如果 `false``disableDaylightSavingTime` 参数，则此方法的操作与 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 重载相同。 如果 `true``disableDaylightSavingTime`，则返回的对象不包含调整规则和值为空字符串的 <xref:System.TimeZoneInfo.DaylightName%2A> 属性。  
  
   
  
## Examples  
 下面的示例为南极洲中的 Palmer 工作站和安特卫普岛创建自定义时区。 它将对 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 方法的调用中的 `disableDaylightSavingTime` 参数设置为 `true`。 然后，它显示新时区的夏时制名称（如果有），以及用于确认新时区没有夏令时信息的调整规则数。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="baseUtcOffset" /> 参数不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> 参数大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.InvalidTimeZoneException">在 <paramref name="adjustmentRules" /> 参数中指定的调整规则重叠。  
  
- 或 - 
在 <paramref name="adjustmentRules" /> 参数中指定的调整规则未按时间顺序排列。  
  
- 或 - 
<paramref name="adjustmentRules" /> 中的一个或多个元素为 <see langword="null" />。  
  
- 或 - 
一个日期可能有多个应用于它的调整规则。  
  
- 或 - 
<paramref name="baseUtcOffset" /> 参数与 <paramref name="adjustmentRules" /> 数组中一个或多个对象的 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值的和大于 14 小时或小于 -14 小时。</exception>
        <related type="Article" href="/dotnet/standard/datetime/create-time-zones-without-adjustment-rules">如何：创建不带调整规则的时区</related>
        <related type="Article" href="/dotnet/standard/datetime/create-time-zones-with-adjustment-rules">如何：创建带有调整规则的时区</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前时区的夏令时的显示名称。</summary>
        <value>时区的夏令时的显示名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 显示名称根据 Windows 操作系统中安装的区域性进行了本地化。  
  
 其值不是 <xref:System.String.Empty?displayProperty=nameWithType> 或 `null` 的 <xref:System.TimeZoneInfo.DaylightName%2A> 属性不一定表示时区支持夏令时。 若要确定时区是否支持夏令时，请检查其 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 属性的值。  
  
 在大多数情况下，系统定义时区的 `DaylightName` 属性不 <xref:System.String.Empty?displayProperty=nameWithType> 或 `null`。 但是，可以将自定义时区的 <xref:System.TimeZoneInfo.DaylightName%2A> 属性设置为 <xref:System.String.Empty?displayProperty=nameWithType>。 当 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> 或 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> 重载创建自定义时区并且 `disableDaylightSavingTime` 参数 `true`时，会发生这种情况。 因此，您的代码不应假定 <xref:System.TimeZoneInfo.DaylightName%2A> 属性的值不 `null` 或为空。  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> 属性等效于 <xref:System.TimeZone> 类的 <xref:System.TimeZone.DaylightName%2A> 属性。  
  
   
  
## Examples  
 下面的示例定义了一个名为 `DisplayDateWithTimeZoneName` 的方法，该方法使用 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 方法来确定是显示时区的标准时间名称还是夏时制名称。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示时区的一般显示名称。</summary>
        <value>时区的一般显示名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 显示名称根据 Windows 操作系统中安装的区域性进行了本地化。  
  
 Windows 系统时区的时区显示名称遵循相当标准的格式。 显示名称的第一部分是时区相对于协调世界时的基本偏移量，由括号括起来（表示格林尼治标准时间）。 对于协调世界时，不含偏移的 GMT 首字母缩略词括在括号中。  后跟一个字符串，该字符串标识时区或时区中的一个或多个城市、区域或国家/地区。 例如：  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 下面的示例检索一个表示本地时区的 <xref:System.TimeZoneInfo> 对象，并输出其显示名称、标准时间名称和夏时制名称。 系统将显示美国太平洋标准时区的输出。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定两个 <see cref="T:System.TimeZoneInfo" /> 对象是否相等。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前对象进行比较的第二个对象。</param>
        <summary>确定当前的 <see cref="T:System.TimeZoneInfo" /> 对象和另一个对象是否相等。</summary>
        <returns>如果 <paramref name="obj" /> 是等于当前实例的 <see cref="T:System.TimeZoneInfo" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将 `obj` 转换为 <xref:System.TimeZoneInfo> 的对象，并将其与当前实例进行比较。 相等性测试基于值的比较。 当前 <xref:System.TimeZoneInfo> 实例和 `obj` 在以下条件下视为相等：  
  
-   `obj` 的运行时类型为 <xref:System.TimeZoneInfo>。  
  
-   这两个对象具有相同的 <xref:System.TimeZoneInfo.Id%2A> 属性值。  
  
-   这两个对象具有相同的调整规则。  
  
 如果 `obj` 为 `null`，则此方法返回 `false`。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.TimeZoneInfo.Equals%28System.Object%29> 方法来确定本地时区是太平洋时间还是东部时间。  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">要与当前对象进行比较的第二个对象。</param>
        <summary>确定当前的 <see cref="T:System.TimeZoneInfo" /> 对象和另一个 <see cref="T:System.TimeZoneInfo" /> 对象是否相等。</summary>
        <returns>如果两个 <see cref="T:System.TimeZoneInfo" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 相等性基于值的比较。 在以下情况下，两个 <xref:System.TimeZoneInfo> 对象将被视为相等：  
  
-   其 <xref:System.TimeZoneInfo.Id%2A> 属性的值相同。  
  
-   它们具有相同的调整规则。  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 返回计算以下表达式得出的布尔值：  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 如果 `other` 参数为未初始化的 <xref:System.TimeZoneInfo> 对象，则此方法返回 `false`。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> 方法来确定本地时区是太平洋时间还是东部时间。  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">时区标识符，它对应于 <see cref="P:System.TimeZoneInfo.Id" /> 属性。</param>
        <summary>根据新的 <see cref="T:System.TimeZoneInfo" /> 对象的标识符实例化该对象。</summary>
        <returns>一个对象，其标识符为 <paramref name="id" /> 参数的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 参数必须与时区标识符的长度完全一致，但如果要成功匹配，则为; 否则为。也就是说，与时区标识符的 `id` 比较不区分大小写。 如果要检索基于部分匹配项的时区对象，可以编写自定义过程，用于处理 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法返回 <xref:System.TimeZoneInfo> 对象的只读集合。  
  
 在 Windows 系统中，`FindSystemTimeZoneById` 尝试将 `id` 与注册表的 HKEY_LOCAL_MACHINE \Software\Microsoft\Windows NT\CurrentVersion\Time 区域分支的子项名称进行匹配。 在 Linux 和 macOS 上，它使用在[ICU 库](http://userguide.icu-project.org/datetime/timezone)中可用的时区信息。 如果注册表或库中没有所需时区的信息，则可以通过调用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法的重载之一或通过调用 <xref:System.TimeZoneInfo.FromSerializedString%2A> 来反序列化表示所需时区的 <xref:System.TimeZoneInfo> 对象，来创建特定时区。 但是，这些方法调用创建的时区不是系统定义的时间，无法使用 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法进行检索。 只能通过 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 或 <xref:System.TimeZoneInfo.FromSerializedString%2A> 方法调用返回的对象引用来访问这些自定义时区。  
  
此方法为每个方法调用返回一个新的 <xref:System.TimeZoneInfo> 实例;它不返回缓存的对象。 这可能会影响用同一标识符重复调用 `FindSystemTimeZoneById` 方法的应用程序的性能。   
  
## Examples  
 下面的示例使用 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法检索东京标准时区。 然后，使用此 <xref:System.TimeZoneInfo> 对象将本地时间转换为东京的时间，以确定它是东京标准时间还是东京夏令时。  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">系统没有足够的内存来存放有关时区的信息。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">未找到 <paramref name="id" /> 指定的时区标识符。 这意味着名称与 <paramref name="id" /> 匹配的时区标识符不存在，或者该标识符存在但不包含任何时区数据。</exception>
        <exception cref="T:System.Security.SecurityException">该进程没有读取包含时区信息的注册表项所需的权限。</exception>
        <exception cref="T:System.InvalidTimeZoneException">时区标识符已找到，但注册表数据已损坏。</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="/dotnet/standard/datetime/instantiate-time-zone-info">如何：实例化 TimeZoneInfo 对象</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="source">已序列化的 <see cref="T:System.TimeZoneInfo" /> 对象的字符串表示形式。</param>
        <summary>反序列化一个字符串，以重新创建原始的已序列化的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
        <returns>原始序列化对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有一种替代方法是提供创建在 Windows 上的注册表中找不到或在 Linux 和 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中找不到的时区所需的所有代码。 你可以定义自定义时区，并使用独立可执行文件中的 <xref:System.TimeZoneInfo.ToSerializedString%2A> 方法，或使用应用程序的安装程序将时区保存为字符串。 然后，应用程序可以从其存储位置检索此字符串，然后使用 <xref:System.TimeZoneInfo.FromSerializedString%2A> 方法对其进行实例化。  
  
   
  
## Examples  
 下面的示例尝试从本地系统检索南极洲/南极点时区。 如果失败，代码会尝试从应用程序目录中的文本文件检索有关时区的信息。 如果此尝试失败，代码会创建时区，并将有关时区的信息写入文本文件。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> 参数为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> 参数是一个 null 字符串。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">源参数不能反序列化回 <see cref="T:System.TimeZoneInfo" /> 对象。</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="/dotnet/standard/datetime/restore-time-zones-from-an-embedded-resource">如何：从嵌入的资源还原时区</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索应用至当前 <see cref="T:System.TimeZoneInfo" /> 对象的 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的数组。</summary>
        <returns>此时区的对象的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法检索 <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 对象的数组。 数组中的每个对象都定义了该时区调整的有效开始和结束日期，以及其增量（调整导致时间改变的准确量）。 此外，两个属性将返回 <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> 对象，这些对象定义了每年与标准时间之间的转换时间。  
  
 如果某个时区具有多个调整规则，则这些规则通常按从最早到最早的顺序（索引0）到最新（索引 <xref:System.Array.Length%2A>-1）。  
  
 如果时区没有调整规则，则 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法返回空数组（其 <xref:System.Array.Length%2A> 为零的数组）。  
  
 对于属于特定时区的调整规则，对 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法返回的数组元素所做的任何修改都不会反映出来。 若要修改时区的调整规则（例如反映其与夏令时的历史转换），必须使用适当的调整规则创建一个新的时区，而不是修改现有的时区。  
  
   
  
## Examples  
 下面的示例检索在本地系统上定义的所有时区，并向控制台显示有关其调整规则的完整信息。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">系统内存不足，无法在内存中创建调整规则副本。</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAmbiguousTimeOffsets (dateTime As DateTime) As TimeSpan()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间。</param>
        <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
        <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的确切行为取决于 <xref:System.DateTime.Kind%2A> 属性和 <xref:System.TimeZoneInfo> 对象之间的关系，如下表所示。  
  
|TimeZoneInfo 对象类型|Kind 属性值|行为|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|为 `dateTime`返回不明确的时间偏移量。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|将 `dateTime` 转换为本地时间，然后为该时间返回不明确的时间偏移量。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|任意值。|引发 <xref:System.ArgumentException>。|  
|任何其他时区。|<xref:System.DateTimeKind.Local> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|将 `dateTime` 转换为指定的时区，然后确定该时间是否不明确。|  
|任何其他时区。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|确定 `dateTime` 是否在指定的时区中不明确。|  
  
 此方法返回的数组中 <xref:System.TimeSpan> 对象的顺序是不确定的。 不过，您可以通过将其值与时区的 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性进行比较来确定哪个元素表示时区标准时间的偏移量。 若要将不明确时间映射到时区的标准时间，请参阅[如何：解决不明确](/dotnet/standard/datetime/resolve-ambiguous-times)的时间。  
  
   
  
## Examples  
 下面的示例定义了一个名为 `ShowPossibleUtcTimes` 的方法，该方法使用 <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> 方法将不明确时间映射到其可能的相应协调世界时（UTC）时间。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 然后，可以使用如下所示的代码调用该方法：  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 是明确的时间。</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="/dotnet/standard/datetime/resolve-ambiguous-times">如何：解决不明确的时间</related>
        <related type="Article" href="/dotnet/standard/datetime/let-users-resolve-ambiguous-times">如何：让用户解决不明确的时间</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAmbiguousTimeOffsets (dateTimeOffset As DateTimeOffset) As TimeSpan()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日期和时间。</param>
        <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
        <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的准确行为取决于 `dateTimeOffset` 参数的 <xref:System.DateTimeOffset.Offset%2A> 属性和 <xref:System.TimeZoneInfo> 对象之间的关系。 如果 <xref:System.DateTimeOffset.Offset%2A> 属性的值与当前时区相对于该日期和时间的协调世界时（UTC）的可能偏移量对应，则该方法将返回可能的偏移量。 否则，它会将 `dateTimeOffset` 转换为当前时区中的时间，然后返回该日期和时间的可能偏移量。  
  
 此方法返回的数组中 <xref:System.TimeSpan> 对象的顺序是不确定的。 不过，您可以通过将其值与时区的 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性进行比较来确定哪个元素表示时区标准时间的偏移量。 若要将不明确时间映射到时区的标准时间，请参阅[如何：解决不明确](/dotnet/standard/datetime/resolve-ambiguous-times)的时间。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> 是明确的时间。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="/dotnet/standard/datetime/resolve-ambiguous-times">如何：解决不明确的时间</related>
        <related type="Article" href="/dotnet/standard/datetime/let-users-resolve-ambiguous-times">如何：让用户解决不明确的时间</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
        <returns>一个 32 位有符号整数，用作此 <see cref="T:System.TimeZoneInfo" /> 对象的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 <xref:System.TimeZoneInfo.GetHashCode%2A> 方法的其他详细信息，请参阅 <xref:System.Object.GetHashCode%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回时区信息在本地系统上可用的所有时区的已排序集合。</summary>
        <returns><see cref="T:System.TimeZoneInfo" /> 对象的只读集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法从 Windows 系统上注册表的 HKEY_LOCAL_MACHINE \Software\Microsoft\Windows NT\CurrentVersion\Time Zone 项的子项以及 Linux 和 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中检索所有可用时区信息。 如果无法成功检索和分析单个 <xref:System.TimeZoneInfo> 对象的特定字符串属性的值，则此方法会将其值设置为空字符串（""）。  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> 方法只为 Windows 注册表或 ICU 库中定义的时区返回 <xref:System.TimeZoneInfo> 对象的集合。 它不包括使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法的重载创建的时区。 它们只能通过时区创建方法所返回的对象引用进行访问。  
  
 此方法返回的集合按 UTC 偏移量排序，对于具有相同 UTC 偏移量的时区，使用当前区域性按显示名称排序。 有关显示名称的信息，请参阅 <xref:System.TimeZoneInfo.DisplayName%2A>。  
  
 此方法返回的 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 对象支持 <xref:System.Collections.Generic.IEnumerable%601> 接口，这意味着可以使用 `foreach` （在中C#）或 `For Each…Next` （在 Visual Basic 中）语句来循环访问该对象。 循环的每次迭代都提供集合中的下一个 <xref:System.TimeZoneInfo> 对象。  
  
 <xref:System.TimeZoneInfo> 对象的集合表示在本地计算机上定义的时区;它不一定会在所有时间段内提供所有时区的完整信息。 如果你的应用程序需要在本地计算机上找不到时区，则可以使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法的重载来创建自定义时区。 有关详细信息，请参阅[如何：创建不带调整规则的时区](/dotnet/standard/datetime/create-time-zones-without-adjustment-rules)和[如何：创建带有调整规则的](/dotnet/standard/datetime/create-time-zones-with-adjustment-rules)时区。  
  
 还可以通过调用 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法，并提供要作为参数检索的时区的标识符，来确定是否在本地计算机上定义了单个时区。  
  
   
  
## Examples  
 下面的示例检索一个时区对象的集合，这些对象表示在计算机上定义的时区，并将有关这些时区的信息写入文本文件。  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来存储所有的时区信息。</exception>
        <exception cref="T:System.Security.SecurityException">用户无权读取包含时区信息的注册表项。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUtcOffset (dateTime As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">要为其确定偏移量的日期和时间。</param>
        <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
        <returns>一个对象，该对象指示两个时区之间的时差。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于将调整规则应用到当前时区，返回的时间跨度包括任何不同之处。 它与 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性不同，后者返回协调世界时（UTC）和时区标准时间之间的差异，因此不会考虑调整规则。  
  
 如果 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性与时区对象不符，则此方法将在返回结果之前执行必要的转换。 例如，如果 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A> 属性，但时区对象不是本地时区，则会发生这种情况。 如果 `dateTime` 不明确，或者转换的时间不明确，则此方法会将不明确时间解释为标准时间。 如果 `dateTime` 无效，此方法将返回一个 <xref:System.TimeSpan> 对象，该对象反映 UTC 与时区的标准时间之间的差异。  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> 方法与 <xref:System.TimeZone> 类的 <xref:System.TimeZone.GetUtcOffset%2A> 方法在操作上相似。  
  
   
  
## Examples  
 下面的示例演示如何将 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> 方法用于不同时区，并使用具有不同 <xref:System.DateTime.Kind%2A> 属性值的日期值。  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUtcOffset (dateTimeOffset As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要为其确定偏移量的日期和时间。</param>
        <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
        <returns>一个对象，该对象指示协调世界时 (UTC) 与当前时区之间的时差。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于将调整规则应用到当前时区，返回的时间跨度包括任何不同之处。 它与 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性不同，后者返回协调世界时（UTC）和时区标准时间之间的差异，因此不会考虑调整规则。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="other">要与当前的 <see cref="T:System.TimeZoneInfo" /> 对象进行比较的第二个对象。</param>
        <summary>指示当前对象和另一个 <see cref="T:System.TimeZoneInfo" /> 对象是否具有相同的调整规则。</summary>
        <returns>如果两个时区具有相同的调整规则和相同的基本偏移量，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 方法一样，<xref:System.TimeZoneInfo.HasSameRules%2A> 方法指示两个时区是否具有相同的基本偏移量（由 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> 属性定义）和相同的调整规则。 与 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> 方法不同，<xref:System.TimeZoneInfo.HasSameRules%2A> 不会比较时区标识符（由 <xref:System.TimeZoneInfo.Id%2A> 属性定义）。  
  
   
  
## Examples  
 通常，Windows 上的注册表中定义的多个时区和 Linux 和 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)与协调世界时（UTC）和相同的调整规则具有相同的偏移量。 下面的示例在控制台中显示这些时区的列表。  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="other" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取时区标识符。</summary>
        <value>时区标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 时区标识符是唯一标识特定时区的密钥字符串。 在 Windows 系统上，它对应于 Windows 系统上的注册表的 HKEY_LOCAL_MACHINE \Software\Microsoft\Windows NT\CurrentVersion\Time 区域分支和 Linux 和 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中的子项。 它可以作为参数传递到 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法，以实例化表示特定时区的 <xref:System.TimeZoneInfo> 对象。  
  
> [!IMPORTANT]
>  尽管 Windows 注册表中的密钥名称最多可以有255个字符，但我们建议你分配给自定义时区的标识符为32个字符或更少。 标识符越长，检索时提供错误键名称的可能性就越大。  
  
 <xref:System.TimeZoneInfo.Id%2A> 属性的值通常（但不总是）与 <xref:System.TimeZoneInfo.StandardName%2A> 属性的值相同。 协调世界时区的标识符是 UTC。  
  
   
  
## Examples  
 下面的示例列出了在本地计算机上定义的每个时区的标识符。  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbiguousTime (dateTime As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间值。</param>
        <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
        <returns>如果 <paramref name="dateTime" /> 参数不明确，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在当前时区的时间范围内，不明确时间。 这意味着它可以是标准时间，也可以是应用调整规则后产生的时间。 通常，当时钟设置为从夏时制返回到标准时间时，会产生不明确的时间。 有关说明，请参阅 "示例" 部分。  
  
 协调世界时（UTC）的时间不明确;这两个时区都不支持夏令时。 因此，这些时区没有调整规则，调用 <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> 方法始终返回 `false`。  
  
 对于遵守夏令时的时区，此方法的精确行为取决于 <xref:System.DateTime.Kind%2A> 属性和 <xref:System.TimeZoneInfo> 对象之间的关系，如下表所示。  
  
|TimeZoneInfo 对象类型|Kind 属性值|行为|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|确定 `dateTime` 参数是否不明确。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|将 `dateTime` 转换为本地时间，然后确定该时间是否不明确。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|返回 `false`。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|如果 `dateTime` 不明确，则假定它是标准时间，并将其转换为 UTC，并返回 `false`。|  
|任何其他时区。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|将 `dateTime` 转换为指定时区中的时间，然后确定该时间是否不明确。|  
|任何其他时区。|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|确定 `dateTime` 是否不明确。|  
  
   
  
## Examples  
 在太平洋时区，夏令时结束时间为凌晨2:00。 2007年11月4日。 下面的示例以一分钟的时间间隔从凌晨12:59 传递时间。 2007年11月4日，上午2:01 2007年11月4日，表示太平洋时区 <xref:System.TimeZoneInfo> 对象的 <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> 方法。 控制台输出指示上午1:00 的所有时间。 2007年11月4日，上午1:59 2007年11月4日是不明确的。  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性的值为 <see cref="F:System.DateTimeKind.Local" />，而 <paramref name="dateTime" /> 是无效时间。</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbiguousTime (dateTimeOffset As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日期和时间。</param>
        <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
        <returns>如果 <paramref name="dateTimeOffset" /> 参数在当前时区中不明确，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在当前时区的时间范围内，不明确时间。 这意味着它可以是标准时间，也可以是应用调整规则后生成的时间。 通常，当时钟设置为从夏时制返回到标准时间时，会产生不明确的时间。 协调世界时（UTC）的时间不明确;这两个时区都不支持夏令时。  
  
 方法的确切行为取决于 `dateTimeOffset` 参数的 <xref:System.DateTimeOffset.Offset%2A> 属性与当前时区之间的关系。 如果 <xref:System.DateTimeOffset.Offset%2A> 属性的值是一个可能与当前时区的 UTC 的偏移量，则该方法确定日期和时间是否不明确。 否则，它会将 `dateTimeOffset` 转换为当前时区中的时间，然后确定日期和时间是否不明确。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指示指定的日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏令制范围内。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime (dateTime As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间值。</param>
        <summary>指示指定的日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏令制范围内。</summary>
        <returns>如果 <paramref name="dateTime" /> 参数为夏令制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 的返回值受 <xref:System.TimeZoneInfo> 对象表示的时区与 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的关系的影响，如下表所示。  
  
|TimeZoneInfo 对象|DateTime 属性|结果|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|确定 `dateTime` 是否为夏时制。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|将 `dateTime` 从协调世界时（UTC）转换为本地时间，并确定它是否为夏时制。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|假定 `dateTime` 表示本地时间，并确定它是否为夏时制。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`、`DateTimeKind.Unspecified` 或 `DateTimeKind.Utc`|返回 `false` （UTC 不支持夏令时）。|  
|任何其他 <xref:System.TimeZoneInfo> 对象。|`DateTimeKind.Local`|将本地时间转换为 <xref:System.TimeZoneInfo> 对象的等效时间，然后确定后一项是否为夏时制。|  
|任何其他 <xref:System.TimeZoneInfo> 对象。|`DateTimeKind.Utc`|将 UTC 转换为 <xref:System.TimeZoneInfo> 对象的等效时间，然后确定后一项是否为夏时制。|  
|任何其他 <xref:System.TimeZoneInfo> 对象。|`DateTimeKind.Unspecified`|确定 `dateTime` 是否为夏时制。|  
  
 如果 <xref:System.TimeZoneInfo> 对象表示的时区不支持夏令时，则此方法始终返回 `false`。 许多时区（包括 <xref:System.TimeZoneInfo.Utc%2A>）不会遵守夏令时。  若要确定时区是否支持夏令时，请检索其 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 属性的值。  
  
 如果 `dateTime` 参数在当前对象的时区中指定了不明确的时间，<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 方法会将 `dateTime` 解释为标准时间，并在其 <xref:System.DateTime.Kind%2A> 属性 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>时返回 `false`。 如果 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType><xref:System.DateTime.Kind%2A> 属性，则此方法将选择正确的不明确时间，并指示它是否为夏时制。  
  
 由于 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> 方法可以返回不明确的日期和时间 `false` （即，可以表示特定时区中的标准时间或夏令时的日期和时间），因此，<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> 方法可与 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 方法配对，以确定时间是否为夏时制。 由于不明确的时间是可以同时是夏令时和标准时间的时间，因此，可以首先调用 <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> 方法来确定日期和时间是否可以是夏令时。 如果该方法返回 `false`，则可以调用 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 方法来确定 <xref:System.DateTime> 值是否为夏时制。 下面的示例演示了此方法。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 如果 `dateTime` 参数指定了无效时间，则如果 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>，则方法调用将引发 <xref:System.ArgumentException>;否则，该方法将返回 `false`。  
  
 调用 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 方法，以确定在显示时区名称时是使用时区的 <xref:System.TimeZoneInfo.StandardName%2A> 值还是其 <xref:System.TimeZoneInfo.DaylightName%2A> 值。 有关说明，请参阅 "示例" 部分。  
  
   
  
## Examples  
 下面的示例定义了一个名为 `DisplayDateWithTimeZoneName` 的方法，该方法使用 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 方法来确定是显示时区的标准时间名称还是夏时制名称。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性的值为 <see cref="F:System.DateTimeKind.Local" />，而 <paramref name="dateTime" /> 是无效时间。</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime (dateTimeOffset As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日期和时间值。</param>
        <summary>指示指定的日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏令制范围内。</summary>
        <returns>如果 <paramref name="dateTimeOffset" /> 参数为夏令制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> 的返回值受 <xref:System.TimeZoneInfo> 对象表示的时区与 `dateTimeOffset` 参数的 <xref:System.DateTimeOffset.Offset%2A> 属性之间的关系影响。 如果 `dateTimeOffset` 与当前时区相对于协调世界时（UTC）的偏移量不对应，则该方法会将时间转换为当前时区中的时间。 然后，它会确定日期和时间是否为夏时制。  
  
 如果 <xref:System.TimeZoneInfo> 对象表示的时区不支持夏令时，则此方法始终返回 `false`。 若要确定时区是否支持夏令时，请检索其 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 属性的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInvalidTime (dateTime As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间值。</param>
        <summary>指示特定日期和时间是否无效。</summary>
        <returns>如果 <paramref name="dateTime" /> 无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于应用了调整规则，当前时区的时间范围无效，因此无法映射到协调世界时（UTC）。 通常，当时间向前移动夏令时时，会发生无效的时间。 有关说明，请参阅 "示例" 部分。  
  
 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值会影响 `dateTime` 是否表示无效时间，如下表所示。  
  
|DateTime 属性|TimeZoneInfo 对象（如果适用）|行为|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|确定时间是否无效。|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> 或非本地时区。|将 `dateTime` 转换为 <xref:System.TimeZoneInfo> 对象的时间，并返回 `false`。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|不适用。|假定 `dateTime` 是 <xref:System.TimeZoneInfo> 对象的时间，并确定它是否无效。|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|不适用。|返回 `false`。|  
  
   
  
## Examples  
 太平洋时区的夏令时开始时间为凌晨2:00。 2006年4月2日。 下面的代码以一分钟的时间间隔从凌晨1:59 传递时间。 2006年4月2日，上午3:01 2006年4月2日，表示太平洋时区 <xref:System.TimeZoneInfo> 对象的 <xref:System.TimeZoneInfo.IsInvalidTime%2A> 方法。 控制台输出指示上午2:00 的所有时间。 2006年4月2日，上午2:59 2006年4月2日无效。  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示本地时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
        <value>一个对象，表示本地时区。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本地时区是运行代码的计算机上的时区。  
  
> [!IMPORTANT]
>  应始终通过 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 属性访问本地时区，而不是将本地时区分配给 <xref:System.TimeZoneInfo> 对象变量。 这会阻止 <xref:System.TimeZoneInfo> 对象变量通过调用 <xref:System.TimeZoneInfo.ClearCachedData%2A> 方法来使其失效。  
  
 在 Windows 系统中，<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 属性返回的 <xref:System.TimeZoneInfo> 对象反映了控制面板**日期和时间**应用程序中 "**自动调整夏令时时钟**" 复选框的设置。 如果未选中该复选框，则本地时区的缓存副本不包含夏令时信息。 这意味着：  
  
-   本地时区的 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> 方法返回长度为零的数组。  
  
-   本地时区的 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 属性返回 `false`。  
  
-   本地时区的时间不明确或无效（所有对 <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> 或 <xref:System.TimeZoneInfo.IsInvalidTime%2A> 返回 `false`）的调用。  
  
-   与单个本地时间对 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> 的所有调用都将返回 false。  
  
 不过，如果使用 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 方法检索对本地时区的引用，则不是这样。  
  
 <xref:System.TimeZoneInfo.Local%2A> 属性对应于 <xref:System.TimeZone> 类的 <xref:System.TimeZone.CurrentTimeZone%2A> 属性。  
  
   
  
## Examples  
 下面的示例检索一个表示本地时区的 <xref:System.TimeZoneInfo> 对象，并输出其显示名称、标准时间名称和夏时制名称。  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/datetime/access-utc-and-local">如何：访问预定义的 UTC 和本地时区对象</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取时区的标准时间的显示名称。</summary>
        <value>时区的标准时间的显示名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 显示名称根据 Windows 操作系统中安装的区域性进行了本地化。  
  
 <xref:System.TimeZoneInfo.StandardName%2A> 属性与 <xref:System.TimeZone> 类的 <xref:System.TimeZone.StandardName%2A> 属性相同。  
  
 如果操作系统语言为英语，则 <xref:System.TimeZoneInfo.StandardName%2A> 属性的值通常（但不总是）与 <xref:System.TimeZoneInfo.Id%2A> 属性的值相同。  
  
   
  
## Examples  
 下面的示例定义了一个名为 `DisplayDateWithTimeZoneName` 的方法，该方法使用 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> 方法来确定是显示时区的标准时间名称还是夏时制名称。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示时区是否具有任何夏令制规则。</summary>
        <value>如果时区支持夏令制，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 属性返回的本地时区的 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> 属性的值反映了 "控制面板**日期和时间**应用程序" 复选框的设置，该设置定义系统是否自动调整夏令时。 如果未选中该复选框，或者如果没有为时区显示复选框，则此属性的值将 `false`。  
  
   
  
## Examples  
 下面的示例检索本地系统上可用的所有时区的集合，并显示不支持夏令时的所有时区的名称。  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit&#xA;override this.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit" Usage="timeZoneInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
        <summary>在对象的反序列化完成时运行。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> 对象包含无效或已损坏的数据。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="timeZoneInfo.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info">要用数据填充的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前的 <see cref="T:System.TimeZoneInfo" /> 对象转换为序列化字符串。</summary>
        <returns>表示当前 <see cref="T:System.TimeZoneInfo" /> 对象的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依赖于通常不在 Windows 系统的注册表中定义的时区或 Linux 和 macOScan 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)中的应用程序可以使用 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 方法将必要的时区实例化为 <xref:System.TimeZoneInfo> 对象。 然后，应用程序可以调用 <xref:System.TimeZoneInfo.ToSerializedString%2A> 方法将时区对象转换为字符串。  
  
 <xref:System.TimeZoneInfo> 对象还应存储在应用程序可在需要时检索的位置。 可能的位置包括：  
  
-   Windows 系统上的注册表。  
  
-   应用程序资源文件。  
  
-   外部文件，例如文本文件。  
  
   
  
## Examples  
 下面的示例尝试从本地系统检索南极洲/南极点时区。 如果失败，代码会尝试从应用程序目录中的文本文件检索有关时区的信息。 如果此尝试失败，代码会创建时区，并将其相关信息写入文本文件。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="/dotnet/standard/datetime/save-time-zones-to-an-embedded-resource">如何：将时区保存到嵌入的资源中</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前 <see cref="T:System.TimeZoneInfo" /> 对象的显示名称。</summary>
        <returns>当前 <see cref="T:System.TimeZoneInfo" /> 对象的 <see cref="P:System.TimeZoneInfo.DisplayName" /> 属性值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在将包含 <xref:System.TimeZoneInfo> 对象的集合分配给列表控件（如 <xref:System.Windows.Forms.ListBox> 控件）时，该控件会自动调用 <xref:System.TimeZoneInfo.ToString%2A> 方法来提取描述要在列表中表示的每个对象的字符串。 因此，不需要将对象的有意义的说明存储为字符串，用户无需使用该字符串从集合中提取对象。 有关更多详细信息，请参阅[如何：枚举计算机上存在的时区](/dotnet/standard/datetime/enumerate-time-zones)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示协调世界时 (UTC) 区域的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
        <value>一个对象，表示协调世界时 (UTC) 区域。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个内置对象;不会从 Windows 系统上的注册表以及 Linux 和 macOS 上的[ICU 库](http://userguide.icu-project.org/datetime/timezone)检索有关此 <xref:System.TimeZoneInfo> 对象的信息。  
  
> [!IMPORTANT]
>  你应始终通过 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> 属性访问协调世界时（UTC）区域，而不是将 UTC 时区分配给 <xref:System.TimeZoneInfo> 对象变量。 这会阻止 <xref:System.TimeZoneInfo> 对象变量通过调用 <xref:System.TimeZoneInfo.ClearCachedData%2A> 方法来使其失效。  
  
 协调世界时以前称为格林尼治标准时间（GMT）。  
  
   
  
## Examples  
 下面的示例检索一个表示协调世界时（UTC）的 <xref:System.TimeZoneInfo> 对象，并输出其显示名称、标准时间名称和夏时制名称。  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/datetime/access-utc-and-local">如何：访问预定义的 UTC 和本地时区对象</related>
      </Docs>
    </Member>
  </Members>
</Type>
