<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="637b0d70e2ef6a4dcde99b9165dbca98ef7a4c2b" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94461671" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralComparable&#xA;    interface IStructuralEquatable&#xA;    interface IComparable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0" />
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.Runtime.CompilerServices.ITuple" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable, class System.Runtime.CompilerServices.ITuple" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable, ITuple" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable, System::Runtime::CompilerServices::ITuple" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralComparable&#xA;    interface IStructuralEquatable&#xA;    interface IComparable&#xA;    interface ITuple" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable, class System.Runtime.CompilerServices.ITuple" FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable&#xA;    interface ITuple" FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1">
      <InterfaceName>System.Runtime.CompilerServices.ITuple</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="207a3-101">此元组的第一个组件的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-101">The type of the tuple's first component.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="207a3-102">此元组的第二个组件的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-102">The type of the tuple's second component.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="207a3-103">此元组的第三个组件的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-103">The type of the tuple's third component.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="207a3-104">此元组的第四个组件的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-104">The type of the tuple's fourth component.</span></span></typeparam>
    <typeparam name="T5"><span data-ttu-id="207a3-105">元组的第五个分量的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-105">The type of the tuple's fifth component.</span></span></typeparam>
    <typeparam name="T6"><span data-ttu-id="207a3-106">元组的第六个分量的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-106">The type of the tuple's sixth component.</span></span></typeparam>
    <typeparam name="T7"><span data-ttu-id="207a3-107">元组的第七个分量的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-107">The type of the tuple's seventh component.</span></span></typeparam>
    <typeparam name="TRest"><span data-ttu-id="207a3-108">任何常规 <see langword="Tuple" /> 对象，用于定义元组的剩余分量的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-108">Any generic <see langword="Tuple" /> object that defines the types of the tuple's remaining components.</span></span></typeparam>
    <summary><span data-ttu-id="207a3-109">表示 n 元组，n 为 8 或更大值。</span><span class="sxs-lookup"><span data-stu-id="207a3-109">Represents an *n* -tuple, where *n* is 8 or greater.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-110">元组是具有特定数量和值序列的数据结构。</span><span class="sxs-lookup"><span data-stu-id="207a3-110">A tuple is a data structure that has a specific number and sequence of values.</span></span> <span data-ttu-id="207a3-111"><xref:System.Tuple%608>类表示具有八个或更多组件的 *n* 元组。</span><span class="sxs-lookup"><span data-stu-id="207a3-111">The <xref:System.Tuple%608> class represents an *n* -tuple that has eight or more components.</span></span>  
  
 <span data-ttu-id="207a3-112">可以 <xref:System.Tuple%608> 通过调用静态方法，实例化一个正好包含八个组件的对象 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-112">You can instantiate a <xref:System.Tuple%608> object with exactly eight components by calling the static <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="207a3-113">下面的示例创建一个8元组 (八元组) ，其中包含小于20的质数。</span><span class="sxs-lookup"><span data-stu-id="207a3-113">The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</span></span> <span data-ttu-id="207a3-114">请注意，它使用类型推理来确定每个组件的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-114">Note that it uses type inference to determine the type of each component.</span></span>  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 <span data-ttu-id="207a3-115">还可以通过调用构造函数，实例化包含八个或更多组件的 n 元组对象 <xref:System.Tuple%608.%23ctor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-115">You can also instantiate an n-tuple object with eight or more components by calling the <xref:System.Tuple%608.%23ctor%2A> constructor.</span></span> <span data-ttu-id="207a3-116">下面的示例使用 <xref:System.Tuple%608.%23ctor%2A> 构造函数创建一个8元组，该元组等效于在上一个示例中创建的元组。</span><span class="sxs-lookup"><span data-stu-id="207a3-116">The following example uses the <xref:System.Tuple%608.%23ctor%2A> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="207a3-117">若要创建包含九个或更多组件的 n 元组，必须调用  <xref:System.Tuple%608.%23ctor%2A> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="207a3-117">To create an n-tuple with nine or more components, you must call the  <xref:System.Tuple%608.%23ctor%2A> constructor.</span></span> <span data-ttu-id="207a3-118">类的静态工厂方法 <xref:System.Tuple> 不支持创建 `Tuple` 具有超过8个组件的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-118">The static factory methods of the <xref:System.Tuple> class do not support the creation of `Tuple` objects with more than eight components.</span></span>  
  
 <span data-ttu-id="207a3-119">若要使用构造函数实例化包含八个或更多组件的 n 元组 <xref:System.Tuple%608.%23ctor%2A> ，请提供一个泛型 `Tuple` 对象作为 `rest` 参数，以定义元组的第八到第 *n* 个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-119">To instantiate an n-tuple that has eight or more components with the <xref:System.Tuple%608.%23ctor%2A> constructor, you supply a generic `Tuple` object as the `rest` parameter to define the eighth through *n* th components of the tuple.</span></span> <span data-ttu-id="207a3-120">通过 `Tuple` 以这种方式嵌套泛型对象，可以创建对其组件数没有实际限制的元组。</span><span class="sxs-lookup"><span data-stu-id="207a3-120">By nesting generic `Tuple` objects in this way, you can create a tuple that has no practical limitation on the number of its components.</span></span>  
  
 <span data-ttu-id="207a3-121">下面的示例创建一个17元组，该元组包含每个美国人口普查1860到2000的 Detroit 的人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-121">The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</span></span> <span data-ttu-id="207a3-122">该元组的第一个组件是城市名称。</span><span class="sxs-lookup"><span data-stu-id="207a3-122">The first component of the tuple is the city name.</span></span> <span data-ttu-id="207a3-123">第二个组件是数据序列的开始日期，第三个组件是开始日期的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-123">The second component is the start date of the data series, and the third component is the population at the start date.</span></span> <span data-ttu-id="207a3-124">每个后续组件提供十年时间间隔的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-124">Each subsequent component provides the population at decade intervals.</span></span> <span data-ttu-id="207a3-125">通过在对象中嵌套对象来创建17元组 <xref:System.Tuple%603> <xref:System.Tuple%608> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-125">The 17-tuple is created by nesting a <xref:System.Tuple%603> object inside a <xref:System.Tuple%608> object.</span></span> <span data-ttu-id="207a3-126"> (即，将 <xref:System.Tuple%603> 对象作为 `rest` 类构造函数中的参数值提供 <xref:System.Tuple%608> 。 ) 此 <xref:System.Tuple%608> 对象依次嵌套在外部 <xref:System.Tuple%608> 对象中。</span><span class="sxs-lookup"><span data-stu-id="207a3-126">(That is, the <xref:System.Tuple%603> object is supplied as the value of the `rest` parameter in the <xref:System.Tuple%608> class constructor.) This <xref:System.Tuple%608> object is, in turn, nested in an outer <xref:System.Tuple%608> object.</span></span> <span data-ttu-id="207a3-127"> (即，将 <xref:System.Tuple%608> 对象作为 `rest` 外部 <xref:System.Tuple%608> 对象的类构造函数中的参数值提供。 ) </span><span class="sxs-lookup"><span data-stu-id="207a3-127">(That is, the <xref:System.Tuple%608> object is supplied as the value of the `rest` parameter in the outer <xref:System.Tuple%608> object's class constructor.)</span></span>  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 <span data-ttu-id="207a3-128">您可以使用只读 <xref:System.Tuple%607.Item1%2A> 、 <xref:System.Tuple%607.Item2%2A> 、、、、 <xref:System.Tuple%607.Item3%2A> <xref:System.Tuple%607.Item4%2A> <xref:System.Tuple%607.Item5%2A> <xref:System.Tuple%607.Item6%2A> 和 <xref:System.Tuple%607.Item7%2A> 实例属性检索元组的前七个组件的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-128">You can retrieve the value of the tuple's first seven components by using the read-only <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, and <xref:System.Tuple%607.Item7%2A> instance properties.</span></span> <span data-ttu-id="207a3-129">任何附加组件都是嵌套的，可从属性中检索 <xref:System.Tuple%608.Rest%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-129">Any additional components are nested and can be retrieved from the <xref:System.Tuple%608.Rest%2A> property.</span></span> <span data-ttu-id="207a3-130">在前面的示例中， <xref:System.Tuple%608.Item1%2A> 通过 <xref:System.Tuple%608.Item7%2A> 属性检索元组的第一个到第七个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-130">In the previous example, the <xref:System.Tuple%608.Item1%2A> through <xref:System.Tuple%608.Item7%2A> properties retrieve the first through seventh components of the tuple.</span></span> <span data-ttu-id="207a3-131">第八个到第十四个组件包含在嵌套在第二级的元组中，由 `Rest.Item1` 通过 `Rest.Item7` 属性表示。</span><span class="sxs-lookup"><span data-stu-id="207a3-131">The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the `Rest.Item1` through `Rest.Item7` properties.</span></span> <span data-ttu-id="207a3-132">第十五到第17个组件包含在嵌套于第三级的元组中，并由 `Rest.Rest.Item1` `Rest.Rest.Item3` 属性表示。</span><span class="sxs-lookup"><span data-stu-id="207a3-132">The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the `Rest.Rest.Item1` though `Rest.Rest.Item3` properties.</span></span>  
  
 <span data-ttu-id="207a3-133">元组通常以四种不同的方式使用：</span><span class="sxs-lookup"><span data-stu-id="207a3-133">Tuples are commonly used in four different ways:</span></span>  
  
-   <span data-ttu-id="207a3-134">表示单个数据集。</span><span class="sxs-lookup"><span data-stu-id="207a3-134">To represent a single set of data.</span></span> <span data-ttu-id="207a3-135">例如，元组可以表示数据库记录，并且其组件可以表示记录的各个字段。</span><span class="sxs-lookup"><span data-stu-id="207a3-135">For example, a tuple can represent a database record, and its components can represent individual fields of the record.</span></span>  
  
-   <span data-ttu-id="207a3-136">提供对数据集的轻松访问和操作。</span><span class="sxs-lookup"><span data-stu-id="207a3-136">To provide easy access to, and manipulation of, a data set.</span></span>  
  
-   <span data-ttu-id="207a3-137">如果为，则从方法返回多个值，而不使用 `out` 参数 (在 c # 中 ) 或 `ByRef` (Visual Basic) 中的参数。</span><span class="sxs-lookup"><span data-stu-id="207a3-137">To return multiple values from a method without the use of `out` parameters (in C#) or `ByRef` parameters (in Visual Basic).</span></span> <span data-ttu-id="207a3-138">例如，上一个示例在对象中返回其计算统计信息以及城市名称 <xref:System.Tuple%607> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-138">For example, the previous example returns its computed statistics, along with the city name, in a <xref:System.Tuple%607> object.</span></span>  
  
-   <span data-ttu-id="207a3-139">若要通过单个参数向方法传递多个值，则为。</span><span class="sxs-lookup"><span data-stu-id="207a3-139">To pass multiple values to a method through a single parameter.</span></span> <span data-ttu-id="207a3-140">例如，该 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 方法只有一个参数，该参数使你可以为启动时线程执行的方法提供一个值。</span><span class="sxs-lookup"><span data-stu-id="207a3-140">For example, the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</span></span> <span data-ttu-id="207a3-141">如果提供 <xref:System.Tuple%607> 对象作为方法参数，则可以为线程的启动例程提供七个数据项。</span><span class="sxs-lookup"><span data-stu-id="207a3-141">If you supply a <xref:System.Tuple%607> object as the method argument, you can supply the thread's startup routine with seven items of data.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1"><span data-ttu-id="207a3-142">此元组的第一个组件的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-142">The value of the tuple's first component.</span></span></param>
        <param name="item2"><span data-ttu-id="207a3-143">此元组的第二个组件的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-143">The value of the tuple's second component.</span></span></param>
        <param name="item3"><span data-ttu-id="207a3-144">此元组的第三个组件的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-144">The value of the tuple's third component.</span></span></param>
        <param name="item4"><span data-ttu-id="207a3-145">此元组的第四个组件的值</span><span class="sxs-lookup"><span data-stu-id="207a3-145">The value of the tuple's fourth component</span></span></param>
        <param name="item5"><span data-ttu-id="207a3-146">元组的第五个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-146">The value of the tuple's fifth component.</span></span></param>
        <param name="item6"><span data-ttu-id="207a3-147">元组的第六个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-147">The value of the tuple's sixth component.</span></span></param>
        <param name="item7"><span data-ttu-id="207a3-148">元组的第七个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-148">The value of the tuple's seventh component.</span></span></param>
        <param name="rest"><span data-ttu-id="207a3-149">任何常规 <see langword="Tuple" /> 对象，其中包含元组的剩余分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-149">Any generic <see langword="Tuple" /> object that contains the values of the tuple's remaining components.</span></span></param>
        <summary><span data-ttu-id="207a3-150">初始化 <see cref="T:System.Tuple`8" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="207a3-150">Initializes a new instance of the <see cref="T:System.Tuple`8" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-151">你还可以使用静态 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> 方法实例化8元组 (八元组) 对象，而无需显式指定其组件的类型。</span><span class="sxs-lookup"><span data-stu-id="207a3-151">You can also use the static <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</span></span> <span data-ttu-id="207a3-152">下面的示例使用 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> 方法实例化包含小于20的质数的8元组对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-152">The following example uses the <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</span></span>  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 <span data-ttu-id="207a3-153">这等效于对 <xref:System.Tuple%607.%23ctor%2A> 类构造函数的以下调用。</span><span class="sxs-lookup"><span data-stu-id="207a3-153">This is equivalent to the following call to the <xref:System.Tuple%607.%23ctor%2A> class constructor.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 <span data-ttu-id="207a3-154">但是，静态 <xref:System.Tuple.Create%2A?displayProperty=nameWithType> 方法不能用于创建包含8个以上组件的元组对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-154">However, the static <xref:System.Tuple.Create%2A?displayProperty=nameWithType> method cannot be used to create a tuple object with more than eight components.</span></span>  
  
 <span data-ttu-id="207a3-155">使用 <xref:System.Tuple%608.%23ctor%2A> 构造函数创建包含八个或更多组件的 n 元组时，可以使用 `rest` 参数创建一个包含1到7个组件的嵌套 n 元组。</span><span class="sxs-lookup"><span data-stu-id="207a3-155">When using the <xref:System.Tuple%608.%23ctor%2A> constructor to create an n-tuple with eight or more components, you use the `rest` parameter to create a nested n-tuple that has from one to seven components.</span></span> <span data-ttu-id="207a3-156">通过使用连续的嵌套级别，可以创建一个具有几乎不受限制的组件数的 n 元组。</span><span class="sxs-lookup"><span data-stu-id="207a3-156">By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</span></span> <span data-ttu-id="207a3-157">例如，若要创建25元组，可以实例化 <xref:System.Tuple%608> 包含三个嵌套级别的对象，如下所示：</span><span class="sxs-lookup"><span data-stu-id="207a3-157">For example, to create a 25-tuple, you instantiate a <xref:System.Tuple%608> object with three levels of nesting, as follows:</span></span>  
  
-   <span data-ttu-id="207a3-158">最外面的 <xref:System.Tuple%608> 对象包含第一个到第七个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-158">The outermost <xref:System.Tuple%608> object contains the first through seventh components.</span></span> <span data-ttu-id="207a3-159">其 <xref:System.Tuple%608.Rest%2A> 属性提供对 <xref:System.Tuple%608> 第一级嵌套中的对象的访问。</span><span class="sxs-lookup"><span data-stu-id="207a3-159">Its <xref:System.Tuple%608.Rest%2A> property provides access to an <xref:System.Tuple%608> object at the first level of nesting.</span></span>  
  
-   <span data-ttu-id="207a3-160">最外面的嵌套 <xref:System.Tuple%608> 对象包含第8个到第十四个组件，其 <xref:System.Tuple%608.Rest%2A> 属性提供对 <xref:System.Tuple%608> 第二级嵌套的对象的访问。</span><span class="sxs-lookup"><span data-stu-id="207a3-160">The outermost nested <xref:System.Tuple%608> object contains the eighth through fourteenth components, and its <xref:System.Tuple%608.Rest%2A> property provides access to an <xref:System.Tuple%608> object at the second level of nesting.</span></span>  
  
-   <span data-ttu-id="207a3-161"><xref:System.Tuple%608>第二级嵌套的对象包含第15到第20个到第15个组件，其 <xref:System.Tuple%608.Rest%2A> 属性提供对 <xref:System.Tuple%604> 第三个嵌套级别的对象的访问。</span><span class="sxs-lookup"><span data-stu-id="207a3-161">The <xref:System.Tuple%608> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <xref:System.Tuple%608.Rest%2A> property provides access to an <xref:System.Tuple%604> object at the third level of nesting.</span></span>  
  
-   <span data-ttu-id="207a3-162">最内层的元组是一个 <xref:System.Tuple%604> 对象，该对象包含二十秒到第五个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-162">The innermost tuple is a <xref:System.Tuple%604> object that contains the twenty-second through twenty-fifth components.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-163">下面的示例创建一个17元组，该元组包含每个人口普查1860到2000的人口的人口数据 Detroit。</span><span class="sxs-lookup"><span data-stu-id="207a3-163">The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</span></span> <span data-ttu-id="207a3-164">该元组的第一个组件是城市名称。</span><span class="sxs-lookup"><span data-stu-id="207a3-164">The first component of the tuple is the city name.</span></span> <span data-ttu-id="207a3-165">第二个组件是一系列数据的开始日期，第三个组件是开始日期的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-165">The second component is the start date of the series of data, and the third component is the population at the start date.</span></span> <span data-ttu-id="207a3-166">每个后续组件提供十年时间间隔的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-166">Each subsequent component provides the population at decade intervals.</span></span> <span data-ttu-id="207a3-167">该示例使用两层嵌套来创建17元组：它定义7元组，该元组的第三个和第七个组件包含1860到1900的人口数据、包含1910到1970的人口数据的嵌套7元组，以及包含用于1980和2000的人口数据的内部嵌套的3元组。</span><span class="sxs-lookup"><span data-stu-id="207a3-167">The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</span></span>  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="207a3-168"><paramref name="rest" /> 不是泛型 <see langword="Tuple" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-168"><paramref name="rest" /> is not a generic <see langword="Tuple" /> object.</span></span></exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="207a3-169">与该实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-169">The object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="207a3-170">返回一个值，该值指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</span><span class="sxs-lookup"><span data-stu-id="207a3-170">Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="207a3-171">如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="207a3-171"><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-172">`obj`如果满足以下所有条件，则该参数被视为等于当前实例：</span><span class="sxs-lookup"><span data-stu-id="207a3-172">The `obj` parameter is considered to be equal to the current instance if it meets all the following conditions:</span></span>  
  
-   <span data-ttu-id="207a3-173">它是一个 <xref:System.Tuple%608> 对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-173">It is a <xref:System.Tuple%608> object.</span></span>  
  
-   <span data-ttu-id="207a3-174">它的组件总数与当前实例的类型相同。</span><span class="sxs-lookup"><span data-stu-id="207a3-174">It has the same total number of components that are of the same types as the current instance.</span></span>  
  
-   <span data-ttu-id="207a3-175">其组件 (包含其嵌套组件) 等于当前实例的组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-175">Its components (including its nested components) are equal to those of the current instance.</span></span> <span data-ttu-id="207a3-176">相等性取决于每个组件的默认相等比较器。</span><span class="sxs-lookup"><span data-stu-id="207a3-176">Equality is determined by the default equality comparer for each component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-177">下面的示例定义五个 <xref:System.Tuple%608> 包含质数的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-177">The following example defines five <xref:System.Tuple%608> objects that contain prime numbers.</span></span> <span data-ttu-id="207a3-178">然后，它将第一个对象与其余的每个对象进行比较。</span><span class="sxs-lookup"><span data-stu-id="207a3-178">It then compares the first object with each of the remaining objects.</span></span> <span data-ttu-id="207a3-179">如输出所示，只有第一个和最后一个 <xref:System.Tuple%608> 对象是相等的，因为它们具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-179">As the output shows, only the first and the last <xref:System.Tuple%608> objects are equal, because they have an identical number of components with identical values.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="207a3-180">计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="207a3-180">Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object.</span></span></summary>
        <returns><span data-ttu-id="207a3-181">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="207a3-181">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-182">获取当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-182">Gets the value of the current <see cref="T:System.Tuple`8" /> object's first component.</span></span></summary>
        <value><span data-ttu-id="207a3-183">当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-183">The value of the current <see cref="T:System.Tuple`8" /> object's first component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-184">可以 <xref:System.Tuple%608.Item1%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-184">You can dynamically determine the type of the <xref:System.Tuple%608.Item1%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-185">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item1%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-185">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item1%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-186">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，并从该数组中检索由其方法返回的第一个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-186">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the first element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-187">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-187">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-188">17元组的第一个组件是城市名称。</span><span class="sxs-lookup"><span data-stu-id="207a3-188">The first component of the 17-tuple is the city name.</span></span> <span data-ttu-id="207a3-189">该示例使用 <xref:System.Tuple%608.Item1%2A> 属性在显示填充数据之前在表头中显示城市名称。</span><span class="sxs-lookup"><span data-stu-id="207a3-189">The example uses the <xref:System.Tuple%608.Item1%2A> property to display the city name in the table header before displaying the population data.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-190">获取当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-190">Gets the value of the current <see cref="T:System.Tuple`8" /> object's second component.</span></span></summary>
        <value><span data-ttu-id="207a3-191">当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-191">The value of the current <see cref="T:System.Tuple`8" /> object's second component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-192">可以 <xref:System.Tuple%608.Item2%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-192">You can dynamically determine the type of the <xref:System.Tuple%608.Item2%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-193">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item2%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-193">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item2%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-194">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，并从其方法返回的数组中检索第二个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-194">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-195">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-195">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-196">17元组的第二个组件是数据序列的第一年。</span><span class="sxs-lookup"><span data-stu-id="207a3-196">The second component of the 17-tuple is the first year of the data series.</span></span> <span data-ttu-id="207a3-197">该示例将属性的值分配 <xref:System.Tuple%608.Item2%2A> 给一个变量，然后使用该变量来表示显示其数据的年份。</span><span class="sxs-lookup"><span data-stu-id="207a3-197">The example assigns the value of the <xref:System.Tuple%608.Item2%2A> property to a variable, and then uses that variable to represent the year whose data is displayed.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-198">获取当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-198">Gets the value of the current <see cref="T:System.Tuple`8" /> object's third component.</span></span></summary>
        <value><span data-ttu-id="207a3-199">当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-199">The value of the current <see cref="T:System.Tuple`8" /> object's third component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-200">可以 <xref:System.Tuple%608.Item3%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-200">You can dynamically determine the type of the <xref:System.Tuple%608.Item3%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-201">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item3%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-201">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item3%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-202">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，以及从其方法返回的数组中检索第三个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-202">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the third element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-203">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-203">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-204">17元组的第三个组件是1860的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-204">The third component of the 17-tuple is the population in 1860.</span></span> <span data-ttu-id="207a3-205">该示例使用 <xref:System.Tuple%608.Item3%2A> 属性来显示总体值，并计算1860与1870之间人口变动的年率。</span><span class="sxs-lookup"><span data-stu-id="207a3-205">The example uses the <xref:System.Tuple%608.Item3%2A> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-206">获取当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-206">Gets the value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</span></span></summary>
        <value><span data-ttu-id="207a3-207">当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-207">The value of the current <see cref="T:System.Tuple`8" /> object's fourth component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-208">可以 <xref:System.Tuple%608.Item4%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-208">You can dynamically determine the type of the <xref:System.Tuple%608.Item4%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-209">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item4%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-209">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item4%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-210">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，并从其方法返回的数组中检索第四个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-210">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the fourth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-211">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-211">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-212">17元组的第四个组件是1870的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-212">The fourth component of the 17-tuple is the population in 1870.</span></span> <span data-ttu-id="207a3-213">该示例使用 <xref:System.Tuple%608.Item4%2A> 属性来显示总体值，并计算1870与1880之间人口变动的年率。</span><span class="sxs-lookup"><span data-stu-id="207a3-213">The example uses the <xref:System.Tuple%608.Item4%2A> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-214">获取当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-214">Gets the value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</span></span></summary>
        <value><span data-ttu-id="207a3-215">当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-215">The value of the current <see cref="T:System.Tuple`8" /> object's fifth component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-216">可以 <xref:System.Tuple%608.Item5%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-216">You can dynamically determine the type of the <xref:System.Tuple%608.Item5%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-217">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item5%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-217">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item5%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-218">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，并从该数组中检索其方法返回的第五个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-218">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the fifth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-219">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-219">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-220">17元组的第五个分量是1880的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-220">The fifth component of the 17-tuple is the population in 1880.</span></span> <span data-ttu-id="207a3-221">该示例使用 <xref:System.Tuple%608.Item5%2A> 属性来显示总体值，并计算1880与1890之间人口变动的年率。</span><span class="sxs-lookup"><span data-stu-id="207a3-221">The example uses the <xref:System.Tuple%608.Item5%2A> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-222">获取当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-222">Gets the value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</span></span></summary>
        <value><span data-ttu-id="207a3-223">当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-223">The value of the current <see cref="T:System.Tuple`8" /> object's sixth component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-224">可以 <xref:System.Tuple%608.Item6%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-224">You can dynamically determine the type of the <xref:System.Tuple%608.Item6%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-225">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item6%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-225">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item6%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-226">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，以及从其方法返回的数组中检索第六个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-226">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the sixth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-227">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-227">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-228">17元组的第六个分量是1890的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-228">The sixth component of the 17-tuple is the population in 1890.</span></span> <span data-ttu-id="207a3-229">该示例使用 <xref:System.Tuple%608.Item6%2A> 属性来显示总体值，并计算1890与1900之间人口变动的年率。</span><span class="sxs-lookup"><span data-stu-id="207a3-229">The example uses the <xref:System.Tuple%608.Item6%2A> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-230">获取当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-230">Gets the value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</span></span></summary>
        <value><span data-ttu-id="207a3-231">当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-231">The value of the current <see cref="T:System.Tuple`8" /> object's seventh component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-232">可以 <xref:System.Tuple%608.Item7%2A> 通过以下两种方式之一动态确定组件的类型：</span><span class="sxs-lookup"><span data-stu-id="207a3-232">You can dynamically determine the type of the <xref:System.Tuple%608.Item7%2A> component in one of two ways:</span></span>  
  
-   <span data-ttu-id="207a3-233">通过 `GetType` 对属性返回的值调用方法 <xref:System.Tuple%608.Item7%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-233">By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%608.Item7%2A> property.</span></span>  
  
-   <span data-ttu-id="207a3-234">通过检索 <xref:System.Type> 表示对象的对象 <xref:System.Tuple%608> ，并从其方法返回的数组中检索第七个元素 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-234">By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%608> object, and retrieving the seventh element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-235">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-235">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-236">17元组的第七个分量是1900的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-236">The seventh component of the 17-tuple is the population in 1900.</span></span> <span data-ttu-id="207a3-237">该示例使用 <xref:System.Tuple%608.Item7%2A> 属性来显示总体值，并计算1900与1910之间人口变动的年率。</span><span class="sxs-lookup"><span data-stu-id="207a3-237">The example uses the <xref:System.Tuple%608.Item7%2A> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-238">获取当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量。</span><span class="sxs-lookup"><span data-stu-id="207a3-238">Gets the current <see cref="T:System.Tuple`8" /> object's remaining components.</span></span></summary>
        <value><span data-ttu-id="207a3-239">当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-239">The value of the current <see cref="T:System.Tuple`8" /> object's remaining components.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-240"><xref:System.Tuple%608.Rest%2A>属性返回一个嵌套 `Tuple` 对象，该对象允许访问元组的 *n* 第八个第8个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-240">The <xref:System.Tuple%608.Rest%2A> property returns a nested `Tuple` object that allows access to the eighth though *n* th components of the tuple.</span></span> <span data-ttu-id="207a3-241">根据元组中的组件总数，可以从嵌套 `Tuple` 对象的通过属性检索第8个到第十四个组件的值 <xref:System.Tuple%608.Item1%2A> <xref:System.Tuple%608.Item7%2A> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-241">Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested `Tuple` object's <xref:System.Tuple%608.Item1%2A> through <xref:System.Tuple%608.Item7%2A> properties.</span></span> <span data-ttu-id="207a3-242">然后，您可以使用 <xref:System.Tuple%608.Rest%2A> 嵌套对象的属性 <xref:System.Tuple%608> 来检索 `Tuple` 下一层嵌套的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-242">You can then use the <xref:System.Tuple%608.Rest%2A> property of a nested <xref:System.Tuple%608> object to retrieve the `Tuple` object at the next level of nesting.</span></span>  
  
 <span data-ttu-id="207a3-243">您可以 `Tuple` <xref:System.Tuple%608.Rest%2A> 通过从其类型名称提取数字来动态确定由属性返回的嵌套对象中的组件数。</span><span class="sxs-lookup"><span data-stu-id="207a3-243">You can dynamically determine the number of components in a nested `Tuple` object that is returned by the <xref:System.Tuple%608.Rest%2A> property by extracting the digit from its type name.</span></span> <span data-ttu-id="207a3-244">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="207a3-244">The following example provides an illustration.</span></span>  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="207a3-245">下面的示例创建一个17元组对象，该对象包含从1860到2000的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-245">The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</span></span> <span data-ttu-id="207a3-246">17元组的第七个分量是1900的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-246">The seventh component of the 17-tuple is the population in 1900.</span></span> <span data-ttu-id="207a3-247">该示例使用 <xref:System.Tuple%608.Rest%2A> 属性检索第8个到第十四个组件的值，并使用 <xref:System.Tuple%608.Rest%2A> 嵌套对象的属性 <xref:System.Tuple%608> 来检索其余组件的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-247">The example uses the <xref:System.Tuple%608.Rest%2A> property to retrieve the values of the eighth through fourteenth components, and it uses the <xref:System.Tuple%608.Rest%2A> property of the nested <xref:System.Tuple%608> object to retrieve the values of the remaining components.</span></span>  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IStructuralComparable.CompareTo : obj * System.Collections.IComparer -&gt; int&#xA;override this.System.Collections.IStructuralComparable.CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="tuple.System.Collections.IStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="207a3-248">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-248">An object to compare with the current instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="207a3-249">提供用于比较的自定义规则的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-249">An object that provides custom rules for comparison.</span></span></param>
        <summary><span data-ttu-id="207a3-250">使用指定的比较器将当前的 <see cref="T:System.Tuple`8" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</span><span class="sxs-lookup"><span data-stu-id="207a3-250">Compares the current <see cref="T:System.Tuple`8" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</span></span></summary>
        <returns><span data-ttu-id="207a3-251">一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="207a3-251">A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="207a3-252">值</span><span class="sxs-lookup"><span data-stu-id="207a3-252">Value</span></span> 
 </term><description> <span data-ttu-id="207a3-253">描述</span><span class="sxs-lookup"><span data-stu-id="207a3-253">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="207a3-254">负整数</span><span class="sxs-lookup"><span data-stu-id="207a3-254">A negative integer</span></span> 
 </term><description> <span data-ttu-id="207a3-255">此实例位于 <paramref name="other" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="207a3-255">This instance precedes <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="207a3-256">零</span><span class="sxs-lookup"><span data-stu-id="207a3-256">Zero</span></span> 
 </term><description> <span data-ttu-id="207a3-257">此实例在排序顺序中的位置与 <paramref name="other" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="207a3-257">This instance and <paramref name="other" /> have the same position in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="207a3-258">正整数</span><span class="sxs-lookup"><span data-stu-id="207a3-258">A positive integer</span></span> 
 </term><description> <span data-ttu-id="207a3-259">此实例位于 <paramref name="other" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="207a3-259">This instance follows <paramref name="other" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-260">此成员是显式接口应用。</span><span class="sxs-lookup"><span data-stu-id="207a3-260">This member is an explicit interface implementation.</span></span> <span data-ttu-id="207a3-261">它只能在 <xref:System.Tuple%608> 实例强制转换为 <xref:System.Collections.IStructuralComparable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="207a3-261">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.</span></span>  
  
 <span data-ttu-id="207a3-262">此方法允许您定义对象的自定义比较 <xref:System.Tuple%608> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-262">This method lets you define customized comparisons of <xref:System.Tuple%608> objects.</span></span> <span data-ttu-id="207a3-263">例如，您可以使用此方法根据 <xref:System.Tuple%608> 特定组件的值对对象进行排序。</span><span class="sxs-lookup"><span data-stu-id="207a3-263">For example, you can use this method to order <xref:System.Tuple%608> objects based on the value of a specific component.</span></span>  
  
 <span data-ttu-id="207a3-264">尽管可以直接调用此方法，但它最常由包含参数的集合排序方法调用， <xref:System.Collections.IComparer> 以对集合的成员进行排序。</span><span class="sxs-lookup"><span data-stu-id="207a3-264">Although this method can be called directly, it is most commonly called by collection-sorting methods that include <xref:System.Collections.IComparer> parameters to order the members of a collection.</span></span> <span data-ttu-id="207a3-265">例如，它由 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> 方法和 <xref:System.Collections.SortedList.Add%2A> <xref:System.Collections.SortedList> 使用构造函数实例化的对象的方法调用 <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-265">For example, it is called by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> method and the <xref:System.Collections.SortedList.Add%2A> method of a <xref:System.Collections.SortedList> object that is instantiated by using the <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="207a3-266"><xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A>方法旨在用于排序操作。</span><span class="sxs-lookup"><span data-stu-id="207a3-266">The <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> method is intended for use in sorting operations.</span></span> <span data-ttu-id="207a3-267">如果比较的主要目的是确定两个对象是否相等，则不应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-267">It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</span></span> <span data-ttu-id="207a3-268">若要确定两个对象是否相等，请调用 <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-268">To determine whether two objects are equal, call the <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-269">下面的示例创建一个对象数组 <xref:System.Tuple%608> ，其中包含从1940到2000的四个美国城市的人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-269">The following example creates an array of <xref:System.Tuple%608> objects that contains population data for four U.S. cities from 1940 to 2000.</span></span> <span data-ttu-id="207a3-270">八元组的第一个组件是城市名称。</span><span class="sxs-lookup"><span data-stu-id="207a3-270">The octuple's first component is the city name.</span></span> <span data-ttu-id="207a3-271">其余六个组件表示从1940到2000的10年间隔的人口。</span><span class="sxs-lookup"><span data-stu-id="207a3-271">The remaining six components represent the population at 10-year intervals from 1940 to 2000.</span></span>  
  
 <span data-ttu-id="207a3-272">`PopulationComparer`类提供一个 <xref:System.Collections.IComparer> 实现，该实现允许 octuples 的数组按其任何一个组件进行排序。</span><span class="sxs-lookup"><span data-stu-id="207a3-272">The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of octuples to be sorted by any one of its components.</span></span> <span data-ttu-id="207a3-273">向类中的构造函数提供了两个值 `PopulationComparer` ：定义排序顺序的组件的位置，以及一个 <xref:System.Boolean> 指示是否应按升序或降序对元组对象进行排序的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-273">Two values are provided to the `PopulationComparer` class in its constructor: The position of the component that defines the sort order, and a <xref:System.Boolean> value that indicates whether the tuple objects should be sorted in ascending or descending order.</span></span>  
  
 <span data-ttu-id="207a3-274">然后，该示例以未排序的顺序显示数组中的元素，按第三个组件对其进行排序 (1950) 中的人口并显示它们，然后按照) 2000 中的人口 (第8个组件对其进行排序，并显示它们。</span><span class="sxs-lookup"><span data-stu-id="207a3-274">The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</span></span>  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="207a3-275"><paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-275"><paramref name="other" /> is not a <see cref="T:System.Tuple`8" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IStructuralEquatable.Equals : obj * System.Collections.IEqualityComparer -&gt; bool&#xA;override this.System.Collections.IStructuralEquatable.Equals : obj * System.Collections.IEqualityComparer -&gt; bool" Usage="tuple.System.Collections.IStructuralEquatable.Equals (other, comparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="207a3-276">与该实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-276">The object to compare with this instance.</span></span></param>
        <param name="comparer"><span data-ttu-id="207a3-277">一个对象，该对象定义用于评估两个对象是否相等的方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-277">An object that defines the method to use to evaluate whether the two objects are equal.</span></span></param>
        <summary><span data-ttu-id="207a3-278">返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</span><span class="sxs-lookup"><span data-stu-id="207a3-278">Returns a value that indicates whether the current <see cref="T:System.Tuple`8" /> object is equal to a specified object based on a specified comparison method.</span></span></summary>
        <returns><span data-ttu-id="207a3-279">如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="207a3-279"><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-280">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="207a3-280">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="207a3-281">它只能在 <xref:System.Tuple%608> 实例强制转换为 <xref:System.Collections.IStructuralEquatable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="207a3-281">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 <span data-ttu-id="207a3-282"><xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType>仅当不为时，才会调用实现 `other` `null` ，并且如果它可以成功地强制转换 (在 c # 中 ) 或 (Visual Basic) 转换为 <xref:System.Tuple%608> 具有相同的组件总数 (包含与 `Tuple` 当前实例相同的类型) 的嵌套对象中的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-282">The <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementation is called only if `other` is not `null`, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref:System.Tuple%608> object that has the same total number of components (including those in nested `Tuple` objects) of the same types as the current instance.</span></span> <span data-ttu-id="207a3-283"><xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29>方法首先传递 <xref:System.Tuple%608.Item1%2A> <xref:System.Tuple%608> 要与实现进行比较的对象的值 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-283">The <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> method first passes the <xref:System.Tuple%608.Item1%2A> values of the <xref:System.Tuple%608> objects to be compared to the <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="207a3-284">如果此方法调用返回 `true` ，将再次调用方法并传递 <xref:System.Tuple%608.Item2%2A> 两个对象的值 <xref:System.Tuple%608> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-284">If this method call returns `true`, the method is called again and passed the <xref:System.Tuple%608.Item2%2A> values of the two <xref:System.Tuple%608> objects.</span></span> <span data-ttu-id="207a3-285">此过程将继续，直到方法调用 `false` 在比较特定对值时返回，或将两个 <xref:System.Tuple%608.Rest%2A> 值传递给方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-285">This continues until the method call returns `false` when it compares a specific pair of values, or the two <xref:System.Tuple%608.Rest%2A> values are passed to the method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IStructuralEquatable.GetHashCode : System.Collections.IEqualityComparer -&gt; int&#xA;override this.System.Collections.IStructuralEquatable.GetHashCode : System.Collections.IEqualityComparer -&gt; int" Usage="tuple.System.Collections.IStructuralEquatable.GetHashCode comparer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="207a3-286">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="207a3-286">An object whose <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> method calculates the hash code of the current <see cref="T:System.Tuple`8" /> object.</span></span></param>
        <summary><span data-ttu-id="207a3-287">使用指定的计算方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="207a3-287">Calculates the hash code for the current <see cref="T:System.Tuple`8" /> object by using a specified computation method.</span></span></summary>
        <returns><span data-ttu-id="207a3-288">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="207a3-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-289">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="207a3-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="207a3-290">它只能在 <xref:System.Tuple%608> 实例强制转换为 <xref:System.Collections.IStructuralEquatable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="207a3-290">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 <span data-ttu-id="207a3-291">方法只是包装对 `comparer` 对象实现的调用 <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-291">The method simply wraps a call to the `comparer` object's <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 <span data-ttu-id="207a3-292">用于计算哈希代码的算法应为被视为相等的两个对象返回相同的哈希代码 <xref:System.Tuple%608> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-292">The algorithm used to compute the hash code should return the same hash code for two <xref:System.Tuple%608> objects that are considered to be equal.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="tuple.System.IComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="207a3-293">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-293">An object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="207a3-294">比较当前 <see cref="T:System.Tuple`8" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</span><span class="sxs-lookup"><span data-stu-id="207a3-294">Compares the current <see cref="T:System.Tuple`8" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</span></span></summary>
        <returns><span data-ttu-id="207a3-295">一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="207a3-295">A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="207a3-296">值</span><span class="sxs-lookup"><span data-stu-id="207a3-296">Value</span></span> 
 </term><description> <span data-ttu-id="207a3-297">描述</span><span class="sxs-lookup"><span data-stu-id="207a3-297">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="207a3-298">负整数</span><span class="sxs-lookup"><span data-stu-id="207a3-298">A negative integer</span></span> 
 </term><description> <span data-ttu-id="207a3-299">此实例位于 <paramref name="obj" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="207a3-299">This instance precedes <paramref name="obj" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="207a3-300">零</span><span class="sxs-lookup"><span data-stu-id="207a3-300">Zero</span></span> 
 </term><description> <span data-ttu-id="207a3-301">此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="207a3-301">This instance and <paramref name="obj" /> have the same position in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="207a3-302">正整数</span><span class="sxs-lookup"><span data-stu-id="207a3-302">A positive integer</span></span> 
 </term><description> <span data-ttu-id="207a3-303">此实例位于 <paramref name="obj" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="207a3-303">This instance follows <paramref name="obj" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-304">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="207a3-304">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="207a3-305">它只能在 <xref:System.Tuple%608> 实例强制转换为 <xref:System.IComparable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="207a3-305">It can be used only when the <xref:System.Tuple%608> instance is cast to an <xref:System.IComparable> interface.</span></span>  
  
 <span data-ttu-id="207a3-306">此方法提供 <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> 类的实现 <xref:System.Tuple%608> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-306">This method provides the <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementation for the <xref:System.Tuple%608> class.</span></span> <span data-ttu-id="207a3-307">尽管可以直接调用方法，但它通常由集合排序方法（如和）的默认重载调用， <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType> 以对集合的成员进行排序。</span><span class="sxs-lookup"><span data-stu-id="207a3-307">Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> and <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, to order the members of a collection.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="207a3-308"><xref:System.Tuple%608.System%23IComparable%23CompareTo%2A>方法旨在用于排序操作。</span><span class="sxs-lookup"><span data-stu-id="207a3-308">The <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> method is intended for use in sorting operations.</span></span> <span data-ttu-id="207a3-309">如果比较的主要目的是确定两个对象是否相等，则不应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-309">It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</span></span> <span data-ttu-id="207a3-310">若要确定两个对象是否相等，请调用 <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-310">To determine whether two objects are equal, call the <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="207a3-311">此方法使用默认的对象比较器来比较每个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-311">This method uses the default object comparer to compare each component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-312">下面的示例创建一个 octuples 数组，其组件是包含质数范围的整数。</span><span class="sxs-lookup"><span data-stu-id="207a3-312">The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</span></span> <span data-ttu-id="207a3-313">该示例按未排序的顺序显示数组的元素，对数组进行排序，然后按排序顺序显示数组。</span><span class="sxs-lookup"><span data-stu-id="207a3-313">The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</span></span> <span data-ttu-id="207a3-314">输出显示数组已按排序 <xref:System.Tuple%608.Item1%2A> ，或者是元组的第一个组件。</span><span class="sxs-lookup"><span data-stu-id="207a3-314">The output shows that the array has been sorted by <xref:System.Tuple%608.Item1%2A>, or the tuple's first component.</span></span> <span data-ttu-id="207a3-315">请注意，该示例不会直接调用 <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="207a3-315">Note that the example does not directly call the <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> method.</span></span> <span data-ttu-id="207a3-316">此方法由 <xref:System.Array.Sort%28System.Array%29> 方法为数组中的每个元素隐式调用。</span><span class="sxs-lookup"><span data-stu-id="207a3-316">This method is called implicitly by the <xref:System.Array.Sort%28System.Array%29> method for each element in the array.</span></span>  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="207a3-317"><paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-317"><paramref name="obj" /> is not a <see cref="T:System.Tuple`8" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object? System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.System.Runtime.CompilerServices.ITuple.Item(int) : obj" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="207a3-318">指定 <see langword="Tuple" /> 元素的索引。</span><span class="sxs-lookup"><span data-stu-id="207a3-318">The index of the specified <see langword="Tuple" /> element.</span></span> <span data-ttu-id="207a3-319"><paramref name="index" /> 的范围可以介于 0（表示 <see langword="Item1" />）到 <see langword="Tuple" /> 中的元素数减去一之间。</span><span class="sxs-lookup"><span data-stu-id="207a3-319"><paramref name="index" /> can range from 0 for <see langword="Item1" /> to one less than the number of elements in the <see langword="Tuple" />.</span></span></param>
        <summary><span data-ttu-id="207a3-320">获取指定 <see langword="Tuple" /> 元素的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-320">Gets the value of the specified <see langword="Tuple" /> element.</span></span></summary>
        <value><span data-ttu-id="207a3-321">指定位置 <see langword="Tuple" /> 元素的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-321">The value of the <see langword="Tuple" /> element at the specified position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-322"><xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType>属性是显式接口实现。</span><span class="sxs-lookup"><span data-stu-id="207a3-322">The <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> property is an explicit interface implementation.</span></span> <span data-ttu-id="207a3-323">若要调用该对象，必须将对象强制转换或转换 <xref:System.Tuple%608> 为 <xref:System.Runtime.CompilerServices.ITuple> 接口对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-323">To call it, you must cast or convert the <xref:System.Tuple%608> object to an <xref:System.Runtime.CompilerServices.ITuple> interface object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="207a3-324"><paramref name="index" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="207a3-324"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="207a3-325">或</span><span class="sxs-lookup"><span data-stu-id="207a3-325">-or-</span></span> 
 <span data-ttu-id="207a3-326"><paramref name="index" /> 大于或等于 <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />。</span><span class="sxs-lookup"><span data-stu-id="207a3-326"><paramref name="index" /> is greater than or equal to <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Runtime.CompilerServices.ITuple.Length : int" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207a3-327">获取 <see langword="Tuple" /> 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="207a3-327">Gets the number of elements in the <see langword="Tuple" />.</span></span></summary>
        <value><span data-ttu-id="207a3-328"><see langword="Tuple" /> 中的元素的数量。</span><span class="sxs-lookup"><span data-stu-id="207a3-328">The number of elements in the <see langword="Tuple" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-329"><xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A>属性是显式接口实现。</span><span class="sxs-lookup"><span data-stu-id="207a3-329">The <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> property is an explicit interface implementation.</span></span> <span data-ttu-id="207a3-330">若要对其进行调用，必须将类型强制转换或转换 <xref:System.Tuple%608> 为 <xref:System.Runtime.CompilerServices.ITuple> 接口对象。</span><span class="sxs-lookup"><span data-stu-id="207a3-330">To call it, you must cast or convert the <xref:System.Tuple%608> type to an <xref:System.Runtime.CompilerServices.ITuple> interface object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="207a3-331">返回表示此 <see cref="T:System.Tuple`8" /> 实例的值的字符串。</span><span class="sxs-lookup"><span data-stu-id="207a3-331">Returns a string that represents the value of this <see cref="T:System.Tuple`8" /> instance.</span></span></summary>
        <returns><span data-ttu-id="207a3-332">此 <see cref="T:System.Tuple`8" /> 对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="207a3-332">The string representation of this <see cref="T:System.Tuple`8" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207a3-333">此方法返回的字符串采用 ( *Item1* ， *Item2* ， *Item3* ， *tuple.item4* ， `Item5, Item6, Item7` ， *Item8*... ) 的形式，其中 *Item1* 、 *Item2* 、 *Item3* 、 *tuple.item4* 、 *tuple.item5* 、 *tuple.item6* 和 *tuple.item7* 表示 <xref:System.Tuple%608.Item1%2A> 、 <xref:System.Tuple%608.Item2%2A> 、、、、 <xref:System.Tuple%608.Item3%2A> <xref:System.Tuple%608.Item4%2A> <xref:System.Tuple%608.Item5%2A> <xref:System.Tuple%608.Item6%2A> 和 <xref:System.Tuple%608.Item7%2A> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="207a3-333">The string returned by this method takes the form ( *Item1* , *Item2* , *Item3* , *Item4* , `Item5, Item6, Item7`, *Item8* …), where *Item1* , *Item2* , *Item3* , *Item4* , *Item5* , *Item6* , and *Item7* represent the values of the <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, and <xref:System.Tuple%608.Item7%2A> properties.</span></span> <span data-ttu-id="207a3-334">*Item8* 表示 <xref:System.Tuple%608> 对象的属性的值 `Next.Item1` 。</span><span class="sxs-lookup"><span data-stu-id="207a3-334">*Item8* represents the value of the <xref:System.Tuple%608> object's `Next.Item1` property.</span></span> <span data-ttu-id="207a3-335">任何其他嵌套组件的值都遵循 *Item8* 。</span><span class="sxs-lookup"><span data-stu-id="207a3-335">The value of any additional nested components follow *Item8*.</span></span> <span data-ttu-id="207a3-336">如果任何属性值为，则将 `null` 其表示为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="207a3-336">If any of the property values is `null`, it is represented as <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="207a3-337">下面的示例创建一个17元组，该元组包含从1860到1900的 Detroit 的城市人口数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-337">The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</span></span> <span data-ttu-id="207a3-338">然后，它使用 <xref:System.Tuple%608.ToString%2A> 方法来显示元组的数据。</span><span class="sxs-lookup"><span data-stu-id="207a3-338">It then uses the <xref:System.Tuple%608.ToString%2A> method to display the tuple's data.</span></span>  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
