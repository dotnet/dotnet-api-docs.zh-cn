<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d62134358a180cbb6af2264921caee965c766487" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86600260" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueType extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4c755-101">为值类型提供基类。</span><span class="sxs-lookup"><span data-stu-id="4c755-101">Provides the base class for value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c755-102"><xref:System.ValueType> 重写中的虚方法 <xref:System.Object> ，并为值类型提供更合适的实现。</span><span class="sxs-lookup"><span data-stu-id="4c755-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="4c755-103">另请参见 <xref:System.Enum> ，后者继承自 <xref:System.ValueType> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="4c755-104">数据类型被分隔为值类型和引用类型。</span><span class="sxs-lookup"><span data-stu-id="4c755-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="4c755-105">值类型要么是堆栈分配，要么在结构中以内联方式分配。</span><span class="sxs-lookup"><span data-stu-id="4c755-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="4c755-106">引用类型为堆分配。</span><span class="sxs-lookup"><span data-stu-id="4c755-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="4c755-107">引用类型和值类型均派生自最终基类 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="4c755-108">如果需要值类型的行为与对象类似，则会在堆上分配值类型类似于引用对象的包装，并将值类型的值复制到其中。</span><span class="sxs-lookup"><span data-stu-id="4c755-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="4c755-109">包装已标记，因此系统知道它包含值类型。</span><span class="sxs-lookup"><span data-stu-id="4c755-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="4c755-110">此过程称为装箱，相反的过程称为取消装箱。</span><span class="sxs-lookup"><span data-stu-id="4c755-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="4c755-111">装箱和取消装箱允许任何类型被视为对象。</span><span class="sxs-lookup"><span data-stu-id="4c755-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="4c755-112">尽管 <xref:System.ValueType> 是值类型的隐式基类，但无法创建直接从继承的类 <xref:System.ValueType> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="4c755-113">相反，单个编译器提供语言关键字或构造 (如 `struct` c # 和 `Structure` .。。`End Structure`</span><span class="sxs-lookup"><span data-stu-id="4c755-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="4c755-114">在 Visual Basic) 支持创建值类型。</span><span class="sxs-lookup"><span data-stu-id="4c755-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="4c755-115">除了充当 .NET Framework 中的值类型的基类， <xref:System.ValueType> 结构通常不在代码中直接使用。</span><span class="sxs-lookup"><span data-stu-id="4c755-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="4c755-116">但是，它可用作方法调用中的参数，以将可能的自变量限制为值类型而不是所有对象，或者允许方法处理许多不同的值类型。</span><span class="sxs-lookup"><span data-stu-id="4c755-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="4c755-117">下面的示例演示如何 <xref:System.ValueType> 阻止将引用类型传递给方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="4c755-118">它定义了一个名为 `Utility` 的类，其中包含四个方法：，指示其参数是否为数字;，指示其参数是否为整数;，指示其参数是否为 `IsNumeric` `IsInteger` `IsFloat` 浮点数; 和 `Compare` ，它指示两个数值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="4c755-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="4c755-119">在每种情况下，方法参数的类型为 <xref:System.ValueType> ，并且禁止将引用类型传递给方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="4c755-120">下面的示例演示对类的方法的调用 `Utility` 。</span><span class="sxs-lookup"><span data-stu-id="4c755-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c755-121">初始化 <see cref="T:System.ValueType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="4c755-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4c755-122">要与当前实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="4c755-122">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="4c755-123">指示此实例与指定对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="4c755-123">Indicates whether this instance and a specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="4c755-124">如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4c755-124"><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c755-125"><xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>方法将重写 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 并为 .NET Framework 中的所有值类型提供值相等性的默认实现。</span><span class="sxs-lookup"><span data-stu-id="4c755-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="4c755-126">默认实现对 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 当前实例的每个字段调用， `obj` `true` 如果所有字段都相等，则返回。</span><span class="sxs-lookup"><span data-stu-id="4c755-126">The default implementation calls <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> on each field of the current instance and `obj` and returns `true` if all fields are equal.</span></span>
  
> [!TIP]
>  <span data-ttu-id="4c755-127">特别是，如果您的值类型包含属于引用类型的字段，则应该重写 <xref:System.ValueType.Equals%28System.Object%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-127">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="4c755-128">这可以提高性能，并使你能够更好地表示该类型的相等性含义。</span><span class="sxs-lookup"><span data-stu-id="4c755-128">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-wrt"></a><span data-ttu-id="4c755-129">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="4c755-129">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="4c755-130">在对结构调用 <xref:System.ValueType.Equals%2A> 方法时 [!INCLUDE[wrt](~/includes/wrt-md.md)] ，它为不重写的值类型提供默认行为 <xref:System.ValueType.Equals%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-130">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="4c755-131">这是 .NET Framework 为 (提供的支持的一部分 [!INCLUDE[wrt](~/includes/wrt-md.md)] ，请参阅 [Windows 应用商店应用的 .NET Framework 支持和) Windows 运行时](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime) 。</span><span class="sxs-lookup"><span data-stu-id="4c755-131">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="4c755-132">结构不能重写 <xref:System.ValueType.Equals%2A> ，即使它们是使用 c # 或 Visual Basic 编写的，因为它们不能有方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-132">structures can't override <xref:System.ValueType.Equals%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="4c755-133"> (此外，本身中的结构 [!INCLUDE[wrt](~/includes/wrt-md.md)] 不会继承 <xref:System.ValueType> 。 ) 不过， <xref:System.ValueType.ToString%2A> <xref:System.ValueType.Equals%2A> <xref:System.ValueType.GetHashCode%2A> 当你在 c # 或 Visual Basic 代码中使用它们时，它们似乎具有、和方法，而 .NET Framework 提供这些方法的默认行为。</span><span class="sxs-lookup"><span data-stu-id="4c755-133">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c755-134">下面的示例演示如何使用 <xref:System.ValueType.Equals%2A> 派生值类型重写方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-134">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c755-135">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="4c755-135">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="4c755-136">32 位有符号整数，它是此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="4c755-136">A 32-bit signed integer that is the hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c755-137"><xref:System.ValueType.GetHashCode%2A>方法适用于从派生的类型 <xref:System.ValueType> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-137">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="4c755-138">派生类型的一个或多个字段用于计算返回值。</span><span class="sxs-lookup"><span data-stu-id="4c755-138">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="4c755-139">如果调用派生类型的 `GetHashCode` 方法，则返回值不可能适合用作哈希表中的键。</span><span class="sxs-lookup"><span data-stu-id="4c755-139">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="4c755-140">此外，如果其中一个或多个字段的值发生更改，则返回值可能不适合用作哈希表中的键。</span><span class="sxs-lookup"><span data-stu-id="4c755-140">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="4c755-141">在这两种情况下，请考虑编写您自己的方法的实现 <xref:System.ValueType.GetHashCode%2A> ，该实现更密切地表示该类型的哈希代码的概念。</span><span class="sxs-lookup"><span data-stu-id="4c755-141">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="4c755-142">有关详细信息，请参阅 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 和<xref:System.Collections.Hashtable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4c755-142">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-wrt"></a><span data-ttu-id="4c755-143">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="4c755-143">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="4c755-144">在对结构调用 <xref:System.ValueType.GetHashCode%2A> 方法时 [!INCLUDE[wrt](~/includes/wrt-md.md)] ，它为不重写的值类型提供默认行为 <xref:System.ValueType.GetHashCode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-144">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="4c755-145">这是 .NET Framework 为 (提供的支持的一部分 [!INCLUDE[wrt](~/includes/wrt-md.md)] ，请参阅 [Windows 应用商店应用的 .NET Framework 支持和) Windows 运行时](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime) 。</span><span class="sxs-lookup"><span data-stu-id="4c755-145">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="4c755-146">结构不能重写 <xref:System.ValueType.GetHashCode%2A> ，即使它们是使用 c # 或 Visual Basic 编写的，因为它们不能有方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-146">structures can't override <xref:System.ValueType.GetHashCode%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="4c755-147"> (此外，本身中的结构 [!INCLUDE[wrt](~/includes/wrt-md.md)] 不会继承 <xref:System.ValueType> 。 ) 不过， <xref:System.ValueType.ToString%2A> <xref:System.ValueType.Equals%2A> <xref:System.ValueType.GetHashCode%2A> 当你在 c # 或 Visual Basic 代码中使用它们时，它们似乎具有、和方法，而 .NET Framework 提供这些方法的默认行为。</span><span class="sxs-lookup"><span data-stu-id="4c755-147">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c755-148">下面的示例演示如何使用 <xref:System.ValueType.GetHashCode%2A> 派生值类型重写方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-148">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c755-149">返回此实例的完全限定类型名称。</span><span class="sxs-lookup"><span data-stu-id="4c755-149">Returns the fully qualified type name of this instance.</span></span></summary>
        <returns><span data-ttu-id="4c755-150">完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="4c755-150">The fully qualified type name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c755-151"><xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法会重写 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 方法，并 `ToString` 为值类型提供方法的默认实现。</span><span class="sxs-lookup"><span data-stu-id="4c755-151">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="4c755-152"> (值类型是 `struct` 在 c # 中由关键字定义的类型，以及 `Structure` `End Structure` Visual Basic 中的 ... 构造。 ) 功能，但实现与相同 <xref:System.Object.ToString%2A?displayProperty=nameWithType> ：方法返回完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="4c755-152">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="4c755-153">由 `struct` c # 中的关键字和 Visual Basic 中的 ... 构造定义的值类型 `Structure` 通常会 `End Structure` 重写 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 方法，以提供更有意义的值类型字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="4c755-153">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="4c755-154">以下示例演示了差异。</span><span class="sxs-lookup"><span data-stu-id="4c755-154">The following example illustrates the difference.</span></span> <span data-ttu-id="4c755-155">它定义两个值类型， `EmployeeA` 并 `EmployeeB` 创建每个值类型并调用其 `ToString` 方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-155">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="4c755-156">由于 `EmployeeA` 结构不重写 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 方法，因此它只显示完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="4c755-156">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="4c755-157">另一方面 `EmployeeB.ToString` ，方法提供有关对象的有用信息。</span><span class="sxs-lookup"><span data-stu-id="4c755-157">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="4c755-158">请注意，尽管枚举类型也是值类型，但它们派生自 <xref:System.Enum> 类，后者会重写  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-158">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="4c755-159">Windows 运行时的说明</span><span class="sxs-lookup"><span data-stu-id="4c755-159">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="4c755-160">在对结构调用 <xref:System.ValueType.ToString%2A> 方法时 [!INCLUDE[wrt](~/includes/wrt-md.md)] ，它为不重写的值类型提供默认行为 <xref:System.ValueType.ToString%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4c755-160">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="4c755-161">这是 .NET Framework 为 (提供的支持的一部分 [!INCLUDE[wrt](~/includes/wrt-md.md)] ，请参阅 [Windows 应用商店应用的 .NET Framework 支持和) Windows 运行时](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime) 。</span><span class="sxs-lookup"><span data-stu-id="4c755-161">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="4c755-162">结构不能重写 <xref:System.ValueType.ToString%2A> ，即使它们是使用 c # 或 Visual Basic 编写的，因为它们不能有方法。</span><span class="sxs-lookup"><span data-stu-id="4c755-162">structures can't override <xref:System.ValueType.ToString%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="4c755-163"> (此外，本身中的结构 [!INCLUDE[wrt](~/includes/wrt-md.md)] 不会继承 <xref:System.ValueType> 。 ) 不过， <xref:System.ValueType.ToString%2A> <xref:System.ValueType.Equals%2A> <xref:System.ValueType.GetHashCode%2A> 当你在 c # 或 Visual Basic 代码中使用它们时，它们似乎具有、和方法，而 .NET Framework 提供这些方法的默认行为。</span><span class="sxs-lookup"><span data-stu-id="4c755-163">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
