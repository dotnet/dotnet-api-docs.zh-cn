<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b5e75653f323e9b6adcd8889b9be3417095a5e8" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83883573" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueType extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为值类型提供基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> 用更适当的值类型实现来重写 <xref:System.Object> 中的虚拟方法。 另请参阅 <xref:System.Enum>，它们继承自 <xref:System.ValueType>。  
  
 数据类型被分隔为值类型和引用类型。 值类型要么是堆栈分配，要么在结构中以内联方式分配。 引用类型为堆分配。 引用类型和值类型都派生自最终的基类 <xref:System.Object>。 如果需要值类型的行为与对象类似，则会在堆上分配值类型类似于引用对象的包装，并将值类型的值复制到其中。 包装已标记，因此系统知道它包含值类型。 此过程称为装箱，相反的过程称为取消装箱。 装箱和取消装箱允许任何类型被视为对象。  
  
 尽管 <xref:System.ValueType> 是值类型的隐式基类，但你无法创建直接从 <xref:System.ValueType> 继承的类。 相反，单个编译器提供语言关键字或构造（如 `struct` C#和 `Structure`...`End Structure` 在 Visual Basic）支持创建值类型。  
  
 除了作为 .NET Framework 中值类型的基类以外，<xref:System.ValueType> 结构通常不会直接在代码中使用。 但是，它可用作方法调用中的参数，以将可能的自变量限制为值类型而不是所有对象，或者允许方法处理许多不同的值类型。 下面的示例说明 <xref:System.ValueType> 如何防止引用类型被传递给方法。 它定义了一个名为 `Utility` 的类，其中包含四个方法： `IsNumeric`，指示其参数是否为数字;`IsInteger`，指示其参数是否为整数;`IsFloat`，指示其参数是否为浮点数;和 `Compare`，它指示两个数值之间的关系。 在每种情况下，方法参数均为类型 <xref:System.ValueType>，并阻止引用类型传递给方法。  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 下面的示例演示对 `Utility` 类的方法的调用。  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ValueType" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前实例比较的对象。</param>
        <summary>指示此实例和指定的对象是否相等。</summary>
        <returns>如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> 方法将重写 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>，并为 .NET Framework 中的所有值类型提供值相等性的默认实现。  
  
 默认实现在当前实例的每个字段上调用 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>，`obj` 并在所有字段相等时返回 `true`。
  
> [!TIP]
>  特别是，如果您的值类型包含属于引用类型的字段，则应重写 <xref:System.ValueType.Equals%28System.Object%29> 方法。 这可以提高性能，并使你能够更好地表示该类型的相等性含义。  
  
## <a name="notes-for-the-wrt"></a>[!INCLUDE[wrt](~/includes/wrt-md.md)] 的说明  
 在 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构上调用 <xref:System.ValueType.Equals%2A> 方法时，它为不重写 <xref:System.ValueType.Equals%2A>的值类型提供默认行为。 这是 .NET Framework 为 [!INCLUDE[wrt](~/includes/wrt-md.md)] 提供的支持的一部分（请参阅[Windows 应用商店应用和 Windows 运行时 .NET Framework 支持](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime)）。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构不能重写 <xref:System.ValueType.Equals%2A>，即使它们是用C#或 Visual Basic 编写的，因为它们不能有方法。 （此外，[!INCLUDE[wrt](~/includes/wrt-md.md)] 中的结构不会继承 <xref:System.ValueType>。）但是，当你在C#或 Visual Basic 代码中使用它们时，它们看起来有 <xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>和 <xref:System.ValueType.GetHashCode%2A> 方法，而 .NET Framework 提供这些方法的默认行为。  
  
   
  
## Examples  
 下面的示例演示如何使用派生值类型重写 <xref:System.ValueType.Equals%2A> 方法。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns>32 位有符号整数，它是此实例的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A> 方法适用于从 <xref:System.ValueType>派生的类型。 派生类型的一个或多个字段用于计算返回值。 如果调用派生类型的 `GetHashCode` 方法，则返回值不可能适合用作哈希表中的键。 此外，如果其中一个或多个字段的值发生更改，则返回值可能不适合用作哈希表中的键。 在这两种情况下，请考虑编写您自己的 <xref:System.ValueType.GetHashCode%2A> 方法的实现，该方法更密切地表示该类型的哈希代码的概念。  
  
 有关详情，请参阅<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 和<xref:System.Collections.Hashtable?displayProperty=nameWithType>。  
  
## <a name="notes-for-the-wrt"></a>[!INCLUDE[wrt](~/includes/wrt-md.md)] 的说明  
 在 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构上调用 <xref:System.ValueType.GetHashCode%2A> 方法时，它为不重写 <xref:System.ValueType.GetHashCode%2A>的值类型提供默认行为。 这是 .NET Framework 为 [!INCLUDE[wrt](~/includes/wrt-md.md)] 提供的支持的一部分（请参阅[Windows 应用商店应用和 Windows 运行时 .NET Framework 支持](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime)）。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构不能重写 <xref:System.ValueType.GetHashCode%2A>，即使它们是用C#或 Visual Basic 编写的，因为它们不能有方法。 （此外，[!INCLUDE[wrt](~/includes/wrt-md.md)] 中的结构不会继承 <xref:System.ValueType>。）但是，当你在C#或 Visual Basic 代码中使用它们时，它们看起来有 <xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>和 <xref:System.ValueType.GetHashCode%2A> 方法，而 .NET Framework 提供这些方法的默认行为。  
  
   
  
## Examples  
 下面的示例演示如何使用派生值类型重写 <xref:System.ValueType.GetHashCode%2A> 方法。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的完全限定类型名称。</summary>
        <returns>完全限定类型名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 方法将重写 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 方法，并为值类型提供 `ToString` 方法的默认实现。 （值类型是中C#由 `struct` 关键字定义的类型，以及 Visual Basic 中的 `Structure`...`End Structure` 构造。）但在功能上，实现与 <xref:System.Object.ToString%2A?displayProperty=nameWithType>的实现相同：方法返回完全限定的类型名称。  
  
 中C#由 `struct` 关键字定义的值类型和 Visual Basic 中的 `Structure``End Structure` 构造通常会重写 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 方法，以提供更有意义的值类型字符串表示形式。 以下示例演示了差异。 它定义了两个值类型，`EmployeeA` 和 `EmployeeB`，创建每个值类型，并调用其 `ToString` 方法。 由于 `EmployeeA` 的结构不会重写 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 方法，因此它只显示完全限定的类型名称。 另一方面，`EmployeeB.ToString` 方法提供有关该对象的有用信息。  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 请注意，尽管枚举类型也是值类型，但它们派生自 <xref:System.Enum> 类，后者会重写 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>。  
  
## <a name="notes-for-the-windows-runtime"></a>Windows 运行时的说明  
 在 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构上调用 <xref:System.ValueType.ToString%2A> 方法时，它为不重写 <xref:System.ValueType.ToString%2A>的值类型提供默认行为。 这是 .NET Framework 为 [!INCLUDE[wrt](~/includes/wrt-md.md)] 提供的支持的一部分（请参阅[Windows 应用商店应用和 Windows 运行时 .NET Framework 支持](/dotnet/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime)）。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构不能重写 <xref:System.ValueType.ToString%2A>，即使它们是用C#或 Visual Basic 编写的，因为它们不能有方法。 （此外，[!INCLUDE[wrt](~/includes/wrt-md.md)] 中的结构不会继承 <xref:System.ValueType>。）但是，当你在C#或 Visual Basic 代码中使用它们时，它们看起来有 <xref:System.ValueType.ToString%2A>、<xref:System.ValueType.Equals%2A>和 <xref:System.ValueType.GetHashCode%2A> 方法，而 .NET Framework 提供这些方法的默认行为。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
