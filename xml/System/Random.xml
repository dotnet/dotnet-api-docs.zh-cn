<Type Name="Random" FullName="System.Random">
  <Metadata><Meta Name="ms.openlocfilehash" Value="916c65c91bc8149c39c4b831ff081c57573e821e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89808630" /></Metadata><TypeSignature Language="C#" Value="public class Random" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Random extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Random" />
  <TypeSignature Language="VB.NET" Value="Public Class Random" />
  <TypeSignature Language="C++ CLI" Value="public ref class Random" />
  <TypeSignature Language="F#" Value="type Random = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Random extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.Extensions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="74d66-101">表示伪随机数生成器，这是一种能够产生满足某些随机性统计要求的数字序列的算法。</span><span class="sxs-lookup"><span data-stu-id="74d66-101">Represents a pseudo-random number generator, which is an algorithm that produces a sequence of numbers that meet certain statistical requirements for randomness.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-102">伪随机数的选择与有限的一组数字相同。</span><span class="sxs-lookup"><span data-stu-id="74d66-102">Pseudo-random numbers are chosen with equal probability from a finite set of numbers.</span></span> <span data-ttu-id="74d66-103">选择的数字不是完全随机的，因为使用数学算法来选择它们，但它们在实际情况下是完全随机的。</span><span class="sxs-lookup"><span data-stu-id="74d66-103">The chosen numbers are not completely random because a mathematical algorithm is used to select them, but they are sufficiently random for practical purposes.</span></span> <span data-ttu-id="74d66-104">类的当前实现 <xref:System.Random> 基于 Donald Knuth 的 subtractive 随机数生成器算法的修改版本。</span><span class="sxs-lookup"><span data-stu-id="74d66-104">The current implementation of the <xref:System.Random> class is based on a modified version of Donald E. Knuth's subtractive random number generator algorithm.</span></span> <span data-ttu-id="74d66-105">有关详细信息，请参阅 d。</span><span class="sxs-lookup"><span data-stu-id="74d66-105">For more information, see D. E.</span></span> <span data-ttu-id="74d66-106">Knuth.</span><span class="sxs-lookup"><span data-stu-id="74d66-106">Knuth.</span></span> <span data-ttu-id="74d66-107">*计算机编程（卷2： Seminumerical 算法）的艺术*。</span><span class="sxs-lookup"><span data-stu-id="74d66-107">*The Art of Computer Programming, Volume 2: Seminumerical Algorithms*.</span></span> <span data-ttu-id="74d66-108">Addison-Wesley，读取，MA，第三版，1997。</span><span class="sxs-lookup"><span data-stu-id="74d66-108">Addison-Wesley, Reading, MA, third edition, 1997.</span></span>  
  
 <span data-ttu-id="74d66-109">若要生成加密的安全随机数（如适合创建随机密码的随机数），请使用 <xref:System.Security.Cryptography.RNGCryptoServiceProvider> 类或从派生类 <xref:System.Security.Cryptography.RandomNumberGenerator?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-109">To generate a cryptographically secure random number, such as one that's suitable for creating a random password, use the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class or derive a class from <xref:System.Security.Cryptography.RandomNumberGenerator?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="74d66-110">本主题内容：</span><span class="sxs-lookup"><span data-stu-id="74d66-110">In this topic:</span></span>  
  
 <span data-ttu-id="74d66-111">[实例化随机数生成器](#Instantiate) </span><span class="sxs-lookup"><span data-stu-id="74d66-111">[Instantiating the random number generator](#Instantiate) </span></span>  
 <span data-ttu-id="74d66-112">[避免多个实例化](#Multiple) </span><span class="sxs-lookup"><span data-stu-id="74d66-112">[Avoiding multiple instantiations](#Multiple) </span></span>  
 <span data-ttu-id="74d66-113">[System.web 类和线程安全](#ThreadSafety) </span><span class="sxs-lookup"><span data-stu-id="74d66-113">[The System.Random class and thread safety](#ThreadSafety) </span></span>  
 <span data-ttu-id="74d66-114">[生成不同类型的随机数](#Functionality) </span><span class="sxs-lookup"><span data-stu-id="74d66-114">[Generating different types of random numbers](#Functionality) </span></span>  
 <span data-ttu-id="74d66-115">[替换自己的算法](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="74d66-115">[Substituting your own algorithm](#Overriding) </span></span>  
 <span data-ttu-id="74d66-116">[如何使用 "系统随机 ..."](#Operations) </span><span class="sxs-lookup"><span data-stu-id="74d66-116">[How do you use System.Random to…](#Operations) </span></span>  
 [<span data-ttu-id="74d66-117">检索相同的随机值序列</span><span class="sxs-lookup"><span data-stu-id="74d66-117">Retrieve the same sequence of random values</span></span>](#Same)  
 [<span data-ttu-id="74d66-118">检索随机值的唯一序列</span><span class="sxs-lookup"><span data-stu-id="74d66-118">Retrieve unique sequences of random values</span></span>](#Unique)  
 [<span data-ttu-id="74d66-119">检索指定范围内的整数</span><span class="sxs-lookup"><span data-stu-id="74d66-119">Retrieve integers in a specified range</span></span>](#Range)  
 [<span data-ttu-id="74d66-120">检索指定位数的整数</span><span class="sxs-lookup"><span data-stu-id="74d66-120">Retrieve integers with a specified number of digits</span></span>](#Digits)  
 [<span data-ttu-id="74d66-121">检索指定范围内的浮点值</span><span class="sxs-lookup"><span data-stu-id="74d66-121">Retrieve floating-point values in a specified range</span></span>](#Floats)  
 [<span data-ttu-id="74d66-122">生成随机布尔值</span><span class="sxs-lookup"><span data-stu-id="74d66-122">Generate random Boolean values</span></span>](#Boolean)  
 [<span data-ttu-id="74d66-123">生成随机的64位整数</span><span class="sxs-lookup"><span data-stu-id="74d66-123">Generate random 64-bit integers</span></span>](#Long)  
 [<span data-ttu-id="74d66-124">检索指定范围内的字节</span><span class="sxs-lookup"><span data-stu-id="74d66-124">Retrieve bytes in a specified range</span></span>](#Bytes)  
 [<span data-ttu-id="74d66-125">随机检索数组或集合中的元素</span><span class="sxs-lookup"><span data-stu-id="74d66-125">Retrieve an element from an array or collection at random</span></span>](#Array)  
 [<span data-ttu-id="74d66-126">从数组或集合中检索唯一元素</span><span class="sxs-lookup"><span data-stu-id="74d66-126">Retrieve a unique element from an array or collection</span></span>](#UniqueArray)  
  
<a name="Instantiate"></a>   
## <a name="instantiating-the-random-number-generator"></a><span data-ttu-id="74d66-127">实例化随机数生成器</span><span class="sxs-lookup"><span data-stu-id="74d66-127">Instantiating the random number generator</span></span>  
 <span data-ttu-id="74d66-128">通过向类构造函数提供) 伪随机数生成算法开始值 (的种子值来实例化随机数生成器 <xref:System.Random.%23ctor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-128">You instantiate the random number generator by providing a seed value (a starting value for the pseudo-random number generation algorithm) to a <xref:System.Random.%23ctor%2A> class constructor.</span></span>  <span data-ttu-id="74d66-129">可以显式或隐式提供种子值：</span><span class="sxs-lookup"><span data-stu-id="74d66-129">You can supply the seed value either explicitly or implicitly:</span></span>  
  
-   <span data-ttu-id="74d66-130"><xref:System.Random.%23ctor%28System.Int32%29>构造函数使用您提供的显式种子值。</span><span class="sxs-lookup"><span data-stu-id="74d66-130">The <xref:System.Random.%23ctor%28System.Int32%29> constructor uses an explicit seed value that you supply.</span></span>  
  
-   <span data-ttu-id="74d66-131"><xref:System.Random.%23ctor>构造函数使用默认种子值。</span><span class="sxs-lookup"><span data-stu-id="74d66-131">The <xref:System.Random.%23ctor> constructor uses the default seed value.</span></span> <span data-ttu-id="74d66-132">这是实例化随机数生成器最常见的方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-132">This is the most common way of instantiating the random number generator.</span></span>  
  
 <span data-ttu-id="74d66-133">在 .NET Framework 中，默认种子值取决于时间。</span><span class="sxs-lookup"><span data-stu-id="74d66-133">In .NET Framework, the default seed value is time-dependent.</span></span> <span data-ttu-id="74d66-134">在 .NET Core 中，默认种子值由线程静态伪随机数生成器生成。</span><span class="sxs-lookup"><span data-stu-id="74d66-134">In .NET Core, the default seed value is produced by the thread-static, pseudo-random number generator.</span></span>
  
 <span data-ttu-id="74d66-135">如果对单独的对象使用相同的种子 <xref:System.Random> ，则它们将生成相同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-135">If the same seed is used for separate <xref:System.Random> objects, they will generate the same series of random numbers.</span></span> <span data-ttu-id="74d66-136">这对于创建处理随机值的测试套件或用于重放从随机数派生其数据的游戏很有用。</span><span class="sxs-lookup"><span data-stu-id="74d66-136">This can be useful for creating a test suite that processes random values, or for replaying games that derive their data from random numbers.</span></span> <span data-ttu-id="74d66-137">但请注意， <xref:System.Random> 在不同版本的 .NET Framework 下运行的进程中的对象可能返回不同序列的随机数字，即使它们是用相同的种子值实例化的，也是如此。</span><span class="sxs-lookup"><span data-stu-id="74d66-137">However, note that <xref:System.Random> objects in processes running under different versions of the .NET Framework may return different series of random numbers even if they're instantiated with identical seed values.</span></span>  
  
 <span data-ttu-id="74d66-138">若要生成不同的随机数序列，可以使种子值依赖于时间，从而使用的每个新实例生成不同的序列 <xref:System.Random> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-138">To produce different sequences of random numbers, you can make the seed value time-dependent, thereby producing a different series with each new instance of <xref:System.Random>.</span></span> <span data-ttu-id="74d66-139">参数化 <xref:System.Random.%23ctor%28System.Int32%29> 构造函数可以根据 <xref:System.Int32> 当前时间中的计时周期数来获取值，而无参数 <xref:System.Random.%23ctor> 构造函数使用系统时钟生成其种子值。</span><span class="sxs-lookup"><span data-stu-id="74d66-139">The parameterized <xref:System.Random.%23ctor%28System.Int32%29> constructor can take an <xref:System.Int32> value based on the number of ticks in the current time, whereas the parameterless <xref:System.Random.%23ctor> constructor uses the system clock to generate its seed value.</span></span> <span data-ttu-id="74d66-140">但是，仅在 .NET Framework 上，由于时钟具有有限的分辨率，因此使用无参数构造函数来连续创建不同的 <xref:System.Random> 对象会创建随机数字生成器，这些生成器生成相同的随机数序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-140">However, on the .NET Framework only, because the clock has finite resolution, using the parameterless constructor to create different <xref:System.Random> objects in close succession creates random number generators that produce identical sequences of random numbers.</span></span> <span data-ttu-id="74d66-141">下面的示例演示如何 <xref:System.Random> 在 .NET Framework 应用程序中连续实例化的两个对象生成相同的随机数序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-141">The following example illustrates how two <xref:System.Random> objects that are instantiated in close succession in a .NET Framework application generate an identical series of random numbers.</span></span> <span data-ttu-id="74d66-142">在大多数 Windows 系统上，在 <xref:System.Random> 15 毫秒内创建的对象有可能具有相同的种子值。</span><span class="sxs-lookup"><span data-stu-id="74d66-142">On most Windows systems, <xref:System.Random> objects created within 15 milliseconds of one another are likely to have identical seed values.</span></span>  
  
 [!code-cpp[System.Random#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/random1.cpp#1)]
 [!code-csharp-interactive[System.Random#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/Random1.cs#1)]
 [!code-vb[System.Random#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/Random1.vb#1)]  
  
<span data-ttu-id="74d66-143">若要避免此问题，请创建单个 <xref:System.Random> 对象，而不是多个对象。</span><span class="sxs-lookup"><span data-stu-id="74d66-143">To avoid this problem, create a single <xref:System.Random> object instead of multiple objects.</span></span> <span data-ttu-id="74d66-144">请注意， `Random` .Net Core 中的类没有此限制。</span><span class="sxs-lookup"><span data-stu-id="74d66-144">Note that the `Random` class in .NET Core does not have this limitation.</span></span>
  
<a name="Multiple"></a>   
## <a name="avoiding-multiple-instantiations"></a><span data-ttu-id="74d66-145">避免多个实例化</span><span class="sxs-lookup"><span data-stu-id="74d66-145">Avoiding multiple instantiations</span></span>  
 <span data-ttu-id="74d66-146">在 .NET Framework 上，在紧凑循环中初始化两个随机数生成器，或在快速连续创建两个随机数生成器，它们可以生成相同的随机数序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-146">On the .NET Framework, initializing two random number generators in a tight loop or in rapid succession creates two random number generators that can produce identical sequences of random numbers.</span></span> <span data-ttu-id="74d66-147">在大多数情况下，这并不是开发人员的意图，可能会导致性能问题，因为实例化和初始化随机数生成器的过程相对较高。</span><span class="sxs-lookup"><span data-stu-id="74d66-147">In most cases, this is not the developer's intent and can lead to performance issues, because instantiating and initializing a random number generator is a relatively expensive process.</span></span>  
  
 <span data-ttu-id="74d66-148">若要提高性能，并避免无意中创建生成相同数值序列的单独随机数生成器，建议您创建一个 <xref:System.Random> 对象，以便在一段时间内生成许多随机数，而不是创建新的 <xref:System.Random> 对象以生成一个随机数。</span><span class="sxs-lookup"><span data-stu-id="74d66-148">Both to improve performance and to avoid inadvertently creating separate random number generators that generate identical numeric sequences, we recommend that you create one <xref:System.Random> object to generate many random numbers over time, instead of creating new <xref:System.Random> objects to generate one random number.</span></span>  
  
 <span data-ttu-id="74d66-149">但是， <xref:System.Random> 该类不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="74d66-149">However, the <xref:System.Random> class isn't thread safe.</span></span> <span data-ttu-id="74d66-150">如果 <xref:System.Random> 从多个线程调用方法，请遵循下一节中所述的准则。</span><span class="sxs-lookup"><span data-stu-id="74d66-150">If you call <xref:System.Random> methods from multiple threads, follow the guidelines discussed in the next section.</span></span>  
  
<a name="ThreadSafety"></a>   
## <a name="the-systemrandom-class-and-thread-safety"></a><span data-ttu-id="74d66-151">System.web 类和线程安全</span><span class="sxs-lookup"><span data-stu-id="74d66-151">The System.Random class and thread safety</span></span>  
 <span data-ttu-id="74d66-152"><xref:System.Random>建议您创建一个 <xref:System.Random> 实例来生成应用程序所需的所有随机数，而不是实例化单个对象。</span><span class="sxs-lookup"><span data-stu-id="74d66-152">Instead of instantiating individual <xref:System.Random> objects, we recommend that you create a single <xref:System.Random> instance to generate all the random numbers needed by your app.</span></span> <span data-ttu-id="74d66-153">但是， <xref:System.Random> 对象不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="74d66-153">However, <xref:System.Random> objects are not thread safe.</span></span> <span data-ttu-id="74d66-154">如果你的应用程序 <xref:System.Random> 从多个线程调用方法，则必须使用同步对象来确保每次只有一个线程可以访问随机数生成器。</span><span class="sxs-lookup"><span data-stu-id="74d66-154">If your app calls <xref:System.Random> methods from multiple threads, you must use a synchronization object to ensure that only one thread can access the random number generator at a time.</span></span> <span data-ttu-id="74d66-155">如果不确保以 <xref:System.Random> 线程安全的方式访问对象，则调用返回随机数的方法将返回0。</span><span class="sxs-lookup"><span data-stu-id="74d66-155">If you don't ensure that the <xref:System.Random> object is accessed in a thread-safe way, calls to methods that return random numbers return 0.</span></span>  
  
 <span data-ttu-id="74d66-156">下面的示例使用 c # [Lock 语句](/dotnet/csharp/language-reference/keywords/lock-statement) 和 Visual Basic [SyncLock 语句](/dotnet/visual-basic/language-reference/statements/synclock-statement) 来确保11个线程以线程安全的方式访问单个随机数生成器。</span><span class="sxs-lookup"><span data-stu-id="74d66-156">The following example uses the C# [lock Statement](/dotnet/csharp/language-reference/keywords/lock-statement) and the Visual Basic [SyncLock statement](/dotnet/visual-basic/language-reference/statements/synclock-statement) to ensure that a single random number generator is accessed by 11 threads in a thread-safe manner.</span></span> <span data-ttu-id="74d66-157">每个线程都会生成2000000的随机数字，计算生成的随机数数并计算它们的总和，然后在完成执行后更新所有线程的总数。</span><span class="sxs-lookup"><span data-stu-id="74d66-157">Each thread generates 2 million random numbers, counts the number of random numbers generated and calculates their sum, and then updates the totals for all threads when it finishes executing.</span></span>  
  
 [!code-cpp[System.Random#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/threadsafeex1.cpp#3)]
 [!code-csharp[System.Random#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/threadsafeex1.cs#3)]
 [!code-vb[System.Random#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/threadsafeex1.vb#3)]  
  
 <span data-ttu-id="74d66-158">该示例通过以下方式确保线程安全：</span><span class="sxs-lookup"><span data-stu-id="74d66-158">The example ensures thread-safety in the following ways:</span></span>  
  
-   <span data-ttu-id="74d66-159"><xref:System.ThreadStaticAttribute>特性用于定义线程本地变量，这些变量跟踪每个线程生成的随机数总数及其总和。</span><span class="sxs-lookup"><span data-stu-id="74d66-159">The <xref:System.ThreadStaticAttribute> attribute is used to define thread-local variables that track the total number of random numbers generated and their sum for each thread.</span></span>  
  
-   <span data-ttu-id="74d66-160">Lock (`lock` c # 中的语句和 `SyncLock` Visual Basic) 中的语句，来保护对所有线程上生成的所有随机数的总数和总和的变量的访问。</span><span class="sxs-lookup"><span data-stu-id="74d66-160">A lock (the `lock` statement in C# and the `SyncLock` statement in Visual Basic) protects access to the variables for the total count and sum of all random numbers generated on all threads.</span></span>  
  
-   <span data-ttu-id="74d66-161">使用对象) 的信号量 (， <xref:System.Threading.CountdownEvent> 以确保在所有其他线程都完成执行之前，主线程阻塞。</span><span class="sxs-lookup"><span data-stu-id="74d66-161">A semaphore (the <xref:System.Threading.CountdownEvent> object) is used to ensure that the main thread blocks until all other threads complete execution.</span></span>  
  
-   <span data-ttu-id="74d66-162">该示例通过确定两次对随机数生成方法的连续调用是否返回0来检查随机数生成器是否已损坏。</span><span class="sxs-lookup"><span data-stu-id="74d66-162">The example checks whether the random number generator has become corrupted by determining whether two consecutive calls to random number generation methods return 0.</span></span> <span data-ttu-id="74d66-163">如果检测到损坏，此示例将使用 <xref:System.Threading.CancellationTokenSource> 对象来指示应取消所有线程。</span><span class="sxs-lookup"><span data-stu-id="74d66-163">If corruption is detected, the example uses the <xref:System.Threading.CancellationTokenSource> object to signal that all threads should be canceled.</span></span>  
  
-   <span data-ttu-id="74d66-164">在生成每个随机数之前，每个线程都会检查对象的状态 <xref:System.Threading.CancellationToken> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-164">Before generating each random number, each thread checks the state of the <xref:System.Threading.CancellationToken> object.</span></span> <span data-ttu-id="74d66-165">如果请求取消，则该示例调用 <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> 方法来取消线程。</span><span class="sxs-lookup"><span data-stu-id="74d66-165">If cancellation is requested, the example calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to cancel the thread.</span></span>  
  
 <span data-ttu-id="74d66-166">下面的示例与第一个示例相同，只不过它使用 <xref:System.Threading.Tasks.Task> 对象和 lambda 表达式而不是 <xref:System.Threading.Thread> 对象。</span><span class="sxs-lookup"><span data-stu-id="74d66-166">The following example is identical to the first, except that it uses a <xref:System.Threading.Tasks.Task> object and a lambda expression instead of <xref:System.Threading.Thread> objects.</span></span>  
  
 [!code-csharp[System.Random#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/threadsafeex2.cs#4)]
 [!code-vb[System.Random#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/threadsafeex2.vb#4)]  
  
 <span data-ttu-id="74d66-167">它与第一个示例在以下方面有所不同：</span><span class="sxs-lookup"><span data-stu-id="74d66-167">It differs from the first example in the following ways:</span></span>  
  
-   <span data-ttu-id="74d66-168">用于跟踪生成的随机数数量及其在每个任务中的总和的变量对于任务而言是本地的，因此无需使用 <xref:System.ThreadStaticAttribute> 特性。</span><span class="sxs-lookup"><span data-stu-id="74d66-168">The variables to keep track of the number of random numbers generated and their sum in each task are local to the task, so there is no need to use the <xref:System.ThreadStaticAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="74d66-169">静态 <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> 方法用于确保主线程在所有任务完成之前未完成。</span><span class="sxs-lookup"><span data-stu-id="74d66-169">The static <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method is used to ensure that the main thread doesn't complete before all tasks have finished.</span></span> <span data-ttu-id="74d66-170">不需要 <xref:System.Threading.CountdownEvent> 对象。</span><span class="sxs-lookup"><span data-stu-id="74d66-170">There is no need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
-   <span data-ttu-id="74d66-171">任务取消导致的异常在方法中出现 <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-171">The exception that results from task cancellation is surfaced in the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="74d66-172">在上面的示例中，它由每个线程处理。</span><span class="sxs-lookup"><span data-stu-id="74d66-172">In the previous example, it is handled by each thread.</span></span>  
  
<a name="Functionality"></a>   
## <a name="generating-different-types-of-random-numbers"></a><span data-ttu-id="74d66-173">生成不同类型的随机数</span><span class="sxs-lookup"><span data-stu-id="74d66-173">Generating different types of random numbers</span></span>  
 <span data-ttu-id="74d66-174">随机数生成器提供了一些方法，使您可以生成以下类型的随机数：</span><span class="sxs-lookup"><span data-stu-id="74d66-174">The random number generator provides methods that let you generate the following kinds of random numbers:</span></span>  
  
-   <span data-ttu-id="74d66-175">一系列 <xref:System.Byte> 值。</span><span class="sxs-lookup"><span data-stu-id="74d66-175">A series of <xref:System.Byte> values.</span></span> <span data-ttu-id="74d66-176">通过将初始化为要方法返回给方法的元素数的数组，来确定字节值的数目 <xref:System.Random.NextBytes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-176">You determine the number of byte values by passing an array initialized to the number of elements you want the method to return to the <xref:System.Random.NextBytes%2A> method.</span></span> <span data-ttu-id="74d66-177">下面的示例生成20个字节。</span><span class="sxs-lookup"><span data-stu-id="74d66-177">The following example generates 20 bytes.</span></span>  
  
     [!code-cpp[System.Random#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextbytes1.cpp#5)]
     [!code-csharp-interactive[System.Random#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextbytes1.cs#5)]
     [!code-vb[System.Random#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextbytes1.vb#5)]  
  
-   <span data-ttu-id="74d66-178">一个整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-178">A single integer.</span></span> <span data-ttu-id="74d66-179">您可以通过调用方法，选择是否希望从0到最大值 (-1) 的整数，或者通过调用方法，从 <xref:System.Int32.MaxValue?displayProperty=nameWithType> <xref:System.Random.Next> 0 到指定值之间的整数， <xref:System.Random.Next%28System.Int32%29> 或者通过调用方法来选择值范围内的整数 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-179">You can choose whether you want an integer from 0 to a maximum value (<xref:System.Int32.MaxValue?displayProperty=nameWithType> - 1) by calling the <xref:System.Random.Next> method, an integer between 0 and a specific value by calling the <xref:System.Random.Next%28System.Int32%29> method, or an integer within a range of values by calling the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="74d66-180">在参数化重载中，指定的最大值是独占的;也就是说，生成的实际最大数目小于指定值。</span><span class="sxs-lookup"><span data-stu-id="74d66-180">In the parameterized overloads, the specified maximum value is exclusive; that is, the actual maximum number generated is one less than the specified value.</span></span>  
  
     <span data-ttu-id="74d66-181">下面的示例调用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 方法以在-10 和10之间生成10个随机数。</span><span class="sxs-lookup"><span data-stu-id="74d66-181">The following example calls the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method to generate 10 random numbers between -10 and 10.</span></span> <span data-ttu-id="74d66-182">请注意，方法的第二个参数指定方法返回的随机值的范围的上限。</span><span class="sxs-lookup"><span data-stu-id="74d66-182">Note that the second argument to the method specifies the exclusive upper bound of the range of random values returned by the method.</span></span> <span data-ttu-id="74d66-183">换言之，该方法可以返回的最大整数是小于此值的整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-183">In other words, the largest integer that the method can return is one less than this value.</span></span>  
  
     [!code-cpp[System.Random#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextex1.cpp#6)]
     [!code-csharp-interactive[System.Random#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextex1.cs#6)]
     [!code-vb[System.Random#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextex1.vb#6)]  
  
-   <span data-ttu-id="74d66-184">通过调用方法，从0.0 到小于1.0 的单个浮点值 <xref:System.Random.NextDouble%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-184">A single floating-point value from 0.0 to less than 1.0 by calling the <xref:System.Random.NextDouble%2A> method.</span></span> <span data-ttu-id="74d66-185">方法返回的随机数的上限上限为1，因此它的实际上限为0.99999999999999978。</span><span class="sxs-lookup"><span data-stu-id="74d66-185">The exclusive upper bound of the random number returned by the method is 1, so its actual upper bound is 0.99999999999999978.</span></span> <span data-ttu-id="74d66-186">下面的示例生成10个随机浮点数。</span><span class="sxs-lookup"><span data-stu-id="74d66-186">The following example generates 10 random floating-point numbers.</span></span>  
  
     [!code-cpp[System.Random#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextdoubleex1.cpp#7)]
     [!code-csharp-interactive[System.Random#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextdoubleex1.cs#7)]
     [!code-vb[System.Random#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextdoubleex1.vb#7)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="74d66-187"><xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法允许您指定返回的随机数的范围。</span><span class="sxs-lookup"><span data-stu-id="74d66-187">The <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method allows you to specify the range of the returned random number.</span></span> <span data-ttu-id="74d66-188">但是， `maxValue` 用于指定上限返回数字的参数是一个独占的，而不是包含的值。</span><span class="sxs-lookup"><span data-stu-id="74d66-188">However, the `maxValue` parameter, which specifies the upper range returned number, is an exclusive, not an inclusive, value.</span></span> <span data-ttu-id="74d66-189">这意味着方法调用 `Next(0, 100)` 返回0到99之间的值，而不是介于0和100之间。</span><span class="sxs-lookup"><span data-stu-id="74d66-189">This means that the method call `Next(0, 100)` returns a value between 0 and 99, and not between 0 and 100.</span></span>  
  
 <span data-ttu-id="74d66-190">你还可以使用 <xref:System.Random> 类来执行此类任务，如生成随机的维 [值](#Boolean)、生成随机 [浮点值（范围不是0到 1](#Floats)）、生成 [随机64位整数](#Long)以及 [从数组或集合中随机检索唯一元素](#UniqueArray)。</span><span class="sxs-lookup"><span data-stu-id="74d66-190">You can also use the <xref:System.Random> class for such tasks as generating [random T:System.Boolean values](#Boolean), generating [random floating point values with a range other than 0 to 1](#Floats), generating [random 64-bit integers](#Long), and [randomly retrieving a unique element from an array or collection](#UniqueArray).</span></span> <span data-ttu-id="74d66-191">对于这些任务和其他常见任务，请参阅 [如何使用系统](#Operations)</span><span class="sxs-lookup"><span data-stu-id="74d66-191">For these and other common tasks, see the [How do you use System.Random to…](#Operations)</span></span> <span data-ttu-id="74d66-192">部分。</span><span class="sxs-lookup"><span data-stu-id="74d66-192">section.</span></span>  
  
<a name="Overriding"></a>   
## <a name="substituting-your-own-algorithm"></a><span data-ttu-id="74d66-193">替换自己的算法</span><span class="sxs-lookup"><span data-stu-id="74d66-193">Substituting your own algorithm</span></span>  
 <span data-ttu-id="74d66-194">可以通过从 <xref:System.Random> 类继承并提供随机数生成算法来实现自己的随机数生成器。</span><span class="sxs-lookup"><span data-stu-id="74d66-194">You can implement your own random number generator by inheriting from the <xref:System.Random> class and supplying your random number generation algorithm.</span></span> <span data-ttu-id="74d66-195">若要提供自己的算法，必须重写 <xref:System.Random.Sample%2A> 实现随机数生成算法的方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-195">To supply your own algorithm, you must override the <xref:System.Random.Sample%2A> method, which implements the random number generation algorithm.</span></span> <span data-ttu-id="74d66-196">还应重写 <xref:System.Random.Next> 、 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 和方法， <xref:System.Random.NextBytes%2A> 以确保它们调用重写的 <xref:System.Random.Sample%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-196">You should also override the <xref:System.Random.Next>, <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>, and <xref:System.Random.NextBytes%2A> methods to ensure that they call your overridden <xref:System.Random.Sample%2A> method.</span></span> <span data-ttu-id="74d66-197">不需要重写 <xref:System.Random.Next%28System.Int32%29> 和 <xref:System.Random.NextDouble%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-197">You don't have to override the <xref:System.Random.Next%28System.Int32%29> and <xref:System.Random.NextDouble%2A> methods.</span></span>  
  
 <span data-ttu-id="74d66-198">有关从 <xref:System.Random> 类派生并修改其默认伪随机数生成器的示例，请参阅 <xref:System.Random.Sample%2A> 引用页。</span><span class="sxs-lookup"><span data-stu-id="74d66-198">For an example that derives from the <xref:System.Random> class and modifies its default pseudo-random number generator, see the <xref:System.Random.Sample%2A> reference page.</span></span>  
  
<a name="Operations"></a>   
## <a name="how-do-you-use-systemrandom-to"></a><span data-ttu-id="74d66-199">如何使用 "系统随机 ..."</span><span class="sxs-lookup"><span data-stu-id="74d66-199">How do you use System.Random to…</span></span>  
 <span data-ttu-id="74d66-200">以下部分讨论并为你可能想要在应用程序中使用随机数的一些方式提供示例代码。</span><span class="sxs-lookup"><span data-stu-id="74d66-200">The following sections discuss and provide sample code for some of the ways you might want to use random numbers in your app.</span></span>  
  
<a name="Same"></a>   
### <a name="retrieve-the-same-sequence-of-random-values"></a><span data-ttu-id="74d66-201">检索相同的随机值序列</span><span class="sxs-lookup"><span data-stu-id="74d66-201">Retrieve the same sequence of random values</span></span>  
 <span data-ttu-id="74d66-202">有时，您想要在软件测试方案和游戏游戏中生成相同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-202">Sometimes you want to generate the same sequence of random numbers in software test scenarios and in game playing.</span></span> <span data-ttu-id="74d66-203">用相同的随机数序列进行测试，可以检测回归和确认 bug 修复。</span><span class="sxs-lookup"><span data-stu-id="74d66-203">Testing with the same sequence of random numbers allows you to detect regressions and confirm bug fixes.</span></span> <span data-ttu-id="74d66-204">在游戏中使用相同的随机数字序列可重播以前的游戏。</span><span class="sxs-lookup"><span data-stu-id="74d66-204">Using the same sequence of random number in games allows you to replay previous games.</span></span>  
  
 <span data-ttu-id="74d66-205">可以通过向构造函数提供相同的种子值，生成相同的随机数字序列 <xref:System.Random.%23ctor%28System.Int32%29> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-205">You can generate the same sequence of random numbers by providing the same seed value to the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="74d66-206">种子值为伪随机数生成算法提供起始值。</span><span class="sxs-lookup"><span data-stu-id="74d66-206">The seed value provides a starting value for the pseudo-random number generation algorithm.</span></span> <span data-ttu-id="74d66-207">下面的示例使用100100作为用于实例化对象的任意种子值 <xref:System.Random> ，显示20个随机浮点值，并保留种子值。</span><span class="sxs-lookup"><span data-stu-id="74d66-207">The following example uses 100100 as an arbitrary seed value to instantiate the <xref:System.Random> object, displays 20 random floating-point values, and persists the seed value.</span></span> <span data-ttu-id="74d66-208">然后，它将还原种子值，实例化新的随机数生成器，并显示相同的20个随机浮点值。</span><span class="sxs-lookup"><span data-stu-id="74d66-208">It then restores the seed value, instantiates a new random number generator, and displays the same 20 random floating-point values.</span></span>  <span data-ttu-id="74d66-209">请注意，如果在 .NET Framework 的不同版本上运行，则该示例可能生成不同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-209">Note that the example may produce different sequences of random numbers if run on different versions of the .NET Framework.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/same1.cs" interactive="try-dotnet" id="Snippet12":::
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/same1.cpp" id="Snippet12":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/same1.vb" id="Snippet12":::
  
<a name="Unique"></a>   
### <a name="retrieve-unique-sequences-of-random-numbers"></a><span data-ttu-id="74d66-210">检索随机数的唯一序列</span><span class="sxs-lookup"><span data-stu-id="74d66-210">Retrieve unique sequences of random numbers</span></span>  
 <span data-ttu-id="74d66-211">向类的实例提供不同的种子值 <xref:System.Random> 会导致每个随机数生成器生成不同的值序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-211">Providing different seed values to instances of the <xref:System.Random> class causes each random number generator to produce a different sequence of values.</span></span> <span data-ttu-id="74d66-212">可以通过调用 <xref:System.Random.%23ctor%28System.Int32%29> 构造函数或通过调用构造函数隐式地提供种子值 <xref:System.Random.%23ctor> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-212">You can provide a seed value either explicitly by calling the <xref:System.Random.%23ctor%28System.Int32%29> constructor, or implicitly by calling the <xref:System.Random.%23ctor> constructor.</span></span> <span data-ttu-id="74d66-213">大多数开发人员调用使用系统时钟的无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="74d66-213">Most developers call the parameterless constructor, which uses the system clock.</span></span> <span data-ttu-id="74d66-214">下面的示例使用此方法实例化两个 <xref:System.Random> 实例。</span><span class="sxs-lookup"><span data-stu-id="74d66-214">The following example uses this approach to instantiate two <xref:System.Random> instances.</span></span> <span data-ttu-id="74d66-215">每个实例都显示一系列10个随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-215">Each instance displays a series of 10 random integers.</span></span>  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/unique.cpp" id="Snippet13":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/unique.cs" interactive="try-dotnet" id="Snippet13":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/unique.vb" id="Snippet13":::

 <span data-ttu-id="74d66-216">但是，由于其有限的解决方法，系统时钟不会检测到大约15毫秒的时间差异。</span><span class="sxs-lookup"><span data-stu-id="74d66-216">However, because of its finite resolution, the system clock doesn't detect time differences that are less than approximately 15 milliseconds.</span></span> <span data-ttu-id="74d66-217">因此，如果你的代码调用 <xref:System.Random.%23ctor> .NET Framework 上的重载来连续实例化两个 <xref:System.Random> 对象，则可能会无意中提供具有相同种子值的对象。</span><span class="sxs-lookup"><span data-stu-id="74d66-217">Therefore, if your code calls the <xref:System.Random.%23ctor> overload on the .NET Framework to instantiate two <xref:System.Random> objects in succession, you might inadvertently be providing the objects with identical seed values.</span></span> <span data-ttu-id="74d66-218"> (<xref:System.Random> .Net Core 中的类不存在此限制。 ) 在前面的示例中，请注释掉 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 方法调用，然后再次编译并运行该示例。</span><span class="sxs-lookup"><span data-stu-id="74d66-218">(The <xref:System.Random> class in .NET Core does not have this limitation.) To see this in the previous example, comment out the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method call, and compile and run the example again.</span></span>  
  
 <span data-ttu-id="74d66-219">为了防止发生这种情况，我们建议您实例化单个 <xref:System.Random> 对象，而不是多个对象。</span><span class="sxs-lookup"><span data-stu-id="74d66-219">To prevent this from happening, we recommend that you instantiate a single <xref:System.Random> object rather than multiple ones.</span></span> <span data-ttu-id="74d66-220">但是，由于 <xref:System.Random> 不是线程安全的，因此，如果从多个线程访问实例，则必须使用某个同步设备 <xref:System.Random> ; 有关详细信息，请参阅本主题前面 [的随机类和线程安全](#ThreadSafety) 。</span><span class="sxs-lookup"><span data-stu-id="74d66-220">However, since <xref:System.Random> isn't thread safe, you must use some synchronization device if you access a <xref:System.Random> instance from multiple threads; for more information, see [The Random class and thread safety](#ThreadSafety) earlier in this topic.</span></span> <span data-ttu-id="74d66-221">另外，还可以使用延迟机制（例如 <xref:System.Threading.Thread.Sleep%2A> 上一示例中使用的方法），以确保实例化的时间间隔超过15毫秒。</span><span class="sxs-lookup"><span data-stu-id="74d66-221">Alternately, you can use a delay mechanism, such as the <xref:System.Threading.Thread.Sleep%2A> method used in the previous example, to ensure that the instantiations occur more than 15 millisecond apart.</span></span>  
  
<a name="Range"></a>   
### <a name="retrieve-integers-in-a-specified-range"></a><span data-ttu-id="74d66-222">检索指定范围内的整数</span><span class="sxs-lookup"><span data-stu-id="74d66-222">Retrieve integers in a specified range</span></span>  
 <span data-ttu-id="74d66-223">您可以通过调用方法来检索指定范围内的整数 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> ，这允许您指定要随机数生成器返回的数字的下限和上限。</span><span class="sxs-lookup"><span data-stu-id="74d66-223">You can retrieve integers in a specified range by calling the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method, which lets you specify both the lower and the upper bound of the numbers you'd like the random number generator to return.</span></span> <span data-ttu-id="74d66-224">上限是专用的，而不是包含的值。</span><span class="sxs-lookup"><span data-stu-id="74d66-224">The upper bound is an exclusive, not an inclusive, value.</span></span> <span data-ttu-id="74d66-225">也就是说，它不包含在由方法返回的值范围内。</span><span class="sxs-lookup"><span data-stu-id="74d66-225">That is, it isn't included in the range of values returned by the method.</span></span> <span data-ttu-id="74d66-226">下面的示例使用此方法生成介于-10 和10之间的随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-226">The following example uses this method to generate random integers between -10 and 10.</span></span> <span data-ttu-id="74d66-227">请注意，它指定11，它比所需的值大1，作为 `maxValue` 方法调用中的参数的值。</span><span class="sxs-lookup"><span data-stu-id="74d66-227">Note that it specifies 11, which is one greater than the desired value, as the value of the `maxValue` argument in the method call.</span></span>  
  
 [!code-cpp[System.Random#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/range1.cpp#15)]
 [!code-csharp-interactive[System.Random#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/range1.cs#15)]
 [!code-vb[System.Random#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/range1.vb#15)]  
  
<a name="Digits"></a>   
### <a name="retrieve-integers-with-a-specified-number-of-digits"></a><span data-ttu-id="74d66-228">检索指定位数的整数</span><span class="sxs-lookup"><span data-stu-id="74d66-228">Retrieve integers with a specified number of digits</span></span>  
 <span data-ttu-id="74d66-229">可以调用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 方法来检索具有指定位数的数字。</span><span class="sxs-lookup"><span data-stu-id="74d66-229">You can call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method to retrieve numbers with a specified number of digits.</span></span> <span data-ttu-id="74d66-230">例如，若要检索具有四位数的数字 (即，范围为1000到 9999) ，请调用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 方法，值为1000， `minValue` 值为 `maxValue` 10000，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="74d66-230">For example, to retrieve numbers with four digits (that is, numbers that range from 1000 to 9999), you call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method with a `minValue` value of 1000 and a `maxValue` value of 10000, as the following example shows.</span></span>  
  
 [!code-cpp[System.Random#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/range2.cpp#16)]
 [!code-csharp-interactive[System.Random#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/range2.cs#16)]
 [!code-vb[System.Random#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/range2.vb#16)]  
  
<a name="Floats"></a>   
### <a name="retrieve-floating-point-values-in-a-specified-range"></a><span data-ttu-id="74d66-231">检索指定范围内的浮点值</span><span class="sxs-lookup"><span data-stu-id="74d66-231">Retrieve floating-point values in a specified range</span></span>  
 <span data-ttu-id="74d66-232"><xref:System.Random.NextDouble%2A>方法返回介于0到小于1之间的随机浮点值。</span><span class="sxs-lookup"><span data-stu-id="74d66-232">The <xref:System.Random.NextDouble%2A> method returns random floating-point values that range from 0 to less than 1.</span></span> <span data-ttu-id="74d66-233">但是，您通常需要在其他某个范围内生成随机值。</span><span class="sxs-lookup"><span data-stu-id="74d66-233">However, you'll often want to generate random values in some other range.</span></span>  
  
 <span data-ttu-id="74d66-234">如果所需的最小值和最大值之间的间隔为1，则可以将所需起始间隔和0之间的差值添加到该方法返回的数字 <xref:System.Random.NextDouble%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-234">If the interval between the minimum and maximum desired values is 1, you can add the difference between the desired starting interval and 0 to the number returned by the <xref:System.Random.NextDouble%2A> method.</span></span> <span data-ttu-id="74d66-235">下面的示例将生成10个介于-1 和0之间的随机数。</span><span class="sxs-lookup"><span data-stu-id="74d66-235">The following example does this to generate 10 random numbers between -1 and 0.</span></span>  
  
 [!code-cpp[System.Random#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange2.cpp#17)]
 [!code-csharp-interactive[System.Random#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange2.cs#17)]
 [!code-vb[System.Random#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange2.vb#17)]  
  
 <span data-ttu-id="74d66-236">若要生成其下限为0但上限大于 1 (的随机浮点数，或在负数的情况下，其下限小于-1 且上限为 0) ，则将随机数乘以非零界限。</span><span class="sxs-lookup"><span data-stu-id="74d66-236">To generate random floating-point numbers whose lower bound is 0 but upper bound is greater than 1 (or, in the case of negative numbers, whose lower bound is less than -1 and upper bound is 0), multiply the random number by the non-zero bound.</span></span> <span data-ttu-id="74d66-237">下面的示例将生成20000000随机浮点数，范围为0到 <xref:System.Int64.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-237">The following example does this to generate 20 million random floating-point numbers that range from 0 to <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="74d66-238">中的还显示方法所生成的随机值的分布。</span><span class="sxs-lookup"><span data-stu-id="74d66-238">In also displays the distribution of the random values generated by the method.</span></span>  
  
 [!code-cpp[System.Random#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange1.cpp#18)]
 [!code-csharp-interactive[System.Random#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange1.cs#18)]
 [!code-vb[System.Random#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange1.vb#18)]  
  
 <span data-ttu-id="74d66-239">若要在两个任意值之间生成随机浮点数，如 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 方法对整数执行运算，请使用以下公式：</span><span class="sxs-lookup"><span data-stu-id="74d66-239">To generate random floating-point numbers between two arbitrary values, like the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method does for integers, use the following formula:</span></span>  
  
```csharp  
Random.NextDouble() * (maxValue - minValue) + minValue  
```  
  
 <span data-ttu-id="74d66-240">下面的示例生成1000000到11.0 范围10.0 内的随机数字，并显示其分布。</span><span class="sxs-lookup"><span data-stu-id="74d66-240">The following example generates 1 million random numbers that range from 10.0 to 11.0, and displays their distribution.</span></span>  
  
 [!code-cpp[System.Random#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange3.cpp#19)]
 [!code-csharp-interactive[System.Random#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange3.cs#19)]
 [!code-vb[System.Random#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange3.vb#19)]  
  
<a name="Boolean"></a>   
### <a name="generate-random-boolean-values"></a><span data-ttu-id="74d66-241">生成随机布尔值</span><span class="sxs-lookup"><span data-stu-id="74d66-241">Generate random Boolean values</span></span>  
 <span data-ttu-id="74d66-242"><xref:System.Random>类不提供用于生成值的方法 <xref:System.Boolean> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-242">The <xref:System.Random> class doesn't provide methods that generate <xref:System.Boolean> values.</span></span> <span data-ttu-id="74d66-243">但是，您可以定义自己的类或方法来执行此操作。</span><span class="sxs-lookup"><span data-stu-id="74d66-243">However, you can define your own class or method to do that.</span></span> <span data-ttu-id="74d66-244">下面的示例定义了一个 `BooleanGenerator` 具有单个方法的类 `NextBoolean` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-244">The following example defines a class, `BooleanGenerator`, with a single method, `NextBoolean`.</span></span> <span data-ttu-id="74d66-245">`BooleanGenerator`类将对象存储 <xref:System.Random> 为私有变量。</span><span class="sxs-lookup"><span data-stu-id="74d66-245">The `BooleanGenerator` class stores a <xref:System.Random> object as a private variable.</span></span> <span data-ttu-id="74d66-246">`NextBoolean`方法调用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 方法，并将结果传递给 <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-246">The `NextBoolean` method calls the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method and passes the result to the <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="74d66-247">请注意，使用2作为参数来指定随机数的上限。</span><span class="sxs-lookup"><span data-stu-id="74d66-247">Note that 2 is used as the argument to specify the upper bound of the random number.</span></span> <span data-ttu-id="74d66-248">由于这是一个独占值，因此该方法调用返回0或1。</span><span class="sxs-lookup"><span data-stu-id="74d66-248">Since this is an exclusive value, the method call returns either 0 or 1.</span></span>  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/booleans1.cpp" id="Snippet8":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/booleans1.cs" interactive="try-dotnet" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/booleans1.vb" id="Snippet8":::
  
 <span data-ttu-id="74d66-249">该示例只是定义了一个方法，而不是创建一个单独的类来生成随机 <xref:System.Boolean> 值。</span><span class="sxs-lookup"><span data-stu-id="74d66-249">Instead of creating a separate class to generate random <xref:System.Boolean> values, the example could simply have defined a single method.</span></span> <span data-ttu-id="74d66-250">但是，在这种情况下， <xref:System.Random> 应将对象定义为类级变量，以避免 <xref:System.Random> 在每个方法调用中实例化新的实例。</span><span class="sxs-lookup"><span data-stu-id="74d66-250">In that case, however, the <xref:System.Random> object should have been defined as a class-level variable to avoid instantiating a new <xref:System.Random> instance in each method call.</span></span> <span data-ttu-id="74d66-251">在 Visual Basic 中，可以在方法中将随机实例定义为 [静态](/dotnet/visual-basic/language-reference/modifiers/static) 变量 `NextBoolean` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-251">In Visual Basic, the Random instance can be defined as a [Static](/dotnet/visual-basic/language-reference/modifiers/static) variable in the `NextBoolean` method.</span></span>  <span data-ttu-id="74d66-252">下面的示例提供了一个实现。</span><span class="sxs-lookup"><span data-stu-id="74d66-252">The following example provides an implementation.</span></span>  
  
 [!code-cpp[System.Random#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/booleans2.cpp#20)]
 [!code-csharp-interactive[System.Random#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/booleans2.cs#20)]
 [!code-vb[System.Random#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/booleans2.vb#20)]  
  
<a name="Long"></a>   
### <a name="generate-random-64-bit-integers"></a><span data-ttu-id="74d66-253">生成随机的64位整数</span><span class="sxs-lookup"><span data-stu-id="74d66-253">Generate random 64-bit integers</span></span>  
 <span data-ttu-id="74d66-254">方法的重载 <xref:System.Random.Next%2A> 返回32位整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-254">The overloads of the <xref:System.Random.Next%2A> method return 32-bit integers.</span></span> <span data-ttu-id="74d66-255">但是，在某些情况下，可能需要使用64位整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-255">However, in some cases, you might want to work with 64-bit integers.</span></span> <span data-ttu-id="74d66-256">你可以按如下所示进行操作：</span><span class="sxs-lookup"><span data-stu-id="74d66-256">You can do this as follows:</span></span>  
  
1.  <span data-ttu-id="74d66-257">调用 <xref:System.Random.NextDouble%2A> 方法以检索双精度浮点值。</span><span class="sxs-lookup"><span data-stu-id="74d66-257">Call the <xref:System.Random.NextDouble%2A> method to retrieve a double-precision floating point value.</span></span>  
  
2.  <span data-ttu-id="74d66-258">将该值乘以 <xref:System.Int64.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-258">Multiply that value by <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="74d66-259">下面的示例使用此方法生成20000000个随机长整数，并将它们分类为10个等组。</span><span class="sxs-lookup"><span data-stu-id="74d66-259">The following example uses this technique to generate 20 million random long integers and categorizes them in 10 equal groups.</span></span> <span data-ttu-id="74d66-260">然后，它通过将每个组中的数字从0计算到来计算随机数的分布 <xref:System.Int64.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-260">It then evaluates the distribution of the random numbers by counting the number in each group from 0 to <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="74d66-261">如示例中的输出所示，在长整数的范围内，数值的分布将更多或更少。</span><span class="sxs-lookup"><span data-stu-id="74d66-261">As the output from the example shows, the numbers are distributed more or less equally through the range of a long integer.</span></span>  
  
 [!code-cpp[System.Random#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/long1.cpp#14)]
 [!code-csharp-interactive[System.Random#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/long1.cs#14)]
 [!code-vb[System.Random#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/long1.vb#14)]  
  
 <span data-ttu-id="74d66-262">使用位操作的一种替代方法不会生成真正的随机数字。</span><span class="sxs-lookup"><span data-stu-id="74d66-262">An alternative technique that uses bit manipulation does not generate truly random numbers.</span></span> <span data-ttu-id="74d66-263">此方法调用 <xref:System.Random.Next> 以生成两个整数，左移一个32位，并将它们 or 在一起。</span><span class="sxs-lookup"><span data-stu-id="74d66-263">This technique calls <xref:System.Random.Next> to generate two integers, left-shifts one by 32 bits, and ORs them together.</span></span> <span data-ttu-id="74d66-264">此方法有两个限制：</span><span class="sxs-lookup"><span data-stu-id="74d66-264">This technique has two limitations:</span></span>  
  
1.  <span data-ttu-id="74d66-265">因为位31是符号位，所以生成的长整型值的值始终为0。</span><span class="sxs-lookup"><span data-stu-id="74d66-265">Because bit 31 is the sign bit, the value in bit 31 of the resulting long integer is always 0.</span></span>  <span data-ttu-id="74d66-266">为此，可以生成一个随机0或1，左移第31位，并将其与原始随机长整数 Or。</span><span class="sxs-lookup"><span data-stu-id="74d66-266">This can be addressed by generating a random 0 or 1, left-shifting it 31 bits, and ORing it with the original random long integer.</span></span>  
  
2.  <span data-ttu-id="74d66-267">更严肃，因为返回的值的概率 <xref:System.Random.Next> 将为0，因此，如果范围为 0x0-0x00000000FFFFFFFF 的任何随机数，将会有很多。</span><span class="sxs-lookup"><span data-stu-id="74d66-267">More seriously, because the probability that the value returned by <xref:System.Random.Next> will be 0, there will be few if any random numbers in the range 0x0-0x00000000FFFFFFFF.</span></span>  
  
<a name="Bytes"></a>   
### <a name="retrieve-bytes-in-a-specified-range"></a><span data-ttu-id="74d66-268">检索指定范围内的字节</span><span class="sxs-lookup"><span data-stu-id="74d66-268">Retrieve bytes in a specified range</span></span>  
 <span data-ttu-id="74d66-269">方法的重载 <xref:System.Random.Next%2A> 允许您指定随机数的范围，但方法不允许 <xref:System.Random.NextBytes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-269">The overloads of the <xref:System.Random.Next%2A> method allow you to specify the range of random numbers, but the <xref:System.Random.NextBytes%2A> method does not.</span></span> <span data-ttu-id="74d66-270">下面的示例实现了一个 `NextBytes` 方法，该方法允许你指定返回的字节范围。</span><span class="sxs-lookup"><span data-stu-id="74d66-270">The following example implements a `NextBytes` method that lets you specify the range of the returned bytes.</span></span> <span data-ttu-id="74d66-271">它定义 `Random2` 派生自的类 <xref:System.Random> ，并重载其 `NextBytes` 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-271">It defines a `Random2` class that derives from <xref:System.Random> and overloads its `NextBytes` method.</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/bytes1.cpp" id="Snippet9":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/bytes1.cs" interactive="try-dotnet" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/bytes1.vb" id="Snippet9":::

 <span data-ttu-id="74d66-272">`NextBytes(Byte[], Byte, Byte)`方法包装对方法的调用， <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 并指定最小值和大于最大值的值（在本例中为0和 101) ，在字节数组中返回） (。</span><span class="sxs-lookup"><span data-stu-id="74d66-272">The `NextBytes(Byte[], Byte, Byte)` method wraps a call to the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method and specifies the minimum value and one greater than the maximum value (in this case, 0 and 101) that we want returned in the byte array.</span></span> <span data-ttu-id="74d66-273">由于我们确定方法返回的整数值在 <xref:System.Random.Next%2A> 数据类型的范围内 <xref:System.Byte> ，因此可以安全地将它们强制转换为 c # 中的 () 或将它们 (在 Visual Basic 中) 从整数转换为字节。</span><span class="sxs-lookup"><span data-stu-id="74d66-273">Because we are sure that the integer values returned by the <xref:System.Random.Next%2A> method are within the range of the <xref:System.Byte> data type, we can safely cast them (in C#) or convert them (in Visual Basic) from integers to bytes.</span></span>  
  
<a name="Array"></a>   
### <a name="retrieve-an-element-from-an-array-or-collection-at-random"></a><span data-ttu-id="74d66-274">随机检索数组或集合中的元素</span><span class="sxs-lookup"><span data-stu-id="74d66-274">Retrieve an element from an array or collection at random</span></span>  
 <span data-ttu-id="74d66-275">随机数字通常用作索引来检索数组或集合中的值。</span><span class="sxs-lookup"><span data-stu-id="74d66-275">Random numbers often serve as indexes to retrieve values from arrays or collections.</span></span> <span data-ttu-id="74d66-276">若要检索随机索引值，可以调用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> 方法，并使用数组的下限作为其参数的值，并将该数组的下限 `minValue` 作为其参数的值 `maxValue` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-276">To retrieve a random index value, you can call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method, and use the lower bound of the array as the value of its `minValue` argument and one greater than the upper bound of the array as the value of its `maxValue` argument.</span></span> <span data-ttu-id="74d66-277">对于从零开始的数组，这等效于其 <xref:System.Array.Length%2A> 属性，或大于方法返回的值的数组 <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-277">For a zero-based array, this is equivalent to its <xref:System.Array.Length%2A> property, or one greater than the value returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="74d66-278">下面的示例从城市数组中随机检索美国中的城市名称。</span><span class="sxs-lookup"><span data-stu-id="74d66-278">The following example randomly retrieves the name of a city in the United States from an array of cities.</span></span>  
  
 [!code-cpp[System.Random#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/array1.cpp#10)]
 [!code-csharp-interactive[System.Random#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/array1.cs#10)]
 [!code-vb[System.Random#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/array1.vb#10)]  
  
<a name="UniqueArray"></a>   
### <a name="retrieve-a-unique-element-from-an-array-or-collection"></a><span data-ttu-id="74d66-279">从数组或集合中检索唯一元素</span><span class="sxs-lookup"><span data-stu-id="74d66-279">Retrieve a unique element from an array or collection</span></span>  
 <span data-ttu-id="74d66-280">随机数生成器始终可以返回重复值。</span><span class="sxs-lookup"><span data-stu-id="74d66-280">A random number generator can always return duplicate values.</span></span> <span data-ttu-id="74d66-281">当数字范围变小或生成的值的数目变大时，重复的概率会增大。</span><span class="sxs-lookup"><span data-stu-id="74d66-281">As the range of numbers becomes smaller or the number of values generated becomes larger, the probability of duplicates grows.</span></span> <span data-ttu-id="74d66-282">如果随机值必须是唯一的，则会生成更多的数字来补偿重复项，从而导致性能日趋下降。</span><span class="sxs-lookup"><span data-stu-id="74d66-282">If random values must be unique, more numbers are generated to compensate for duplicates, resulting in increasingly poor performance.</span></span>  
  
 <span data-ttu-id="74d66-283">可以通过多种方法来处理这种情况。</span><span class="sxs-lookup"><span data-stu-id="74d66-283">There are a number of techniques to handle this scenario.</span></span> <span data-ttu-id="74d66-284">一种常见的解决方法是创建包含要检索的值的数组或集合，以及包含随机浮点数的并行数组。</span><span class="sxs-lookup"><span data-stu-id="74d66-284">One common solution is to create an array or collection that contains the values to be retrieved, and a parallel array that contains random floating-point numbers.</span></span> <span data-ttu-id="74d66-285">第二个数组是在创建第一个数组时用随机数字填充的，该 <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> 方法用于通过使用并行数组中的值对第一个数组进行排序。</span><span class="sxs-lookup"><span data-stu-id="74d66-285">The second array is populated with random numbers at the time the first array is created, and the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> method is used to sort the first array by using the values in the parallel array.</span></span>  
  
 <span data-ttu-id="74d66-286">例如，如果您正在开发纸牌游戏，则需要确保每张卡片仅使用一次。</span><span class="sxs-lookup"><span data-stu-id="74d66-286">For example, if you're developing a Solitaire game, you want to ensure that each card is used only once.</span></span> <span data-ttu-id="74d66-287">您可以创建可用于对卡片组进行排序的随机数字的并行数组，而不是生成用于检索卡并跟踪该卡是否已被处理的随机数。</span><span class="sxs-lookup"><span data-stu-id="74d66-287">Instead of generating random numbers to retrieve a card and tracking whether that card has already been dealt, you can create a parallel array of random numbers that can be used to sort the deck.</span></span> <span data-ttu-id="74d66-288">对卡片组进行排序后，你的应用程序可以维护一个指针来指示卡片上下一张卡片的索引。</span><span class="sxs-lookup"><span data-stu-id="74d66-288">Once the deck is sorted, your app can maintain a pointer to indicate the index of the next card on the deck.</span></span>  
  
 <span data-ttu-id="74d66-289">下面的示例阐释了这种方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-289">The following example illustrates this approach.</span></span> <span data-ttu-id="74d66-290">它定义了一个 `Card` 类，该类表示一个纸牌，一个类 `Dealer` 用于处理一组无序的卡片。</span><span class="sxs-lookup"><span data-stu-id="74d66-290">It defines a `Card` class that represents a playing card and a `Dealer` class that deals a deck of shuffled cards.</span></span> <span data-ttu-id="74d66-291">`Dealer`类构造函数填充了两个数组：一个 `deck` 数组，该数组具有类范围并表示了卡片组中的所有卡片; 和一个本地 `order` 数组，该数组具有与数组相同的元素数 `deck` ，并使用随机生成的 <xref:System.Double> 值填充该数组。</span><span class="sxs-lookup"><span data-stu-id="74d66-291">The `Dealer` class constructor populates two arrays: a `deck` array that has class scope and that represents all the cards in the deck; and a local `order` array that has the same number of elements as the `deck` array and is populated with randomly generated <xref:System.Double> values.</span></span>  <span data-ttu-id="74d66-292"><xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType>然后调用方法， `deck` 根据数组中的值对数组进行排序 `order` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-292">The <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> method is then called to sort the `deck` array based on the values in the `order` array.</span></span>  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/uniquearray1.cpp" id="Snippet11":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/uniquearray1.cs" interactive="try-dotnet" id="Snippet11":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/uniquearray1.vb" id="Snippet11":::
  
## Examples  

 <span data-ttu-id="74d66-293">下面的示例创建一个随机数生成器，并调用其 <xref:System.Random.NextBytes%2A> 、 <xref:System.Random.Next%2A> 和 <xref:System.Random.NextDouble%2A> 方法来生成不同范围内的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-293">The following example creates a single random number generator and calls its <xref:System.Random.NextBytes%2A>, <xref:System.Random.Next%2A>, and <xref:System.Random.NextDouble%2A> methods to generate sequences of random numbers within different ranges.</span></span>  
  
 [!code-cpp[System.Random#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/random2.cpp#2)]
 [!code-csharp-interactive[System.Random#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/Random2.cs#2)]
 [!code-vb[System.Random#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/Random2.vb#2)]  
  
 <span data-ttu-id="74d66-294">下面的示例生成一个随机整数，该整数将用作索引以检索数组中的字符串值。</span><span class="sxs-lookup"><span data-stu-id="74d66-294">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span>  
  
 [!code-cpp[System.Random.Next#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next1.cpp#3)]
 [!code-csharp-interactive[System.Random.Next#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next1.cs#3)]
 [!code-vb[System.Random.Next#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next1.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="74d66-295">在 .NET Framework 1.0 和1.1 中，从所需的派生的类的最小实现是， <see cref="T:System.Random" /> <see cref="M:System.Random.Sample" /> 用于定义新的或修改的算法来生成随机数。</span><span class="sxs-lookup"><span data-stu-id="74d66-295">In the .NET Framework 1.0 and 1.1, a minimum implementation of a class derived from <see cref="T:System.Random" /> required overriding the <see cref="M:System.Random.Sample" /> method to define a new or modified algorithm for generating random numbers.</span></span> <span data-ttu-id="74d66-296">然后，派生类可以依赖于、、、和方法的基类实现 <see cref="M:System.Random.Next" /> <see cref="M:System.Random.Next(System.Int32)" /> <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> <see cref="M:System.Random.NextBytes(System.Byte[])" /> <see cref="M:System.Random.NextDouble" /> 来调用方法的派生类实现 <see cref="M:System.Random.Sample" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-296">The derived class could then rely on the base class implementation of the <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32)" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, <see cref="M:System.Random.NextBytes(System.Byte[])" />, and <see cref="M:System.Random.NextDouble" /> methods to call the derived class implementation of the <see cref="M:System.Random.Sample" /> method.</span></span>  
  
<span data-ttu-id="74d66-297">在 .NET Framework 2.0 及更高版本中， <see cref="M:System.Random.Next" /> 、 <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> 和方法的行为 <see cref="M:System.Random.NextBytes(System.Byte[])" /> 已更改，因此这些方法不一定调用方法的派生类实现 <see cref="M:System.Random.Sample" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-297">In the .NET Framework 2.0 and later, the behavior of the <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, and <see cref="M:System.Random.NextBytes(System.Byte[])" /> methods have changed so that these methods do not necessarily call the derived class implementation of the <see cref="M:System.Random.Sample" /> method.</span></span> <span data-ttu-id="74d66-298">因此，从该目标派生的、 <see cref="T:System.Random" /> .NET Framework 2.0 及更高版本的类也应该重写这三个方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-298">As a result, classes derived from <see cref="T:System.Random" /> that target the .NET Framework 2.0 and later should also override these three methods.</span></span></para></block>
    <block subset="none" type="usage"><para><span data-ttu-id="74d66-299">不保证类中随机数生成器的实现在 <see cref="T:System.Random" /> .NET Framework 的主要版本中保持不变。</span><span class="sxs-lookup"><span data-stu-id="74d66-299">The implementation of the random number generator in the <see cref="T:System.Random" /> class isn't guaranteed to remain the same across major versions of the .NET Framework.</span></span> <span data-ttu-id="74d66-300">因此，不应假定同一种子会导致在不同版本的 .NET Framework 中产生相同的伪随机序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-300">As a result, you shouldn't assume that the same seed will result in the same pseudo-random sequence in different versions of the .NET Framework.</span></span></para></block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74d66-301">初始化 <see cref="T:System.Random" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="74d66-301">Initializes a new instance of the <see cref="T:System.Random" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Random();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="74d66-302"><see cref="T:System.Random" />使用默认种子值初始化类的新实例。</span><span class="sxs-lookup"><span data-stu-id="74d66-302">Initializes a new instance of the <see cref="T:System.Random" /> class using a default seed value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="74d66-303">在 .NET Framework 中，默认种子值派生自系统时钟，后者具有有限的分辨率。</span><span class="sxs-lookup"><span data-stu-id="74d66-303">In .NET Framework, the default seed value is derived from the system clock, which has finite resolution.</span></span> <span data-ttu-id="74d66-304">因此， <xref:System.Random> 通过调用无参数的构造函数而创建的不同对象具有相同的默认种子值，因此会产生相同的随机数集。</span><span class="sxs-lookup"><span data-stu-id="74d66-304">As a result, different <xref:System.Random> objects that are created in close succession by a call to the parameterless constructor have identical default seed values and, therefore, produce identical sets of random numbers.</span></span> <span data-ttu-id="74d66-305">您可以通过使用单个 <xref:System.Random> 对象生成所有随机数来避免此问题。</span><span class="sxs-lookup"><span data-stu-id="74d66-305">You can avoid this problem by using a single <xref:System.Random> object to generate all random numbers.</span></span> <span data-ttu-id="74d66-306">还可以通过生成自己的随机种子值并将其传递给构造函数来解决此情况 <xref:System.Random.%23ctor%28System.Int32%29> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-306">You can also work around it by generating your own random seed value and passing it to the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="74d66-307">有关详细信息，请参阅 <xref:System.Random.%23ctor%28System.Int32%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="74d66-307">For more information, see the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> 

<span data-ttu-id="74d66-308">在 .NET Core 中，默认种子值由线程静态的伪随机数生成器生成，因此，上述限制不适用。</span><span class="sxs-lookup"><span data-stu-id="74d66-308">In .NET Core, the default seed value is produced by the thread-static, pseudo-random number generator, so the previously described limitation does not apply.</span></span> <span data-ttu-id="74d66-309"><xref:System.Random>连续创建的不同对象在 .Net Core 中生成不同的随机数集。</span><span class="sxs-lookup"><span data-stu-id="74d66-309">Different <xref:System.Random> objects created in close succession produce different sets of random numbers in .NET Core.</span></span>
  
 <span data-ttu-id="74d66-310">如果希望随机数生成器生成一系列随机数字，请调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="74d66-310">Call this constructor if you want your random number generator to generate a random sequence of numbers.</span></span> <span data-ttu-id="74d66-311">若要生成与不同随机数生成器相同的固定随机数序列，请 <xref:System.Random.%23ctor%28System.Int32%29> 使用固定种子值调用构造函数。</span><span class="sxs-lookup"><span data-stu-id="74d66-311">To generate a fixed  sequence of random numbers that will be the same for different random number generators, call the <xref:System.Random.%23ctor%28System.Int32%29> constructor with a fixed seed value.</span></span> <span data-ttu-id="74d66-312"><xref:System.Random>测试使用随机数字的应用时，经常使用此构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="74d66-312">This <xref:System.Random> constructor overload is frequently used when testing apps that use random numbers.</span></span>  
  
 <span data-ttu-id="74d66-313">在实例化随机数生成器后，调用各个 <xref:System.Random> 方法（如 <xref:System.Random.Next> 或 <xref:System.Random.NextDouble> ）以生成随机数字。</span><span class="sxs-lookup"><span data-stu-id="74d66-313">Once you've instantiated the random number generator, you call individual <xref:System.Random> methods, such as <xref:System.Random.Next> or <xref:System.Random.NextDouble>, to generate random numbers.</span></span>  
  
   
  
## Examples

<span data-ttu-id="74d66-314">下面的示例使用无参数构造函数实例化三个 <xref:System.Random> 对象，并为每个对象显示五个随机整数的序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-314">The following example uses the parameterless constructor to instantiate three <xref:System.Random> objects and displays a sequence of five random integers for each.</span></span> <span data-ttu-id="74d66-315">如果它在 .NET Framework 上运行，因为前两个 <xref:System.Random> 对象是连续创建的，所以它们是使用基于系统时钟的相同种子值进行实例化的，因此，它们生成相同的随机数序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-315">If it is run on .NET Framework, because the first two <xref:System.Random> objects are created in close succession, they are instantiated using identical seed values based on the system clock and, therefore, they produce an identical sequence of random numbers.</span></span> <span data-ttu-id="74d66-316">另一方面，如果 <xref:System.Random> 调用方法导致两秒钟的延迟，则会调用第三个对象的无参数构造函数 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-316">On the other hand, the parameterless constructor of the third <xref:System.Random> object is called after a two-second delay caused by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="74d66-317">因为这会为第三个对象产生不同的种子值 <xref:System.Random> ，所以它会产生不同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-317">Because this produces a different seed value for the third <xref:System.Random> object, it produces a different sequence of random numbers.</span></span>  
  
 [!code-csharp[System.Random.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor1.cs#2)]
 [!code-vb[System.Random.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random (int Seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 Seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Seed As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Random(int Seed);" />
      <MemberSignature Language="F#" Value="new Random : int -&gt; Random" Usage="new System.Random Seed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Seed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Seed"><span data-ttu-id="74d66-318">用来计算伪随机数序列起始值的数字。</span><span class="sxs-lookup"><span data-stu-id="74d66-318">A number used to calculate a starting value for the pseudo-random number sequence.</span></span> <span data-ttu-id="74d66-319">如果指定的是负数，则使用其绝对值。</span><span class="sxs-lookup"><span data-stu-id="74d66-319">If a negative number is specified, the absolute value of the number is used.</span></span></param>
        <summary><span data-ttu-id="74d66-320">使用指定的种子值初始化 <see cref="T:System.Random" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="74d66-320">Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-321">为不同的对象提供相同的种子值 <xref:System.Random> 会导致每个实例生成相同的随机数序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-321">Providing an identical seed value to different <xref:System.Random> objects causes each instance to produce identical sequences of random numbers.</span></span> <span data-ttu-id="74d66-322">这种情况通常在测试依赖随机数生成器的应用时完成。</span><span class="sxs-lookup"><span data-stu-id="74d66-322">This is often done when testing apps that rely on random number generators.</span></span>  
  
 <span data-ttu-id="74d66-323">如果应用程序需要不同的随机数序列，请用不同的种子值重复调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="74d66-323">If your application requires different random number sequences, invoke this constructor repeatedly with different seed values.</span></span> <span data-ttu-id="74d66-324">生成唯一种子值的一种方法是使其与时间相关。</span><span class="sxs-lookup"><span data-stu-id="74d66-324">One way to produce a unique seed value is to make it time-dependent.</span></span> <span data-ttu-id="74d66-325">例如，从系统时钟派生种子值，因为 <xref:System.Random.%23ctor> 重载会。</span><span class="sxs-lookup"><span data-stu-id="74d66-325">For example, derive the seed value from the system clock, as the <xref:System.Random.%23ctor> overload does.</span></span> <span data-ttu-id="74d66-326">但是，系统时钟可能没有足够的分辨率来为此构造函数提供不同的种子值调用。</span><span class="sxs-lookup"><span data-stu-id="74d66-326">However, the system clock might not have sufficient resolution to provide different invocations of this constructor with a different seed value.</span></span> <span data-ttu-id="74d66-327">在 .NET Framework 中，这会生成随机数字生成器，生成相同的伪随机数序列，如以下示例中的前两个 <xref:System.Random> 对象所示。</span><span class="sxs-lookup"><span data-stu-id="74d66-327">On the .NET Framework, this results in random number generators that generate identical sequences of pseudo-random numbers, as illustrated by the first two <xref:System.Random> objects in the following example.</span></span> <span data-ttu-id="74d66-328">若要防止出现这种情况，请应用一种算法来区分每个调用中的种子值，或调用 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 方法以确保为每个构造函数提供不同的种子值。</span><span class="sxs-lookup"><span data-stu-id="74d66-328">To prevent this, apply an algorithm to differentiate the seed value in each invocation, or call the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to ensure that you provide each constructor with a different seed value.</span></span>  
  
 [!code-csharp[System.Random.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor4.cs#4)]
 [!code-vb[System.Random.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor4.vb#4)]  
  
 <span data-ttu-id="74d66-329">另一种方法是实例化单个 <xref:System.Random> 对象，用于在应用程序中生成所有随机数。</span><span class="sxs-lookup"><span data-stu-id="74d66-329">Another option is to instantiate a single <xref:System.Random> object that you use to generate all the random numbers in your application.</span></span> <span data-ttu-id="74d66-330">这会产生略微改善的性能，因为实例化随机数生成器相当昂贵。</span><span class="sxs-lookup"><span data-stu-id="74d66-330">This yields slightly better performance, since instantiating a random number generator is fairly expensive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74d66-331">下面的示例 <xref:System.Random> 使用类构造函数创建对象，该类构造函数采用 seed 参数并生成随机整数和双精度序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-331">The following example creates <xref:System.Random> objects with the class constructor that takes a seed parameter and generates a sequence of random integers and doubles.</span></span> <span data-ttu-id="74d66-332">该示例说明了在 <xref:System.Random> 再次创建具有构造函数和 seed 参数的对象时，将生成相同的序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-332">The example illustrates that the same sequence is generated when the <xref:System.Random> object is created again with the constructor and seed parameter.</span></span>  
  
 [!code-cpp[System.Random.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Ctor/CPP/ctor.cpp#1)]
 [!code-csharp[System.Random.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor.cs#1)]
 [!code-vb[System.Random.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Next">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="74d66-333">返回一个随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-333">Returns a random integer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next();" />
      <MemberSignature Language="F#" Value="abstract member Next : unit -&gt; int&#xA;override this.Next : unit -&gt; int" Usage="random.Next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="74d66-334">返回一个非负随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-334">Returns a non-negative random integer.</span></span></summary>
        <returns><span data-ttu-id="74d66-335">大于或等于 0 且小于 <see cref="F:System.Int32.MaxValue" /> 的 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-335">A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-336"><xref:System.Random.Next%2A?displayProperty=nameWithType> 生成值范围从0到小于的随机数 <xref:System.Int32.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-336"><xref:System.Random.Next%2A?displayProperty=nameWithType> generates a random number whose value ranges from 0 to less than <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="74d66-337">若要生成其值范围从0到其他正数的随机数字，请使用 <xref:System.Random.Next%28System.Int32%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="74d66-337">To generate a random number whose value ranges from 0 to some other positive number, use the <xref:System.Random.Next%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="74d66-338">若要在不同的范围内生成随机数字，请使用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="74d66-338">To generate a random number within a different range, use the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74d66-339">下面的示例对方法进行重复调用 <xref:System.Random.Next%2A> ，以生成用户请求的特定数量的随机数字。</span><span class="sxs-lookup"><span data-stu-id="74d66-339">The following example makes repeated calls to the <xref:System.Random.Next%2A> method to generate a specific number of random numbers requested by the user.</span></span> <span data-ttu-id="74d66-340"><xref:System.Console.ReadLine%2A?displayProperty=nameWithType>方法用于获取客户输入。</span><span class="sxs-lookup"><span data-stu-id="74d66-340">The <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method is used to get customer input.</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next3.cpp" id="Snippet5":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next3.cs" interactive="try-dotnet-method" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next3.vb" id="Snippet5":::
  
 <span data-ttu-id="74d66-341">下面的示例从派生一个类 <xref:System.Random> ，以生成一个随机数序列，其分布不同于基类的方法所生成的统一分布 <xref:System.Random.Sample%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-341">The following example derives a class from <xref:System.Random> to generate a sequence of random numbers whose distribution differs from the uniform distribution generated by the <xref:System.Random.Sample%2A> method of the base class.</span></span> <span data-ttu-id="74d66-342">它重写 <xref:System.Random.Sample%2A> 方法以提供随机数的分布，并重写 <xref:System.Random.Next%2A?displayProperty=nameWithType> 方法以使用随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-342">It overrides the <xref:System.Random.Sample%2A> method to provide the distribution of random numbers, and overrides the <xref:System.Random.Next%2A?displayProperty=nameWithType> method to use series of random numbers.</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Sample/cpp/sampleex.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Sample/CS/sample.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Sample/VB/sample.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="74d66-343">从 .NET Framework 版本2.0 开始，如果从派生类 <see cref="T:System.Random" /> 并重写 <see cref="M:System.Random.Sample" /> 方法，则 <see cref="M:System.Random.Sample" /> 不会在调用方法的基类实现时使用方法的派生类实现提供的分布 <see cref="M:System.Random.Next" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-343">Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.Next" /> method.</span></span> <span data-ttu-id="74d66-344">相反，将使用基类返回的统一分布 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-344">Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used.</span></span> <span data-ttu-id="74d66-345">此行为可改善类的整体性能 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-345">This behavior improves the overall performance of the <see cref="T:System.Random" /> class.</span></span> <span data-ttu-id="74d66-346">若要修改此行为以调用 <see cref="M:System.Random.Sample" /> 派生类中的方法，还必须重写 <see cref="M:System.Random.Next" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-346">To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.Next" /> method.</span></span></para></block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next (int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next (maxValue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next(int maxValue);" />
      <MemberSignature Language="F#" Value="abstract member Next : int -&gt; int&#xA;override this.Next : int -&gt; int" Usage="random.Next maxValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxValue"><span data-ttu-id="74d66-347">要生成的随机数的上限（随机数不能取该上限值）。</span><span class="sxs-lookup"><span data-stu-id="74d66-347">The exclusive upper bound of the random number to be generated.</span></span> <span data-ttu-id="74d66-348"><paramref name="maxValue" /> 必须大于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="74d66-348"><paramref name="maxValue" /> must be greater than or equal to 0.</span></span></param>
        <summary><span data-ttu-id="74d66-349">返回一个小于所指定最大值的非负随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-349">Returns a non-negative random integer that is less than the specified maximum.</span></span></summary>
        <returns><span data-ttu-id="74d66-350">大于或等于零且小于 <paramref name="maxValue" /> 的 32 位有符号整数，即：返回值的范围通常包括零但不包括 <paramref name="maxValue" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-350">A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue" />.</span></span> <span data-ttu-id="74d66-351">但是，如果 <paramref name="maxValue" /> 等于 0，则返回 <paramref name="maxValue" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-351">However, if <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-352"><xref:System.Random.Next%28System.Int32%29>重载返回介于0到-1 之间的随机整数 `maxValue` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-352">The <xref:System.Random.Next%28System.Int32%29> overload returns random integers that range from 0 to `maxValue` - 1.</span></span> <span data-ttu-id="74d66-353">但是，如果 `maxValue` 为0，则该方法返回0。</span><span class="sxs-lookup"><span data-stu-id="74d66-353">However, if `maxValue` is 0, the method returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74d66-354">下面的示例生成包含方法的各种重载的随机整数 <xref:System.Random.Next%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-354">The following example generates random integers with various overloads of the <xref:System.Random.Next%2A> method.</span></span>  

 [!code-cpp[System.Random.Next#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next.cpp#1)]
 [!code-csharp-interactive[System.Random.Next#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next.cs#1)]
 [!code-vb[System.Random.Next#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next.vb#1)]  
  
 <span data-ttu-id="74d66-355">下面的示例生成一个随机整数，该整数将用作索引以检索数组中的字符串值。</span><span class="sxs-lookup"><span data-stu-id="74d66-355">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span> <span data-ttu-id="74d66-356">由于数组的最高索引小于其长度，因此该属性的值 <xref:System.Array.Length%2A?displayProperty=nameWithType> 作为 `maxValue` 参数提供。</span><span class="sxs-lookup"><span data-stu-id="74d66-356">Because the highest index of the array is one less than its length, the value of the <xref:System.Array.Length%2A?displayProperty=nameWithType> property is supplied as a the `maxValue` parameter.</span></span>  
  
 [!code-cpp[System.Random.Next#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next1.cpp#3)]
 [!code-csharp-interactive[System.Random.Next#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next1.cs#3)]
 [!code-vb[System.Random.Next#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74d66-357"><paramref name="maxValue" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="74d66-357"><paramref name="maxValue" /> is less than 0.</span></span></exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next (int minValue, int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 minValue, int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next (minValue As Integer, maxValue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next(int minValue, int maxValue);" />
      <MemberSignature Language="F#" Value="abstract member Next : int * int -&gt; int&#xA;override this.Next : int * int -&gt; int" Usage="random.Next (minValue, maxValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue"><span data-ttu-id="74d66-358">返回的随机数的下界（随机数可取该下界值）。</span><span class="sxs-lookup"><span data-stu-id="74d66-358">The inclusive lower bound of the random number returned.</span></span></param>
        <param name="maxValue"><span data-ttu-id="74d66-359">返回的随机数的上界（随机数不能取该上界值）。</span><span class="sxs-lookup"><span data-stu-id="74d66-359">The exclusive upper bound of the random number returned.</span></span> <span data-ttu-id="74d66-360"><paramref name="maxValue" /> 必须大于或等于 <paramref name="minValue" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-360"><paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</span></span></param>
        <summary><span data-ttu-id="74d66-361">返回在指定范围内的任意整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-361">Returns a random integer that is within a specified range.</span></span></summary>
        <returns><span data-ttu-id="74d66-362">一个大于等于 <paramref name="minValue" /> 且小于 <paramref name="maxValue" /> 的 32 位带符号整数，即：返回的值范围包括 <paramref name="minValue" /> 但不包括 <paramref name="maxValue" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-362">A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />.</span></span> <span data-ttu-id="74d66-363">如果 <paramref name="minValue" /> 等于 <paramref name="maxValue" />，则返回 <paramref name="minValue" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-363">If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-364"><xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>重载返回介于-1 之间的随机 `minValue` 整数 `maxValue` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-364">The <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> overload returns random integers that range from `minValue` to `maxValue` - 1.</span></span> <span data-ttu-id="74d66-365">但是，如果 `maxValue` equals `minValue` ，则该方法返回 `minValue` 。</span><span class="sxs-lookup"><span data-stu-id="74d66-365">However, if `maxValue` equals `minValue`, the method returns `minValue`.</span></span>  
  
 <span data-ttu-id="74d66-366">不同于方法的其他重载 <xref:System.Random.Next%2A> ，后者仅返回非负值，此方法可以返回负随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-366">Unlike the other overloads of the <xref:System.Random.Next%2A> method, which return only non-negative values, this method can return a negative random integer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74d66-367">下面的示例使用 <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 方法生成具有三个不同范围的随机整数。</span><span class="sxs-lookup"><span data-stu-id="74d66-367">The following example uses the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to generate random integers with three distinct ranges.</span></span> <span data-ttu-id="74d66-368">请注意，该示例的确切输出取决于传递给类构造函数的系统提供的种子值 <xref:System.Random> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-368">Note that the exact output from the example depends on the system-supplied seed value passed to the <xref:System.Random> class constructor.</span></span>  
  
 [!code-cpp[System.Random.Next#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next2.cpp#2)]
 [!code-csharp-interactive[System.Random.Next#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/Next2.cs#2)]
 [!code-vb[System.Random.Next#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next2.vb#2)]  
  
 <span data-ttu-id="74d66-369">下面的示例生成一个随机整数，该整数将用作索引以检索数组中的字符串值。</span><span class="sxs-lookup"><span data-stu-id="74d66-369">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span> <span data-ttu-id="74d66-370">由于数组的最高索引小于其长度，因此该属性的值 <xref:System.Array.Length%2A?displayProperty=nameWithType> 作为 `maxValue` 参数提供。</span><span class="sxs-lookup"><span data-stu-id="74d66-370">Because the highest index of the array is one less than its length, the value of the <xref:System.Array.Length%2A?displayProperty=nameWithType> property is supplied as a the `maxValue` parameter.</span></span>  
  
 [!code-cpp[System.Random.Next#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next4.cpp#4)]
 [!code-csharp-interactive[System.Random.Next#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next4.cs#4)]
 [!code-vb[System.Random.Next#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="74d66-371"><paramref name="minValue" /> 大于 <paramref name="maxValue" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-371"><paramref name="minValue" /> is greater than <paramref name="maxValue" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="74d66-372">从 .NET Framework 版本2.0 开始，如果从派生类 <see cref="T:System.Random" /> 并重写 <see cref="M:System.Random.Sample" /> 方法，则 <see cref="M:System.Random.Sample" /> <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> 如果和参数之间的差异大于，则不会将方法的派生类实现提供的分布用于方法重载的基类实现 <paramref name="minValue" /> <paramref name="maxValue" /> <see cref="F:System.Int32.MaxValue" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-372">Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method overload if the difference between the <paramref name="minValue" /> and <paramref name="maxValue" /> parameters is greater than <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="74d66-373">相反，将使用基类返回的统一分布 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-373">Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used.</span></span> <span data-ttu-id="74d66-374">此行为可改善类的整体性能 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-374">This behavior improves the overall performance of the <see cref="T:System.Random" /> class.</span></span> <span data-ttu-id="74d66-375">若要修改此行为以调用 <see cref="M:System.Random.Sample" /> 派生类中的方法，还必须重写 <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="74d66-375">To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method overload.</span></span></para></block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextBytes(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NextBytes (buffer As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NextBytes(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member NextBytes : byte[] -&gt; unit&#xA;override this.NextBytes : byte[] -&gt; unit" Usage="random.NextBytes buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="74d66-376">要用随机数填充的数组。</span><span class="sxs-lookup"><span data-stu-id="74d66-376">The array to be filled with random numbers.</span></span></param>
        <summary><span data-ttu-id="74d66-377">用随机数填充指定字节数组的元素。</span><span class="sxs-lookup"><span data-stu-id="74d66-377">Fills the elements of a specified array of bytes with random numbers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-378">字节数组的每个元素都设置为一个大于或等于0且小于或等于的随机数字 <xref:System.Byte.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-378">Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or equal to <xref:System.Byte.MaxValue>.</span></span>  
  
 <span data-ttu-id="74d66-379">例如，若要生成适用于创建随机密码的加密安全随机数字，请使用方法（如） <xref:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-379">For example, to generate a cryptographically secured random number suitable for creating a random password, use a method such as <xref:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples

 <span data-ttu-id="74d66-380">下面的示例演示如何使用 <xref:System.Random.NextBytes%2A> 方法来填充包含随机字节值的字节数组。</span><span class="sxs-lookup"><span data-stu-id="74d66-380">The following example demonstrates how to use the <xref:System.Random.NextBytes%2A> method to fill an array of bytes with random byte values.</span></span>  
 
 [!code-cpp[Classic Random.NextBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/CPP/source.cpp#1)]
 [!code-csharp-interactive[Classic Random.NextBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/CS/source.cs#1)]
 [!code-vb[Classic Random.NextBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="74d66-381"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="74d66-381"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="74d66-382">从 .NET Framework 版本2.0 开始，如果从派生类 <see cref="T:System.Random" /> 并重写 <see cref="M:System.Random.Sample" /> 方法，则 <see cref="M:System.Random.Sample" /> 不会在调用方法的基类实现时使用方法的派生类实现提供的分布 <see cref="M:System.Random.NextBytes(System.Byte[])" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-382">Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.</span></span> <span data-ttu-id="74d66-383">相反，将使用基类返回的统一分布 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-383">Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used.</span></span> <span data-ttu-id="74d66-384">此行为可改善类的整体性能 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-384">This behavior improves the overall performance of the <see cref="T:System.Random" /> class.</span></span> <span data-ttu-id="74d66-385">若要修改此行为以调用 <see cref="M:System.Random.Sample" /> 派生类中的方法，还必须重写 <see cref="M:System.Random.NextBytes(System.Byte[])" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-385">To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.</span></span></para></block>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextBytes(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NextBytes (buffer As Span(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NextBytes(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member NextBytes : Span&lt;byte&gt; -&gt; unit&#xA;override this.NextBytes : Span&lt;byte&gt; -&gt; unit" Usage="random.NextBytes buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="74d66-386">要用随机数填充的数组。</span><span class="sxs-lookup"><span data-stu-id="74d66-386">The array to be filled with random numbers.</span></span></param>
        <summary><span data-ttu-id="74d66-387">用随机数填充指定字节范围的元素。</span><span class="sxs-lookup"><span data-stu-id="74d66-387">Fills the elements of a specified span of bytes with random numbers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="74d66-388">字节跨度的每个元素都设置为一个大于或等于0且小于或等于的随机数字 <xref:System.Byte.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-388">Each element of the span of bytes is set to a random number greater than or equal to 0 and less than or equal to <xref:System.Byte.MaxValue>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextDouble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NextDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double NextDouble();" />
      <MemberSignature Language="F#" Value="abstract member NextDouble : unit -&gt; double&#xA;override this.NextDouble : unit -&gt; double" Usage="random.NextDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="74d66-389">返回一个大于或等于 0.0 且小于 1.0 的随机浮点数。</span><span class="sxs-lookup"><span data-stu-id="74d66-389">Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</span></span></summary>
        <returns><span data-ttu-id="74d66-390">大于或等于 0.0 且小于 1.0 的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="74d66-390">A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-391">此方法返回的随机数的实际上限为0.99999999999999978。</span><span class="sxs-lookup"><span data-stu-id="74d66-391">The actual upper bound of the random number returned by this method is 0.99999999999999978.</span></span>  
  
 <span data-ttu-id="74d66-392">若要在0.0 和1.0 以外的范围内检索随机浮点值，请参阅类主题中的 "在指定范围内检索浮点值" 部分 <xref:System.Random> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-392">To retrieve random floating-point values within a range other than 0.0 and 1.0, see the "Retrieve floating-point values in a specified range" section of the <xref:System.Random> class topic.</span></span>  
  
 <span data-ttu-id="74d66-393">此方法是受保护方法的公共版本 <xref:System.Random.Sample%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-393">This method is the public version of the protected method, <xref:System.Random.Sample%2A>.</span></span>  
  
   
  
## Examples  

 <span data-ttu-id="74d66-394">下面的示例使用 <xref:System.Random.NextDouble%2A> 方法来生成随机双精度序列。</span><span class="sxs-lookup"><span data-stu-id="74d66-394">The following example uses the <xref:System.Random.NextDouble%2A> method to generate sequences of random doubles.</span></span>  
  
 [!code-cpp[System.Random.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Ctor/CPP/ctor.cpp#1)]
 [!code-csharp[System.Random.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor.cs#1)]
 [!code-vb[System.Random.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor.vb#1)]  
  
 <span data-ttu-id="74d66-395">下面的示例调用 <xref:System.Random.NextDouble%2A> 方法以生成100的随机数字，并显示它们的频率分布。</span><span class="sxs-lookup"><span data-stu-id="74d66-395">The following example calls the <xref:System.Random.NextDouble%2A> method to generate 100 random numbers and displays their frequency distribution.</span></span>  
  
 [!code-csharp-interactive[System.Random.NextDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.random.nextdouble/cs/nextdouble1.cs#2)]
 [!code-vb[System.Random.NextDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.random.nextdouble/vb/nextdouble1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sample">
      <MemberSignature Language="C#" Value="protected virtual double Sample ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float64 Sample() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Sample" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Sample () As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual double Sample();" />
      <MemberSignature Language="F#" Value="abstract member Sample : unit -&gt; double&#xA;override this.Sample : unit -&gt; double" Usage="random.Sample " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="74d66-396">返回一个介于 0.0 和 1.0 之间的随机浮点数。</span><span class="sxs-lookup"><span data-stu-id="74d66-396">Returns a random floating-point number between 0.0 and 1.0.</span></span></summary>
        <returns><span data-ttu-id="74d66-397">大于或等于 0.0 且小于 1.0 的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="74d66-397">A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74d66-398">若要生成不同的随机分发或不同的随机数生成器原则，请从类派生一个类 <xref:System.Random> 并重写 <xref:System.Random.Sample%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-398">To produce a different random distribution or a different random number generator principle, derive a class from the <xref:System.Random> class and override the <xref:System.Random.Sample%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="74d66-399"><xref:System.Random.Sample%2A>方法为 `protected` ，这意味着只能在 <xref:System.Random> 类及其派生类中访问。</span><span class="sxs-lookup"><span data-stu-id="74d66-399">The <xref:System.Random.Sample%2A> method is `protected`, which means that it is accessible only within the <xref:System.Random> class and its derived classes.</span></span> <span data-ttu-id="74d66-400">若要从实例生成0到1之间的随机数字 <xref:System.Random> ，请调用 <xref:System.Random.NextDouble%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-400">To generate a random number between 0 and 1 from a <xref:System.Random> instance, call the <xref:System.Random.NextDouble%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74d66-401">下面的示例从派生一个类 <xref:System.Random> ，并重写 <xref:System.Random.Sample%2A> 方法以生成随机数的分布。</span><span class="sxs-lookup"><span data-stu-id="74d66-401">The following example derives a class from <xref:System.Random> and overrides the <xref:System.Random.Sample%2A> method to generate a distribution of random numbers.</span></span> <span data-ttu-id="74d66-402">此分布不同于基类的方法所生成的统一分布 <xref:System.Random.Sample%2A> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-402">This distribution is different than the uniform distribution generated by the <xref:System.Random.Sample%2A> method of the base class.</span></span>  
  
 [!code-cpp[System.Random.Sample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Sample/cpp/sampleex.cpp#1)]
 [!code-csharp[System.Random.Sample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Sample/CS/sample.cs#1)]
 [!code-vb[System.Random.Sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Sample/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="74d66-403">从 .NET Framework 版本2.0 开始，如果从派生类 <see cref="T:System.Random" /> 并重写 <see cref="M:System.Random.Sample" /> 方法，则 <see cref="M:System.Random.Sample" /> 不会在调用以下方法的基类实现时使用由方法的派生类实现提供的分发：</span><span class="sxs-lookup"><span data-stu-id="74d66-403">Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the following methods:</span></span> 
<span data-ttu-id="74d66-404">-   <see cref="M:System.Random.NextBytes(System.Byte[])" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-404">-   The <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.</span></span>  
  
<span data-ttu-id="74d66-405">-   <see cref="M:System.Random.Next" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="74d66-405">-   The <see cref="M:System.Random.Next" /> method.</span></span>  
  
<span data-ttu-id="74d66-406">- <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> 如果 (<paramref name="maxValue" />  -  <paramref name="minValue" />) 大于，则为方法 <see cref="F:System.Int32.MaxValue" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-406">-   The <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method, if (<paramref name="maxValue" /> - <paramref name="minValue" />) is greater than <see cref="F:System.Int32.MaxValue" />.</span></span>  
  
<span data-ttu-id="74d66-407">而是使用由基类提供的统一分布 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-407">Instead, the uniform distribution provided by the base <see cref="T:System.Random" /> class is used.</span></span> <span data-ttu-id="74d66-408">此行为可改善类的整体性能 <see cref="T:System.Random" /> 。</span><span class="sxs-lookup"><span data-stu-id="74d66-408">This behavior improves the overall performance of the <see cref="T:System.Random" /> class.</span></span> <span data-ttu-id="74d66-409">若要修改此行为以调用 <see cref="M:System.Random.Sample" /> 派生类中的方法的实现，还必须重写这三个成员的行为。</span><span class="sxs-lookup"><span data-stu-id="74d66-409">To modify this behavior to call the implementation of the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the behavior of these three members.</span></span> <span data-ttu-id="74d66-410">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="74d66-410">The example provides an illustration.</span></span></para></block>
        <altmember cref="M:System.Random.NextDouble" />
      </Docs>
    </Member>
  </Members>
</Type>
