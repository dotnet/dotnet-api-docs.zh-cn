<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86da2fd44db9ba19213c1c11970265595c16b8fb" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94455938" /></Metadata><TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AccessViolationException extends System.SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <TypeSignature Language="F#" Value="type AccessViolationException = class&#xA;    inherit SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f59f3-101">在试图读写受保护内存时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="f59f3-101">The exception that is thrown when there is an attempt to read or write protected memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f59f3-102">当非托管代码或不安全代码尝试对尚未分配的或不具有访问权限的内存进行读写操作时，会发生访问冲突。</span><span class="sxs-lookup"><span data-stu-id="f59f3-102">An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</span></span> <span data-ttu-id="f59f3-103">出现这种情况通常是因为指针具有错误的值。</span><span class="sxs-lookup"><span data-stu-id="f59f3-103">This usually occurs because a pointer has a bad value.</span></span> <span data-ttu-id="f59f3-104">并非所有通过无效指针的读或写操作都会导致访问冲突，所以访问冲突通常指示已经通过无效指针进行多次读或写操作，并且内存内容可能已损坏。</span><span class="sxs-lookup"><span data-stu-id="f59f3-104">Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</span></span> <span data-ttu-id="f59f3-105">因此，访问冲突几乎总是指示严重的编程错误。</span><span class="sxs-lookup"><span data-stu-id="f59f3-105">Thus, access violations almost always indicate serious programming errors.</span></span> <span data-ttu-id="f59f3-106"><xref:System.AccessViolationException>清楚地识别这些严重错误。</span><span class="sxs-lookup"><span data-stu-id="f59f3-106">An <xref:System.AccessViolationException> clearly identifies these serious errors.</span></span>

 <span data-ttu-id="f59f3-107">在完全由可验证托管代码组成的程序中，所有引用要么有效要么为 null，并且不可能访问冲突。</span><span class="sxs-lookup"><span data-stu-id="f59f3-107">In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</span></span> <span data-ttu-id="f59f3-108">任何尝试在可验证代码中引用空引用的操作都会引发 <xref:System.NullReferenceException> 异常。</span><span class="sxs-lookup"><span data-stu-id="f59f3-108">Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception.</span></span> <span data-ttu-id="f59f3-109"><xref:System.AccessViolationException>仅当可验证托管代码与非托管代码或不安全的托管代码进行交互时才会发生。</span><span class="sxs-lookup"><span data-stu-id="f59f3-109">An <xref:System.AccessViolationException> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</span></span>

## <a name="troubleshooting-accessviolationexception-exceptions"></a><span data-ttu-id="f59f3-110">AccessViolationException 异常疑难解答</span><span class="sxs-lookup"><span data-stu-id="f59f3-110">Troubleshooting AccessViolationException exceptions</span></span>
 <span data-ttu-id="f59f3-111"><xref:System.AccessViolationException>异常只能出现在不安全的托管代码中，或在可验证托管代码与非托管代码交互时出现：</span><span class="sxs-lookup"><span data-stu-id="f59f3-111">An <xref:System.AccessViolationException> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</span></span>

-   <span data-ttu-id="f59f3-112">在不安全的托管代码中发生的访问冲突可以表示为 <xref:System.NullReferenceException> 异常或 <xref:System.AccessViolationException> 例外，具体取决于平台。</span><span class="sxs-lookup"><span data-stu-id="f59f3-112">An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an <xref:System.AccessViolationException> exception, depending on the platform.</span></span>

-   <span data-ttu-id="f59f3-113">冒泡到托管代码的非托管代码中的访问冲突始终包装在异常中 <xref:System.AccessViolationException> 。</span><span class="sxs-lookup"><span data-stu-id="f59f3-113">An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <xref:System.AccessViolationException> exception.</span></span>

 <span data-ttu-id="f59f3-114">在任一情况下，都可以识别并更正异常的原因，如下所示 <xref:System.AccessViolationException> ：</span><span class="sxs-lookup"><span data-stu-id="f59f3-114">In either case, you can identify and correct the cause of the <xref:System.AccessViolationException> exception as follows:</span></span>

 <span data-ttu-id="f59f3-115">确保您尝试访问的内存已分配。</span><span class="sxs-lookup"><span data-stu-id="f59f3-115">Make sure that the memory that you are attempting to access has been allocated.</span></span>
 <span data-ttu-id="f59f3-116"><xref:System.AccessViolationException>异常始终由尝试访问受保护的内存（即，用于访问未分配的内存或不属于进程的内存）引发。</span><span class="sxs-lookup"><span data-stu-id="f59f3-116">An <xref:System.AccessViolationException> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</span></span>

 <span data-ttu-id="f59f3-117">自动内存管理是公共语言运行时提供的服务之一。</span><span class="sxs-lookup"><span data-stu-id="f59f3-117">Automatic memory management is one of the services that the common language runtime provides.</span></span> <span data-ttu-id="f59f3-118">如果托管代码与非托管代码提供相同的功能，你可能希望转到托管代码以利用此功能。</span><span class="sxs-lookup"><span data-stu-id="f59f3-118">If managed code provides the same functionality as your unmanaged code, you may wish to move to managed code to take advantage of this functionality.</span></span> <span data-ttu-id="f59f3-119">有关详细信息，请参阅 [Automatic Memory Management](/dotnet/standard/automatic-memory-management)。</span><span class="sxs-lookup"><span data-stu-id="f59f3-119">For more information, see [Automatic Memory Management](/dotnet/standard/automatic-memory-management).</span></span>

 <span data-ttu-id="f59f3-120">确保您尝试访问的内存未损坏。</span><span class="sxs-lookup"><span data-stu-id="f59f3-120">Make sure that the memory that you are attempting to access has not been corrupted.</span></span>
 <span data-ttu-id="f59f3-121">如果多次读或写操作时都遇到无效指针，则内存可能已损坏。</span><span class="sxs-lookup"><span data-stu-id="f59f3-121">If several read or write operations have occurred through bad pointers, memory may be corrupted.</span></span> <span data-ttu-id="f59f3-122">当读取或写入预定义缓冲区之外的地址时，通常会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="f59f3-122">This typically occurs when reading or writing to addresses outside of a predefined buffer.</span></span>

## <a name="accessviolationexception-and-trycatch-blocks"></a><span data-ttu-id="f59f3-123">AccessViolationException 和 try/catch 块</span><span class="sxs-lookup"><span data-stu-id="f59f3-123">AccessViolationException and try/catch blocks</span></span>
 <span data-ttu-id="f59f3-124">从 .NET Framework 4 开始， <xref:System.AccessViolationException> 如果异常发生在公共语言运行时所保留的内存之外，则由公共语言运行时引发的异常不会由 `catch` 结构化异常处理程序中的语句处理。</span><span class="sxs-lookup"><span data-stu-id="f59f3-124">Starting with .NET Framework 4, <xref:System.AccessViolationException> exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</span></span> <span data-ttu-id="f59f3-125">若要处理此类 <xref:System.AccessViolationException> 异常，请将特性应用于 <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> 引发异常的方法。</span><span class="sxs-lookup"><span data-stu-id="f59f3-125">To handle such an <xref:System.AccessViolationException> exception, apply the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown.</span></span> <span data-ttu-id="f59f3-126">此更改不会影响 <xref:System.AccessViolationException> 用户代码引发的异常，但可以继续通过语句来捕获异常 `catch` 。</span><span class="sxs-lookup"><span data-stu-id="f59f3-126">This change does not affect <xref:System.AccessViolationException> exceptions thrown by user code, which can continue to be caught by a `catch` statement.</span></span> <span data-ttu-id="f59f3-127">对于您要在 .NET Framework 4 上重新编译和运行的 .NET Framework 以前版本编写的代码，可以将该 [\<legacyCorruptedStateExceptionsPolicy>](/dotnet/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element) 元素添加到应用的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="f59f3-127">For code written for previous versions of .NET Framework that you want to recompile and run without modification on .NET Framework 4, you can add the [\<legacyCorruptedStateExceptionsPolicy>](/dotnet/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element) element to your app's configuration file.</span></span> <span data-ttu-id="f59f3-128">请注意，如果已为或事件定义处理程序，则还可以接收例外通知 <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="f59f3-128">Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> or <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>

## <a name="version-information"></a><span data-ttu-id="f59f3-129">版本信息</span><span class="sxs-lookup"><span data-stu-id="f59f3-129">Version Information</span></span>
 <span data-ttu-id="f59f3-130">.NET Framework 2.0 及更高版本上将引发此异常。</span><span class="sxs-lookup"><span data-stu-id="f59f3-130">This exception is thrown on .NET Framework 2.0 and later versions.</span></span> <span data-ttu-id="f59f3-131">在早期版本的 .NET Framework 中，非托管代码或不安全的托管代码中的访问冲突由 <xref:System.NullReferenceException> 托管代码中的表示。</span><span class="sxs-lookup"><span data-stu-id="f59f3-131">In earlier versions of .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code.</span></span> <span data-ttu-id="f59f3-132"><xref:System.NullReferenceException>当在可验证托管代码中取消引用空引用、不涉及数据损坏的情况，并且没有办法区分版本1.0 或1.1 中的两种情况时，也会引发。</span><span class="sxs-lookup"><span data-stu-id="f59f3-132">A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</span></span>

 <span data-ttu-id="f59f3-133">管理员可以允许选定的应用程序恢复到 .NET Framework 版本1.1 的行为。</span><span class="sxs-lookup"><span data-stu-id="f59f3-133">Administrators can allow selected applications to revert to the behavior of .NET Framework version 1.1.</span></span> <span data-ttu-id="f59f3-134">在应用程序的配置文件的 " [ &lt; 运行时 &gt; 元素](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element)" 部分中放置以下行：</span><span class="sxs-lookup"><span data-stu-id="f59f3-134">Place the following line in the [&lt;runtime&gt; Element](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) section of the configuration file for the application:</span></span>

```
<legacyNullReferenceExceptionPolicy enabled = "1"/>
```

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="f59f3-135">处理和引发异常</span><span class="sxs-lookup"><span data-stu-id="f59f3-135">Handling and Throwing Exceptions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f59f3-136">初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f59f3-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f59f3-137">使用说明错误的系统提供的消息初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f59f3-137">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f59f3-138">此构造函数将 <xref:System.Exception.Message%2A> 新实例的属性初始化为系统提供的描述错误的消息，如 "尝试读取或写入受保护的内存。</span><span class="sxs-lookup"><span data-stu-id="f59f3-138">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</span></span> <span data-ttu-id="f59f3-139">这通常表示其他内存已损坏。</span><span class="sxs-lookup"><span data-stu-id="f59f3-139">This is often an indication that other memory has been corrupted."</span></span> <span data-ttu-id="f59f3-140">此消息会考虑当前系统区域性。</span><span class="sxs-lookup"><span data-stu-id="f59f3-140">This message takes into account the current system culture.</span></span>

 <span data-ttu-id="f59f3-141">下表显示了 <xref:System.AccessViolationException> 实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="f59f3-141">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>

|<span data-ttu-id="f59f3-142">properties</span><span class="sxs-lookup"><span data-stu-id="f59f3-142">Property</span></span>|<span data-ttu-id="f59f3-143">值</span><span class="sxs-lookup"><span data-stu-id="f59f3-143">Value</span></span>|
|--------------|-----------|
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="f59f3-144">`null`.</span><span class="sxs-lookup"><span data-stu-id="f59f3-144">`null`.</span></span>|
|<xref:System.Exception.Message%2A>|<span data-ttu-id="f59f3-145">本地化的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="f59f3-145">The localized error message string.</span></span>|

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="f59f3-146">处理和引发异常</span><span class="sxs-lookup"><span data-stu-id="f59f3-146">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string -&gt; AccessViolationException" Usage="new System.AccessViolationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="f59f3-147">描述该异常的消息。</span><span class="sxs-lookup"><span data-stu-id="f59f3-147">The message that describes the exception.</span></span> <span data-ttu-id="f59f3-148">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</span><span class="sxs-lookup"><span data-stu-id="f59f3-148">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span></param>
        <summary><span data-ttu-id="f59f3-149">使用说明错误的指定消息初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f59f3-149">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f59f3-150">下表显示了 <xref:System.AccessViolationException> 实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="f59f3-150">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>

|<span data-ttu-id="f59f3-151">properties</span><span class="sxs-lookup"><span data-stu-id="f59f3-151">Property</span></span>|<span data-ttu-id="f59f3-152">值</span><span class="sxs-lookup"><span data-stu-id="f59f3-152">Value</span></span>|
|--------------|-----------|
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="f59f3-153">`null`.</span><span class="sxs-lookup"><span data-stu-id="f59f3-153">`null`.</span></span>|
|<xref:System.Exception.Message%2A>|<span data-ttu-id="f59f3-154">`message` 中指定的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="f59f3-154">The error message string specified in `message`.</span></span>|

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="f59f3-155">处理和引发异常</span><span class="sxs-lookup"><span data-stu-id="f59f3-155">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; AccessViolationException" Usage="new System.AccessViolationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="f59f3-156">包含序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="f59f3-156">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span></span></param>
        <param name="context"><span data-ttu-id="f59f3-157"><see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="f59f3-157">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="f59f3-158">用序列化数据初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f59f3-158">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f59f3-159">在反序列化期间调用此构造函数以重新构造在流上传输的异常对象。</span><span class="sxs-lookup"><span data-stu-id="f59f3-159">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="f59f3-160">有关详细信息，请参阅 [XML 和 SOAP 序列化](/dotnet/standard/serialization/xml-and-soap-serialization)。</span><span class="sxs-lookup"><span data-stu-id="f59f3-160">For more information, see [XML and SOAP Serialization](/dotnet/standard/serialization/xml-and-soap-serialization).</span></span>

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/serialization/xml-and-soap-serialization"><span data-ttu-id="f59f3-161">XML 和 SOAP 序列化</span><span class="sxs-lookup"><span data-stu-id="f59f3-161">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string * Exception -&gt; AccessViolationException" Usage="new System.AccessViolationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="f59f3-162">描述该异常的消息。</span><span class="sxs-lookup"><span data-stu-id="f59f3-162">The message that describes the exception.</span></span> <span data-ttu-id="f59f3-163">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</span><span class="sxs-lookup"><span data-stu-id="f59f3-163">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span></param>
        <param name="innerException"><span data-ttu-id="f59f3-164">导致当前异常的异常。</span><span class="sxs-lookup"><span data-stu-id="f59f3-164">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="f59f3-165">如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</span><span class="sxs-lookup"><span data-stu-id="f59f3-165">If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="f59f3-166">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f59f3-166">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="f59f3-167">因前一个异常而直接引发的异常应在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。</span><span class="sxs-lookup"><span data-stu-id="f59f3-167">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="f59f3-168"><xref:System.Exception.InnerException%2A> 属性将返回传递给构造函数的同一值；如果 <xref:System.Exception.InnerException%2A> 属性不向构造函数提供内部异常值，则返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="f59f3-168">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>

 <span data-ttu-id="f59f3-169">下表显示了 <xref:System.AccessViolationException> 实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="f59f3-169">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>

|<span data-ttu-id="f59f3-170">properties</span><span class="sxs-lookup"><span data-stu-id="f59f3-170">Property</span></span>|<span data-ttu-id="f59f3-171">值</span><span class="sxs-lookup"><span data-stu-id="f59f3-171">Value</span></span>|
|--------------|-----------|
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="f59f3-172">`null`.</span><span class="sxs-lookup"><span data-stu-id="f59f3-172">`null`.</span></span>|
|<xref:System.Exception.Message%2A>|<span data-ttu-id="f59f3-173">`message` 中指定的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="f59f3-173">The error message string specified in `message`.</span></span>|

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/exceptions/"><span data-ttu-id="f59f3-174">处理和引发异常</span><span class="sxs-lookup"><span data-stu-id="f59f3-174">Handling and Throwing Exceptions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
