<Type Name="EventHandler&lt;TEventArgs&gt;" FullName="System.EventHandler&lt;TEventArgs&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aaafb228cbad8e26d97baf44fd73a40e51056f40" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89744265" /></Metadata><TypeSignature Language="C#" Value="public delegate void EventHandler&lt;TEventArgs&gt;(object sender, TEventArgs e);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventHandler`1&lt;TEventArgs&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.EventHandler`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub EventHandler(Of TEventArgs)(sender As Object, e As TEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEventArgs&gt;&#xA;public delegate void EventHandler(System::Object ^ sender, TEventArgs e);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type EventHandler&lt;'EventArgs&gt; = delegate of obj * 'EventArgs -&gt; unit" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public delegate void EventHandler&lt;TEventArgs&gt;(object? sender, TEventArgs e);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public delegate void EventHandler&lt;TEventArgs&gt;(object sender, TEventArgs e) where TEventArgs : EventArgs;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed EventHandler`1&lt;(class System.EventArgs) TEventArgs&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEventArgs&gt;&#xA; where TEventArgs : EventArgspublic delegate void EventHandler(System::Object ^ sender, TEventArgs e);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
  <TypeSignature Language="F#" Value="type EventHandler&lt;'EventArgs (requires 'EventArgs :&gt; EventArgs)&gt; = delegate of obj * 'EventArgs -&gt; unit" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed EventHandler`1&lt;TEventArgs&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TEventArgs" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="TEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TEventArgs"><span data-ttu-id="1afb6-101">事件生成的事件数据的类型。</span><span class="sxs-lookup"><span data-stu-id="1afb6-101">The type of the event data generated by the event.</span></span></typeparam>
    <param name="sender"><span data-ttu-id="1afb6-102">事件源。</span><span class="sxs-lookup"><span data-stu-id="1afb6-102">The source of the event.</span></span></param>
    <param name="e"><span data-ttu-id="1afb6-103">包含事件数据的对象。</span><span class="sxs-lookup"><span data-stu-id="1afb6-103">An object that contains the event data.</span></span></param>
    <summary><span data-ttu-id="1afb6-104">表示当事件提供数据时将处理该事件的方法。</span><span class="sxs-lookup"><span data-stu-id="1afb6-104">Represents the method that will handle an event when the event provides data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1afb6-105">.NET Framework 中的事件模型基于事件委托，该委托将事件与其处理程序连接。</span><span class="sxs-lookup"><span data-stu-id="1afb6-105">The event model in the .NET Framework is based on having an event delegate that connects an event with its handler.</span></span> <span data-ttu-id="1afb6-106">若要引发事件，需要两个元素：</span><span class="sxs-lookup"><span data-stu-id="1afb6-106">To raise an event, two elements are needed:</span></span>  
  
-   <span data-ttu-id="1afb6-107">一个委托，该委托引用提供对事件的响应的方法。</span><span class="sxs-lookup"><span data-stu-id="1afb6-107">A delegate that refers to a method that provides the response to the event.</span></span>  
  
-   <span data-ttu-id="1afb6-108">如果事件提供数据，则为包含事件数据的类（可选）。</span><span class="sxs-lookup"><span data-stu-id="1afb6-108">Optionally, a class that holds the event data, if the event provides data.</span></span>  
  
 <span data-ttu-id="1afb6-109">委托是一种类型，它定义签名，即方法的返回值类型和参数列表类型。</span><span class="sxs-lookup"><span data-stu-id="1afb6-109">The delegate is a type that defines a signature, that is, the return value type and parameter list types for a method.</span></span> <span data-ttu-id="1afb6-110">您可以使用委托类型声明一个变量，该变量可引用具有与委托相同的签名的任何方法。</span><span class="sxs-lookup"><span data-stu-id="1afb6-110">You can use the delegate type to declare a variable that can refer to any method with the same signature as the delegate.</span></span>  
  
 <span data-ttu-id="1afb6-111">事件处理程序委托的标准签名定义不返回值的方法。</span><span class="sxs-lookup"><span data-stu-id="1afb6-111">The standard signature of an event handler delegate defines a method that does not return a value.</span></span> <span data-ttu-id="1afb6-112">此方法的第一个参数的类型为 <xref:System.Object> ，并引用引发事件的实例。</span><span class="sxs-lookup"><span data-stu-id="1afb6-112">This method's first parameter is of type <xref:System.Object> and refers to the instance that raises the event.</span></span> <span data-ttu-id="1afb6-113">它的第二个参数从类型派生 <xref:System.EventArgs> ，并保存事件数据。</span><span class="sxs-lookup"><span data-stu-id="1afb6-113">Its second parameter is derived from type <xref:System.EventArgs> and holds the event data.</span></span> <span data-ttu-id="1afb6-114">如果事件不生成事件数据，第二个参数就是字段的值 <xref:System.EventArgs.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="1afb6-114">If the event does not generate event data, the second parameter is simply the value of the <xref:System.EventArgs.Empty?displayProperty=nameWithType> field.</span></span> <span data-ttu-id="1afb6-115">否则，第二个参数是从派生的类型 <xref:System.EventArgs> ，提供保存事件数据所需的任何字段或属性。</span><span class="sxs-lookup"><span data-stu-id="1afb6-115">Otherwise, the second parameter is a type derived from <xref:System.EventArgs> and supplies any fields or properties needed to hold the event data.</span></span>  
  
 <span data-ttu-id="1afb6-116"><xref:System.EventHandler%601>委托是一个预定义的委托，它表示生成数据的事件的事件处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="1afb6-116">The <xref:System.EventHandler%601> delegate is a predefined delegate that represents an event handler method for an event that generates data.</span></span> <span data-ttu-id="1afb6-117">使用的优点 <xref:System.EventHandler%601> 是，如果事件生成事件数据，则不需要编写自己的自定义委托代码。</span><span class="sxs-lookup"><span data-stu-id="1afb6-117">The advantage of using <xref:System.EventHandler%601> is that you do not need to code your own custom delegate if your event generates event data.</span></span> <span data-ttu-id="1afb6-118">只需提供事件数据对象的类型作为泛型参数。</span><span class="sxs-lookup"><span data-stu-id="1afb6-118">You simply provide the type of the event data object as the generic parameter.</span></span>  
  
 <span data-ttu-id="1afb6-119">若要将事件与将处理事件的方法相关联，请将委托的实例添加到事件。</span><span class="sxs-lookup"><span data-stu-id="1afb6-119">To associate the event with the method that will handle the event, add an instance of the delegate to the event.</span></span> <span data-ttu-id="1afb6-120">除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1afb6-120">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span>  
  
 <span data-ttu-id="1afb6-121">有关事件处理程序委托的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="1afb6-121">For more information about event handler delegates, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1afb6-122">下面的示例演示一个名为的事件 `ThresholdReached` 。</span><span class="sxs-lookup"><span data-stu-id="1afb6-122">The following example shows an event named `ThresholdReached`.</span></span> <span data-ttu-id="1afb6-123">事件与委托相关联 <xref:System.EventHandler%601> 。</span><span class="sxs-lookup"><span data-stu-id="1afb6-123">The event is associated with an <xref:System.EventHandler%601> delegate.</span></span>  
  
 [!code-cpp[EventsOverview#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventsoverview/cpp/programwithdata.cpp#6)]
 [!code-csharp[EventsOverview#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventsoverview/cs/programwithdata.cs#6)]
 [!code-vb[EventsOverview#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventsoverview/vb/module1withdata.vb#6)]  
  
 ]]></format>
    </remarks>
    <altCompliant cref="T:System.EventHandler" />
    <altmember cref="T:System.EventHandler" />
    <altmember cref="T:System.EventArgs" />
    <altmember cref="T:System.Delegate" />
    <related type="Article" href="/dotnet/standard/events/"><span data-ttu-id="1afb6-124">处理和引发事件</span><span class="sxs-lookup"><span data-stu-id="1afb6-124">Handling and Raising Events</span></span></related>
    <related type="Article" href="/dotnet/standard/events/how-to-raise-and-consume-events"><span data-ttu-id="1afb6-125">如何：引发事件和使用事件</span><span class="sxs-lookup"><span data-stu-id="1afb6-125">How to: Raise and Consume Events</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/events/"><span data-ttu-id="1afb6-126">事件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="1afb6-126">Events (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/csharp/programming-guide/events/"><span data-ttu-id="1afb6-127">事件（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="1afb6-127">Events (C# Programming Guide)</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/apps/hh758286(v=win.10)"><span data-ttu-id="1afb6-128">事件和路由事件概述（Windows 应用商店应用）</span><span class="sxs-lookup"><span data-stu-id="1afb6-128">Events and routed events overview (Windows store apps)</span></span></related>
  </Docs>
</Type>
