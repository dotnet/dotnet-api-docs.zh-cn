<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4fe15c08e9e98d178983a26b4db2489f8a130ac" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100294742" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="73fe2-101">要比较的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="73fe2-101">The type of objects to compare.</span></span></typeparam>
    <summary><span data-ttu-id="73fe2-102">定义由值类型或类实现的通用方法，旨在创建特定于类型的方法以确定实例的质量。</span><span class="sxs-lookup"><span data-stu-id="73fe2-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73fe2-103">此接口由其值可以等同的类型实现 (例如，数值和字符串类) 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="73fe2-104">值类型或类实现 <xref:System.IEquatable%601.Equals%2A> 方法，以创建适合用于确定实例相等性的类型特定方法。</span><span class="sxs-lookup"><span data-stu-id="73fe2-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="73fe2-105"><xref:System.IComparable%601>接口定义 <xref:System.IComparable%601.CompareTo%2A> 方法，该方法确定实现类型的实例的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="73fe2-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="73fe2-106"><xref:System.IEquatable%601>接口定义 <xref:System.IEquatable%601.Equals%2A> 方法，该方法确定实现类型的实例的相等性。</span><span class="sxs-lookup"><span data-stu-id="73fe2-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="73fe2-107"><xref:System.IEquatable%601>当在、、和等 <xref:System.Collections.Generic.Dictionary%602> <xref:System.Collections.Generic.List%601> <xref:System.Collections.Generic.LinkedList%601> 方法中测试相等性时， `Contains` `IndexOf` `LastIndexOf` 泛型集合 `Remove` 对象（如、和）使用接口。</span><span class="sxs-lookup"><span data-stu-id="73fe2-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="73fe2-108">应为可能存储在泛型集合中的任何对象实现它。</span><span class="sxs-lookup"><span data-stu-id="73fe2-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="73fe2-109">请参阅方法的示例 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="73fe2-110">将接口的类型参数替换 <see cref="T:System.IEquatable`1" /> 为实现此接口的类型。</span><span class="sxs-lookup"><span data-stu-id="73fe2-110">Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="73fe2-111">如果实现 <see cref="T:System.IEquatable`1" /> ，则还应重写和的基类实现， <see cref="M:System.Object.Equals(System.Object)" /> <see cref="M:System.Object.GetHashCode" /> 以使它们的行为与方法的行为一致 <see cref="M:System.IEquatable`1.Equals(`0)" /> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-111">If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="73fe2-112">如果确实要重写 <see cref="M:System.Object.Equals(System.Object)" /> ，则也会在对类的静态方法的调用中调用重写的实现 <see langword="Equals(System.Object, System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-112">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="73fe2-113">此外，还应重载 <see langword="op_Equality" /> 和 <see langword="op_Inequality" /> 运算符。</span><span class="sxs-lookup"><span data-stu-id="73fe2-113">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="73fe2-114">这可以确保相等性的所有测试都返回一致的结果。</span><span class="sxs-lookup"><span data-stu-id="73fe2-114">This ensures that all tests for equality return consistent results.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="73fe2-115">有关替代的信息 <see cref="M:System.Object.Equals(System.Object)" /> ，请参阅 <see cref="M:System.Object.Equals(System.Object)" /> 文章。</span><span class="sxs-lookup"><span data-stu-id="73fe2-115">For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="73fe2-116">对于值类型，应始终实现 <see cref="T:System.IEquatable`1" /> 并重写 <see cref="M:System.Object.Equals(System.Object)" /> 以获得更好的性能。</span><span class="sxs-lookup"><span data-stu-id="73fe2-116">For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance.</span></span> <span data-ttu-id="73fe2-117"><see cref="M:System.Object.Equals(System.Object)" /> 框值类型并依赖于反射来比较两个值是否相等。</span><span class="sxs-lookup"><span data-stu-id="73fe2-117"><see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality.</span></span> <span data-ttu-id="73fe2-118">的实现 <see cref="M:System.IEquatable`1.Equals(`0)" /> 和的重写都 <see cref="M:System.Object.Equals(System.Object)" /> 应返回一致的结果。</span><span class="sxs-lookup"><span data-stu-id="73fe2-118">Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.</span></span>  
  
<span data-ttu-id="73fe2-119">如果实现 <see cref="T:System.IEquatable`1" /> ，则还应实现， <see cref="T:System.IComparable`1" /> 前提是可以对类型的实例进行排序或排序。</span><span class="sxs-lookup"><span data-stu-id="73fe2-119">If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted.</span></span> <span data-ttu-id="73fe2-120">如果你的类型实现 <see cref="T:System.IComparable`1" /> ，你几乎始终都实现 <see cref="T:System.IEquatable`1" /> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-120">If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</span></span></para>
      <para><span data-ttu-id="73fe2-121">请注意，在某些设计中，类型支持订单关系，但相等性可能不同于排序关系。</span><span class="sxs-lookup"><span data-stu-id="73fe2-121">Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</span></span> <span data-ttu-id="73fe2-122">请考虑一个 `Person` 按字母顺序排序的类。</span><span class="sxs-lookup"><span data-stu-id="73fe2-122">Consider a `Person` class where you sort alphabetically.</span></span> <span data-ttu-id="73fe2-123">具有相同名称的两个人对相同，但不是同一个人。</span><span class="sxs-lookup"><span data-stu-id="73fe2-123">Two people with the same name sort the same, but are not the same person.</span></span></para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberSignature Language="C#" Value="public bool Equals (T? other);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="73fe2-124">一个与此对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="73fe2-124">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="73fe2-125">指示当前对象是否等于同一类型的另一个对象。</span><span class="sxs-lookup"><span data-stu-id="73fe2-125">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="73fe2-126">如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="73fe2-126"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="73fe2-127">方法的实现 <xref:System.IEquatable%601.Equals%2A> 旨在执行与类型的另一个对象相等 `T` 的测试，与当前对象的类型相同。</span><span class="sxs-lookup"><span data-stu-id="73fe2-127">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="73fe2-128">此 <xref:System.IEquatable%601.Equals(%600)> 方法在以下情况下调用：</span><span class="sxs-lookup"><span data-stu-id="73fe2-128">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="73fe2-129">`Equals`调用方法时， `other` 参数是类型的强类型对象 `T` 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-129">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="73fe2-130"> (如果 `other` 的类型不是 `T` ，则 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 调用基方法。</span><span class="sxs-lookup"><span data-stu-id="73fe2-130">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="73fe2-131">在这两种方法中， <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 提供了略微更好的性能。 ) </span><span class="sxs-lookup"><span data-stu-id="73fe2-131">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="73fe2-132">当调用多个泛型集合对象的搜索方法时。</span><span class="sxs-lookup"><span data-stu-id="73fe2-132">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="73fe2-133">其中一些类型及其方法包括：</span><span class="sxs-lookup"><span data-stu-id="73fe2-133">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="73fe2-134">方法的一些泛型重载 <xref:System.Array.BinarySearch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-134">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="73fe2-135">类的搜索方法 <xref:System.Collections.Generic.List%601> ，包括、、 <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType> <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType> 和 <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-135">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="73fe2-136">类的搜索方法 <xref:System.Collections.Generic.Dictionary%602> ，包括 <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> 和 <xref:System.Collections.Generic.IDictionary%602.Remove%2A> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-136">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="73fe2-137">泛型类的搜索方法 <xref:System.Collections.Generic.LinkedList%601> ，包括 <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> 和 <xref:System.Collections.Generic.LinkedList%601.Remove%2A> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-137">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="73fe2-138">换句话说，若要处理某个类的对象将存储在数组或泛型集合对象中的可能性，最好实现此方法， <xref:System.IEquatable%601> 以便能够轻松地标识和操作该对象。</span><span class="sxs-lookup"><span data-stu-id="73fe2-138">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="73fe2-139">实现方法时 <xref:System.IEquatable%601.Equals%2A> ，请为泛型类型参数指定的类型适当地定义相等性。</span><span class="sxs-lookup"><span data-stu-id="73fe2-139">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="73fe2-140">例如，如果类型参数为，则 <xref:System.Int32> 为 2 32 位有符号整数的比较适当地定义相等性。</span><span class="sxs-lookup"><span data-stu-id="73fe2-140">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="73fe2-141">下面的示例演示 `Person` 实现 <xref:System.IEquatable%601> 并具有两个属性（和）的类的分部 `LastName` 实现 `SSN` 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-141">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="73fe2-142"><xref:System.IEquatable%601.Equals%2A> `True` 如果 `SSN` 两个对象的属性相同，则该方法返回 `Person` ; 否则返回 `False` 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-142">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="73fe2-143">`Person` 然后，可以将对象存储在 <xref:System.Collections.Generic.List%601> 对象中，并可通过方法进行标识 `Contains` ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="73fe2-143">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="73fe2-144">如果实现 <see cref="M:System.IEquatable`1.Equals(`0)" /> ，则还应重写和的基类实现， <see cref="M:System.Object.Equals(System.Object)" /> <see cref="M:System.Object.GetHashCode" /> 以使它们的行为与方法的行为一致 <see cref="M:System.IEquatable`1.Equals(`0)" /> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-144">If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method.</span></span> <span data-ttu-id="73fe2-145">如果确实要重写 <see cref="M:System.Object.Equals(System.Object)" /> ，则也会在对类的静态方法的调用中调用重写的实现 <see langword="Equals(System.Object, System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="73fe2-145">If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class.</span></span> <span data-ttu-id="73fe2-146">此外，还应重载 <see langword="op_Equality" /> 和 <see langword="op_Inequality" /> 运算符。</span><span class="sxs-lookup"><span data-stu-id="73fe2-146">In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators.</span></span> <span data-ttu-id="73fe2-147">这可确保所有相等测试都返回一致的结果，如示例所示。</span><span class="sxs-lookup"><span data-stu-id="73fe2-147">This ensures that all tests for equality return consistent results, which the example illustrates.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
