<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e2f8e20e26e9cdab2e91358ddc591b42b904957a" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94451284" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <summary>定义由值类型或类实现的通用方法，旨在创建特定于类型的方法以确定实例的质量。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口由其值可以等同的类型实现 (例如，数值和字符串类) 。 值类型或类实现 <xref:System.IEquatable%601.Equals%2A> 方法，以创建适合用于确定实例相等性的类型特定方法。  
  
> [!NOTE]
>  <xref:System.IComparable%601>接口定义 <xref:System.IComparable%601.CompareTo%2A> 方法，该方法确定实现类型的实例的排序顺序。 <xref:System.IEquatable%601>接口定义 <xref:System.IEquatable%601.Equals%2A> 方法，该方法确定实现类型的实例的相等性。  
  
 <xref:System.IEquatable%601>当在、、和等 <xref:System.Collections.Generic.Dictionary%602> <xref:System.Collections.Generic.List%601> <xref:System.Collections.Generic.LinkedList%601> 方法中测试相等性时， `Contains` `IndexOf` `LastIndexOf` 泛型集合 `Remove` 对象（如、和）使用接口。 应为可能存储在泛型集合中的任何对象实现它。  
  
   
  
## Examples  
 请参阅方法的示例 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>将接口的类型参数替换 <see cref="T:System.IEquatable`1" /> 为实现此接口的类型。  
  
如果实现 <see cref="T:System.IEquatable`1" /> ，则还应重写和的基类实现， <see cref="M:System.Object.Equals(System.Object)" /> <see cref="M:System.Object.GetHashCode" /> 以使它们的行为与方法的行为一致 <see cref="M:System.IEquatable`1.Equals(`0)" /> 。 如果确实要重写 <see cref="M:System.Object.Equals(System.Object)" /> ，则也会在对类的静态方法的调用中调用重写的实现 <see langword="Equals(System.Object, System.Object)" /> 。 此外，还应重载 <see langword="op_Equality" /> 和 <see langword="op_Inequality" /> 运算符。 这可以确保相等性的所有测试都返回一致的结果。  
  
 <block subset="none" type="note"><para>  
 有关替代的信息 <see cref="M:System.Object.Equals(System.Object)" /> ，请参阅 <see cref="M:System.Object.Equals(System.Object)" /> 文章。  
  
</para></block>  
  
 对于值类型，应始终实现 <see cref="T:System.IEquatable`1" /> 并重写 <see cref="M:System.Object.Equals(System.Object)" /> 以获得更好的性能。 <see cref="M:System.Object.Equals(System.Object)" /> 框值类型并依赖于反射来比较两个值是否相等。 的实现 <see cref="M:System.IEquatable`1.Equals(`0)" /> 和的重写都 <see cref="M:System.Object.Equals(System.Object)" /> 应返回一致的结果。  
  
如果实现 <see cref="T:System.IEquatable`1" /> ，则还应实现， <see cref="T:System.IComparable`1" /> 前提是可以对类型的实例进行排序或排序。 如果你的类型实现 <see cref="T:System.IComparable`1" /> ，你几乎始终都实现 <see cref="T:System.IEquatable`1" /> 。</para>
      <para>请注意，在某些设计中，类型支持订单关系，但相等性可能不同于排序关系。 请考虑一个 `Person` 按字母顺序排序的类。 具有相同名称的两个人对相同，但不是同一个人。</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">一个与此对象进行比较的对象。</param>
        <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
        <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法的实现 <xref:System.IEquatable%601.Equals%2A> 旨在执行与类型的另一个对象相等 `T` 的测试，与当前对象的类型相同。 此 <xref:System.IEquatable%601.Equals(%600)> 方法在以下情况下调用：  
  
-   `Equals`调用方法时， `other` 参数是类型的强类型对象 `T` 。  (如果 `other` 的类型不是 `T` ，则 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 调用基方法。 在这两种方法中， <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 提供了略微更好的性能。 )   
  
-   当调用多个泛型集合对象的搜索方法时。 其中一些类型及其方法包括：  
  
    -   方法的一些泛型重载 <xref:System.Array.BinarySearch%2A> 。  
  
    -   类的搜索方法 <xref:System.Collections.Generic.List%601> ，包括、、 <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType> <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType> 和 <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType> 。  
  
    -   类的搜索方法 <xref:System.Collections.Generic.Dictionary%602> ，包括 <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> 和 <xref:System.Collections.Generic.IDictionary%602.Remove%2A> 。  
  
    -   泛型类的搜索方法 <xref:System.Collections.Generic.LinkedList%601> ，包括 <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> 和 <xref:System.Collections.Generic.LinkedList%601.Remove%2A> 。  
  
 换句话说，若要处理某个类的对象将存储在数组或泛型集合对象中的可能性，最好实现此方法， <xref:System.IEquatable%601> 以便能够轻松地标识和操作该对象。  
  
 实现方法时 <xref:System.IEquatable%601.Equals%2A> ，请为泛型类型参数指定的类型适当地定义相等性。 例如，如果类型参数为，则 <xref:System.Int32> 为 2 32 位有符号整数的比较适当地定义相等性。  
  
   
  
## Examples  
 下面的示例演示 `Person` 实现 <xref:System.IEquatable%601> 并具有两个属性（和）的类的分部 `LastName` 实现 `SSN` 。 <xref:System.IEquatable%601.Equals%2A> `True` 如果 `SSN` 两个对象的属性相同，则该方法返回 `Person` ; 否则返回 `False` 。  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` 然后，可以将对象存储在 <xref:System.Collections.Generic.List%601> 对象中，并可通过方法进行标识 `Contains` ，如下面的示例所示。  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果实现 <see cref="M:System.IEquatable`1.Equals(`0)" /> ，则还应重写和的基类实现， <see cref="M:System.Object.Equals(System.Object)" /> <see cref="M:System.Object.GetHashCode" /> 以使它们的行为与方法的行为一致 <see cref="M:System.IEquatable`1.Equals(`0)" /> 。 如果确实要重写 <see cref="M:System.Object.Equals(System.Object)" /> ，则也会在对类的静态方法的调用中调用重写的实现 <see langword="Equals(System.Object, System.Object)" /> 。 此外，还应重载 <see langword="op_Equality" /> 和 <see langword="op_Inequality" /> 运算符。 这可确保所有相等测试都返回一致的结果，如示例所示。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
