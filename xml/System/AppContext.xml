<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="257f8b16fadc5f75d3bbd6cf7f0a18321325163d" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94449855" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed AppContext extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.AppContext" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e9fa0-101">提供用于设置和检索应用程序上下文相关数据的成员。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-101">Provides members for setting and retrieving data about an application's context.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e9fa0-102"><xref:System.AppContext>类使库编写器可为其用户提供新功能的统一退出机制。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-102">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="e9fa0-103">它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-103">It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="e9fa0-104">对现有功能进行更改时，此功能通常很重要。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-104">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="e9fa0-105">相反，已有新功能隐式选择加入。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-105">Conversely, there is already an implicit opt-in for new functionality.</span></span>

## <a name="appcontext-for-library-developers"></a><span data-ttu-id="e9fa0-106">适用于库开发人员的 AppContext</span><span class="sxs-lookup"><span data-stu-id="e9fa0-106">AppContext for library developers</span></span>
 <span data-ttu-id="e9fa0-107">库使用 <xref:System.AppContext> 类来定义和公开兼容性开关，而库用户可以设置这些开关以影响库行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-107">Libraries use  the <xref:System.AppContext> class to define and expose compatibility switches, while library users can set those switches to affect the library behavior.</span></span> <span data-ttu-id="e9fa0-108">默认情况下，库提供新功能；如果设置了开关，则只更改新功能（即，它们提供以前的功能）。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-108">By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</span></span>  <span data-ttu-id="e9fa0-109">这允许库为现有 API 提供新行为，同时继续支持依赖于先前行为的调用方。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-109">This allows libraries to provide new behavior for an existing API while continuing to support callers who depend on the previous behavior.</span></span>

### <a name="define-the-switch-name"></a><span data-ttu-id="e9fa0-110">定义开关名称</span><span class="sxs-lookup"><span data-stu-id="e9fa0-110">Define the switch name</span></span>
 <span data-ttu-id="e9fa0-111">若要允许库的使用者选择不更改行为，最常见的方法是定义命名开关。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-111">The most common way to allow consumers of your library to opt out of a change of behavior is to define a named switch.</span></span>  <span data-ttu-id="e9fa0-112">其 `value` 元素是一个名称/值对，它包含开关的名称及其 <xref:System.Boolean> 值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-112">Its `value` element is a name/value pair that consists of the name of a switch and its <xref:System.Boolean> value.</span></span>  <span data-ttu-id="e9fa0-113">默认情况下，开关始终是隐式的 `false` ，这将提供新行为 (并且默认情况下) 选择启用新行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-113">By default, the switch is always implicitly `false`, which provides the new behavior (and makes the new behavior opt-in by default).</span></span> <span data-ttu-id="e9fa0-114">通过设置开关来 `true` 启用它，它提供了旧行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-114">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="e9fa0-115">将开关显式设置为 `false` 也可提供新的行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-115">Explicitly setting the switch to `false` also provides the new behavior.</span></span>

 <span data-ttu-id="e9fa0-116">使用一致的开关名称格式是有益的，因为它们是由库公开的正式协定。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-116">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="e9fa0-117">以下是两种明显的格式。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-117">The following are two obvious formats.</span></span>

- <span data-ttu-id="e9fa0-118">*Switch*. *namespace*. *switchname*</span><span class="sxs-lookup"><span data-stu-id="e9fa0-118">*Switch*. *namespace*. *switchname*</span></span>

- <span data-ttu-id="e9fa0-119">*Switch*. *library*. *switchname*</span><span class="sxs-lookup"><span data-stu-id="e9fa0-119">*Switch*. *library*. *switchname*</span></span>

 <span data-ttu-id="e9fa0-120">定义并记录开关后，调用方可以使用注册表、  [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) 向其应用程序配置文件中添加元素或通过编程方式调用方法来使用它  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-120">Once you define and document the switch, callers can use it by using the registry, by adding an  [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) element to their application configuration file, or by calling the  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method programmatically.</span></span> <span data-ttu-id="e9fa0-121">有关调用方如何使用和设置配置开关值的详细信息，请参阅 [AppContext for library 使用者](#ForConsumers) 部分 <xref:System.AppContext> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-121">See the [AppContext for library consumers](#ForConsumers) section for more information about how callers use and set the value of <xref:System.AppContext> configuration switches.</span></span>

 <span data-ttu-id="e9fa0-122">当公共语言运行时运行应用程序时，它会自动读取注册表的兼容性设置并加载应用程序配置文件，以便填充应用程序的 <xref:System.AppContext> 实例。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-122">When the common language runtime runs an application, it automatically reads the registry's compatibility settings and loads the application configuration file in order to populate the application's <xref:System.AppContext> instance.</span></span> <span data-ttu-id="e9fa0-123">由于 <xref:System.AppContext> 实例是由调用方或运行时以编程方式填充的，因此您无需执行任何操作（如调用 <xref:System.AppContext.SetSwitch%2A> 方法）来配置 <xref:System.AppContext> 实例。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-123">Because the <xref:System.AppContext> instance is populated either programmatically by the caller or by the runtime, you do not have to take any action, such as calling the <xref:System.AppContext.SetSwitch%2A> method,  to configure the <xref:System.AppContext> instance.</span></span>

### <a name="check-the-setting"></a><span data-ttu-id="e9fa0-124">选中设置 </span><span class="sxs-lookup"><span data-stu-id="e9fa0-124">Check the setting</span></span>
 <span data-ttu-id="e9fa0-125">然后，可以通过调用方法来检查使用者是否声明了开关的值并进行了相应的操作 <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-125">You can then check if a consumer has declared the value of the switch and act appropriately by calling the <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e9fa0-126">`true`如果找到了参数，则该方法返回; `switchName` 当方法返回时，它的 `isEnabled` 参数指示开关的值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-126">The method returns `true` if the `switchName` argument is found, and when the method returns, its `isEnabled` argument indicates the value of the switch.</span></span>  <span data-ttu-id="e9fa0-127">否则，该方法将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-127">Otherwise, the method returns `false`.</span></span>

### <a name="an-example"></a><span data-ttu-id="e9fa0-128">示例</span><span class="sxs-lookup"><span data-stu-id="e9fa0-128">An example</span></span>
 <span data-ttu-id="e9fa0-129">下面的示例演示如何使用类， <xref:System.AppContext> 以允许客户选择库方法的原始行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-129">The following example illustrates the use of the <xref:System.AppContext> class to allow the customer to choose the original behavior of a library method.</span></span>   <span data-ttu-id="e9fa0-130">下面是名为的库的版本 1.0 `StringLibrary` 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-130">The following is version 1.0 of a library named `StringLibrary`.</span></span> <span data-ttu-id="e9fa0-131">它定义了一 `SubstringStartsAt` 种方法，该方法执行序号比较，以确定较大字符串中子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-131">It defines a `SubstringStartsAt` method that performs an ordinal comparison to determine the starting index of a substring within a larger string.</span></span>

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 <span data-ttu-id="e9fa0-132">然后，下面的示例使用库在 "archaeologist" 中查找子字符串 "archæ" 的起始索引。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-132">The following example then uses the library to find the starting index of the substring "archæ" in "The archaeologist".</span></span> <span data-ttu-id="e9fa0-133">由于方法执行序号比较，因此无法找到子字符串。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-133">Because the method performs an ordinal comparison, the substring cannot be found.</span></span>

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 <span data-ttu-id="e9fa0-134">但库的版本2将 `SubstringStartsAt` 方法更改为使用区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-134">Version 2 of the library, however, changes the `SubstringStartsAt` method to use culture-sensitive comparison.</span></span>

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 <span data-ttu-id="e9fa0-135">当重新编译应用程序以针对新版本的库运行时，它现在会报告在 "archaeologist" 的索引4找到了子字符串 "archæ"。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-135">When the app is recompiled to run against the new version of the library, it now reports that the substring "archæ" is found at index 4 in "The archaeologist".</span></span>

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 <span data-ttu-id="e9fa0-136">通过定义开关，可以防止此更改中断依赖于原始行为的应用程序 [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-136">This change can be prevented from breaking the applications that depend on the original behavior by defining an [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) switch.</span></span> <span data-ttu-id="e9fa0-137">在这种情况下，开关的名称为 `StringLibrary.DoNotUseCultureSensitiveComparison` 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-137">In this case, the switch is named `StringLibrary.DoNotUseCultureSensitiveComparison`.</span></span> <span data-ttu-id="e9fa0-138">默认值 `false` 为，指示库应执行其版本2.0 区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-138">Its default value, `false`, indicates that the library should perform its version 2.0 culture-sensitive comparison.</span></span> <span data-ttu-id="e9fa0-139">`true` 指示库应执行其版本1.0 的序号比较。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-139">`true` indicates that the library should perform its version 1.0 ordinal comparison.</span></span>  <span data-ttu-id="e9fa0-140">对前面的代码进行少许修改后，库使用者可以设置开关来确定该方法所执行的比较类型。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-140">A slight modification of the previous code allows the library consumer to set the switch to determine the kind of comparison the method performs.</span></span>

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 <span data-ttu-id="e9fa0-141">如果应用程序随后可以使用以下配置文件来还原版本1.0 的行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-141">If application can then use the following configuration file to restore the version 1.0 behavior.</span></span>

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 <span data-ttu-id="e9fa0-142">当应用程序运行时，如果配置文件存在，它将生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-142">When the application is run with the configuration file present, it produces the following output:</span></span>

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a><span data-ttu-id="e9fa0-143">适用于库使用者的 AppContext</span><span class="sxs-lookup"><span data-stu-id="e9fa0-143">AppContext for library consumers</span></span>
 <span data-ttu-id="e9fa0-144">如果你是库的使用者，则可以使用 <xref:System.AppContext> 类来利用适用于新功能的库或库方法的选择退出机制。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-144">If you are the consumer of a library, the <xref:System.AppContext> class  allows you to take advantage of a library or library method's opt-out mechanism for new functionality.</span></span>   <span data-ttu-id="e9fa0-145">你要调用的类库的各个方法会定义启用或禁用新行为的特定开关。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-145">Individual methods of the class library that you are calling define particular switches that enable or disable a new behavior.</span></span> <span data-ttu-id="e9fa0-146">开关的值为布尔值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-146">The value of the switch  is a Boolean.</span></span> <span data-ttu-id="e9fa0-147">如果为 `false` （通常为默认值），则启用新行为; 如果为 `true` ，则禁用新行为，并使成员的行为与以前相同。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-147">If it is `false`, which is typically the default value, the new behavior is enabled; if it is `true`, the new behavior is disabled, and the member behaves as it did previously.</span></span>

 <span data-ttu-id="e9fa0-148">可以通过以下四种方式之一设置开关的值：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-148">You can set the value of a switch in one of four ways:</span></span>

-   <span data-ttu-id="e9fa0-149">通过 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 在代码中调用方法。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-149">By calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> method in your code.</span></span>  <span data-ttu-id="e9fa0-150">`switchName`参数定义开关名称， `isEnabled` 属性定义开关的值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-150">The `switchName` argument defines the switch name, and the `isEnabled` property defines the value of the switch.</span></span> <span data-ttu-id="e9fa0-151">由于 <xref:System.AppContext> 是静态类，因此它在每个应用程序域的基础上可用。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-151">Because <xref:System.AppContext> is a static class, it is available on a per-application domain basis.</span></span>

     <span data-ttu-id="e9fa0-152">调用 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 具有应用程序作用域; 即，它只会影响应用程序。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-152">Calling the <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> has application scope; that is, it affects only the application.</span></span>

-   <span data-ttu-id="e9fa0-153">通过将 `<AppContextSwitchOverrides>` 元素添加到 [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) app.config 文件的部分。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-153">By adding an `<AppContextSwitchOverrides>` element to the [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) section of your app.config file.</span></span> <span data-ttu-id="e9fa0-154">开关只有一个属性，它的 `value` 值是一个字符串，表示同时包含开关名称和值的键/值对。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-154">The switch has a single attribute, `value`, whose value is a string that represents a key/value pair containing both the switch name and its value.</span></span>

     <span data-ttu-id="e9fa0-155">若要定义多个开关，请将元素的属性中的每个开关的键/值对 [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) `value` 用分号隔开。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-155">To define multiple switches, separate each switch's key/value pair in the [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) element's `value` attribute with a semicolon.</span></span> <span data-ttu-id="e9fa0-156">在这种情况下， `<AppContextSwitchOverrides>` 元素具有以下格式：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-156">In that case, the `<AppContextSwitchOverrides>` element has the following format:</span></span>

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     <span data-ttu-id="e9fa0-157">使用 `<AppContextSwitchOverrides>` 元素定义配置设置具有应用程序作用域; 即，它只会影响应用程序。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-157">Using the `<AppContextSwitchOverrides>` element to define a configuration setting has application scope; that is, it affects only the application.</span></span>

    > [!NOTE]
    > <span data-ttu-id="e9fa0-158">有关 .NET Framework 定义的开关的详细信息，请参阅[ \<AppContextSwitchOverrides> 元素](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element)。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-158">For information on the switches defined by the .NET Framework, see the [\<AppContextSwitchOverrides> element](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element).</span></span>

- <span data-ttu-id="e9fa0-159">通过向注册表中添加项。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-159">By adding an entry to the registry.</span></span> <span data-ttu-id="e9fa0-160">向 **HKLM\SOFTWARE\Microsoft \. NETFramework\AppContext** 子项添加新的字符串值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-160">Add a new string value to the **HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext** subkey.</span></span> <span data-ttu-id="e9fa0-161">将条目的名称设置为交换机的名称。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-161">Set the name of the entry to the name of the switch.</span></span> <span data-ttu-id="e9fa0-162">将其值设置为以下选项之一： `True` 、 `true` 、 `False` 或 `false` 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-162">Set its value to one of the following options: `True`, `true`, `False`, or `false`.</span></span> <span data-ttu-id="e9fa0-163">如果运行时遇到任何其他值，将忽略开关。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-163">If the runtime encounters any other value, it ignores the switch.</span></span>

  <span data-ttu-id="e9fa0-164">在64位操作系统上，还必须将同一条目添加到 **HKLM\SOFTWARE\Wow6432Node\Microsoft \. NETFramework\AppContext** 子项。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-164">On a 64-bit operating system, you must also add the same entry to the **HKLM\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\AppContext** subkey.</span></span>

  <span data-ttu-id="e9fa0-165">使用注册表定义 <xref:System.AppContext> 交换机具有计算机作用域; 即，它会影响计算机上运行的每个应用程序。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-165">Using the registry to define an <xref:System.AppContext> switch has machine scope; that is, it affects every application running on the machine.</span></span>

- <span data-ttu-id="e9fa0-166">对于 ASP.NET 应用程序，请将 [\<Add>](/dotnet/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings) 元素添加到 [\<appSettings>](/dotnet/framework/configure-apps/file-schema/appsettings/) web.config 文件的部分。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-166">For ASP.NET applications, you add an [\<Add>](/dotnet/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings) element to the [\<appSettings>](/dotnet/framework/configure-apps/file-schema/appsettings/) section of the web.config file.</span></span> <span data-ttu-id="e9fa0-167">例如：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-167">For example:</span></span>

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

<span data-ttu-id="e9fa0-168">如果你以多种方式设置相同的开关，则确定哪些设置将覆盖其他设置的优先顺序如下：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-168">If you set the same switch in more than one way, the order of precedence for determining which setting overrides the others is:</span></span>

1.  <span data-ttu-id="e9fa0-169">编程设置。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-169">The programmatic setting.</span></span>

2.  <span data-ttu-id="e9fa0-170">应用配置文件或 web.config 文件中的设置。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-170">The setting in the app config file or the web.config file.</span></span>

3.  <span data-ttu-id="e9fa0-171">注册表设置。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-171">The registry setting.</span></span>

 <span data-ttu-id="e9fa0-172">下面是一个将文件 URI 传递给方法的简单应用程序 <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-172">The following is a simple application that passes a file URI to the <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="e9fa0-173">在 .NET Framework 4.6 下运行时，它将引发， <xref:System.ArgumentException> 因为不再 `file://` 是文件路径的有效部分。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-173">When run under the .NET Framework 4.6, it throws an <xref:System.ArgumentException> because `file://` is no longer a valid part of a file path.</span></span>

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 <span data-ttu-id="e9fa0-174">若要还原方法的以前行为并防止出现异常，可以将该 `Switch.System.IO.UseLegacyPathHandling` 开关添加到该示例的应用程序配置文件中：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-174">To restore the method's previous behavior and prevent the exception, you can add the `Switch.System.IO.UseLegacyPathHandling` switch to the application configuration file for the example:</span></span>

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a><span data-ttu-id="e9fa0-175">另请参阅</span><span class="sxs-lookup"><span data-stu-id="e9fa0-175">See also</span></span>

[<span data-ttu-id="e9fa0-176">AppContext 开关</span><span class="sxs-lookup"><span data-stu-id="e9fa0-176">AppContext switch</span></span>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element)

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/runtime-element"><span data-ttu-id="e9fa0-177">&lt;runtime &gt; 元素</span><span class="sxs-lookup"><span data-stu-id="e9fa0-177">&lt;runtime&gt; Element</span></span></related>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element"><span data-ttu-id="e9fa0-178">&lt;AppContextSwitchOverrides &gt; 元素</span><span class="sxs-lookup"><span data-stu-id="e9fa0-178">&lt;AppContextSwitchOverrides&gt; Element</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9fa0-179">获取程序集解析程序用于探测程序集的基目录的文件路径。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-179">Gets the file path of the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="e9fa0-180">程序集冲突解决程序用来探测程序集的基目录的文件路径。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-180">The file path of the base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="e9fa0-181">这是每个应用程序的域属性。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-181">This is a per-application domain property.</span></span> <span data-ttu-id="e9fa0-182">它的值与 <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> 当前应用程序域的属性相对应。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-182">Its value corresponds to the <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> property of the current application domain.</span></span>

<span data-ttu-id="e9fa0-183">在 .NET 5.0 和更高版本中，对于捆绑的程序集，返回的值是主机可执行文件的包含目录。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-183">In .NET 5.0 and later versions, for bundled assemblies, the value returned is the containing directory of the host executable.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object? GetData (string name);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberSignature Language="C#" Value="public static object GetData (string name);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e9fa0-184">数据元素的名称。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-184">The name of the data element.</span></span></param>
        <summary><span data-ttu-id="e9fa0-185">返回分配给当前应用程序域的已命名数据元素的值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-185">Returns the value of the named data element assigned to the current application domain.</span></span></summary>
        <returns><span data-ttu-id="e9fa0-186">如果 <paramref name="name" /> 识别出已命名值，则为 <paramref name="name" /> 的值；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-186">The value of <paramref name="name" />, if <paramref name="name" /> identifies a named value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="e9fa0-187">开关的名称。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-187">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="e9fa0-188">开关的值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-188">The value of the switch.</span></span></param>
        <summary><span data-ttu-id="e9fa0-189">设置开关的值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-189">Sets the value of a switch.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e9fa0-190"><xref:System.AppContext>类使库编写器可为其用户提供新功能的统一退出机制。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-190">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="e9fa0-191">它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-191">It establishes a loosely coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="e9fa0-192">对现有功能进行更改时，此功能通常很重要。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-192">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="e9fa0-193">相反，已有新功能隐式选择加入。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-193">Conversely, there is already an implicit opt-in for new functionality.</span></span>

 <span data-ttu-id="e9fa0-194">此 <xref:System.AppContext.SetSwitch%2A> 方法由应用程序调用 (或库) ，以声明一个开关的值 (这始终是 <xref:System.Boolean> 依赖库定义的) 值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-194">The <xref:System.AppContext.SetSwitch%2A> method is called by an application (or a library) to declare the value of a switch (which is always a <xref:System.Boolean> value) that a dependent library defines.</span></span> <span data-ttu-id="e9fa0-195">开关始终是隐式的 `false` ，它提供新的行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-195">The switch is always implicitly `false`, which provides the new behavior.</span></span> <span data-ttu-id="e9fa0-196">通过设置开关来 `true` 启用它，它提供了旧行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-196">Setting the switch to `true` enables it, which provides the legacy behavior.</span></span> <span data-ttu-id="e9fa0-197">将开关显式设置为 `false` 也可提供新的行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-197">Explicitly setting the switch to `false` also provides the new behavior.</span></span> <span data-ttu-id="e9fa0-198">然后，依赖库可以通过调用方法来检查开关的值 <xref:System.AppContext.TryGetSwitch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-198">The dependent library can then check the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="e9fa0-199">使用一致的开关名称格式是有益的，因为它们是由库公开的正式协定。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-199">It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library.</span></span> <span data-ttu-id="e9fa0-200">以下是两种明显的格式。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-200">The following are two obvious formats.</span></span>
>
> - <span data-ttu-id="e9fa0-201">*Switch*. *namespace*. *switchname*</span><span class="sxs-lookup"><span data-stu-id="e9fa0-201">*Switch*. *namespace*. *switchname*</span></span>
> - <span data-ttu-id="e9fa0-202">*Switch*. *library*. *switchname*</span><span class="sxs-lookup"><span data-stu-id="e9fa0-202">*Switch*. *library*. *switchname*</span></span>

 <span data-ttu-id="e9fa0-203">对于在 .NET Framework 上运行的应用程序，除了以编程方式设置开关的值外，还可以设置以下内容：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-203">For applications running on .NET Framework, in addition to setting the value of a switch programmatically, it can also be set:</span></span>

- <span data-ttu-id="e9fa0-204">通过向 [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) 应用程序配置文件的部分中的元素添加开关名称和值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-204">By adding the switch name and value to the [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) element in the [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) section of an application configuration file.</span></span> <span data-ttu-id="e9fa0-205">例如，下面定义了一个名为的开关， `Libraries.FPLibrary.UseExactFloatingPointComparison` 其值为 `False` 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-205">For example, the following defines a switch named `Libraries.FPLibrary.UseExactFloatingPointComparison` whose value is `False`.</span></span>

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

- <span data-ttu-id="e9fa0-206">通过在注册表中添加 name 为 **HKLM\SOFTWARE\Microsoft \. NETFramework\AppContext** (和 **HKLM\SOFTWARE\Wow6432Node\Microsoft \. NETFramework\AppContext** ) 子项的名称的字符串值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-206">By adding a string value whose name is the name of the switch to the **HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext** (and **HKLM\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\AppContext** ) subkeys in the registry.</span></span> <span data-ttu-id="e9fa0-207">它的值必须是可以通过方法分析的的字符串表示形式 <xref:System.Boolean> <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> ; 也就是说，它必须是 "true"、"true"、"false" 或 "false"。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-207">Its value must be the string representation of a <xref:System.Boolean> that can be parsed by the <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> method; that is, it must be "True", "true", "False", or "false".</span></span>

 <span data-ttu-id="e9fa0-208">如果该注册表项存在，则在调用时，它的值将被 `isEnabled` 参数覆盖 <xref:System.AppContext.SetSwitch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-208">If the registry entry exists, its value is overwritten by the `isEnabled` argument when <xref:System.AppContext.SetSwitch%2A> is called.</span></span>  <span data-ttu-id="e9fa0-209">即，对方法的最新调用将 <xref:System.AppContext.SetSwitch%2A> 重写在注册表、应用程序配置文件中定义的值，或者在以前对方法的调用中重写 <xref:System.AppContext.SetSwitch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-209">That is, the most recent call to the <xref:System.AppContext.SetSwitch%2A> method overrides the value defined in the registry, in an app configuration file, or by previous calls to the <xref:System.AppContext.SetSwitch%2A> method.</span></span>

 ### <a name="appcontextsetswitch-and-net-core"></a><span data-ttu-id="e9fa0-210">AppContext. SetSwitch 和 .NET Core</span><span class="sxs-lookup"><span data-stu-id="e9fa0-210">AppContext.SetSwitch and .NET Core</span></span>

<span data-ttu-id="e9fa0-211">.NET Core 仅支持通过方法进行编程调用 <xref:System.AppContext.SetSwitch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-211">.NET Core supports programmatic calls with the <xref:System.AppContext.SetSwitch%2A> method only.</span></span> <span data-ttu-id="e9fa0-212">支持以下开关：</span><span class="sxs-lookup"><span data-stu-id="e9fa0-212">The following switches are supported:</span></span>

|<span data-ttu-id="e9fa0-213">开关</span><span class="sxs-lookup"><span data-stu-id="e9fa0-213">Switch</span></span>|<span data-ttu-id="e9fa0-214">值</span><span class="sxs-lookup"><span data-stu-id="e9fa0-214">Values</span></span>|<span data-ttu-id="e9fa0-215">描述</span><span class="sxs-lookup"><span data-stu-id="e9fa0-215">Description</span></span>|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|<span data-ttu-id="e9fa0-216">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="e9fa0-216">`true` or `false`</span></span>|<span data-ttu-id="e9fa0-217">指示是否启用对 HTTP/2 协议的支持 (`true`) 或禁用 (`false`) 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-217">Indicates whether support for the HTTP/2 protocol is enabled (`true`) or disabled (`false`).</span></span> <span data-ttu-id="e9fa0-218">默认为禁用。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-218">The default is disabled.</span></span> <span data-ttu-id="e9fa0-219">在首次使用之前，必须设置此开关 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-219">The switch must be set before the first use of <xref:System.Net.Http.HttpClient>.</span></span> <span data-ttu-id="e9fa0-220">从 .NET Core 3.0 预览版4开始提供。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-220">Available starting with .NET Core 3.0 Preview 4.</span></span>|
|`System.Net.Http.UseSocketsHttpHandler` |<span data-ttu-id="e9fa0-221">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="e9fa0-221">`true` or `false`</span></span>|<span data-ttu-id="e9fa0-222">确定高级网络 Api （如 <xref:System.Net.Http.HttpClient> 使用 <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) 或 <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`) 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-222">Determines whether high-level networking APIs such as <xref:System.Net.Http.HttpClient> use <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) or <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).</span></span>|

## Examples
 <span data-ttu-id="e9fa0-223">下面的代码行设置一个名为的 `Switch.AmazingLib.ThrowOnException` 开关 `true` ，后者启用了旧行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-223">The following line of code sets a switch named `Switch.AmazingLib.ThrowOnException` to `true`, which enables a legacy behavior.</span></span> <span data-ttu-id="e9fa0-224">然后，库可以通过调用方法来检查库使用者是否已设置开关的值 <xref:System.AppContext.TryGetSwitch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-224">The library can then check whether a library consumer has set the value of the switch by calling the <xref:System.AppContext.TryGetSwitch%2A> method.</span></span>

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e9fa0-225"><paramref name="switchName" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-225"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e9fa0-226"><paramref name="switchName" /> 为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-226"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string? TargetFrameworkName { get; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9fa0-227">获取当前应用程序所针对的框架版本的名称。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-227">Gets the name of the framework version targeted by the current application.</span></span></summary>
        <value><span data-ttu-id="e9fa0-228">当前应用程序所针对的框架版本的名称。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-228">The name of the framework version targeted by the current application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e9fa0-229">目标 framework 版本的名称对应于属性的值 <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-229">The name of the target framework version corresponds to the value of the <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e9fa0-230">有关 .NET Framework 的目标框架名称的列表，请参阅[ &lt; supportedRuntime &gt; 元素](/dotnet/framework/configure-apps/file-schema/startup/supportedruntime-element)元素。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-230">For a list of target framework names for .NET Framework, see the [&lt;supportedRuntime&gt; Element](/dotnet/framework/configure-apps/file-schema/startup/supportedruntime-element) element.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string * bool -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName"><span data-ttu-id="e9fa0-231">开关的名称。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-231">The name of the switch.</span></span></param>
        <param name="isEnabled"><span data-ttu-id="e9fa0-232">此方法返回时，如果找到 <paramref name="switchName" />，则包含 <paramref name="switchName" /> 的值；如果未找到 <paramref name="switchName" />，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-232">When this method returns, contains the value of <paramref name="switchName" /> if <paramref name="switchName" /> was found, or <see langword="false" /> if <paramref name="switchName" /> was not found.</span></span> <span data-ttu-id="e9fa0-233">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-233">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="e9fa0-234">尝试获取开关的值。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-234">Tries to get the value of a switch.</span></span></summary>
        <returns><span data-ttu-id="e9fa0-235">如果设置了 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 参数包含开关的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-235"><see langword="true" /> if <paramref name="switchName" /> was set and the <paramref name="isEnabled" /> argument contains the value of the switch; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="e9fa0-236"><xref:System.AppContext>类使库编写器可为其用户提供新功能的统一退出机制。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-236">The <xref:System.AppContext> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</span></span> <span data-ttu-id="e9fa0-237">它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-237">It establishes a loosely coupled contract between components in order to communicate an opt-out request.</span></span> <span data-ttu-id="e9fa0-238">对现有功能进行更改时，此功能通常很重要。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-238">This capability is typically important when a change is made to existing functionality.</span></span> <span data-ttu-id="e9fa0-239">相反，已有新功能隐式选择加入。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-239">Conversely, there is already an implicit opt-in for new functionality.</span></span>

 <span data-ttu-id="e9fa0-240">公共语言运行时 <xref:System.AppContext> 通过读取注册表和应用程序的配置文件，自动填充分配给实例的开关。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-240">The common language runtime automatically populates the switches assigned to an <xref:System.AppContext> instance by reading the registry and the application's configuration file.</span></span> <span data-ttu-id="e9fa0-241">然后，可以通过调用方法来重写这些开关的值并添加新的开关 <xref:System.AppContext.SetSwitch%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-241">The value of these switches can then be overridden, and new switches added, by calling the <xref:System.AppContext.SetSwitch%2A> method.</span></span>

 <span data-ttu-id="e9fa0-242">库将调用 <xref:System.AppContext.TryGetSwitch%2A> 方法来检查其使用者是否已声明该开关的值，然后对其执行相应的操作。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-242">A library calls the <xref:System.AppContext.TryGetSwitch%2A> method to check whether its consumers have declared the value of the switch and then act appropriately on it.</span></span> <span data-ttu-id="e9fa0-243">默认情况下，如果未定义交换机，则启用新功能。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-243">By default, if the switch is not defined, the new functionality is enabled.</span></span> <span data-ttu-id="e9fa0-244">如果定义了开关并且其值为 `false` ，则还会启用新的功能。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-244">If the switch is defined and its value is `false`, the new functionality is also enabled.</span></span> <span data-ttu-id="e9fa0-245">如果其值为 `true` ，则将启用旧行为。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-245">If its value is `true`, the legacy behavior is enabled.</span></span>

## Examples
 <span data-ttu-id="e9fa0-246">下面的示例确定库使用者是否已设置名为的开关 `Switch.AmazingLib.ThrowOnException` 。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-246">The following example determines whether a library consumer has set a switch named `Switch.AmazingLib.ThrowOnException`.</span></span>

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e9fa0-247"><paramref name="switchName" /> 上声明的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-247"><paramref name="switchName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e9fa0-248"><paramref name="switchName" /> 为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="e9fa0-248"><paramref name="switchName" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
