<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb03aa6c3f3598933c1633fca1d88292a52e57cd" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91909703" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed AppContext extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.AppContext" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于设置和检索应用程序上下文相关数据的成员。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.AppContext>类使库编写器可为其用户提供新功能的统一退出机制。 它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。 对现有功能进行更改时，此功能通常很重要。 相反，已有新功能隐式选择加入。

## <a name="appcontext-for-library-developers"></a>适用于库开发人员的 AppContext
 库使用 <xref:System.AppContext> 类来定义和公开兼容性开关，而库用户可以设置这些开关以影响库行为。 默认情况下，库提供新功能；如果设置了开关，则只更改新功能（即，它们提供以前的功能）。  这允许库为现有 API 提供新行为，同时继续支持依赖于先前行为的调用方。

### <a name="define-the-switch-name"></a>定义开关名称
 若要允许库的使用者选择不更改行为，最常见的方法是定义命名开关。  其 `value` 元素是一个名称/值对，它包含开关的名称及其 <xref:System.Boolean> 值。  默认情况下，开关始终是隐式的 `false` ，这将提供新行为 (并且默认情况下) 选择启用新行为。 通过设置开关来 `true` 启用它，它提供了旧行为。 将开关显式设置为 `false` 也可提供新的行为。

 使用一致的开关名称格式是有益的，因为它们是由库公开的正式协定。 以下是两种明显的格式。

- *Switch*. *namespace*. *switchname*

- *Switch*. *library*. *switchname*

 定义并记录开关后，调用方可以使用注册表、  [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) 向其应用程序配置文件中添加元素或通过编程方式调用方法来使用它  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 。 有关调用方如何使用和设置配置开关值的详细信息，请参阅 [AppContext for library 使用者](#ForConsumers) 部分 <xref:System.AppContext> 。

 当公共语言运行时运行应用程序时，它会自动读取注册表的兼容性设置并加载应用程序配置文件，以便填充应用程序的 <xref:System.AppContext> 实例。 由于 <xref:System.AppContext> 实例是由调用方或运行时以编程方式填充的，因此您无需执行任何操作（如调用 <xref:System.AppContext.SetSwitch%2A> 方法）来配置 <xref:System.AppContext> 实例。

### <a name="check-the-setting"></a>选中设置 
 然后，可以通过调用方法来检查使用者是否声明了开关的值并进行了相应的操作 <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> 。 `true`如果找到了参数，则该方法返回; `switchName` 当方法返回时，它的 `isEnabled` 参数指示开关的值。  否则，该方法将返回 `false`。

### <a name="an-example"></a>示例
 下面的示例演示如何使用类， <xref:System.AppContext> 以允许客户选择库方法的原始行为。   下面是名为的库的版本 1.0 `StringLibrary` 。 它定义了一 `SubstringStartsAt` 种方法，该方法执行序号比较，以确定较大字符串中子字符串的起始索引。

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 然后，下面的示例使用库在 "archaeologist" 中查找子字符串 "archæ" 的起始索引。 由于方法执行序号比较，因此无法找到子字符串。

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 但库的版本2将 `SubstringStartsAt` 方法更改为使用区分区域性的比较。

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 当重新编译应用程序以针对新版本的库运行时，它现在会报告在 "archaeologist" 的索引4找到了子字符串 "archæ"。

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 通过定义开关，可以防止此更改中断依赖于原始行为的应用程序 [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) 。 在这种情况下，开关的名称为 `StringLibrary.DoNotUseCultureSensitiveComparison` 。 默认值 `false` 为，指示库应执行其版本2.0 区分区域性的比较。 `true` 指示库应执行其版本1.0 的序号比较。  对前面的代码进行少许修改后，库使用者可以设置开关来确定该方法所执行的比较类型。

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 如果应用程序随后可以使用以下配置文件来还原版本1.0 的行为。

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 当应用程序运行时，如果配置文件存在，它将生成以下输出：

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a>适用于库使用者的 AppContext
 如果你是库的使用者，则可以使用 <xref:System.AppContext> 类来利用适用于新功能的库或库方法的选择退出机制。   你要调用的类库的各个方法会定义启用或禁用新行为的特定开关。 开关的值为布尔值。 如果为 `false` （通常为默认值），则启用新行为; 如果为 `true` ，则禁用新行为，并使成员的行为与以前相同。

 可以通过以下四种方式之一设置开关的值：

-   通过 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 在代码中调用方法。  `switchName`参数定义开关名称， `isEnabled` 属性定义开关的值。 由于 <xref:System.AppContext> 是静态类，因此它在每个应用程序域的基础上可用。

     调用 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 具有应用程序作用域; 即，它只会影响应用程序。

-   通过将 `<AppContextSwitchOverrides>` 元素添加到 [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) app.config 文件的部分。 开关只有一个属性，它的 `value` 值是一个字符串，表示同时包含开关名称和值的键/值对。

     若要定义多个开关，请将元素的属性中的每个开关的键/值对 [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) `value` 用分号隔开。 在这种情况下， `<AppContextSwitchOverrides>` 元素具有以下格式：

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     使用 `<AppContextSwitchOverrides>` 元素定义配置设置具有应用程序作用域; 即，它只会影响应用程序。

    > [!NOTE]
    > 有关 .NET Framework 定义的开关的详细信息，请参阅[ \<AppContextSwitchOverrides> 元素](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element)。

- 通过向注册表中添加项。 向 **HKLM\SOFTWARE\Microsoft \. NETFramework\AppContext** 子项添加新的字符串值。 将条目的名称设置为交换机的名称。 将其值设置为以下选项之一： `True` 、 `true` 、 `False` 或 `false` 。 如果运行时遇到任何其他值，将忽略开关。

  在64位操作系统上，还必须将同一条目添加到 **HKLM\SOFTWARE\Wow6432Node\Microsoft \. NETFramework\AppContext** 子项。

  使用注册表定义 <xref:System.AppContext> 交换机具有计算机作用域; 即，它会影响计算机上运行的每个应用程序。

- 对于 ASP.NET 应用程序，请将 [\<Add>](/dotnet/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings) 元素添加到 [\<appSettings>](/dotnet/framework/configure-apps/file-schema/appsettings/) web.config 文件的部分。 例如：

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

如果你以多种方式设置相同的开关，则确定哪些设置将覆盖其他设置的优先顺序如下：

1.  编程设置。

2.  应用配置文件或 web.config 文件中的设置。

3.  注册表设置。

 下面是一个将文件 URI 传递给方法的简单应用程序 <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> 。  在 .NET Framework 4.6 下运行时，它将引发， <xref:System.ArgumentException> 因为不再 `file://` 是文件路径的有效部分。

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 若要还原方法的以前行为并防止出现异常，可以将该 `Switch.System.IO.UseLegacyPathHandling` 开关添加到该示例的应用程序配置文件中：

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a>另请参阅

[AppContext 开关](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element)

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/runtime-element">&lt;runtime &gt; 元素</related>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element">&lt;AppContextSwitchOverrides &gt; 元素</related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取程序集解析程序用于探测程序集的基目录的路径名。</summary>
        <value>程序集冲突解决程序用来探测程序集的基目录的路径名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 这是每个应用程序的域属性。 它的值与 <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> 当前应用程序域的属性相对应。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object? GetData (string name);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberSignature Language="C#" Value="public static object GetData (string name);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">数据元素的名称。</param>
        <summary>返回分配给当前应用程序域的已命名数据元素的值。</summary>
        <returns>如果 <paramref name="name" /> 识别出已命名值，则为 <paramref name="name" /> 的值；否则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">开关的名称。</param>
        <param name="isEnabled">开关的值。</param>
        <summary>设置开关的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.AppContext>类使库编写器可为其用户提供新功能的统一退出机制。 它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。 对现有功能进行更改时，此功能通常很重要。 相反，已有新功能隐式选择加入。

 此 <xref:System.AppContext.SetSwitch%2A> 方法由应用程序调用 (或库) ，以声明一个开关的值 (这始终是 <xref:System.Boolean> 依赖库定义的) 值。 开关始终是隐式的 `false` ，它提供新的行为。 通过设置开关来 `true` 启用它，它提供了旧行为。 将开关显式设置为 `false` 也可提供新的行为。 然后，依赖库可以通过调用方法来检查开关的值 <xref:System.AppContext.TryGetSwitch%2A> 。

> [!NOTE]
> 使用一致的开关名称格式是有益的，因为它们是由库公开的正式协定。 以下是两种明显的格式。
>
> - *Switch*. *namespace*. *switchname*
> - *Switch*. *library*. *switchname*

 对于在 .NET Framework 上运行的应用程序，除了以编程方式设置开关的值外，还可以设置以下内容：

- 通过向 [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) 应用程序配置文件的部分中的元素添加开关名称和值。 例如，下面定义了一个名为的开关， `Libraries.FPLibrary.UseExactFloatingPointComparison` 其值为 `False` 。

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

- 通过在注册表中添加 name 为 **HKLM\SOFTWARE\Microsoft \. NETFramework\AppContext** (和 **HKLM\SOFTWARE\Wow6432Node\Microsoft \. NETFramework\AppContext** ) 子项的名称的字符串值。 它的值必须是可以通过方法分析的的字符串表示形式 <xref:System.Boolean> <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> ; 也就是说，它必须是 "true"、"true"、"false" 或 "false"。

 如果该注册表项存在，则在调用时，它的值将被 `isEnabled` 参数覆盖 <xref:System.AppContext.SetSwitch%2A> 。  即，对方法的最新调用将 <xref:System.AppContext.SetSwitch%2A> 重写在注册表、应用程序配置文件中定义的值，或者在以前对方法的调用中重写 <xref:System.AppContext.SetSwitch%2A> 。

 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext. SetSwitch 和 .NET Core

.NET Core 仅支持通过方法进行编程调用 <xref:System.AppContext.SetSwitch%2A> 。 支持以下开关：

|开关|值|说明|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|`true` 或 `false`|指示是否启用对 HTTP/2 协议的支持 (`true`) 或禁用 (`false`) 。 默认为禁用。 在首次使用之前，必须设置此开关 <xref:System.Net.Http.HttpClient> 。 从 .NET Core 3.0 预览版4开始提供。|
|`System.Net.Http.UseSocketsHttpHandler` |`true` 或 `false`|确定高级网络 Api （如 <xref:System.Net.Http.HttpClient> 使用 <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) 或 <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`) 。|

## Examples
 下面的代码行设置一个名为的 `Switch.AmazingLib.ThrowOnException` 开关 `true` ，后者启用了旧行为。 然后，库可以通过调用方法来检查库使用者是否已设置开关的值 <xref:System.AppContext.TryGetSwitch%2A> 。

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> 上声明的默认值为 <see cref="F:System.String.Empty" />。</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string? TargetFrameworkName { get; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前应用程序所针对的框架版本的名称。</summary>
        <value>当前应用程序所针对的框架版本的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 目标 framework 版本的名称对应于属性的值 <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> 。 有关 .NET Framework 的目标框架名称的列表，请参阅[ &lt; supportedRuntime &gt; 元素](/dotnet/framework/configure-apps/file-schema/startup/supportedruntime-element)元素。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string * bool -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">开关的名称。</param>
        <param name="isEnabled">此方法返回时，如果找到 <paramref name="switchName" />，则包含 <paramref name="switchName" /> 的值；如果未找到 <paramref name="switchName" />，则为 <see langword="false" />。 此参数未经初始化即被传递。</param>
        <summary>尝试获取开关的值。</summary>
        <returns>如果设置了 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 参数包含开关的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.AppContext>类使库编写器可为其用户提供新功能的统一退出机制。 它在组件之间建立松耦合的协定，以便与选择退出请求进行通信。 对现有功能进行更改时，此功能通常很重要。 相反，已有新功能隐式选择加入。

 公共语言运行时 <xref:System.AppContext> 通过读取注册表和应用程序的配置文件，自动填充分配给实例的开关。 然后，可以通过调用方法来重写这些开关的值并添加新的开关 <xref:System.AppContext.SetSwitch%2A> 。

 库将调用 <xref:System.AppContext.TryGetSwitch%2A> 方法来检查其使用者是否已声明该开关的值，然后对其执行相应的操作。 默认情况下，如果未定义交换机，则启用新功能。 如果定义了开关并且其值为 `false` ，则还会启用新的功能。 如果其值为 `true` ，则将启用旧行为。

## Examples
 下面的示例确定库使用者是否已设置名为的开关 `Switch.AmazingLib.ThrowOnException` 。

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> 上声明的默认值为 <see cref="F:System.String.Empty" />。</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
