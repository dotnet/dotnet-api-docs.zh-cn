<Type Name="Double" FullName="System.Double">
  <Metadata><Meta Name="ms.openlocfilehash" Value="551ddd61889d24445fc17d61aaf2e2cb7dd1e1fb" /><Meta Name="ms.sourcegitcommit" Value="57ccffdf8fe8e719b7e778b859bf1ca216879f31" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/28/2020" /><Meta Name="ms.locfileid" Value="87329259" /></Metadata><TypeSignature Language="C#" Value="public struct Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float64&gt;, class System.IConvertible, class System.IEquatable`1&lt;float64&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Double" />
  <TypeSignature Language="VB.NET" Value="Public Structure Double&#xA;Implements IComparable, IComparable(Of Double), IConvertible, IEquatable(Of Double), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type double = struct&#xA;    interface IConvertible&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public struct Double : IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Double&#xA;Implements IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public value class Double : IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type double = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float64&gt;, class System.IConvertible, class System.IEquatable`1&lt;float64&gt;, class System.IFormattable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct Double : IComparable, IComparable&lt;double&gt;, IEquatable&lt;double&gt;, IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float64&gt;, class System.IEquatable`1&lt;float64&gt;, class System.IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public Structure Double&#xA;Implements IComparable, IComparable(Of Double), IEquatable(Of Double), IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public value class Double : IComparable, IComparable&lt;double&gt;, IEquatable&lt;double&gt;, IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type double = struct&#xA;    interface IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IComparable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IEquatable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b4068-101">表示一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-101">Represents a double-precision floating-point number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-102"><xref:System.Double>值类型表示双精度64位数字，其值范围从负 1.79769313486232 e 308 到正 1.79769313486232 e 308，以及正或负零、 <xref:System.Double.PositiveInfinity> 、 <xref:System.Double.NegativeInfinity> ，而非数字 (<xref:System.Double.NaN>) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-102">The <xref:System.Double> value type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, and not a number (<xref:System.Double.NaN>).</span></span> <span data-ttu-id="b4068-103">它用于表示极大型 (的值，例如行星或 galaxies 之间的距离) 或极小的 (，例如以) 千克为间隔的物质的分子质量，这通常是不精确的 (（如从地球到另一阳历系统) 的距离。</span><span class="sxs-lookup"><span data-stu-id="b4068-103">It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (such as the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system).</span></span> <span data-ttu-id="b4068-104"><xref:System.Double>类型符合二元浮点算法的 IEC 60559:1989 (IEEE 754) 标准。</span><span class="sxs-lookup"><span data-stu-id="b4068-104">The <xref:System.Double> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="b4068-105">本主题包括以下各节：</span><span class="sxs-lookup"><span data-stu-id="b4068-105">This topic consists of the following sections:</span></span>  
  
-   [<span data-ttu-id="b4068-106">浮点表示形式和精度</span><span class="sxs-lookup"><span data-stu-id="b4068-106">Floating-point representation and precision</span></span>](#Precision)  
  
-   [<span data-ttu-id="b4068-107">测试是否相等</span><span class="sxs-lookup"><span data-stu-id="b4068-107">Testing for equality</span></span>](#Equality)  
  
-   [<span data-ttu-id="b4068-108">浮点值和异常</span><span class="sxs-lookup"><span data-stu-id="b4068-108">Floating-point values and exceptions</span></span>](#Exceptions)  
  
-   [<span data-ttu-id="b4068-109">类型转换和双结构</span><span class="sxs-lookup"><span data-stu-id="b4068-109">Type conversions and the Double structure</span></span>](#Conversions)  
  
-   [<span data-ttu-id="b4068-110">浮点型功能</span><span class="sxs-lookup"><span data-stu-id="b4068-110">Floating-point functionality</span></span>](#Functionality)  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a><span data-ttu-id="b4068-111">浮点表示形式和精度</span><span class="sxs-lookup"><span data-stu-id="b4068-111">Floating-Point Representation and Precision</span></span>  
 <span data-ttu-id="b4068-112"><xref:System.Double>数据类型以64位二进制格式存储双精度浮点值，如下表所示：</span><span class="sxs-lookup"><span data-stu-id="b4068-112">The <xref:System.Double> data type stores double-precision floating-point values in a 64-bit binary format, as shown in the following table:</span></span>  
  
|<span data-ttu-id="b4068-113">部件</span><span class="sxs-lookup"><span data-stu-id="b4068-113">Part</span></span>|<span data-ttu-id="b4068-114">Bits</span><span class="sxs-lookup"><span data-stu-id="b4068-114">Bits</span></span>|  
|----------|----------|  
|<span data-ttu-id="b4068-115">有效位数或尾数</span><span class="sxs-lookup"><span data-stu-id="b4068-115">Significand or mantissa</span></span>|<span data-ttu-id="b4068-116">0-51</span><span class="sxs-lookup"><span data-stu-id="b4068-116">0-51</span></span>|  
|<span data-ttu-id="b4068-117">指数</span><span class="sxs-lookup"><span data-stu-id="b4068-117">Exponent</span></span>|<span data-ttu-id="b4068-118">52-62</span><span class="sxs-lookup"><span data-stu-id="b4068-118">52-62</span></span>|  
|<span data-ttu-id="b4068-119">Sign (0 = 正，1 = 负值) </span><span class="sxs-lookup"><span data-stu-id="b4068-119">Sign (0 = Positive, 1 = Negative)</span></span>|<span data-ttu-id="b4068-120">63</span><span class="sxs-lookup"><span data-stu-id="b4068-120">63</span></span>|  
  
 <span data-ttu-id="b4068-121">正如小数部分无法精确表示某些小数值 (例如1/3 或 <xref:System.Math.PI?displayProperty=nameWithType>) ），二进制小数无法表示某些小数值。</span><span class="sxs-lookup"><span data-stu-id="b4068-121">Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <xref:System.Math.PI?displayProperty=nameWithType>), binary fractions are unable to represent some fractional values.</span></span> <span data-ttu-id="b4068-122">例如，1/10 以小数部分的形式精确表示为小数部分，以. 001100110011 表示为二进制小数，模式 "myhpccn-0011" 重复到无限大。</span><span class="sxs-lookup"><span data-stu-id="b4068-122">For example, 1/10, which is represented precisely by .1 as a decimal fraction, is represented by .001100110011 as a binary fraction, with the pattern "0011" repeating to infinity.</span></span> <span data-ttu-id="b4068-123">在这种情况下，浮点值提供它所表示的数字的不精确表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-123">In this case, the floating-point value provides an imprecise representation of the number that it represents.</span></span> <span data-ttu-id="b4068-124">对原始浮点值执行其他数学运算通常会增加其精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-124">Performing additional mathematical operations on the original floating-point value often tends to increase its lack of precision.</span></span> <span data-ttu-id="b4068-125">例如，如果将0.1 乘以10并将0.1 添加到 1 9 次，则会看到加法，因为它涉及到8个以上的操作，因此产生的结果不太精确。</span><span class="sxs-lookup"><span data-stu-id="b4068-125">For example, if we compare the result of multiplying .1 by 10 and adding .1 to .1 nine times, we see that addition, because it has involved eight more operations, has produced the less precise result.</span></span> <span data-ttu-id="b4068-126">请注意，仅当 <xref:System.Double> 使用 "R" [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings)显示这两个值时，此差异才明显，如有必要，将显示该类型支持的所有17位精度 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-126">Note that this disparity is apparent only if we display the two <xref:System.Double> values by using the "R" [standard numeric format string](/dotnet/standard/base-types/standard-numeric-format-strings), which if necessary displays all 17 digits of precision supported by the <xref:System.Double> type.</span></span>  
  
 [!code-csharp[System.Double.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation1.cs#3)]
 [!code-vb[System.Double.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation1.vb#3)]  
  
 <span data-ttu-id="b4068-127">由于某些数字不能精确表示为小数部分的二进制值，因此浮点数只能近似于实数。</span><span class="sxs-lookup"><span data-stu-id="b4068-127">Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</span></span>  
  
 <span data-ttu-id="b4068-128">所有浮点数还具有有限数量的有效数字，还决定了浮点值接近于实数的准确程度。</span><span class="sxs-lookup"><span data-stu-id="b4068-128">All floating-point numbers also have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.</span></span>   <span data-ttu-id="b4068-129"><xref:System.Double>值最多可包含15个小数位数，尽管它在内部维护最大17位数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-129">A <xref:System.Double> value has up to 15 decimal digits of precision, although a maximum of 17 digits is maintained internally.</span></span> <span data-ttu-id="b4068-130">这意味着，某些浮点运算可能缺乏更改浮点值的精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-130">This means that some floating-point operations may lack the precision to change a floating point value.</span></span> <span data-ttu-id="b4068-131">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-131">The following example provides an illustration.</span></span> <span data-ttu-id="b4068-132">它定义了一个非常大的浮点值，然后在其中添加了的产品 <xref:System.Double.Epsilon?displayProperty=nameWithType> 和一个千万亿。</span><span class="sxs-lookup"><span data-stu-id="b4068-132">It defines a very large floating-point value, and then adds the product of <xref:System.Double.Epsilon?displayProperty=nameWithType> and one quadrillion to it.</span></span> <span data-ttu-id="b4068-133">然而，该产品太小，不能修改原始浮点值。</span><span class="sxs-lookup"><span data-stu-id="b4068-133">The product, however, is too small to modify the original floating-point value.</span></span> <span data-ttu-id="b4068-134">它的最小有效位数为千分之几，而产品中最重要的位是 10<sup>-309</sup>。</span><span class="sxs-lookup"><span data-stu-id="b4068-134">Its least significant digit is thousandths, whereas the most significant digit in the product is 10<sup>-309</sup>.</span></span>  
  
 [!code-csharp[System.Double.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation2.cs#4)]
 [!code-vb[System.Double.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation2.vb#4)]  
  
 <span data-ttu-id="b4068-135">浮点数的有限精度有几个后果：</span><span class="sxs-lookup"><span data-stu-id="b4068-135">The limited precision of a floating-point number has several consequences:</span></span>  
  
-   <span data-ttu-id="b4068-136">对于特定精度，看起来相等的两个浮点数在进行比较时可能不相等，因为其最小有效位不同。</span><span class="sxs-lookup"><span data-stu-id="b4068-136">Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different.</span></span> <span data-ttu-id="b4068-137">在下面的示例中，将一系列数字添加在一起，并将其总计与预期的总数进行比较。</span><span class="sxs-lookup"><span data-stu-id="b4068-137">In the following example, a series of numbers are added together, and their total is compared with their expected total.</span></span> <span data-ttu-id="b4068-138">尽管这两个值看起来是相同的，但对方法的调用 `Equals` 表示它们不是。</span><span class="sxs-lookup"><span data-stu-id="b4068-138">Although the two values appear to be the same, a call to the `Equals` method indicates that they are not.</span></span>  
  
     [!code-csharp[System.Double.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Double.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist3.vb#6)]  
  
     <span data-ttu-id="b4068-139">如果将语句中的格式项 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> 从和更改 `{0}` `{1}` 为 `{0:R}` ，并 `{1:R}` 显示这两个值的所有有效位，则可以 <xref:System.Double> 清楚地表明这两个值不相等，因为在加法运算期间会丢失精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-139">If you change the format items in the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> statement from `{0}` and `{1}` to `{0:R}` and `{1:R}` to display all significant digits of the two <xref:System.Double> values, it is clear that the two values are unequal because of a loss of precision during the addition operations.</span></span> <span data-ttu-id="b4068-140">在这种情况下，可以通过调用方法来解决该问题， <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> 以便在 <xref:System.Double> 执行比较之前将值舍入到所需的精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-140">In this case, the issue can be resolved by calling the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> method to round the <xref:System.Double> values to the desired precision before performing the comparison.</span></span>  
  
-   <span data-ttu-id="b4068-141">如果使用的是十进制数，则使用浮点数的算术或比较运算可能不会产生相同的结果，因为二进制浮点数可能不等于十进制数。</span><span class="sxs-lookup"><span data-stu-id="b4068-141">A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number.</span></span> <span data-ttu-id="b4068-142">前面的示例通过显示乘以0.1 乘以10的结果，再加上1次，阐释了这一点。</span><span class="sxs-lookup"><span data-stu-id="b4068-142">A previous example illustrated this by displaying the result of multiplying .1 by 10 and adding .1 times.</span></span>  
  
     <span data-ttu-id="b4068-143">当包含小数值的数值操作的准确性非常重要时，可以使用 <xref:System.Decimal> 而不是 <xref:System.Double> 类型。</span><span class="sxs-lookup"><span data-stu-id="b4068-143">When accuracy in numeric operations with fractional values is important, you can use the <xref:System.Decimal> rather than the <xref:System.Double> type.</span></span> <span data-ttu-id="b4068-144">当具有整数值超出或类型范围的数值操作的准确性 <xref:System.Int64> <xref:System.UInt64> 很重要时，请使用 <xref:System.Numerics.BigInteger> 类型。</span><span class="sxs-lookup"><span data-stu-id="b4068-144">When accuracy in numeric operations with integral values beyond the range of the <xref:System.Int64> or <xref:System.UInt64> types is important, use the <xref:System.Numerics.BigInteger> type.</span></span>  
  
-   <span data-ttu-id="b4068-145">如果涉及浮点数，值可能不会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-145">A value might not round-trip if a floating-point number is involved.</span></span> <span data-ttu-id="b4068-146">如果某个操作将原始浮点数转换为另一种格式，则会将值转换为舍入，而反向运算会将转换后的窗体转换回浮点数，并且最终浮点数不等于原始浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-146">A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is not equal to the original floating-point number.</span></span> <span data-ttu-id="b4068-147">往返过程可能会失败，因为在转换过程中一个或多个最小有效位会丢失或更改。</span><span class="sxs-lookup"><span data-stu-id="b4068-147">The round trip might fail because one or more least significant digits are lost or changed in a conversion.</span></span> <span data-ttu-id="b4068-148">在下面的示例中， <xref:System.Double> 将三个值转换为字符串，并保存在一个文件中。</span><span class="sxs-lookup"><span data-stu-id="b4068-148">In the following example, three <xref:System.Double> values are converted to strings and saved in a file.</span></span> <span data-ttu-id="b4068-149">但在输出中，即使值看起来相同，还原的值也不等于原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-149">As the output shows, however, even though the values appear to be identical, the restored values are not equal to the original values.</span></span>  
  
     [!code-csharp[System.Double.Structure#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist4.cs#7)]
     [!code-vb[System.Double.Structure#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist4.vb#7)]  
  
     <span data-ttu-id="b4068-150">在这种情况下，可以使用 "G17" [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 将值成功舍入，以保留值的完整精度 <xref:System.Double> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b4068-150">In this case, the values can be successfully round-tripped by using the "G17" [standard numeric format string](/dotnet/standard/base-types/standard-numeric-format-strings) to preserve the full precision of <xref:System.Double> values, as the following example shows.</span></span>  
  
     [!code-csharp[System.Double.Structure#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist5.cs#8)]
     [!code-vb[System.Double.Structure#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist5.vb#8)]  

   > [!IMPORTANT]
   >  <span data-ttu-id="b4068-151">与值一起使用时 <xref:System.Double> ，在某些情况下，"R" 格式说明符无法成功往返原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-151">When used with a <xref:System.Double> value, the "R" format specifier in some cases fails to successfully round-trip the original value.</span></span> <span data-ttu-id="b4068-152">若要确保 <xref:System.Double> 值成功往返，请使用 "G17" 格式说明符。</span><span class="sxs-lookup"><span data-stu-id="b4068-152">To ensure that <xref:System.Double> values successfully round-trip, use the "G17" format specifier.</span></span>

-   <span data-ttu-id="b4068-153"><xref:System.Single> 值的精度低于 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-153"><xref:System.Single> values have less precision than <xref:System.Double> values.</span></span> <span data-ttu-id="b4068-154"><xref:System.Single>转换为看似等效的值 <xref:System.Double> 通常不等于值， <xref:System.Double> 因为精度存在差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-154">A <xref:System.Single> value that is converted to a seemingly equivalent <xref:System.Double> often does not equal the <xref:System.Double> value because of differences in precision.</span></span> <span data-ttu-id="b4068-155">在下面的示例中，将相同除法运算的结果分配给 <xref:System.Double> 和 <xref:System.Single> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-155">In the following example, the result of identical division operations is assigned to a <xref:System.Double> and a <xref:System.Single> value.</span></span> <span data-ttu-id="b4068-156">在将 <xref:System.Single> 值强制转换为之后 <xref:System.Double> ，这两个值的比较表明它们不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-156">After the <xref:System.Single> value is cast to a <xref:System.Double>, a comparison of the two values shows that they are unequal.</span></span>  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     <span data-ttu-id="b4068-157">若要避免此问题，请使用 <xref:System.Double> 数据类型的位置 <xref:System.Single> ，或使用 <xref:System.Math.Round%2A> 方法，使这两个值具有相同的精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-157">To avoid this problem, use either the <xref:System.Double> in place of the <xref:System.Single> data type, or use the <xref:System.Math.Round%2A> method so that both values have the same precision.</span></span>  
  
 <span data-ttu-id="b4068-158">此外，由于类型的精度丢失，具有值的算术和赋值运算的结果 <xref:System.Double> 可能会略有不同 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-158">In addition, the result of arithmetic and assignment operations with <xref:System.Double> values may differ slightly by platform because of the loss of precision of the <xref:System.Double> type.</span></span> <span data-ttu-id="b4068-159">例如， <xref:System.Double> 在 .NET Framework 的32位和64位版本中，分配文本值的结果可能不同。</span><span class="sxs-lookup"><span data-stu-id="b4068-159">For example, the result of assigning a literal <xref:System.Double> value may differ in the 32-bit and 64-bit versions of the .NET Framework.</span></span> <span data-ttu-id="b4068-160">下面的示例说明了将文本值 4.42330604244772 E-305 和值为-305 4.42330604244772 的变量分配给变量时的这种差异 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-160">The following example illustrates this difference when the literal value -4.42330604244772E-305 and a variable whose value is -4.42330604244772E-305 are assigned to a <xref:System.Double> variable.</span></span> <span data-ttu-id="b4068-161">请注意， <xref:System.Double.Parse%28System.String%29> 在这种情况下，方法的结果不会受到精度损失。</span><span class="sxs-lookup"><span data-stu-id="b4068-161">Note that the result of the <xref:System.Double.Parse%28System.String%29> method in this case does not suffer from a loss of precision.</span></span>  
  
 [!code-csharp[System.Double.Class.Precision#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.class.precision/cs/precision1.cs#1)]
 [!code-vb[System.Double.Class.Precision#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.class.precision/vb/precision1.vb#1)]  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a><span data-ttu-id="b4068-162">测试是否相等</span><span class="sxs-lookup"><span data-stu-id="b4068-162">Testing for Equality</span></span>  
 <span data-ttu-id="b4068-163">若要将视为相等，两个 <xref:System.Double> 值必须表示相同的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-163">To be considered equal, two <xref:System.Double> values must represent identical values.</span></span> <span data-ttu-id="b4068-164">不过，由于值之间的精度差别，或由于一个或两个值的精度损失，应相同的浮点值经常会出现不相等，因为其最小有效位之间存在差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-164">However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal because of differences in their least significant digits.</span></span> <span data-ttu-id="b4068-165">因此，调用 <xref:System.Double.Equals%2A> 方法来确定两个值是否相等，或调用 <xref:System.Double.CompareTo%2A> 方法来确定两个值之间的关系 <xref:System.Double> ，通常会产生意外结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-165">As a result, calls to the <xref:System.Double.Equals%2A> method to determine whether two values are equal, or calls to the <xref:System.Double.CompareTo%2A> method to determine the relationship between two <xref:System.Double> values, often yield unexpected results.</span></span> <span data-ttu-id="b4068-166">在下面的示例中，这很明显，其中两个明显相等 <xref:System.Double> 的值是不相等的，因为第一个值的精度为15位，而第二个值为17。</span><span class="sxs-lookup"><span data-stu-id="b4068-166">This is evident in the following example, where two apparently equal <xref:System.Double> values turn out to be unequal because the first has 15 digits of precision, while the second has 17.</span></span>  
  
 [!code-csharp[System.Double.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Double.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison1.vb#9)]  
  
 <span data-ttu-id="b4068-167">采用不同的代码路径并以不同的方式操作的计算值通常证明不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-167">Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal.</span></span> <span data-ttu-id="b4068-168">在下面的示例中，一个 <xref:System.Double> 值为平方，然后计算平方根以还原原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-168">In the following example, one <xref:System.Double> value is squared, and then the square root is calculated to restore the original value.</span></span> <span data-ttu-id="b4068-169">第二个 <xref:System.Double> 比3.51 和 squared 相乘，然后将结果的平方根除以3.51 来还原原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-169">A second <xref:System.Double> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value.</span></span> <span data-ttu-id="b4068-170">尽管两个值看起来相同，但对方法的调用 <xref:System.Double.Equals%28System.Double%29> 指示它们不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-170">Although the two values appear to be identical, a call to the <xref:System.Double.Equals%28System.Double%29> method indicates that they are not equal.</span></span> <span data-ttu-id="b4068-171">使用 "R" 标准格式字符串返回显示每个 Double 值的所有有效位的结果字符串，显示第二个值小于第一个值 .0000000000001。</span><span class="sxs-lookup"><span data-stu-id="b4068-171">Using the "R" standard format string to return a result string that displays all the significant digits of each Double value shows that the second value is .0000000000001 less than the first.</span></span>  
  
 [!code-csharp[System.Double.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Double.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison2.vb#10)]  
  
 <span data-ttu-id="b4068-172">如果精度损失可能会影响比较结果，则可以采用以下任意一种方法调用 <xref:System.Double.Equals%2A> 或 <xref:System.Double.CompareTo%2A> 方法：</span><span class="sxs-lookup"><span data-stu-id="b4068-172">In cases where a loss of precision is likely to affect the result of a comparison, you can adopt any of the following alternatives to calling the <xref:System.Double.Equals%2A> or <xref:System.Double.CompareTo%2A> method:</span></span>  
  
-   <span data-ttu-id="b4068-173">调用 <xref:System.Math.Round%2A?displayProperty=nameWithType> 方法以确保这两个值具有相同的精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-173">Call the <xref:System.Math.Round%2A?displayProperty=nameWithType> method to ensure that both values have the same precision.</span></span> <span data-ttu-id="b4068-174">下面的示例修改了上一个示例，以使用此方法，以使两个小数值相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-174">The following example modifies a previous example to use this approach so that two fractional values are equivalent.</span></span>  
  
     [!code-csharp[System.Double.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Double.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison3.vb#11)]  
  
     <span data-ttu-id="b4068-175">但请注意，精度问题仍适用于中点值的舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-175">Note, though, that the problem of precision still applies to rounding of midpoint values.</span></span> <span data-ttu-id="b4068-176">有关更多信息，请参见 <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-176">For more information, see the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="b4068-177">测试近似相等性，而不是相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-177">Test for approximate equality rather than equality.</span></span> <span data-ttu-id="b4068-178">这要求您定义一个绝对值，而这两个值可以不同，但仍相等，也可以定义较小值与较大值之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-178">This requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="b4068-179"><xref:System.Double.Epsilon?displayProperty=nameWithType> 在测试相等性时，有时会将其用作两个值之间的距离的绝对度量值 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-179"><xref:System.Double.Epsilon?displayProperty=nameWithType> is sometimes used as an absolute measure of the distance between two <xref:System.Double> values when testing for equality.</span></span>  <span data-ttu-id="b4068-180">但 <xref:System.Double.Epsilon?displayProperty=nameWithType> 度量值为零的可添加到或从中减去的最小可能值 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-180">However, <xref:System.Double.Epsilon?displayProperty=nameWithType> measures the smallest possible value that can be added to, or subtracted from, a <xref:System.Double> whose value is zero.</span></span> <span data-ttu-id="b4068-181">对于大多数正值和负值 <xref:System.Double> ，值 <xref:System.Double.Epsilon?displayProperty=nameWithType> 太小，无法检测到。</span><span class="sxs-lookup"><span data-stu-id="b4068-181">For most positive and negative <xref:System.Double> values, the value of <xref:System.Double.Epsilon?displayProperty=nameWithType> is too small to be detected.</span></span> <span data-ttu-id="b4068-182">因此，除了零值以外，不建议在测试中使用它是否相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-182">Therefore, except for values that are zero, we do not recommend its use in tests for equality.</span></span>  
  
     <span data-ttu-id="b4068-183">下面的示例使用后一种方法来定义 `IsApproximatelyEqual` 测试两个值之间的相对差异的方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-183">The following example uses the latter approach to define an `IsApproximatelyEqual` method that tests the relative difference between two values.</span></span> <span data-ttu-id="b4068-184">它还比较了对方法的调用和方法的调用结果 `IsApproximatelyEqual` <xref:System.Double.Equals%28System.Double%29> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-184">It also contrasts the result of calls to the `IsApproximatelyEqual` method and the <xref:System.Double.Equals%28System.Double%29> method.</span></span>  
  
     [!code-csharp[System.Double.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Double.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a><span data-ttu-id="b4068-185">浮点值和异常</span><span class="sxs-lookup"><span data-stu-id="b4068-185">Floating-Point Values and Exceptions</span></span>  
 <span data-ttu-id="b4068-186">与整数类型的操作不同，在溢出或非法操作（如被零除）情况下引发异常时，具有浮点值的操作不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b4068-186">Unlike operations with integral types, which throw exceptions in cases of overflow or illegal operations such as division by zero, operations with floating-point values do not throw exceptions.</span></span> <span data-ttu-id="b4068-187">在异常情况下，浮点运算的结果为零、正无穷、负无穷或不是 (NaN) 的数字：</span><span class="sxs-lookup"><span data-stu-id="b4068-187">Instead, in exceptional situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</span></span>  
  
-   <span data-ttu-id="b4068-188">如果浮点运算的结果对于目标格式来说太小，则结果为零。</span><span class="sxs-lookup"><span data-stu-id="b4068-188">If the result of a floating-point operation is too small for the destination format, the result is zero.</span></span> <span data-ttu-id="b4068-189">当两个非常小的数字相乘时，可能会出现这种情况，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b4068-189">This can occur when two very small numbers are multiplied, as the following example shows.</span></span>  
  
     [!code-csharp[System.Double.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Double.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/exceptional1.vb#1)]  
  
-   <span data-ttu-id="b4068-190">如果浮点运算结果的大小超出目标格式的范围，则操作的结果为 <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> （适用于结果的符号）。</span><span class="sxs-lookup"><span data-stu-id="b4068-190">If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>, as appropriate for the sign of the result.</span></span> <span data-ttu-id="b4068-191">溢出的操作的结果为 <xref:System.Double.MaxValue?displayProperty=nameWithType> <xref:System.Double.PositiveInfinity> ，而溢出的操作的结果为 <xref:System.Double.MinValue?displayProperty=nameWithType> <xref:System.Double.NegativeInfinity> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b4068-191">The result of an operation that overflows <xref:System.Double.MaxValue?displayProperty=nameWithType> is <xref:System.Double.PositiveInfinity>, and the result of an operation that overflows <xref:System.Double.MinValue?displayProperty=nameWithType> is <xref:System.Double.NegativeInfinity>, as the following example shows.</span></span>  
  
     [!code-csharp[System.Double.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Double.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/exceptional2.vb#2)]  
  
     <span data-ttu-id="b4068-192"><xref:System.Double.PositiveInfinity> 还是由零除后被除数引起来的结果，并由 <xref:System.Double.NegativeInfinity> 零除导致负被除数的结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-192"><xref:System.Double.PositiveInfinity> also results from a division by zero with a positive dividend, and <xref:System.Double.NegativeInfinity> results from a division by zero with a negative dividend.</span></span>  
  
-   <span data-ttu-id="b4068-193">如果浮点操作无效，则操作的结果为 <xref:System.Double.NaN> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-193">If a floating-point operation is invalid, the result of the operation is <xref:System.Double.NaN>.</span></span> <span data-ttu-id="b4068-194">例如， <xref:System.Double.NaN> 以下操作的结果：</span><span class="sxs-lookup"><span data-stu-id="b4068-194">For example, <xref:System.Double.NaN> results from the following operations:</span></span>  
  
    -   <span data-ttu-id="b4068-195">除数为零的除以零。</span><span class="sxs-lookup"><span data-stu-id="b4068-195">Division by zero with a dividend of zero.</span></span> <span data-ttu-id="b4068-196">请注意，除数为零的其他情况会导致 <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-196">Note that other cases of division by zero result in either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>.</span></span>  
  
-   <span data-ttu-id="b4068-197">具有无效输入的任何浮点运算。</span><span class="sxs-lookup"><span data-stu-id="b4068-197">Any floating-point operation with an invalid input.</span></span> <span data-ttu-id="b4068-198">例如， <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> 使用负值调用方法将返回，这与 <xref:System.Double.NaN> <xref:System.Math.Acos%2A?displayProperty=nameWithType> 使用大于1或小于1的值调用方法时相同。</span><span class="sxs-lookup"><span data-stu-id="b4068-198">For example, calling the <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> method with a negative value returns <xref:System.Double.NaN>, as does calling the <xref:System.Math.Acos%2A?displayProperty=nameWithType> method with a value that is greater than one or less than negative one.</span></span>  
  
-   <span data-ttu-id="b4068-199">具有值为的参数的任何操作 <xref:System.Double.NaN?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-199">Any operation with an argument whose value is <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
<a name="Conversions"></a>   
## <a name="type-conversions-and-the-double-structure"></a><span data-ttu-id="b4068-200">类型转换和双结构</span><span class="sxs-lookup"><span data-stu-id="b4068-200">Type conversions and the Double structure</span></span>  
 <span data-ttu-id="b4068-201">该 <xref:System.Double> 结构不定义任何显式或隐式转换运算符; 相反，转换是由编译器实现的。</span><span class="sxs-lookup"><span data-stu-id="b4068-201">The <xref:System.Double> structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.</span></span>  
  
 <span data-ttu-id="b4068-202">任何基元数值类型的值转换为 <xref:System.Double> 扩大转换，因此不需要显式强制转换运算符或对转换方法的调用，除非编译器显式要求它。</span><span class="sxs-lookup"><span data-stu-id="b4068-202">The conversion of the value of any primitive numeric type to a <xref:System.Double> is a widening conversion and therefore does not require an explicit cast operator or call to a conversion method unless a compiler explicitly requires it.</span></span> <span data-ttu-id="b4068-203">例如，c # 编译器需要一个转换运算符用于从到的 <xref:System.Decimal> 转换 <xref:System.Double> ，而 Visual Basic 编译器则不需要。</span><span class="sxs-lookup"><span data-stu-id="b4068-203">For example, the C# compiler requires a casting operator for conversions from <xref:System.Decimal> to <xref:System.Double>, while the Visual Basic compiler does not.</span></span> <span data-ttu-id="b4068-204">下面的示例将其他基元数值类型的最小值或最大值转换为 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-204">The following example converts the minimum or maximum value of other primitive numeric types to a <xref:System.Double>.</span></span>  
  
 [!code-csharp[System.Double.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/convert1.cs#20)]
 [!code-vb[System.Double.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/convert1.vb#20)]  
  
 <span data-ttu-id="b4068-205">此外， <xref:System.Single> 值 <xref:System.Single.NaN?displayProperty=nameWithType> 、 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> 和 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> 分别转换为、和 <xref:System.Double.NaN?displayProperty=nameWithType> <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-205">In addition, the <xref:System.Single> values <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> convert to <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="b4068-206">请注意，某些数值类型的值到值的转换 <xref:System.Double> 可能会导致精度损失。</span><span class="sxs-lookup"><span data-stu-id="b4068-206">Note that the conversion of the value of some numeric types to a <xref:System.Double> value can involve a loss of precision.</span></span> <span data-ttu-id="b4068-207">如示例中所示，将 <xref:System.Decimal> 、 <xref:System.Int64> 、 <xref:System.Single> 和 <xref:System.UInt64> 值转换为 <xref:System.Double> 值时可能会丢失精度。</span><span class="sxs-lookup"><span data-stu-id="b4068-207">As the example illustrates, a loss of precision is possible when converting <xref:System.Decimal>, <xref:System.Int64>, <xref:System.Single>, and <xref:System.UInt64> values to <xref:System.Double> values.</span></span>  
  
 <span data-ttu-id="b4068-208"><xref:System.Double>值到任何其他基元数值数据类型的值的转换是收缩转换，要求在 c # ) 中 (转换运算符、Visual Basic) 中 (转换方法或调用 <xref:System.Convert> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-208">The conversion of a <xref:System.Double> value to a value of any other primitive numeric data type is a narrowing conversion and requires a cast operator (in C#), a conversion method (in Visual Basic), or a call to a <xref:System.Convert> method.</span></span> <span data-ttu-id="b4068-209">超出目标数据类型范围的值（由目标类型的 `MinValue` 和 `MaxValue` 属性定义）的行为如下表中所示。</span><span class="sxs-lookup"><span data-stu-id="b4068-209">Values that are outside the range of the target data type, which are defined by the target type's `MinValue` and `MaxValue` properties, behave as shown in the following table.</span></span>  
  
|<span data-ttu-id="b4068-210">目标类型</span><span class="sxs-lookup"><span data-stu-id="b4068-210">Target type</span></span>|<span data-ttu-id="b4068-211">结果</span><span class="sxs-lookup"><span data-stu-id="b4068-211">Result</span></span>|  
|-----------------|------------|  
|<span data-ttu-id="b4068-212">任何整型</span><span class="sxs-lookup"><span data-stu-id="b4068-212">Any integral type</span></span>|<span data-ttu-id="b4068-213"><xref:System.OverflowException>如果在检查的上下文中发生转换，则为异常。</span><span class="sxs-lookup"><span data-stu-id="b4068-213">An <xref:System.OverflowException> exception if the conversion occurs in a checked context.</span></span><br /><br /> <span data-ttu-id="b4068-214">如果在未检查的上下文中发生转换 (c # ) 中的默认值，则转换操作会成功，但值溢出。</span><span class="sxs-lookup"><span data-stu-id="b4068-214">If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="b4068-215">一个 <xref:System.OverflowException> 异常。</span><span class="sxs-lookup"><span data-stu-id="b4068-215">An <xref:System.OverflowException> exception.</span></span>|  
|<xref:System.Single>|<span data-ttu-id="b4068-216"><xref:System.Single.NegativeInfinity?displayProperty=nameWithType> 对于负值，则为。</span><span class="sxs-lookup"><span data-stu-id="b4068-216"><xref:System.Single.NegativeInfinity?displayProperty=nameWithType> for negative values.</span></span><br /><br /> <span data-ttu-id="b4068-217"><xref:System.Single.PositiveInfinity?displayProperty=nameWithType> 对于正值。</span><span class="sxs-lookup"><span data-stu-id="b4068-217"><xref:System.Single.PositiveInfinity?displayProperty=nameWithType> for positive values.</span></span>|  
  
 <span data-ttu-id="b4068-218">此外，、 <xref:System.Double.NaN?displayProperty=nameWithType> 、 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 和将 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 引发， <xref:System.OverflowException> 以便转换为已检查上下文中的整数，但这些值在转换为未检查的上下文中的整数时溢出。</span><span class="sxs-lookup"><span data-stu-id="b4068-218">In addition, <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> throw an <xref:System.OverflowException> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context.</span></span> <span data-ttu-id="b4068-219">对于到的转换 <xref:System.Decimal> ，它们始终引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-219">For conversions to <xref:System.Decimal>, they always throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-220">对于到的转换 <xref:System.Single> ，它们分别转换为 <xref:System.Single.NaN?displayProperty=nameWithType> 、 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> 和 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-220">For conversions to <xref:System.Single>, they convert to <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="b4068-221">请注意，将 <xref:System.Double> 值转换为另一种数值类型可能会导致精度损失。</span><span class="sxs-lookup"><span data-stu-id="b4068-221">Note that a loss of precision may result from converting a <xref:System.Double> value to another numeric type.</span></span> <span data-ttu-id="b4068-222">在转换非整数值的情况下 <xref:System.Double> ，如示例的输出所示，如果将 <xref:System.Double> 值舍入 (与 Visual Basic) 中的一样，则会丢失小数部分，否则在 c # ) 中截断 (。</span><span class="sxs-lookup"><span data-stu-id="b4068-222">In the case of converting non-integral <xref:System.Double> values, as the output from the example shows, the fractional component is lost when the <xref:System.Double> value is either rounded (as in Visual Basic) or truncated (as in C#).</span></span> <span data-ttu-id="b4068-223">对于 <xref:System.Decimal> 和值的转换 <xref:System.Single> ，此 <xref:System.Double> 值在目标数据类型中可能没有精确的表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-223">For conversions to <xref:System.Decimal> and <xref:System.Single> values, the <xref:System.Double> value may not have a precise representation in the target data type.</span></span>  
  
 <span data-ttu-id="b4068-224">下面的示例将多 <xref:System.Double> 个值转换为多个其他数值类型。</span><span class="sxs-lookup"><span data-stu-id="b4068-224">The following example converts a number of <xref:System.Double> values to several other numeric types.</span></span> <span data-ttu-id="b4068-225">由于 [checked](/dotnet/csharp/language-reference/keywords/checked) 关键字) ，转换在 Visual Basic (默认) 和 c # (中的检查上下文中进行。</span><span class="sxs-lookup"><span data-stu-id="b4068-225">The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the [checked](/dotnet/csharp/language-reference/keywords/checked) keyword).</span></span> <span data-ttu-id="b4068-226">该示例的输出显示了已检查的未检查上下文中的转换结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-226">The output from the example shows the result for conversions in both a checked an unchecked context.</span></span> <span data-ttu-id="b4068-227">可以通过使用 `/removeintchecks+` 编译器开关进行编译，并通过注释掉语句，在 Visual Basic 中的未检查上下文中执行转换 `checked` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-227">You can perform conversions in an unchecked context in Visual Basic by compiling with the `/removeintchecks+` compiler switch and in C# by commenting out the `checked` statement.</span></span>  
  
 [!code-csharp[System.Double.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/convert2.cs#21)]
 [!code-vb[System.Double.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/convert2.vb#21)]  
  
 <span data-ttu-id="b4068-228">有关数值类型转换的详细信息，请参阅 .NET Framework 和[类型转换表](/dotnet/standard/base-types/conversion-tables)[中的类型转换](/dotnet/standard/base-types/type-conversion)。</span><span class="sxs-lookup"><span data-stu-id="b4068-228">For more information on the conversion of numeric types, see [Type Conversion in the .NET Framework](/dotnet/standard/base-types/type-conversion) and [Type Conversion Tables](/dotnet/standard/base-types/conversion-tables).</span></span>  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a><span data-ttu-id="b4068-229">浮点型功能</span><span class="sxs-lookup"><span data-stu-id="b4068-229">Floating-Point Functionality</span></span>  
 <span data-ttu-id="b4068-230"><xref:System.Double>结构和相关类型提供了在以下几个方面执行操作的方法：</span><span class="sxs-lookup"><span data-stu-id="b4068-230">The <xref:System.Double> structure and related types provide methods to perform operations in the following areas:</span></span>  
  
-   <span data-ttu-id="b4068-231">**值比较**。</span><span class="sxs-lookup"><span data-stu-id="b4068-231">**Comparison of values**.</span></span> <span data-ttu-id="b4068-232">您可以调用 <xref:System.Double.Equals%2A> 方法来确定两个 <xref:System.Double> 值是否相等，或调用 <xref:System.Double.CompareTo%2A> 方法来确定两个值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="b4068-232">You can call the <xref:System.Double.Equals%2A> method to determine whether two <xref:System.Double> values are equal, or the <xref:System.Double.CompareTo%2A> method to determine the relationship between two values.</span></span>  
  
     <span data-ttu-id="b4068-233">该 <xref:System.Double> 结构还支持一组完整的比较运算符。</span><span class="sxs-lookup"><span data-stu-id="b4068-233">The <xref:System.Double> structure also supports a complete set of comparison operators.</span></span> <span data-ttu-id="b4068-234">例如，你可以测试是否相等或不相等，或确定一个值是否大于或等于另一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-234">For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another.</span></span> <span data-ttu-id="b4068-235">如果其中一个操作数是非的数值类型，则在 <xref:System.Double> 执行比较之前将其转换为 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-235">If one of the operands is a numeric type other than a <xref:System.Double>, it is converted to a <xref:System.Double> before performing the comparison.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="b4068-236">由于精度之间存在差异，因此两个 <xref:System.Double> 预期相等的值可能会不相等，这将影响比较的结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-236">Because of differences in precision, two <xref:System.Double> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison.</span></span> <span data-ttu-id="b4068-237">有关比较两个值的详细信息，请参阅 [测试相等性](#Equality) 部分 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-237">See the [Testing for Equality](#Equality) section for more information about comparing two <xref:System.Double> values.</span></span>  
  
     <span data-ttu-id="b4068-238">你还可以调用 <xref:System.Double.IsNaN%2A> 、 <xref:System.Double.IsInfinity%2A> 、 <xref:System.Double.IsPositiveInfinity%2A> 和 <xref:System.Double.IsNegativeInfinity%2A> 方法来测试这些特殊值。</span><span class="sxs-lookup"><span data-stu-id="b4068-238">You can also call the <xref:System.Double.IsNaN%2A>, <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, and <xref:System.Double.IsNegativeInfinity%2A> methods to test for these special values.</span></span>  
  
-   <span data-ttu-id="b4068-239">**数学运算**。</span><span class="sxs-lookup"><span data-stu-id="b4068-239">**Mathematical operations**.</span></span> <span data-ttu-id="b4068-240">常见算术运算（例如加法、减法、乘法和除法）由语言编译器和公共中间语言 (CIL) 指令实现，而不是通过方法实现 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-240">Common arithmetic operations, such as addition, subtraction, multiplication, and division, are implemented by language compilers and Common Intermediate Language (CIL) instructions, rather than by <xref:System.Double> methods.</span></span> <span data-ttu-id="b4068-241">如果数学运算中的一个操作数为数值类型而不是，则在 <xref:System.Double> 执行运算前将其转换为 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-241">If one of the operands in a mathematical operation is a numeric type other than a <xref:System.Double>, it is converted to a <xref:System.Double> before performing the operation.</span></span> <span data-ttu-id="b4068-242">操作的结果也是 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-242">The result of the operation is also a <xref:System.Double> value.</span></span>  
  
     <span data-ttu-id="b4068-243">其他数学运算可以通过调用类中 `static` `Shared` Visual Basic) 方法 (来执行 <xref:System.Math?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-243">Other mathematical operations can be performed by calling `static` (`Shared` in Visual Basic) methods in the <xref:System.Math?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="b4068-244">它包括通常用于算术 (的其他方法，例如 <xref:System.Math.Abs%2A?displayProperty=nameWithType> 、 <xref:System.Math.Sign%2A?displayProperty=nameWithType> 和 <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>) 、几何图形 (如 <xref:System.Math.Cos%2A?displayProperty=nameWithType> 和 <xref:System.Math.Sin%2A?displayProperty=nameWithType>) ）以及 (等微积分) <xref:System.Math.Log%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-244">It includes additional methods commonly used for arithmetic (such as <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, and <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometry (such as <xref:System.Math.Cos%2A?displayProperty=nameWithType> and <xref:System.Math.Sin%2A?displayProperty=nameWithType>), and calculus (such as <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span></span>  
  
     <span data-ttu-id="b4068-245">您还可以操作值中的单个位 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-245">You can also manipulate the individual bits in a <xref:System.Double> value.</span></span> <span data-ttu-id="b4068-246"><xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType>方法 <xref:System.Double> 在64位整数中保留值的位模式。</span><span class="sxs-lookup"><span data-stu-id="b4068-246">The <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> method preserves a <xref:System.Double> value's bit pattern in a 64-bit integer.</span></span> <span data-ttu-id="b4068-247"><xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType>方法返回其在字节数组中的位模式。</span><span class="sxs-lookup"><span data-stu-id="b4068-247">The <xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType> method returns its bit pattern in a byte array.</span></span>  
  
-   <span data-ttu-id="b4068-248">**舍入**。</span><span class="sxs-lookup"><span data-stu-id="b4068-248">**Rounding**.</span></span> <span data-ttu-id="b4068-249">舍入通常用作一种方法，用于降低由于浮点表示形式和精度问题导致的值之间的差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-249">Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision.</span></span> <span data-ttu-id="b4068-250">可以 <xref:System.Double> 通过调用方法来舍入值 <xref:System.Math.Round%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-250">You can round a <xref:System.Double> value by calling the <xref:System.Math.Round%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="b4068-251">**格式设置**。</span><span class="sxs-lookup"><span data-stu-id="b4068-251">**Formatting**.</span></span> <span data-ttu-id="b4068-252">可以 <xref:System.Double> 通过调用 <xref:System.Double.ToString%2A> 方法或使用复合格式设置功能，将值转换为其字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-252">You can convert a <xref:System.Double> value to its string representation by calling the <xref:System.Double.ToString%2A> method or by using the composite formatting feature.</span></span> <span data-ttu-id="b4068-253">有关格式字符串如何控制浮点值的字符串表示形式的信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings) 主题。</span><span class="sxs-lookup"><span data-stu-id="b4068-253">For information about how format strings control the string representation of floating-point values, see the [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings) topics.</span></span>  
  
-   <span data-ttu-id="b4068-254">**分析字符串**。</span><span class="sxs-lookup"><span data-stu-id="b4068-254">**Parsing strings**.</span></span> <span data-ttu-id="b4068-255">可以 <xref:System.Double> 通过调用或方法，将浮点值的字符串表示形式转换为值 <xref:System.Double.Parse%2A> <xref:System.Double.TryParse%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-255">You can convert the string representation of a floating-point value to a <xref:System.Double> value by calling either the <xref:System.Double.Parse%2A> or <xref:System.Double.TryParse%2A> method.</span></span> <span data-ttu-id="b4068-256">如果分析操作失败，则该 <xref:System.Double.Parse%2A> 方法将引发异常，而 <xref:System.Double.TryParse%2A> 方法返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-256">If the parse operation fails, the <xref:System.Double.Parse%2A> method throws an exception, whereas the <xref:System.Double.TryParse%2A> method returns `false`.</span></span>  
  
-   <span data-ttu-id="b4068-257">**类型转换**。</span><span class="sxs-lookup"><span data-stu-id="b4068-257">**Type conversion**.</span></span> <span data-ttu-id="b4068-258"><xref:System.Double>结构为接口提供了显式接口实现 <xref:System.IConvertible> ，该接口支持任意两个标准 .NET Framework 数据类型之间的转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-258">The <xref:System.Double> structure provides an explicit interface implementation for the <xref:System.IConvertible> interface, which supports conversion between any two standard .NET Framework data types.</span></span> <span data-ttu-id="b4068-259">语言编译器还支持将所有其他标准数值类型的值隐式转换为 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-259">Language compilers also support the implicit conversion of values of all other standard numeric types to <xref:System.Double> values.</span></span> <span data-ttu-id="b4068-260">将任何标准数值类型的值转换为 <xref:System.Double> 扩大转换，不需要使用强制转换运算符或转换方法的用户。</span><span class="sxs-lookup"><span data-stu-id="b4068-260">Conversion of a value of any standard numeric type to a <xref:System.Double> is a widening conversion and does not require the user of a casting operator or conversion method,</span></span>  
  
     <span data-ttu-id="b4068-261">但是， <xref:System.Int64> 和值的转换 <xref:System.Single> 可能会导致精度损失。</span><span class="sxs-lookup"><span data-stu-id="b4068-261">However, conversion of <xref:System.Int64> and <xref:System.Single> values can involve a loss of precision.</span></span> <span data-ttu-id="b4068-262">下表列出了每种类型的精度差异：</span><span class="sxs-lookup"><span data-stu-id="b4068-262">The following table lists the differences in precision for each of these types:</span></span>  
  
    |<span data-ttu-id="b4068-263">类型</span><span class="sxs-lookup"><span data-stu-id="b4068-263">Type</span></span>|<span data-ttu-id="b4068-264">最大精度</span><span class="sxs-lookup"><span data-stu-id="b4068-264">Maximum precision</span></span>|<span data-ttu-id="b4068-265">内部精度</span><span class="sxs-lookup"><span data-stu-id="b4068-265">Internal precision</span></span>|  
    |----------|-----------------------|------------------------|  
    |<xref:System.Double>|<span data-ttu-id="b4068-266">15</span><span class="sxs-lookup"><span data-stu-id="b4068-266">15</span></span>|<span data-ttu-id="b4068-267">17</span><span class="sxs-lookup"><span data-stu-id="b4068-267">17</span></span>|  
    |<xref:System.Int64>|<span data-ttu-id="b4068-268">19个十进制数字</span><span class="sxs-lookup"><span data-stu-id="b4068-268">19 decimal digits</span></span>|<span data-ttu-id="b4068-269">19个十进制数字</span><span class="sxs-lookup"><span data-stu-id="b4068-269">19 decimal digits</span></span>|  
    |<xref:System.Single>|<span data-ttu-id="b4068-270">7个十进制数字</span><span class="sxs-lookup"><span data-stu-id="b4068-270">7 decimal digits</span></span>|<span data-ttu-id="b4068-271">9个十进制数字</span><span class="sxs-lookup"><span data-stu-id="b4068-271">9 decimal digits</span></span>|  
  
     <span data-ttu-id="b4068-272">精确的问题会影响 <xref:System.Single> 转换为值的值 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-272">The problem of precision most frequently affects <xref:System.Single> values that are converted to <xref:System.Double> values.</span></span> <span data-ttu-id="b4068-273">在下面的示例中，两个由相同除法运算生成的值是不相等的，因为其中一个值是转换为的单精度浮点值 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-273">In the following example, two values produced by identical division operations are unequal because one of the values is a single-precision floating point value converted to a <xref:System.Double>.</span></span>  
  
     [!code-csharp[System.Double.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation1.cs#3)]
     [!code-vb[System.Double.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="b4068-274">下面的代码示例阐释了的用法 <xref:System.Double> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-274">The following code example illustrates the use of <xref:System.Double>:</span></span>  
  
 [!code-cpp[Double Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#1)]
 [!code-csharp[Double Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#1)]
 [!code-vb[Double Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="b4068-275">此类型的所有成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="b4068-275">All members of this type are thread safe.</span></span> <span data-ttu-id="b4068-276">看似修改实例状态的成员实际上返回用新值初始化的新实例。</span><span class="sxs-lookup"><span data-stu-id="b4068-276">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="b4068-277">与任何其他类型一样，读取和写入包含此类型的实例的共享变量时，必须通过锁保护以保证线程安全。</span><span class="sxs-lookup"><span data-stu-id="b4068-277">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Single" />
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/"><span data-ttu-id="b4068-278">示例： .NET Core WinForms 格式设置实用工具 (c # ) </span><span class="sxs-lookup"><span data-stu-id="b4068-278">Sample: .NET Core WinForms Formatting Utility (C#)</span></span></related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/"><span data-ttu-id="b4068-279">示例： .NET Core WinForms 格式设置实用工具 (Visual Basic) </span><span class="sxs-lookup"><span data-stu-id="b4068-279">Sample: .NET Core WinForms Formatting Utility (Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4068-280">将此实例与指定的对象或 <see cref="T:System.Double" /> 对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象或 <see cref="T:System.Double" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-280">Compares this instance to a specified object or <see cref="T:System.Double" /> object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object or <see cref="T:System.Double" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.CompareTo(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(double value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : double -&gt; int&#xA;override this.CompareTo : double -&gt; int" Usage="double.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b4068-281">要比较的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-281">A double-precision floating-point number to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-282">将此实例与指定的双精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定双精度浮点数的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-282">Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b4068-283">一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。</span><span class="sxs-lookup"><span data-stu-id="b4068-283">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b4068-284">返回值</span><span class="sxs-lookup"><span data-stu-id="b4068-284">Return Value</span></span> 
 </term><description> <span data-ttu-id="b4068-285">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-285">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b4068-286">小于零</span><span class="sxs-lookup"><span data-stu-id="b4068-286">Less than zero</span></span> 
 </term><description> <span data-ttu-id="b4068-287">此实例小于 <paramref name="value" />，或此实例不是数字 (<see cref="F:System.Double.NaN" />)，而 <paramref name="value" /> 是数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-287">This instance is less than <paramref name="value" />, or this instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b4068-288">零</span><span class="sxs-lookup"><span data-stu-id="b4068-288">Zero</span></span> 
 </term><description> <span data-ttu-id="b4068-289">此实例等于 <paramref name="value" />，或此实例和 <paramref name="value" /> 均不为数字 (<see cref="F:System.Double.NaN" />)、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-289">This instance is equal to <paramref name="value" />, or both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b4068-290">大于零</span><span class="sxs-lookup"><span data-stu-id="b4068-290">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="b4068-291">此实例大于 <paramref name="value" />，或此实例为数字，而 <paramref name="value" /> 不是数字 (<see cref="F:System.Double.NaN" />)。</span><span class="sxs-lookup"><span data-stu-id="b4068-291">This instance is greater than <paramref name="value" />, or this instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-292">值必须完全相同，才能视为相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-292">Values must be identical to be considered equal.</span></span> <span data-ttu-id="b4068-293">特别是当浮点值依赖于多个数学运算时，通常情况下，它们会丢失精度，并且它们的值几乎完全相同，只是它们的最小有效位除外。</span><span class="sxs-lookup"><span data-stu-id="b4068-293">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="b4068-294">因此，方法的返回值 <xref:System.Double.CompareTo%2A> 有时可能会令人吃惊。</span><span class="sxs-lookup"><span data-stu-id="b4068-294">Because of this, the return value of the <xref:System.Double.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="b4068-295">例如，按特定值的乘法后跟同一值相除的值应生成原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-295">For example, multiplication by a particular value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="b4068-296">但是，在下面的示例中，计算所得的值为大于原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-296">In the following example, however, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="b4068-297">使用 "R" [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 显示这两个值的所有有效位数，表示计算所得的值与最小有效位中的原始值不同。</span><span class="sxs-lookup"><span data-stu-id="b4068-297">Showing all significant digits of the two values by using the "R" [standard numeric format string](/dotnet/standard/base-types/standard-numeric-format-strings) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="b4068-298">有关如何处理此类比较的信息，请参阅方法的 "备注" 部分 <xref:System.Double.Equals%28System.Double%29> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-298">For information on handling such comparisons, see the Remarks section of the <xref:System.Double.Equals%28System.Double%29> method.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.compareto/cs/compareto2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.compareto/vb/compareto2.vb" id="Snippet1":::
 
 <span data-ttu-id="b4068-299">此方法实现 <xref:System.IComparable%601?displayProperty=nameWithType> 接口，且执行方式略优于 <xref:System.Double.CompareTo%2A?displayProperty=nameWithType> 方法，因为它不必将 `value` 参数转换为对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-299">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Double.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="b4068-300">请注意，尽管一个对象的值不 <xref:System.Double.NaN> 等于另一个对象，而该对象的值 <xref:System.Double.NaN> (甚至) ，但 <xref:System.IComparable%601> 接口要求 `A.CompareTo(A)` 返回零。</span><span class="sxs-lookup"><span data-stu-id="b4068-300">Note that, although an object whose value is <xref:System.Double.NaN> is not considered equal to another object whose value is <xref:System.Double.NaN> (even itself), the <xref:System.IComparable%601> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="b4068-301">扩大转换</span><span class="sxs-lookup"><span data-stu-id="b4068-301">Widening Conversions</span></span>  
 <span data-ttu-id="b4068-302">根据您的编程语言，可以编写一个方法，在 <xref:System.Double.CompareTo%2A> 此方法中，参数类型 (比实例类型更窄) 位。</span><span class="sxs-lookup"><span data-stu-id="b4068-302">Depending on your programming language, it might be possible to code a <xref:System.Double.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="b4068-303">这是可能的，因为某些编程语言会执行将参数表示为类型的隐式扩大转换，该类型的位数与实例的位数一样多。</span><span class="sxs-lookup"><span data-stu-id="b4068-303">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="b4068-304">例如，假设实例类型为 <xref:System.Double> ，而参数类型为 <xref:System.Int32> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-304">For example, suppose the instance type is <xref:System.Double> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="b4068-305">Microsoft c # 编译器生成说明，以将参数的值表示为 <xref:System.Double> 对象，然后生成一个 <xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType> 方法，该方法将实例的值与参数的加宽表示形式进行比较。</span><span class="sxs-lookup"><span data-stu-id="b4068-305">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Double> object, then generates a <xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="b4068-306">请查阅编程语言的文档，以确定其编译器是否执行数值类型的隐式扩大转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-306">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="b4068-307">有关详细信息，请参阅 [类型转换表](/dotnet/standard/base-types/conversion-tables) 主题。</span><span class="sxs-lookup"><span data-stu-id="b4068-307">For more information, see the [Type Conversion Tables](/dotnet/standard/base-types/conversion-tables) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="b4068-308">比较中的精度</span><span class="sxs-lookup"><span data-stu-id="b4068-308">Precision in Comparisons</span></span>  
 <span data-ttu-id="b4068-309">超出所记录精度的浮点数的精度特定于 .NET Framework 的实现和版本。</span><span class="sxs-lookup"><span data-stu-id="b4068-309">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="b4068-310">因此，两个特定数字的比较可能会在 .NET Framework 的不同版本之间发生变化，因为数字的内部表示形式的精度可能会改变。</span><span class="sxs-lookup"><span data-stu-id="b4068-310">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-311">下面的代码示例演示了 <xref:System.Double.CompareTo%2A> 多个值和引用类型的方法的泛型和非泛型版本。</span><span class="sxs-lookup"><span data-stu-id="b4068-311">The following code example demonstrates generic and nongeneric versions of the <xref:System.Double.CompareTo%2A> method for several value and reference types.</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="double.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b4068-312">要比较的对象，或为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-312">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b4068-313">将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-313">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="b4068-314">一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。</span><span class="sxs-lookup"><span data-stu-id="b4068-314">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="b4068-315">“值”</span><span class="sxs-lookup"><span data-stu-id="b4068-315">Value</span></span> 
 </term><description> <span data-ttu-id="b4068-316">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-316">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="b4068-317">负整数</span><span class="sxs-lookup"><span data-stu-id="b4068-317">A negative integer</span></span> 
 </term><description> <span data-ttu-id="b4068-318">此实例小于 <paramref name="value" />，或此实例不是数字 (<see cref="F:System.Double.NaN" />)，而 <paramref name="value" /> 是数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-318">This instance is less than <paramref name="value" />, or this instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="b4068-319">零</span><span class="sxs-lookup"><span data-stu-id="b4068-319">Zero</span></span> 
 </term><description> <span data-ttu-id="b4068-320">此实例等于 <paramref name="value" />，或此实例和 <paramref name="value" /> 均为 <see langword="Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /></span><span class="sxs-lookup"><span data-stu-id="b4068-320">This instance is equal to <paramref name="value" />, or this instance and <paramref name="value" /> are both <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /></span></span></description></item><item><term> <span data-ttu-id="b4068-321">正整数</span><span class="sxs-lookup"><span data-stu-id="b4068-321">A positive integer</span></span> 
 </term><description> <span data-ttu-id="b4068-322">此实例大于 <paramref name="value" />，或此实例是数字，而 <paramref name="value" /> 不是数字 (<see cref="F:System.Double.NaN" />)，或 <paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-322">This instance is greater than <paramref name="value" />, OR this instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />), OR <paramref name="value" /> is <see langword="null" />.</span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-323">`value`参数必须为 `null` 或的实例 `Double` ; 否则，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="b4068-323">The `value` parameter must be `null` or an instance of `Double`; otherwise, an exception is thrown.</span></span> <span data-ttu-id="b4068-324">的任何实例 <xref:System.Double> ，无论其值如何，都视为大于 `null` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-324">Any instance of <xref:System.Double>, regardless of its value, is considered greater than `null`.</span></span>  
  
 <span data-ttu-id="b4068-325">值必须完全相同，才能视为相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-325">Values must be identical to be considered equal.</span></span> <span data-ttu-id="b4068-326">特别是当浮点值依赖于多个数学运算时，通常情况下，它们会丢失精度，并且它们的值几乎完全相同，只是它们的最小有效位除外。</span><span class="sxs-lookup"><span data-stu-id="b4068-326">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="b4068-327">因此，方法的返回值 <xref:System.Double.CompareTo%2A> 有时可能会令人吃惊。</span><span class="sxs-lookup"><span data-stu-id="b4068-327">Because of this, the return value of the <xref:System.Double.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="b4068-328">例如，按特定值的乘法后跟同一值相除的值应生成原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-328">For example, multiplication by a particular value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="b4068-329">但是，在下面的示例中，计算所得的值为大于原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-329">In the following example, however, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="b4068-330">使用 "R" [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 显示这两个值的所有有效位数，表示计算所得的值与最小有效位中的原始值不同。</span><span class="sxs-lookup"><span data-stu-id="b4068-330">Showing all significant digits of the two values by using the "R" [standard numeric format string](/dotnet/standard/base-types/standard-numeric-format-strings) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="b4068-331">有关如何处理此类比较的信息，请参阅方法的 "备注" 部分 <xref:System.Double.Equals%28System.Double%29> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-331">For information on handling such comparisons, see the Remarks section of the <xref:System.Double.Equals%28System.Double%29> method.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.compareto/cs/compareto3.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.compareto/vb/compareto3.vb" id="Snippet2":::

 <span data-ttu-id="b4068-332">实现此方法是为了支持 <xref:System.IComparable> 接口。</span><span class="sxs-lookup"><span data-stu-id="b4068-332">This method is implemented to support the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="b4068-333">请注意，尽管不会被 <xref:System.Double.NaN> 视为等于其他 <xref:System.Double.NaN> (甚至) ，但 <xref:System.IComparable> 接口需要 `A.CompareTo(A)` 返回零。</span><span class="sxs-lookup"><span data-stu-id="b4068-333">Note that, although a <xref:System.Double.NaN> is not considered to be equal to another <xref:System.Double.NaN> (even itself), the <xref:System.IComparable> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="b4068-334">比较中的精度</span><span class="sxs-lookup"><span data-stu-id="b4068-334">Precision in Comparisons</span></span>  
 <span data-ttu-id="b4068-335">超出所记录精度的浮点数的精度特定于 .NET Framework 的实现和版本。</span><span class="sxs-lookup"><span data-stu-id="b4068-335">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="b4068-336">因此，两个特定数字的比较可能会在 .NET Framework 的不同版本之间发生变化，因为数字的内部表示形式的精度可能会改变。</span><span class="sxs-lookup"><span data-stu-id="b4068-336">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-337">下面的代码示例演示如何在的 `CompareTo` 上下文中使用 `Double` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-337">The following code example illustrates the use of `CompareTo` in the context of `Double`.</span></span>  
  
 [!code-cpp[System.Double#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#16)]
 [!code-csharp[System.Double#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#16)]
 [!code-vb[System.Double#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4068-338"><paramref name="value" /> 不是 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-338"><paramref name="value" /> is not a <see cref="T:System.Double" />.</span></span></exception>
        <altmember cref="M:System.Double.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 Epsilon = float64(4.94065645841247E-324)" />
      <MemberSignature Language="DocId" Value="F:System.Double.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Double  = 4.94065645841247E-324" />
      <MemberSignature Language="C++ CLI" Value="public: double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="F#" Value="val mutable Epsilon : double" Usage="System.double.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>4.94065645841247E-324</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4068-339">表示大于零的最小正 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-339">Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero.</span></span> <span data-ttu-id="b4068-340">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="b4068-340">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-341"><xref:System.Double.Epsilon>如果实例的值为零，则属性的值将反映 <xref:System.Double> 数值操作或比较中重要的最小正值 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-341">The value of the <xref:System.Double.Epsilon> property reflects the smallest positive <xref:System.Double> value that is significant in numeric operations or comparisons when the value of the <xref:System.Double> instance is zero.</span></span> <span data-ttu-id="b4068-342">例如，下面的代码显示零和被 <xref:System.Double.Epsilon> 视为不相等的值，而零和一半的值被 <xref:System.Double.Epsilon> 视为相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-342">For example, the following code shows that zero and <xref:System.Double.Epsilon> are considered to be unequal values, whereas zero and half the value of <xref:System.Double.Epsilon> are considered to be equal.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/epsilon.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/epsilon.vb" id="Snippet5"::: 
  
 <span data-ttu-id="b4068-343">更准确地说，浮点格式由符号、52位尾数或有效位数以及11位指数组成。</span><span class="sxs-lookup"><span data-stu-id="b4068-343">More precisely, the floating point format consists of a sign, a 52-bit mantissa or significand, and an 11-bit exponent.</span></span> <span data-ttu-id="b4068-344">如下面的示例所示，零的指数为-1022，尾数为0。</span><span class="sxs-lookup"><span data-stu-id="b4068-344">As the following example shows, zero has an exponent of -1022 and a mantissa of 0.</span></span> <span data-ttu-id="b4068-345"><xref:System.Double.Epsilon> 的指数为-1022，尾数为1。</span><span class="sxs-lookup"><span data-stu-id="b4068-345"><xref:System.Double.Epsilon> has an exponent of -1022 and a mantissa of 1.</span></span> <span data-ttu-id="b4068-346">这意味着，它 <xref:System.Double.Epsilon> 是大于零的最小正值 <xref:System.Double> ，表示 <xref:System.Double> 指数为-1022 的的最小可能值和可能的最小增量。</span><span class="sxs-lookup"><span data-stu-id="b4068-346">This means that <xref:System.Double.Epsilon> is the smallest positive <xref:System.Double> value greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Double> whose exponent is -1022.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/epsilon1.cs" interactive="try-dotnet" id="Snippet6":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/epsilon1.vb" id="Snippet6":::
  
 <span data-ttu-id="b4068-347">但是，该 <xref:System.Double.Epsilon> 属性不是类型精度的常规度量值 <xref:System.Double> ; 它仅适用于值为 <xref:System.Double> 零或指数为-1022 的实例。</span><span class="sxs-lookup"><span data-stu-id="b4068-347">However, the <xref:System.Double.Epsilon> property is not a general measure of precision of the <xref:System.Double> type; it applies only to <xref:System.Double> instances that have a value of zero or an exponent of -1022.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4068-348">此属性的值 <xref:System.Double.Epsilon> 不等效于计算机 epsilon，后者表示相对错误的上限，原因是浮点算法中的舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-348">The value of the <xref:System.Double.Epsilon> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="b4068-349">此常量的值为 4.94065645841247 e-324。</span><span class="sxs-lookup"><span data-stu-id="b4068-349">The value of this constant is 4.94065645841247e-324.</span></span>  
  
 <span data-ttu-id="b4068-350">两个显然等效的浮点数可能不相等，因为其最小有效位之间存在差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-350">Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits.</span></span> <span data-ttu-id="b4068-351">例如，c # 表达式不 `(double)1/3 == (double)0.33333` 比较相等，因为左侧的除法运算具有最大的精度，而右侧的常数仅精确到指定的位数。</span><span class="sxs-lookup"><span data-stu-id="b4068-351">For example, the C# expression, `(double)1/3 == (double)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits.</span></span> <span data-ttu-id="b4068-352">如果您创建一个自定义算法来确定是否可以将两个浮点数视为相等，则建议您不要将算法基于常量的值， <xref:System.Double.Epsilon> 以确定两个值被视为相等的可接受的绝对边距。</span><span class="sxs-lookup"><span data-stu-id="b4068-352">If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, we do not recommend that you base your algorithm on the value of the <xref:System.Double.Epsilon> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.</span></span>  <span data-ttu-id="b4068-353"> (通常情况下，差值幅度大于 <xref:System.Double.Epsilon> 。 ) 有关比较两个双精度浮点值的信息，请参阅 <xref:System.Double> 和 <xref:System.Double.Equals%28System.Double%29> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-353">(Typically, that margin of difference is many times greater than <xref:System.Double.Epsilon>.) For information about comparing two double-precision floating-point values, see <xref:System.Double> and <xref:System.Double.Equals%28System.Double%29>.</span></span>  
  
## <a name="platform-notes"></a><span data-ttu-id="b4068-354">平台说明</span><span class="sxs-lookup"><span data-stu-id="b4068-354">Platform Notes</span></span>  
 <span data-ttu-id="b4068-355">ARM 系统上的 <xref:System.Double.Epsilon> 常量值太小，无法检测到，因此它等于零。</span><span class="sxs-lookup"><span data-stu-id="b4068-355">On ARM systems, the value of the <xref:System.Double.Epsilon> constant is too small to be detected, so it equates to zero.</span></span> <span data-ttu-id="b4068-356">可以改为定义等于 2.2250738585072014 E-308 的备用 epsilon 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-356">You can define an alternative epsilon value that equals 2.2250738585072014E-308 instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4068-357">返回一个值，该值指示 <see cref="T:System.Double" /> 的两个实例是否表示同一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-357">Returns a value indicating whether two instances of <see cref="T:System.Double" /> represent the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (double obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float64 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Equals(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(double obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : double -&gt; bool" Usage="double.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b4068-358">要与此示例比较的 <see cref="T:System.Double" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-358">A <see cref="T:System.Double" /> object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="b4068-359">返回一个值，该值指示此实例和指定的 <see cref="T:System.Double" /> 对象是否表示相同的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-359">Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</span></span></summary>
        <returns><span data-ttu-id="b4068-360">如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-360"><see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-361">此方法实现 <xref:System.IEquatable%601?displayProperty=nameWithType> 接口，并且执行的效果略优于， <xref:System.Double.Equals%2A> 因为无需将 `obj` 参数转换为对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-361">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Double.Equals%2A> because it does not have to convert the `obj` parameter to an object.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="b4068-362">扩大转换</span><span class="sxs-lookup"><span data-stu-id="b4068-362">Widening Conversions</span></span>  
 <span data-ttu-id="b4068-363">根据您的编程语言，可以编写一个方法，在 <xref:System.Double.Equals%2A> 此方法中，参数类型 (比实例类型更窄) 位。</span><span class="sxs-lookup"><span data-stu-id="b4068-363">Depending on your programming language, it might be possible to code a <xref:System.Double.Equals%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="b4068-364">这是可能的，因为某些编程语言会执行将参数表示为类型的隐式扩大转换，该类型的位数与实例的位数一样多。</span><span class="sxs-lookup"><span data-stu-id="b4068-364">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="b4068-365">例如，假设实例类型为 <xref:System.Double> ，而参数类型为 <xref:System.Int32> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-365">For example, suppose the instance type is <xref:System.Double> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="b4068-366">Microsoft c # 编译器生成说明，以将参数的值表示为 <xref:System.Double> 对象，然后生成一个 <xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType> 方法，该方法将实例的值与参数的加宽表示形式进行比较。</span><span class="sxs-lookup"><span data-stu-id="b4068-366">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Double> object, then generates a <xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="b4068-367">请查阅编程语言的文档，以确定其编译器是否执行数值类型的隐式扩大转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-367">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="b4068-368">有关详细信息，请参阅 [类型转换表](/dotnet/standard/base-types/conversion-tables) 主题。</span><span class="sxs-lookup"><span data-stu-id="b4068-368">For more information, see the [Type Conversion Tables](/dotnet/standard/base-types/conversion-tables) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="b4068-369">比较中的精度</span><span class="sxs-lookup"><span data-stu-id="b4068-369">Precision in Comparisons</span></span>  
 <span data-ttu-id="b4068-370"><xref:System.Double.Equals%2A>方法应谨慎使用，因为两个值的精度不同，因此两个明显等效的值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-370">The <xref:System.Double.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="b4068-371">下面的示例报告 <xref:System.Double> 值333333和 <xref:System.Double> 除以3相除返回的值不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-371">The following example reports that the <xref:System.Double> value .333333 and the <xref:System.Double> value returned by dividing 1 by 3 are unequal.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb" id="Snippet1":::
  
 <span data-ttu-id="b4068-372">一种方法不是比较相等性，而是定义两个值之间的差异的可接受的相对边距 (如) 值之一的 .001%。</span><span class="sxs-lookup"><span data-stu-id="b4068-372">Rather than comparing for equality, one technique involves defining an acceptable relative margin of difference between two values (such as .001% of one of the values).</span></span> <span data-ttu-id="b4068-373">如果这两个值之差的绝对值小于或等于该边距，则差异可能是由于精度的不同而导致的，因此，这些值可能是相等的。</span><span class="sxs-lookup"><span data-stu-id="b4068-373">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="b4068-374">下面的示例使用此方法来比较. 33333 和1/3，前面的 <xref:System.Double> 代码示例发现的两个值是不相等的。</span><span class="sxs-lookup"><span data-stu-id="b4068-374">The following example uses this technique to compare .33333 and 1/3, the two <xref:System.Double> values that the previous code example found to be unequal.</span></span> <span data-ttu-id="b4068-375">在这种情况下，值相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-375">In this case, the values are equal.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb" id="Snippet2":::
  
> [!NOTE]
>  <span data-ttu-id="b4068-376">由于 <xref:System.Double.Epsilon> 定义了其范围接近于零的正值的最小表达式，因此两个相似值之间的差值幅度必须大于 <xref:System.Double.Epsilon> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-376">Because <xref:System.Double.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <xref:System.Double.Epsilon>.</span></span> <span data-ttu-id="b4068-377">通常，它比更多 <xref:System.Double.Epsilon> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-377">Typically, it is many times greater than <xref:System.Double.Epsilon>.</span></span> <span data-ttu-id="b4068-378">因此，建议您不要 <xref:System.Double.Epsilon> 在比较值是否相等时使用 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-378">Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.</span></span>  
  
 <span data-ttu-id="b4068-379">第二种方法涉及将两个浮点数之间的差与某个绝对值进行比较。</span><span class="sxs-lookup"><span data-stu-id="b4068-379">A second technique involves comparing the difference between two floating-point numbers with some absolute value.</span></span> <span data-ttu-id="b4068-380">如果差异小于或等于该绝对值，则数字相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-380">If the difference is less than or equal to that absolute value, the numbers are equal.</span></span> <span data-ttu-id="b4068-381">如果大于，则数字不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-381">If it is greater, the numbers are not equal.</span></span> <span data-ttu-id="b4068-382">一种替代方法是任意选择一个绝对值。</span><span class="sxs-lookup"><span data-stu-id="b4068-382">One alternative is to arbitrarily select an absolute value.</span></span> <span data-ttu-id="b4068-383">但这是有问题的，因为差异的可接受边距取决于值的量 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-383">This is problematic, however, because an acceptable margin of difference depends on the magnitude of the <xref:System.Double> values.</span></span> <span data-ttu-id="b4068-384">另一种替代方法利用了浮点格式的设计功能：两个浮点值的整数表示形式之间的差异指示了可以分隔它们的浮点值的数量。</span><span class="sxs-lookup"><span data-stu-id="b4068-384">A second alternative takes advantage of a design feature of the floating-point format: The difference between the integer representation of two floating-point values indicates the number of possible floating-point values that separates them.</span></span> <span data-ttu-id="b4068-385">例如，0.0 和的差 <xref:System.Double.Epsilon> 为1，因为当使用 <xref:System.Double.Epsilon> 的值为零时，是可表示的最小值 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-385">For example, the difference between 0.0 and <xref:System.Double.Epsilon> is 1, because <xref:System.Double.Epsilon> is the smallest representable value when working with a <xref:System.Double> whose value is zero.</span></span> <span data-ttu-id="b4068-386">下面的示例使用此方法来比较. 33333 和1/3，这两个 <xref:System.Double> 值是前面的代码示例中找到的 <xref:System.Double.Equals%28System.Double%29> 方法不相等的两个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-386">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Double> values that the previous code example with the <xref:System.Double.Equals%28System.Double%29> method found to be unequal.</span></span> <span data-ttu-id="b4068-387">请注意，该示例使用 <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> 方法将双精度浮点值转换为其整数表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-387">Note that the example uses the <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> method to convert a double-precision floating-point value to its integer representation.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsabs1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsabs1.vb" id="Snippet1"::: 
  
 <span data-ttu-id="b4068-388">超出所记录精度的浮点数的精度特定于 .NET Framework 的实现和版本。</span><span class="sxs-lookup"><span data-stu-id="b4068-388">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="b4068-389">因此，两个特定数字的比较可能会在 .NET Framework 的不同版本之间发生变化，因为数字的内部表示形式的精度可能会改变。</span><span class="sxs-lookup"><span data-stu-id="b4068-389">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
 <span data-ttu-id="b4068-390">如果 <xref:System.Double.NaN?displayProperty=nameWithType> 通过调用方法测试了两个值是否相等 <xref:System.Double.Equals%2A> ，则该方法将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-390">If two <xref:System.Double.NaN?displayProperty=nameWithType> values are tested for equality by calling the <xref:System.Double.Equals%2A> method, the method returns `true`.</span></span> <span data-ttu-id="b4068-391">但是，如果 <xref:System.Double.NaN> 使用相等运算符测试两个值是否相等，则运算符返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-391">However, if two <xref:System.Double.NaN> values are tested for equality by using the equality operator, the operator returns `false`.</span></span> <span data-ttu-id="b4068-392">如果要确定的值是否 <xref:System.Double> 不是 (NaN) 的数字，则可以选择调用 <xref:System.Double.IsNaN%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-392">When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b4068-393">编译器重载决策可能会考虑两种方法重载行为中的明显差异 <see cref="M:System.Double.Equals(System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-393">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Double.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="b4068-394">如果定义了参数和 a 之间的隐式转换， <paramref name="obj" /> <see cref="T:System.Double" /> 并且参数未键入为，则 <see cref="T:System.Object" /> 编译器可能会执行隐式转换并调用 <see cref="M:System.Double.Equals(System.Double)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-394">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Double" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Double.Equals(System.Double)" /> method.</span></span> <span data-ttu-id="b4068-395">否则，它们调用 <see cref="M:System.Double.Equals(System.Object)" /> 方法， <see langword="false" /> 如果其 <paramref name="obj" /> 参数不是值，则总是返回 <see cref="T:System.Double" /> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-395">Otherwise, they call the <see cref="M:System.Double.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Double" /> value.</span></span> <span data-ttu-id="b4068-396">下面的示例演示两个方法重载之间的行为差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-396">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="b4068-397">对于除 c # 中的和以外的所有基元数值类型 <see cref="T:System.Decimal" /> ，第一次比较将返回，这是 <see langword="true" /> 因为编译器会自动执行扩大转换并调用 <see cref="M:System.Double.Equals(System.Double)" /> 方法，而第二次比较返回， <see langword="false" /> 因为编译器调用了 <see cref="M:System.Double.Equals(System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-397">In the case of all primitive numeric types except for <see cref="T:System.Decimal" /> and in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Double.Equals(System.Double)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Double.Equals(System.Object)" /> method.</span></span>  
  
<span data-ttu-id="b4068-398">：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs" interactive = "dotnet" id = "Snippet2"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb" id = "Snippet2"：：：</span><span class="sxs-lookup"><span data-stu-id="b4068-398">:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs" interactive="try-dotnet" id="Snippet2"::: :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb" id="Snippet2":::</span></span></para></block>
        <altmember cref="M:System.Double.Equals(System.Object)" />
        <altmember cref="Overload:System.Double.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="double.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b4068-399">与此实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-399">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="b4068-400">返回一个值，该值指示此实例是否等于指定的对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-400">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="b4068-401">如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Double" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-401"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-402"><xref:System.Double.Equals%2A>方法应谨慎使用，因为两个值的精度不同，因此两个明显等效的值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-402">The <xref:System.Double.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="b4068-403">下面的示例报告 <xref:System.Double> 值3333和 <xref:System.Double> 除以3相除后返回的值不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-403">The following example reports that the <xref:System.Double> value .3333 and the <xref:System.Double> returned by dividing 1 by 3 are unequal.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb" id="Snippet3":::
  
 <span data-ttu-id="b4068-404">有关调用方法的替代 <xref:System.Double.Equals%2A> 方法，请参阅重载的文档 <xref:System.Double.Equals%28System.Double%29> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-404">For alternatives to calling the <xref:System.Double.Equals%2A> method, see the documentation for the <xref:System.Double.Equals%28System.Double%29> overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4068-405">由于 <xref:System.Double.Epsilon> 定义了其范围接近于零的正值的最小表达式，因此两个相似值之间的差值幅度必须大于 <xref:System.Double.Epsilon> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-405">Because <xref:System.Double.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <xref:System.Double.Epsilon>.</span></span> <span data-ttu-id="b4068-406">通常，它比更多 <xref:System.Double.Epsilon> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-406">Typically, it is many times greater than <xref:System.Double.Epsilon>.</span></span>  
  
 <span data-ttu-id="b4068-407">超出所记录精度的浮点数的精度特定于 .NET Framework 的实现和版本。</span><span class="sxs-lookup"><span data-stu-id="b4068-407">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="b4068-408">因此，两个特定数字的比较可能会在 .NET Framework 的不同版本之间发生变化，因为数字的内部表示形式的精度可能会改变。</span><span class="sxs-lookup"><span data-stu-id="b4068-408">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
 <span data-ttu-id="b4068-409">如果 <xref:System.Double.NaN?displayProperty=nameWithType> 通过调用方法测试了两个值是否相等 <xref:System.Double.Equals%2A> ，则该方法将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-409">If two <xref:System.Double.NaN?displayProperty=nameWithType> values are tested for equality by calling the <xref:System.Double.Equals%2A> method, the method returns `true`.</span></span> <span data-ttu-id="b4068-410">但是，如果 <xref:System.Double.NaN> 使用相等运算符测试两个值是否相等，则运算符返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-410">However, if two <xref:System.Double.NaN> values are tested for equality by using the equality operator, the operator returns `false`.</span></span> <span data-ttu-id="b4068-411">如果要确定的值是否 <xref:System.Double> 不是 (NaN) 的数字，则可以选择调用 <xref:System.Double.IsNaN%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-411">When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b4068-412">编译器重载决策可能会考虑两种方法重载行为中的明显差异 <see cref="M:System.Double.Equals(System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-412">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Double.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="b4068-413">如果定义了参数和 a 之间的隐式转换， <paramref name="obj" /> <see cref="T:System.Double" /> 并且参数未键入为，则 <see cref="T:System.Object" /> 编译器可能会执行隐式转换并调用 <see cref="M:System.Double.Equals(System.Double)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-413">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Double" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Double.Equals(System.Double)" /> method.</span></span> <span data-ttu-id="b4068-414">否则，它们调用 <see cref="M:System.Double.Equals(System.Object)" /> 方法， <see langword="false" /> 如果其 <paramref name="obj" /> 参数不是值，则总是返回 <see cref="T:System.Double" /> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-414">Otherwise, they call the <see cref="M:System.Double.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Double" /> value.</span></span> <span data-ttu-id="b4068-415">下面的示例演示两个方法重载之间的行为差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-415">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="b4068-416">对于除 c # 中的和以外的所有基元数值类型 <see cref="T:System.Decimal" /> ，第一次比较将返回，这是 <see langword="true" /> 因为编译器会自动执行扩大转换并调用 <see cref="M:System.Double.Equals(System.Double)" /> 方法，而第二次比较返回， <see langword="false" /> 因为编译器调用了 <see cref="M:System.Double.Equals(System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-416">In the case of all primitive numeric types except for <see cref="T:System.Decimal" /> and in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Double.Equals(System.Double)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Double.Equals(System.Object)" /> method.</span></span>  
  
<span data-ttu-id="b4068-417">：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs" interactive = "dotnet" id = "Snippet2"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb" id = "Snippet2"：：：</span><span class="sxs-lookup"><span data-stu-id="b4068-417">:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs" interactive="try-dotnet" id="Snippet2"::: :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb" id="Snippet2":::</span></span></para></block>
        <altmember cref="M:System.Double.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="double.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4068-418">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b4068-418">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="b4068-419">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b4068-419">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="double.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4068-420">返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-420">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-421">枚举常数 <see cref="F:System.TypeCode.Double" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-421">The enumerated constant, <see cref="F:System.TypeCode.Double" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsFinite(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(double d);" />
      <MemberSignature Language="F#" Value="static member IsFinite : double -&gt; bool" Usage="System.double.IsFinite d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-422">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-422">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-423">确定指定值是否为有限值（零、不正常或正常）。</span><span class="sxs-lookup"><span data-stu-id="b4068-423">Determines whether the specified value is finite (zero, subnormal, or normal).</span></span></summary>
        <returns><span data-ttu-id="b4068-424">如果该值为有限值（零、不正常或正常），则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-424"><see langword="true" /> if the value is finite (zero, subnormal or normal); <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : double -&gt; bool" Usage="System.double.IsInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-425">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-425">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-426">返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</span><span class="sxs-lookup"><span data-stu-id="b4068-426">Returns a value indicating whether the specified number evaluates to negative or positive infinity.</span></span></summary>
        <returns><span data-ttu-id="b4068-427">如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-427"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-428">浮点运算返回 <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 以通知溢出情况。</span><span class="sxs-lookup"><span data-stu-id="b4068-428">Floating-point operations return <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-429">下面的代码示例阐释了的用法 <xref:System.Double.IsInfinity%2A> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-429">The following code example illustrates the use of <xref:System.Double.IsInfinity%2A>:</span></span>  
  
 [!code-cpp[System.Double#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#11)]
 [!code-csharp[System.Double#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#11)]
 [!code-vb[System.Double#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNaN(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(double d);" />
      <MemberSignature Language="F#" Value="static member IsNaN : double -&gt; bool" Usage="System.double.IsNaN d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-430">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-430">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-431">返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Double.NaN" />)。</span><span class="sxs-lookup"><span data-stu-id="b4068-431">Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Double.NaN" />).</span></span></summary>
        <returns><span data-ttu-id="b4068-432">如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NaN" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-432"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-433">浮点运算返回 <xref:System.Double.NaN> 到表示操作结果未定义的信号。</span><span class="sxs-lookup"><span data-stu-id="b4068-433">Floating-point operations return <xref:System.Double.NaN> to signal that result of the operation is undefined.</span></span> <span data-ttu-id="b4068-434">例如，将0.0 除以0.0 会导致 <xref:System.Double.NaN> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-434">For example, dividing 0.0 by 0.0 results in <xref:System.Double.NaN>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4068-435"><xref:System.Double.IsNaN%2A>`false`如果 <xref:System.Double> 值为或，则 <xref:System.Double.PositiveInfinity> 返回 <xref:System.Double.NegativeInfinity> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-435"><xref:System.Double.IsNaN%2A> returns `false` if a <xref:System.Double> value is either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="b4068-436">若要测试这些值，请使用 <xref:System.Double.IsInfinity%2A> 、 <xref:System.Double.IsPositiveInfinity%2A> 和 <xref:System.Double.IsNegativeInfinity%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-436">To test for these values, use the <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, and <xref:System.Double.IsNegativeInfinity%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-437">下面的代码示例阐释了的用法 <xref:System.Double.IsNaN%2A> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-437">The following code example illustrates the use of <xref:System.Double.IsNaN%2A>:</span></span>  
  
 [!code-cpp[System.Double#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#8)]
 [!code-csharp[System.Double#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#8)]
 [!code-vb[System.Double#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Double.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (double d);" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float64 d) cil managed" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNegative(System.Double)" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (d As Double) As Boolean" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(double d);" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member IsNegative : double -&gt; bool" Usage="System.double.IsNegative d" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-438">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-438">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-439">确定指定值是否为负值。</span><span class="sxs-lookup"><span data-stu-id="b4068-439">Determines whether the specified value is negative.</span></span></summary>
        <returns><span data-ttu-id="b4068-440">如果该值为负值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-440"><see langword="true" /> if the value is negative; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNegativeInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : double -&gt; bool" Usage="System.double.IsNegativeInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-441">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-441">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-442">返回一个值，通过该值指示指定数字是否计算为负无穷大。</span><span class="sxs-lookup"><span data-stu-id="b4068-442">Returns a value indicating whether the specified number evaluates to negative infinity.</span></span></summary>
        <returns><span data-ttu-id="b4068-443">如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-443"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-444">浮点运算返回 <xref:System.Double.NegativeInfinity> 信号表示溢出情况。</span><span class="sxs-lookup"><span data-stu-id="b4068-444">Floating-point operations return <xref:System.Double.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-445">下面的代码示例阐释了的用法 <xref:System.Double.IsNegativeInfinity%2A> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-445">The following code example illustrates the use of <xref:System.Double.IsNegativeInfinity%2A>:</span></span>  
  
 [!code-cpp[System.Double#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#13)]
 [!code-csharp[System.Double#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#13)]
 [!code-vb[System.Double#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#13)]  
[!code-cpp[System.Double#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#4)]
[!code-csharp[System.Double#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#4)]
[!code-vb[System.Double#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#4)]  
[!code-cpp[System.Double#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#9)]
[!code-csharp[System.Double#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#9)]
[!code-vb[System.Double#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNormal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(double d);" />
      <MemberSignature Language="F#" Value="static member IsNormal : double -&gt; bool" Usage="System.double.IsNormal d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-446">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-446">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-447">确定指定值是否正常。</span><span class="sxs-lookup"><span data-stu-id="b4068-447">Determines whether the specified value is normal.</span></span></summary>
        <returns><span data-ttu-id="b4068-448">如果该值正常，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-448"><see langword="true" /> if the value is normal; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsPositiveInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : double -&gt; bool" Usage="System.double.IsPositiveInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-449">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-449">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-450">返回一个值，通过该值指示指定数字是否计算为正无穷大。</span><span class="sxs-lookup"><span data-stu-id="b4068-450">Returns a value indicating whether the specified number evaluates to positive infinity.</span></span></summary>
        <returns><span data-ttu-id="b4068-451">如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-451"><see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-452">浮点运算返回 <xref:System.Double.PositiveInfinity> 信号表示溢出情况。</span><span class="sxs-lookup"><span data-stu-id="b4068-452">Floating-point operations return <xref:System.Double.PositiveInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-453">下面的代码示例阐释了的用法 <xref:System.Double.IsPositiveInfinity%2A> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-453">The following code example illustrates the use of <xref:System.Double.IsPositiveInfinity%2A>:</span></span>  
  
 [!code-cpp[System.Double#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#12)]
 [!code-csharp[System.Double#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#12)]
 [!code-vb[System.Double#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsSubnormal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(double d);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : double -&gt; bool" Usage="System.double.IsSubnormal d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b4068-454">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-454">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b4068-455">确定指定值是否不正常。</span><span class="sxs-lookup"><span data-stu-id="b4068-455">Determines whether the specified value is subnormal.</span></span></summary>
        <returns><span data-ttu-id="b4068-456">如果该值不正常，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-456"><see langword="true" /> if the value is subnormal; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const double MaxValue = 1.7976931348623157E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MaxValue = float64(1.7976931348623157E+308)" />
      <MemberSignature Language="DocId" Value="F:System.Double.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Double  = 1.7976931348623157E+308" />
      <MemberSignature Language="C++ CLI" Value="public: double MaxValue = 1.7976931348623157E+308;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : double" Usage="System.double.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>1.7976931348623157E+308</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4068-457">表示 <see cref="T:System.Double" /> 的最大可能值。</span><span class="sxs-lookup"><span data-stu-id="b4068-457">Represents the largest possible value of a <see cref="T:System.Double" />.</span></span> <span data-ttu-id="b4068-458">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="b4068-458">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-459">此常量的值为正 1.7976931348623157 E + 308。</span><span class="sxs-lookup"><span data-stu-id="b4068-459">The value of this constant is positive 1.7976931348623157E+308.</span></span>  
  
 <span data-ttu-id="b4068-460">超出的操作的结果 <xref:System.Double.MaxValue?displayProperty=nameWithType> 为 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-460">The result of an operation that exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType> is <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-461">在下面的示例中， <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 结果超出时，加法、乘法和求幂运算的结果 <xref:System.Double.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-461">In the following example, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> results from addition, multiplication, and exponentiation operations when the result exceeds <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.maxvalue/cs/maxvalueex.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.maxvalue/vb/maxvalueex.vb" id="Snippet1":::
  
   
  
## Examples  
 <span data-ttu-id="b4068-462">下面的代码示例阐释了的用法 <xref:System.Double.MaxValue?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-462">The following code example illustrates the use of <xref:System.Double.MaxValue?displayProperty=nameWithType>:</span></span>  
  
 [!code-cpp[Double Example#2](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#2)]
 [!code-csharp[Double Example#2](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#2)]
 [!code-vb[Double Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const double MinValue = -1.7976931348623157E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MinValue = float64(-1.7976931348623157E+308)" />
      <MemberSignature Language="DocId" Value="F:System.Double.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Double  = -1.7976931348623157E+308" />
      <MemberSignature Language="C++ CLI" Value="public: double MinValue = -1.7976931348623157E+308;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : double" Usage="System.double.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>-1.7976931348623157E+308</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4068-463">表示 <see cref="T:System.Double" /> 的最小可能值。</span><span class="sxs-lookup"><span data-stu-id="b4068-463">Represents the smallest possible value of a <see cref="T:System.Double" />.</span></span> <span data-ttu-id="b4068-464">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="b4068-464">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-465">此常量的值为负 1.7976931348623157 E + 308。</span><span class="sxs-lookup"><span data-stu-id="b4068-465">The value of this constant is negative 1.7976931348623157E+308.</span></span>  
  
 <span data-ttu-id="b4068-466">小于的操作的结果 <xref:System.Double.MinValue?displayProperty=nameWithType> 为 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-466">The result of an operation that is less than <xref:System.Double.MinValue?displayProperty=nameWithType> is <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-467">在下面的示例中， <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 当结果小于时，减法运算和乘法运算的结果 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-467">In the following example, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> results from subtraction and multiplication operations when the result is less than <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.minvalue/cs/minvalueex.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.minvalue/vb/minvalueex.vb" id="Snippet1":::
   
  
## Examples  
 <span data-ttu-id="b4068-468">下面的代码示例阐释了的用法 <xref:System.Double.MinValue?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-468">The following code example illustrates the use of <xref:System.Double.MinValue?displayProperty=nameWithType>:</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp" id="Snippet2":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb" id="Snippet2"::: 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const double NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NaN = float64(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Double.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Double  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: double NaN = NaN;" />
      <MemberSignature Language="F#" Value="val mutable NaN : double" Usage="System.double.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4068-469">表示不是数字 (<see langword="NaN" />) 的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-469">Represents a value that is not a number (<see langword="NaN" />).</span></span> <span data-ttu-id="b4068-470">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="b4068-470">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-471"><xref:System.Double.NaN>当操作的结果不确定时，方法或运算符将返回。</span><span class="sxs-lookup"><span data-stu-id="b4068-471">A method or operator returns <xref:System.Double.NaN> when the result of an operation is undefined.</span></span> <span data-ttu-id="b4068-472">例如，零除以零的结果为 <xref:System.Double.NaN> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b4068-472">For example, the result of dividing zero by zero is <xref:System.Double.NaN>, as the following example shows.</span></span> <span data-ttu-id="b4068-473"> (但要注意的是，将非零数除以零会返回 <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> ，具体取决于除数的符号。 ) </span><span class="sxs-lookup"><span data-stu-id="b4068-473">(But note that dividing a non-zero number by zero returns either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>, depending on the sign of the divisor.)</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/nan1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/nan1.vb" id="Snippet1"::: 
  
 <span data-ttu-id="b4068-474">此外，对于 <xref:System.Double.NaN> 值或对值进行操作的方法调用将 <xref:System.Double.NaN> 返回 <xref:System.Double.NaN> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="b4068-474">In addition, a method call with a <xref:System.Double.NaN> value or an operation on a <xref:System.Double.NaN> value returns <xref:System.Double.NaN>, as the following example shows.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/nan1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/nan1.vb" id="Snippet2"::: 
  
 <span data-ttu-id="b4068-475">使用 <xref:System.Double.IsNaN%2A> 方法确定某个值是否不是数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-475">Use the <xref:System.Double.IsNaN%2A> method to determine whether a value is not a number.</span></span> <span data-ttu-id="b4068-476"><xref:System.Double.op_Equality%2A>运算符将两个 <xref:System.Double.NaN> 值视为相互不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-476">The <xref:System.Double.op_Equality%2A> operator considers two <xref:System.Double.NaN> values to be unequal to one another.</span></span> <span data-ttu-id="b4068-477">通常， <xref:System.Double> 运算符不能用于 <xref:System.Double.NaN?displayProperty=nameWithType> 与其他值进行比较 <xref:System.Double> ，不过比较方法 (例如 <xref:System.Double.Equals%2A> 和 <xref:System.Double.CompareTo%2A>) 可以。</span><span class="sxs-lookup"><span data-stu-id="b4068-477">In general, <xref:System.Double> operators cannot be used to compare <xref:System.Double.NaN?displayProperty=nameWithType> with other <xref:System.Double> values, although comparison methods (such as <xref:System.Double.Equals%2A> and <xref:System.Double.CompareTo%2A>) can.</span></span> <span data-ttu-id="b4068-478">下面的示例阐释 <xref:System.Double> 比较运算符与方法之间的行为差异。</span><span class="sxs-lookup"><span data-stu-id="b4068-478">The following example illustrates the difference in behavior between <xref:System.Double> comparison operators and methods.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/double.nan4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/double.nan4.vb" id="Snippet4":::
  
   
  
## Examples  
 <span data-ttu-id="b4068-479">以下示例演示了 <xref:System.Double.NaN> 的用法：</span><span class="sxs-lookup"><span data-stu-id="b4068-479">The following example illustrates the use of <xref:System.Double.NaN>:</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp" id="Snippet7":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs" interactive="try-dotnet-method" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb" id="Snippet7"::: 
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsNaN(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NegativeInfinity = float64(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Double.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Double  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="F#" Value="val mutable NegativeInfinity : double" Usage="System.double.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4068-480">表示负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-480">Represents negative infinity.</span></span> <span data-ttu-id="b4068-481">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="b4068-481">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-482">此常量的值是负数除以零所得的结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-482">The value of this constant is the result of dividing a negative number by zero.</span></span>  
  
 <span data-ttu-id="b4068-483">当操作的结果小于时，将返回此常数 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-483">This constant is returned when the result of an operation is less than <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b4068-484">用于 <xref:System.Double.IsNegativeInfinity%2A> 确定某个值是否计算为负无穷大。</span><span class="sxs-lookup"><span data-stu-id="b4068-484">Use <xref:System.Double.IsNegativeInfinity%2A> to determine whether a value evaluates to negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-485">下面的代码示例阐释了的用法 <xref:System.Double.NegativeInfinity> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-485">The following code example illustrates the use of <xref:System.Double.NegativeInfinity>:</span></span>  
  
 [!code-cpp[System.Double#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#9)]
 [!code-csharp[System.Double#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#9)]
 [!code-vb[System.Double#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_Equality(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : double * double -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b4068-486">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-486">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b4068-487">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-487">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-488">返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-488">Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are equal.</span></span></summary>
        <returns><span data-ttu-id="b4068-489">如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-489"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-490"><xref:System.Double.op_Equality%2A>方法为值定义相等运算符 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-490">The <xref:System.Double.op_Equality%2A> method defines the equality operator for <xref:System.Double> values.</span></span>  
  
 <span data-ttu-id="b4068-491">如果 <xref:System.Double.NaN?displayProperty=nameWithType> 使用相等运算符测试两个值是否相等，则结果为 `false` ; 两个 <xref:System.Double.NaN?displayProperty=nameWithType> 值不被视为相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-491">If two <xref:System.Double.NaN?displayProperty=nameWithType> values are tested for equality by using the equality operator, the result is `false`; two <xref:System.Double.NaN?displayProperty=nameWithType> values are not considered equal.</span></span> <span data-ttu-id="b4068-492">如果通过调用方法来测试它们是否相等 <xref:System.Double.Equals%2A> ，则结果为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-492">If they are tested for equality by calling the <xref:System.Double.Equals%2A> method, the result is `true`.</span></span>  <span data-ttu-id="b4068-493">如果要确定的值是否 <xref:System.Double> 不是 (NaN) 的数字，则可以选择调用 <xref:System.Double.IsNaN%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-493">When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_GreaterThan(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : double * double -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b4068-494">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-494">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b4068-495">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-495">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-496">返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于另一个指定的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-496">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b4068-497">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-497"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-498"><xref:System.Double.op_GreaterThan%2A>方法为值定义大于运算符的运算 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-498">The <xref:System.Double.op_GreaterThan%2A> method defines the operation of the greater-than operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : double * double -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b4068-499">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-499">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b4068-500">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-500">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-501">返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于或等于另一个指定的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-501">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is greater than or equal to another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b4068-502">如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-502"><see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-503"><xref:System.Double.op_GreaterThanOrEqual%2A>方法为值定义大于或等于运算符的运算 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-503">The <xref:System.Double.op_GreaterThanOrEqual%2A> method defines the operation of the greater-than-or-equal operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_Inequality(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : double * double -&gt; bool" Usage="System.double.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b4068-504">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-504">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b4068-505">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-505">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-506">返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-506">Returns a value that indicates whether two specified <see cref="T:System.Double" /> values are not equal.</span></span></summary>
        <returns><span data-ttu-id="b4068-507">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-507"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-508"><xref:System.Double.op_Inequality%2A>方法为值定义不相等运算符 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-508">The <xref:System.Double.op_Inequality%2A> method defines the inequality operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_LessThan(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : double * double -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b4068-509">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-509">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b4068-510">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-510">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-511">返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于另一个指定的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-511">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b4068-512">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-512"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-513"><xref:System.Double.op_LessThan%2A>方法为值定义了小于运算符的运算 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-513">The <xref:System.Double.op_LessThan%2A> method defines the operation of the less-than operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : double * double -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Double" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="b4068-514">要比较的第一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-514">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="b4068-515">要比较的第二个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-515">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-516">返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于或等于另一个指定的 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-516">Returns a value that indicates whether a specified <see cref="T:System.Double" /> value is less than or equal to another specified <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="b4068-517">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-517"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-518"><xref:System.Double.op_LessThanOrEqual%2A>方法为值定义了小于或等于运算符的运算 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-518">The <xref:System.Double.op_LessThanOrEqual%2A> method defines the operation of the less-than-or-equal operator for <xref:System.Double> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4068-519">将数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-519">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span></summary>
        <altmember cref="Overload:System.Double.TryParse" />
        <remarks><span data-ttu-id="b4068-520">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-520">In .NET Core 3.0 and later, values that are too large to represent are rounded to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" /> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-521">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-521">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span></remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; double" Usage="System.double.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-522">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-522">A string that contains a number to convert.</span></span></param>
        <summary><span data-ttu-id="b4068-523">将数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-523">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="b4068-524">与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-524">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-525">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-525">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-526">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-526">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

 <span data-ttu-id="b4068-527">`s`参数可以包含当前区域性的、、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 或格式的字符串：</span><span class="sxs-lookup"><span data-stu-id="b4068-527">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>, or a string of the form:</span></span>  
  
 <span data-ttu-id="b4068-528">[*ws*][*sign*][*整数位数*[*，*]]*整数位数*[*。*[*小数位数*]][E [*sign*]*指数-数字*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="b4068-528">[*ws*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b4068-529">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b4068-529">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b4068-530">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b4068-530">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b4068-531">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-531">Element</span></span>|<span data-ttu-id="b4068-532">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-532">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-533">*ws*</span><span class="sxs-lookup"><span data-stu-id="b4068-533">*ws*</span></span>|<span data-ttu-id="b4068-534">一系列空白字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-534">A series of white-space characters.</span></span>|  
|<span data-ttu-id="b4068-535">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-535">*sign*</span></span>|<span data-ttu-id="b4068-536">负号符号 (-) 或正号符号 (+) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-536">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="b4068-537">只能使用前导符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-537">Only a leading sign can be used.</span></span>|  
|<span data-ttu-id="b4068-538">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-538">*integral-digits*</span></span>|<span data-ttu-id="b4068-539">一系列从0到9之间的数字，用于指定数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-539">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="b4068-540">*整数位数*的运行可以通过组分隔符进行分区。</span><span class="sxs-lookup"><span data-stu-id="b4068-540">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="b4068-541">例如，在某些区域性中，用逗号 (，) 分隔上千组。</span><span class="sxs-lookup"><span data-stu-id="b4068-541">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="b4068-542">如果字符串包含*小数位数*元素，则可以不存在*整数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-542">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="b4068-543">,</span><span class="sxs-lookup"><span data-stu-id="b4068-543">,</span></span>|<span data-ttu-id="b4068-544">区域性特定的千位分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-544">A culture-specific thousands separator symbol.</span></span>|  
|<span data-ttu-id="b4068-545">。</span><span class="sxs-lookup"><span data-stu-id="b4068-545">.</span></span>|<span data-ttu-id="b4068-546">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-546">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="b4068-547">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-547">*fractional-digits*</span></span>|<span data-ttu-id="b4068-548">一系列从0到9之间的数字，用于指定数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-548">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="b4068-549">E</span><span class="sxs-lookup"><span data-stu-id="b4068-549">E</span></span>|<span data-ttu-id="b4068-550">"E" 或 "E" 字符，指示以指数 (科学) 记数法表示的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-550">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="b4068-551">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-551">*exponential-digits*</span></span>|<span data-ttu-id="b4068-552">一系列从0到9之间的数字，用于指定指数。</span><span class="sxs-lookup"><span data-stu-id="b4068-552">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="b4068-553">`s`参数使用和标志的组合来进行解释 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-553">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="b4068-554">这意味着允许使用空格和千位分隔符，例如，货币符号不允许。</span><span class="sxs-lookup"><span data-stu-id="b4068-554">This means that white space and thousands separators are allowed, for example, while currency symbols are not.</span></span> <span data-ttu-id="b4068-555">为了更好地控制允许 `s` 分析操作成功的样式元素，请调用 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> 或 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-555">For finer control over which style elements are permitted in `s` for the parse operation to succeed, call the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> or the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b4068-556">`s`使用为 <xref:System.Globalization.NumberFormatInfo> 当前线程区域性初始化的对象中的格式设置信息对参数进行解释。</span><span class="sxs-lookup"><span data-stu-id="b4068-556">The `s` parameter is interpreted using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current thread culture.</span></span> <span data-ttu-id="b4068-557">有关详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>。</span><span class="sxs-lookup"><span data-stu-id="b4068-557">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span> <span data-ttu-id="b4068-558">若要使用其他某个区域性的格式设置信息分析字符串，请调用 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 或 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-558">To parse a string using the formatting information of some other culture, call the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> or <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b4068-559">通常，如果向方法传递 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 通过调用方法创建的字符串 <xref:System.Double.ToString%2A?displayProperty=nameWithType> ，则 <xref:System.Double> 返回原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-559">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="b4068-560">但是，在 .NET Framework 和 .NET Core 2.2 及更早版本上，值可能不相等，因为精度损失。</span><span class="sxs-lookup"><span data-stu-id="b4068-560">However, on .NET Framework and on .NET Core 2.2 and earlier versions, the values may not be equal because of a loss of precision.</span></span> <span data-ttu-id="b4068-561">此外，尝试分析或的字符串表示形式不 <xref:System.Double.MinValue?displayProperty=nameWithType> <xref:System.Double.MaxValue?displayProperty=nameWithType> 会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-561">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue?displayProperty=nameWithType> or <xref:System.Double.MaxValue?displayProperty=nameWithType> fails to round-trip.</span></span> <span data-ttu-id="b4068-562">在 .NET Framework 和 .NET Core 2.2 及早期版本上，它会引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-562">On .NET Framework and .NET Core 2.2 and previous versions, it throws an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-563">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-563">The following example provides an illustration.</span></span> 
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb" id="Snippet3":::

<span data-ttu-id="b4068-564">在 .NET Framework 和 .NET Core 2.2 及更早版本中，如果超出了 `s` <xref:System.Double> 数据类型的范围，则该 <xref:System.Double.Parse%28System.String%29> 方法将引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-564">On .NET Framework and .NET Core 2.2 and earlier versions, if `s` is out of range of the <xref:System.Double> data type, the <xref:System.Double.Parse%28System.String%29> method throws an <xref:System.OverflowException>.</span></span>

<span data-ttu-id="b4068-565">在 .NET Core 3.0 及更高版本中，当 `s` 超出数据类型的范围时，不会引发异常 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-565">On .NET Core 3.0 and later versions, no exception is thrown when `s` is out of range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b4068-566">在大多数情况下，方法将返回 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 或 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-566">In most cases, the method will return <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-567">但是，有一小部分值被视为比的最大值或最小值更接近于 <xref:System.Double> 正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-567">However, there is a small set of values that are considered to be closer to the maximum or minimum values of <xref:System.Double> than to positive or negative infinity.</span></span> <span data-ttu-id="b4068-568">在这些情况下，方法返回 <xref:System.Double.MaxValue?displayProperty=nameWithType> 或 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-568">In those cases, the method returns <xref:System.Double.MaxValue?displayProperty=nameWithType> or <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="b4068-569">如果在分析操作过程中在参数中遇到分隔符 `s` ，并且适用的货币或小数分隔符和组分隔符相同，则分析操作将假定分隔符是小数点分隔符，而不是组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-569">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="b4068-570">有关分隔符的详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 、、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 和 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-570">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>     
  
## Examples  
 <span data-ttu-id="b4068-571">下面的示例演示 <xref:System.Double.Parse%28System.String%29> 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="b4068-571">The following example illustrates the use of the <xref:System.Double.Parse%28System.String%29> method.</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp" id="Snippet5":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb" id="Snippet5":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4068-572"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-572"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b4068-573"><paramref name="s" /> 不表示具有有效格式的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-573"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4068-574">仅限 .NET Framework 和 .NET Core 2.2 及更低版本：<paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-574">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="M:System.Double.TryParse(System.String,System.Double@)" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-numeric"><span data-ttu-id="b4068-575">分析 .NET 中的数字字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-575">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; double" Usage="System.double.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-576">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-576">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b4068-577">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-577">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</span></span> <span data-ttu-id="b4068-578">一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-578">A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <summary><span data-ttu-id="b4068-579">将指定样式的数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-579">Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="b4068-580">与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-580">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-581">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-581">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-582">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-582">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

 <span data-ttu-id="b4068-583">`style`参数定义在参数中允许的样式元素 (如空格、千位分隔符和货币符号) ，以便 `s` 分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b4068-583">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b4068-584">它必须是枚举中的位标志的组合 <xref:System.Globalization.NumberStyles> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-584">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b4068-585"><xref:System.Globalization.NumberStyles>不支持以下成员：</span><span class="sxs-lookup"><span data-stu-id="b4068-585">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="b4068-586">`s`参数可以包含当前区域性的 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType> 、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType> 或 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-586">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-587">根据的值 `style` ，它还可以采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="b4068-587">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="b4068-588">[*ws*][ *$* ] [*sign*] [*整数位数*[*，*]]*整数位数*[*。*[*小数位数*]][E [*sign*]*指数-数字*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="b4068-588">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b4068-589">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b4068-589">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b4068-590">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b4068-590">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b4068-591">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-591">Element</span></span>|<span data-ttu-id="b4068-592">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-592">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-593">*ws*</span><span class="sxs-lookup"><span data-stu-id="b4068-593">*ws*</span></span>|<span data-ttu-id="b4068-594">一系列空白字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-594">A series of white-space characters.</span></span> <span data-ttu-id="b4068-595">如果包含标志，则空格可以出现在的开头 `s` `style` <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> ，如果包含标志，则可以在的末尾出现空白 `s` `style` <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-595">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="b4068-596">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-596">A culture-specific currency symbol.</span></span> <span data-ttu-id="b4068-597">其在字符串中的位置由 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 当前区域性的和属性定义。</span><span class="sxs-lookup"><span data-stu-id="b4068-597">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="b4068-598">`s`如果包含标志，则当前区域性的货币符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-598">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-599">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-599">*sign*</span></span>|<span data-ttu-id="b4068-600">负号符号 (-) 或正号符号 (+) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-600">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="b4068-601">如果包含标志，则符号可以出现在的开头 `s` `style` <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> ，如果包含标志，则它可以出现在的末尾 `s` `style` <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-601">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b4068-602">如果包含标志，则可以在中使用括号 `s` 来表示负值 `style` <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-602">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-603">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-603">*integral-digits*</span></span>|<span data-ttu-id="b4068-604">一系列从0到9之间的数字，用于指定数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-604">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="b4068-605">如果字符串包含*小数位数*元素，则可以不存在*整数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-605">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="b4068-606">,</span><span class="sxs-lookup"><span data-stu-id="b4068-606">,</span></span>|<span data-ttu-id="b4068-607">区域性特定的组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-607">A culture-specific group separator.</span></span> <span data-ttu-id="b4068-608">`s`如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，则当前区域性的组分隔符符号可以出现在中</span><span class="sxs-lookup"><span data-stu-id="b4068-608">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="b4068-609">。</span><span class="sxs-lookup"><span data-stu-id="b4068-609">.</span></span>|<span data-ttu-id="b4068-610">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-610">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b4068-611">`s`如果包含标志，则当前区域性的小数点符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-611">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-612">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-612">*fractional-digits*</span></span>|<span data-ttu-id="b4068-613">一系列从0到9之间的数字，用于指定数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-613">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="b4068-614">`s`如果 `style` 包含标志，则小数位数可以出现在中 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-614">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-615">E</span><span class="sxs-lookup"><span data-stu-id="b4068-615">E</span></span>|<span data-ttu-id="b4068-616">"E" 或 "E" 字符，指示以指数 (科学) 记数法表示的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-616">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b4068-617">`s`如果包含标志，则参数可以表示指数表示法中的数字 `style` <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-617">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-618">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-618">*exponential-digits*</span></span>|<span data-ttu-id="b4068-619">一系列从0到9之间的数字，用于指定指数。</span><span class="sxs-lookup"><span data-stu-id="b4068-619">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="b4068-620">`s`无论参数的值如何，分析操作都将忽略中任何终止的 NUL (U + 0000) 字符 `style` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-620">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="b4068-621">只包含数字的字符串 (与 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 样式) 始终在类型范围内分析成功 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-621">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Double> type.</span></span> <span data-ttu-id="b4068-622">其余 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 成员控件元素可能存在但不需要存在于输入字符串中。</span><span class="sxs-lookup"><span data-stu-id="b4068-622">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="b4068-623">下表指示各个标志如何 <xref:System.Globalization.NumberStyles> 影响可能出现在中的元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-623">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="b4068-624">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="b4068-624">NumberStyles value</span></span>|<span data-ttu-id="b4068-625">中允许的元素 `s` 以及数字</span><span class="sxs-lookup"><span data-stu-id="b4068-625">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b4068-626">仅限 *整数数字* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-626">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b4068-627">小数点 () 和*小数位数\*\*元素。*</span><span class="sxs-lookup"><span data-stu-id="b4068-627">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b4068-628">"E" 或 "E" 字符，指示指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-628">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="b4068-629">此标志本身 *支持格式为*E*位*的值;若要成功地分析包含正号或负号和小数点符号的字符串，需要其他标志。</span><span class="sxs-lookup"><span data-stu-id="b4068-629">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b4068-630">开头的 *ws* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-630">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b4068-631">末尾处的 *ws* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-631">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b4068-632">开头的 *sign* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-632">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b4068-633">末尾的 *sign* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-633">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b4068-634">用括号括起数值的 *符号* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-634">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b4068-635">千位分隔符 (，) 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-635">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b4068-636">货币 ($) 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-636">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b4068-637">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-637">All elements.</span></span> <span data-ttu-id="b4068-638">但是， `s` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-638">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b4068-639">在开头或结尾处的 *ws* 元素，在 `s` 的开头处 *符号* ， `s` 小数点 ( ) 符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-639">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="b4068-640">`s`参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-640">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b4068-641">`ws`、 `sign` 、千位分隔符 (、) 和小数点 ( ) 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-641">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b4068-642">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-642">All elements.</span></span> <span data-ttu-id="b4068-643">但是， `s` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b4068-643">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="b4068-644">`s`使用为 <xref:System.Globalization.NumberFormatInfo> 当前系统区域性初始化的对象中的格式设置信息分析参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-644">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="b4068-645">有关详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>。</span><span class="sxs-lookup"><span data-stu-id="b4068-645">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span>  
  
 <span data-ttu-id="b4068-646">通常，如果向方法传递 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 通过调用方法创建的字符串 <xref:System.Double.ToString%2A?displayProperty=nameWithType> ，则 <xref:System.Double> 返回原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-646">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="b4068-647">但是，由于精度损失，值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-647">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="b4068-648">此外，尝试分析或的字符串表示形式不 <xref:System.Double.MinValue?displayProperty=nameWithType> <xref:System.Double.MaxValue?displayProperty=nameWithType> 会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-648">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue?displayProperty=nameWithType> or <xref:System.Double.MaxValue?displayProperty=nameWithType> fails to round-trip.</span></span> <span data-ttu-id="b4068-649">在 .NET Framework 和 .NET Core 2.2 及早期版本上，它会引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-649">On .NET Framework and .NET Core 2.2 and previous versions, it throws an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-650">在 .NET Core 3.0 及更高版本中， <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 如果您尝试分析 <xref:System.Double.MinValue?displayProperty=nameWithtype> 或 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 您尝试进行分析，它将返回 <xref:System.Double.MaxValue?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-650">On .NET Core 3.0 and later versions, it returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MinValue?displayProperty=nameWithtype> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MaxValue?displayProperty=nameWithtype>.</span></span> <span data-ttu-id="b4068-651">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-651">The following example provides an illustration.</span></span> 
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb" id="Snippet3":::

<span data-ttu-id="b4068-652">在 .NET Framework 和 .NET Core 2.2 及更早版本中，如果超出了 `s` <xref:System.Double> 数据类型的范围，则该 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 方法将引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-652">On .NET Framework and .NET Core 2.2 and earlier versions, if `s` is out of range of the <xref:System.Double> data type, the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method throws an <xref:System.OverflowException>.</span></span>

<span data-ttu-id="b4068-653">在 .NET Core 3.0 及更高版本中，当 `s` 超出数据类型的范围时，不会引发异常 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-653">On .NET Core 3.0 and later versions, no exception is thrown when `s` is out of range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b4068-654">在大多数情况下， <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 方法将返回 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 或 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-654">In most cases, the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method will return <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-655">但是，有一小部分值被视为比的最大值或最小值更接近于 <xref:System.Double> 正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-655">However, there is a small set of values that are considered to be closer to the maximum or minimum values of <xref:System.Double> than to positive or negative infinity.</span></span> <span data-ttu-id="b4068-656">在这些情况下，方法返回 <xref:System.Double.MaxValue?displayProperty=nameWithType> 或 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-656">In those cases, the method returns <xref:System.Double.MaxValue?displayProperty=nameWithType> or <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="b4068-657">如果在分析操作过程中在参数中遇到分隔符 `s` ，并且适用的货币或小数分隔符和组分隔符相同，则分析操作将假定分隔符是小数点分隔符，而不是组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-657">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="b4068-658">有关分隔符的详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 、、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 和 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-658">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>   
  
## Examples  
 <span data-ttu-id="b4068-659">下面的示例使用 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 方法来分析使用 en-us 区域性的值的字符串表示形式 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-659">The following example uses the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method to parse the string representations of <xref:System.Double> values using the en-US culture.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/Parse.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/Parse.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4068-660"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-660"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b4068-661"><paramref name="s" /> 不表示具有有效格式的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-661"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4068-662">仅限 .NET Framework 和 .NET Core 2.2 及更低版本：<paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-662">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4068-663"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-663"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b4068-664">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b4068-664">-or-</span></span> 
 <span data-ttu-id="b4068-665"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-665"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="Overload:System.Double.TryParse" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-numeric"><span data-ttu-id="b4068-666">分析 .NET 中的数字字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-666">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; double" Usage="System.double.Parse (s, provider)" />
      <MemberSignature Language="C#" Value="public static double Parse (string s, IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-667">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-667">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-668">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-668">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="b4068-669">将指定的区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-669">Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="b4068-670">与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-670">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-671">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-671">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-672">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-672">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

 <span data-ttu-id="b4068-673">此方法的重载 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> 通常用于将可以多种方式设置格式的文本转换为 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-673">This overload of the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> method is typically used to convert text that can be formatted in a variety of ways to a <xref:System.Double> value.</span></span> <span data-ttu-id="b4068-674">例如，它可用于将用户输入的文本转换为一个数字值，并将其转换为一个文本框。</span><span class="sxs-lookup"><span data-stu-id="b4068-674">For example, it can be used to convert the text that is entered by a user into an HTML text box to a numeric value.</span></span>  
  
 <span data-ttu-id="b4068-675">`s`参数使用和标志的组合来进行解释 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-675">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="b4068-676">`s`参数可以 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType> 为指定的区域性包含、或，也可以 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> `provider` 包含以下形式的字符串：</span><span class="sxs-lookup"><span data-stu-id="b4068-676">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`, or it can contain a string of the form:</span></span>  
  
 <span data-ttu-id="b4068-677">[*ws*][*sign*]*整数位数*[*。*[*小数位数*]][E [*sign*]*指数-数字*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="b4068-677">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b4068-678">可选元素括在方括号中， ( [和] ) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-678">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="b4068-679">包含术语 "数字" 的元素包含一系列从0到9之间的数字字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-679">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span>  
  
|<span data-ttu-id="b4068-680">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-680">Element</span></span>|<span data-ttu-id="b4068-681">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-681">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-682">*ws*</span><span class="sxs-lookup"><span data-stu-id="b4068-682">*ws*</span></span>|<span data-ttu-id="b4068-683">一系列空白字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-683">A series of white-space characters.</span></span>|  
|<span data-ttu-id="b4068-684">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-684">*sign*</span></span>|<span data-ttu-id="b4068-685">负号符号 (-) 或正号符号 (+) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-685">A negative sign symbol (-) or a positive sign symbol (+).</span></span>|  
|<span data-ttu-id="b4068-686">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-686">*integral-digits*</span></span>|<span data-ttu-id="b4068-687">一系列从0到9之间的数字，用于指定数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-687">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="b4068-688">*整数位数*的运行可以通过组分隔符进行分区。</span><span class="sxs-lookup"><span data-stu-id="b4068-688">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="b4068-689">例如，在某些区域性中，用逗号 (，) 分隔上千组。</span><span class="sxs-lookup"><span data-stu-id="b4068-689">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="b4068-690">如果字符串包含*小数位数*元素，则可以不存在*整数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-690">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="b4068-691">。</span><span class="sxs-lookup"><span data-stu-id="b4068-691">.</span></span>|<span data-ttu-id="b4068-692">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-692">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="b4068-693">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-693">*fractional-digits*</span></span>|<span data-ttu-id="b4068-694">一系列从0到9之间的数字，用于指定数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-694">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="b4068-695">E</span><span class="sxs-lookup"><span data-stu-id="b4068-695">E</span></span>|<span data-ttu-id="b4068-696">"E" 或 "E" 字符，指示以指数 (科学) 记数法表示的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-696">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="b4068-697">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-697">*exponential-digits*</span></span>|<span data-ttu-id="b4068-698">一系列从0到9之间的数字，用于指定指数。</span><span class="sxs-lookup"><span data-stu-id="b4068-698">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="b4068-699">有关数字格式的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types) 主题。</span><span class="sxs-lookup"><span data-stu-id="b4068-699">For more information about numeric formats, see the [Formatting Types](/dotnet/standard/base-types/formatting-types) topic.</span></span>  
  
 <span data-ttu-id="b4068-700">`provider`参数是一个 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供用于解释的格式的区域性特定信息 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-700">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific information used in interpreting the format of `s`.</span></span> <span data-ttu-id="b4068-701">通常，它是一个 <xref:System.Globalization.NumberFormatInfo> 或 <xref:System.Globalization.CultureInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-701">Typically, it is a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="b4068-702">如果 `provider` 为 `null` 或 <xref:System.Globalization.NumberFormatInfo> ，则使用当前系统区域性的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-702">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  
  
 <span data-ttu-id="b4068-703">通常，如果向方法传递 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 通过调用方法创建的字符串 <xref:System.Double.ToString%2A?displayProperty=nameWithType> ，则 <xref:System.Double> 返回原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-703">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="b4068-704">但是，由于精度损失，值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-704">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="b4068-705">此外，尝试分析或的字符串表示形式不 <xref:System.Double.MinValue?displayProperty=nameWithType> <xref:System.Double.MaxValue?displayProperty=nameWithType> 会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-705">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue?displayProperty=nameWithType> or <xref:System.Double.MaxValue?displayProperty=nameWithType> fails to round-trip.</span></span> <span data-ttu-id="b4068-706">在 .NET Framework 和 .NET Core 2.2 及早期版本上，它会引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-706">On .NET Framework and .NET Core 2.2 and previous versions, it throws an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-707">在 .NET Core 3.0 及更高版本中， <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 如果您尝试分析 <xref:System.Double.MinValue?displayProperty=nameWithtype> 或 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 您尝试进行分析，它将返回 <xref:System.Double.MaxValue?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-707">On .NET Core 3.0 and later versions, it returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MinValue?displayProperty=nameWithtype> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MaxValue?displayProperty=nameWithtype>.</span></span> <span data-ttu-id="b4068-708">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-708">The following example provides an illustration.</span></span>
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb" id="Snippet3":::

<span data-ttu-id="b4068-709">在 .NET Framework 和 .NET Core 2.2 及更早版本中，如果超出了 `s` <xref:System.Double> 数据类型的范围，则该 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> 方法将引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-709">On .NET Framework and .NET Core 2.2 and earlier versions, if `s` is out of range of the <xref:System.Double> data type, the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> method throws an <xref:System.OverflowException>.</span></span>

<span data-ttu-id="b4068-710">在 .NET Core 3.0 及更高版本中，当 `s` 超出数据类型的范围时，不会引发异常 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-710">On .NET Core 3.0 and later versions, no exception is thrown when `s` is out of range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b4068-711">在大多数情况下， <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> 方法将返回 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 或 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-711">In most cases, the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> method will return <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-712">但是，有一小部分值被视为比的最大值或最小值更接近于 <xref:System.Double> 正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-712">However, there is a small set of values that are considered to be closer to the maximum or minimum values of <xref:System.Double> than to positive or negative infinity.</span></span> <span data-ttu-id="b4068-713">在这些情况下，方法返回 <xref:System.Double.MaxValue?displayProperty=nameWithType> 或 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-713">In those cases, the method returns <xref:System.Double.MaxValue?displayProperty=nameWithType> or <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="b4068-714">如果在分析操作过程中在参数中遇到分隔符 `s` ，并且适用的货币或小数分隔符和组分隔符相同，则分析操作将假定分隔符是小数点分隔符，而不是组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-714">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="b4068-715">有关分隔符的详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 、、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 和 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-715">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
 
## Examples  
 <span data-ttu-id="b4068-716">下面的示例是 Web 窗体的按钮单击事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="b4068-716">The following example is the button click event handler of a Web form.</span></span> <span data-ttu-id="b4068-717">它使用属性返回的数组 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> 来确定用户的区域设置。</span><span class="sxs-lookup"><span data-stu-id="b4068-717">It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> property to determine the user's locale.</span></span> <span data-ttu-id="b4068-718">然后，它将实例化 <xref:System.Globalization.CultureInfo> 对应于该区域设置的对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-718">It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale.</span></span> <span data-ttu-id="b4068-719">然后，将 <xref:System.Globalization.NumberFormatInfo> 属于该对象的对象 <xref:System.Globalization.CultureInfo> 传递给 <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> 方法，以将用户的输入转换为 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-719">The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> method to convert the user's input to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[ParseMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#2)]
 [!code-vb[ParseMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4068-720"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-720"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b4068-721"><paramref name="s" /> 不表示具有有效格式的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-721"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4068-722">仅限 .NET Framework 和 .NET Core 2.2 及更低版本：<paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-722">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="Overload:System.Double.TryParse" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-numeric"><span data-ttu-id="b4068-723">分析 .NET 中的数字字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-723">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider? provider = default);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = Nothing) As Double" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; double" Usage="System.double.Parse (s, style, provider)" />
      <MemberSignature Language="C#" Value="public static double Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-724">包含要转换的数字的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b4068-724">A character span that contains the number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b4068-725">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-725">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</span></span>  <span data-ttu-id="b4068-726">一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-726">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-727">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-727">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="b4068-728">将字符范围（其中包含指定样式和区域性特定格式的数字的字符串表示形式）转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-728">Converts a character span that contains the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="b4068-729">与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-729">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b4068-730">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-730">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-731">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-731">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

<span data-ttu-id="b4068-732">如果超出 `s` 了数据类型的范围 <xref:System.Double> ，则 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 当 `s` 小于 <xref:System.Double.MinValue?displayProperty=nameWithType> 且 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> `s` 大于时 <xref:System.Double.MaxValue?displayProperty=nameWithType> ，此方法将返回。</span><span class="sxs-lookup"><span data-stu-id="b4068-732">If `s` is out of range of the <xref:System.Double> data type, the method returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Double.MinValue?displayProperty=nameWithType> and <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b4068-733"><paramref name="s" /> 不表示一个数值。</span><span class="sxs-lookup"><span data-stu-id="b4068-733"><paramref name="s" /> does not represent a numeric value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4068-734"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-734"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b4068-735">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b4068-735">-or-</span></span> 
 <span data-ttu-id="b4068-736"><paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-736"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; double" Usage="System.double.Parse (s, style, provider)" />
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-737">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-737">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b4068-738">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-738">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</span></span> <span data-ttu-id="b4068-739">一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-739">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-740">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-740">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="b4068-741">将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-741">Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="b4068-742">与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-742">A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-743">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-743">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-744">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-744">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

 <span data-ttu-id="b4068-745">`style`参数定义在参数中允许的样式元素 (如空格、千位分隔符和货币符号) ，以便 `s` 分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b4068-745">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b4068-746">它必须是枚举中的位标志的组合 <xref:System.Globalization.NumberStyles> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-746">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b4068-747"><xref:System.Globalization.NumberStyles>不支持以下成员：</span><span class="sxs-lookup"><span data-stu-id="b4068-747">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="b4068-748">`s` <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType> 对于由指定的区域性，参数可以包含、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType> 或 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> `provider` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-748">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`.</span></span> <span data-ttu-id="b4068-749">根据的值 `style` ，它还可以采用以下格式：</span><span class="sxs-lookup"><span data-stu-id="b4068-749">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="b4068-750">[*ws*][ *$* ] [*sign*] [*整数位数*，]*整数位数*[. [*小数位数*]][E [*sign*]*指数-数字*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="b4068-750">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="b4068-751">括在方括号 ( [和] ) 的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b4068-751">Elements framed in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b4068-752">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b4068-752">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b4068-753">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-753">Element</span></span>|<span data-ttu-id="b4068-754">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-754">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-755">*ws*</span><span class="sxs-lookup"><span data-stu-id="b4068-755">*ws*</span></span>|<span data-ttu-id="b4068-756">一系列空白字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-756">A series of white-space characters.</span></span> <span data-ttu-id="b4068-757">如果包含标志，则空格可以出现在的开头 `s` `style` <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> ，如果包含标志，则可以在的末尾出现空白 `s` `style` <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-757">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="b4068-758">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-758">A culture-specific currency symbol.</span></span> <span data-ttu-id="b4068-759">其在字符串中的位置由 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 当前区域性的和属性定义。</span><span class="sxs-lookup"><span data-stu-id="b4068-759">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="b4068-760">`s`如果包含标志，则当前区域性的货币符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-760">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-761">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-761">*sign*</span></span>|<span data-ttu-id="b4068-762">负号符号 (-) 或正号符号 (+) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-762">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="b4068-763">如果包含标志，则符号可以出现在的开头 `s` `style` <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> ，如果包含标志，则它可以出现在的末尾 `s` `style` <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-763">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b4068-764">如果包含标志，则可以在中使用括号 `s` 来表示负值 `style` <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-764">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-765">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-765">*integral-digits*</span></span>|<span data-ttu-id="b4068-766">一系列从0到9之间的数字，用于指定数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-766">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="b4068-767">如果字符串包含*小数位数*元素，则可以不存在*整数位数*元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-767">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="b4068-768">,</span><span class="sxs-lookup"><span data-stu-id="b4068-768">,</span></span>|<span data-ttu-id="b4068-769">区域性特定的组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-769">A culture-specific group separator.</span></span> <span data-ttu-id="b4068-770">`s`如果 `style` 包含 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 标志，则当前区域性的组分隔符符号可以出现在中</span><span class="sxs-lookup"><span data-stu-id="b4068-770">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="b4068-771">。</span><span class="sxs-lookup"><span data-stu-id="b4068-771">.</span></span>|<span data-ttu-id="b4068-772">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-772">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b4068-773">`s`如果包含标志，则当前区域性的小数点符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-773">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-774">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-774">*fractional-digits*</span></span>|<span data-ttu-id="b4068-775">一系列从0到9之间的数字，用于指定数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-775">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="b4068-776">`s`如果 `style` 包含标志，则小数位数可以出现在中 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-776">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-777">E</span><span class="sxs-lookup"><span data-stu-id="b4068-777">E</span></span>|<span data-ttu-id="b4068-778">"E" 或 "E" 字符，指示以指数 (科学) 记数法表示的值。</span><span class="sxs-lookup"><span data-stu-id="b4068-778">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="b4068-779">`s`如果包含标志，则参数可以表示指数表示法中的数字 `style` <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-779">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-780">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-780">*exponential-digits*</span></span>|<span data-ttu-id="b4068-781">一系列从0到9之间的数字，用于指定指数。</span><span class="sxs-lookup"><span data-stu-id="b4068-781">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="b4068-782">`s`无论参数的值如何，分析操作都将忽略中任何终止的 NUL (U + 0000) 字符 `style` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-782">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="b4068-783">只包含数字的字符串 (与 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 样式) 始终在类型范围内分析成功 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-783">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Double> type.</span></span> <span data-ttu-id="b4068-784">其余 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 成员控件元素可能存在但不需要存在于输入字符串中。</span><span class="sxs-lookup"><span data-stu-id="b4068-784">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="b4068-785">下表指示各个标志如何 <xref:System.Globalization.NumberStyles> 影响可能出现在中的元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-785">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="b4068-786">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="b4068-786">NumberStyles value</span></span>|<span data-ttu-id="b4068-787">中允许的元素 `s` 以及数字</span><span class="sxs-lookup"><span data-stu-id="b4068-787">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b4068-788">仅限 *整数数字* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-788">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b4068-789">小数点 () 和*小数位数\*\*元素。*</span><span class="sxs-lookup"><span data-stu-id="b4068-789">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b4068-790">"E" 或 "E" 字符，指示指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-790">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="b4068-791">此标志本身 *支持格式为*E*位*的值;若要成功地分析包含正号或负号和小数点符号的字符串，需要其他标志。</span><span class="sxs-lookup"><span data-stu-id="b4068-791">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b4068-792">开头的 *ws* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-792">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b4068-793">末尾处的 *ws* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-793">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b4068-794">开头的 *sign* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-794">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b4068-795">末尾的 *sign* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-795">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b4068-796">用括号括起数值的 *符号* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-796">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b4068-797">千位分隔符 (，) 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-797">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b4068-798">货币 ($) 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-798">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b4068-799">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-799">All elements.</span></span> <span data-ttu-id="b4068-800">但是， `s` 不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-800">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b4068-801">在开头或结尾处的 *ws* 元素，在 `s` 的开头处 *符号* ， `s` 小数点 ( ) 符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-801">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="b4068-802">`s`参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-802">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b4068-803">`ws`、 `sign` 、千位分隔符 (、) 和小数点 ( ) 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-803">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b4068-804">所有元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-804">All elements.</span></span> <span data-ttu-id="b4068-805">但是， `s` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b4068-805">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="b4068-806">`provider`参数是一个 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象，该对象提供用于解释的格式的区域性特定信息 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-806">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific information used in interpreting the format of `s`.</span></span> <span data-ttu-id="b4068-807">通常，它是一个 <xref:System.Globalization.NumberFormatInfo> 或 <xref:System.Globalization.CultureInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-807">Typically, it is a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="b4068-808">如果 `provider` 为 `null` 或 <xref:System.Globalization.NumberFormatInfo> ，则使用当前系统区域性的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-808">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  
  
 <span data-ttu-id="b4068-809">通常，如果向方法传递 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 通过调用方法创建的字符串 <xref:System.Double.ToString%2A?displayProperty=nameWithType> ，则 <xref:System.Double> 返回原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-809">Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="b4068-810">但是，由于精度损失，值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-810">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="b4068-811">此外，尝试分析或的字符串表示形式不 <xref:System.Double.MinValue?displayProperty=nameWithtype> <xref:System.Double.MaxValue?displayProperty=nameWithType> 会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-811">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue?displayProperty=nameWithtype> or <xref:System.Double.MaxValue?displayProperty=nameWithType> fails to round-trip.</span></span> <span data-ttu-id="b4068-812">在 .NET Framework 和 .NET Core 2.2 及早期版本上，它会引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-812">On .NET Framework and .NET Core 2.2 and previous versions, it throws an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-813">在 .NET Core 3.0 及更高版本中， <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 如果您尝试分析 <xref:System.Double.MinValue?displayProperty=nameWithtype> 或 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 您尝试进行分析，它将返回 <xref:System.Double.MaxValue?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-813">On .NET Core 3.0 and later versions, it returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MinValue?displayProperty=nameWithtype> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MaxValue?displayProperty=nameWithtype>.</span></span> <span data-ttu-id="b4068-814">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-814">The following example provides an illustration.</span></span>   
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb" id="Snippet3":::

<span data-ttu-id="b4068-815">在 .NET Framework 和 .NET Core 2.2 及更早版本中，如果超出了 `s` <xref:System.Double> 数据类型的范围，则该 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 方法将引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-815">On .NET Framework and .NET Core 2.2 and earlier versions, if `s` is out of range of the <xref:System.Double> data type, the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method throws an <xref:System.OverflowException>.</span></span>

<span data-ttu-id="b4068-816">在 .NET Core 3.0 及更高版本中，当 `s` 超出数据类型的范围时，不会引发异常 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-816">On .NET Core 3.0 and later versions, no exception is thrown when `s` is out of range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b4068-817">在大多数情况下， <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 方法将返回 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 或 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-817">In most cases, the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method will return <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-818">但是，有一小部分值被视为比的最大值或最小值更接近于 <xref:System.Double> 正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-818">However, there is a small set of values that are considered to be closer to the maximum or minimum values of <xref:System.Double> than to positive or negative infinity.</span></span> <span data-ttu-id="b4068-819">在这些情况下，方法返回 <xref:System.Double.MaxValue?displayProperty=nameWithType> 或 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-819">In those cases, the method returns <xref:System.Double.MaxValue?displayProperty=nameWithType> or <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="b4068-820">如果在分析操作过程中在参数中遇到分隔符 `s` ，并且适用的货币或小数分隔符和组分隔符相同，则分析操作将假定分隔符是小数点分隔符，而不是组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-820">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="b4068-821">有关分隔符的详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 、、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 和 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-821">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  

## Examples  
 <span data-ttu-id="b4068-822">下面的示例演示如何使用方法将 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 温度值的几个字符串表示形式分配给 `Temperature` 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-822">The following example illustrates the use of the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method to assign several string representations of temperature values to a `Temperature` object.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/Parse3.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/Parse3.vb" id="Snippet2":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4068-823"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-823"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b4068-824"><paramref name="s" /> 不表示一个数值。</span><span class="sxs-lookup"><span data-stu-id="b4068-824"><paramref name="s" /> does not represent a numeric value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4068-825"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-825"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b4068-826">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b4068-826">-or-</span></span> 
 <span data-ttu-id="b4068-827"><paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-827"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4068-828">仅限 .NET Framework 和 .NET Core 2.2 及更低版本：<paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-828">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-numeric"><span data-ttu-id="b4068-829">分析 .NET 中的数字字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-829">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const double PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PositiveInfinity = float64(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Double.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Double  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: double PositiveInfinity = Infinity;" />
      <MemberSignature Language="F#" Value="val mutable PositiveInfinity : double" Usage="System.double.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4068-830">表示正无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-830">Represents positive infinity.</span></span> <span data-ttu-id="b4068-831">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="b4068-831">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-832">此常量的值是将正数除以零所得的结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-832">The value of this constant is the result of dividing a positive number by zero.</span></span>  
  
 <span data-ttu-id="b4068-833">如果操作的结果大于，则返回此常数 <xref:System.Double.MaxValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-833">This constant is returned when the result of an operation is greater than <xref:System.Double.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b4068-834">用于 <xref:System.Double.IsPositiveInfinity%2A> 确定某个值是否计算为正无穷大。</span><span class="sxs-lookup"><span data-stu-id="b4068-834">Use <xref:System.Double.IsPositiveInfinity%2A> to determine whether a value evaluates to positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-835">下面的代码示例阐释了的用法 <xref:System.Double.PositiveInfinity> ：</span><span class="sxs-lookup"><span data-stu-id="b4068-835">The following code example illustrates the use of <xref:System.Double.PositiveInfinity>:</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp" id="Snippet10":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs" interactive="try-dotnet-method" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb" id="Snippet10":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="double.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b4068-836">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-836">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b4068-837">将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</span><span class="sxs-lookup"><span data-stu-id="b4068-837">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span></span></summary>
        <returns><span data-ttu-id="b4068-838">一个值，指示要比较的对象的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="b4068-838">A value that indicates the relative order of the objects being compared.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b4068-839">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-839">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-840">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IComparable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-840">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IComparable> interface.</span></span>

<span data-ttu-id="b4068-841">返回值的含义如下：</span><span class="sxs-lookup"><span data-stu-id="b4068-841">The return value has these meanings:</span></span>

| <span data-ttu-id="b4068-842">“值”</span><span class="sxs-lookup"><span data-stu-id="b4068-842">Value</span></span>             | <span data-ttu-id="b4068-843">含义</span><span class="sxs-lookup"><span data-stu-id="b4068-843">Meaning</span></span>                                                                 |
|-------------------|-------------------------------------------------------------------------|
| <span data-ttu-id="b4068-844">小于零</span><span class="sxs-lookup"><span data-stu-id="b4068-844">Less than zero</span></span>    | <span data-ttu-id="b4068-845">此实例在排序顺序中位于 `value` 之前。</span><span class="sxs-lookup"><span data-stu-id="b4068-845">This instance precedes `value` in the sort order.</span></span>                       |
| <span data-ttu-id="b4068-846">零</span><span class="sxs-lookup"><span data-stu-id="b4068-846">Zero</span></span>              | <span data-ttu-id="b4068-847">此实例在排序顺序中的位置与 `value` 相同。</span><span class="sxs-lookup"><span data-stu-id="b4068-847">This instance occurs in the same position in the sort order as `value`.</span></span> |
| <span data-ttu-id="b4068-848">大于零</span><span class="sxs-lookup"><span data-stu-id="b4068-848">Greater than zero</span></span> | <span data-ttu-id="b4068-849">此实例在排序顺序中位于 `value` 之后。</span><span class="sxs-lookup"><span data-stu-id="b4068-849">This instance follows `value` in the sort order.</span></span>                        |

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="double.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4068-850">返回此实例的 <see cref="T:System.TypeCode" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-850">Returns the <see cref="T:System.TypeCode" /> for this instance.</span></span></summary>
        <returns><span data-ttu-id="b4068-851">枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-851">The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="b4068-852">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-852">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-853">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-853">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="double.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-854">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-854">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-855">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-855">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-856">如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-856"><see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-857">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-857">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-858">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-858">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-859">建议的替代方法是调用 <xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-859">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="double.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-860">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-860">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-861">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-861">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-862">当前实例的值，已转换为 <see cref="T:System.Byte" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-862">The value of the current instance, converted to a <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-863">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-863">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-864">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-864">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-865">建议的替代方法是调用 <xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-865">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="double.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-866">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-866">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-867">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-867">This conversion is not supported.</span></span> <span data-ttu-id="b4068-868">尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-868">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-869">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-869">This conversion is not supported.</span></span> <span data-ttu-id="b4068-870">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="b4068-870">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="b4068-871">在所有情况下。</span><span class="sxs-lookup"><span data-stu-id="b4068-871">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="double.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-872">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-872">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-873">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-873">This conversion is not supported.</span></span> <span data-ttu-id="b4068-874">尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-874">Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></span></span></summary>
        <returns><span data-ttu-id="b4068-875">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="b4068-875">This conversion is not supported.</span></span> <span data-ttu-id="b4068-876">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="b4068-876">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="b4068-877">在所有情况下。</span><span class="sxs-lookup"><span data-stu-id="b4068-877">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="double.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-878">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-878">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-879">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-879">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-880">当前实例的值，已转换为 <see cref="T:System.Decimal" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-880">The value of the current instance, converted to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-881">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-881">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-882">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-882">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-883">建议的替代方法是调用 <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-883">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="double.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-884">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-884">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-885">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-885">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-886">当前实例的值，未更改。</span><span class="sxs-lookup"><span data-stu-id="b4068-886">The value of the current instance, unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-887">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-887">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-888">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-888">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="double.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-889">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-889">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-890">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-890">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-891">当前实例的值，已转换为 <see cref="T:System.Int16" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-891">The value of the current instance, converted to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-892">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-892">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-893">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-893">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-894">建议的替代方法是调用 <xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-894">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="double.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-895">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-895">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-896">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-896">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-897">当前实例的值，已转换为 <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-897">The value of the current instance, converted to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-898">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-898">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-899">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-899">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-900">建议的替代方法是调用 <xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-900">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="double.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-901">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-901">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-902">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-902">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-903">当前实例的值，已转换为 <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-903">The value of the current instance, converted to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-904">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-904">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-905">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-905">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-906">建议的替代方法是调用 <xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-906">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="double.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-907">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-907">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-908">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-908">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-909">当前实例的值，已转换为 <see cref="T:System.SByte" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-909">The value of the current instance, converted to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-910">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-910">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-911">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-911">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-912">建议的替代方法是调用 <xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-912">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="double.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-913">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-913">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-914">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-914">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-915">当前实例的值，已转换为 <see cref="T:System.Single" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-915">The value of the current instance, converted to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-916">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-916">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-917">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-917">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-918">建议的替代方法是调用 <xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-918">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="double.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b4068-919">此 <see cref="T:System.Double" /> 值要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="b4068-919">The type to which to convert this <see cref="T:System.Double" /> value.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-920">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-920">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</span></span></param>
        <summary><span data-ttu-id="b4068-921">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-921">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-922">当前实例的值，已转换为 <paramref name="type" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-922">The value of the current instance, converted to <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-923">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-923">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-924">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-924">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-925">建议的替代 `static` `Shared` 项是在 Visual Basic) 方法中调用 (<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-925">The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="double.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-926">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-926">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-927">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-927">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-928">当前实例的值，已转换为 <see cref="T:System.UInt16" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-928">The value of the current instance, converted to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-929">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-929">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-930">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-930">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-931">建议的替代方法是调用 <xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-931">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="double.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-932">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-932">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-933">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-933">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-934">当前实例的值，已转换为 <see cref="T:System.UInt32" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-934">The value of the current instance, converted to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-935">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-935">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-936">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-936">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-937">建议的替代方法是调用 <xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-937">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="double.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-938">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-938">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="b4068-939">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-939">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="b4068-940">当前实例的值，已转换为 <see cref="T:System.UInt64" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-940">The value of the current instance, converted to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-941">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="b4068-941">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="b4068-942">它只能在 <xref:System.Double> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="b4068-942">It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="b4068-943">建议的替代方法是调用 <xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="b4068-943">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4068-944">将此实例的数值转换为其等效的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-944">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="double.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4068-945">将此实例的数值转换为其等效的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-945">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="b4068-946">此实例的值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-946">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-947"><xref:System.Double.ToString>方法使用 <xref:System.Double> 当前区域性的默认 ( "G" 或常规) 格式设置值的格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-947">The <xref:System.Double.ToString> method formats a <xref:System.Double> value in the default ("G", or general) format of the current culture.</span></span> <span data-ttu-id="b4068-948">如果要指定不同的格式、精度或区域性，请使用方法的其他重载 <xref:System.Double.ToString%2A> ，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b4068-948">If you want to specify a different format, precision, or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b4068-949">使用格式</span><span class="sxs-lookup"><span data-stu-id="b4068-949">To use format</span></span>|<span data-ttu-id="b4068-950">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-950">For culture</span></span>|<span data-ttu-id="b4068-951">使用重载</span><span class="sxs-lookup"><span data-stu-id="b4068-951">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b4068-952">默认 ( "G" ) 格式</span><span class="sxs-lookup"><span data-stu-id="b4068-952">Default ("G") format</span></span>|<span data-ttu-id="b4068-953">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-953">A specific culture</span></span>|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="b4068-954">特定的格式或精度</span><span class="sxs-lookup"><span data-stu-id="b4068-954">A specific format or precision</span></span>|<span data-ttu-id="b4068-955">默认 (当前) 区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-955">Default (current) culture</span></span>|<xref:System.Double.ToString%28System.String%29>|  
|<span data-ttu-id="b4068-956">特定的格式或精度</span><span class="sxs-lookup"><span data-stu-id="b4068-956">A specific format or precision</span></span>|<span data-ttu-id="b4068-957">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-957">A specific culture</span></span>|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="b4068-958">返回值可以是 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> 或格式的字符串：</span><span class="sxs-lookup"><span data-stu-id="b4068-958">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="b4068-959">[sign] 整数位数 [. [小数位数]] [E [sign] 指数-数字]</span><span class="sxs-lookup"><span data-stu-id="b4068-959">[sign]integral-digits[.[fractional-digits]][E[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="b4068-960">可选元素括在方括号中， ( [和] ) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-960">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="b4068-961">包含术语 "数字" 的元素包含一系列从0到9之间的数字字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-961">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="b4068-962">支持下表中列出的元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-962">The elements listed in the following table are supported.</span></span>  
  
|<span data-ttu-id="b4068-963">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-963">Element</span></span>|<span data-ttu-id="b4068-964">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-964">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-965">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-965">*sign*</span></span>|<span data-ttu-id="b4068-966">负号或正号符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-966">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="b4068-967">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-967">*integral-digits*</span></span>|<span data-ttu-id="b4068-968">指定数字的整数部分的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-968">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="b4068-969">如果有小数位数，则可以不存在整数位数。</span><span class="sxs-lookup"><span data-stu-id="b4068-969">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="b4068-970">'*.*'</span><span class="sxs-lookup"><span data-stu-id="b4068-970">'*.*'</span></span>|<span data-ttu-id="b4068-971">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-971">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="b4068-972">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-972">*fractional-digits*</span></span>|<span data-ttu-id="b4068-973">指定数字小数部分的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-973">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="b4068-974">"*E*"</span><span class="sxs-lookup"><span data-stu-id="b4068-974">'*E*'</span></span>|<span data-ttu-id="b4068-975">大写字符 "E"，指示指数 (科学) 表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-975">An uppercase character 'E', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="b4068-976">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-976">*exponential-digits*</span></span>|<span data-ttu-id="b4068-977">指定指数的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-977">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="b4068-978">返回值的一些示例包括 "100"、"-123456789"、"123.45 E + 6"、"500"、"3.1416"、"600"、"-0.123" 和 "-无限大"。</span><span class="sxs-lookup"><span data-stu-id="b4068-978">Some examples of the return value are "100", "-123,456,789", "123.45E+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="b4068-979">.NET Framework 提供了广泛的格式设置支持，以下格式设置主题更详细地介绍了这些支持：</span><span class="sxs-lookup"><span data-stu-id="b4068-979">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="b4068-980">有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="b4068-980">For more information about numeric format specifiers, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>  
  
-   <span data-ttu-id="b4068-981">有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。</span><span class="sxs-lookup"><span data-stu-id="b4068-981">For more information about formatting, see [Formatting Types](/dotnet/standard/base-types/formatting-types).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-982">下面的示例使用默认 <xref:System.Double.ToString?displayProperty=nameWithType> 方法显示若干值的字符串表示形式 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-982">The following example uses the default <xref:System.Double.ToString?displayProperty=nameWithType> method to display the string representations of a number of <xref:System.Double> values.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb" id="Snippet1":::
  
 <span data-ttu-id="b4068-983">下面的示例阐释了的用法 <xref:System.Double.ToString%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-983">The following example illustrates the use of <xref:System.Double.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Double#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#3)]
 [!code-csharp[System.Double#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#3)]
 [!code-vb[System.Double#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="b4068-984">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b4068-984">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="double.ToString provider" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="b4068-985">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-985">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b4068-986">使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-986">Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="b4068-987">此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="b4068-987">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-988"><xref:System.Double.ToString%28System.IFormatProvider%29>方法将 <xref:System.Double> 默认 ( "G" 中的值的格式设置为指定区域性的常规) 格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-988">The <xref:System.Double.ToString%28System.IFormatProvider%29> method formats a <xref:System.Double> value in the default ("G", or general) format of a specified culture.</span></span> <span data-ttu-id="b4068-989">如果要指定其他格式或区域性，请使用方法的其他重载 <xref:System.Double.ToString%2A> ，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b4068-989">If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b4068-990">使用格式</span><span class="sxs-lookup"><span data-stu-id="b4068-990">To use format</span></span>|<span data-ttu-id="b4068-991">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-991">For culture</span></span>|<span data-ttu-id="b4068-992">使用重载</span><span class="sxs-lookup"><span data-stu-id="b4068-992">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b4068-993">默认 ( "G" ) 格式</span><span class="sxs-lookup"><span data-stu-id="b4068-993">Default ("G") format</span></span>|<span data-ttu-id="b4068-994">默认 (当前) </span><span class="sxs-lookup"><span data-stu-id="b4068-994">Default (current)</span></span>|<xref:System.Double.ToString>|  
|<span data-ttu-id="b4068-995">特定的格式或精度</span><span class="sxs-lookup"><span data-stu-id="b4068-995">A specific format or precision</span></span>|<span data-ttu-id="b4068-996">默认 (当前) 区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-996">Default (current) culture</span></span>|<xref:System.Double.ToString%28System.String%29>|  
|<span data-ttu-id="b4068-997">特定的格式或精度</span><span class="sxs-lookup"><span data-stu-id="b4068-997">A specific format or precision</span></span>|<span data-ttu-id="b4068-998">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-998">A specific culture</span></span>|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="b4068-999">返回值可以是 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> 或格式的字符串：</span><span class="sxs-lookup"><span data-stu-id="b4068-999">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="b4068-1000">[sign] 整数位数 [. [小数位数]] [E [sign] 指数-数字]</span><span class="sxs-lookup"><span data-stu-id="b4068-1000">[sign]integral-digits[.[fractional-digits]][E[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="b4068-1001">可选元素括在方括号中， ( [和] ) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1001">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="b4068-1002">包含术语 "数字" 的元素包含一系列从0到9之间的数字字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-1002">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="b4068-1003">支持下表中列出的元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-1003">The elements listed in the following table are supported.</span></span>  
  
|<span data-ttu-id="b4068-1004">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-1004">Element</span></span>|<span data-ttu-id="b4068-1005">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-1005">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-1006">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-1006">*sign*</span></span>|<span data-ttu-id="b4068-1007">负号或正号符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1007">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="b4068-1008">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1008">*integral-digits*</span></span>|<span data-ttu-id="b4068-1009">指定数字的整数部分的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1009">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="b4068-1010">如果有小数位数，则可以不存在整数位数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1010">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="b4068-1011">'*.*'</span><span class="sxs-lookup"><span data-stu-id="b4068-1011">'*.*'</span></span>|<span data-ttu-id="b4068-1012">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1012">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="b4068-1013">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1013">*fractional-digits*</span></span>|<span data-ttu-id="b4068-1014">指定数字小数部分的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1014">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="b4068-1015">"*E*"</span><span class="sxs-lookup"><span data-stu-id="b4068-1015">'*E*'</span></span>|<span data-ttu-id="b4068-1016">大写字符 "E"，指示指数 (科学) 表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-1016">An uppercase character 'E', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="b4068-1017">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1017">*exponential-digits*</span></span>|<span data-ttu-id="b4068-1018">指定指数的一系列数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1018">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="b4068-1019">返回值的一些示例包括 "100"、"-123456789"、"123.45 E + 6"、"500"、"3.1416"、"600"、"-0.123" 和 "-无限大"。</span><span class="sxs-lookup"><span data-stu-id="b4068-1019">Some examples of the return value are "100", "-123,456,789", "123.45E+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="b4068-1020">此实例的格式为常规数值格式说明符 ( "G" ) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1020">This instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="b4068-1021">.NET Framework 提供了广泛的格式设置支持，以下格式设置主题更详细地介绍了这些支持：</span><span class="sxs-lookup"><span data-stu-id="b4068-1021">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="b4068-1022">有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1022">For more information about numeric format specifiers, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>  
  
-   <span data-ttu-id="b4068-1023">有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1023">For more information about formatting, see [Formatting Types](/dotnet/standard/base-types/formatting-types).</span></span>  
  
 <span data-ttu-id="b4068-1024">`provider`参数是一个 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-1024">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="b4068-1025">通常， `provider` 是 <xref:System.Globalization.CultureInfo> 对象或 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-1025">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="b4068-1026">`provider`参数提供用于设置格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1026">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="b4068-1027">如果 `provider` 为 `null` ，则使用当前区域性的对象设置返回值的格式 <xref:System.Globalization.NumberFormatInfo> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1027">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-1028">下面的示例 <xref:System.Double> 使用 <xref:System.Globalization.CultureInfo> 表示多个不同区域性的对象显示两个值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1028">The following example displays the string representation of two <xref:System.Double> values using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb" id="Snippet2":::  
  
 <span data-ttu-id="b4068-1029">下面的示例演示如何使用 <xref:System.Double.ToString%2A> ， <xref:System.String> 并采用和 <xref:System.IFormatProvider> 作为参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1029">The following example illustrates the use of <xref:System.Double.ToString%2A>, taking a <xref:System.String> and an <xref:System.IFormatProvider> as parameters.</span></span>  
  
 [!code-cpp[Double Example#4](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#4)]
 [!code-csharp[Double Example#4](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#4)]
 [!code-vb[Double Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="b4068-1030">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1030">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="double.ToString format" />
      <MemberSignature Language="C#" Value="public string ToString (string? format);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b4068-1031">一个数值格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-1031">A numeric format string.</span></span></param>
        <summary><span data-ttu-id="b4068-1032">使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1032">Converts the numeric value of this instance to its equivalent string representation, using the specified format.</span></span></summary>
        <returns><span data-ttu-id="b4068-1033">此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="b4068-1033">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-1034"><xref:System.Double.ToString%28System.String%29>方法 <xref:System.Double> 使用当前区域性的约定来设置指定格式的值的格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1034">The <xref:System.Double.ToString%28System.String%29> method formats a <xref:System.Double> value in a specified format by using the conventions of the current culture.</span></span> <span data-ttu-id="b4068-1035">如果要指定其他格式或区域性，请使用方法的其他重载 <xref:System.Double.ToString%2A> ，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b4068-1035">If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b4068-1036">使用格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1036">To use format</span></span>|<span data-ttu-id="b4068-1037">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1037">For culture</span></span>|<span data-ttu-id="b4068-1038">使用重载</span><span class="sxs-lookup"><span data-stu-id="b4068-1038">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b4068-1039">默认 ( "G" ) 格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1039">Default ("G") format</span></span>|<span data-ttu-id="b4068-1040">默认 (当前) 区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1040">Default (current) culture</span></span>|<xref:System.Double.ToString>|  
|<span data-ttu-id="b4068-1041">默认 ( "G" ) 格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1041">Default ("G") format</span></span>|<span data-ttu-id="b4068-1042">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1042">A specific culture</span></span>|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="b4068-1043">特定的格式或精度</span><span class="sxs-lookup"><span data-stu-id="b4068-1043">A specific format or precision</span></span>|<span data-ttu-id="b4068-1044">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1044">A specific culture</span></span>|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="b4068-1045">返回值可以是 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> 或数字的字符串表示形式，由指定 `format` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1045">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of a number, as specified by `format`.</span></span>  
  
 <span data-ttu-id="b4068-1046">`format`参数可以是任何有效的标准数值格式说明符（D 和 X 除外）以及自定义数字格式说明符的任意组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-1046">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="b4068-1047">如果 `format` 为 `null` 或空字符串，则返回值的格式为常规数值格式说明符 ( "G" ) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1047">If `format` is `null` or an empty string, the return value is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="b4068-1048">.NET Framework 提供了广泛的格式设置支持，以下格式设置主题更详细地介绍了这些支持：</span><span class="sxs-lookup"><span data-stu-id="b4068-1048">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="b4068-1049">有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1049">For more information about numeric format specifiers, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>  
  
-   <span data-ttu-id="b4068-1050">有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1050">For more information about formatting, see [Formatting Types](/dotnet/standard/base-types/formatting-types).</span></span>  
  
 <span data-ttu-id="b4068-1051">默认情况下，返回值仅包含15位精度，不过，在内部维护的最大值为17位。</span><span class="sxs-lookup"><span data-stu-id="b4068-1051">By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally.</span></span> <span data-ttu-id="b4068-1052">如果此实例的值的位数超过15，则 <xref:System.Double.ToString%2A> 返回 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 或 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 而不是预期的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1052">If the value of this instance has greater than 15 digits, <xref:System.Double.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="b4068-1053">如果需要更高的精度，请指定 `format` with "G17" 格式规范，该规格始终返回17位精度，或 "R"，如果数字可以用该精度表示，则为; 如果数字只能用最大精度表示，则返回15位数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1053">If you require more precision, specify `format` with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-1054">下面的示例定义一个数值，并使用 "C" 标准数字格式字符串将其格式设置为货币值，并使用 "N" 标准数字格式字符串将其设置为三个小数位数的数字值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1054">The following example defines a numeric value and formats it as a currency value by using the "C" standard numeric format string and as a numeric value to three decimal places by using the "N" standard numeric format string.</span></span> <span data-ttu-id="b4068-1055">使用 en-us 区域性的约定对结果字符串进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="b4068-1055">The result strings are formatted by using the conventions of the en-US culture.</span></span> <span data-ttu-id="b4068-1056">有关数字格式字符串的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1056">For more information on numeric format strings, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>  
  
 [!code-csharp[System.Double.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString7.cs#7)]
 [!code-vb[System.Double.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString7.vb#7)]  
  
 <span data-ttu-id="b4068-1057">下面的示例 <xref:System.Double> 使用受支持的标准数值格式说明符以及三个自定义数字格式字符串来显示多个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1057">The following example displays several <xref:System.Double> values using the supported standard numeric format specifiers together with three custom numeric format strings.</span></span> <span data-ttu-id="b4068-1058">其中一个自定义格式字符串说明了如何 <xref:System.Single> 用前导零填充值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1058">One of those custom format strings illustrates how to pad a <xref:System.Single> value with leading zeros.</span></span> <span data-ttu-id="b4068-1059">此外，此示例还使用带有除 "R" 之外的每个标准格式说明符的精度说明符。</span><span class="sxs-lookup"><span data-stu-id="b4068-1059">In addition, the example uses precision specifiers with each standard format specifier except for "R".</span></span> <span data-ttu-id="b4068-1060">精度说明符的值介于0到3之间。</span><span class="sxs-lookup"><span data-stu-id="b4068-1060">The values of the precision specifiers range from 0 to 3.</span></span> <span data-ttu-id="b4068-1061">若要将数值转换为字符串，则该示例使用 en-us 区域性的格式设置约定。</span><span class="sxs-lookup"><span data-stu-id="b4068-1061">To convert the numeric values to strings, the example uses the formatting conventions of the en-US culture.</span></span>  
  
 [!code-cpp[System.Double.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double.ToString/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Double.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Double.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="b4068-1062"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="b4068-1062"><paramref name="format" /> is invalid.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="b4068-1063">在某些情况下，如果使用“R”标准数字格式字符串格式化的 <see cref="T:System.Double" /> 值使用 <see langword="/platform:x64" /> 或 <see langword="/platform:anycpu" /> 开关编译并在 64 位系统上运行，则该值将无法成功往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-1063">In some cases, <see cref="T:System.Double" /> values formatted with the "R" standard numeric format string do not successfully round-trip if compiled using the <see langword="/platform:x64" /> or <see langword="/platform:anycpu" /> switches and run on 64-bit systems.</span></span> <span data-ttu-id="b4068-1064">若要解决此问题，可以使用“G17”标准数字格式字符串格式化 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1064">To work around this problem, you can format <see cref="T:System.Double" /> values by using the "G17" standard numeric format string.</span></span> <span data-ttu-id="b4068-1065">以下示例将“R”格式字符串与无法成功往返的 <see cref="T:System.Double" /> 值配合使用，并使用“G17”格式字符串以成功往返原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1065">The following example uses the "R" format string with a <see cref="T:System.Double" /> value that does not round-trip successfully, and also uses the "G17" format string to successfully round-trip the original value.</span></span>  
  
<span data-ttu-id="b4068-1066">：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system。Double ToString/cs/roundtripex2 "interactive =" dotnet "id =" Snippet6 "：：：：：： code language =" vb "source =" ~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system。Double ToString/vb/roundtripex2 "id =" Snippet6 "：：：</span><span class="sxs-lookup"><span data-stu-id="b4068-1066">:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/roundtripex2.cs" interactive="try-dotnet" id="Snippet6"::: :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/roundtripex2.vb" id="Snippet6":::</span></span></para></block>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="b4068-1067">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1067">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="b4068-1068">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-1068">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="b4068-1069">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-1069">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/how-to-pad-a-number-with-leading-zeros"><span data-ttu-id="b4068-1070">如何：用前导零填充数字</span><span class="sxs-lookup"><span data-stu-id="b4068-1070">How to: Pad a Number with Leading Zeros</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="double.ToString (format, provider)" />
      <MemberSignature Language="C#" Value="public string? ToString (string format, IFormatProvider provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="b4068-1071">一个数值格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-1071">A numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-1072">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-1072">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="b4068-1073">使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1073">Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="b4068-1074">此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="b4068-1074">The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-1075">方法使用指定 <xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29> <xref:System.Double> 的区域性的指定格式设置值的格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1075">The <xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Double> value in a specified format of a specified culture.</span></span> <span data-ttu-id="b4068-1076">如果要指定其他格式或区域性，请使用方法的其他重载 <xref:System.Double.ToString%2A> ，如下所示：</span><span class="sxs-lookup"><span data-stu-id="b4068-1076">If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="b4068-1077">使用格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1077">To use format</span></span>|<span data-ttu-id="b4068-1078">对于区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1078">For culture</span></span>|<span data-ttu-id="b4068-1079">使用重载</span><span class="sxs-lookup"><span data-stu-id="b4068-1079">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="b4068-1080">默认 ( "G" ) 格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1080">Default ("G") format</span></span>|<span data-ttu-id="b4068-1081">默认 (当前) 区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1081">Default (current) culture</span></span>|<xref:System.Double.ToString>|  
|<span data-ttu-id="b4068-1082">默认 ( "G" ) 格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1082">Default ("G") format</span></span>|<span data-ttu-id="b4068-1083">特定区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1083">A specific culture</span></span>|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="b4068-1084">特定的格式或精度</span><span class="sxs-lookup"><span data-stu-id="b4068-1084">A specific format or precision</span></span>|<span data-ttu-id="b4068-1085">默认 (当前) 区域性</span><span class="sxs-lookup"><span data-stu-id="b4068-1085">Default (current) culture</span></span>|<xref:System.Double.ToString%28System.String%29>|  
  
 <span data-ttu-id="b4068-1086">返回值可以是 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> 或数字的字符串表示形式，由指定 `format` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1086">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of a number, as specified by `format`.</span></span>  
  
 <span data-ttu-id="b4068-1087">`format`参数可以是任何有效的标准数值格式说明符（D 和 X 除外）以及自定义数字格式说明符的任意组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-1087">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="b4068-1088">如果 `format` 为 `null` 或空字符串，则此实例的返回值的格式为常规数值格式说明符 ( "G" ) 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1088">If `format` is `null` or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="b4068-1089">.NET Framework 提供了广泛的格式设置支持，以下格式设置主题更详细地介绍了这些支持：</span><span class="sxs-lookup"><span data-stu-id="b4068-1089">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="b4068-1090">有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1090">For more information about numeric format specifiers, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>  
  
-   <span data-ttu-id="b4068-1091">有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1091">For more information about formatting, see [Formatting Types](/dotnet/standard/base-types/formatting-types).</span></span>  
  
 <span data-ttu-id="b4068-1092">`provider`参数是一个 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-1092">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="b4068-1093">通常， `provider` 是 <xref:System.Globalization.CultureInfo> 对象或 <xref:System.Globalization.NumberFormatInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-1093">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="b4068-1094">`provider`参数提供用于设置格式的区域性特定信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1094">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="b4068-1095">如果 `provider` 为 `null` ，则使用当前区域性的对象设置返回值的格式 <xref:System.Globalization.NumberFormatInfo> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1095">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
 <span data-ttu-id="b4068-1096">默认情况下，返回值仅包含15位精度，不过，在内部维护的最大值为17位。</span><span class="sxs-lookup"><span data-stu-id="b4068-1096">By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally.</span></span> <span data-ttu-id="b4068-1097">如果此实例的值的位数超过15，则 <xref:System.Double.ToString%2A> 返回 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 或 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 而不是预期的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1097">If the value of this instance has greater than 15 digits, <xref:System.Double.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="b4068-1098">如果需要更高的精度，请指定 `format` with "G17" 格式规范，该规格始终返回17位精度，或 "R"，如果数字可以用该精度表示，则为; 如果数字只能用最大精度表示，则返回15位数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1098">If you require more precision, specify `format` with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4068-1099">下面的示例 <xref:System.Double> 使用多个不同区域性的每个受支持的标准数值格式说明符显示一个值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1099">The following example displays a <xref:System.Double> value using each of the supported standard numeric format specifiers for several different cultures.</span></span>  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double.ToString/cpp/tostring1.cpp" id="Snippet4":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs" interactive="try-dotnet-method" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb" id="Snippet4":::
  
 <span data-ttu-id="b4068-1100">下面的示例演示如何使用 <xref:System.Double.ToString%2A> ， <xref:System.String> 并采用和 <xref:System.IFormatProvider> 作为参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1100">The following example illustrates the use of <xref:System.Double.ToString%2A>, taking a <xref:System.String> and an <xref:System.IFormatProvider> as parameters.</span></span>  
  
 [!code-cpp[Double Example#4](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#4)]
 [!code-csharp[Double Example#4](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#4)]
 [!code-vb[Double Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="b4068-1101">在某些情况下，如果使用“R”标准数字格式字符串格式化的 <see cref="T:System.Double" /> 值使用 <see langword="/platform:x64" /> 或 <see langword="/platform:anycpu" /> 开关编译并在 64 位系统上运行，则该值将无法成功往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-1101">In some cases, <see cref="T:System.Double" /> values formatted with the "R" standard numeric format string do not successfully round-trip if compiled using the <see langword="/platform:x64" /> or <see langword="/platform:anycpu" /> switches and run on 64-bit systems.</span></span> <span data-ttu-id="b4068-1102">若要解决此问题，可以使用“G17”标准数字格式字符串格式化 <see cref="T:System.Double" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1102">To work around this problem, you can format <see cref="T:System.Double" /> values by using the "G17" standard numeric format string.</span></span> <span data-ttu-id="b4068-1103">以下示例将“R”格式字符串与无法成功往返的 <see cref="T:System.Double" /> 值配合使用，并使用“G17”格式字符串以成功往返原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1103">The following example uses the "R" format string with a <see cref="T:System.Double" /> value that does not round-trip successfully, and also uses the "G17" format string to successfully round-trip the original value.</span></span>  
  
<span data-ttu-id="b4068-1104">：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system。Double ToString/cs/roundtripex1 "interactive =" dotnet "id =" Snippet5 "：：：：：： code language =" vb "source =" ~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system。Double ToString/vb/roundtripex1 "id =" Snippet5 "：：：</span><span class="sxs-lookup"><span data-stu-id="b4068-1104">:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/roundtripex1.cs" interactive="try-dotnet" id="Snippet5"::: :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/roundtripex1.vb" id="Snippet5":::</span></span></para></block>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="b4068-1105">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="b4068-1105">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="b4068-1106">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-1106">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="b4068-1107">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-1107">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/how-to-pad-a-number-with-leading-zeros"><span data-ttu-id="b4068-1108">如何：用前导零填充数字</span><span class="sxs-lookup"><span data-stu-id="b4068-1108">How to: Pad a Number with Leading Zeros</span></span></related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/"><span data-ttu-id="b4068-1109">示例： .NET Core WinForms 格式设置实用工具 (c # ) </span><span class="sxs-lookup"><span data-stu-id="b4068-1109">Sample: .NET Core WinForms Formatting Utility (C#)</span></span></related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/"><span data-ttu-id="b4068-1110">示例： .NET Core WinForms 格式设置实用工具 (Visual Basic) </span><span class="sxs-lookup"><span data-stu-id="b4068-1110">Sample: .NET Core WinForms Formatting Utility (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider? provider = default);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = Nothing, Optional provider As IFormatProvider = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="double.TryFormat (destination, charsWritten, format, provider)" />
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider provider = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="b4068-1111">此方法返回时，此实例的值将设置为字符范围格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1111">When this method returns, this instance's value formatted as a span of characters.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="b4068-1112">此方法返回时，为写入到 <paramref name="destination" /> 的字符数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1112">When this method returns, the number of characters that were written in <paramref name="destination" />.</span></span></param>
        <param name="format"><span data-ttu-id="b4068-1113">一个包含字符的范围，这些字符表示定义可接受的 <paramref name="destination" /> 格式的标准或自定义格式字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-1113">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-1114">一个可选对象，提供有关 <paramref name="destination" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1114">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="b4068-1115">尝试将当前双精度实例的值的格式设置为提供的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b4068-1115">Tries to format the value of the current double instance into the provided span of characters.</span></span></summary>
        <returns><span data-ttu-id="b4068-1116">如果格式设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1116"><see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4068-1117">将数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1117">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="b4068-1118">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1118">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <remarks><span data-ttu-id="b4068-1119">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-1119">In .NET Core 3.0 and later, values that are too large to represent are rounded to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" /> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-1120">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1120">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span></remarks>
        <altmember cref="Overload:System.Double.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * double -&gt; bool" Usage="System.double.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Double" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-1121">包含要转换的数字的字符串表示形式的字符范围。</span><span class="sxs-lookup"><span data-stu-id="b4068-1121">A character span that contains the string representation of the number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="b4068-1122">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 参数中所包含的数值或符号等效的双精度浮点数；如果转换失败，则包含零。</span><span class="sxs-lookup"><span data-stu-id="b4068-1122">When this method returns, contains the double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="b4068-1123">如果 <paramref name="s" /> 参数为 <see langword="null" /> 或空，或其格式不符合 <paramref name="style" />，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1123">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or empty, or is not in a format compliant with <paramref name="style" />.</span></span> <span data-ttu-id="b4068-1124">如果 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举常量的有效组合，则转换也会失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1124">The conversion also fails if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants.</span></span> <span data-ttu-id="b4068-1125">如果 <paramref name="s" /> 是小于 <see cref="F:System.Double.MinValue" /> 的有效数字，则 <paramref name="result" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1125">If <paramref name="s" /> is a valid number less than <see cref="F:System.Double.MinValue" />, <paramref name="result" /> is <see cref="F:System.Double.NegativeInfinity" />.</span></span> <span data-ttu-id="b4068-1126">如果 <paramref name="s" /> 是大于 <see cref="F:System.Double.MaxValue" /> 的有效数字，则 <paramref name="result" /> 为 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1126">If <paramref name="s" /> is a valid number greater than <see cref="F:System.Double.MaxValue" />, <paramref name="result" /> is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="b4068-1127">此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</span><span class="sxs-lookup"><span data-stu-id="b4068-1127">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="b4068-1128">将指定样式和区域性特定格式的数字的范围表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1128">Converts the span representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="b4068-1129">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1129">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="b4068-1130">如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1130"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks><span data-ttu-id="b4068-1131">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-1131">In .NET Core 3.0 and later, values that are too large to represent are rounded to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" /> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-1132">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1132">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.String,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * double -&gt; bool" Usage="System.double.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Double" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-1133">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-1133">A string containing a number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="b4068-1134">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 参数等效的双精度浮点数；如果转换失败，则包含零。</span><span class="sxs-lookup"><span data-stu-id="b4068-1134">When this method returns, contains the double-precision floating-point number equivalent of the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="b4068-1135">如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，或不为有效格式的数字，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1135">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" /> or is not a number in a valid format.</span></span> <span data-ttu-id="b4068-1136">如果 <paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字，则转换在 .NET Framework 和 .NET Core 2.2 及更低版本上也会失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1136">It also fails on .NET Framework and .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span> <span data-ttu-id="b4068-1137">此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</span><span class="sxs-lookup"><span data-stu-id="b4068-1137">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="b4068-1138">将数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1138">Converts the string representation of a number to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="b4068-1139">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1139">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="b4068-1140">如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1140"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-1141">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-1141">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-1142">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1142">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

 <span data-ttu-id="b4068-1143">此重载与方法的不同之处在于， <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> 返回一个布尔值，该值指示分析操作是否成功，而不是返回已分析的数值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1143">This overload differs from the <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="b4068-1144">这样，便无需使用异常处理来测试无效的 <xref:System.FormatException> 事件， `s` 也不能成功分析。</span><span class="sxs-lookup"><span data-stu-id="b4068-1144">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="b4068-1145">`s`参数可以包含当前区域性的 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType> 、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> (字符串比较是否区分大小写) 或格式的字符串：</span><span class="sxs-lookup"><span data-stu-id="b4068-1145">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> (the string comparison is case-sensitive), or a string of the form:</span></span>  
  
 <span data-ttu-id="b4068-1146">ws表明[整数位数，] 整数位数 [. [小数位数]] [e [sign] 指数-数字] [ws]</span><span class="sxs-lookup"><span data-stu-id="b4068-1146">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="b4068-1147">括号中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b4068-1147">Elements in square brackets are optional.</span></span> <span data-ttu-id="b4068-1148">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b4068-1148">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b4068-1149">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-1149">Element</span></span>|<span data-ttu-id="b4068-1150">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-1150">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-1151">*ws*</span><span class="sxs-lookup"><span data-stu-id="b4068-1151">*ws*</span></span>|<span data-ttu-id="b4068-1152">一系列空白字符。</span><span class="sxs-lookup"><span data-stu-id="b4068-1152">A series of white-space characters.</span></span>|  
|<span data-ttu-id="b4068-1153">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-1153">*sign*</span></span>|<span data-ttu-id="b4068-1154">负号或正号符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1154">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="b4068-1155">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1155">*integral-digits*</span></span>|<span data-ttu-id="b4068-1156">一系列从0到9之间的数字字符，用于指定数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-1156">A series of numeric characters ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="b4068-1157">如果有小数位数，则可以不存在整数位数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1157">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="b4068-1158">*，*</span><span class="sxs-lookup"><span data-stu-id="b4068-1158">*,*</span></span>|<span data-ttu-id="b4068-1159">区域性特定的组分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1159">A culture-specific group separator symbol.</span></span>|  
|<span data-ttu-id="b4068-1160">*.*</span><span class="sxs-lookup"><span data-stu-id="b4068-1160">*.*</span></span>|<span data-ttu-id="b4068-1161">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1161">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="b4068-1162">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1162">*fractional-digits*</span></span>|<span data-ttu-id="b4068-1163">指定数字小数部分的一系列数字字符，范围为0到9。</span><span class="sxs-lookup"><span data-stu-id="b4068-1163">A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="b4068-1164">*E*</span><span class="sxs-lookup"><span data-stu-id="b4068-1164">*E*</span></span>|<span data-ttu-id="b4068-1165">大写或小写字符 "e"，指示指数 (科学) 表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-1165">An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="b4068-1166">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1166">*exponential-digits*</span></span>|<span data-ttu-id="b4068-1167">指定指数的一系列数字字符，范围为0到9。</span><span class="sxs-lookup"><span data-stu-id="b4068-1167">A series of numeric characters ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="b4068-1168">有关数字格式的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。</span><span class="sxs-lookup"><span data-stu-id="b4068-1168">For more information about numeric formats, see [Formatting Types](/dotnet/standard/base-types/formatting-types).</span></span>  
  
 <span data-ttu-id="b4068-1169">`s`参数通过使用和标志的组合来进行解释 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1169">The `s` parameter is interpreted by using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="b4068-1170">这意味着允许使用空格和千位分隔符，但不允许货币符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1170">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="b4068-1171">若要显式定义可在中存在的元素 (如货币符号、千位分隔符和空格) `s` ，请使用 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="b4068-1171">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="b4068-1172">`s`使用为 <xref:System.Globalization.NumberFormatInfo> 当前系统区域性初始化的对象中的格式设置信息分析参数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1172">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="b4068-1173">有关详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="b4068-1173">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-1174">若要使用某些其他指定的区域性的格式设置信息分析字符串，请使用 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="b4068-1174">To parse a string using the formatting information of some other specified culture, use the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="b4068-1175">通常，如果向方法传递 <xref:System.Double.TryParse%2A?displayProperty=nameWithType> 通过调用方法创建的字符串 <xref:System.Double.ToString%2A?displayProperty=nameWithType> ，则 <xref:System.Double> 返回原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1175">Ordinarily, if you pass the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="b4068-1176">但是，由于精度损失，值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-1176">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="b4068-1177">此外，尝试分析或的字符串表示形式不 <xref:System.Double.MinValue?displayProperty=nameWithType> <xref:System.Double.MaxValue?displayProperty=nameWithType> 会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-1177">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue?displayProperty=nameWithType> or <xref:System.Double.MaxValue?displayProperty=nameWithType> fails to round-trip.</span></span> <span data-ttu-id="b4068-1178">在 .NET Framework 和 .NET Core 2.2 及早期版本上，它会引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1178">On .NET Framework and .NET Core 2.2 and previous versions, it throws an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-1179">在 .NET Core 3.0 及更高版本中， <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 如果您尝试分析 <xref:System.Double.MinValue?displayProperty=nameWithtype> 或 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 您尝试进行分析，它将返回 <xref:System.Double.MaxValue?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1179">On .NET Core 3.0 and later versions, it returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MinValue?displayProperty=nameWithtype> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MaxValue?displayProperty=nameWithtype>.</span></span> <span data-ttu-id="b4068-1180">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-1180">The following example provides an illustration.</span></span> 
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse2.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse2.vb" id="Snippet3":::

<span data-ttu-id="b4068-1181">在 .NET Framework 和 .NET Core 2.2 及更早版本中，如果超出了 `s` <xref:System.Double> 数据类型的范围，则该 <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> 方法将引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1181">On .NET Framework and .NET Core 2.2 and earlier versions, if `s` is out of range of the <xref:System.Double> data type, the <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> method throws an <xref:System.OverflowException>.</span></span>

<span data-ttu-id="b4068-1182">在 .NET Core 3.0 及更高版本中，当 `s` 超出数据类型的范围时，不会引发异常 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1182">On .NET Core 3.0 and later versions, no exception is thrown when `s` is out of range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b4068-1183">在大多数情况下， <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> 方法计算或的结果 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1183">In most cases, the <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> method calculates a result of <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-1184">但是，有一小部分值被视为比的最大值或最小值更接近于 <xref:System.Double> 正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-1184">However, there is a small set of values that are considered to be closer to the maximum or minimum values of <xref:System.Double> than to positive or negative infinity.</span></span> <span data-ttu-id="b4068-1185">在这些情况下，方法将计算或的 <xref:System.Double.MaxValue?displayProperty=nameWithType> 结果 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1185">In those cases, the method calculates a result of <xref:System.Double.MaxValue?displayProperty=nameWithType> or <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="b4068-1186">如果在 `s` 分析操作期间在参数中遇到分隔符，并且小数点和组分隔符相同，则分析操作将假定分隔符是小数点分隔符，而不是组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-1186">If a separator is encountered in the `s` parameter during a parse operation, and the decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="b4068-1187">有关分隔符的详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 、、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 和 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1187">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
## Examples  
 <span data-ttu-id="b4068-1188">下面的示例使用 <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> 方法将数值的字符串表示形式转换为 <xref:System.Double> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1188">The following example uses the <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> method to convert the string representations of numeric values to <xref:System.Double> values.</span></span> <span data-ttu-id="b4068-1189">它假定 en-us 为当前区域性。</span><span class="sxs-lookup"><span data-stu-id="b4068-1189">It assumes that en-US is the current culture.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse1a.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse1a.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="M:System.Double.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-numeric"><span data-ttu-id="b4068-1190">分析 .NET 中的数字字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-1190">Parsing Numeric Strings in .NET</span></span></related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/"><span data-ttu-id="b4068-1191">示例： .NET Core WinForms 格式设置实用工具 (c # ) </span><span class="sxs-lookup"><span data-stu-id="b4068-1191">Sample: .NET Core WinForms Formatting Utility (C#)</span></span></related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/"><span data-ttu-id="b4068-1192">示例： .NET Core WinForms 格式设置实用工具 (Visual Basic) </span><span class="sxs-lookup"><span data-stu-id="b4068-1192">Sample: .NET Core WinForms Formatting Utility (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider? provider, out double result);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * double -&gt; bool" Usage="System.double.TryParse (s, style, provider, result)" />
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.Double" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-1193">包含要转换的数字的只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="b4068-1193">A read-only character span that contains the number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b4068-1194"><see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 的允许格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1194">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />.</span></span> <span data-ttu-id="b4068-1195">一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-1195">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-1196">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1196">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <param name="result"><span data-ttu-id="b4068-1197">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数值或符号等效的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1197">When this method returns and if the conversion succeeded, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" />.</span></span> <span data-ttu-id="b4068-1198">如果转换失败，则包含零。</span><span class="sxs-lookup"><span data-stu-id="b4068-1198">Contains zero if the conversion failed.</span></span> <span data-ttu-id="b4068-1199">如果 <paramref name="s" /> 参数为 <see langword="null" />、空字符范围、格式不符合 <paramref name="style" /> 的数字，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1199">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, an empty character span, or not a number in a format compliant with <paramref name="style" />.</span></span> <span data-ttu-id="b4068-1200">如果 <paramref name="s" /> 是小于 <see cref="F:System.Double.MinValue" /> 的有效数字，则 <paramref name="result" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1200">If <paramref name="s" /> is a valid number less than <see cref="F:System.Double.MinValue" />, <paramref name="result" /> is <see cref="F:System.Double.NegativeInfinity" />.</span></span> <span data-ttu-id="b4068-1201">如果 <paramref name="s" /> 是大于 <see cref="F:System.Double.MaxValue" /> 的有效数字，则 <paramref name="result" /> 为 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1201">If <paramref name="s" /> is a valid number greater than <see cref="F:System.Double.MaxValue" />, <paramref name="result" /> is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="b4068-1202">此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</span><span class="sxs-lookup"><span data-stu-id="b4068-1202">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="b4068-1203">将字符范围（其中包含指定样式和区域性特定格式的数字的字符串表示形式）转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1203">Converts a character span containing the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="b4068-1204">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1204">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="b4068-1205">如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1205"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks><span data-ttu-id="b4068-1206">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-1206">In .NET Core 3.0 and later, values that are too large to represent are rounded to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" /> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-1207">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1207">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * double -&gt; bool" Usage="System.double.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="b4068-1208">包含要转换的数字的字符串。</span><span class="sxs-lookup"><span data-stu-id="b4068-1208">A string containing a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="b4068-1209"><see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 的允许格式。</span><span class="sxs-lookup"><span data-stu-id="b4068-1209">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />.</span></span> <span data-ttu-id="b4068-1210">一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="b4068-1210">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="b4068-1211">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1211">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <param name="result"><span data-ttu-id="b4068-1212">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数值或符号等效的双精度浮点数；如果转换失败，则包含零。</span><span class="sxs-lookup"><span data-stu-id="b4068-1212">When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="b4068-1213">如果 <paramref name="s" /> 参数为 <see langword="null" />、<see cref="F:System.String.Empty" />，或格式不符合 <paramref name="style" />，或 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举常量的有效组合，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1213">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" /> or is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants.</span></span> <span data-ttu-id="b4068-1214">如果 <paramref name="s" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字，则转换在 .NET Framework 或 .NET Core 2.2 及更低版本上也会失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1214">It also fails on .NET Framework or .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span> <span data-ttu-id="b4068-1215">此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</span><span class="sxs-lookup"><span data-stu-id="b4068-1215">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="b4068-1216">将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1216">Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</span></span> <span data-ttu-id="b4068-1217">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1217">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="b4068-1218">如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b4068-1218"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4068-1219">在 .NET Core 3.0 及更高版本中，太大而无法表示的值将舍入到， <xref:System.Double.PositiveInfinity> 或 <xref:System.Double.NegativeInfinity> 根据 IEEE 754 规范的要求进行舍入。</span><span class="sxs-lookup"><span data-stu-id="b4068-1219">In .NET Core 3.0 and later, values that are too large to represent are rounded to <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity> as required by the IEEE 754 specification.</span></span> <span data-ttu-id="b4068-1220">在以前的版本中（包括 .NET Framework），分析过大而无法表示的值导致失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1220">In prior versions, including .NET Framework, parsing a value that was too large to represent resulted in failure.</span></span>

 <span data-ttu-id="b4068-1221"><xref:System.Double.TryParse%2A>方法与 <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 方法类似，不同的是，如果转换失败，则此方法不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="b4068-1221">The <xref:System.Double.TryParse%2A> method is like the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except this method does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="b4068-1222">如果转换成功，则返回值为 `true` ，而 `result` 参数设置为转换的结果。</span><span class="sxs-lookup"><span data-stu-id="b4068-1222">If the conversion succeeds, the return value is `true` and the `result` parameter is set to the outcome of the conversion.</span></span> <span data-ttu-id="b4068-1223">如果转换失败，则返回值为 `false` ，而 `result` 参数设置为零。</span><span class="sxs-lookup"><span data-stu-id="b4068-1223">If the conversion fails, the return value is `false` and the `result` parameter is set to zero.</span></span> <span data-ttu-id="b4068-1224">这样就无需使用异常处理来测试 <xref:System.FormatException> 无效事件中的 `s` ，并且无法成功分析该事件。</span><span class="sxs-lookup"><span data-stu-id="b4068-1224">This eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="b4068-1225">`style`参数定义允许的参数的格式，以便 `s` 分析操作成功。</span><span class="sxs-lookup"><span data-stu-id="b4068-1225">The `style` parameter defines the allowable format of the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="b4068-1226">它必须是枚举中的位标志的组合 <xref:System.Globalization.NumberStyles> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1226">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="b4068-1227"><xref:System.Globalization.NumberStyles>不支持以下成员：</span><span class="sxs-lookup"><span data-stu-id="b4068-1227">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 <span data-ttu-id="b4068-1228">`s`参数可以包含 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 由指示的区域性、或 `provider` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1228">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture indicated by `provider`.</span></span> <span data-ttu-id="b4068-1229">此外，根据的值 `style` ， `s` 参数可能包括以下元素：</span><span class="sxs-lookup"><span data-stu-id="b4068-1229">In addition, depending on the value of `style`, the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="b4068-1230">ws[$]表明[整数位数，] 整数位数 [. 小数] [e [sign] 指数-数字] [ws]</span><span class="sxs-lookup"><span data-stu-id="b4068-1230">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="b4068-1231">方括号 ([ and ]) 中的元素是可选的。</span><span class="sxs-lookup"><span data-stu-id="b4068-1231">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="b4068-1232">下表对每个元素进行了描述。</span><span class="sxs-lookup"><span data-stu-id="b4068-1232">The following table describes each element.</span></span>  
  
|<span data-ttu-id="b4068-1233">元素</span><span class="sxs-lookup"><span data-stu-id="b4068-1233">Element</span></span>|<span data-ttu-id="b4068-1234">描述</span><span class="sxs-lookup"><span data-stu-id="b4068-1234">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="b4068-1235">*ws*</span><span class="sxs-lookup"><span data-stu-id="b4068-1235">*ws*</span></span>|<span data-ttu-id="b4068-1236">可选空白。</span><span class="sxs-lookup"><span data-stu-id="b4068-1236">Optional white space.</span></span> <span data-ttu-id="b4068-1237">`s`如果包含标志，则空格可以出现在开头 `style` <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1237">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b4068-1238">`s`如果包含标志，则它可以出现在的结尾 `style` <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1238">It can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="b4068-1239">区域性特定的货币符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1239">A culture-specific currency symbol.</span></span> <span data-ttu-id="b4068-1240">其在字符串中的位置由 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo> 参数方法返回的对象的或属性定义 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> `provider` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1240">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> or <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method of the `provider` parameter.</span></span> <span data-ttu-id="b4068-1241">`s`如果包含标志，则货币符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1241">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-1242">*sign*</span><span class="sxs-lookup"><span data-stu-id="b4068-1242">*sign*</span></span>|<span data-ttu-id="b4068-1243">一个可选的符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1243">An optional sign.</span></span> <span data-ttu-id="b4068-1244">如果包含标志，则符号可以出现在的开头 `s` `style` <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> ，如果包含标志，则它可以出现在的末尾 `s` `style` <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1244">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="b4068-1245">如果包含标志，则可以在中使用括号 `s` 来表示负值 `style` <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1245">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-1246">*整数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1246">*integral-digits*</span></span>|<span data-ttu-id="b4068-1247">一系列从0到9之间的数字，用于指定数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-1247">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="b4068-1248">如果有小数位数，则可以不存在整数位数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1248">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="b4068-1249">*，*</span><span class="sxs-lookup"><span data-stu-id="b4068-1249">*,*</span></span>|<span data-ttu-id="b4068-1250">区域性特定的千位分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-1250">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="b4068-1251">`s`如果包含标志，则当前区域性的千位分隔符符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1251">The current culture's thousands separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-1252">*.*</span><span class="sxs-lookup"><span data-stu-id="b4068-1252">*.*</span></span>|<span data-ttu-id="b4068-1253">区域性特定的小数点符号。</span><span class="sxs-lookup"><span data-stu-id="b4068-1253">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="b4068-1254">`s`如果包含标志，则当前区域性的小数点符号可以出现在中 `style` <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1254">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-1255">*小数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1255">*fractional-digits*</span></span>|<span data-ttu-id="b4068-1256">一系列从0到9之间的数字，用于指定数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="b4068-1256">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="b4068-1257">`s`如果 `style` 包含标志，则小数位数可以出现在中 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1257">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-1258">*e*</span><span class="sxs-lookup"><span data-stu-id="b4068-1258">*e*</span></span>|<span data-ttu-id="b4068-1259">E 或 E 字符，指示 `s` 可以使用指数表示法表示数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1259">The e or E character, which indicates that `s` can represent a number using exponential notation.</span></span> <span data-ttu-id="b4068-1260">`s`如果 style 包含标志，则参数可以表示指数表示法中的数字 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1260">The `s` parameter can represent a number in exponential notation if style includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="b4068-1261">*指数位数*</span><span class="sxs-lookup"><span data-stu-id="b4068-1261">*exponential-digits*</span></span>|<span data-ttu-id="b4068-1262">一系列从0到9之间的数字，用于指定指数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1262">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="b4068-1263">`s`无论参数的值如何，分析操作都将忽略中任何终止的 NUL (U + 0000) 字符 `style` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1263">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="b4068-1264">只包含数字的字符串 (与 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 样式) 始终在类型范围内分析成功 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1264">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Double> type.</span></span> <span data-ttu-id="b4068-1265">其余 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 成员控件元素，这些元素可能但不要求出现在输入字符串中。</span><span class="sxs-lookup"><span data-stu-id="b4068-1265">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be but are not required to be present in the input string.</span></span> <span data-ttu-id="b4068-1266">下表指示各个标志如何 <xref:System.Globalization.NumberStyles> 影响可能出现在中的元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1266">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="b4068-1267">NumberStyles 值</span><span class="sxs-lookup"><span data-stu-id="b4068-1267">NumberStyles value</span></span>|<span data-ttu-id="b4068-1268">除数字外允许在 s 中使用的元素</span><span class="sxs-lookup"><span data-stu-id="b4068-1268">Elements permitted in s in addition to digits</span></span>|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="b4068-1269">仅限 *整数数字* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-1269">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="b4068-1270">*.*</span><span class="sxs-lookup"><span data-stu-id="b4068-1270">The *.*</span></span> <span data-ttu-id="b4068-1271">和 *小数位数* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-1271">and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="b4068-1272">`s`参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-1272">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="b4068-1273">此标志本身支持采用 *整数位数*E*指数数字*形式的值;若要成功地将指数表示法中的字符串解析为正或负号和小数点符号，则需要其他标志。</span><span class="sxs-lookup"><span data-stu-id="b4068-1273">This flag by itself supports values in the form *integral-digits*E*exponential-digits*; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="b4068-1274">开头的 *ws* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1274">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="b4068-1275">末尾处的 *ws* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1275">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="b4068-1276">开头的 *sign* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1276">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="b4068-1277">末尾的 *sign* 元素 `s` 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1277">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="b4068-1278">用括号括起数值的 *符号* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-1278">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="b4068-1279">*，* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-1279">The *,* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="b4068-1280">*$* 元素。</span><span class="sxs-lookup"><span data-stu-id="b4068-1280">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="b4068-1281">全部。</span><span class="sxs-lookup"><span data-stu-id="b4068-1281">All.</span></span> <span data-ttu-id="b4068-1282">`s`参数不能表示十六进制数或以指数表示法表示的数字。</span><span class="sxs-lookup"><span data-stu-id="b4068-1282">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="b4068-1283">在开头或结尾处的 *ws* 元素，在 `s` 的开头处进行 *签名* `s` *。*</span><span class="sxs-lookup"><span data-stu-id="b4068-1283">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the *.*</span></span> <span data-ttu-id="b4068-1284">符号开头。</span><span class="sxs-lookup"><span data-stu-id="b4068-1284">symbol.</span></span> <span data-ttu-id="b4068-1285">`s`参数还可以使用指数表示法。</span><span class="sxs-lookup"><span data-stu-id="b4068-1285">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="b4068-1286">`ws`、 `sign` 、千位分隔符 (\*、) \*和小数点 () 元素 *.* 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1286">The `ws`, `sign`, thousands separator (*,),* and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="b4068-1287">除之外的所有样式都 `s` 不能表示十六进制数。</span><span class="sxs-lookup"><span data-stu-id="b4068-1287">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="b4068-1288">`provider`参数是一个 <xref:System.IFormatProvider> 实现，如 <xref:System.Globalization.NumberFormatInfo> 或 <xref:System.Globalization.CultureInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="b4068-1288">The `provider` parameter is a <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="b4068-1289">`provider`参数提供用于分析的特定于区域性的信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1289">The `provider` parameter supplies culture-specific information used in parsing.</span></span> <span data-ttu-id="b4068-1290">如果 `provider` 为 `null` 或 <xref:System.Globalization.NumberFormatInfo> 无法获取对象，则使用当前区域性的格式信息。</span><span class="sxs-lookup"><span data-stu-id="b4068-1290">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained, the format information for the current culture is used.</span></span>  
  
 <span data-ttu-id="b4068-1291">如果 `s` 参数是数值，或者参数不是一个 `null` `provider` <xref:System.Globalization.NumberFormatInfo> 对象，或者该参数不是 `style` 枚举中的位标志的组合， <xref:System.Globalization.NumberStyles> 则转换失败。</span><span class="sxs-lookup"><span data-stu-id="b4068-1291">The conversion fails if the `s` parameter is `null` or not a numeric value, the `provider` parameter does not yield a <xref:System.Globalization.NumberFormatInfo> object, or the `style` parameter is not a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span>  
  
 <span data-ttu-id="b4068-1292">通常，如果向方法传递 <xref:System.Double.TryParse%2A?displayProperty=nameWithType> 通过调用方法创建的字符串 <xref:System.Double.ToString%2A?displayProperty=nameWithType> ，则 <xref:System.Double> 返回原始值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1292">Ordinarily, if you pass the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Double> value is returned.</span></span> <span data-ttu-id="b4068-1293">但是，由于精度损失，值可能不相等。</span><span class="sxs-lookup"><span data-stu-id="b4068-1293">However, because of a loss of precision, the values may not be equal.</span></span> <span data-ttu-id="b4068-1294">此外，尝试分析或的字符串表示形式不 <xref:System.Double.MinValue?displayProperty=nameWithType> <xref:System.Double.MaxValue?displayProperty=nameWithType> 会往返。</span><span class="sxs-lookup"><span data-stu-id="b4068-1294">In addition, attempting to parse the string representation of either <xref:System.Double.MinValue?displayProperty=nameWithType> or <xref:System.Double.MaxValue?displayProperty=nameWithType> fails to round-trip.</span></span> <span data-ttu-id="b4068-1295">在 .NET Framework 和 .NET Core 2.2 及早期版本上，它会引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1295">On .NET Framework and .NET Core 2.2 and previous versions, it throws an <xref:System.OverflowException>.</span></span> <span data-ttu-id="b4068-1296">在 .NET Core 3.0 及更高版本中， <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 如果您尝试分析 <xref:System.Double.MinValue?displayProperty=nameWithtype> 或 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 您尝试进行分析，它将返回 <xref:System.Double.MaxValue?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1296">On .NET Core 3.0 and later versions, it returns <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MinValue?displayProperty=nameWithtype> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> if you attempt to parse <xref:System.Double.MaxValue?displayProperty=nameWithtype>.</span></span> <span data-ttu-id="b4068-1297">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="b4068-1297">The following example provides an illustration.</span></span>
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse2.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse2.vb" id="Snippet3":::

<span data-ttu-id="b4068-1298">在 .NET Framework 和 .NET Core 2.2 及更早版本中，如果超出了 `s` <xref:System.Double> 数据类型的范围，则该 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 方法将引发 <xref:System.OverflowException> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1298">On .NET Framework and .NET Core 2.2 and earlier versions, if `s` is out of range of the <xref:System.Double> data type, the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method throws an <xref:System.OverflowException>.</span></span>

<span data-ttu-id="b4068-1299">在 .NET Core 3.0 及更高版本中，当 `s` 超出数据类型的范围时，不会引发异常 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1299">On .NET Core 3.0 and later versions, no exception is thrown when `s` is out of range of the <xref:System.Double> data type.</span></span> <span data-ttu-id="b4068-1300">在大多数情况下， <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 方法计算或的结果 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1300">In most cases, the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method calculates a result of <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b4068-1301">但是，有一小部分值被视为比的最大值或最小值更接近于 <xref:System.Double> 正无穷或负无穷。</span><span class="sxs-lookup"><span data-stu-id="b4068-1301">However, there is a small set of values that are considered to be closer to the maximum or minimum values of <xref:System.Double> than to positive or negative infinity.</span></span> <span data-ttu-id="b4068-1302">在这些情况下，方法将计算或的 <xref:System.Double.MaxValue?displayProperty=nameWithType> 结果 <xref:System.Double.MinValue?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1302">In those cases, the method calculates a result of <xref:System.Double.MaxValue?displayProperty=nameWithType> or <xref:System.Double.MinValue?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="b4068-1303">如果在分析操作过程中在参数中遇到分隔符 `s` ，并且适用的货币或小数分隔符和组分隔符相同，则分析操作将假定分隔符是小数点分隔符，而不是组分隔符。</span><span class="sxs-lookup"><span data-stu-id="b4068-1303">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="b4068-1304">有关分隔符的详细信息，请参阅 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 、、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 和 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b4068-1304">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>   
  
## Examples  
 <span data-ttu-id="b4068-1305">下面的示例演示如何使用 <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> 方法来分析具有特定样式的数字的字符串表示形式，并使用特定区域性的约定进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="b4068-1305">The following example demonstrates the use of the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/TryParse1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/TryParse1.vb" id="Snippet2":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4068-1306"><paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1306"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="b4068-1307">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b4068-1307">-or-</span></span> 
 <span data-ttu-id="b4068-1308"><paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</span><span class="sxs-lookup"><span data-stu-id="b4068-1308"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Double.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-numeric"><span data-ttu-id="b4068-1309">分析 .NET 中的数字字符串</span><span class="sxs-lookup"><span data-stu-id="b4068-1309">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
