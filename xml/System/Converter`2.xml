<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="164461ff8bbe5c1e6dae918de5e4d20cfdd87e70" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89828456" /></Metadata><TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;TInput,TOutput&gt;(TInput input);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;TInput, TOutput&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of TInput, TOutput)(input As TInput) As TOutput " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">要转换的对象的类型。</typeparam>
    <typeparam name="TOutput">要将输入对象转换到的类型。</typeparam>
    <param name="input">要转换的对象。</param>
    <summary>表示将对象从一种类型转换为另一种类型的方法。</summary>
    <returns><typeparamref name="TOutput" />，它表示已转换的 <typeparamref name="TInput" />。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该类的 <xref:System.Array.ConvertAll%2A> 方法和类的方法使用此委托 <xref:System.Array> <xref:System.Collections.Generic.List`1.ConvertAll*> <xref:System.Collections.Generic.List%601> 将集合的每个元素从一种类型转换为另一种类型。  
  
   
  
## Examples  
 本部分包含两个代码示例。 第一个示例演示了 <xref:System.Converter%602> 委托，其中包含 <xref:System.Array.ConvertAll%2A> 类的方法 <xref:System.Array> ，第二个示例演示了具有 <xref:System.Collections.Generic.List`1.ConvertAll*> 泛型类的方法的委托 <xref:System.Collections.Generic.List%601> 。  
  
 示例 1  
  
 下面的代码示例定义了一个名为 `PointFToPoint` 的方法，该方法将 <xref:System.Drawing.PointF> 结构转换为 <xref:System.Drawing.Point> 结构。 然后，该示例创建一个 <xref:System.Drawing.PointF> 结构数组， `Converter<PointF, Point>` `Converter(Of PointF, Point)` 在 Visual Basic) 中创建委托 (来表示 `PointFToPoint` 方法，并将委托传递给 <xref:System.Array.ConvertAll%2A> 方法。 <xref:System.Array.ConvertAll%2A>方法将输入列表的每个元素传递给 `PointFToPoint` 方法，并将转换后的元素放入新的 <xref:System.Drawing.Point> 结构列表。 将显示这两个列表。  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 示例 2  
  
 下面的代码示例定义了一个名为 `PointFToPoint` 的方法，该方法将 <xref:System.Drawing.PointF> 结构转换为 <xref:System.Drawing.Point> 结构。 然后，该示例创建了一个 <xref:System.Collections.Generic.List%601> <xref:System.Drawing.PointF> 结构， `Converter\<PointF, Point>` `Converter(Of PointF, Point)` 在 Visual Basic) 中创建委托 (来表示 `PointFToPoint` 方法，并将委托传递给 <xref:System.Collections.Generic.List`1.ConvertAll*> 方法。 <xref:System.Collections.Generic.List`1.ConvertAll*>方法将输入列表的每个元素传递给 `PointFToPoint` 方法，并将转换后的元素放入新的 <xref:System.Drawing.Point> 结构列表。 将显示这两个列表。  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
