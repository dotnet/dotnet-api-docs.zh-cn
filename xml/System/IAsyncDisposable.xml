<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e6c2a553c8b3265d3f4ff6b1e0119560cbdef974" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89838558" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Bcl.AsyncInterfaces" FromVersion="1.0.0.0" To="netstandard" ToVersion="2.1.0.0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8cfe8-101">提供一种用于异步释放非托管资源的机制。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="8cfe8-102">在 .NET 中，拥有非托管资源的类通常实现 <xref:System.IDisposable> 接口，以提供一种同步释放非托管资源的机制。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="8cfe8-103">但是，在某些情况下，需要提供一种异步机制来释放非托管资源，而不是 (或) 同步。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="8cfe8-104">提供此类机制使使用者能够在不会长时间地阻止 GUI 应用程序的主线程的情况下执行占用大量资源的释放操作。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="8cfe8-105"><xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType>此接口的方法返回一个 <xref:System.Threading.Tasks.ValueTask> 表示异步释放操作的。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="8cfe8-106">拥有非托管资源的类实现此方法，当不再需要对象时，这些类的使用者对该对象调用此方法。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="8cfe8-107">异步方法与 `async` `await` c # 和 Visual Basic 中的和关键字结合使用。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="8cfe8-108">有关 insformation 的详细信息，请参阅 [采用 c # 的异步编程模型](/dotnet/csharp/programming-guide/concepts/async/index) 或 [采用 Async 和 Await 的异步编程模型 (Visual Basic) ](/dotnet/visual-basic/programming-guide/concepts/async/)。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="8cfe8-109">使用实现 IAsyncDisposable 的对象</span><span class="sxs-lookup"><span data-stu-id="8cfe8-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="8cfe8-110">如果你的应用程序使用实现的对象 `IAsyncDisposable` ，则应在使用完对象后调用该对象的 <xref:System.IAsyncDisposable.DisposeAsync%2A> 实现。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="8cfe8-111">若要确保在发生异常的情况下释放资源，请将使用对象的代码放 `IAsyncDisposable` 入 c # 中的[using](/dotnet/csharp/language-reference/keywords/using)语句 (从版本8.0 开始) 或者在 <xref:System.IAsyncDisposable.DisposeAsync%2A> `finally` 语句的子句内调用方法 `try` / `finally` 。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-111">To make sure resources are released even in case of an exception, put the code that uses the `IAsyncDisposable` object into the [using](/dotnet/csharp/language-reference/keywords/using) statement (in C# beginning from version 8.0) or call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="8cfe8-112">有关模式的详细信息 `try` / `finally` ，请参阅[try-finally](/dotnet/csharp/language-reference/keywords/try-finally) (c # ) 或[try .。。Catch .。。Finally 语句](/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement) (Visual Basic) 。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-112">For more information about the `try`/`finally` pattern, see [try-finally](/dotnet/csharp/language-reference/keywords/try-finally) (C#) or [Try...Catch...Finally Statement](/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="8cfe8-113">实现 IAsyncDisposable</span><span class="sxs-lookup"><span data-stu-id="8cfe8-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="8cfe8-114">您可以 `IAsyncDisposable` 在以下情况下实现：</span><span class="sxs-lookup"><span data-stu-id="8cfe8-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="8cfe8-115">开发拥有非托管资源的异步枚举器时。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="8cfe8-116">异步枚举器与 c # 8.0 异步流功能一起使用。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="8cfe8-117">有关异步流的详细信息，请参阅 [教程：使用 c # 8.0 和 .Net Core 3.0 生成和使用异步流](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="8cfe8-118">如果你的类拥有非托管资源并释放它们，则需要进行大量资源的 i/o 操作，例如将中间缓冲区的内容刷新到文件中，或通过网络发送数据包来关闭连接。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="8cfe8-119">使用 <xref:System.IAsyncDisposable.DisposeAsync%2A> 方法可以在使用非托管资源（例如释放、释放或重置非托管资源）后执行任何所需的清理。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="8cfe8-120">有关详细信息，请参阅 [实现 DisposeAsync 方法](/dotnet/standard/garbage-collection/implementing-disposeasync)。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-120">For more information, see [Implement a DisposeAsync method](/dotnet/standard/garbage-collection/implementing-disposeasync).</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8cfe8-121">以异步方式执行与释放或重置非托管资源相关的应用程序定义的任务。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="8cfe8-122">一个表示异步释放操作的任务。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="8cfe8-123">使用此方法异步关闭或释放由实现该接口的类的实例所持有的非托管资源，如文件、流和句柄。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="8cfe8-124">使用此方法（而不是 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> ），可以在不阻止 GUI 应用程序的主线程的情况下执行占用大量资源的释放操作。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="8cfe8-125">如果使用的是实现接口的类 <xref:System.IAsyncDisposable> ，则应 `DisposeAsync` 在使用完类后调用其实现。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="8cfe8-126">有关详细信息，请参阅主题中的 "使用实现 IAsyncDisposable 的对象" 一节 <xref:System.IAsyncDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="8cfe8-127">实现此方法时，请确保通过包含层次结构传播调用来释放所有保存的资源。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="8cfe8-128">例如，如果对象 A 分配一个对象 B，并且对象 B 分配一个对象 C，则的 `DisposeAsync` 实现必须在 `DisposeAsync` B 上调用，后者必须在 `DisposeAsync` C 上调用。如果基类实现，则对象还必须调用 `DisposeAsync` 其基类的方法 <xref:System.IAsyncDisposable> 。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="8cfe8-129">如果多次调用某个对象的 `DisposeAsync` 方法，则该对象必须忽略第一个调用之后的所有调用，并以同步方式返回已成功完成的所有调用 <xref:System.Threading.Tasks.ValueTask> 。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="8cfe8-130">如果对象的 `DisposeAsync` 方法被多次调用，则该对象不得引发异常。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="8cfe8-131">除外的实例方法 `DisposeAsync` 可以 <xref:System.ObjectDisposedException> 在已释放资源时引发。</span><span class="sxs-lookup"><span data-stu-id="8cfe8-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
