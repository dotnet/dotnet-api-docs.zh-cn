<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9b901dbca2486c22d10754f881c3b3f3531999ee" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94470680" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; 'Result" />
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;T1,T2,T3,TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;T1, T2, T3, TResult&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of T1, T2, T3, TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " FrameworkAlternate="netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="11bad-101">此委托封装的方法的第一个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="11bad-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="11bad-102">此委托封装的方法的第二个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="11bad-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="11bad-103">此委托封装的方法的第三个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="11bad-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="11bad-104">此委托封装的方法的返回值类型。</span><span class="sxs-lookup"><span data-stu-id="11bad-104">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="11bad-105">此委托封装的方法的第一个参数。</span><span class="sxs-lookup"><span data-stu-id="11bad-105">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="11bad-106">此委托封装的方法的第二个参数。</span><span class="sxs-lookup"><span data-stu-id="11bad-106">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="11bad-107">此委托封装的方法的第三个参数。</span><span class="sxs-lookup"><span data-stu-id="11bad-107">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="11bad-108">封装一个方法，该方法具有三个参数，且返回由 <typeparamref name="TResult" /> 参数指定的类型的值。</span><span class="sxs-lookup"><span data-stu-id="11bad-108">Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="11bad-109">此委托封装的方法的返回值。</span><span class="sxs-lookup"><span data-stu-id="11bad-109">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11bad-110">您可以使用此委托来表示一个方法，该方法可作为参数传递，而无需显式声明自定义委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-110">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="11bad-111">封装的方法必须对应于由此委托定义的方法签名。</span><span class="sxs-lookup"><span data-stu-id="11bad-111">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="11bad-112">这意味着，封装的方法必须具有三个参数，每个参数都按值传递到该方法，并且必须返回一个值。</span><span class="sxs-lookup"><span data-stu-id="11bad-112">This means that the encapsulated method must have three parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11bad-113">若要引用具有三个参数并返回 `void` (或在 Visual Basic 中（声明为 `Sub` 而不是) ）的方法 `Function` ，请改用泛型 <xref:System.Action%603> 委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-113">To reference a method that has three parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%603> delegate instead.</span></span>  
  
 <span data-ttu-id="11bad-114">使用 <xref:System.Func%604> 委托时，无需显式定义使用三个参数封装方法的委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-114">When you use the <xref:System.Func%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="11bad-115">例如，下面的代码显式声明一个名为的泛型委托 `ParseNumber` ，并向 <xref:System.Int32.Parse%2A> 其委托实例分配对该方法的引用。</span><span class="sxs-lookup"><span data-stu-id="11bad-115">For example, the following code explicitly declares a generic delegate named `ParseNumber` and assigns a reference to the <xref:System.Int32.Parse%2A> method to its delegate instance.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb" id="Snippet1":::  
  
 <span data-ttu-id="11bad-116">下面的示例通过实例化委托来简化此代码 <xref:System.Func%604> ，而不是显式定义一个新委托并为其分配一个命名方法。</span><span class="sxs-lookup"><span data-stu-id="11bad-116">The following example simplifies this code by instantiating the <xref:System.Func%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb" id="Snippet2":::  
  
 <span data-ttu-id="11bad-117">可以 <xref:System.Func%604> 在 c # 中将委托与匿名方法一起使用，如下例所示。</span><span class="sxs-lookup"><span data-stu-id="11bad-117">You can use the <xref:System.Func%604> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="11bad-118"> (匿名方法的介绍，请参阅 [匿名方法](/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods)。 ) </span><span class="sxs-lookup"><span data-stu-id="11bad-118">(For an introduction to anonymous methods, see [Anonymous Methods](/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods).)</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs" interactive="try-dotnet" id="Snippet3":::
  
 <span data-ttu-id="11bad-119">你还可以将 lambda 表达式分配给 <xref:System.Func%604> 委托，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="11bad-119">You can also assign a lambda expression to a <xref:System.Func%604> delegate, as the following example illustrates.</span></span> <span data-ttu-id="11bad-120">有关 lambda 表达式介绍的 (，请参阅 [Lambda 表达式](/dotnet/visual-basic/programming-guide/language-features/procedures/lambda-expressions) 和 [lambda 表达式](/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions)。 ) </span><span class="sxs-lookup"><span data-stu-id="11bad-120">(For an introduction to lambda expressions, see [Lambda Expressions](/dotnet/visual-basic/programming-guide/language-features/procedures/lambda-expressions) and [Lambda Expressions](/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions).)</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb" id="Snippet4":::
  
 <span data-ttu-id="11bad-121">Lambda 表达式的基础类型是一个泛型 `Func` 委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-121">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="11bad-122">这样，便可以将 lambda 表达式作为参数传递，而无需将其显式分配给委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-122">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="11bad-123">具体而言，因为命名空间中的许多类型的方法 <xref:System.Linq> 都有 `Func` 参数，所以可以将这些方法传递给 lambda 表达式，而无需显式实例化 `Func` 委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-123">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11bad-124">下面的示例演示如何声明和使用 <xref:System.Func%603> 委托。</span><span class="sxs-lookup"><span data-stu-id="11bad-124">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="11bad-125">此示例声明一个 <xref:System.Func%603> 变量，并为其分配一个 lambda 表达式，该表达式采用 <xref:System.String> 值并将 <xref:System.Int32> 值作为参数。</span><span class="sxs-lookup"><span data-stu-id="11bad-125">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="11bad-126">`true`如果参数的长度等于参数的值，则 lambda 表达式将返回 <xref:System.String> <xref:System.Int32> 。</span><span class="sxs-lookup"><span data-stu-id="11bad-126">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="11bad-127">随后在查询中使用封装此方法的委托来筛选字符串数组中的字符串。</span><span class="sxs-lookup"><span data-stu-id="11bad-127">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb" id="Snippet5":::
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions"><span data-ttu-id="11bad-128">Lambda 表达式（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="11bad-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/procedures/lambda-expressions"><span data-ttu-id="11bad-129">Lambda 表达式</span><span class="sxs-lookup"><span data-stu-id="11bad-129">Lambda Expressions</span></span></related>
    <related type="Article" href="/dotnet/csharp/programming-guide/delegates/"><span data-ttu-id="11bad-130">委托（C# 编程指南）</span><span class="sxs-lookup"><span data-stu-id="11bad-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/delegates/"><span data-ttu-id="11bad-131">Visual Basic 中的委托</span><span class="sxs-lookup"><span data-stu-id="11bad-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>
