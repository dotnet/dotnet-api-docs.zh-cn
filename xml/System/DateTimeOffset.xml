<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad01ee1d6984cc483a81c0a51cfe35682b13c25d" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83528820" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IEquatable(Of DateTimeOffset), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface IDeserializationCallback&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset> 结构包含一个 <xref:System.DateTime> 值和一个 <xref:System.DateTimeOffset.Offset%2A> 属性，该属性定义当前 <xref:System.DateTimeOffset> 实例的日期和时间与协调世界时（UTC）之间的差异。 由于它精确地定义日期和时间与 UTC 相关，因此 <xref:System.DateTimeOffset> 结构不包括 `Kind` 成员，如 <xref:System.DateTime> 结构所示。 它表示日期和时间，其 UTC 范围为12:00:00 午夜，0001年1月1日午夜，到 11:59:59 P.M，年12月31日，9999公元 （公历）。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.DateTimeOffset> 值的时间部分以100毫微秒为单位进行度量，其中，特定日期为自公元0001年1月1日午夜12:00 午夜后的计时周期数。 公元在 <xref:System.Globalization.GregorianCalendar> 日历中。 <xref:System.DateTimeOffset> 值始终在显式或默认日历的上下文中表示。 对于闰秒而言，计时周期的总刻度不包括在内。  
  
 尽管 <xref:System.DateTimeOffset> 值包含偏移量，但它不是完全时区感知数据结构。 尽管与 UTC 的偏移量是时区的一个特征，但它不能明确标识时区。 不仅有多个时区与 UTC 有相同的偏移，而且单个时区的偏移量会随着夏令时的变化而变化。 这意味着，只要 <xref:System.DateTimeOffset> 值与时区解除关联，就不能再明确地链接回其原始时区。  
  
 由于 <xref:System.DateTimeOffset> 是一个结构，已声明但未初始化的 <xref:System.DateTimeOffset> 对象包含其每个成员字段的默认值。 这意味着其 <xref:System.DateTimeOffset.DateTime%2A> 属性设置为 <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType>，其 <xref:System.DateTimeOffset.Offset%2A> 属性设置为 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
 可以通过调用其构造函数的任何重载来创建新的 <xref:System.DateTimeOffset> 值，这类似于 <xref:System.DateTime> 结构的重载构造函数。 还可以通过为其分配一个 <xref:System.DateTime> 值来创建新的 <xref:System.DateTimeOffset> 值。 这是一个隐式转换;它不需要强制转换运算符（在中C#）或对转换方法的调用（在 Visual Basic 中）。 还可以通过调用一些静态字符串分析方法（包括 <xref:System.DateTimeOffset.Parse%2A>、<xref:System.DateTimeOffset.ParseExact%2A>、<xref:System.DateTimeOffset.TryParse%2A>和 <xref:System.DateTimeOffset.TryParseExact%2A>），从日期和时间的字符串表示形式初始化 <xref:System.DateTimeOffset> 值。  
  
 <xref:System.DateTimeOffset> 结构的成员在以下方面提供功能：  
  
-   日期和时间算术。  
  
     可以从特定 <xref:System.DateTimeOffset> 值中添加或减少日期或时间间隔。 使用 <xref:System.DateTimeOffset> 值的算术运算（与具有 <xref:System.DateTime> 值的值不同）在返回结果时调整时间偏移差异。 例如，下面的代码使用 <xref:System.DateTime> 变量从当前 UTC 时间减去当前本地时间。 然后，该代码使用 <xref:System.DateTimeOffset> 变量来执行相同的操作。 与 <xref:System.DateTime> 值的减法返回本地时区与 UTC 之间的时差，而与 <xref:System.DateTimeOffset> 值的减法返回 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>。  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   类型转换操作。  
  
     您可以将 <xref:System.DateTimeOffset> 值转换为 <xref:System.DateTime> 值，反之亦然。  
  
-   时间操作和提取操作。  
  
     可以提取 <xref:System.DateTimeOffset> 值的日期或时间。 还可以检索特定 <xref:System.DateTimeOffset> 组件的值，例如其年份或月份。  

   > [!NOTE]
   >  如果使用的计时周期值要转换为其他时间间隔（如分钟或秒），则应使用 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>或 <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> 常量来执行转换。 例如，若要将指定的刻度数表示的秒数添加到 <xref:System.DateTimeOffset> 值的 <xref:System.DateTimeOffset.Second%2A> 部分，可以使用表达式 `dateValue.Second + nTicks/Timespan.TicksPerSecond`。  
  

-   日期和时间转换。  
  
     可以将任何 <xref:System.DateTimeOffset> 值转换为另一个 <xref:System.DateTimeOffset> 值，该值表示另一个时区中的同一时间点。 但是，时区的调整规则仅适用于 <xref:System.DateTimeOffset.ToLocalTime%2A> 方法，该方法将 <xref:System.DateTimeOffset> 值转换为本地系统区域中的日期和时间。  
  
-   日期和时间的比较。  
  
     您可以确定任何特定 <xref:System.DateTimeOffset> 值是早于、等于还是晚于另一个 <xref:System.DateTimeOffset> 值。 在执行比较之前，所有值都将转换为 UTC。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">在 DateTime、DateTimeOffset、TimeSpan 和 TimeZoneInfo 之间进行选择</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">示例： .NET Core WinForms 格式设置实用工具C#（）</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">示例： .NET Core WinForms 格式设置实用工具（Visual Basic）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dateTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间。</param>
        <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的行为取决于 `dateTime` 参数的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性的值：  
  
-   如果 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 的值 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，则新实例的 <xref:System.DateTimeOffset.DateTime%2A> 属性设置为等于 `dateTime`，<xref:System.DateTimeOffset.Offset%2A> 属性设置为等于 <xref:System.TimeSpan.Zero>。  
  
-   如果 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，则新实例的 <xref:System.DateTimeOffset.DateTime%2A> 属性将设置为 "`dateTime`"，<xref:System.DateTimeOffset.Offset%2A> 属性设置为与本地系统的当前时区的偏移量相同。  
  
   
  
## Examples  
 下面的示例演示了 `dateTime` 参数的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性的值如何影响此构造函数返回的日期和时间值。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量得出的协调世界时 (UTC) 日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
通过应用偏移量得出的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dateTime As DateTime, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">日期和时间。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的 <see cref="T:System.DateTime" /> 值和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的行为取决于 `dateTime` 参数的 <xref:System.DateTime.Kind%2A> 属性的值：  
  
-   如果 <xref:System.DateTime.Kind%2A> 的值 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>，则 `offset` 参数的值必须为0或将引发 <xref:System.ArgumentException>。  
  
-   如果 <xref:System.DateTime.Kind%2A> 的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>，则 `offset` 参数的值必须等于该特定日期的本地时区与协调世界时（UTC）的偏移量，否则将引发 <xref:System.ArgumentException>。  
  
-   如果 <xref:System.DateTime.Kind%2A> 的值 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，则 `offset` 参数可以具有任何有效的值。  
  
   
  
## Examples  
 下面的示例演示如何使用日期和时间以及本地时区的偏移量（在该时区事先未知时）初始化 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="offset" /> 不等于零。  
  
- 或 - 
 <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="offset" /> 不等于系统的本地时区偏移量。  
  
- 或 - 
 未使用整分钟数指定 <paramref name="offset" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 -14 小时或大于 14 小时。  
  
- 或 - 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">一个日期和时间，以 0001 年 1 月 1 日午夜 12:00:00 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的计时周期数和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，尝试调用 <xref:System.DateTimeOffset.%23ctor%2A> 构造函数来实例化一个具有本地时间的 <xref:System.DateTimeOffset> 值，而不是本地时区的偏移量引发了 <xref:System.ArgumentException>。 您可以使用 <xref:System.DateTimeOffset> 构造函数的此重载来解决此限制。 下面的示例使用本地时间的计时周期数来实例化一个 <xref:System.DateTimeOffset> 值，其偏移量不一定表示本地时间：  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 下面的示例通过使用偏移量为-5 的任意日期（在本例中为2007年7月16日，，1:32 PM）的计时周期数来初始化一个 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">未使用整分钟数指定 <paramref name="offset" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。  
  
- 或 - 
 <paramref name="ticks" /> 小于 <see langword="DateTimeOffset.MinValue.Ticks" /> 或大于 <see langword="DateTimeOffset.MaxValue.Ticks" />。  
  
- 或 - 
 <paramref name="Offset" /> 小于 -14 小时或大于 14 小时。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的年、月、日、小时、分钟、秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将 `year`、`month`和 `day` 解释为公历年、月和日。 若要使用另一个日历中的年、月和日来实例化 <xref:System.DateTimeOffset> 值，请调用 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> 构造函数。  
  
   
  
## Examples  
 下面的示例通过使用 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> 构造函数重载来实例化一个 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  
  
- 或 - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将 `year`、`month`和 `day` 解释为公历年、月和日。 若要使用另一个日历中的年、月和日来实例化 <xref:System.DateTimeOffset> 值，请调用 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> 构造函数。  
  
   
  
## Examples  
 下面的示例通过使用 <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> 构造函数重载来实例化一个 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="millisecond" /> 小于 0 或大于 999。  
  
- 或 - 
 <paramref name="offset" /> 小于 -14 或大于 14。  
  
- 或 - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="year">年份。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
        <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
        <summary>用指定日历的指定年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`、`month`、`day`、`hour`、`minute`、`second`和 `millisecond` 参数均反映以 `calendar` 参数指定的日历表示的值。 如果这些值构成无法使用此日历表示的日期和时间，则会引发异常。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 下面的示例使用 <xref:System.Globalization.HebrewCalendar> 类和 <xref:System.Globalization.HijriCalendar> 类的实例来实例化 <xref:System.DateTimeOffset> 值。 然后，使用相应的日历和公历向控制台显示该日期。  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 不表示整分钟数。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> 不能为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 <paramref name="calendar" /> 参数的 <see langword="MinSupportedDateTime.Year" /> 或大于 <see langword="MaxSupportedDateTime.Year" />。  
  
- 或 - 
 <paramref name="month" /> 在 <paramref name="calendar" /> 中小于或大于 <paramref name="year" /> 中的月数。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="millisecond" /> 小于 0 或大于 999。  
  
- 或 - 
 <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  
  
- 或 - 
<paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 参数不能表示为日期和时间值。  
  
- 或 - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">实例化 DateTimeOffset 对象</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (timeSpan As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">一个 <see cref="T:System.TimeSpan" /> 对象，表示正时间间隔或负时间间隔。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它向此实例的值添加指定的时间间隔。</summary>
        <returns>一个对象，其值为当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="timeSpan" /> 所表示的时间间隔之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在单个操作中使用 <xref:System.DateTimeOffset.Add%2A> 方法添加多种时间间隔（天、小时、分钟、秒或毫秒）。 此方法的行为与加法运算符相同。 <xref:System.DateTimeOffset> 结构还支持每个时间间隔的专用加法方法（如 <xref:System.DateTimeOffset.AddDays%2A>、<xref:System.DateTimeOffset.AddHours%2A>和 <xref:System.DateTimeOffset.AddMinutes%2A>）。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `timeSpan` 添加到其日期和时间来修改当前对象的值。  
  
 <xref:System.DateTimeOffset.Add%2A> 方法不会影响当前 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.Offset%2A> 属性的值。  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.Add%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 如果 `null``timeSpan` 参数，则此方法返回未更改的原始 <xref:System.DateTimeOffset> 对象的值。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.TimeSpan> 对象的数组，这些对象表示目标间的航班时间。 然后 <xref:System.DateTimeOffset.Add%2A> 方法将这些时间添加到表示航班初始起飞时间的 <xref:System.DateTimeOffset> 对象中。 结果反映每个目标的计划的到达时间。  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">由整数和小数部分组成的天数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定天数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="days" /> 所表示的天数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `days` 参数的小数部分是一天中的小数部分。 例如，4.5 相当于4天，12小时，0分钟，0毫秒，0毫秒。 `days` 参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `days` 添加到其日期和时间来修改当前对象的值。  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.AddDays%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 将少于一天的时间间隔转换为分数可能会损失精度。 如果这有问题，则可以使用 <xref:System.DateTimeOffset.Add%2A> 方法，该方法使你能够在单个方法调用中指定多个时间间隔，并且无需将时间间隔转换为一天中的小数部分。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.AddDays%2A> 方法列出了2008年3月的星期一（工作周开始时间）的日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">由整数和小数部分组成的小时数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定小时数添加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="hours" /> 所表示的小时数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `hours` 参数的小数部分是一个小时的小数部分。 例如，4.5 等效于4小时30分钟0秒0毫秒。 `hours` 参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `hours` 添加到其日期和时间来修改当前对象的值。  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.AddHours%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 将少于1小时的时间间隔转换为分数可能会损失精度。 （例如，一分钟为0.01666 小时。）如果这有问题，则可以使用 <xref:System.DateTimeOffset.Add%2A> 方法，该方法允许您在单个方法调用中指定多个时间间隔，并且无需将时间间隔转换为一小时的小数部分。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.AddHours%2A> 方法来列出办公室中特定周的工作倒班的开始时间，每个工作日有 2 8 小时班次。  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">由整数和小数部分组成的毫秒数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的毫秒数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前 <see cref="T:System.DateTimeOffset" /> 对象表示的时间和日期与 <paramref name="milliseconds" /> 对象表示的整毫秒数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `milliseconds` 参数的小数部分是毫秒的小数部分。 例如，4.5 等效于4毫秒，5000计时周期，其中一毫秒等于10000刻度。 但 `milliseconds` 舍入为最接近的毫秒;向上或向后舍入的所有值。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `milliseconds` 添加到其日期和时间来修改当前对象的值。  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.AddMilliseconds%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">由整数和小数部分组成的分钟数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定分钟数添加到此实例的值上。</summary>
        <returns>一个对象，其值是当前 <see cref="T:System.DateTimeOffset" /> 对象表示的日期和时间与 <paramref name="minutes" /> 表示的分钟数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `minutes` 参数的小数部分是一分钟的小数部分。 例如，4.5 等效于4分钟30秒0毫秒。 `minutes` 参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `minutes` 添加到其日期和时间来修改当前对象的值。  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.AddMinutes%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 将少于一分钟的时间间隔转换为分数可能会损失精度。 （例如，一秒钟的时间为0.01666 分钟。）如果这有问题，则可以使用 <xref:System.DateTimeOffset.Add%2A> 方法，该方法允许您在单个方法调用中指定多个时间间隔，并且无需将时间间隔转换为一分钟的小数部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">整月份数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的月份数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="months" /> 所表示的月份数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与将单个时间间隔单位（例如，分钟或天）添加到日期和时间值的大多数其他方法不同，<xref:System.DateTimeOffset.AddMonths%2A> 不允许添加月的小数部分。 若要将除月以外的其他时间单位以外的时间添加到 <xref:System.DateTimeOffset> 对象，请使用 <xref:System.DateTimeOffset.Add%2A> 方法。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `months` 添加到其日期和时间来修改当前对象的值。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.AddMonths%2A> 方法来显示2007年每个季度的开始日期。  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">由整数和小数部分组成的秒数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定秒数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="seconds" /> 所表示的秒数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `seconds` 参数的小数部分是秒的小数部分。 下表显示了秒的小数部分的值。  
  
|第二个值|等效|  
|------------------|----------------|  
|1秒|100 毫秒|  
|01秒|10毫秒|  
|001秒|1毫秒|  
  
 `seconds` 参数舍入为最接近的毫秒。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `minutes` 添加到其日期和时间来修改当前对象的值。  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.AddSeconds%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">以 100 纳秒为单位的计时周期数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的计时周期数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="ticks" /> 所表示的计时周期数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 勾选标记表示100毫微秒，或 1-10 秒秒。 因为计时周期是非常小且精确的时间间隔，所以任何更大的时间单位都可以表示为多个刻度，而不会丢失精度。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `minutes` 添加到其日期和时间来修改当前对象的值。  
  
 下表列出了特定时间间隔内的计时周期数。  
  
|时间间隔|计时周期数|  
|-------------------|---------------------|  
|秒|10,000,000|  
|Minute|600,000,000|  
|小时|36,000,000,000|  
|日期|864,000,000,000|  
|周|6,048,000,000,000|  
|月|取决于月中的天数。|  
|非闰年|315,360,000,000,000|  
|闰年|316,224,000,000,000|  
  
 由于 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此 <xref:System.DateTimeOffset.AddTicks%2A> 方法在执行日期和时间算术时不会考虑特定时区的调整规则。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">年份数。 此数值可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的年份数加到此实例的值上。</summary>
        <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="years" /> 所表示的年数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与将单个时间间隔单位（例如，分钟或天）添加到日期和时间值的大多数其他方法不同，<xref:System.DateTimeOffset.AddYears%2A> 不允许添加年份的小数部分。 若要将除年以外的其他时间单位以外的时间添加到 <xref:System.DateTimeOffset> 对象，请使用 <xref:System.DateTimeOffset.Add%2A> 方法。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `months` 添加到其日期和时间来修改当前对象的值。  
  
   
  
## Examples  
 在美国中，无法在16岁的期限内向人员颁发驱动程序的许可证。 下面的示例显示了一个可能的最晚日期，用户必须在该日期出生，才能合法颁发驱动程序的许可证。  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">要比较的第一个对象。</param>
        <param name="second">要比较的第二个对象。</param>
        <summary>对两个 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明第一个对象是早于、等于还是晚于第二个对象。</summary>
        <returns>一个有符号的整数，它表示 <paramref name="first" /> 参数的值是早于、晚于还是等于 <paramref name="second" /> 参数的值，如下表所示。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 含义 
 </description></listheader><item><term> 小于零 
 </term><description><paramref name="first" /> 早于 <paramref name="second" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="first" /> 等于 <paramref name="second" />。  
  
 </description></item><item><term> 大于零 
 </term><description><paramref name="first" /> 晚于 <paramref name="second" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行比较时，方法在执行比较之前将 `first` 和 `second` 参数转换为协调世界时（UTC）。 方法等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 换句话说，<xref:System.DateTimeOffset.Compare%2A> 方法确定两个 <xref:System.DateTimeOffset> 对象是否表示单个时间点。 它直接比较日期和时间以及偏移量。  
  
   
  
## Examples  
 下面的示例演示对 <xref:System.DateTimeOffset.Compare%2A> 方法的调用，以对 <xref:System.DateTimeOffset> 对象进行比较。  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">将与当前的 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明当前对象是早于、等于还是晚于另一个 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>一个有符号的整数，它指明了当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 之间的关系，如下表所示。  
  
 <list type="table"><listheader><term> 返回值 
 </term><description> 说明 
 </description></listheader><item><term> 小于零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象早于 <paramref name="other" />。  
  
 </description></item><item><term> 零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 相同。  
  
 </description></item><item><term> 大于零。  
  
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象晚于 <paramref name="other" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法通过比较它们的 <xref:System.DateTimeOffset.UtcDateTime%2A> 值来比较 <xref:System.DateTimeOffset> 的对象;也就是说，它确定两个对象是否表示单个时间点，并指示当前对象是早于、晚于还是与 `other` 参数相同。  
  
   
  
## Examples  
 下面的示例演示对 <xref:System.DateTimeOffset.CompareTo%2A> 方法的调用，以对 <xref:System.DateTimeOffset> 对象进行比较。  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</summary>
        <value>一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性将从 <xref:System.DateTimeOffset> 对象中移除时间部分的任何重要部分，并只返回其重要的日期部分。 例如，如果 <xref:System.DateTimeOffset> 对象的日期和时间值为 "1/12/07 4： 01pm + 7:30"，则属性将返回 <xref:System.DateTime> 值 "1/12/07 12:00:00 AM"。 然后，可以使用仅显示日期的任何标准或自定义格式说明符来显示 <xref:System.DateTime> 值。 （有关说明，请参阅 "示例" 部分。）  
  
 返回的 <xref:System.DateTime> 对象的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性的值始终是 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>的。 它不受 <xref:System.DateTimeOffset.Offset%2A> 属性的值的影响。  
  
 若要显示日期而不显示其时间组成部分，还可以使用 "D" 或 "d" 格式说明符;有关说明，请参阅 "示例" 部分。  
  
   
  
## Examples  
 下面的示例检索特定日期的 <xref:System.DateTimeOffset.Date%2A> 属性的值。 然后，它使用一些标准的和自定义的日期格式说明符向控制台显示该值。  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准 DateTime 格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 此属性同时返回 <xref:System.DateTimeOffset> 对象的日期和时间部分，这使 <xref:System.DateTimeOffset> <xref:System.DateTime> 转换非常有用。 例如，如果 <xref:System.DateTimeOffset> 对象的日期和时间值为 "1/12/07 4： 01pm + 7:30"，则该属性返回日期 "1/12/07 4： 01pm"。  
  
 返回的 <xref:System.DateTime> 对象的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性的值 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.DateTimeOffset.DateTime%2A> 属性将 <xref:System.DateTimeOffset.Now%2A> 返回的时间和 <xref:System.DateTimeOffset.UtcNow%2A> 属性转换为 <xref:System.DateTime> 值。  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">在 DateTime 与 DateTimeOffset 之间进行转换</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的月中的某一天。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的日组成部分，以 1 到 31 之间的一个值来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 你还可以通过使用 "d" 或 "dd" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的日部分的字符串表示形式。  
  
   
  
## Examples  
 下面的示例以三种不同的方式显示 <xref:System.DateTimeOffset> 对象的日部分：  
  
-   通过检索 <xref:System.DateTimeOffset.Day%2A> 属性的值。  
  
-   通过使用 "d" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "dd" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的周中的某一天。</summary>
        <value>用于指示当前 <see cref="T:System.DateTimeOffset" /> 对象的星期几的枚举值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DayOfWeek> 枚举中的常量的值范围是从 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> 到 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>。 如果强制转换为整数，则其值范围为0（指示 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>）到6（表示 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>）。  
  
 还可以通过使用 "D" 格式说明符或 "dddd" 自定义格式说明符来显示特定日期的星期几名称。 例如：  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 请注意，通过调用此属性返回的 <xref:System.DayOfWeek> 枚举成员的 `ToString` 方法返回的字符串未进行本地化。 若要提取包含当前区域性或特定区域性的星期几名称的字符串，请使用 "dddd" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法。 例如，下面的代码使用 `fr-fr` 区域性显示日期的星期几名称。  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 下面的示例显示2008年每个月的第一天的星期几名称。  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的年中的某一天。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的年中的某一天，以 1 到 366 之间的一个值来表示。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定两个 <see cref="T:System.DateTimeOffset" /> 对象是否相等，或者 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象相等。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点。</summary>
        <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将两个 <xref:System.DateTimeOffset> 对象的值转换为协调世界时（UTC）。 方法等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 换句话说，<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> 方法确定两个 <xref:System.DateTimeOffset> 对象是否表示单个时间点。 它直接比较日期和时间以及偏移量。 若要确定两个 <xref:System.DateTimeOffset> 对象是否表示同一时间并且具有相同的偏移量值，请使用 <xref:System.DateTimeOffset.EqualsExact%2A> 方法。  
  
 未 `null` <xref:System.DateTimeOffset> 对象将被视为比 `null`的对象更晚（或更高）。  
  
 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> 方法的此重载实现 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 方法。 它提供的性能略优于 <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> 重载，因为 `other` 参数无需从对象转换。  
  
   
  
## Examples  
 下面的示例演示对 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> 方法的调用，以便测试 <xref:System.DateTimeOffset> 对象是否与当前 <xref:System.DateTimeOffset> 对象相等。  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>确定 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象表示同一时间点。</summary>
        <returns>如果 <paramref name="obj" /> 参数是 <see cref="T:System.DateTimeOffset" /> 对象，并且与当前的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将当前 <xref:System.DateTimeOffset> 对象和 `obj` 参数的值转换为协调世界时（UTC）。 方法等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 换句话说，<xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> 方法确定当前 <xref:System.DateTimeOffset> 对象和指定的对象是否表示单个时间点。 它直接比较日期和时间以及偏移量。 若要确定两个 <xref:System.DateTimeOffset> 对象是否表示同一时间并且具有相同的偏移量值，请使用 <xref:System.DateTimeOffset.EqualsExact%2A> 方法。  
  
 如果 `null``obj`，或如果未 <xref:System.DateTimeOffset>`obj` 的运行时类型，则该方法将返回 `false`。  
  
   
  
## Examples  
 下面的示例指示当前 <xref:System.DateTimeOffset> 对象是否等于几个其他 <xref:System.DateTimeOffset> 对象以及空引用和 <xref:System.DateTime> 对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">要比较的第一个对象。</param>
        <param name="second">要比较的第二个对象。</param>
        <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
        <returns>如果这两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行比较之前，此方法会将 <xref:System.DateTimeOffset> 对象转换为协调世界时（UTC）。 方法等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换句话说，<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> 方法确定两个 <xref:System.DateTimeOffset> 对象是否表示单个时间点。 它直接比较日期和时间以及偏移量。 若要确定两个 <xref:System.DateTimeOffset> 对象是否表示同一时间并且具有相同的偏移量值，请使用 <xref:System.DateTimeOffset.EqualsExact%2A> 方法。  
  
   
  
## Examples  
 下面的示例演示对 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> 方法的调用，以测试各种 <xref:System.DateTimeOffset> 对象对是否相等。  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间并且是否具有相同的偏移量。</summary>
        <returns>如果当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 具有相同的日期和时间值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于多个时区共享单个偏移量，因此 `true` 的返回值不能保证当前和 `other` 对象表示相同时区中的时间。  
  
 与 <xref:System.DateTimeOffset.EqualsExact%2A> 方法不同，<xref:System.DateTimeOffset.Equals%2A> 方法的重载只确定两个 <xref:System.DateTimeOffset> 值是否表示单个时间点。 它们不表示两个值具有相同的日期和时间以及相同的偏移量。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.DateTimeOffset.EqualsExact%2A> 方法来比较类似的 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
        <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
        <returns>一个对象，表示偏移量被设置为本地时间偏移量的 <paramref name="fileTime" /> 的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是一个64位的值，它表示自公元1900年1月 1601 1 日午夜12:00 之后经过的100纳秒间隔数 公元协调世界时（UTC）。 当应用程序创建、访问或写入到文件时，Windows 将使用文件时间来记录。  
  
 Windows 文件时间通过调用 `GetFileTime` 函数（该函数将返回 `FILETIME` 结构）直接通过 Windows API 进行访问。 单个函数参数是要检索其文件时间信息的文件的句柄。 文件句柄是通过调用 `CreateFile` 函数来检索的。 `FILETIME` 结构的 `dwHighDateTime` 成员包含文件时间的四个高序位字节，其 `dwLowDateTime` 成员包含四个低序位字节。 下面的示例演示了如何检索 Windows 文件时间值并将其转换为 <xref:System.DateTimeOffset> 值。  
  
 还可以通过调用 <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> 和 <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> 方法，并通过调用 <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> 方法从 <xref:System.DateTimeOffset> 值创建 Windows 文件时间值 <xref:System.DateTime> 值。  
  
   
  
## Examples  
 下面的示例使用 Windows API 检索 WordPad 可执行文件的 Windows 文件时间。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> 小于零。  
  
- 或 - 
 <paramref name="filetime" /> 大于 <see langword="DateTimeOffset.MaxValue.Ticks" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的毫秒数。 对于在此日期之前的 Unix 时间，其值为负数。</param>
        <summary>将表示为从 1970-01-01T00:00:00Z 开始已经过的毫秒数的 Unix 时间转换为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个日期和时间值，以 Unix 时间表示同一时刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的 <xref:System.DateTimeOffset> 实例的 <xref:System.DateTimeOffset.Offset%2A> 属性值为 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>，这表示协调世界时。 可以通过调用 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 方法，将其转换为特定时区中的时间。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> 小于 -62,135,596,800,000。  
  
- 或 - 
 <paramref name="milliseconds" /> 大于 253,402,300,799,999。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的秒数。 对于在此日期之前的 Unix 时间，其值为负数。</param>
        <summary>将表示为从 1970-01-01T00:00:00Z 开始已经过的秒数的 Unix 时间转换为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个日期和时间值，以 Unix 时间表示同一时刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的 <xref:System.DateTimeOffset> 实例的 <xref:System.DateTimeOffset.Offset%2A> 属性值为 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>，这表示协调世界时。 可以通过调用 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 方法，将其转换为特定时区中的时间。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> 小于 -62,135,596,800。  
  
- 或 - 
 <paramref name="seconds" /> 大于 253,402,300,799。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回当前 <see cref="T:System.DateTimeOffset" /> 对象的哈希代码。</summary>
        <returns>32 位有符号整数哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的小时组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的小时组成部分。 此属性使用 24 小时制；值介于 0 到 23 之间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 还可以通过使用 "H" 或 "HH" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的小时部分的字符串表示形式。  
  
   
  
## Examples  
 下面的示例以三种不同的方式显示 <xref:System.DateTimeOffset> 对象的小时部分：  
  
-   通过检索 <xref:System.DateTimeOffset.Hour%2A> 属性的值。  
  
-   通过使用 "H" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "HH" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</summary>
        <value>当前的 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如有必要，<xref:System.DateTimeOffset.LocalDateTime%2A> 属性会将当前 <xref:System.DateTimeOffset> 对象的日期和时间转换为本地系统的日期和时间。 转换是一个两步操作：  
  
1.  属性将当前 <xref:System.DateTimeOffset> 对象的时间转换为协调世界时（UTC）。  
  
2.  然后，属性将 UTC 转换为本地时间。  
  
 没有无效的时间，不明确的时间将映射到本地区域的标准时间。 （但是，转换可能会产生异常：如果从本地计算机派生的 <xref:System.DateTimeOffset> 值反映了不明确的日期和时间，则可以将该值转换为 UTC，然后返回到与原始时间不同的本地时间。） 当执行此转换时，属性将在本地时区中应用任何调整规则。  
  
 此属性同时返回 <xref:System.DateTimeOffset> 对象的日期和时间部分，这使 <xref:System.DateTimeOffset> <xref:System.DateTime> 转换非常有用。 除了执行任何必要的时间转换以外，此属性还可以通过将返回的 <xref:System.DateTime> 对象的 <xref:System.DateTime.Kind%2A> 属性的值设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType>来与 <xref:System.DateTimeOffset.DateTime%2A> 属性不同。  
  
   
  
## Examples  
 下面的示例演示了在美国太平洋标准时区，将 <xref:System.DateTimeOffset> 值转换为本地时间。 请注意，最后三次都不明确;属性将所有这些属性映射到太平洋标准时区中的单个日期和时间。  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值为 12/31/9999 11:59:59 PM + 00:00。  
  
 <xref:System.DateTimeOffset.MaxValue> 属性用于确定新 <xref:System.DateTimeOffset> 对象的值或算术运算返回的 <xref:System.DateTimeOffset> 值是否与此最大范围值相同或更早。 如果不是，则该方法引发 <xref:System.ArgumentOutOfRangeException>。 任何 <xref:System.DateTimeOffset> 值都将转换为协调世界时（UTC），然后该方法才会将其与 <xref:System.DateTimeOffset.MaxValue>进行比较。  这意味着，日期和时间接近最大范围但偏移量为负的 <xref:System.DateTimeOffset> 值可能会引发异常。 例如，值 12/31/9999 11:00 PM-02:00 超出范围，这是因为它在转换为 UTC 时比 <xref:System.DateTimeOffset.MaxValue> 晚一小时。  
  
 某些日历（如 <xref:System.Globalization.UmAlQuraCalendar>）支持早于 <xref:System.DateTime.MaxValue>之前的日期范围。 在这些情况下，尝试访问变量赋值或格式设置和分析操作中的 <xref:System.DateTime.MaxValue> 可能会引发 <xref:System.ArgumentOutOfRangeException>。 您可以从 <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> 属性中检索指定区域性的最新有效日期值，而不是检索 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> 位于当前或指定区域性的默认日历的范围之外。</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的毫秒组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的毫秒组成部分，以 0 到 999 之间的一个整数来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 还可以通过使用 "fff" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的毫秒部分的字符串表示形式。  
  
 如果依赖属性（如 <xref:System.DateTimeOffset.Now%2A> 或 <xref:System.DateTimeOffset.UtcNow%2A>）来准确地跟踪已用毫秒数，则时间的毫秒部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 和更高版本以及 Windows Vista 操作系统上，时钟的分辨率大约为 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例通过使用自定义格式说明符和直接访问 <xref:System.DateTimeOffset.Millisecond%2A> 属性来显示 <xref:System.DateTimeOffset> 对象的毫秒数。  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的分钟组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的分钟组成部分，以 0 到 59 之间的一个整数来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 还可以通过使用 "m" 或 "mm" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的分钟部分的字符串表示形式。  
  
   
  
## Examples  
 下面的示例以三种不同的方式显示 <xref:System.DateTimeOffset> 对象的分钟部分：  
  
-   通过检索 <xref:System.DateTimeOffset.Minute%2A> 属性的值。  
  
-   通过使用 "m" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "mm" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示可能的最早 <see cref="T:System.DateTimeOffset" /> 值。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值为 1/1/0001 12:00:00 AM + 00:00。  
  
 <xref:System.DateTimeOffset.MinValue> 属性用于确定新 <xref:System.DateTimeOffset> 对象的值或算术运算返回的 <xref:System.DateTimeOffset> 值是否与此最小范围值相同或之后的值相同。 如果不是，则该方法引发 <xref:System.ArgumentOutOfRangeException>。 在方法与 <xref:System.DateTimeOffset.MinValue>进行比较之前，任何 <xref:System.DateTimeOffset> 值都将转换为协调世界时（UTC）。  这意味着，日期和时间接近于最小范围但偏移量为正值的 <xref:System.DateTimeOffset> 值可能引发异常。 例如，值 1/1/0001 1:00:00 AM + 02:00 超出范围，这是因为它在转换为 UTC 时早于 <xref:System.DateTimeOffset.MinValue> 一小时。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的月份组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的月份组成部分，以 1 到 12 之间的一个整数来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 还可以通过使用 "M" 或 "MM" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的月组件的字符串表示形式。  
  
   
  
## Examples  
 下面的示例以三种不同的方式显示 <xref:System.DateTimeOffset> 值的月份部分：  
  
-   通过检索 <xref:System.DateTimeOffset.Month%2A> 属性的值。  
  
-   通过使用 "M" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "MM" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。</summary>
        <value>一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间为当前的本地时间，其偏移量为本地时区与协调世界时 (UTC) 之间的偏移量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前本地时间的毫秒部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 和更高版本以及 Windows Vista 操作系统上，时钟的分辨率大约为 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.Now%2A> 属性检索当前日期和时间，并使用 <xref:System.DateTimeOffset> 类型所支持的每个[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)来显示该日期和时间。  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 下面的示例使用 <xref:System.DateTimeOffset.Now%2A> 和 <xref:System.DateTimeOffset.Millisecond%2A> 属性来确定系统时钟的分辨率。 仅当其毫秒部分的值发生更改时，它才会显示时间。  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与协调世界时 (UTC) 之间的时间偏移量。</summary>
        <value>当前的 <see cref="T:System.DateTimeOffset" /> 对象的时间值与协调世界时 (UTC) 之差。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的 <xref:System.TimeSpan> 对象的 <xref:System.TimeSpan.Hours%2A> 属性的值的范围为-14 小时到14小时。  
  
 <xref:System.DateTimeOffset.Offset%2A> 属性的值精确到分钟。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.Offset%2A> 属性显示本地时间与协调世界时（UTC）之间的差异。  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (dateTimeTz As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要向其加上时间间隔的对象。</param>
        <param name="dateTimeTz">要向其加上时间间隔的对象。</param>
        <param name="timeSpan">待添加的时间间隔。</param>
        <summary>将指定的时间间隔与具有指定日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象相加，产生一个具有新的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>一个对象，其值为 <paramref name="dateTimeTz" /> 与 <paramref name="timeSpan" /> 的值之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A> 方法定义 <xref:System.DateTimeOffset> 值的加法运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 不支持自定义运算符和运算符重载的语言可以改为调用 <xref:System.DateTimeOffset.Add%2A> 方法。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
        <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A> 方法定义 <xref:System.DateTimeOffset> 对象的相等运算符的运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 在计算 `left` 和 `right` 操作数的相等性之前，运算符会将这两个值都转换为协调世界时（UTC）。 操作等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换句话说，<xref:System.DateTimeOffset.op_Equality%2A> 方法确定两个 <xref:System.DateTimeOffset> 对象是否表示单个时间点。 它直接比较日期和时间以及偏移量。 若要确定两个 <xref:System.DateTimeOffset> 对象是否表示同一时间并且具有相同的偏移量值，请使用 <xref:System.DateTimeOffset.EqualsExact%2A> 方法。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否大于（或晚于）另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> 方法为 <xref:System.DateTimeOffset> 对象定义大于运算符的运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 不支持自定义运算符的语言可以改为调用 <xref:System.DateTimeOffset.Compare%2A> 方法。 它们还可以直接调用 <xref:System.DateTimeOffset.op_GreaterThan%2A> 方法，如下例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 计算 `left` 和 `right` 操作数之前，运算符会将这两个值都转换为协调世界时（UTC）。 操作等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是大于还是等于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等于或晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> 方法为 <xref:System.DateTimeOffset> 对象定义大于或等于运算符的运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 不支持自定义运算符的语言可以改为调用 <xref:System.DateTimeOffset.Compare%2A> 方法。 某些语言还可以直接调用 <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> 方法，如下面的示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 计算 `left` 和 `right` 操作数之前，运算符会将这两个值都转换为协调世界时（UTC）。 操作等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (dateTime As DateTime) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">要转换的对象。</param>
        <summary>定义从 <see cref="T:System.DateTime" /> 对象到 <see cref="T:System.DateTimeOffset" /> 对象的隐式转换。</summary>
        <returns>转换后的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.DateTimeOffset.op_Implicit%2A> 方法，编译器可以自动将 <xref:System.DateTime> 对象转换为 <xref:System.DateTimeOffset> 对象，而无需使用显式强制转换运算符C#（在中）或调用转换函数（在 Visual Basic 中）。 它定义了不涉及数据丢失的扩大转换，并且不会引发 <xref:System.OverflowException>。 <xref:System.DateTimeOffset.op_Implicit%2A> 方法会使代码如下所示：  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 此方法等效于 <xref:System.DateTimeOffset.%23ctor%2A> 构造函数。 生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `dateTime` 参数的 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性值：  
  
-   如果 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType><xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性的值，则将 <xref:System.DateTimeOffset> 对象的日期和时间设置为 `dateTime`，并将其 <xref:System.DateTimeOffset.Offset%2A> 属性设置为等于0。  
  
-   如果 <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> 属性的值为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 或 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>，则将 <xref:System.DateTimeOffset> 对象的日期和时间设置为等于 `dateTime`，并将其 <xref:System.DateTimeOffset.Offset%2A> 属性设置为等于本地系统的当前时区的偏移量。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量得出的协调世界时 (UTC) 日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
通过应用偏移量得出的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示不同的时间点。</summary>
        <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A> 方法定义 <xref:System.DateTimeOffset> 对象的不相等运算符的运算。 它始终从 <xref:System.DateTimeOffset.op_Equality%2A>返回相反的结果。 <xref:System.DateTimeOffset.op_Inequality%2A> 方法启用如下代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 在计算 `left` 和 `right` 操作数的相等性之前，运算符会将这两个值都转换为协调世界时（UTC）。 操作等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 换句话说，<xref:System.DateTimeOffset.op_Inequality%2A> 方法确定两个 <xref:System.DateTimeOffset> 对象是否表示不同的时间点。 它直接比较日期和时间以及偏移量。  
  
 不支持自定义运算符的语言可以改为调用 <xref:System.DateTimeOffset.Compare%2A> 方法。 此外，某些语言还可以直接调用 <xref:System.DateTimeOffset.op_Inequality%2A> 方法，如下面的示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A> 方法为 <xref:System.DateTimeOffset> 对象定义小于运算符的运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 计算 `left` 和 `right` 操作数之前，运算符将两个操作数都转换为协调世界时（UTC）。 操作等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 不支持自定义运算符的语言可以改为调用 <xref:System.DateTimeOffset.Compare%2A> 方法。 此外，某些语言还可以直接调用 <xref:System.DateTimeOffset.op_LessThan%2A> 方法，如下面的示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">要比较的第一个对象。</param>
        <param name="right">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> 方法定义 <xref:System.DateTimeOffset> 对象的小于或等于运算符的运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 不支持自定义运算符的语言可以改为调用 <xref:System.DateTimeOffset.Compare%2A> 方法。 某些语言还可以直接调用 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> 方法，如下面的示例所示。  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 计算 `left` 和 `right` 操作数之前，运算符会将这两个值都转换为协调世界时（UTC）。 操作等效于以下内容：  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的 <see cref="T:System.TimeSpan" /> 或 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">被减数。</param>
        <param name="right">减数。</param>
        <summary>从一个 <see cref="T:System.DateTimeOffset" /> 对象中减去另一个对象并生成时间间隔。</summary>
        <returns>一个表示 <paramref name="left" /> 与 <paramref name="right" /> 之差的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A> 方法为 <xref:System.DateTimeOffset> 对象定义减法运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 不支持自定义运算符和运算符重载的语言可以改为调用 <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> 方法。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (dateTimeTz As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">要从其减去的日期和时间对象。</param>
        <param name="dateTimeTz">要从其减去的日期和时间对象。</param>
        <param name="timeSpan">待减去的时间间隔。</param>
        <summary>从指定的日期和时间减去指定的时间间隔，并生成新的日期和时间。</summary>
        <returns>一个对象，它等于 <paramref name="dateTimeOffset" /> 减 <paramref name="timeSpan" /> 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A> 方法为 <xref:System.DateTimeOffset> 对象定义减法运算。 它可以实现如下所示的代码：  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 不支持自定义运算符和运算符重载的语言可以改为调用 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 方法。  
  
 此运算符的等效方法是 <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>。]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <summary>将日期、时间和偏移量的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> 分析一个字符串，其中包含三个元素，这些元素可按任意顺序出现并由空格分隔。 这三个元素如下表中所示。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<偏移 >|"-7:30"|  
  
 尽管其中的每个元素都是可选的，但 > \<偏移量不能单独出现。 它必须与 \<日期 > 或 \<时间 > 一起提供。 如果缺少 \<日期 >，则其默认值为当前日期。 如果缺少 \<时间 >，则其默认值为 12:00:00 AM。 如果存在 \<日期 > 但其年份组成部分只包含两个数字，则将根据 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 属性的值将其转换为当前区域性当前日历中的年份。 如果缺少 \<Offset >，则其默认值为本地时区的偏移量。 \<Offset > 可以表示与协调世界时（UTC）之间的负值或正偏移量。 在任一情况下，\<偏移 > 必须包括符号符号。  
  
 `input` 字符串使用为当前区域性初始化 <xref:System.Globalization.DateTimeFormatInfo> 对象中的格式设置信息进行分析。 若要分析包含指定格式的字符串，该字符串不一定对应于当前区域性的格式设置，请使用 <xref:System.DateTimeOffset.ParseExact%2A> 方法并提供格式说明符。  
  
   
  
## Examples  
 下面的示例调用 <xref:System.DateTimeOffset.Parse%28System.String%29> 方法来分析多个日期和时间字符串。 该示例包括从2007年3月22日到区域性为 en-us 的系统的输出。  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
- 或 - 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
        <summary>使用指定的特定于区域性的格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法分析一个字符串，其中包含三个元素，这些元素可按任意顺序出现并由空格分隔。 下表显示了这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<偏移 >|"-7:30"|  
  
 尽管其中的每个元素都是可选的，但 > \<偏移量不能单独出现。 它必须与 \<日期 > 或 \<时间 > 一起提供。 如果缺少 \<日期 >，则其默认值为当前日期。 如果存在 \<日期 > 但其年份组成部分只包含两个数字，则将根据 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 属性的值将其转换为 `provider` 参数的当前日历中的年份。 如果缺少 \<时间 >，则其默认值为 12:00:00 AM。 如果缺少 \<Offset >，则其默认值为本地时区的偏移量。 \<Offset > 可以表示与协调世界时（UTC）之间的负值或正偏移量。 在任一情况下，\<偏移 > 必须包括符号符号。  
  
 这三个元素的格式由 `formatProvider` 参数定义，可以是以下之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示在 `input` 参数中使用其格式设置的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中使用的格式。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 \<Offset > 使用正号或负号，必须是 + 或-。 它不是由 `formatProvider` 参数的 <xref:System.Globalization.NumberFormatInfo> 对象的 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> 或 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 属性定义的。  
  
   
  
## Examples  
 下面的示例分析为 fr-fr 区域性设置格式的日期和时间字符串，并使用本地系统的默认 en-us 区域性显示它们。  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
- 或 - 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = default, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定范围表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法分析一个字符串，其中包含三个元素，这些元素可按任意顺序出现并由空格分隔。 下表显示了这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<偏移 >|"-7:30"|  
  
 尽管其中的每个元素都是可选的，但 > \<偏移量不能单独出现。 它必须与 \<日期 > 或 \<时间 > 一起提供。 如果缺少 \<日期 >，则其默认值为当前日期。 如果存在 \<日期 > 但其年份组成部分只包含两个数字，则将根据 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 属性的值将其转换为 `provider` 参数的当前日历中的年份。 如果缺少 \<时间 >，则其默认值为 12:00:00 AM。 如果缺少 \<Offset >，则其默认值为本地时区的偏移量，如果在 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 参数中指定 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 或 `styles` 值，则为 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>。 如果存在 \<Offset >，则它可以表示与协调世界时（UTC）之间的负值或正偏移量。 在任一情况下，\<偏移 > 必须包括符号符号。  
  
 这三个元素的格式由 `formatProvider` 参数定义，可以是以下之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示在 `input` 参数中使用其格式设置的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中使用的格式。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 每个元素还可以用前导或尾随空格括起来，并且 \<日期 > 和 \<时间 > 元素可以包含内部空格（如 6: 00:00）。 仅 > 组件的 \<偏移量不能包含内部空格。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 \<Offset > 使用正号或负号，必须是 + 或-。 它不是由 `formatProvider` 参数返回的 <xref:System.Globalization.NumberFormatInfo> 对象的 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> 或 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 属性来定义的。  
  
 下表显示了受支持的 <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> 枚举的成员。  
  
|DateTimeStyles 成员|说明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析由 `input` 表示的字符串，如有必要，将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但会忽略此值。 \<日期 > 和 \<时间 > 元素中允许内部空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但会忽略此值。 在分析字符串中的每个组件前面都允许使用前导空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但会忽略此值。 在分析字符串中的每个组件前面都允许尾随空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|此选项为默认行为。 不能通过提供限制性更强的 <xref:System.Globalization.DateTimeStyles> 枚举值（如 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>）来重写它。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指示如果 `input` 参数缺少 \<偏移量 > 元素，则应提供本地时区的偏移量。 这是 <xref:System.DateTimeOffset.Parse%2A> 方法的默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指示如果 `input` 参数缺少 \<偏移量 > 元素，则应提供 UTC 偏移量（00:00）。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但此值将被忽略且不起作用。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|由于 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性，因此此值无效。|  
  
 仅 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 值不受支持。 如果 `styles` 参数中包含此值，则会引发 <xref:System.ArgumentException>。  
  
   
  
## Examples  
 下面的示例演示将 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>和 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 值传递到 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 方法的 `styles` 参数的效果。  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
  
- 或 - 
 <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 <paramref name="styles" /> 包含不支持的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 <paramref name="styles" /> 包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
- 或 - 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> 方法分析日期的字符串表示形式，该日期必须采用 `format` 参数定义的格式。 它还要求日期和时间的字符串表示形式的 \<日期 >、\<时间 > 和 \<偏移 > 元素按 `format`指定的顺序出现。 如果 `input` 字符串与此 `format` 参数不匹配，则该方法将引发一个 <xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法会分析格式提供程序的 <xref:System.Globalization.DateTimeFormatInfo> 对象识别的任何格式的日期的字符串表示形式。 <xref:System.DateTimeOffset.Parse%2A> 还允许以任意顺序显示日期和时间的字符串表示形式的 \<日期 >、\<时间 > 和 \<偏移量。  
  
 `format` 参数是包含单个标准格式说明符的字符串，或是一个或多个定义 `input` 参数所需格式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `format` 包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移必须包含负号或正号。 如果缺少符号，则方法会引发 <xref:System.FormatException>。  
  
 如果 `format` 要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `format` 要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `format` 不要求 `input` 包含偏移量，则会为生成的 <xref:System.DateTimeOffset> 对象分配本地系统的时区偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义，如果 `format` 是标准格式说明符字符串，则它是 `input` 的精确格式。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 其 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
   
  
## Examples  
 下面的示例使用带有标准和自定义格式说明符的 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法以及用于分析多个日期和时间字符串的固定区域性。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

下面的示例分析应符合[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)的字符串数组。 如示例中的输出所示，具有前导空格或尾随空格的字符串未能成功分析，这是指具有超出范围的日期和时间元素的字符串。

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
- 或 - 
 <paramref name="format" /> 是一个空字符串。  
  
- 或 - 
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage"><para>在 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]中，如果要分析的字符串包含一个小时部分和一个不在协议中的 AM/PM 指示符，则 <see cref="Overload:System.DateTimeOffset.ParseExact" /> 方法将引发一个 <see cref="T:System.FormatException" />。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 及更早版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">一个表示日期和时间的字符范围。</param>
        <param name="format">包含格式说明符的字符范围，用于定义 <paramref name="input" /> 的预期格式。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将表示日期和时间的字符范围转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

此方法分析表示日期的字符跨度，该日期必须采用 `format` 参数所定义的格式。 它还要求日期和时间的字符串表示形式的 \<日期 >、\<时间 > 和 \<偏移 > 元素按 `format`指定的顺序出现。 如果 `input` 与 `format` 模式不匹配，则该方法将引发一个 <xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 方法会分析格式提供程序的 <xref:System.Globalization.DateTimeFormatInfo> 对象识别的任何格式的日期的字符串表示形式。 <xref:System.DateTimeOffset.Parse%2A> 还允许以任意顺序显示日期和时间的字符串表示形式的 \<日期 >、\<时间 > 和 \<偏移量。  
  
 `format` 参数是一个字符跨度，其中包含单字符标准格式说明符，或者包含一个或多个定义 `input` 参数所需格式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `format` 包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移必须包含负号或正号。 如果缺少符号，则方法会引发 <xref:System.FormatException>。  
  
 如果 `format` 要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `format` 要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `format` 不要求 `input` 包含偏移量，则会为生成的 <xref:System.DateTimeOffset> 对象分配本地系统的时区偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义，如果 `format` 是标准格式说明符，则它是 `input` 的精确格式。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 其 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
- 或 -  
<paramref name="styles" /> 参数包含不支持的值。  
- 或 -  
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 是一个空的字符范围。  
 -或- <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
 -或- <paramref name="format" /> 是一个空的字符范围。  
 - 或 -  
 <paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符范围。</param>
        <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的期望格式。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将包含日期和时间的字符串表示形式的字符范围转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
此方法分析表示日期的字符跨度，该日期与分配给 `formats` 参数的模式之一匹配。 如果 `input` `styles` 与上述任意一种模式都不匹配，则该方法将引发一个 <xref:System.FormatException>。 除了将 `input` 与多个格式设置模式进行比较以外，此重载的行为与 <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 方法相同。  
  
 `formats` 参数是一个字符串数组，其元素包含单个标准格式说明符，或者包含一个或多个定义 `input` 参数的可能模式的自定义格式说明符。 调用方法时，`input` 必须匹配其中一种模式。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `formats` 中的匹配的元素包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移量必须包括负号或正负号。 如果缺少符号，则方法会引发 <xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用此重载的 `formats` 参数指定多种格式可帮助减少许多用户在输入日期和时间时遇到的挫折。 特别是，定义多个输入模式的功能使应用程序能够处理日期和时间表示形式，该表示形式可以包括或缺少前导零（以月、天、小时、分钟和秒为单位）。
  
 如果 `formats` 中的匹配元素要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `formats` 中的匹配元素要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `formats` 中的匹配元素不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义。 如果 `formats` 的匹配元素是标准格式说明符字符串，则 `input`的精确格式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包括 `format`未指定的内部空格。 在对字符串进行分析时，日期和时间部分之间以及单个组件中可能出现额外的空白。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包括 `formats`未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包括 `formats`未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `formats`未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略在 `formats` 中的匹配元素中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `formats` 的特定元素中的指定显示，才能发生匹配。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
-或- <paramref name="styles" /> 包含不支持的值。  
- 或 -  
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 是一个空的字符范围。  
-或- <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
- 或 -  
<paramref name="formats" /> 的元素均不包含有效的格式说明符。  
- 或 -  
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法分析日期的字符串表示形式，该日期必须采用 `format` 参数定义的格式。 它还要求日期和时间的字符串表示形式的 \<日期 >、\<时间 > 和 \<偏移 > 元素按 `format`指定的顺序出现。 如果 `input` 字符串与 `format` 参数的模式不匹配，并且具有 `styles` 参数定义的任何变体，则该方法将引发 <xref:System.FormatException>。  与此相反，<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法会分析格式提供程序的 <xref:System.Globalization.DateTimeFormatInfo> 对象识别的任何格式的日期的字符串表示形式。 <xref:System.DateTimeOffset.Parse%2A> 还允许以任意顺序显示日期和时间的字符串表示形式的 \<日期 >、\<时间 > 和 \<偏移量。  
  
 `format` 参数是包含单个标准格式说明符的字符串，或者是一个或多个定义 `input` 参数所需模式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `format` 包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移必须包含负号或正号。 如果缺少符号，则方法会引发 <xref:System.FormatException>。  
  
 如果 `format` 要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `format` 要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `format` 不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义。 如果 `format` 是标准格式说明符字符串，则 `input`的精确格式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `format` 不要求 `input` 包含 offset 值，则会为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `format` 不要求 `input` 包含 offset 值，则会为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包括 `format`未指定的内部空格。 日期和时间部分之间以及单个组件中可能出现额外空白，分析字符串时将忽略此空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包括 `format`未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包括 `format`未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `format`未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略 `format` 中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `format`中指定的形式出现。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  
  
   
  
## Examples  
 下面的示例将 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法与标准和自定义格式说明符、固定区域性以及各种 <xref:System.Globalization.DateTimeStyles> 值一起使用来分析多个日期和时间字符串。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

下面的示例使用各种 <xref:System.Globalization.DateTimeStyles> 值来分析应符合[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)的字符串数组。 如示例的输出所示，格式正确的字符串在以下情况下无法分析：

- 它们包含空格，并且没有在方法调用中提供适当的 <xref:System.Globalization.DateTimeStyles> 标志（如 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>。

- 它们包含超出范围的日期和时间元素。

除非在方法调用中提供了 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，否则不指定 UTC 偏移量的字符串将采用本地时区的偏移量（在本例中为-07:00）。 在这种情况下，假定它们是协调世界时。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
  
- 或 - 
<paramref name="styles" /> 参数包含不支持的值。  
  
- 或 - 
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
- 或 - 
 <paramref name="format" /> 是一个空字符串。  
  
- 或 - 
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage"><para>在 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]中，如果要分析的字符串包含一个小时部分和一个不在协议中的 AM/PM 指示符，则 <see cref="Overload:System.DateTimeOffset.ParseExact" /> 方法将引发一个 <see cref="T:System.FormatException" />。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 及更早版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的期望格式。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法分析与分配给 `formats` 参数的模式之一匹配的日期的字符串表示形式。 如果 `input` 字符串 `styles` 与上述任意一种模式都不匹配，则该方法将引发一个 <xref:System.FormatException>。 除了将 `input` 与多个格式设置模式进行比较以外，此重载的行为与 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法相同。  
  
 `formats` 参数是一个字符串数组，其元素包含单个标准格式说明符，或者包含一个或多个定义 `input` 参数的可能模式的自定义格式说明符。 调用方法时，`input` 必须匹配其中一种模式。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `formats` 中的匹配的元素包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移量必须包括负号或正负号。 如果缺少符号，则方法会引发 <xref:System.FormatException>。  
  
> [!IMPORTANT]
>  使用此重载的 `formats` 参数指定多种格式可帮助减少许多用户在输入日期和时间时遇到的挫折。 特别是，定义多个输入模式的功能使应用程序能够处理日期和时间表示形式，该表示形式可以包括或缺少前导零（以月、天、小时、分钟和秒为单位）。 该示例提供了此的说明。  
  
 如果 `formats` 中的匹配元素要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `formats` 中的匹配元素要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `formats` 中的匹配元素不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义。 如果 `formats` 的匹配元素是标准格式说明符字符串，则 `input`的精确格式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包括 `format`未指定的内部空格。 在对字符串进行分析时，日期和时间部分之间以及单个组件中可能出现额外的空白。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包括 `formats`未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包括 `formats`未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `formats`未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略在 `formats` 中的匹配元素中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `formats` 的特定元素中的指定显示，才能发生匹配。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  
  
   
  
## Examples  
 下面的示例为日期和时间和偏移量值的字符串表示形式定义多个输入格式，然后将用户输入的字符串传递给 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
  
- 或 - 
 <paramref name="styles" /> 包含不支持的值。  
  
- 或 - 
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
  
- 或 - 
<paramref name="formats" /> 的元素均不包含有效的格式说明符。  
  
- 或 - 
<paramref name="input" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage"><para>在 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]中，如果要分析的字符串包含一个小时部分和一个不在协议中的 AM/PM 指示符，则 <see cref="Overload:System.DateTimeOffset.ParseExact" /> 方法将引发一个 <see cref="T:System.FormatException" />。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 及更早版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时钟时间的秒组成部分。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 对象的秒组成部分，以 0 到 59 之间的一个整数值来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 还可以通过使用 "s" 或 "ss" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的第二个组件的字符串表示形式。  
  
   
  
## Examples  
 下面的示例以三种不同的方式显示 <xref:System.DateTimeOffset> 对象的第二个组件：  
  
-   通过检索 <xref:System.DateTimeOffset.Second%2A> 属性的值。  
  
-   通过使用 "s" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "ss" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间或持续时间。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">一个对象，表示要减去的值。</param>
        <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去表示特定日期和时间的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个对象，指定两个 <see cref="T:System.DateTimeOffset" /> 对象之间的间隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法在计算分隔它们的时间间隔之前，将 <xref:System.DateTimeOffset> 对象转换为协调世界时（UTC）。 这消除了不同于 UTC 的偏移量可能对比较产生的任何影响。  
  
> [!NOTE]
>  对于支持自定义运算符的语言，还可以使用减法运算符来执行日期和时间减法运算。 有关详细信息，请参阅 <xref:System.DateTimeOffset.op_Subtraction%2A> 方法。  
  
 由于当前 <xref:System.DateTimeOffset> 对象和 `value` 参数都不表示特定时区中的日期和时间，因此，<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> 方法在减去日期和时间时，不会考虑特定时区的调整规则。  
  
   
  
## Examples  
 下面的示例演示使用 <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> 方法的减法运算。  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">待减去的时间间隔。</param>
        <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间间隔。</summary>
        <returns>一个对象，它等于当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在单个操作中使用 <xref:System.DateTimeOffset.Subtract%2A> 方法来减去多个时间间隔（天、小时、分钟、秒或毫秒）。 它的行为与定义减法运算符的 <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> 方法相同。 <xref:System.DateTimeOffset> 结构还支持专用的加法方法（如 <xref:System.DateTimeOffset.AddDays%2A>、<xref:System.DateTimeOffset.AddHours%2A>和 <xref:System.DateTimeOffset.AddMinutes%2A>），通过将负值赋给 method 参数来执行减法运算。  
  
> [!NOTE]
>  此方法返回新的 <xref:System.DateTimeOffset> 对象。 它不会通过将 `timeSpan` 添加到其日期和时间来修改当前对象的值。  
  
 <xref:System.DateTimeOffset.Subtract%2A> 方法不会影响 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.Offset%2A> 属性的值。 返回 <xref:System.DateTimeOffset> 对象与原始对象具有相同的偏移量。  
  
 由于当前 <xref:System.DateTimeOffset> 对象不表示特定时区中的日期和时间，因此在执行减法运算时，<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> 方法不会考虑特定时区的调整规则。  
  
   
  
## Examples  
 下面的示例演示使用 <xref:System.DateTimeOffset.Subtract%2A> 方法的减法运算。  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="dateTimeOffset.System.IComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值与相同类型的另一个对象的值进行比较。</summary>
        <returns>一个 32 位带符号整数，它指示当前的 <see cref="T:System.DateTimeOffset" /> 对象是小于、等于还是大于 <paramref name="obj" />。 此方法的返回值的说明如下： 
 <list type="table"><listheader><term> 返回值 
 </term><description> 说明 
 </description></listheader><item><term> 小于零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象小于（早于）<paramref name="obj" />。  
  
 </description></item><item><term> 零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="obj" /> 相等（表示同一时间点）。  
  
 </description></item><item><term> 大于零 
 </term><description> 当前的 <see cref="T:System.DateTimeOffset" /> 对象大于（晚于）<paramref name="obj" />。  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit&#xA;override this.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit" Usage="dateTimeOffset.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
        <summary>在对象的反序列化完成时运行。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dateTimeOffset.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info">要用数据填充的 对象。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用序列化当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的数据来填充 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取计时周期数，此计时周期数表示时钟时间中当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 对象的时钟时间中的计时周期数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 <xref:System.DateTimeOffset.Ticks%2A> 属性的值表示自0001年1月1日午夜12:00:00 （<xref:System.DateTimeOffset.MinValue>的值）以来经过的100纳秒间隔数。 它不包括闰秒将添加的时间刻度。 毫微秒为一秒的十亿分之一;第二个计时周期为10000000。 <xref:System.DateTimeOffset.Ticks%2A> 属性的值范围是从 `DateTimeOffset.MinValue.Ticks` 到 `DateTimeOffset.MaxValue.Ticks`。  
  
 可以通过使用 <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> 构造函数重载，将计时周期数分配给 <xref:System.DateTimeOffset> 的对象。  
  
   
  
## Examples  
 下面的示例通过逼近 1:23:07 2008 年7月1日中的计时周期数来初始化一个 <xref:System.DateTimeOffset> 对象。 然后，它会将日期和该日期所表示的计时周期数显示到控制台。  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.DateTimeOffset" /> 对象的日时。</summary>
        <value>表示当前日期自午夜以来的时间间隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A> 属性以 <xref:System.TimeSpan> 对象的形式返回 <xref:System.DateTimeOffset> 对象的时间部分。 它等效于 "<xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType>" 属性。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.TimeOfDay%2A> 属性提取时间并将其显示在控制台中。  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为 Windows 文件时间。</summary>
        <returns>用 Windows 文件时间来表示的当前 <see cref="T:System.DateTimeOffset" /> 对象的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是一个64位的值，它表示自公元1900年1月 1601 1 日午夜12:00 之后经过的100纳秒间隔数 公元协调世界时（UTC）。 当应用程序创建、访问或写入到文件时，Windows 将使用文件时间来记录。  
  
 在执行转换之前，<xref:System.DateTimeOffset.ToFileTime%2A> 方法会将当前 <xref:System.DateTimeOffset> 对象的日期和时间转换为 UTC。 换言之，调用 <xref:System.DateTimeOffset.ToFileTime%2A> 方法等效于以下方法调用：  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时 (UTC) 公元 1601 年 1 月 1 日午夜之前的日期和时间 通用协调时间 (UTC) 开始和结束。</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为表示本地时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
        <returns>一个对象，表示当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间，已转换为本地时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在执行到本地时间的转换时，方法首先通过从时间中减去偏移量，将当前 <xref:System.DateTimeOffset> 对象的日期和时间转换为协调世界时（UTC）。 然后，它通过添加本地时区偏移量将 UTC 日期和时间转换为本地时间。 在执行此操作时，它会考虑本地时区的任何调整规则。  
  
 当前 <xref:System.DateTimeOffset> 对象的值和该方法调用返回的 <xref:System.DateTimeOffset> 对象的值都表示相同的时间点。 也就是说，如果两个传递到 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> 方法，则方法将返回 `true`。  
  
 如果转换导致时间超出 <xref:System.DateTimeOffset> 类型的范围，则 <xref:System.DateTimeOffset.ToLocalTime%2A> 方法返回 <xref:System.DateTimeOffset> 对象，该对象的日期和时间设置为 <xref:System.DateTimeOffset.MaxValue> 或 <xref:System.DateTimeOffset.MinValue>，偏移量设置为本地时区偏移量。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.ToLocalTime%2A> 方法将 <xref:System.DateTimeOffset> 值转换为太平洋标准时区中的本地时间。 它还阐释了方法对本地时区的调整规则的支持。  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset"><see cref="T:System.DateTimeOffset" /> 值所转换成的偏移量。</param>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为偏移量值所指定的日期和时间。</summary>
        <returns>一个对象，它等于原始的 <see cref="T:System.DateTimeOffset" /> 对象（也就是说，它们的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法返回的时间点相同），但其 <see cref="P:System.DateTimeOffset.Offset" /> 属性设置为 <paramref name="offset" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A> 方法是调用 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 方法的替代方法。 当时区与协调世界时（UTC）的偏移量已知时，此方法可用于执行从一个时区到另一个时区的简单转换。 但是，因为原始 <xref:System.DateTimeOffset> 对象和方法调用返回的新 <xref:System.DateTimeOffset> 对象都不明确地与特定时区相关，所以此方法不会在转换中应用任何时区调整规则。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.DateTimeOffset.ToOffset%2A> 方法将 <xref:System.DateTimeOffset> 对象转换为具有不同偏移量的 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">所生成的 <see cref="T:System.DateTimeOffset" /> 对象的值 <see cref="P:System.DateTimeOffset.DateTime" /> 值早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
  
- 或 - 
所生成的 <see cref="T:System.DateTimeOffset" /> 对象的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 -14 小时。  
  
- 或 - 
 <paramref name="offset" /> 大于 14 小时。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
        <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象的字符串表示形式，并在字符串末尾追加了偏移量。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的返回值与 <xref:System.DateTime.ToString?displayProperty=nameWithType> 方法的返回值相同，不同之处在于，它包括一个空格，后跟在字符串末尾追加的偏移量。 换句话说，它使用短日期模式、长时间模式和 `zzz` 自定义格式字符串来设置输出的格式，每个元素都由一个空格与上一个元素隔开。 例如，如果 <xref:System.DateTime.ToString?displayProperty=nameWithType> 返回值 1/12/2008 6:15:50 PM，则 <xref:System.DateTimeOffset.ToString> 返回值 1/12/2008 6:15:50 PM-08:00，时间是协调世界时（UTC）后八小时。  
  
 此方法使用派生自当前区域性的格式设置信息。 有关详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 <xref:System.DateTimeOffset.ToString%2A> 方法的其他重载使你能够指定要使用其格式设置的区域性，并定义 <xref:System.DateTimeOffset> 值的输出模式。  
  
   
  
## Examples  
 下面的示例演示对 <xref:System.DateTimeOffset.ToString> 方法的调用，并在当前区域性为 en-us 的系统上显示其输出。  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString" /> 方法返回当前区域性使用的日历中的日期和时间的字符串表示形式。 如果当前 <see cref="T:System.DateTimeOffset" /> 实例的值早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" />。 下例对此进行了说明。 当当前区域性为阿拉伯语（叙利亚）时，它会尝试设置超出 <see cref="T:System.Globalization.HijriCalendar" /> 类范围的日期的格式。  
  
[！ code-csharp system.exception[# 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)][！ code-vb[system.web. ArgumentOutOfRangeException # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
        <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <paramref name="formatProvider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的返回值与其等效 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 方法重载的值相同，不同之处在于，它包括一个空格，后跟在字符串末尾追加的偏移量。 换句话说，它使用短日期模式、长时间模式和 `zzz` 自定义格式字符串来设置输出的格式，每个元素都由一个空格与上一个元素隔开。  
  
 这三个元素的格式由 `formatProvider` 参数定义。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示其格式设置约定应用于返回的字符串的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义返回的字符串的格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatProvider`，则使用与当前区域性关联的 <xref:System.Globalization.DateTimeFormatInfo> 对象（请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>）。  
  
   
  
## Examples  
 下面的示例使用表示固定区域性的 <xref:System.Globalization.CultureInfo> 对象以及四个其他区域性显示 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="formatProvider" /> 所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> 方法返回由 <paramref name="formatProvider" /> 参数表示的区域性所使用的日历中的日期和时间的字符串表示形式。 其日历由 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性定义。 如果当前 <see cref="T:System.DateTimeOffset" /> 实例的值早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" />。 下例对此进行了说明。 它尝试设置超出 <see cref="T:System.Globalization.JapaneseCalendar" /> 类范围的日期的格式。  
  
[！ code-csharp system.exception[# 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)][！ code-vb system.exception[# 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">一个格式字符串。</param>
        <summary>使用指定的格式将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <paramref name="format" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` 参数应包含单个格式说明符（请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)）或自定义格式模式（请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)），该模式定义返回的字符串的格式。 如果 `format` 为 null 或空字符串（""），则 <xref:System.DateTimeOffset> 值是使用默认格式的输出。  
  
 下表显示了在与 <xref:System.DateTimeOffset>一起使用时特定格式说明符的确切操作，与 <xref:System.DateTime>一起使用时，与它们的行为不同。  
  
|现有格式说明符|新行为|  
|-------------------------------|------------------|  
|“K”|旨在往返日期和时间。 在 <xref:System.DateTimeOffset>中，映射到 "zzz" （偏移量始终显示为小时和分钟）。 请注意，"K" 是一个自定义格式说明符;它不能显示为 `format`中的单个字符。|  
|“U”|不受支持。|  
|迅驰|将 <xref:System.DateTimeOffset> 对象转换为协调世界时（UTC），并使用自定义格式字符串 `ddd, dd MMM yyyy HH:mm:ss GMT`输出该对象。|  
|“u”|将 <xref:System.DateTimeOffset> 对象转换为 UTC，并使用格式 `yyyy-MM-dd HH:mm:ssZ`输出。|  
  
 其余标准日期和时间格式说明符与 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法的行为相同，与 <xref:System.DateTime.ToString%2A> 方法相同。  
  
 此方法使用派生自当前区域性的格式设置信息。 有关详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>。  
  
   
  
## Examples  
 下面的示例使用每个标准日期和时间格式说明符向控制台显示一个 <xref:System.DateTimeOffset> 对象。 使用 en-us 区域性设置输出的格式。  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 的长度为 1，它不属于为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符字符。  
  
- 或 - 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String)" /> 方法返回当前区域性使用的日历中的日期和时间的字符串表示形式。 如果当前 <see cref="T:System.DateTimeOffset" /> 实例的值早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" />。 下例对此进行了说明。 当当前区域性为希伯来语（以色列）时，它会尝试设置超出 <see cref="T:System.Globalization.HebrewCalendar" /> 类范围的日期的格式。  
  
[！ code-csharp system.exception[# 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)][！ code-vb system.exception.[ArgumentOutOfRangeException # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">一个格式字符串。</param>
        <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
        <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` 参数应包含单个格式说明符（请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)）或自定义格式模式（请参阅[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)）。 如果 `format` 为 null 或空字符串（""），则使用默认格式输出 <xref:System.DateTimeOffset> 对象。  
  
 下表显示了在与 <xref:System.DateTimeOffset>一起使用时特定格式说明符的确切操作，与 <xref:System.DateTime>一起使用时，与它们的行为不同。  
  
|现有格式说明符|新行为|  
|-------------------------------|------------------|  
|“K”|旨在往返日期和时间。 在 <xref:System.DateTimeOffset>中，映射到 "zzz" （偏移量始终显示为小时和分钟）。 请注意，"K" 是一个自定义格式说明符;它不能显示为 `format`中的单个字符。|  
|“U”|不受支持。|  
|迅驰|将 <xref:System.DateTimeOffset> 对象转换为协调世界时（UTC），并使用自定义格式字符串 `ddd, dd MMM yyyy HH:mm:ss GMT`输出该对象。|  
|“u”|将 <xref:System.DateTimeOffset> 值转换为 UTC，并使用格式 `yyyy-MM-dd HH:mm:ssZ`输出。|  
  
 其余标准日期和时间格式说明符与 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法的行为相同，与 <xref:System.DateTime.ToString%2A> 方法相同。  
  
 对应于标准格式说明符的模式以及日期和时间组件的符号和名称由 `formatProvider` 参数定义。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示在 `input`中使用其格式设置的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中使用的格式。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatProvider`，则使用与当前区域性关联的 <xref:System.Globalization.DateTimeFormatInfo> 对象（请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>）。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> 方法，使用多个不同的区域性的自定义格式字符串来显示 <xref:System.DateTimeOffset> 对象。  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 的长度为 1，它不属于为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符字符。  
  
- 或 - 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="formatProvider" /> 所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> 方法返回 <paramref name="formatProvider" /> 参数所使用的日历中的日期和时间的字符串表示形式。 其日历由 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性定义。 如果当前 <see cref="T:System.DateTimeOffset" /> 实例的值早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" />。 下例对此进行了说明。 它尝试设置超出 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类范围的日期的格式。  
  
[！ code-csharp system.exception[# 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)][！ code-vb system.exception[# 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">标准日期和时间格式字符串</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">自定义日期和时间格式字符串</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">示例： .NET Core WinForms 格式设置实用工具C#（）</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">示例： .NET Core WinForms 格式设置实用工具（Visual Basic）</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为一个表示协调世界时 (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
        <returns>一个对象，它表示转换为协调世界时 (UTC) 的当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将返回 <xref:System.DateTimeOffset> 对象，该对象的 <xref:System.DateTimeOffset.Offset%2A> 属性设置为零。  
  
 当前 <xref:System.DateTimeOffset> 对象的值和该方法调用返回的 <xref:System.DateTimeOffset> 对象的值都表示相同的时间点。 也就是说，如果两个传递到 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> 方法，则方法将返回 `true`。  
  
   
  
## Examples  
 下面的示例调用 <xref:System.DateTimeOffset.ToUniversalTime%2A> 方法，将本地时间和几个其他时间转换为协调世界时（UTC）。  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回自 1970-01-01T00:00:00.000Z 起已经过的毫秒数。</summary>
        <returns>自 1970-01-01T00:00:00.000Z 起已经过的毫秒数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix time 表示自 1970-01-01T00：00：00Z （1970年1月1日上午 12:00 AM UTC）起已过去的秒数。 它不会考虑闰秒的时间。 此方法返回 Unix 时间中的毫秒数。  
  
 此方法首先将当前实例转换为 UTC，然后再返回其 Unix 时间中的毫秒数。 对于 1970-01-01T00：00：00Z 之前的日期和时间值，此方法返回一个负值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回自 1970-01-01T00:00:00.00Z 起已经过的秒数。</summary>
        <returns>自 1970-01-01T00:00:00.00Z 起已经过的秒数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unix time 表示自 1970-01-01T00：00：00Z （1970年1月1日上午 12:00 AM UTC）起已过去的秒数。 它不会考虑闰秒的时间。  
  
 此方法首先将当前实例转换为 UTC，然后再返回其 Unix 时间。 对于 1970-01-01T00：00：00Z 之前的日期和时间值，此方法返回一个负值。  
  
   
  
## Examples  
 下面的示例调用 <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> 方法，以返回值等于、早于 1970-01-01T00：00：00Z 的 Unix 时间。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider formatProvider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination">此方法返回时，此实例的值将设置为字符范围格式。</param>
        <param name="charsWritten">此方法返回时，为写入到 <paramref name="destination" /> 的字符数。</param>
        <param name="format">一个包含字符的范围，这些字符表示定义可接受的 <paramref name="destination" /> 格式的标准或自定义格式字符串。</param>
        <param name="formatProvider">一个可选对象，提供有关 <paramref name="destination" /> 的区域性特定格式设置信息。</param>
        <summary>尝试将当前日期/时间偏移实例的值的格式设置为提供的字符范围。</summary>
        <returns>如果格式设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数在传递时尚未初始化。</param>
        <summary>尝试将日期和时间的指定范围表示形式转换为其等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数在传递时尚未初始化。</param>
        <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> 方法的此重载与 <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> 方法类似，不同之处在于，它不会在转换失败时引发异常。 它分析一个字符串，其中包含三个元素，这些元素可按任意顺序出现并由空格分隔。 下表显示了这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<偏移 >|"-7:30"|  
  
 尽管其中的每个元素都是可选的，但 > \<偏移量不能单独出现。 它必须与 \<日期 > 或 \<时间 > 一起提供。 如果缺少 \<日期 >，则其默认值为当前日期。 如果存在 \<日期 > 但其年份组成部分只包含两个数字，则将根据 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 属性的值将其转换为当前区域性当前日历中的年份。 如果缺少 \<时间 >，则其默认值为 12:00:00 AM。 如果缺少 \<Offset >，则其默认值为本地时区的偏移量。 如果存在 \<Offset >，则它可以表示与协调世界时（UTC）之间的负值或正偏移量。 在任一情况下，\<偏移 > 必须包括符号符号或方法返回 `false`。  
  
 `input` 字符串使用为当前区域性初始化 <xref:System.Globalization.DateTimeFormatInfo> 对象中的格式设置信息进行分析。 若要分析包含指定格式的字符串，该字符串不一定对应于当前区域性的指定格式设置，请使用 <xref:System.DateTimeOffset.TryParseExact%2A> 方法并提供格式说明符。  
  
   
  
## Examples  
 下面的示例调用 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> 方法来分析多个具有各种日期和时间格式的字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">示例： .NET Core WinForms 格式设置实用工具C#（）</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">示例： .NET Core WinForms 格式设置实用工具（Visual Basic）</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数在传递时尚未初始化。</param>
        <summary>尝试将日期和时间的指定范围表示形式转换为其等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数在传递时尚未初始化。</param>
        <summary>尝试将日期和时间的指定字符串表示形式转换为其等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法的此重载与 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法类似，不同之处在于，它不会在转换失败时引发异常。 方法分析一个字符串，其中包含三个元素，这些元素可按任意顺序出现并由空格分隔。 下表显示了这三个元素。  
  
|元素|示例|  
|-------------|-------------|  
|\<日期 >|"2/10/2007"|  
|\<时间 >|"1:02:03 PM"|  
|\<偏移 >|"-7:30"|  
  
 尽管其中的每个元素都是可选的，但 > \<偏移量不能单独出现。 它必须与 \<日期 > 或 \<时间 > 一起提供。 如果缺少 \<日期 >，则其默认值为当前日期。 如果存在 \<日期 > 但其年份组成部分只包含两个数字，则将根据 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 属性的值将其转换为 `provider` 参数的当前日历中的年份。 如果缺少 \<时间 >，则其默认值为 12:00:00 AM。 如果缺少 \<Offset >，则其默认值为本地时区的偏移量，如果在 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 中指定了 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 或 `styles`值，则为 <xref:System.TimeSpan.Zero>。 如果存在 \<Offset >，则它可以表示与协调世界时（UTC）之间的负值或正偏移量。 在任一情况下，\<偏移 > 必须包括符号符号或方法返回 `false`。  
  
 `input` 字符串使用 `formatProvider` 参数提供的 <xref:System.Globalization.DateTimeFormatInfo> 对象中的区域性特定格式设置信息进行分析。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示在 `input`中使用其格式设置的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中使用的格式。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 此外，每个元素可以用前导或尾随空格分隔，并且 \<日期 > 和 \<时间 > 组件可以包含内部空格（如 6: 00:00）。 仅 > 组件的 \<偏移量不能包含内部空格。  
  
 如果 `null``provider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 \<Offset > 使用正号或负号，必须是 + 或-。 它不是由 `formatprovider` 参数的 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 属性返回的 <xref:System.Globalization.NumberFormatInfo> 对象的 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> 或 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> 属性来定义的。  
  
 支持 <xref:System.Globalization.DateTimeStyles> 枚举的以下成员：  
  
|DateTimeStyles 成员|Comments|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析由 `input` 表示的字符串，如有必要，将其转换为 UTC。 它等效于分析字符串，然后调用返回对象的 <xref:System.DateTimeOffset.ToUniversalTime> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但会忽略此值。 \<日期 > 和 \<时间 > 组件允许内部空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但会忽略此值。 分析字符串中的每个组件的前面都允许使用前导空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但会忽略此值。 分析字符串中的每个组件的前面都允许尾随空格。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|此选项为默认行为。 不能通过提供限制性更强的 <xref:System.Globalization.DateTimeStyles> 枚举值（如 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>）来重写它。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指示如果 `input` 参数缺少 \<偏移量 > 元素，则应提供本地时区的偏移量。 这是 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法的默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指示如果 `input` 参数缺少 \<偏移量 > 元素，则应提供 UTC 偏移量（00:00）。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但此值将被忽略且不起作用。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|由于 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性，因此此值无效。|  
  
 仅 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 值不受支持。 如果 `styles` 参数中包含此值，则会引发 <xref:System.ArgumentException>。  
  
   
  
## Examples  
 下面的示例使用各种 <xref:System.Globalization.DateTimeStyles> 值调用 <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法，以分析具有各种日期和时间格式的字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
- 或 - 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果出现以下情况，转换将失败</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将字符范围中的日期和时间的表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

此重载类似于 <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 方法，但如果转换失败，则此方法不会引发异常。 它分析日期和时间的表示形式，该日期和时间必须与 `format` 参数指定的模式完全匹配。 如果 `input` 与此模式不匹配，并且 `styles` 参数定义的空白中有一些可能的变体，则分析操作将失败，并且该方法将返回 `false`。  
  
`format` 参数是一个字符跨度，其中包含单个标准格式说明符，或者包含一个或多个定义 `input`所需模式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `format` 包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移必须包含负号或正号。 如果缺少符号，则分析操作将失败，并且方法将返回 `false`。  
  
如果 `format` 要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `format` 要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `format` 不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
`input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义。 如果 `format` 是标准格式说明符字符串，则 `input` 的精确模式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中所允许的符号和标准格式。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析日期和时间表示形式，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `format` 不要求 `input` 包含 offset 值，则会为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `format` 不要求 `input` 包含 offset 值，则会为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包含格式未指定的内部空格。 在对字符串进行分析时，日期和时间部分之间以及单个组件（而不是偏移量）之间可能会出现额外的空白。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包括 `format`未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包括 `format`未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `format`未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略 `format` 中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `format`中指定的形式出现。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> 不受支持。  
-或- <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果出现以下情况，转换将失败</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将字符范围中的日期和时间的表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
此方法分析与分配给 `formats` 数组的模式之一匹配的日期的字符串表示形式。 如果 `input` 与这些模式中的任何一种模式都不匹配 `styles` 参数定义的任何变体，则分析操作将失败，并且该方法将返回 `false`。 除了将 `input` 与包含格式说明符的多个字符串进行比较以外，此重载的行为与 <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> 方法相同。  
  
 `formats` 参数是一个字符串数组，其元素包含单个标准格式说明符，或者包含一个或多个定义 `input`的可能模式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `formats` 中的匹配的元素包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移量必须包括负号或正负号。 如果缺少符号，则分析操作将失败，并且方法将返回 `false`。  
  
> [!IMPORTANT]
>  使用此重载的 `formats` 参数指定多种格式可帮助减少许多用户在输入日期和时间时遇到的挫折。 特别是，定义多个输入模式的功能使应用程序能够处理日期和时间表示形式，该表示形式可以包括或缺少前导零（以月、天、小时、分钟和秒为单位）。 该示例提供了此的说明。  
  
 如果 `formats` 中的匹配元素要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `formats` 中的匹配元素要求输入包含时间而不包含日期，则将在本地系统上向生成的 <xref:System.DateTimeOffset> 对象分配当前日期。 如果 `formats` 中的匹配元素不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
 `input` 中使用的特定日期和时间符号由 `formatProvider` 参数定义。 如果 `formats` 的匹配元素是标准格式说明符字符串，则 `input` 的精确模式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包括 `formats`中的元素未指定的内部空格。 在对字符串进行分析时，日期和时间部分以及单个组件（除偏移量以外）中都可以出现额外的空白。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包含 `formats`中的元素未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包含 `formats`中的元素未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `formats`中的元素未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略在 `formats` 中的匹配元素中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `formats` 中的特定元素指定，才能成功匹配。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> 不受支持。  
-或- <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。 要指定的一个典型值为 <see langword="None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含 <paramref name="format" /> 和 <c>provider</c> 所定义的所需格式的日期和时间的有效字符串表示形式，则转换失败。 此参数在传递时尚未初始化。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法的此重载类似于 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法，但如果转换失败，则此方法不会引发异常。 它分析日期和时间的字符串表示形式，该日期和时间必须与 `format` 参数指定的模式完全匹配。 如果 `input` 字符串与此模式不匹配，并且 `styles` 参数定义的空白中有一些可能的变体，则分析操作将失败，并且该方法将返回 `false`。  
  
 `format` 参数是一个字符串，其中包含单个标准格式说明符，或者包含一个或多个定义 `input`所需模式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `format` 包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移必须包含负号或正号。 如果缺少符号，则分析操作将失败，并且方法将返回 `false`。  
  
 如果 `format` 要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `format` 要求 `input` 包含时间而不包含日期，则生成的 <xref:System.DateTimeOffset> 对象将被分配到本地系统上的当前日期。 如果 `format` 不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义。 如果 `format` 是标准格式说明符字符串，则 `input` 的精确模式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中所允许的符号和标准格式。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `format` 不要求 `input` 包含 offset 值，则会为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `format` 不要求 `input` 包含 offset 值，则会为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包含格式未指定的内部空格。 在对字符串进行分析时，日期和时间部分之间以及单个组件（而不是偏移量）之间可能会出现额外的空白。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包括 `format`未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包括 `format`未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `format`未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略 `format` 中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `format`中指定的形式出现。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  
  
## Examples 

 下面的示例将 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法与标准和自定义格式说明符、固定区域性以及各种 <xref:System.Globalization.DateTimeStyles> 值一起使用来分析多个日期和时间字符串。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

下面的示例使用各种 <xref:System.Globalization.DateTimeStyles> 值来分析应符合[ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier)的字符串数组。 如示例的输出所示，格式正确的字符串在以下情况下无法分析：

- 它们包含空格，并且没有在方法调用中提供适当的 <xref:System.Globalization.DateTimeStyles> 标志（如 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>。

- 它们包含超出范围的日期和时间元素。

除非在方法调用中提供了 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，否则不指定 UTC 偏移量的字符串将采用本地时区的偏移量（在本例中为-07:00，表示太平洋夏令时时区的偏移量）。 在这种情况下，假定它们是协调世界时。

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
- 或 - 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <block subset="none" type="usage"><para>在 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]中，如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则 <see cref="Overload:System.DateTimeOffset.TryParseExact" /> 返回 <see langword="false" />。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 及更早版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">包含要转换的日期和时间的字符串。</param>
        <param name="formats">一个用于定义 <paramref name="input" /> 的所需格式的数组。</param>
        <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。 要指定的一个典型值为 <see langword="None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式，或者不包含 <paramref name="format" /> 所定义的所需格式的日期和时间，或者 <paramref name="formats" /> 为 <see langword="null" />，则转换失败。 此参数在传递时尚未初始化。</param>
        <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
        <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法分析与分配给 `formats` 数组的任一模式相匹配的日期的字符串表示形式。 如果 `input` 字符串与这些模式中的任何一种模式都不匹配 `styles` 参数定义的任何变体，则分析操作将失败，并且该方法将返回 `false`。 除了将 `input` 与包含格式说明符的多个字符串进行比较以外，此重载的行为与 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法相同。  
  
 `formats` 参数是一个字符串数组，其元素包含单个标准格式说明符，或者包含一个或多个定义 `input`的可能模式的自定义格式说明符。 有关有效格式设置代码的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。 如果 `formats` 中的匹配的元素包括 `z`、`zz`或 `zzz` 自定义格式说明符，以指示在 `input`中必须存在偏移量，则该偏移量必须包括负号或正负号。 如果缺少符号，则分析操作将失败，并且方法将返回 `false`。  
  
> [!IMPORTANT]
>  使用此重载的 `formats` 参数指定多种格式可帮助减少许多用户在输入日期和时间时遇到的挫折。 特别是，定义多个输入模式的功能使应用程序能够处理日期和时间表示形式，该表示形式可以包括或缺少前导零（以月、天、小时、分钟和秒为单位）。 该示例提供了此的说明。  
  
 如果 `formats` 中的匹配元素要求 `input` 包含日期但不包含时间，则生成的 <xref:System.DateTimeOffset> 对象的时间为午夜（0:00:00）。 如果 `formats` 中的匹配元素要求输入包含时间而不包含日期，则将在本地系统上向生成的 <xref:System.DateTimeOffset> 对象分配当前日期。 如果 `formats` 中的匹配元素不要求 `input` 包含偏移量，则生成的 <xref:System.DateTimeOffset> 对象的偏移量取决于 `styles` 参数的值。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeLocal>，则会将本地时区的偏移量分配给 <xref:System.DateTimeOffset> 对象。 如果 `styles` 包括 <xref:System.Globalization.DateTimeStyles.AssumeUniversal>，则会将协调世界时（UTC）偏移量或 + 00:00 分配给 <xref:System.DateTimeOffset> 对象。 如果这两个值均未指定，则使用本地时区的偏移量。  
  
 `input` 中使用的特定日期和时间符号和字符串由 `formatProvider` 参数定义。 如果 `formats` 的匹配元素是标准格式说明符字符串，则 `input` 的精确模式也是如此。 `formatProvider` 参数可以是以下项之一：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示基于其解释 `input` 的区域性。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象定义 `input`中的符号和格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
 如果 `null``formatprovider`，则使用与当前区域性对应的 <xref:System.Globalization.CultureInfo> 对象。  
  
 `styles` 参数定义在输入字符串中是否允许空格，指示如何分析没有显式偏移量组件的字符串，并支持在分析操作中进行 UTC 转换。 除 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>之外，还支持 <xref:System.Globalization.DateTimeStyles> 枚举的所有成员。 下表列出了每个受支持的成员的效果。  
  
|`DateTimeStyles` 成员|行为|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `input`，并在必要时将其转换为 UTC。 它等效于分析字符串，然后调用返回的 <xref:System.DateTimeOffset> 对象的 <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> 方法。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供本地时区的偏移量。 这是默认值。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|如果 `formats` 中的匹配元素不要求 `input` 包含 offset 值，则将为返回的 <xref:System.DateTimeOffset> 对象提供 UTC 偏移量（+ 00:00）。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|允许 `input` 包括 `formats`中的元素未指定的内部空格。 在对字符串进行分析时，日期和时间部分以及单个组件（除偏移量以外）中都可以出现额外的空白。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|允许 `input` 包含 `formats`中的元素未指定的前导空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|允许 `input` 包含 `formats`中的元素未指定的尾随空格。 分析字符串时，将忽略这些字符。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|允许 `input` 包含 `formats`中的元素未指定的前导空格、尾随空格和内部空格。 分析字符串时，将忽略在 `formats` 中的匹配元素中未指定的所有额外空白字符。|  
|<xref:System.Globalization.DateTimeStyles.None>|指示 `input`中不允许使用额外的空白。 空格必须完全按照 `formats` 中的特定元素指定，才能成功匹配。 此选项为默认行为。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|不起作用，因为 <xref:System.DateTimeOffset> 结构不包括 `Kind` 属性。|  
  
   
  
## Examples  
 下面的示例为日期和时间和偏移量值的字符串表示形式定义多个输入格式，然后将用户输入的字符串传递给 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
  
- 或 - 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
        <block subset="none" type="usage"><para>在 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]中，如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则 <see cref="Overload:System.DateTimeOffset.TryParseExact" /> 返回 <see langword="false" />。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 及更早版本中，将忽略 AM/PM 指示符。</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此常量的值等效于公历 1970 年 1 月 1 日的 00:00:00.0000000 UTC。 <see cref="F:System.DateTimeOffset.UnixEpoch" /> 定义 Unix 时间等于 0 的时间点。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A> 属性执行双重转换：  
  
-   它将当前 <xref:System.DateTimeOffset> 对象的日期和时间转换为协调世界时（UTC）。 通过从当前 <xref:System.DateTimeOffset> 对象的日期和时间减去 <xref:System.DateTimeOffset.Offset%2A> 属性的值来执行转换。  
  
-   它将 <xref:System.DateTimeOffset> 值转换为 <xref:System.DateTime> 值。  
  
 返回的 <xref:System.DateTimeOffset.DateTime%2A> 值的 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>。  
  
 检索 <xref:System.DateTimeOffset.UtcDateTime%2A> 属性的值等效于调用当前 <xref:System.DateTimeOffset> 对象的 `ToUniversalTime.DateTime` 属性，只不过后一 <xref:System.DateTime> 值的 <xref:System.DateTime.Kind%2A> 属性 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.DateTimeOffset.UtcDateTime%2A> 属性来显示 <xref:System.DateTimeOffset> 值及其相应的 UTC 时间。  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</summary>
        <value>一个对象，其日期和时间为当前的协调世界时 (UTC)，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A> 属性基于本地系统的时钟时间和本地系统时区定义的偏移量来计算当前协调世界时（UTC）。  
  
 当前 UTC 时间的毫秒部分的精度取决于系统时钟的分辨率。 在 Windows NT 3.5 和更高版本以及 Windows Vista 操作系统上，时钟的分辨率大约为 10-15 毫秒。  
  
   
  
## Examples  
 下面的示例说明协调世界时（UTC）与本地时间之间的关系。  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间的计时周期数。</summary>
        <value><see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 中的计时周期数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcTicks%2A> 属性的值表示自0001年1月1日午夜12:00:00 （<xref:System.DateTimeOffset.MinValue>的值）以来经过的100纳秒间隔数。 它不包括闰秒将添加的时间刻度。 毫微秒为一秒的十亿分之一;第二个计时周期为10000000。 <xref:System.DateTimeOffset.UtcTicks%2A> 属性的值范围是从 `DateTimeOffset.MinValue.Ticks` 到 `DateTimeOffset.MaxValue.Ticks`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的年份组成部分。</summary>
        <value>当前 <see cref="T:System.DateTimeOffset" /> 对象的年份组成部分，以 0 到 9999 之间的一个整数值来表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A> 属性不受 <xref:System.DateTimeOffset.Offset%2A> 属性值的影响。  
  
 您还可以通过使用 "y"、"yy" 或 "yyyy" 自定义格式说明符调用 <xref:System.DateTimeOffset.ToString%2A> 方法来创建 <xref:System.DateTimeOffset> 对象的年组成部分的字符串表示形式。  
  
   
  
## Examples  
 下面的示例以四种不同的方式显示 <xref:System.DateTimeOffset> 值的年份部分：  
  
-   通过检索 <xref:System.DateTimeOffset.Year%2A> 属性的值。  
  
-   通过使用 "y" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "yy" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
-   通过使用 "yyyy" 格式说明符调用 <xref:System.DateTimeOffset.ToString%28System.String%29> 方法。  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
