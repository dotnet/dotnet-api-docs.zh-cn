<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bf692e28849c9f448cfadbe41cc30dbc02d2d96" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89987138" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <TypeSignature Language="C#" Value="public delegate bool Predicate&lt;T&gt;(T obj);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;T&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of T)(obj As T) As Boolean " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="dd5c6-101">要比较的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-101">The type of the object to compare.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="dd5c6-102">要按照由此委托表示的方法中定义的条件进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-102">The object to compare against the criteria defined within the method represented by this delegate.</span></span></param>
    <summary><span data-ttu-id="dd5c6-103">表示一种方法，该方法定义一组条件并确定指定对象是否符合这些条件。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-103">Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</span></span></summary>
    <returns><span data-ttu-id="dd5c6-104">如果 <paramref name="obj" /> 符合由此委托表示的方法中定义的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-104"><see langword="true" /> if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, <see langword="false" />.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd5c6-105">和类的多个方法使用此委托 <xref:System.Array> <xref:System.Collections.Generic.List%601> 搜索集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-105">This delegate is used by several methods of the <xref:System.Array> and <xref:System.Collections.Generic.List%601> classes to search for elements in the collection.</span></span>  
  
 <span data-ttu-id="dd5c6-106">通常， <xref:System.Predicate%601> 委托由 lambda 表达式表示。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-106">Typically, the <xref:System.Predicate%601> delegate is represented by a lambda expression.</span></span> <span data-ttu-id="dd5c6-107">由于本地范围变量可供 lambda 表达式使用，因此可以很容易地测试编译时不是确切已知的条件。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-107">Because locally scoped variables are available to the lambda expression, it is easy to test for a condition that is not precisely known at compile time.</span></span> <span data-ttu-id="dd5c6-108">下面的示例对此进行模拟，其中定义了一个 `HockeyTeam` 类，其中包含有关全国 Hockey 联盟团队和其成立年份的信息。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-108">This is simulated in the following example, which defines a `HockeyTeam` class that contains information about a National Hockey League team and the year in which it was founded.</span></span> <span data-ttu-id="dd5c6-109">该示例定义了表示年份的整数值的数组，并将数组的一个元素随机分配给 `foundedBeforeYear` ，该元素是本地作用域为该示例的方法的一个变量 `Main` 。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-109">The example defines an array of integer values that represent years, and randomly assigns one element of the array to `foundedBeforeYear`, which is a variable that is locally scoped to the example's `Main` method.</span></span> <span data-ttu-id="dd5c6-110">由于本地范围变量可用于 lambda 表达式，因此传递给方法的 lambda 表达式 <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> 可以为 `HockeyTeam` 在该年份或之前的每个团队返回一个对象。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-110">Because locally scoped variables are available to a lambda expression, the lambda expression passed to the <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> method is able to return a `HockeyTeam` object for each team founded on or before that year.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb" id="Snippet3":::
  
   
  
## Examples  
 <span data-ttu-id="dd5c6-111">下面的代码示例使用 <xref:System.Predicate%601> 带有方法的委托 <xref:System.Array.Find%2A?displayProperty=nameWithType> 来搜索 <xref:System.Drawing.Point> 结构数组。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-111">The following code example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A?displayProperty=nameWithType> method to search an array of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="dd5c6-112">该示例显式定义一个 <xref:System.Predicate%601> 名为 `predicate` 的委托，并为其分配一个名为的方法，该方法在的 `FindPoints` `true` 产品 <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> 和 <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> 字段大于100000时返回。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-112">The example explicitly defines a <xref:System.Predicate%601> delegate named `predicate` and assigns it a method named `FindPoints` that returns `true` if the product of the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> and <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> fields is greater than 100,000.</span></span> <span data-ttu-id="dd5c6-113">请注意，可以使用 lambda 表达式而不是显式定义类型的委托 <xref:System.Predicate%601> ，如第二个示例所示。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-113">Note that it is customary to use a lambda expression rather than to explicitly define a delegate of type <xref:System.Predicate%601>, as the second example illustrates.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb" id="Snippet4":::
  
 <span data-ttu-id="dd5c6-114">下面的示例与前面的示例相同，不同之处在于它使用 lambda 表达式来表示 <xref:System.Predicate%601> 委托。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-114">The following example is identical to the previous example, except that it uses a lambda expression to represent the <xref:System.Predicate%601> delegate.</span></span>  <span data-ttu-id="dd5c6-115">数组的每个元素 `points` 都将传递给 lambda 表达式，直到表达式查找满足搜索条件的元素。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-115">Each element of the `points` array is passed to the lambda expression until the expression finds an element that meets the search criteria.</span></span> <span data-ttu-id="dd5c6-116">在这种情况下， `true` 如果 X 和 Y 字段的乘积大于100000，则 lambda 表达式将返回。</span><span class="sxs-lookup"><span data-stu-id="dd5c6-116">In this case, the lambda expression returns `true` if the product of the X and Y fields is greater than 100,000.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb" id="Snippet2"::: 
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
