<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1cf9260a51e5ad0b736effc0556c650f8ced5e5d" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89721716" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f6844-101">为 <see cref="T:System.Span`1" /> 的元素提供枚举器。</span><span class="sxs-lookup"><span data-stu-id="f6844-101">Provides an enumerator for the elements of a <see cref="T:System.Span`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="f6844-102">C # 语言的 c # [foreach](/dotnet/csharp/language-reference/keywords/foreach-in) 和 [For Each .。。](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) Visual Basic 中的下一个构造隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="f6844-102">The C# [foreach](/dotnet/csharp/language-reference/keywords/foreach-in) of the C# language and the [For Each...Next](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) construct in Visual Basic hides the complexity of enumerators.</span></span> <span data-ttu-id="f6844-103">建议使用或，而不是直接操作枚举器 `foreach` `For Each...Next` 。</span><span class="sxs-lookup"><span data-stu-id="f6844-103">Instead of directly manipulating the enumerator, using `foreach` or `For Each...Next` is recommended.</span></span> 

<span data-ttu-id="f6844-104">最初，枚举器位于中第一个元素之前 <xref:System.Span%601> 。</span><span class="sxs-lookup"><span data-stu-id="f6844-104">Initially, the enumerator is positioned before the first element in the <xref:System.Span%601>.</span></span> <span data-ttu-id="f6844-105">在此位置上，未定义 <xref:System.Span%601.Enumerator.Current>。</span><span class="sxs-lookup"><span data-stu-id="f6844-105">At this position, <xref:System.Span%601.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="f6844-106">在读取的 <xref:System.Span%601.Enumerator.MoveNext%2A> 值之前，必须调用以将枚举器前进到中的第一项 <xref:System.Span%601> <xref:System.Span%601.Enumerator.Current> 。</span><span class="sxs-lookup"><span data-stu-id="f6844-106">You must call <xref:System.Span%601.Enumerator.MoveNext%2A> to advance the enumerator to the first item in the <xref:System.Span%601> before reading the value of <xref:System.Span%601.Enumerator.Current>.</span></span>

<span data-ttu-id="f6844-107"><xref:System.Span%601.Enumerator.Current> 在调用之前，返回相同的值 <xref:System.Span%601.Enumerator.MoveNext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f6844-107"><xref:System.Span%601.Enumerator.Current> returns the same value until <xref:System.Span%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="f6844-108"><xref:System.Span%601.Enumerator.MoveNext%2A> 设置 <xref:System.Span%601.Enumerator.Current> 为中的下一项 <xref:System.Span%601> 。</span><span class="sxs-lookup"><span data-stu-id="f6844-108"><xref:System.Span%601.Enumerator.MoveNext%2A> sets <xref:System.Span%601.Enumerator.Current> to the next item in the <xref:System.Span%601>.</span></span>

<span data-ttu-id="f6844-109">如果 <xref:System.Span%601.Enumerator.MoveNext%2A> 传递的末尾，则 <xref:System.Span%601> <xref:System.Span%601.Enumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="f6844-109">If <xref:System.Span%601.Enumerator.MoveNext%2A> passes the end of the <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="f6844-110">当枚举器处于此状态时，对的后续调用 <xref:System.Span%601.Enumerator.MoveNext%2A> 也将返回 `false` 并且未 <xref:System.Span%601.Enumerator.Current> 定义。</span><span class="sxs-lookup"><span data-stu-id="f6844-110">When the enumerator is at this state, subsequent calls to <xref:System.Span%601.Enumerator.MoveNext%2A> also return `false` and <xref:System.Span%601.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="f6844-111">您不能 <xref:System.Span%601.Enumerator.Current> 再次将设置为中的第一项 <xref:System.Span%601> ; 您必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="f6844-111">You cannot set <xref:System.Span%601.Enumerator.Current> to the first item in the <xref:System.Span%601> again; you must create a new enumerator instance instead.</span></span> 

<span data-ttu-id="f6844-112">枚举器没有对的独占访问权限 <xref:System.Span%601> 。</span><span class="sxs-lookup"><span data-stu-id="f6844-112">The enumerator does not have exclusive access to the <xref:System.Span%601>.</span></span> <span data-ttu-id="f6844-113">此外，还可以修改范围所基于的基础数据。</span><span class="sxs-lookup"><span data-stu-id="f6844-113">In addition, the underlying data on which the span is based can also be modified.</span></span> <span data-ttu-id="f6844-114">因此，在范围内进行枚举本质上并不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="f6844-114">Therefore, enumerating through a span is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="f6844-115">若要保证枚举过程中的线程安全，必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="f6844-115">To guarantee thread safety during enumeration, you must implement your own synchronization.</span></span> <span data-ttu-id="f6844-116">例如，下面的代码具有争用条件。</span><span class="sxs-lookup"><span data-stu-id="f6844-116">For example, the following code has a race condition.</span></span> <span data-ttu-id="f6844-117">它不会确保在执行方法之前枚举跨距 `ClearContents` 。</span><span class="sxs-lookup"><span data-stu-id="f6844-117">It does not ensure that the span will be enumerated before the `ClearContents` method executes.</span></span> <span data-ttu-id="f6844-118">因此，在枚举范围期间将清除基础数组：</span><span class="sxs-lookup"><span data-stu-id="f6844-118">As a result, the underlying array is cleared during enumeration of the span:</span></span>

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/Program.cs)]

<span data-ttu-id="f6844-119">如果在枚举范围之前同步对数组的访问，则在下面的示例中，方法的修改后的版本将 `EnumerateSpan` 不会 `ClearContents` 修改基础范围内的数据。</span><span class="sxs-lookup"><span data-stu-id="f6844-119">If you synchronize access to the array before enumerating the span, as the revised version of the `EnumerateSpan` method does in the following example, the `ClearContents` method doesn't modify underlying span data during enumeration.</span></span> <span data-ttu-id="f6844-120">请注意，该示例将锁定范围所基于的基础数组。</span><span class="sxs-lookup"><span data-stu-id="f6844-120">Note that the example locks the underlying array on which the span is based.</span></span>  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/Program.cs#1)]

<span data-ttu-id="f6844-121">不同于 .NET 中的其他枚举器结构， <xref:System.Span%601.Enumerator> ：</span><span class="sxs-lookup"><span data-stu-id="f6844-121">Unlike some other enumerator structures in .NET, the <xref:System.Span%601.Enumerator>:</span></span>

- <span data-ttu-id="f6844-122">不实现 <xref:System.Collections.IEnumerator> 或 <xref:System.Collections.Generic.IEnumerator%601> 接口。</span><span class="sxs-lookup"><span data-stu-id="f6844-122">Does not implement the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator%601> interface.</span></span> <span data-ttu-id="f6844-123">这是因为 <xref:System.Span%601.Enumerator> 是 [ref 结构](/dotnet/csharp/reference-semantics-with-value-types#ref-struct-type)。</span><span class="sxs-lookup"><span data-stu-id="f6844-123">This is because <xref:System.Span%601.Enumerator> is a [ref struct](/dotnet/csharp/reference-semantics-with-value-types#ref-struct-type).</span></span>

- <span data-ttu-id="f6844-124">不包括 `Reset` 方法，该方法可将枚举数设置为其在范围中第一个元素之前的初始位置。</span><span class="sxs-lookup"><span data-stu-id="f6844-124">Does not include a `Reset` method, which can set the enumerator to its initial position before the first element in the span.</span></span> <span data-ttu-id="f6844-125"> (<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> 方法必须作为接口的一部分来实现，但大多数实现者会引发异常或不提供实现。 ) </span><span class="sxs-lookup"><span data-stu-id="f6844-125">(The <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> method must be implemented as part of the interface, but most implementors either throw an exception or provide no implementation.)</span></span> 
 
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public ref T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f6844-126">获取对枚举器当前位置的项目的引用。</span><span class="sxs-lookup"><span data-stu-id="f6844-126">Gets a reference to the item at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="f6844-127"><see cref="T:System.Span`1" /> 中位于该枚举数当前位置的元素。</span><span class="sxs-lookup"><span data-stu-id="f6844-127">The element in the <see cref="T:System.Span`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="f6844-128">`Current` 在下列任一情况下均未定义：</span><span class="sxs-lookup"><span data-stu-id="f6844-128">`Current` is undefined under either of the following conditions:</span></span> 

- <span data-ttu-id="f6844-129">在创建枚举器后，该枚举器将置于范围中第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="f6844-129">Immediately after the enumerator is created, the enumerator is positioned before the first element in the span.</span></span> <span data-ttu-id="f6844-130"><xref:System.Span%601.Enumerator.MoveNext%2A> 在读取的值之前，必须调用以将枚举数前移到跨距的第一个元素 `Current` 。</span><span class="sxs-lookup"><span data-stu-id="f6844-130"><xref:System.Span%601.Enumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the span before reading the value of `Current`.</span></span>

- <span data-ttu-id="f6844-131">对返回的的最后一个调用 <xref:System.Span%601.Enumerator.MoveNext%2A> `false` ，指示范围的结束。</span><span class="sxs-lookup"><span data-stu-id="f6844-131">The last call to <xref:System.Span%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the span.</span></span> 

<span data-ttu-id="f6844-132">`Current` 在调用之前，返回相同的值 <xref:System.Span%601.Enumerator.MoveNext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f6844-132">`Current` returns the same value until <xref:System.Span%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="f6844-133"><xref:System.Span%601.Enumerator.MoveNext%2A> 设置 `Current` 为范围中的下一项。</span><span class="sxs-lookup"><span data-stu-id="f6844-133"><xref:System.Span%601.Enumerator.MoveNext%2A> sets `Current` to the next item in the span.</span></span> 

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f6844-134">将枚举器推进到 <see cref="T:System.Span`1" /> 的下一项。</span><span class="sxs-lookup"><span data-stu-id="f6844-134">Advances the enumerator to the next item of the <see cref="T:System.Span`1" />.</span></span></summary>
        <returns><span data-ttu-id="f6844-135">如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已通过范围的末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f6844-135"><see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the span has been passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="f6844-136">创建枚举器后，该枚举数将定位到范围中的第一个元素之前，第一次调用会将 `MoveNext` 枚举数前移到范围中的第一项。</span><span class="sxs-lookup"><span data-stu-id="f6844-136">After an enumerator is created, it is positioned before the first element in the span, and the first call to `MoveNext` advances the enumerator to the first item in the span.</span></span> 

<span data-ttu-id="f6844-137">如果 `MoveNext` 越过范围的末尾，则 `MoveNext` 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="f6844-137">If `MoveNext` passes the end of the span, `MoveNext` returns `false`.</span></span> <span data-ttu-id="f6844-138">在此状态下，对的后续调用也将 `MoveNext` 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="f6844-138">When the enumerator is at this state, subsequent calls to `MoveNext` also return `false`.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
