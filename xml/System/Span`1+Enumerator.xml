<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7aa2692c8ca1176b265461b7f5cf4d86c9b836c0" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83962114" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="T:System.Span`1" /> 的元素提供枚举器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

语言的[foreach](/dotnet/csharp/language-reference/keywords/foreach-in)和 For Each ... C# C# [For Each...Next](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)Visual Basic 中的下一个构造隐藏了枚举器的复杂性。 建议使用 `foreach` 或 `For Each...Next`，而不是直接操作枚举器。 

最初，枚举器定位在 <xref:System.Span%601>中第一个元素之前。 在此位置上，未定义 <xref:System.Span%601.Enumerator.Current>。 在读取 <xref:System.Span%601.Enumerator.Current>的值之前，必须调用 <xref:System.Span%601.Enumerator.MoveNext%2A> 以将枚举数前移到 <xref:System.Span%601> 中的第一项。

<xref:System.Span%601.Enumerator.Current> 在调用 <xref:System.Span%601.Enumerator.MoveNext%2A> 之前返回相同的值。 <xref:System.Span%601.Enumerator.MoveNext%2A> 将 <xref:System.Span%601.Enumerator.Current> 设置到 <xref:System.Span%601>中的下一项。

如果 <xref:System.Span%601.Enumerator.MoveNext%2A> 越过 <xref:System.Span%601>的末尾，<xref:System.Span%601.Enumerator.MoveNext%2A> 将返回 `false`。 当枚举器处于此状态时，对 <xref:System.Span%601.Enumerator.MoveNext%2A> 的后续调用也将返回 `false` 并且 <xref:System.Span%601.Enumerator.Current> 未定义。 不能再次将 <xref:System.Span%601.Enumerator.Current> 设置到 <xref:System.Span%601> 中的第一项;必须改为创建新的枚举器实例。 

枚举器没有对 <xref:System.Span%601>的独占访问权限。 此外，还可以修改范围所基于的基础数据。 因此，在范围内进行枚举本质上并不是一个线程安全的过程。 若要保证枚举过程中的线程安全，必须实现自己的同步。 例如，下面的代码具有争用条件。 这并不能确保在 `ClearContents` 方法执行之前枚举跨距。 因此，在枚举范围期间将清除基础数组：

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/Program.cs)]

如果在枚举范围之前同步对数组的访问，则在下面的示例中，由于 `EnumerateSpan` 方法的修改后的版本，`ClearContents` 方法不会修改枚举过程中的基础范围数据。 请注意，该示例将锁定范围所基于的基础数组。  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/Program.cs#1)]

不同于 .NET 中的其他枚举器结构，<xref:System.Span%601.Enumerator>：

- 不实现 <xref:System.Collections.IEnumerator> 或 <xref:System.Collections.Generic.IEnumerator%601> 接口。 这是因为 <xref:System.Span%601.Enumerator> 是[ref 结构](/dotnet/csharp/reference-semantics-with-value-types#ref-struct-type)。

- 不包含 `Reset` 方法，该方法可将枚举数设置为其在范围中第一个元素之前的初始位置。 （<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> 方法必须作为接口的一部分来实现，但大多数实现者会引发异常或不提供实现。） 
 
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public ref T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对枚举器当前位置的项目的引用。</summary>
        <value><see cref="T:System.Span`1" /> 中位于该枚举数当前位置的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

在下列任一情况下，不定义 `Current`： 

- 在创建枚举器后，该枚举器将置于范围中第一个元素之前。 在读取 `Current`的值之前，必须调用 <xref:System.Span%601.Enumerator.MoveNext%2A> 以将枚举数前移到跨距的第一个元素。

- 对 <xref:System.Span%601.Enumerator.MoveNext%2A> 的最后一次调用返回了 `false`，指示范围的结束。 

`Current` 在调用 <xref:System.Span%601.Enumerator.MoveNext%2A> 之前返回相同的值。 <xref:System.Span%601.Enumerator.MoveNext%2A> 将 `Current` 设置为范围中的下一项。 

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举器推进到 <see cref="T:System.Span`1" /> 的下一项。</summary>
        <returns>如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已通过范围的末尾，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

创建枚举器后，该枚举数将定位在范围中的第一个元素之前，对的第一次调用 `MoveNext` 将枚举数前移到该范围中的第一项。 

如果 `MoveNext` 通过跨度的末尾，则 `MoveNext` 返回 `false`。 当枚举器处于此状态时，对 `MoveNext` 的后续调用也将返回 `false`。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
