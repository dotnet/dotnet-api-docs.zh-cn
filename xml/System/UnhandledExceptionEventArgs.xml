<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a45398a475743e62174acad81570b17dead8fa88" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91912993" /></Metadata><TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnhandledExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f571a-101">为以下情况下引发的事件提供数据：存在一个不是在任何应用程序域中处理的异常。</span><span class="sxs-lookup"><span data-stu-id="f571a-101">Provides data for the event that is raised when there is an exception that is not handled in any application domain.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f571a-102"><xref:System.UnhandledExceptionEventArgs> 提供对异常对象的访问，以及指示公共语言运行时是否正在终止的标志。</span><span class="sxs-lookup"><span data-stu-id="f571a-102"><xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</span></span> <span data-ttu-id="f571a-103"><xref:System.UnhandledExceptionEventArgs>是为事件传入的参数之一 <xref:System.UnhandledExceptionEventHandler> <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="f571a-103">The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="f571a-104">有关事件处理程序委托的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="f571a-104">For more information about event handler delegates, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberSignature Language="F#" Value="new UnhandledExceptionEventArgs : obj * bool -&gt; UnhandledExceptionEventArgs" Usage="new System.UnhandledExceptionEventArgs (exception, isTerminating)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="f571a-105">未处理的异常。</span><span class="sxs-lookup"><span data-stu-id="f571a-105">The exception that is not handled.</span></span></param>
        <param name="isTerminating"><span data-ttu-id="f571a-106">如果运行库即将终止，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f571a-106"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f571a-107">使用异常对象和公共语言运行时终止标志初始化 <see cref="T:System.UnhandledExceptionEventArgs" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f571a-107">Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionObject : obj" Usage="System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f571a-108">获取未处理的异常对象。</span><span class="sxs-lookup"><span data-stu-id="f571a-108">Gets the unhandled exception object.</span></span></summary>
        <value><span data-ttu-id="f571a-109">未处理的异常对象。</span><span class="sxs-lookup"><span data-stu-id="f571a-109">The unhandled exception object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f571a-110">此属性返回类型的对象， <xref:System.Object> 而不是派生自的对象 <xref:System.Exception> 。</span><span class="sxs-lookup"><span data-stu-id="f571a-110">This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>.</span></span> <span data-ttu-id="f571a-111">尽管公共语言规范要求所有异常类型都派生自 <xref:System.Exception> ，但方法可能会引发异常，其中的对象不是从派生的 <xref:System.Exception> 。</span><span class="sxs-lookup"><span data-stu-id="f571a-111">Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>.</span></span> <span data-ttu-id="f571a-112">可以执行以下操作来处理此异常：</span><span class="sxs-lookup"><span data-stu-id="f571a-112">You can do the following to work with this exception:</span></span>  
  
-   <span data-ttu-id="f571a-113">将  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> 值为的特性应用于 <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> `true` 包含事件处理程序的程序集。</span><span class="sxs-lookup"><span data-stu-id="f571a-113">Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> value of `true` to the assembly that contains the event handler.</span></span> <span data-ttu-id="f571a-114">这会包装不是从对象中的类派生的所有异常 <xref:System.Exception> <xref:System.Runtime.CompilerServices.RuntimeWrappedException> 。</span><span class="sxs-lookup"><span data-stu-id="f571a-114">This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span> <span data-ttu-id="f571a-115">然后，可以安全地将 c # 中的 (转换 ) 或将) Visual Basic 中的 (转换为 <xref:System.Exception> 对象，并从属性中检索原始 exception 对象 <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="f571a-115">You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="f571a-116">请注意，某些编译器（如 c # 和 Visual Basic 编译器）会自动应用此特性。</span><span class="sxs-lookup"><span data-stu-id="f571a-116">Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</span></span>  
  
-   <span data-ttu-id="f571a-117">将此属性返回的对象强制转换为 <xref:System.Exception> 对象。</span><span class="sxs-lookup"><span data-stu-id="f571a-117">Cast the object returned by this property to an <xref:System.Exception> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f571a-118">下面的示例演示了该 <xref:System.AppDomain.UnhandledException> 事件。</span><span class="sxs-lookup"><span data-stu-id="f571a-118">The following example demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="f571a-119">它定义了一个事件处理程序，该事件处理程序在 `MyHandler` 默认应用程序域中引发未经处理的异常时调用。</span><span class="sxs-lookup"><span data-stu-id="f571a-119">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="f571a-120">然后，它将引发两个异常。</span><span class="sxs-lookup"><span data-stu-id="f571a-120">It then throws two exceptions.</span></span> <span data-ttu-id="f571a-121">第一个由 **try/catch** 块处理。</span><span class="sxs-lookup"><span data-stu-id="f571a-121">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="f571a-122">第二个未处理并在 `MyHandle` 应用程序终止前调用例程。</span><span class="sxs-lookup"><span data-stu-id="f571a-122">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f571a-123">指示公共语言运行时是否即将终止。</span><span class="sxs-lookup"><span data-stu-id="f571a-123">Indicates whether the common language runtime is terminating.</span></span></summary>
        <value><span data-ttu-id="f571a-124">如果运行库即将终止，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f571a-124"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f571a-125">从 .NET Framework 版本2.0 开始， `true` 除非使用应用程序兼容性标志恢复为版本1.0 和1.1 的行为，否则，此属性将为大多数未经处理的异常返回。</span><span class="sxs-lookup"><span data-stu-id="f571a-125">Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</span></span> <span data-ttu-id="f571a-126">原因在于，线程中大多数未经处理的异常（包括线程池线程）都可以正常继续，这通常会导致应用程序终止。</span><span class="sxs-lookup"><span data-stu-id="f571a-126">The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</span></span> <span data-ttu-id="f571a-127">有关详细信息，包括运行时未终止的事例的列表，请参阅 [托管线程中的异常](/dotnet/standard/threading/exceptions-in-managed-threads)。</span><span class="sxs-lookup"><span data-stu-id="f571a-127">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](/dotnet/standard/threading/exceptions-in-managed-threads).</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="f571a-128">版本信息</span><span class="sxs-lookup"><span data-stu-id="f571a-128">Version Information</span></span>  
 <span data-ttu-id="f571a-129">以下内容适用于 .NET Framework 版本1.0 和1.1：此属性在 `true` 收到异常时返回，但不由应用程序的主线程处理时返回。</span><span class="sxs-lookup"><span data-stu-id="f571a-129">The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread.</span></span> <span data-ttu-id="f571a-130">`true`如果非托管线程正在执行托管代码，并收到未经处理的异常，则此属性也会返回。</span><span class="sxs-lookup"><span data-stu-id="f571a-130">This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception.</span></span> <span data-ttu-id="f571a-131">最后，此属性将 `false` 为应用程序创建的线程池线程和托管线程返回，因为版本1.0 和1.1 将捕获此类线程中未经处理的异常并将其忽略。</span><span class="sxs-lookup"><span data-stu-id="f571a-131">Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
