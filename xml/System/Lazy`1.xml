<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="96990d5a81ca3ed80de2af09553b28aa88c41ab6" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100304475" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Lazy`1&lt;T&gt; extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="dc37a-101">正在延迟初始化的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="dc37a-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="dc37a-102">提供对延迟初始化的支持。</span><span class="sxs-lookup"><span data-stu-id="dc37a-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-103">使用延迟初始化来延迟创建大型或消耗大量资源的对象，或者执行大量占用资源的任务，尤其是在程序的生存期内可能不会发生这种创建或执行时。</span><span class="sxs-lookup"><span data-stu-id="dc37a-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="dc37a-104">若要为迟缓初始化做好准备，请创建的实例 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="dc37a-105">你创建的对象的类型参数 <xref:System.Lazy%601> 指定你希望延迟初始化的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="dc37a-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="dc37a-106">用于创建对象的构造函数 <xref:System.Lazy%601> 确定初始化的特征。</span><span class="sxs-lookup"><span data-stu-id="dc37a-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="dc37a-107">首次访问 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时出现延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="dc37a-108">在大多数情况下，选择构造函数取决于你对两个问题的回答：</span><span class="sxs-lookup"><span data-stu-id="dc37a-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="dc37a-109">是否会从多个线程访问延迟初始化的对象？</span><span class="sxs-lookup"><span data-stu-id="dc37a-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="dc37a-110">如果是这样，则 <xref:System.Lazy%601> 对象可能会在任何线程上创建它。</span><span class="sxs-lookup"><span data-stu-id="dc37a-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="dc37a-111">您可以使用一个简单的构造函数，其默认行为是创建一个线程安全的 <xref:System.Lazy%601> 对象，以便在有多少线程尝试访问它时，只创建一个延迟实例化对象的实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="dc37a-112">若要创建 <xref:System.Lazy%601> 不是线程安全的对象，您必须使用一个构造函数，该构造函数允许您指定无线程安全。</span><span class="sxs-lookup"><span data-stu-id="dc37a-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="dc37a-113">使 <xref:System.Lazy%601> 对象线程安全不会保护延迟初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="dc37a-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="dc37a-114">如果多个线程可以访问延迟初始化的对象，则必须使其属性和方法对于多线程访问是安全的。</span><span class="sxs-lookup"><span data-stu-id="dc37a-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="dc37a-115">迟缓初始化是否需要大量代码，或延迟初始化的对象是否具有无参数的构造函数，该构造函数可执行所需的所有操作，并且不会引发异常？</span><span class="sxs-lookup"><span data-stu-id="dc37a-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a parameterless constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="dc37a-116">如果需要编写初始化代码或需要处理异常，请使用采用工厂方法的构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="dc37a-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="dc37a-117">在工厂方法中编写初始化代码。</span><span class="sxs-lookup"><span data-stu-id="dc37a-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="dc37a-118">下表根据这两个因素显示要选择的构造函数：</span><span class="sxs-lookup"><span data-stu-id="dc37a-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="dc37a-119">将通过访问对象</span><span class="sxs-lookup"><span data-stu-id="dc37a-119">Object will be accessed by</span></span>|<span data-ttu-id="dc37a-120">如果 (无参数构造函数，则不需要初始化代码) ，请使用</span><span class="sxs-lookup"><span data-stu-id="dc37a-120">If no initialization code is required (parameterless constructor), use</span></span>|<span data-ttu-id="dc37a-121">如果需要初始化代码，请使用</span><span class="sxs-lookup"><span data-stu-id="dc37a-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="dc37a-122">多个线程</span><span class="sxs-lookup"><span data-stu-id="dc37a-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="dc37a-123">一个线程</span><span class="sxs-lookup"><span data-stu-id="dc37a-123">One thread</span></span>|<span data-ttu-id="dc37a-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> 如果 `isThreadSafe` 设置为，则为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="dc37a-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 如果 `isThreadSafe` 设置为，则为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="dc37a-126">您可以使用 lambda 表达式来指定工厂方法。</span><span class="sxs-lookup"><span data-stu-id="dc37a-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="dc37a-127">这会将所有初始化代码保存在一个位置。</span><span class="sxs-lookup"><span data-stu-id="dc37a-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="dc37a-128">Lambda 表达式捕获上下文，包括传递给延迟初始化的对象的构造函数的所有自变量。</span><span class="sxs-lookup"><span data-stu-id="dc37a-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="dc37a-129">**异常缓存** 使用工厂方法时，将缓存异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="dc37a-130">也就是说，如果工厂方法在第一次尝试访问对象的属性时引发异常，则 <xref:System.Lazy%601.Value%2A> <xref:System.Lazy%601> 在每次后续尝试时都会引发相同的异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="dc37a-131">这可确保对属性的每个调用都 <xref:System.Lazy%601.Value%2A> 生成相同的结果，并避免在不同的线程获取不同的结果时可能出现的细微错误。</span><span class="sxs-lookup"><span data-stu-id="dc37a-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="dc37a-132"><xref:System.Lazy%601>对于 `T` 原本会在某个较早的时间点（通常是在启动过程中）进行初始化的实际。</span><span class="sxs-lookup"><span data-stu-id="dc37a-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="dc37a-133">在此之前的阶段失败通常是致命的。</span><span class="sxs-lookup"><span data-stu-id="dc37a-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="dc37a-134">如果有可恢复故障的可能性，则建议将重试逻辑生成到 (在此示例中，即工厂方法) ，就像在不使用延迟初始化的情况下一样。</span><span class="sxs-lookup"><span data-stu-id="dc37a-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="dc37a-135">**锁定的替代方法** 在某些情况下，您可能希望避免 <xref:System.Lazy%601> 对象默认锁定行为的系统开销。</span><span class="sxs-lookup"><span data-stu-id="dc37a-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="dc37a-136">在极少数情况下，可能会出现死锁。</span><span class="sxs-lookup"><span data-stu-id="dc37a-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="dc37a-137">在这种情况下，可以使用 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数，并指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc37a-138">这使 <xref:System.Lazy%601> 对象可以在多个线程上的每个线程上创建延迟初始化的对象的副本（如果线程同时调用了 <xref:System.Lazy%601.Value%2A> 属性）。</span><span class="sxs-lookup"><span data-stu-id="dc37a-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="dc37a-139"><xref:System.Lazy%601>对象确保所有线程都使用延迟初始化的对象的相同实例，并放弃未使用的实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="dc37a-140">因此，降低锁定开销的代价是，程序有时可能会创建和丢弃昂贵对象的额外副本。</span><span class="sxs-lookup"><span data-stu-id="dc37a-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="dc37a-141">在大多数情况下，这种情况不太可能。</span><span class="sxs-lookup"><span data-stu-id="dc37a-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="dc37a-142"><xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和构造函数的示例 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 说明了此行为。</span><span class="sxs-lookup"><span data-stu-id="dc37a-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dc37a-143">如果指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> ，则永远不会缓存异常，即使指定了工厂方法也是如此。</span><span class="sxs-lookup"><span data-stu-id="dc37a-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="dc37a-144">**等效构造函数** 除了允许使用 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 以外，和 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数还可以复制其他构造函数的功能。</span><span class="sxs-lookup"><span data-stu-id="dc37a-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="dc37a-145">下表显示产生等效行为的参数值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="dc37a-146">若要创建 <xref:System.Lazy%601> 对象，</span><span class="sxs-lookup"><span data-stu-id="dc37a-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="dc37a-147">对于具有参数的构造函数 `LazyThreadSafetyMode` `mode` ，将设置 `mode` 为</span><span class="sxs-lookup"><span data-stu-id="dc37a-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="dc37a-148">对于具有布尔参数的构造函数 `isThreadSafe` ，将设置 `isThreadSafe` 为</span><span class="sxs-lookup"><span data-stu-id="dc37a-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="dc37a-149">对于没有线程安全参数的构造函数</span><span class="sxs-lookup"><span data-stu-id="dc37a-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="dc37a-150">完全线程安全;使用锁定来确保只有一个线程初始化值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="dc37a-151">所有此类构造函数都是完全线程安全的。</span><span class="sxs-lookup"><span data-stu-id="dc37a-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="dc37a-152">不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="dc37a-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="dc37a-153">不适用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-153">Not applicable.</span></span>|  
|<span data-ttu-id="dc37a-154">完全线程安全;用于初始化值的线程争用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="dc37a-155">不适用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-155">Not applicable.</span></span>|<span data-ttu-id="dc37a-156">不适用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="dc37a-157">**其他功能** 有关将用于 <xref:System.Lazy%601> 线程静态字段或作为属性的后备存储的信息，请参阅 [迟缓初始化](/dotnet/framework/performance/lazy-initialization)。</span><span class="sxs-lookup"><span data-stu-id="dc37a-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](/dotnet/framework/performance/lazy-initialization).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-158">下面的示例演示如何使用 <xref:System.Lazy%601> 类来提供从多个线程访问的迟缓初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-159">该示例使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="dc37a-160">它还演示了如何使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数 (`true` 为) 指定 `isThreadSafe` (并为 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>) 指定了构造函数 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `mode` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="dc37a-161">若要切换到其他构造函数，只需更改注释掉的构造函数即可。</span><span class="sxs-lookup"><span data-stu-id="dc37a-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="dc37a-162">有关使用相同构造函数演示异常缓存的示例，请参见 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-163">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="dc37a-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="dc37a-164">代码的四个关键部分说明了如何创建初始值设定项、工厂方法、实际初始化和类的构造函数，在 `LargeObject` 创建对象时，将显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="dc37a-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="dc37a-165">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="dc37a-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="dc37a-166">工厂方法显示对象的创建，其中包含一个用于进一步初始化的占位符：</span><span class="sxs-lookup"><span data-stu-id="dc37a-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="dc37a-167">请注意，前两个代码部分可以使用 lambda 函数组合在一起，如下所示：</span><span class="sxs-lookup"><span data-stu-id="dc37a-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="dc37a-168">该示例将暂停，以指示在延迟初始化之前可能会出现不确定的时间段。</span><span class="sxs-lookup"><span data-stu-id="dc37a-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="dc37a-169">按 **enter** 键时，此示例将创建并启动三个线程。</span><span class="sxs-lookup"><span data-stu-id="dc37a-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="dc37a-170">`ThreadProc`所有三个线程使用的方法都调用 <xref:System.Lazy%601.Value%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="dc37a-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="dc37a-171">第一次出现此情况时，将 `LargeObject` 创建实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="dc37a-172">类的构造函数 `LargeObject` （包括代码的最后一个键部分）显示一条消息，并记录初始化线程的标识。</span><span class="sxs-lookup"><span data-stu-id="dc37a-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="dc37a-173">程序的输出显示在完整代码列表的末尾。</span><span class="sxs-lookup"><span data-stu-id="dc37a-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-174">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-175">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="dc37a-176">默认情况下，类的所有公共和受保护成员 <see cref="T:System.Lazy`1" /> 都是线程安全的，可从多个线程并发使用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="dc37a-177">使用类型的构造函数的参数时，可以根据需要删除和每个线程安全保证。</span><span class="sxs-lookup"><span data-stu-id="dc37a-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-178">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc37a-179">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc37a-180">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="dc37a-181">发生迟缓初始化时，使用目标类型的无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-181">When lazy initialization occurs, the parameterless constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-182">使用此构造函数创建的实例可以同时从多个线程使用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="dc37a-183"><xref:System.Lazy%601>使用此构造函数初始化的实例的线程安全模式为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc37a-184">线程安全模式描述当多个线程尝试初始化实例时的行为 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="dc37a-185"><xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="dc37a-186">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="dc37a-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-187">下面的示例演示如何使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="dc37a-188">它还说明了如何使用 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 构造函数 (`true` 为) 指定 `isThreadSafe` (并为 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>) 指定了构造函数 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `mode` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="dc37a-189">若要切换到其他构造函数，只需更改注释掉的构造函数即可。</span><span class="sxs-lookup"><span data-stu-id="dc37a-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="dc37a-190">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="dc37a-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="dc37a-191">本示例中的两个关键代码行是创建初始值设定项和实际初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="dc37a-192">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="dc37a-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="dc37a-193">该示例创建并启动三个在对象上阻塞的线程 <xref:System.Threading.ManualResetEvent> ，因此该示例可以一次释放线程。</span><span class="sxs-lookup"><span data-stu-id="dc37a-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="dc37a-194">`ThreadProc`所有三个线程使用的方法都调用 <xref:System.Lazy%601.Value%2A> 属性以获取 `LargeObject` 实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="dc37a-195"><xref:System.Lazy%601>类提供锁定，以便只允许一个线程创建 `LargeObject` 实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="dc37a-196">该示例演示了其他线程都获得相同的实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-197">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-198">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-199">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="dc37a-200">若要使此实例可同时由多个线程使用，则为 <see langword="true" />；若要使实例一次只能由一个线程使用，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="dc37a-201">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="dc37a-202">发生迟缓初始化时，使用目标类型的无参数构造函数和指定的初始化模式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-202">When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-203"><xref:System.Lazy%601>如果为，则使用此构造函数初始化的实例的线程安全模式为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `isThreadSafe` `true` ; 否则为 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc37a-204">线程安全模式描述当多个线程尝试初始化实例时的行为 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="dc37a-205">若要指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 模式，请使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-206"><xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="dc37a-207">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="dc37a-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-208">下面的示例演示如何使用此构造函数创建非线程安全的延迟初始值设定项，适用于在同一线程上发生对延迟初始化的对象的所有访问的情况。</span><span class="sxs-lookup"><span data-stu-id="dc37a-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="dc37a-209">它还演示了如何使用 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数 (<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 为指定 `mode` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="dc37a-210">若要切换到其他构造函数，只需更改注释掉的构造函数即可。</span><span class="sxs-lookup"><span data-stu-id="dc37a-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-211">有关演示如何在多线程方案中使用此构造函数 (`true` 为) 指定的代码 `isThreadSafe` ，请参阅 <xref:System.Lazy%601.%23ctor> 构造函数的示例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-212">该示例定义了一个 `LargeObject` 将被延迟初始化的类。</span><span class="sxs-lookup"><span data-stu-id="dc37a-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="dc37a-213">在 `Main` 方法中，该示例创建一个 <xref:System.Lazy%601> 实例，然后暂停。</span><span class="sxs-lookup"><span data-stu-id="dc37a-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="dc37a-214">按 **enter** 键时，此示例将访问实例的 <xref:System.Lazy%601.Value%2A> 属性 <xref:System.Lazy%601> ，这会导致初始化发生。</span><span class="sxs-lookup"><span data-stu-id="dc37a-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="dc37a-215">类的构造函数 `LargeObject` 显示控制台消息。</span><span class="sxs-lookup"><span data-stu-id="dc37a-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-216">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-217">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-218">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="dc37a-219">调用用于在需要时生成延迟初始化值的委托。</span><span class="sxs-lookup"><span data-stu-id="dc37a-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="dc37a-220">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="dc37a-221">出现迟缓初始化时，将使用指定的初始化函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-222">使用此构造函数创建的实例可以同时从多个线程使用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="dc37a-223"><xref:System.Lazy%601>使用此构造函数初始化的实例的线程安全模式为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc37a-224">线程安全模式描述当多个线程尝试初始化实例时的行为 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="dc37a-225">引发的异常 `valueFactory` 将被缓存。</span><span class="sxs-lookup"><span data-stu-id="dc37a-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="dc37a-226">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="dc37a-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-227">下面的示例演示如何使用此构造函数提供异常缓存的延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="dc37a-228">它还演示了如何使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数 (`true` 为) 指定 `isThreadSafe` (并为 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>) 指定了构造函数 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `mode` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="dc37a-229">若要切换到其他构造函数，只需更改注释掉的构造函数即可。</span><span class="sxs-lookup"><span data-stu-id="dc37a-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="dc37a-230">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="dc37a-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="dc37a-231">代码的三个关键部分说明了如何创建初始值设定项、实际初始化和类的构造函数 `LargeObject` ，该构造函数演示了异常缓存。</span><span class="sxs-lookup"><span data-stu-id="dc37a-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="dc37a-232">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="dc37a-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="dc37a-233">该示例创建并启动三个线程。</span><span class="sxs-lookup"><span data-stu-id="dc37a-233">The example creates and starts three threads.</span></span> <span data-ttu-id="dc37a-234">`ThreadProc`所有三个线程使用的方法都调用 <xref:System.Lazy%601.Value%2A> 属性以获取 `LargeObject` 实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="dc37a-235">在类的构造函数中 `LargeObject` ，第三次创建实例时，代码的第三个键部分会引发异常 `LargeObject` ，但此后允许创建实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="dc37a-236">运行该示例时，尝试创建实例的第一个线程将 `LargeObject` 失败，并且将捕获该异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="dc37a-237">您可能希望下一个线程成功创建一个实例，但该 <xref:System.Lazy%601> 对象已缓存了该异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="dc37a-238">因此，所有三个线程都将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-239">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-240">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dc37a-241"><paramref name="valueFactory" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-242">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="dc37a-243">一个枚举值，用于指定线程安全模式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="dc37a-244">初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用 <paramref name="T" /> 的无参数构造函数和指定的线程安全性模式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-245">实例的线程安全模式 <xref:System.Lazy%601> 描述当多个线程尝试初始化实例时的行为 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="dc37a-246"><xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="dc37a-247">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="dc37a-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-248">下面的示例演示如何使用此构造函数创建一个延迟初始值设定项，使多个线程能够以延迟的创建对象。</span><span class="sxs-lookup"><span data-stu-id="dc37a-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="dc37a-249">创建实例时，多个线程可能会成功，但所有线程都使用第一个创建的实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-250">有关演示如何在单线程方案中使用此构造函数 (<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 为) 指定的示例 `mode` ，请参见 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="dc37a-251">有关演示如何使用此构造函数在多线程方案中提供锁定而不是争用条件 (为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>) 指定的示例 `mode` ，请参见 <xref:System.Lazy%601.%23ctor> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-252">该示例定义了一个 `LargeObject` 类，该类将被多个线程中的任意一个线程延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="dc37a-253">代码的三个关键部分说明了如何创建初始值设定项、实际初始化和类的构造函数和终结器 `LargeObject` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="dc37a-254">在方法的开头 `Main` ，此示例创建了 <xref:System.Lazy%601> 一个对象，该对象执行的延迟初始化 `LargeObject` ：</span><span class="sxs-lookup"><span data-stu-id="dc37a-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="dc37a-255">该示例创建并启动三个在对象上阻塞的线程 <xref:System.Threading.ManualResetEvent> ，因此该示例可以一次释放线程。</span><span class="sxs-lookup"><span data-stu-id="dc37a-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="dc37a-256">在 `ThreadProc` 所有三个线程使用的方法中，调用属性会 <xref:System.Lazy%601.Value%2A> 创建 `LargeObject` 实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="dc37a-257">由于指定实例的构造函数 <xref:System.Lazy%601> <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> ，因此允许所有三个线程创建 `LargeObject` 实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="dc37a-258">该示例通过在构造函数和类的终结器中显示控制台消息来演示这一点 `LargeObject` ：</span><span class="sxs-lookup"><span data-stu-id="dc37a-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="dc37a-259">但是， <xref:System.Lazy%601> 对象确保所有线程仅使用一个实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="dc37a-260">该示例的输出显示，所有这三个线程使用同一个实例，还显示可通过垃圾回收来回收其他两个实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-261">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-262">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dc37a-263"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-264">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc37a-265">要使用的已预先初始化的值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="dc37a-266">初始化 <see cref="T:System.Lazy`1" /> 类的新实例，该类使用已预先初始化的指定值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="dc37a-267">使用此构造函数创建的实例可同时由多个线程使用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="dc37a-268">调用用于在需要时生成延迟初始化值的委托。</span><span class="sxs-lookup"><span data-stu-id="dc37a-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="dc37a-269">若要使此实例可同时由多个线程使用，则为 <see langword="true" />；若要使此实例一次只能由一个线程使用，则为  <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="dc37a-270">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="dc37a-271">当延迟初始化发生时，将使用指定的初始化函数和初始化模式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-272"><xref:System.Lazy%601>如果为，则使用此构造函数初始化的实例的线程安全模式为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `isThreadSafe` `true` ; 否则为 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc37a-273">线程安全模式描述当多个线程尝试初始化实例时的行为 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="dc37a-274">若要指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 模式，请使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-275">引发的异常 `valueFactory` 将被缓存。</span><span class="sxs-lookup"><span data-stu-id="dc37a-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="dc37a-276">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="dc37a-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-277">下面的示例演示如何使用此构造函数在具有单个线程的方案中提供具有异常缓存的延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="dc37a-278">它还演示了如何使用  <xref:System.Lazy%601.%23ctor%2A> 构造函数 (<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 为) 指定 `mode` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="dc37a-279">若要切换到该构造函数，只需更改注释掉的构造函数即可。</span><span class="sxs-lookup"><span data-stu-id="dc37a-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-280">有关演示如何在多线程方案中使用此构造函数 (`true` 为) 指定的代码 `isThreadSafe` ，请参阅 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 构造函数的示例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-281">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="dc37a-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="dc37a-282">代码的三个关键部分说明了如何创建初始值设定项、实际初始化和类的构造函数 `LargeObject` ，该构造函数演示了异常缓存。</span><span class="sxs-lookup"><span data-stu-id="dc37a-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="dc37a-283">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="dc37a-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="dc37a-284">在对构造函数的调用中， `isThreadSafe` 参数为 `false` ，因此 <xref:System.Lazy%601> 不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="dc37a-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="dc37a-285">由于它不是线程安全的，因此该示例 <xref:System.Lazy%601.Value%2A> 在同一线程上调用了属性三次：</span><span class="sxs-lookup"><span data-stu-id="dc37a-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="dc37a-286">在类的构造函数中 `LargeObject` ，第三次创建实例时，代码的第三个键部分会引发异常 `LargeObject` ，但此后允许创建实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="dc37a-287">运行该示例时，创建实例的第一次尝试 `LargeObject` 失败，并捕获异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="dc37a-288">你可能希望下一次尝试成功，但 <xref:System.Lazy%601> 对象已缓存异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="dc37a-289">因此，所有三次尝试都将引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-290">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-291">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dc37a-292"><paramref name="valueFactory" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-293">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="dc37a-294">调用用于在需要时生成延迟初始化值的委托。</span><span class="sxs-lookup"><span data-stu-id="dc37a-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="dc37a-295">一个枚举值，用于指定线程安全模式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="dc37a-296">初始化 <see cref="T:System.Lazy`1" /> 类的新实例，它使用指定的初始化函数和线程安全模式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-297">实例的线程安全模式 <xref:System.Lazy%601> 描述当多个线程尝试初始化实例时的行为 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="dc37a-298">引发的异常将被 `valueFactory` 缓存，除非 `mode` 是 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dc37a-299">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="dc37a-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dc37a-300">下面的示例演示如何使用此构造函数创建一个延迟初始值设定项，使多个线程能够以延迟的创建对象。</span><span class="sxs-lookup"><span data-stu-id="dc37a-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="dc37a-301">创建实例时，多个线程可能会成功，但所有线程都使用第一个创建的实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="dc37a-302">此外，该示例还演示了在指定时从不缓存异常 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> ，即使是由函数而不是延迟创建的类型的无参数构造函数执行。</span><span class="sxs-lookup"><span data-stu-id="dc37a-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the parameterless constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-303">有关演示如何在单线程方案中使用此构造函数 (<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 为) 指定的示例 `mode` ，请参见 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="dc37a-304">有关演示如何使用此构造函数在多线程方案中提供锁定而不是争用条件 (为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>) 指定的示例 `mode` ，请参见 <xref:System.Lazy%601.%23ctor> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="dc37a-305">该示例定义了一个 `LargeObject` 类，该类将被多个线程中的任意一个线程延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="dc37a-306">代码的四个关键部分说明了如何创建初始值设定项、实际初始化、初始化函数和类的构造函数和终结器 `LargeObject` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="dc37a-307">在方法的开头 `Main` ，此示例创建了 <xref:System.Lazy%601> 一个对象，该对象执行的延迟初始化 `LargeObject` ：</span><span class="sxs-lookup"><span data-stu-id="dc37a-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="dc37a-308">延迟初始值设定项使用函数来执行初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="dc37a-309">在这种情况下，函数是必需的，因为该类没有无参数的构造函数 `LargeObject` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-309">In this case, a function is required because there is no parameterless constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="dc37a-310">该示例创建并启动三个在对象上阻塞的线程 <xref:System.Threading.ManualResetEvent> ，因此该示例可以一次释放线程。</span><span class="sxs-lookup"><span data-stu-id="dc37a-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="dc37a-311">在 `ThreadProc` 所有三个线程使用的方法中，调用属性会 <xref:System.Lazy%601.Value%2A> 创建 `LargeObject` 实例：</span><span class="sxs-lookup"><span data-stu-id="dc37a-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="dc37a-312">在代码的第三个关键部分，将调用迟缓初始化函数来创建 `LargeObject` 实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="dc37a-313">第一次调用该函数时，该函数将引发异常：</span><span class="sxs-lookup"><span data-stu-id="dc37a-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="dc37a-314">对于任何其他 <xref:System.Threading.LazyThreadSafetyMode> 设置，将缓存初始化函数中未经处理的异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="dc37a-315">但是，会 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 取消异常缓存。</span><span class="sxs-lookup"><span data-stu-id="dc37a-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="dc37a-316">该示例的输出表明，后续初始化该对象的尝试将成功。</span><span class="sxs-lookup"><span data-stu-id="dc37a-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-317">异常消息通常出现在指示其他线程已成功初始化对象的消息之后。</span><span class="sxs-lookup"><span data-stu-id="dc37a-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="dc37a-318">这是由于引发和捕获异常而导致的延迟。</span><span class="sxs-lookup"><span data-stu-id="dc37a-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="dc37a-319">由于指定实例的构造函数 <xref:System.Lazy%601> <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> ，因此允许所有三个线程创建 `LargeObject` 实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="dc37a-320">该示例通过在构造函数和类的终结器中显示控制台消息来演示这一点 `LargeObject` ：</span><span class="sxs-lookup"><span data-stu-id="dc37a-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="dc37a-321"><xref:System.Lazy%601>对象确保除了初始化函数引发异常) 的线程外，所有线程 (仅使用一个实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="dc37a-322">该示例的输出显示了此。</span><span class="sxs-lookup"><span data-stu-id="dc37a-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc37a-323">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="dc37a-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="dc37a-324">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="dc37a-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dc37a-325"><paramref name="mode" /> 包含无效值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dc37a-326"><paramref name="valueFactory" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-327">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc37a-328">获取一个值，该值表示是否为该 <see cref="T:System.Lazy`1" /> 实例创建了值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="dc37a-329">如果为此 <see cref="T:System.Lazy`1" /> 实例创建了值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-330">当实例发生延迟初始化时 <xref:System.Lazy%601> ，可能会导致创建值或引发异常。</span><span class="sxs-lookup"><span data-stu-id="dc37a-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="dc37a-331">如果引发异常，则实例的后续行为 <xref:System.Lazy%601> 取决于异常缓存是否生效。</span><span class="sxs-lookup"><span data-stu-id="dc37a-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="dc37a-332">如果该 <xref:System.Lazy%601> 实例是使用未指定初始化函数的构造函数创建的，则异常缓存将不起作用。</span><span class="sxs-lookup"><span data-stu-id="dc37a-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="dc37a-333">再次尝试初始化 <xref:System.Lazy%601> 可能会成功，并且在成功初始化后， <xref:System.Lazy%601.IsValueCreated%2A> 属性将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="dc37a-334">如果 <xref:System.Lazy%601> 实例是使用) 构造函数的参数指定 (指定的初始化函数创建的 `valueFactory` <xref:System.Lazy%601> ，则异常缓存由线程安全模式控制。</span><span class="sxs-lookup"><span data-stu-id="dc37a-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="dc37a-335">如果模式为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 或 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> ，则没有第二次机会初始化该 <xref:System.Lazy%601> 实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="dc37a-336">如果发生异常，且在初始化函数中未处理，则会缓存该异常并在后续访问属性时重新引发该异常 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="dc37a-337">如果引发异常，则不会创建任何值，因此在这种情况下，将 <xref:System.Lazy%601.IsValueCreated%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="dc37a-338">如果模式为，则为 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 运行初始化函数的第一个线程 (或无参数构造函数) 为实例创建值 <xref:System.Lazy%601> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the parameterless constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="dc37a-339">如果初始化函数在一个线程上引发异常，其他线程仍可以尝试初始化该 <xref:System.Lazy%601> 实例。</span><span class="sxs-lookup"><span data-stu-id="dc37a-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="dc37a-340">在创建该值之前，该 <xref:System.Lazy%601.IsValueCreated%2A> 属性将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-341">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberSignature Language="C#" Value="public override string? ToString ();" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc37a-342">创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="dc37a-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="dc37a-343">针对此实例调用 <see cref="P:System.Lazy`1.Value" /> 属性上的 <see cref="M:System.Object.ToString" /> 方法的结果（如果已创建该值的话，即，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性返回 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="dc37a-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="dc37a-344">否则，则为一个指示该值尚未创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="dc37a-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-345">调用此方法不会导致初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="dc37a-346"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> `null` 如果为 `valueFactory` <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数的参数指定的工厂方法返回，则该属性可以在延迟初始化之后 `null` 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="dc37a-347"><see cref="P:System.Lazy`1.Value" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc37a-348">获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="dc37a-349">当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</span><span class="sxs-lookup"><span data-stu-id="dc37a-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc37a-350">如果 <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> 属性为 `false` ，则访问属性将 <xref:System.Lazy%601.Value%2A> 强制初始化。</span><span class="sxs-lookup"><span data-stu-id="dc37a-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="dc37a-351">除了列出的异常之外， <xref:System.Lazy%601.Value%2A> 属性还可以引发由传递给 `valueFactory` <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 或构造函数的参数的工厂方法所引发的任何未经处理的异常 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 。</span><span class="sxs-lookup"><span data-stu-id="dc37a-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="dc37a-352"><see cref="T:System.Lazy`1" /> 实例初始化为使用正在迟缓初始化的类型的无参数构造函数，并且缺少访问该构造函数的权限。</span><span class="sxs-lookup"><span data-stu-id="dc37a-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="dc37a-353"><see cref="T:System.Lazy`1" /> 实例初始化为使用正在迟缓初始化的类型的无参数构造函数，并且该类型没有无参数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="dc37a-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc37a-354">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</span><span class="sxs-lookup"><span data-stu-id="dc37a-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="dc37a-355">延迟初始化</span><span class="sxs-lookup"><span data-stu-id="dc37a-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
