<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61b1ad39415a95994eb2f37c51cda4c654ac8698" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83942000" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Lazy`1&lt;T&gt; extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">正在延迟初始化的对象的类型。</typeparam>
    <summary>提供对延迟初始化的支持。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用延迟初始化来延迟创建大型或消耗大量资源的对象，或者执行大量占用资源的任务，尤其是在程序的生存期内可能不会发生这种创建或执行时。  
  
 若要准备延迟初始化，请创建 <xref:System.Lazy%601>的实例。 你创建的 <xref:System.Lazy%601> 对象的类型参数指定你要延迟初始化的对象的类型。 用于创建 <xref:System.Lazy%601> 对象的构造函数确定初始化的特征。 首次访问 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时出现延迟初始化。  
  
 在大多数情况下，选择构造函数取决于你对两个问题的回答：  
  
-   是否会从多个线程访问延迟初始化的对象？ 如果是这样，则 <xref:System.Lazy%601> 对象可以在任何线程上创建该对象。 您可以使用一个简单的构造函数，该构造函数的默认行为是创建一个线程安全的 <xref:System.Lazy%601> 对象，因此，无论有多少线程尝试访问它，都只会创建一个延迟实例化对象的实例。 若要创建不是线程安全的 <xref:System.Lazy%601> 对象，您必须使用一个构造函数，该构造函数允许您指定无线程安全。  
  
    > [!CAUTION]
    >  使 <xref:System.Lazy%601> 对象线程安全不会保护延迟初始化的对象。 如果多个线程可以访问延迟初始化的对象，则必须使其属性和方法对于多线程访问是安全的。  
  
-   迟缓初始化是否需要大量代码，或延迟初始化的对象是否具有无参数的构造函数，该构造函数可执行所需的所有操作，并且不会引发异常？ 如果需要编写初始化代码或需要处理异常，请使用采用工厂方法的构造函数之一。 在工厂方法中编写初始化代码。  
  
 下表根据这两个因素显示要选择的构造函数：  
  
|将通过访问对象|如果不需要初始化代码（无参数的构造函数），请使用|如果需要初始化代码，请使用|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|多个线程|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|一个线程|将 `isThreadSafe` 设置为 `false`<xref:System.Lazy%601.%23ctor%28System.Boolean%29>。|将 `isThreadSafe` 设置为 `false`<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>。|  
  
 您可以使用 lambda 表达式来指定工厂方法。 这会将所有初始化代码保存在一个位置。 Lambda 表达式捕获上下文，包括传递给延迟初始化的对象的构造函数的所有自变量。  
  
 **异常缓存**使用工厂方法时，将缓存异常。 也就是说，如果工厂方法在第一次尝试访问 <xref:System.Lazy%601> 对象的 <xref:System.Lazy%601.Value%2A> 属性时引发异常，则每次后续尝试都会引发相同的异常。 这可确保每次调用 <xref:System.Lazy%601.Value%2A> 属性都生成相同的结果，并避免在不同的线程获取不同的结果时可能出现的细微错误。 该 <xref:System.Lazy%601> 代表实际的 `T`，在某些情况下，这种情况下，通常会在启动过程中进行初始化。 在此之前的阶段失败通常是致命的。 如果有可能发生可恢复的失败，我们建议您将重试逻辑生成到初始化例程（在本例中为 factory 方法），就像您没有使用迟缓初始化一样。  
  
 **锁定的替代方法**在某些情况下，您可能希望避免 <xref:System.Lazy%601> 对象的默认锁定行为的开销。 在极少数情况下，可能会出现死锁。 在这种情况下，可以使用 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数并指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。 这使 <xref:System.Lazy%601> 对象可以在多个线程上创建延迟初始化的对象的副本（如果线程同时调用 <xref:System.Lazy%601.Value%2A> 属性）。 <xref:System.Lazy%601> 对象确保所有线程都使用延迟初始化的对象的相同实例，并放弃未使用的实例。 因此，降低锁定开销的代价是，程序有时可能会创建和丢弃昂贵对象的额外副本。 在大多数情况下，这种情况不太可能。 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 和 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数的示例演示了此行为。  
  
> [!IMPORTANT]
>  指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>时，永远不会缓存异常，即使指定了工厂方法也是如此。  
  
 **等效构造函数**除了允许使用 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 和 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数还可以复制其他构造函数的功能。 下表显示产生等效行为的参数值。  
  
|若要创建一个 <xref:System.Lazy%601> 对象|对于具有 `LazyThreadSafetyMode` `mode` 参数的构造函数，请将 `mode` 设置为|对于具有布尔型 `isThreadSafe` 参数的构造函数，请将 `isThreadSafe` 设置为|对于没有线程安全参数的构造函数|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|完全线程安全;使用锁定来确保只有一个线程初始化值。|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|所有此类构造函数都是完全线程安全的。|  
|不是线程安全的。|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|不适用。|  
|完全线程安全;用于初始化值的线程争用。|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|不适用。|不适用。|  
  
 **其他功能**有关使用带有线程静态字段的 <xref:System.Lazy%601> 的信息，或者作为属性的后备存储的信息，请参阅[迟缓初始化](/dotnet/framework/performance/lazy-initialization)。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Lazy%601> 类，以便通过多个线程访问来提供迟缓初始化。  
  
> [!NOTE]
>  该示例使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 构造函数。 它还演示了如何使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数（指定 `isThreadSafe`的 `true`）和 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数（指定 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 的 `mode`）。 若要切换到其他构造函数，只需更改注释掉的构造函数即可。  
>   
>  有关使用相同构造函数演示异常缓存的示例，请参见 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 构造函数。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 代码的四个关键部分说明了如何创建初始值设定项、工厂方法、实际初始化和 `LargeObject` 类的构造函数，在创建对象时，将显示一条消息。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 工厂方法显示对象的创建，其中包含一个用于进一步初始化的占位符：  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 请注意，前两个代码部分可以使用 lambda 函数组合在一起，如下所示：  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 该示例将暂停，以指示在延迟初始化之前可能会出现不确定的时间段。 按**enter**键时，此示例将创建并启动三个线程。 所有三个线程使用的 `ThreadProc` 方法都调用 <xref:System.Lazy%601.Value%2A> 属性。 第一次出现此情况时，将创建 `LargeObject` 实例：  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 `LargeObject` 类的构造函数（其中包含代码的最后一个键部分）将显示一条消息，并记录初始化线程的标识。 程序的输出显示在完整代码列表的末尾。  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>默认情况下，<see cref="T:System.Lazy`1" /> 类的所有公共和受保护成员都是线程安全的，并且可以从多个线程并发使用。 使用类型的构造函数的参数时，可以根据需要删除和每个线程安全保证。</threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生迟缓初始化时，使用目标类型的无参数构造函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的实例可以同时从多个线程使用。  
  
 使用此构造函数初始化的 <xref:System.Lazy%601> 实例的线程安全模式是 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>的。 线程安全模式描述当多个线程尝试初始化 <xref:System.Lazy%601> 实例时的行为。  
  
 使用此构造函数创建的 <xref:System.Lazy%601> 实例不会缓存异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数。 它还说明了如何使用 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 构造函数（指定 `isThreadSafe`的 `true`）和 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数（指定 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 的 `mode`）。 若要切换到其他构造函数，只需更改注释掉的构造函数即可。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 本示例中的两个关键代码行是创建初始值设定项和实际初始化。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 该示例创建并启动三个在 <xref:System.Threading.ManualResetEvent> 对象上阻塞的线程，因此该示例可以同时释放线程。 所有三个线程使用的 `ThreadProc` 方法都调用 <xref:System.Lazy%601.Value%2A> 属性以获取 `LargeObject` 实例：  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <xref:System.Lazy%601> 类提供锁定，因此只允许一个线程创建 `LargeObject` 实例。 该示例演示了其他线程都获得相同的实例。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">若要使此实例可同时由多个线程使用，则为 <see langword="true" />；若要使实例一次只能由一个线程使用，则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生迟缓初始化时，使用目标类型的无参数构造函数和指定的初始化模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `true``isThreadSafe`，将 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 使用此构造函数初始化的 <xref:System.Lazy%601> 实例的线程安全模式;否则，将 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>模式。 线程安全模式描述当多个线程尝试初始化 <xref:System.Lazy%601> 实例时的行为。 若要指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 模式，请使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数。  
  
 使用此构造函数创建的 <xref:System.Lazy%601> 实例不会缓存异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数创建非线程安全的延迟初始值设定项，适用于在同一线程上发生对延迟初始化的对象的所有访问的情况。 它还演示了如何使用 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数（指定 `mode`的 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。 若要切换到其他构造函数，只需更改注释掉的构造函数即可。  
  
> [!NOTE]
>  有关演示如何在多线程方案中使用此构造函数（为 `isThreadSafe`指定 `true`）的代码，请参阅 <xref:System.Lazy%601.%23ctor> 构造函数的示例。  
  
 该示例定义了一个将被延迟初始化的 `LargeObject` 类。 在 `Main` 方法中，该示例创建一个 <xref:System.Lazy%601> 实例，然后暂停。 按**enter**键时，该示例访问 <xref:System.Lazy%601> 实例的 <xref:System.Lazy%601.Value%2A> 属性，这会导致初始化发生。 `LargeObject` 类的构造函数显示控制台消息。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">调用用于在需要时生成延迟初始化值的委托。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 出现迟缓初始化时，将使用指定的初始化函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建的实例可以同时从多个线程使用。  
  
 使用此构造函数初始化的 <xref:System.Lazy%601> 实例的线程安全模式是 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>的。 线程安全模式描述当多个线程尝试初始化 <xref:System.Lazy%601> 实例时的行为。  
  
 缓存 `valueFactory` 引发的异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数提供异常缓存的延迟初始化。 它还演示了如何使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数（指定 `isThreadSafe`的 `true`）和 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 构造函数（指定 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 的 `mode`）。 若要切换到其他构造函数，只需更改注释掉的构造函数即可。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 代码的三个关键部分说明了如何创建初始值设定项、实际初始化和 `LargeObject` 类的构造函数，该构造函数演示了异常缓存。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 该示例创建并启动三个线程。 所有三个线程使用的 `ThreadProc` 方法都调用 <xref:System.Lazy%601.Value%2A> 属性以获取 `LargeObject` 实例：  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 在 `LargeObject` 类的构造函数中，第三次创建 `LargeObject` 实例时，代码的第三个键部分会引发异常，但此后会允许创建实例：  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 运行该示例时，尝试创建 `LargeObject` 实例的第一个线程将失败，并且将捕获该异常。 您可能希望下一个线程成功创建实例，但 <xref:System.Lazy%601> 对象缓存了该异常。 因此，所有三个线程都将引发异常。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">一个枚举值，用于指定线程安全模式。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用 <paramref name="T" /> 的无参数构造函数和指定的线程安全性模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Lazy%601> 实例的线程安全模式描述当多个线程尝试初始化 <xref:System.Lazy%601> 实例时的行为。  
  
 使用此构造函数创建的 <xref:System.Lazy%601> 实例不会缓存异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数创建一个延迟初始值设定项，使多个线程能够以延迟的创建对象。 创建实例时，多个线程可能会成功，但所有线程都使用第一个创建的实例。  
  
> [!NOTE]
>  有关演示如何在单线程方案中使用此构造函数（为 `mode`指定 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>）的示例，请参阅 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 构造函数。 有关演示如何使用此构造函数在多线程方案中提供锁定而不是争用条件（为 `mode`指定 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>）的示例，请参阅 <xref:System.Lazy%601.%23ctor> 构造函数。  
  
 该示例定义了一个 `LargeObject` 类，该类将被多个线程中的任意一个线程延迟初始化。 代码的三个关键部分说明了如何创建初始值设定项、实际初始化以及 `LargeObject` 类的构造函数和终结器。 在 `Main` 方法的开头，此示例将创建 <xref:System.Lazy%601> 对象，该对象执行 `LargeObject`的迟缓初始化：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 该示例创建并启动三个在 <xref:System.Threading.ManualResetEvent> 对象上阻塞的线程，因此该示例可以同时释放线程。 在所有三个线程使用的 `ThreadProc` 方法中，调用 <xref:System.Lazy%601.Value%2A> 属性将创建 `LargeObject` 实例：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 由于 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>指定的 <xref:System.Lazy%601> 实例的构造函数，因此所有三个线程都允许创建 `LargeObject` 的实例。 该示例通过在构造函数和 `LargeObject` 类的终结器中显示控制台消息来演示这一点：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 但 <xref:System.Lazy%601> 对象可确保所有线程仅使用一个实例。 该示例的输出显示，所有这三个线程使用同一个实例，还显示可通过垃圾回收来回收其他两个实例。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含无效值。</exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value">要使用的已预先初始化的值。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，该类使用已预先初始化的指定值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
使用此构造函数创建的实例可同时由多个线程使用。
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">调用用于在需要时生成延迟初始化值的委托。</param>
        <param name="isThreadSafe">若要使此实例可同时由多个线程使用，则为 <see langword="true" />；若要使此实例一次只能由一个线程使用，则为  <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 当延迟初始化发生时，将使用指定的初始化函数和初始化模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `true``isThreadSafe`，将 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 使用此构造函数初始化的 <xref:System.Lazy%601> 实例的线程安全模式;否则，将 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>模式。 线程安全模式描述当多个线程尝试初始化 <xref:System.Lazy%601> 实例时的行为。  
  
 若要指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 模式，请使用 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 或 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 构造函数。  
  
 缓存 `valueFactory` 引发的异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数在具有单个线程的方案中提供具有异常缓存的延迟初始化。 它还演示了如何使用 <xref:System.Lazy%601.%23ctor%2A> 构造函数（指定 `mode`的 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>）。 若要切换到该构造函数，只需更改注释掉的构造函数即可。  
  
> [!NOTE]
>  有关演示如何在多线程方案中使用此构造函数（为 `isThreadSafe`指定 `true`）的代码，请参阅 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 构造函数的示例。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 代码的三个关键部分说明了如何创建初始值设定项、实际初始化和 `LargeObject` 类的构造函数，该构造函数演示了异常缓存。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 在对构造函数的调用中，`isThreadSafe` 参数 `false`，因此 <xref:System.Lazy%601> 不是线程安全的。 由于它不是线程安全的，因此该示例在同一线程上调用了三次 <xref:System.Lazy%601.Value%2A> 属性：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 在 `LargeObject` 类的构造函数中，第三次创建 `LargeObject` 实例时，代码的第三个键部分会引发异常，但此后会允许创建实例：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 运行该示例时，第一次尝试创建 `LargeObject` 的实例将失败，并且将捕获该异常。 你可能希望下一次尝试成功，但 <xref:System.Lazy%601> 对象已缓存异常。 因此，所有三次尝试都将引发异常。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">调用用于在需要时生成延迟初始化值的委托。</param>
        <param name="mode">一个枚举值，用于指定线程安全模式。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，它使用指定的初始化函数和线程安全模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Lazy%601> 实例的线程安全模式描述当多个线程尝试初始化 <xref:System.Lazy%601> 实例时的行为。  
  
 缓存 `valueFactory` 引发的异常，除非 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>`mode`。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数创建一个延迟初始值设定项，使多个线程能够以延迟的创建对象。 创建实例时，多个线程可能会成功，但所有线程都使用第一个创建的实例。 此外，该示例还演示了在指定 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>时从不缓存异常，即使是由函数而不是延迟创建的类型的无参数构造函数执行。  
  
> [!NOTE]
>  有关演示如何在单线程方案中使用此构造函数（为 `mode`指定 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>）的示例，请参阅 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 构造函数。 有关演示如何使用此构造函数在多线程方案中提供锁定而不是争用条件（为 `mode`指定 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>）的示例，请参阅 <xref:System.Lazy%601.%23ctor> 构造函数。  
  
 该示例定义了一个 `LargeObject` 类，该类将被多个线程中的任意一个线程延迟初始化。 代码的四个关键部分说明了创建初始值设定项、实际初始化、初始化函数以及 `LargeObject` 类的构造函数和终结器。 在 `Main` 方法的开头，此示例将创建 <xref:System.Lazy%601> 对象，该对象执行 `LargeObject`的迟缓初始化：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 延迟初始值设定项使用函数来执行初始化。 在这种情况下，函数是必需的，因为 `LargeObject` 类没有无参数的构造函数。  
  
 该示例创建并启动三个在 <xref:System.Threading.ManualResetEvent> 对象上阻塞的线程，因此该示例可以同时释放线程。 在所有三个线程使用的 `ThreadProc` 方法中，调用 <xref:System.Lazy%601.Value%2A> 属性将创建 `LargeObject` 实例：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 在代码的第三个关键部分，将调用迟缓初始化函数来创建 `LargeObject` 实例。 第一次调用该函数时，该函数将引发异常：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 对于任何其他 <xref:System.Threading.LazyThreadSafetyMode> 设置，将缓存初始化函数中未经处理的异常。 但 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 会取消异常缓存。 该示例的输出表明，后续初始化该对象的尝试将成功。  
  
> [!NOTE]
>  异常消息通常出现在指示其他线程已成功初始化对象的消息之后。 这是由于引发和捕获异常而导致的延迟。  
  
 由于 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>指定的 <xref:System.Lazy%601> 实例的构造函数，因此所有三个线程都允许创建 `LargeObject` 的实例。 该示例通过在构造函数和 `LargeObject` 类的终结器中显示控制台消息来演示这一点：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <xref:System.Lazy%601> 对象可确保所有线程仅使用一个实例（初始化函数引发异常的线程除外）。 该示例的输出显示了此。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值表示是否为该 <see cref="T:System.Lazy`1" /> 实例创建了值。</summary>
        <value>如果为此 <see cref="T:System.Lazy`1" /> 实例创建了值，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Lazy%601> 实例发生迟缓初始化，则可能会导致创建值或引发异常。 如果引发异常，则 <xref:System.Lazy%601> 实例的后续行为取决于异常缓存是否生效。 如果 <xref:System.Lazy%601> 实例是使用未指定初始化函数的构造函数创建的，则异常缓存将不起作用。 初始化 <xref:System.Lazy%601> 的后续尝试可能会成功，并且在成功初始化后，<xref:System.Lazy%601.IsValueCreated%2A> 属性返回 `true`。 如果 <xref:System.Lazy%601> 实例是使用初始化函数（由 <xref:System.Lazy%601> 构造函数的 `valueFactory` 参数指定）创建的，则异常缓存由线程安全模式控制。  
  
-   如果模式为 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 或 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>，则没有第二次机会初始化 <xref:System.Lazy%601> 的实例。 如果发生异常并且在初始化函数中未处理，则会缓存该异常并在后续访问 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时重新引发该异常。 如果引发异常，则不会创建任何值，因此在这种情况下 <xref:System.Lazy%601.IsValueCreated%2A> 返回 `false`。  
  
-   如果 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式，则在运行初始化函数的第一个线程（或无参数的构造函数）将为 <xref:System.Lazy%601> 实例创建值。 如果初始化函数在一个线程上引发异常，其他线程仍可以尝试初始化 <xref:System.Lazy%601> 实例。 在创建该值之前，<xref:System.Lazy%601.IsValueCreated%2A> 属性返回 `false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</summary>
        <returns>针对此实例调用 <see cref="P:System.Lazy`1.Value" /> 属性上的 <see cref="M:System.Object.ToString" /> 方法的结果（如果已创建该值的话，即，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性返回 <see langword="true" />）。 否则，则为一个指示该值尚未创建的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法不会导致初始化。  
  
 如果为 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数的 `valueFactory` 参数指定的工厂方法返回 `null`，则在延迟初始化之后 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性可以 `null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><see cref="P:System.Lazy`1.Value" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</summary>
        <value>当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `false`<xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> 属性，访问 <xref:System.Lazy%601.Value%2A> 属性将强制初始化。  
  
 除了列出的异常以外，<xref:System.Lazy%601.Value%2A> 属性还可以引发由传递到 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 构造函数的 `valueFactory` 参数的工厂方法所引发的任何未经处理的异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><see cref="T:System.Lazy`1" /> 实例初始化为使用正在迟缓初始化的类型的无参数构造函数，并且缺少访问该构造函数的权限。</exception>
        <exception cref="T:System.MissingMemberException"><see cref="T:System.Lazy`1" /> 实例初始化为使用正在迟缓初始化的类型的无参数构造函数，并且该类型没有无参数的公共构造函数。</exception>
        <exception cref="T:System.InvalidOperationException">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization">延迟初始化</related>
      </Docs>
    </Member>
  </Members>
</Type>
