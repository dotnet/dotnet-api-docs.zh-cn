<Type Name="LocalDataStoreSlot" FullName="System.LocalDataStoreSlot">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27f6cc9003fc1a5b1c757502fafb70b5ecada0cb" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91902443" /></Metadata><TypeSignature Language="C#" Value="public sealed class LocalDataStoreSlot" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LocalDataStoreSlot extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.LocalDataStoreSlot" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LocalDataStoreSlot" />
  <TypeSignature Language="C++ CLI" Value="public ref class LocalDataStoreSlot sealed" />
  <TypeSignature Language="F#" Value="type LocalDataStoreSlot = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Thread" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Thread" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b966c-101">封装内存槽以存储本地数据。</span><span class="sxs-lookup"><span data-stu-id="b966c-101">Encapsulates a memory slot to store local data.</span></span> <span data-ttu-id="b966c-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="b966c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b966c-103">.NET Framework 提供了两种机制，用于将线程本地存储 (TLS) ：线程相对静态字段和数据槽。</span><span class="sxs-lookup"><span data-stu-id="b966c-103">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.</span></span>  
  
-   <span data-ttu-id="b966c-104">线程相对静态字段是 `static` `Shared` Visual Basic) 中用特性标记的字段 (字段 <xref:System.ThreadStaticAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="b966c-104">Thread-relative static fields are `static` fields (`Shared` fields in Visual Basic) that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="b966c-105">它们提供比数据槽更好的性能，并启用编译时类型检查。</span><span class="sxs-lookup"><span data-stu-id="b966c-105">They provide better performance than data slots, and enable compile-time type checking.</span></span>  
  
-   <span data-ttu-id="b966c-106">与线程相关的静态字段相比，数据槽速度较慢且更难使用。</span><span class="sxs-lookup"><span data-stu-id="b966c-106">Data slots are slower and more awkward to use than thread-relative static fields.</span></span> <span data-ttu-id="b966c-107">此外，数据存储为类型 <xref:System.Object> ，因此，在使用数据之前，必须将其强制转换为正确的类型。</span><span class="sxs-lookup"><span data-stu-id="b966c-107">Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it.</span></span> <span data-ttu-id="b966c-108">但是，当您在编译时的信息不足以分配静态字段时，您可以使用数据槽。</span><span class="sxs-lookup"><span data-stu-id="b966c-108">However, you can use data slots when you have insufficient information at compile time to allocate static fields.</span></span>  
  
 <span data-ttu-id="b966c-109">有关使用 TLS 的详细信息，请参阅 [线程本地存储： Thread-Relative 静态字段和数据槽](/dotnet/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots)。</span><span class="sxs-lookup"><span data-stu-id="b966c-109">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](/dotnet/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots).</span></span>  
  
 <span data-ttu-id="b966c-110">同样，.NET Framework 提供了两种使用上下文本地存储区的机制：上下文相对静态字段和数据槽。</span><span class="sxs-lookup"><span data-stu-id="b966c-110">Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots.</span></span> <span data-ttu-id="b966c-111">上下文相对静态字段是用特性标记的静态字段 <xref:System.ContextStaticAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="b966c-111">Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute.</span></span> <span data-ttu-id="b966c-112">使用这两种机制之间的利弊类似于使用线程相对静态字段和数据槽之间的权衡。</span><span class="sxs-lookup"><span data-stu-id="b966c-112">The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.</span></span>  
  
 <span data-ttu-id="b966c-113">该 <xref:System.LocalDataStoreSlot> 结构用作本地存储内存机制，线程和上下文可分别使用该机制存储特定于线程的数据和特定于上下文的数据。</span><span class="sxs-lookup"><span data-stu-id="b966c-113">The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively.</span></span> <span data-ttu-id="b966c-114">公共语言运行时在创建每个进程时将多槽数据存储数组分配给它。</span><span class="sxs-lookup"><span data-stu-id="b966c-114">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="b966c-115">线程或上下文调用各种函数来分配数据存储区中的数据槽，在槽中存储和检索数据值，并在线程或上下文对象过期后释放数据槽以便重用。</span><span class="sxs-lookup"><span data-stu-id="b966c-115">The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.</span></span>  
  
 <span data-ttu-id="b966c-116">数据槽对于每个线程或上下文是唯一的;它们的值不在线程或上下文对象之间共享。</span><span class="sxs-lookup"><span data-stu-id="b966c-116">The data slots are unique per thread or context; their values are not shared between the thread or context objects.</span></span> <span data-ttu-id="b966c-117">可以按名称或索引号来分配数据槽。</span><span class="sxs-lookup"><span data-stu-id="b966c-117">Data slots can be allocated by a name or by an index number.</span></span>  
  
 <span data-ttu-id="b966c-118">有关存储本地数据的详细信息，请参阅 <xref:System.Threading.Thread> 或 <xref:System.Runtime.Remoting.Contexts.Context> 。</span><span class="sxs-lookup"><span data-stu-id="b966c-118">For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>.</span></span> <span data-ttu-id="b966c-119"><xref:System.LocalDataStoreSlot>类与、、和等方法一起 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=nameWithType> 使用 <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=nameWithType> <xref:System.Threading.Thread.GetData%2A?displayProperty=nameWithType> <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=nameWithType> ; 它本身并没有您需要使用的任何方法。</span><span class="sxs-lookup"><span data-stu-id="b966c-119">The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=nameWithType>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=nameWithType>, <xref:System.Threading.Thread.GetData%2A?displayProperty=nameWithType>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=nameWithType>; it does not have any methods of its own that you need to use.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Runtime.Remoting.Contexts.Context" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~LocalDataStoreSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.LocalDataStoreSlot.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!LocalDataStoreSlot ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="localDataStoreSlot.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b966c-120">确保垃圾回收器回收 <see cref="T:System.LocalDataStoreSlot" /> 对象时释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="b966c-120">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.LocalDataStoreSlot" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b966c-121"><xref:System.LocalDataStoreSlot.Finalize%2A>当当前对象准备好完成时，垃圾回收器将调用。</span><span class="sxs-lookup"><span data-stu-id="b966c-121">The garbage collector calls <xref:System.LocalDataStoreSlot.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>
