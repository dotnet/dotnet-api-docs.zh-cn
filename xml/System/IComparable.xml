<Type Name="IComparable" FullName="System.IComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="37299f7e245e76249894cdde0d734cc606b7df16" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83528729" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable" />
  <TypeSignature Language="DocId" Value="T:System.IComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义由值类型或类实现的特定于类型的通用比较方法，旨在对其实例进行排序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口由其值可以排序或排序的类型实现。 它要求实现类型定义单个方法（<xref:System.IComparable.CompareTo%28System.Object%29>），该方法指示当前实例在排序顺序中的位置是在同一类型的第二个对象之前、之后还是与其相同。 实例的 <xref:System.IComparable> 实现由 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 和 <xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType>等方法自动调用。  
  
 <xref:System.IComparable.CompareTo%28System.Object%29> 方法的实现必须返回具有以下三个值之一的 <xref:System.Int32>，如下表所示。  
  
|值|含义|  
|-----------|-------------|  
|小于零|当前实例在排序顺序中位于 <xref:System.IComparable.CompareTo%2A> 方法指定的对象之前。|  
|零|此当前实例与 <xref:System.IComparable.CompareTo%2A> 方法指定的对象在排序顺序中的位置相同。|  
|大于零|此当前实例遵循 <xref:System.IComparable.CompareTo%2A> 方法在排序顺序中指定的对象。|  
  
 所有数值类型（例如 <xref:System.Int32> 和 <xref:System.Double>）都实现 <xref:System.IComparable>，如 <xref:System.String>、<xref:System.Char>和 <xref:System.DateTime>。 自定义类型还应提供自己的 <xref:System.IComparable> 实现，以便对对象实例进行排序或排序。  
  
   
  
## Examples  
 下面的示例说明 <xref:System.IComparable> 的实现和必要的 <xref:System.IComparable.CompareTo%2A> 方法。  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int" Usage="iComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">一个要与此实例进行比较的对象。</param>
        <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
        <returns>一个值，指示要比较的对象的相对顺序。 返回值具有以下含义： 
 <list type="table"><listheader><term> 值 
 </term><description> 含义 
 </description></listheader><item><term> 小于零 
 </term><description> 此实例在排序顺序中位于 <paramref name="obj" /> 之前。  
  
 </description></item><item><term> 零 
 </term><description> 此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  
  
 </description></item><item><term> 大于零 
 </term><description> 此实例在排序顺序中位于 <paramref name="obj" /> 之后。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable.CompareTo%2A> 方法由可对其值进行排序或排序的类型实现。 它由非泛型集合对象的方法（如 <xref:System.Array.Sort%2A?displayProperty=nameWithType>）自动调用，以对数组的每个成员进行排序。 如果自定义类或结构未实现 <xref:System.IComparable>，则无法对其成员进行排序，并且排序操作可以引发 <xref:System.InvalidOperationException>。  
  
 此方法只是定义，必须由特定的类或值类型实现才能使其生效。 返回值部分（"前面"、"与" 和 "后跟"）中指定的比较的含义取决于特定实现。  
  
 按照定义，任何对象比较大于（或跟随） `null`，而两个 null 引用的比较结果相等。  
  
 参数 `obj`必须与实现此接口的类或值类型的类型相同;否则，会引发 <xref:System.ArgumentException>。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IComparable.CompareTo%2A> 将实现 <xref:System.IComparable> 的 `Temperature` 对象与另一个对象进行比较。 `Temperature` 对象只需包装对 <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> 方法的调用即可实现 <xref:System.IComparable.CompareTo%2A>。  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> 不具有与此实例相同的类型。</exception>
        <block subset="none" type="overrides"><para>对于对象 A、B 和 C，必须满足以下条件： 
 <c>CompareTo （A）</c>必须返回零。  
  
如果<c>CompareTo （B）</c>返回零，则<c>CompareTo （A）</c>必须返回零。  
  
如果<c>CompareTo （B）</c>返回零， <c>CompareTo （c）</c>返回零，则<c>CompareTo （c）</c>必须返回零。  
  
如果<c>CompareTo （B）</c>返回的值不是零，则<c>CompareTo （A）</c>必须返回相反的符号值。  
  
如果<c>CompareTo （B）</c>返回一个 <paramref name="x" /> 不等于零的值，而<c>CompareTo （c）</c>返回与 <paramref name="x" />相同的值 <paramref name="y" />，则<c>CompareTo （c）</c>必须返回与 <paramref name="x" /> 和 <paramref name="y" />相同的符号值。</para></block>
        <block subset="none" type="usage"><para>使用 <see cref="M:System.IComparable.CompareTo(System.Object)" /> 方法来确定类的实例的排序。</para></block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
  </Members>
</Type>
