<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e4f512591ec912e7aae9c23ae3a24d3c4144c64a" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86687724" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="57328-101">定义一个方法，该方法支持自定义对象值的格式。</span><span class="sxs-lookup"><span data-stu-id="57328-101">Defines a method that supports custom formatting of the value of an object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57328-102"><xref:System.ICustomFormatter>接口包含一个方法，即 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="57328-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="57328-103">当通过引用或值类型实现此接口时，该 <xref:System.ICustomFormatter.Format%2A> 方法将返回对象值的自定义格式的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="57328-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="57328-104">通常， <xref:System.ICustomFormatter> 接口是使用接口实现的， <xref:System.IFormatProvider> 以自定义包含参数的两 .NET Framework 复合字符串格式设置方法的行为 <xref:System.IFormatProvider> 。</span><span class="sxs-lookup"><span data-stu-id="57328-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="57328-105">具体而言， <xref:System.ICustomFormatter> 接口可以提供传递给和方法的对象的值的自定义 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 格式 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="57328-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="57328-106">如果提供对象值的自定义表示形式，则需要执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="57328-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="57328-107">定义一个实现 <xref:System.ICustomFormatter> 接口及其单个成员（即方法）的类 <xref:System.ICustomFormatter.Format%2A> 。</span><span class="sxs-lookup"><span data-stu-id="57328-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="57328-108">定义一个实现 <xref:System.IFormatProvider> 接口及其单个成员（即方法）的类 <xref:System.IFormatProvider.GetFormat%2A> 。</span><span class="sxs-lookup"><span data-stu-id="57328-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="57328-109"><xref:System.IFormatProvider.GetFormat%2A>方法返回实现的实例 <xref:System.ICustomFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="57328-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="57328-110">通常，单个类实现 <xref:System.ICustomFormatter> 和 <xref:System.IFormatProvider> 。</span><span class="sxs-lookup"><span data-stu-id="57328-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="57328-111">在这种情况下，类的 `GetFormat` 实现只返回自身的实例。</span><span class="sxs-lookup"><span data-stu-id="57328-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="57328-112">将 <xref:System.IFormatProvider> 实现作为方法的 `provider` 参数 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 或类似的方法传递。</span><span class="sxs-lookup"><span data-stu-id="57328-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="57328-113">然后，.NET Framework 方法将使用您的自定义格式设置，而不是自己的格式。</span><span class="sxs-lookup"><span data-stu-id="57328-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="57328-114">下面的示例实现 <xref:System.ICustomFormatter> ，以允许整数值的二进制、八进制和十六进制格式设置。</span><span class="sxs-lookup"><span data-stu-id="57328-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="57328-115">在此示例中，单个类 `IBinaryFormatter` 实现 <xref:System.ICustomFormatter> 和 <xref:System.IFormatProvider> 。</span><span class="sxs-lookup"><span data-stu-id="57328-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="57328-116">其 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 方法确定参数是否 `formatType` 表示 <xref:System.ICustomFormatter> 类型。</span><span class="sxs-lookup"><span data-stu-id="57328-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="57328-117">如果它存在，则 `BinaryFormatter` 返回自身的实例; 否则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="57328-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="57328-118">它的 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 实现确定 format 参数是否是三个受支持的格式字符串之一 ( "B"、八进制的 "O" 和 "H" 表示八进制) 并 `arg` 相应地设置参数的格式。</span><span class="sxs-lookup"><span data-stu-id="57328-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="57328-119">否则，如果不 `arg` 是 `null` ，它将调用 `arg` 参数的 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 实现（如果存在）或它的无参数 `ToString` 方法（如果不存在）。</span><span class="sxs-lookup"><span data-stu-id="57328-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="57328-120">如果 `arg` 为 `null`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="57328-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="57328-121">`BinaryFormatter` 然后，可以使用将对象作为方法的参数传递来提供自定义格式设置 `BinaryFormatter` `provider` <xref:System.String.Format%2A> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="57328-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="57328-122">公共语言运行时尝试对 <see cref="T:System.ICustomFormatter" /> 复合格式字符串中的每个格式项使用您的实现。</span><span class="sxs-lookup"><span data-stu-id="57328-122">The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string.</span></span> <span data-ttu-id="57328-123">因此，您应该会发现您的 <see cref="T:System.ICustomFormatter" /> 实现将被调用以向其设计不处理的对象或值提供格式设置服务。</span><span class="sxs-lookup"><span data-stu-id="57328-123">As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</span></span> <span data-ttu-id="57328-124">在这些情况下，你 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 的方法必须为该对象或值调用适当的格式设置方法。</span><span class="sxs-lookup"><span data-stu-id="57328-124">In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.</span></span>  
  
<span data-ttu-id="57328-125">有两种类型的 <see cref="T:System.ICustomFormatter" /> 实现：内部和扩展。</span><span class="sxs-lookup"><span data-stu-id="57328-125">There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.</span></span>  
  
<span data-ttu-id="57328-126">内部实现是为应用程序定义的对象提供自定义格式设置的实现。</span><span class="sxs-lookup"><span data-stu-id="57328-126">Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</span></span> <span data-ttu-id="57328-127">在这种情况下，你的实现应包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="57328-127">In this case, your implementation should include the following:</span></span> 
<span data-ttu-id="57328-128">-定义对象格式的格式字符串的定义。</span><span class="sxs-lookup"><span data-stu-id="57328-128">-   A definition of format strings that define the formatting of the object.</span></span> <span data-ttu-id="57328-129">格式字符串是可选的。</span><span class="sxs-lookup"><span data-stu-id="57328-129">Format strings are optional.</span></span> <span data-ttu-id="57328-130">通常，"G" 或 "g" 格式字符串定义一般的 (或最常使用的) 格式。</span><span class="sxs-lookup"><span data-stu-id="57328-130">Typically, a "G" or "g" format string defines the general (or most commonly used) format.</span></span> <span data-ttu-id="57328-131">但是，可以随意定义所选的任何格式字符串。</span><span class="sxs-lookup"><span data-stu-id="57328-131">However, you are free to define any format strings that you choose.</span></span> <span data-ttu-id="57328-132">您还可以随意确定它们是否区分大小写或不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="57328-132">You are also free to decide whether they are case-sensitive or case-insensitive.</span></span>  
  
<span data-ttu-id="57328-133">-一个测试，可确保传递给方法的对象类型 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 是应用程序定义的类型。</span><span class="sxs-lookup"><span data-stu-id="57328-133">-   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type.</span></span> <span data-ttu-id="57328-134">如果不是，则应调用该对象的 <see cref="T:System.IFormattable" /> 实现（如果存在）或其 <see cref="M:System.Object.ToString" /> 方法（如果不存在）。</span><span class="sxs-lookup"><span data-stu-id="57328-134">If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not.</span></span> <span data-ttu-id="57328-135">应准备好处理这些方法调用可能会引发的任何异常。</span><span class="sxs-lookup"><span data-stu-id="57328-135">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
<span data-ttu-id="57328-136">-如果实现支持格式字符串，则为处理 null 格式字符串的代码。</span><span class="sxs-lookup"><span data-stu-id="57328-136">-   Code to handle a null format string, if your implementation supports format strings.</span></span> <span data-ttu-id="57328-137">最常见的方法是将 null 格式字符串替换为常规格式说明符。</span><span class="sxs-lookup"><span data-stu-id="57328-137">The most common approach is to replace a null format string with the general format specifier.</span></span>  
  
<span data-ttu-id="57328-138">-用于处理实现所支持的任何格式字符串的代码。</span><span class="sxs-lookup"><span data-stu-id="57328-138">-   Code to handle any format strings that your implementation supports.</span></span>  
  
<span data-ttu-id="57328-139">-用于处理不支持的格式字符串的代码。</span><span class="sxs-lookup"><span data-stu-id="57328-139">-   Code to handle format strings that you do not support.</span></span> <span data-ttu-id="57328-140">最常见的方法是引发 <see cref="T:System.FormatException" /> ，尽管可以提供默认格式设置。</span><span class="sxs-lookup"><span data-stu-id="57328-140">The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.</span></span>  
  
<span data-ttu-id="57328-141">扩展实现是为已具有格式设置支持的类型提供自定义格式设置的实现。</span><span class="sxs-lookup"><span data-stu-id="57328-141">Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</span></span> <span data-ttu-id="57328-142">例如，可以定义一个 <c>CustomerNumberFormatter</c> ，它使用特定数字之间的连字符设置整数类型的格式。</span><span class="sxs-lookup"><span data-stu-id="57328-142">For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits.</span></span> <span data-ttu-id="57328-143">在这种情况下，你的实现应包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="57328-143">In this case, your implementation should include the following:</span></span> 
<span data-ttu-id="57328-144">-扩展对象格式的格式字符串的定义。</span><span class="sxs-lookup"><span data-stu-id="57328-144">-   A definition of format strings that extend the formatting of the object.</span></span> <span data-ttu-id="57328-145">这些格式字符串是必需的，但它们不能与类型的现有格式字符串冲突。</span><span class="sxs-lookup"><span data-stu-id="57328-145">These format strings are required, but they must not conflict with the type's existing format strings.</span></span> <span data-ttu-id="57328-146">例如，如果要扩展类型的格式 <see cref="T:System.Int32" /> ，则不应实现 "C"、"D"、"E"、"F" 和 "G" 格式说明符。</span><span class="sxs-lookup"><span data-stu-id="57328-146">For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</span></span>  
  
<span data-ttu-id="57328-147">-一个测试，传递给方法的对象类型 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 是一种其扩展插件所支持的类型。</span><span class="sxs-lookup"><span data-stu-id="57328-147">-   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports.</span></span> <span data-ttu-id="57328-148">如果不是，则调用对象的 <see cref="T:System.IFormattable" /> 实现（如果存在）或对象的无参数 <see cref="M:System.Object.ToString" /> 方法（如果不存在）。</span><span class="sxs-lookup"><span data-stu-id="57328-148">If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not.</span></span> <span data-ttu-id="57328-149">应准备好处理这些方法调用可能会引发的任何异常。</span><span class="sxs-lookup"><span data-stu-id="57328-149">You should be prepared to handle any exceptions these method calls might throw.</span></span>  
  
<span data-ttu-id="57328-150">-用于处理扩展插件支持的任何格式字符串的代码。</span><span class="sxs-lookup"><span data-stu-id="57328-150">-   Code to handle any format strings that your extension supports.</span></span>  
  
<span data-ttu-id="57328-151">-用于处理扩展插件不支持的任何格式字符串的代码。</span><span class="sxs-lookup"><span data-stu-id="57328-151">-   Code to handle any format strings that your extension does not support.</span></span> <span data-ttu-id="57328-152">这些应传递到类型的 <see cref="T:System.IFormattable" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="57328-152">These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation.</span></span> <span data-ttu-id="57328-153">应准备好处理这些方法调用可能会引发的任何异常。</span><span class="sxs-lookup"><span data-stu-id="57328-153">You should be prepared to handle any exceptions these method calls might throw.</span></span></para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberSignature Language="C#" Value="public string? Format (string format, object arg, IFormatProvider formatProvider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="57328-154">包含格式规范的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="57328-154">A format string containing formatting specifications.</span></span></param>
        <param name="arg"><span data-ttu-id="57328-155">要设置其格式的对象。</span><span class="sxs-lookup"><span data-stu-id="57328-155">An object to format.</span></span></param>
        <param name="formatProvider"><span data-ttu-id="57328-156">一个对象，提供有关当前实例的区域性特定格式信息。</span><span class="sxs-lookup"><span data-stu-id="57328-156">An object that supplies format information about the current instance.</span></span></param>
        <summary><span data-ttu-id="57328-157">使用指定的格式和区域性特定格式信息将指定对象的值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="57328-157">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="57328-158"><paramref name="arg" /> 的值的字符串表示形式，格式由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="57328-158">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="57328-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 为回调方法。</span><span class="sxs-lookup"><span data-stu-id="57328-159"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="57328-160">它由支持自定义格式设置的方法（如或） <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 调用 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="57328-160">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="57328-161">为 [复合格式字符串](/dotnet/standard/base-types/composite-formatting)中的每个格式项调用一次实现。</span><span class="sxs-lookup"><span data-stu-id="57328-161">The implementation is called once for each format item in a [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span> <span data-ttu-id="57328-162">例如，在下面的语句中， <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 方法被调用三次。</span><span class="sxs-lookup"><span data-stu-id="57328-162">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="57328-163">`arg`参数是对象列表中从零开始的位置对应于特定格式项的索引的对象。</span><span class="sxs-lookup"><span data-stu-id="57328-163">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="57328-164">`format`参数包含格式字符串，格式为 `formatString` 项的组成部分。</span><span class="sxs-lookup"><span data-stu-id="57328-164">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="57328-165">如果格式项没有 `formatString` 组件，则的值 `format` 为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="57328-165">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="57328-166">如果 `format` 为 `null` ， `arg` 则可以使用所选的默认格式规范（具体取决于的类型）。</span><span class="sxs-lookup"><span data-stu-id="57328-166">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="57328-167">`formatProvider`参数是 <xref:System.IFormatProvider> 提供格式的实现 `arg` 。</span><span class="sxs-lookup"><span data-stu-id="57328-167">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="57328-168">通常，它是实现的一个实例 <xref:System.ICustomFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="57328-168">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="57328-169">如果 `formatProvider` 为 `null` ，则忽略该参数。</span><span class="sxs-lookup"><span data-stu-id="57328-169">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="57328-170">方法的实现 <xref:System.ICustomFormatter.Format%2A> 必须包括以下功能，以便 .NET Framework 可以提供不支持的格式设置。</span><span class="sxs-lookup"><span data-stu-id="57328-170">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="57328-171">如果格式方法不支持格式，则确定要设置格式的对象是否实现 <xref:System.IFormattable> 接口。</span><span class="sxs-lookup"><span data-stu-id="57328-171">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="57328-172">如果是这样，则调用 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 该接口的方法。</span><span class="sxs-lookup"><span data-stu-id="57328-172">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="57328-173">否则，调用 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 基础对象的默认方法。</span><span class="sxs-lookup"><span data-stu-id="57328-173">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="57328-174">下面的代码演示了此模式。</span><span class="sxs-lookup"><span data-stu-id="57328-174">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="57328-175">下面的示例实现 <xref:System.ICustomFormatter> ，以允许整数值的二进制、八进制和十六进制格式设置。</span><span class="sxs-lookup"><span data-stu-id="57328-175">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="57328-176">它的 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 实现确定 format 参数是否是三个受支持的格式字符串之一 ( "B"、八进制的 "O" 和 "H" 表示八进制) 并 `arg` 相应地设置参数的格式。</span><span class="sxs-lookup"><span data-stu-id="57328-176">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="57328-177">否则，如果不 `arg` 是 `null` ，它将调用 `arg` 参数的 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 实现（如果存在）或它的无参数 `ToString` 方法（如果不存在）。</span><span class="sxs-lookup"><span data-stu-id="57328-177">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="57328-178">如果 `arg` 为 `null`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="57328-178">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="57328-179">`BinaryFormatter` 然后，可以使用将对象作为方法的参数传递来提供自定义格式设置 `BinaryFormatter` `provider` <xref:System.String.Format%2A> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="57328-179">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="57328-180">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="57328-180">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="57328-181">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="57328-181">Composite Formatting</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
