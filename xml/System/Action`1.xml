<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="45fc189d70b5c44b5878b3ed4044c215159e2b78" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89749973" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <TypeSignature Language="C#" Value="public delegate void Action&lt;T&gt;(T obj);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;T&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of T)(obj As T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="5ae47-101">此委托封装的方法的参数类型。</span><span class="sxs-lookup"><span data-stu-id="5ae47-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="obj"><span data-ttu-id="5ae47-102">此委托封装的方法的参数。</span><span class="sxs-lookup"><span data-stu-id="5ae47-102">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="5ae47-103">封装一个方法，该方法只有一个参数并且不返回值。</span><span class="sxs-lookup"><span data-stu-id="5ae47-103">Encapsulates a method that has a single parameter and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5ae47-104">可以使用 <xref:System.Action%601> 委托以参数形式传递方法，而无需显式声明自定义委托。</span><span class="sxs-lookup"><span data-stu-id="5ae47-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="5ae47-105">封装的方法必须对应于由此委托定义的方法签名。</span><span class="sxs-lookup"><span data-stu-id="5ae47-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="5ae47-106">这意味着，封装的方法必须具有一个通过值传递给它的参数，并且它不能返回值。</span><span class="sxs-lookup"><span data-stu-id="5ae47-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="5ae47-107"> (在 c # 中，该方法必须返回 `void` 。</span><span class="sxs-lookup"><span data-stu-id="5ae47-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="5ae47-108">在 Visual Basic 中，它必须由 `Sub` .。。`End Sub`</span><span class="sxs-lookup"><span data-stu-id="5ae47-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="5ae47-109">construct。</span><span class="sxs-lookup"><span data-stu-id="5ae47-109">construct.</span></span> <span data-ttu-id="5ae47-110">它也可以是返回忽略的值的方法。 ) 通常，此类方法用于执行操作。</span><span class="sxs-lookup"><span data-stu-id="5ae47-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5ae47-111">若要引用具有一个参数并返回值的方法，请改用泛型 <xref:System.Func%602> 委托。</span><span class="sxs-lookup"><span data-stu-id="5ae47-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="5ae47-112">使用 <xref:System.Action%601> 委托时，无需显式定义使用单个参数封装方法的委托。</span><span class="sxs-lookup"><span data-stu-id="5ae47-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="5ae47-113">例如，下面的代码显式声明一个名为的委托 `DisplayMessage` ，并为 <xref:System.Console.WriteLine%2A> 方法或方法分配对 `ShowWindowsMessage` 其委托实例的引用。</span><span class="sxs-lookup"><span data-stu-id="5ae47-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="5ae47-114">下面的示例通过实例化委托来简化此代码 <xref:System.Action%601> ，而不是显式定义一个新委托并为其分配一个命名方法。</span><span class="sxs-lookup"><span data-stu-id="5ae47-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="5ae47-115">你还可以 <xref:System.Action%601> 在 c # 中将委托与匿名方法一起使用，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="5ae47-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="5ae47-116"> (匿名方法的介绍，请参阅 [匿名方法](/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods)。 ) </span><span class="sxs-lookup"><span data-stu-id="5ae47-116">(For an introduction to anonymous methods, see [Anonymous Methods](/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-methods).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="5ae47-117">你还可以将 lambda 表达式分配给 <xref:System.Action%601> 委托实例，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="5ae47-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="5ae47-118">有关 lambda 表达式介绍的 (，请参阅 [Lambda 表达式](/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions)。 ) </span><span class="sxs-lookup"><span data-stu-id="5ae47-118">(For an introduction to lambda expressions, see [Lambda Expressions](/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="5ae47-119"><xref:System.Collections.Generic.List%601.ForEach%2A>和 <xref:System.Array.ForEach%2A> 方法都将 <xref:System.Action%601> 委托作为参数。</span><span class="sxs-lookup"><span data-stu-id="5ae47-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="5ae47-120">委托封装的方法允许对数组或列表中的每个元素执行操作。</span><span class="sxs-lookup"><span data-stu-id="5ae47-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="5ae47-121">该示例使用 <xref:System.Collections.Generic.List%601.ForEach%2A> 方法来提供说明。</span><span class="sxs-lookup"><span data-stu-id="5ae47-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5ae47-122">下面的示例演示 <xref:System.Action%601> 如何使用委托打印对象的内容 <xref:System.Collections.Generic.List%601> 。</span><span class="sxs-lookup"><span data-stu-id="5ae47-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="5ae47-123">在此示例中， `Print` 方法用于将列表的内容显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="5ae47-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="5ae47-124">此外，c # 示例还演示了如何使用匿名方法将内容显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="5ae47-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="5ae47-125">请注意，该示例不显式声明 <xref:System.Action%601> 变量。</span><span class="sxs-lookup"><span data-stu-id="5ae47-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="5ae47-126">相反，它会传递对采用单个参数并且不会向方法返回值的方法的引用，该方法的 <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> 单个参数是 <xref:System.Action%601> 委托。</span><span class="sxs-lookup"><span data-stu-id="5ae47-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="5ae47-127">同样，在 c # 示例中， <xref:System.Action%601> 委托不会显式实例化，因为匿名方法的签名与方法所需的委托的签名相匹配 <xref:System.Action%601> <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="5ae47-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  

 [!code-csharp-interactive[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
