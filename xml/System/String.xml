<Type Name="String" FullName="System.String">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c067a76f1eb1345402ddf5de6ddb438647d9a800" /><Meta Name="ms.sourcegitcommit" Value="eb10266971d58a1d79fae6f2cb7d03a0c26aad32" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/16/2021" /><Meta Name="ms.locfileid" Value="100535635" /></Metadata><TypeSignature Language="C#" Value="public sealed class String : IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.String" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IConvertible&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface ICloneable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IConvertible&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IConvertible&#xA;    interface IEquatable&lt;string&gt;&#xA;    interface ICloneable" FrameworkAlternate="netcore-2.0" />
  <TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IConvertible, System.Collections.IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IConvertible, IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IConvertible, System::Collections::IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IComparable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IEnumerable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class String : IComparable, IComparable&lt;string&gt;, IEquatable&lt;string&gt;, System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.IEnumerable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements IComparable, IComparable(Of String), IEnumerable, IEquatable(Of String)" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : IComparable, IComparable&lt;System::String ^&gt;, IEquatable&lt;System::String ^&gt;, System::Collections::IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="C#" Value="public sealed class String : IComparable, IComparable&lt;string&gt;, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements IComparable, IComparable(Of String), IEnumerable(Of Char), IEquatable(Of String)" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : IComparable, IComparable&lt;System::String ^&gt;, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IEquatable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable" FrameworkAlternate="netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IComparable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IEquatable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7ec08-101">将文本表示为 UTF-16 代码单元的序列。</span><span class="sxs-lookup"><span data-stu-id="7ec08-101">Represents text as a sequence of UTF-16 code units.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="7ec08-102">字符串是用于表示文本的字符的有序集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-102">A string is a sequential collection of characters that's used to represent text.</span></span> <span data-ttu-id="7ec08-103"><xref:System.String>对象是对象的有序集合 <xref:System.Char?displayProperty=nameWithType> ，表示字符串; <xref:System.Char?displayProperty=nameWithType> 对象对应于 utf-16 代码单元。</span><span class="sxs-lookup"><span data-stu-id="7ec08-103">A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=nameWithType> objects that represent a string; a <xref:System.Char?displayProperty=nameWithType> object corresponds to a UTF-16 code unit.</span></span> <span data-ttu-id="7ec08-104">对象的值 <xref:System.String> 是对象的顺序集合的内容 <xref:System.Char?displayProperty=nameWithType> ，并且该值是不可变的 (也就是说，它是只读) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-104">The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=nameWithType> objects, and that value is immutable (that is, it is read-only).</span></span> <span data-ttu-id="7ec08-105">有关字符串不可变性的详细信息，请参阅 [永久性和 StringBuilder 类](#Immutability) 部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-105">For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section.</span></span> <span data-ttu-id="7ec08-106">内存中对象的最大大小 <xref:System.String> 为 2 GB，即约1000000000个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-106">The maximum size of a <xref:System.String> object in memory is 2-GB, or about 1 billion characters.</span></span>

<span data-ttu-id="7ec08-107">有关 Unicode、UTF-16、代码单位、代码点以及和类型的详细信息 <xref:System.Char> <xref:System.Text.Rune> ，请参阅 [.net 中的字符编码简介](/dotnet/standard/base-types/character-encoding-introduction)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-107">For more information about Unicode, UTF-16, code units, code points, and the <xref:System.Char> and <xref:System.Text.Rune> types, see [Introduction to character encoding in .NET](/dotnet/standard/base-types/character-encoding-introduction).</span></span>

 <span data-ttu-id="7ec08-108">本节内容：</span><span class="sxs-lookup"><span data-stu-id="7ec08-108">In this section:</span></span>

 <span data-ttu-id="7ec08-109">[实例化字符串对象](#Instantiation)</span><span class="sxs-lookup"><span data-stu-id="7ec08-109">[Instantiate a String object](#Instantiation)</span></span>\
 <span data-ttu-id="7ec08-110">[Char 对象和 Unicode 字符](#Characters)</span><span class="sxs-lookup"><span data-stu-id="7ec08-110">[Char objects and Unicode characters](#Characters)</span></span>\
 <span data-ttu-id="7ec08-111">[字符串和 Unicode 标准](#Unicode)</span><span class="sxs-lookup"><span data-stu-id="7ec08-111">[Strings and The Unicode Standard](#Unicode)</span></span>\
 <span data-ttu-id="7ec08-112">[字符串和嵌入的 null 字符](#EmbeddedNulls)</span><span class="sxs-lookup"><span data-stu-id="7ec08-112">[Strings and embedded null characters](#EmbeddedNulls)</span></span>\
 <span data-ttu-id="7ec08-113">[字符串和索引](#Indexes)</span><span class="sxs-lookup"><span data-stu-id="7ec08-113">[Strings and indexes](#Indexes)</span></span>\
 <span data-ttu-id="7ec08-114">[空字符串和空字符串](#Nulls)</span><span class="sxs-lookup"><span data-stu-id="7ec08-114">[Null strings and empty strings](#Nulls)</span></span>\
 <span data-ttu-id="7ec08-115">[永久性和 StringBuilder 类](#Immutability)</span><span class="sxs-lookup"><span data-stu-id="7ec08-115">[Immutability and the StringBuilder class](#Immutability)</span></span>\
 <span data-ttu-id="7ec08-116">[序号与区分区域性的操作](#CultureSensitive)</span><span class="sxs-lookup"><span data-stu-id="7ec08-116">[Ordinal vs. culture-sensitive operations](#CultureSensitive)</span></span>\
 <span data-ttu-id="7ec08-117">[正](#Normalization)</span><span class="sxs-lookup"><span data-stu-id="7ec08-117">[Normalization](#Normalization)</span></span>\
 [<span data-ttu-id="7ec08-118">按类别列出的字符串操作</span><span class="sxs-lookup"><span data-stu-id="7ec08-118">String operations by category</span></span>](#ByCategory)

<a name="Instantiation"></a>
## <a name="instantiate-a-string-object"></a><span data-ttu-id="7ec08-119">实例化字符串对象</span><span class="sxs-lookup"><span data-stu-id="7ec08-119">Instantiate a String object</span></span>
 <span data-ttu-id="7ec08-120">可以 <xref:System.String> 通过以下方式实例化对象：</span><span class="sxs-lookup"><span data-stu-id="7ec08-120">You can instantiate a <xref:System.String> object in the following ways:</span></span>

- <span data-ttu-id="7ec08-121">通过将字符串文本分配给 <xref:System.String> 变量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-121">By assigning a string literal to a <xref:System.String> variable.</span></span> <span data-ttu-id="7ec08-122">这是创建字符串时最常用的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-122">This is the most commonly used method for creating a string.</span></span> <span data-ttu-id="7ec08-123">下面的示例使用赋值创建几个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-123">The following example uses assignment to create several strings.</span></span> <span data-ttu-id="7ec08-124">请注意，在 c # 中，因为反斜杠 (\\) 是转义字符，所以字符串中的文本反斜杠必须进行转义或整个字符串必须是 @-quoted 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-124">Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.</span></span>

     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]
     [!code-csharp-interactive[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]
     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]

- <span data-ttu-id="7ec08-125">通过调用 <xref:System.String> 类构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-125">By calling a <xref:System.String> class constructor.</span></span> <span data-ttu-id="7ec08-126">下面的示例通过调用多个类构造函数来实例化字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-126">The following example instantiates strings by calling several class constructors.</span></span> <span data-ttu-id="7ec08-127">请注意，一些构造函数包含指向字符数组的指针或作为参数的带符号字节数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-127">Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.</span></span> <span data-ttu-id="7ec08-128">Visual Basic 不支持对这些构造函数的调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-128">Visual Basic does not support calls to these constructors.</span></span> <span data-ttu-id="7ec08-129">有关构造函数的详细信息 <xref:System.String> ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-129">For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]
     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]
     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]

- <span data-ttu-id="7ec08-130">通过使用 c # 中的字符串串联运算符 (+，并 Visual Basic) 中的 & 或 + 来创建来自 <xref:System.String> 实例和字符串文本的任意组合的单个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-130">By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals.</span></span> <span data-ttu-id="7ec08-131">下面的示例演示如何使用字符串连接运算符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-131">The following example illustrates the use of the string concatenation operator.</span></span>

     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]
     [!code-csharp-interactive[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]
     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]

- <span data-ttu-id="7ec08-132">通过检索属性或调用返回字符串的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-132">By retrieving a property or calling a method that returns a string.</span></span> <span data-ttu-id="7ec08-133">下面的示例使用类的方法 <xref:System.String> 从较大的字符串中提取子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-133">The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.</span></span>

     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]
     [!code-csharp-interactive[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]
     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]

- <span data-ttu-id="7ec08-134">通过调用格式设置方法，将值或对象转换为其字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-134">By calling a formatting method to convert a value or object to its string representation.</span></span> <span data-ttu-id="7ec08-135">下面的示例使用 [复合格式设置](/dotnet/standard/base-types/composite-formatting) 功能将两个对象的字符串表示形式嵌入到一个字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-135">The following example uses the [composite formatting](/dotnet/standard/base-types/composite-formatting) feature to embed the string representation of two objects into a string.</span></span>

     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]
     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]
     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]

<a name="Characters"></a>
## <a name="char-objects-and-unicode-characters"></a><span data-ttu-id="7ec08-136">Char 对象和 Unicode 字符</span><span class="sxs-lookup"><span data-stu-id="7ec08-136">Char objects and Unicode characters</span></span>
 <span data-ttu-id="7ec08-137">字符串中的每个字符都是由 Unicode 标量值（也称为 Unicode 码位）或序号 (数字) Unicode 字符的值来定义的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-137">Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.</span></span> <span data-ttu-id="7ec08-138">每个码位均使用 UTF-16 编码进行编码，并且编码的每个元素的数值均由一个 <xref:System.Char> 对象表示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-138">Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-139">请注意，由于 <xref:System.String> 实例包含 utf-16 代码单元的有序集合，因此，可以创建一个不是格式正确的 <xref:System.String> Unicode 字符串的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-139">Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string.</span></span> <span data-ttu-id="7ec08-140">例如，可以创建具有低代理项的字符串，而无需使用相应的高代理项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-140">For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.</span></span> <span data-ttu-id="7ec08-141">尽管某些方法（例如，命名空间中的编码和解码对象的方法） <xref:System.Text> 可能会执行检查以确保字符串的格式正确，但 <xref:System.String> 类成员不确保字符串格式正确。</span><span class="sxs-lookup"><span data-stu-id="7ec08-141">Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members don't ensure that a string is well-formed.</span></span>

 <span data-ttu-id="7ec08-142">单个 <xref:System.Char> 对象通常表示单个码位; 即，的数值 <xref:System.Char> 等于码位。</span><span class="sxs-lookup"><span data-stu-id="7ec08-142">A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point.</span></span> <span data-ttu-id="7ec08-143">例如，字符 "a" 的码位为 U + 0061。</span><span class="sxs-lookup"><span data-stu-id="7ec08-143">For example, the code point for the character "a" is U+0061.</span></span> <span data-ttu-id="7ec08-144">但是，码位可能要求多个编码元素 (多个 <xref:System.Char>) 的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-144">However, a code point might require more than one encoded element (more than one <xref:System.Char> object).</span></span> <span data-ttu-id="7ec08-145">Unicode 标准定义两种类型的字符，它们对应于多个 <xref:System.Char> 对象： graphemes，以及与 unicode 辅助平面中的字符相对应的 unicode 补充码位。</span><span class="sxs-lookup"><span data-stu-id="7ec08-145">The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.</span></span>

- <span data-ttu-id="7ec08-146">字形由后跟一个或多个组合字符的基本字符表示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-146">A grapheme is represented by a base character followed by one or more combining characters.</span></span> <span data-ttu-id="7ec08-147">例如，字符ä由 <xref:System.Char> 其码位为 u + 0061 的对象后跟 <xref:System.Char> 其码位为 u + 0308 的对象表示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-147">For example, the character ä is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308.</span></span> <span data-ttu-id="7ec08-148">此字符也可由 <xref:System.Char> 其码位为 U + 00E4 的单个对象定义。</span><span class="sxs-lookup"><span data-stu-id="7ec08-148">This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4.</span></span> <span data-ttu-id="7ec08-149">如下面的示例所示，区分大小写的相等比较表明这两个表示形式相等，不过普通序号比较不是这样。</span><span class="sxs-lookup"><span data-stu-id="7ec08-149">As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.</span></span> <span data-ttu-id="7ec08-150">但是，如果这两个字符串被规范化，则序号比较也指示它们相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-150">However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.</span></span> <span data-ttu-id="7ec08-151"> (有关规范化字符串的详细信息，请参阅 [规范化](#Normalization) 部分。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-151">(For more information on normalizing strings, see the [Normalization](#Normalization) section.)</span></span>

     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]
     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]
     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]

- <span data-ttu-id="7ec08-152">Unicode 补充码位 (代理项对) 由一个对象表示，该 <xref:System.Char> 对象的代码点为高代理项，后跟一个 <xref:System.Char> 其代码点为低代理项的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-152">A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate.</span></span> <span data-ttu-id="7ec08-153">高代理项的代码单位范围是从 U + D800 到 U + DBFF。</span><span class="sxs-lookup"><span data-stu-id="7ec08-153">The code units of high surrogates range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="7ec08-154">低代理项的代码单位范围是从 U + DC00 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="7ec08-154">The code units of low surrogates range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="7ec08-155">代理项对用于表示16个 Unicode 补充平面中的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-155">Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.</span></span> <span data-ttu-id="7ec08-156">下面的示例创建一个代理项字符，并将其传递给 <xref:System.Char.IsSurrogatePair(System.Char%2CSystem.Char)?displayProperty=nameWithType> 方法，以确定它是否为代理项对。</span><span class="sxs-lookup"><span data-stu-id="7ec08-156">The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair(System.Char%2CSystem.Char)?displayProperty=nameWithType> method to determine whether it is a surrogate pair.</span></span>

     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]
     [!code-csharp-interactive[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]
     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]

<a name="Unicode"></a>
## <a name="strings-and-the-unicode-standard"></a><span data-ttu-id="7ec08-157">字符串和 Unicode 标准</span><span class="sxs-lookup"><span data-stu-id="7ec08-157">Strings and the Unicode Standard</span></span>
 <span data-ttu-id="7ec08-158">字符串中的字符由与值对应的 UTF-16 编码的代码单位表示 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-158">Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.</span></span>

 <span data-ttu-id="7ec08-159">字符串中的每个字符都具有关联的 Unicode 字符类别，该类别在 .NET 中由 <xref:System.Globalization.UnicodeCategory> 枚举表示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-159">Each character in a string has an associated Unicode character category, which is represented in .NET by the <xref:System.Globalization.UnicodeCategory> enumeration.</span></span> <span data-ttu-id="7ec08-160">可以通过调用方法来确定字符或代理项对的类别 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-160">The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> method.</span></span>

[!INCLUDE[character-categories](~/includes/unicode-categories.md)]

 <span data-ttu-id="7ec08-161">此外，.NET 还支持基于 Unicode 标准的字符串比较和排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-161">In addition, .NET supports string comparison and sorting based on the Unicode standard.</span></span> <span data-ttu-id="7ec08-162">.NET Framework 4 及早期版本维护其自己的字符串数据表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-162">.NET Framework 4 and previous versions maintain their own table of string data.</span></span> <span data-ttu-id="7ec08-163">这也适用于从 Windows 7 上运行的 .NET Framework 4.5 开始的 .NET Framework 版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-163">This is also true of versions of .NET Framework starting with .NET Framework 4.5 running on Windows 7.</span></span> <span data-ttu-id="7ec08-164">从在 Windows 8 和更高版本的 Windows 操作系统上运行 .NET Framework 4.5 开始，运行时将字符串比较和排序操作委托给操作系统。</span><span class="sxs-lookup"><span data-stu-id="7ec08-164">Starting with .NET Framework 4.5 running on Windows 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.</span></span> <span data-ttu-id="7ec08-165">在 .NET Core 和 .NET 5 + 上，字符串比较和排序信息由 [Unicode 库的国际化组件](http://site.icu-project.org/) 提供 (但 windows 10 之前的 Windows 版本可能2019更新) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-165">On .NET Core and .NET 5+, string comparison and sorting information is provided by [International Components for Unicode](http://site.icu-project.org/) libraries (except on Windows versions prior to Windows 10 May 2019 Update).</span></span> <span data-ttu-id="7ec08-166">下表列出了 .NET 版本以及 Unicode 标准的版本，这些版本的字符比较和排序基于这些版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-166">The following table lists the versions of .NET and the versions of the Unicode Standard on which character comparison and sorting are based.</span></span>

|<span data-ttu-id="7ec08-167">.NET 版本</span><span class="sxs-lookup"><span data-stu-id="7ec08-167">.NET version</span></span>|<span data-ttu-id="7ec08-168">Unicode 标准版本</span><span class="sxs-lookup"><span data-stu-id="7ec08-168">Version of the Unicode Standard</span></span>|
|----------------------------|-------------------------------------|
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="7ec08-169">Unicode 标准，版本 4.0.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-169">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|
|<span data-ttu-id="7ec08-170">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-170">.NET Framework 2.0</span></span>|[<span data-ttu-id="7ec08-171">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-171">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="7ec08-172">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-172">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="7ec08-173">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-173">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] <span data-ttu-id="7ec08-174">和更高版本的 Windows 7</span><span class="sxs-lookup"><span data-stu-id="7ec08-174">and later on Windows 7</span></span>|[<span data-ttu-id="7ec08-175">Unicode 标准，版本 5.0.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-175">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] <span data-ttu-id="7ec08-176">Windows 8 及更高版本的 Windows 操作系统上和更高版本</span><span class="sxs-lookup"><span data-stu-id="7ec08-176">and later on Windows 8 and later Windows operating systems</span></span>|[<span data-ttu-id="7ec08-177">Unicode 标准，版本 6.3.0</span><span class="sxs-lookup"><span data-stu-id="7ec08-177">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|
|<span data-ttu-id="7ec08-178">.NET Core 和 .NET 5+</span><span class="sxs-lookup"><span data-stu-id="7ec08-178">.NET Core and .NET 5+</span></span>|<span data-ttu-id="7ec08-179">取决于基础操作系统支持的 Unicode 标准版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-179">Depends on the version of the Unicode Standard supported by the underlying operating system.</span></span>|

<a name="EmbeddedNulls"></a>
## <a name="strings-and-embedded-null-characters"></a><span data-ttu-id="7ec08-180">字符串和嵌入的 null 字符</span><span class="sxs-lookup"><span data-stu-id="7ec08-180">Strings and embedded null characters</span></span>
 <span data-ttu-id="7ec08-181">在 .NET 中， <xref:System.String> 对象可以包含嵌入的 null 字符，这些字符将作为字符串长度的一部分计数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-181">In .NET, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length.</span></span> <span data-ttu-id="7ec08-182">但是，在某些语言（如 C 和 c + +）中，空字符表示字符串的末尾;它不被视为字符串的一部分，并且不计入字符串长度中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-182">However, in some languages such as C and C++, a null character indicates the end of a string; it is not considered a part of the string and is not counted as part of the string's length.</span></span> <span data-ttu-id="7ec08-183">这意味着，在应用于对象时，C 和 c + + 程序员或用 C 或 c + + 编写的库可能会导致字符串不一定有效 <xref:System.String> ：</span><span class="sxs-lookup"><span data-stu-id="7ec08-183">This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:</span></span>

- <span data-ttu-id="7ec08-184">或函数返回的值 `strlen` `wcslen` 不一定相等 <xref:System.String.Length%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-184">The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=nameWithType>.</span></span>

- <span data-ttu-id="7ec08-185">或函数创建的字符串 `strcpy_s` `wcscpy_s` 不一定与方法创建的字符串完全相同 <xref:System.String.Copy%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-185">The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="7ec08-186">你应确保用于实例化对象的本机 C 和 c + + 代码 <xref:System.String> ，以及 <xref:System.String> 通过平台调用传递对象的代码，不会假定嵌入的 null 字符标记字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-186">You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, don't assume that an embedded null character marks the end of the string.</span></span>

 <span data-ttu-id="7ec08-187">当对字符串进行排序时，字符串中嵌入的空字符的处理方式也会不同， (或在搜索字符串时) 与该字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-187">Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.</span></span> <span data-ttu-id="7ec08-188">在两个字符串之间执行区分区域性的比较（包括使用固定区域性的比较）时，将忽略 Null 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-188">Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.</span></span> <span data-ttu-id="7ec08-189">它们仅被视为顺序比较或不区分大小写的序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-189">They are considered only for ordinal or case-insensitive ordinal comparisons.</span></span> <span data-ttu-id="7ec08-190">另一方面，在使用、和等方法搜索字符串时，始终会考虑嵌入的 null 字符 <xref:System.String.Contains%2A> <xref:System.String.StartsWith%2A> <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-190">On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.</span></span>

<a name="Indexes"></a>
## <a name="strings-and-indexes"></a><span data-ttu-id="7ec08-191">字符串和索引</span><span class="sxs-lookup"><span data-stu-id="7ec08-191">Strings and indexes</span></span>
 <span data-ttu-id="7ec08-192">索引是 <xref:System.Char> 中 (不是 Unicode 字符) 的对象的位置 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-192">An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>.</span></span> <span data-ttu-id="7ec08-193">索引是从零开始的非负数字，从字符串中的第一个位置开始，即索引位置零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-193">An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.</span></span> <span data-ttu-id="7ec08-194">许多搜索方法（如 <xref:System.String.IndexOf%2A> 和 <xref:System.String.LastIndexOf%2A> ）返回字符串实例中字符或子字符串的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-194">A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.</span></span>

 <span data-ttu-id="7ec08-195"><xref:System.String.Chars%2A>属性允许你 <xref:System.Char> 按对象在字符串中的索引位置访问各个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-195">The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string.</span></span> <span data-ttu-id="7ec08-196">由于 <xref:System.String.Chars%2A> 属性是 (Visual Basic) 或 c # ) 中的索引器 (中的默认属性，因此可以 <xref:System.Char> 通过使用如下所示的代码，访问字符串中的各个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-196">Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following.</span></span> <span data-ttu-id="7ec08-197">此代码将查找字符串中的空格或标点字符，以确定字符串包含的单词数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-197">This code looks for white space or punctuation characters in a string to determine how many words the string contains.</span></span>

 [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]
 [!code-csharp-interactive[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]
 [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]

 <span data-ttu-id="7ec08-198">由于 <xref:System.String> 类实现 <xref:System.Collections.IEnumerable> 接口，因此还可以 <xref:System.Char> 使用构造来循环访问字符串中的对象 `foreach` ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-198">Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.</span></span>

 [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]
 [!code-csharp-interactive[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]
 [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]

 <span data-ttu-id="7ec08-199">连续索引值可能不对应于连续的 Unicode 字符，因为 Unicode 字符可能被编码为多个 <xref:System.Char> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-199">Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object.</span></span> <span data-ttu-id="7ec08-200">特别是，字符串可能包含多字符单元，这些文本由一个后跟一个或多个组合字符或代理项对的基本字符构成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-200">In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.</span></span> <span data-ttu-id="7ec08-201">若要使用 Unicode 字符而不使用 <xref:System.Char> 对象，请使用 <xref:System.Globalization.StringInfo?displayProperty=nameWithType> 和 <xref:System.Globalization.TextElementEnumerator> 类，或者使用 <xref:System.String.EnumerateRunes%2A?displayProperty=nameWithType> 方法和 <xref:System.Text.Rune> 结构。</span><span class="sxs-lookup"><span data-stu-id="7ec08-201">To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> and <xref:System.Globalization.TextElementEnumerator> classes, or the <xref:System.String.EnumerateRunes%2A?displayProperty=nameWithType> method and the <xref:System.Text.Rune> struct.</span></span> <span data-ttu-id="7ec08-202">下面的示例演示适用于对象的代码与 <xref:System.Char> 使用 Unicode 字符的代码之间的差异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-202">The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters.</span></span> <span data-ttu-id="7ec08-203">它比较句子的每个单词中的字符数或文本元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-203">It compares the number of characters or text elements in each word of a sentence.</span></span> <span data-ttu-id="7ec08-204">该字符串包含后跟组合字符的基本字符的两个序列。</span><span class="sxs-lookup"><span data-stu-id="7ec08-204">The string includes two sequences of a base character followed by a combining character.</span></span>

 [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]
 [!code-csharp-interactive[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]
 [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]

 <span data-ttu-id="7ec08-205">此示例通过使用 <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> 方法和 <xref:System.Globalization.TextElementEnumerator> 类来枚举字符串中的所有文本元素，来处理文本元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-205">This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string.</span></span> <span data-ttu-id="7ec08-206">还可以通过调用方法来检索包含每个文本元素的起始索引的数组 <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-206">You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="7ec08-207">有关使用文本单元而不是单个值的详细信息 <xref:System.Char> ，请参阅 [.net 中的字符编码简介](/dotnet/standard/base-types/character-encoding-introduction)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-207">For more information about working with units of text rather than individual <xref:System.Char> values, see [Introduction to character encoding in .NET](/dotnet/standard/base-types/character-encoding-introduction).</span></span>

<a name="Nulls"></a>
## <a name="null-strings-and-empty-strings"></a><span data-ttu-id="7ec08-208">空字符串和空字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-208">Null strings and empty strings</span></span>
 <span data-ttu-id="7ec08-209">已声明但尚未赋值的字符串为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-209">A string that has been declared but has not been assigned a value is `null`.</span></span> <span data-ttu-id="7ec08-210">尝试对该字符串调用方法会引发 <xref:System.NullReferenceException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-210">Attempting to call methods on that string throws a <xref:System.NullReferenceException>.</span></span> <span data-ttu-id="7ec08-211">空字符串不同于空字符串，这是一个字符串，其值为 "" 或 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-211">A null string is different from an empty string, which is a string whose value is "" or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-212">在某些情况下，如果将 null 字符串或空字符串作为参数传递给方法调用，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-212">In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.</span></span> <span data-ttu-id="7ec08-213">例如，将空字符串传递给方法会 <xref:System.Int32.Parse%2A?displayProperty=nameWithType> 引发 <xref:System.ArgumentNullException> ，传递空字符串会引发 <xref:System.FormatException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-213">For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="7ec08-214">在其他情况下，方法参数可以为 null 字符串或空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-214">In other cases, a method argument can be either a null string or an empty string.</span></span> <span data-ttu-id="7ec08-215">例如，如果您正在为 <xref:System.IFormattable> 某个类提供实现，则需要将空字符串和空字符串作为常规 ( "G" ) 格式说明符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-215">For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general ("G") format specifier.</span></span>

 <span data-ttu-id="7ec08-216"><xref:System.String>类包含以下两个简便方法，使您能够测试字符串是否为 `null` 或为空：</span><span class="sxs-lookup"><span data-stu-id="7ec08-216">The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:</span></span>

- <span data-ttu-id="7ec08-217"><xref:System.String.IsNullOrEmpty%2A>，指示字符串是 `null` 还是等于  <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-217"><xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-218">此方法无需使用如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="7ec08-218">This method eliminates the need to use code such as the following:</span></span>

     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]
     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]
     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]

- <span data-ttu-id="7ec08-219"><xref:System.String.IsNullOrWhiteSpace%2A>，指示字符串是 `null` 、等于 <xref:System.String.Empty?displayProperty=nameWithType> 还是仅由空白字符组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-219"><xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=nameWithType>, or consists exclusively of white-space characters.</span></span> <span data-ttu-id="7ec08-220">此方法无需使用如下所示的代码：</span><span class="sxs-lookup"><span data-stu-id="7ec08-220">This method eliminates the need to use code such as the following:</span></span>

     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]
     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]
     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]

 <span data-ttu-id="7ec08-221">下面的示例 <xref:System.String.IsNullOrEmpty%2A> 在 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 自定义类的实现中使用方法 `Temperature` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-221">The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of a custom `Temperature` class.</span></span> <span data-ttu-id="7ec08-222">方法支持 "G"、"C"、"F" 和 "K" 格式字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-222">The method supports the "G", "C", "F", and "K" format strings.</span></span> <span data-ttu-id="7ec08-223">如果将值为的空格式字符串或格式字符串 `null` 传递给方法，则将其值更改为 "G" 格式字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-223">If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the "G" format string.</span></span>

 [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]
 [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]
 [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]

<a name="Immutability"></a>
## <a name="immutability-and-the-stringbuilder-class"></a><span data-ttu-id="7ec08-224">永久性和 StringBuilder 类</span><span class="sxs-lookup"><span data-stu-id="7ec08-224">Immutability and the StringBuilder class</span></span>
 <span data-ttu-id="7ec08-225"><xref:System.String>对象被称为不可变 (只读) ，因为在创建后，不能修改它的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-225">A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created.</span></span> <span data-ttu-id="7ec08-226">用于修改对象的方法 <xref:System.String> 实际上会返回一个 <xref:System.String> 包含修改的新对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-226">Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.</span></span>

 <span data-ttu-id="7ec08-227">由于字符串是不可变的，因此，对显示为单个字符串的内容执行重复添加或删除操作的字符串操作例程可能会显著降低性能。</span><span class="sxs-lookup"><span data-stu-id="7ec08-227">Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.</span></span> <span data-ttu-id="7ec08-228">例如，下面的代码使用随机数生成器在0x0001 到0x052F 范围内创建1000字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-228">For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.</span></span> <span data-ttu-id="7ec08-229">尽管代码显示使用字符串串联将新字符追加到名为的现有字符串，但 `str` 它实际上 <xref:System.String> 为每个串联操作创建了一个新的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-229">Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.</span></span>

 [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]
 [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]
 [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]

 <span data-ttu-id="7ec08-230"><xref:System.Text.StringBuilder> <xref:System.String> 对于对字符串的值进行多次更改的操作，可以使用类，而不是类。</span><span class="sxs-lookup"><span data-stu-id="7ec08-230">You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string.</span></span> <span data-ttu-id="7ec08-231">与类的实例不同 <xref:System.String> ， <xref:System.Text.StringBuilder> 对象是可变的; 当您连接、追加或删除字符串中的子字符串时，将对单个字符串执行这些操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-231">Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.</span></span> <span data-ttu-id="7ec08-232">完成修改对象的值后 <xref:System.Text.StringBuilder> ，可以调用其 <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> 方法将其转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-232">When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method to convert it to a string.</span></span> <span data-ttu-id="7ec08-233">下面的示例将替换 <xref:System.String> 前面的示例中使用的，以将范围中的1000个随机字符连接到0x0001，以使用对象进行 0x052F <xref:System.Text.StringBuilder> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-233">The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.</span></span>

 [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]
 [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]
 [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]

<a name="CultureSensitive"></a>
## <a name="ordinal-vs-culture-sensitive-operations"></a><span data-ttu-id="7ec08-234">序号与区分区域性的操作</span><span class="sxs-lookup"><span data-stu-id="7ec08-234">Ordinal vs. culture-sensitive operations</span></span>
 <span data-ttu-id="7ec08-235">类的成员 <xref:System.String> 对对象执行序号或区分区域性的 (语言) 操作 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-235">Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object.</span></span> <span data-ttu-id="7ec08-236">序号运算作用于每个对象的数值 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-236">An ordinal operation acts on the numeric value of each <xref:System.Char> object.</span></span> <span data-ttu-id="7ec08-237">区分区域性的操作将作用于对象的值 <xref:System.String> ，并考虑特定于区域性的大小写、排序、格式设置和分析规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-237">A culture-sensitive operation acts on the value of the <xref:System.String> object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.</span></span> <span data-ttu-id="7ec08-238">在显式声明的区域性或隐式当前区域性的上下文中执行区分区域性的操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-238">Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.</span></span> <span data-ttu-id="7ec08-239">当在同一字符串中执行两种类型的操作时，它们会产生不同的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-239">The two kinds of operations can produce very different results when they are performed on the same string.</span></span>

<span data-ttu-id="7ec08-240">.NET 还支持不区分区域性的语言字符串操作，方法是使用固定区域性 (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>) ，这是松散的，这是基于英语独立于区域的区域性设置的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-240">.NET also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>), which is loosely based on the culture settings of the English language independent of region.</span></span> <span data-ttu-id="7ec08-241">不同于其他 <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> 设置，保证固定区域性的设置在一台计算机、系统、系统和 .net 版本之间保持一致。</span><span class="sxs-lookup"><span data-stu-id="7ec08-241">Unlike other <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of .NET.</span></span> <span data-ttu-id="7ec08-242">固定区域性可被视为一种黑色框，可确保在所有区域性中进行字符串比较和排序的稳定性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-242">The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="7ec08-243">如果你的应用程序对符号标识符（如文件名或命名管道）做出安全决策，或对保存的数据（例如 XML 文件中基于文本的数据）进行安全决策，则操作应使用序号比较，而不是区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-243">If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-244">这是因为区分区域性的比较可能会产生不同的结果，具体取决于有效的区域性，而序号比较仅依赖于所比较字符的二进制值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-244">This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="7ec08-245">执行字符串操作的大多数方法都包含一个具有类型为的参数的重载 <xref:System.StringComparison> ，使您可以指定该方法是执行序号还是区分区域性的操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-245">Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.</span></span> <span data-ttu-id="7ec08-246">通常，应调用此重载，使方法调用的意图清晰明了。</span><span class="sxs-lookup"><span data-stu-id="7ec08-246">In general, you should call this overload to make the intent of your method call clear.</span></span> <span data-ttu-id="7ec08-247">有关对字符串使用序号和区分区域性的操作的最佳实践和指南，请参阅 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-247">For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 <span data-ttu-id="7ec08-248">用于 [大小写](#casing)、 [分析和格式](#parsing)、 [比较和排序](#comparison)的操作以及 [相等性测试](#equality) 的操作可以是序号或区分区域性的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-248">Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive.</span></span> <span data-ttu-id="7ec08-249">以下各节介绍操作的每个类别。</span><span class="sxs-lookup"><span data-stu-id="7ec08-249">The following sections discuss each category of operation.</span></span>

> [!TIP]
> <span data-ttu-id="7ec08-250">应始终调用方法重载，使方法调用的意图清晰。</span><span class="sxs-lookup"><span data-stu-id="7ec08-250">You should always call a method overload that makes the intent of your method call clear.</span></span> <span data-ttu-id="7ec08-251">例如， <xref:System.String.Compare(System.String%2CSystem.String)> 使用当前区域性的约定，而不是调用方法来对两个字符串执行区分区域性的比较，应使用 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> 参数的值调用方法 <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-251">For example, instead of calling the <xref:System.String.Compare(System.String%2CSystem.String)> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> method with a value of <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> for the `comparisonType` argument.</span></span> <span data-ttu-id="7ec08-252">有关详细信息，请参阅[有关使用字符串的最佳实践](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-252">For more information, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

<span data-ttu-id="7ec08-253">您可以从以下链接下载排序权重表，其中包含有关排序和比较操作中使用的字符权重的信息的一组文本文件：</span><span class="sxs-lookup"><span data-stu-id="7ec08-253">You can download the sorting weight tables, a set of text files that contain information on the character weights used in sorting and comparison operations, from the following links:</span></span>

- <span data-ttu-id="7ec08-254">Windows ( .NET Framework 和 .NET Core) ： [排序权重表](https://www.microsoft.com/download/details.aspx?id=10921)</span><span class="sxs-lookup"><span data-stu-id="7ec08-254">Windows (.NET Framework and .NET Core): [Sorting Weight Tables](https://www.microsoft.com/download/details.aspx?id=10921)</span></span>
- <span data-ttu-id="7ec08-255">Windows 10 可能2019更新或更高版本 ( .NET 5 +) 以及 Linux 和 macOS ( .NET Core 和 .NET 5 +) ： [默认 Unicode 排序规则元素表](https://www.unicode.org/Public/UCA/latest/allkeys.txt)</span><span class="sxs-lookup"><span data-stu-id="7ec08-255">Windows 10 May 2019 Update or later (.NET 5+) and Linux and macOS (.NET Core and .NET 5+): [Default Unicode Collation Element Table](https://www.unicode.org/Public/UCA/latest/allkeys.txt)</span></span>

<a name="casing"></a>
### <a name="casing"></a><span data-ttu-id="7ec08-256">大小写</span><span class="sxs-lookup"><span data-stu-id="7ec08-256">Casing</span></span>
 <span data-ttu-id="7ec08-257">大小写规则确定如何更改 Unicode 字符的大小写;例如，从小写到大写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-257">Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.</span></span> <span data-ttu-id="7ec08-258">通常，大小写操作在字符串比较之前执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-258">Often, a casing operation is performed before a string comparison.</span></span> <span data-ttu-id="7ec08-259">例如，可能会将字符串转换为大写形式，以便可以将其与另一个大写字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-259">For example, a string might be converted to uppercase so that it can be compared with another uppercase string.</span></span> <span data-ttu-id="7ec08-260">可以通过调用或方法将字符串中的字符转换为小写 <xref:System.String.ToLower%2A> <xref:System.String.ToLowerInvariant%2A> ，并可以通过调用或方法将其转换为大写 <xref:System.String.ToUpper%2A> <xref:System.String.ToUpperInvariant%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-260">You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="7ec08-261">此外，还可以使用 <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> 方法将字符串转换为词首字母大写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-261">In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> method to convert a string to title case.</span></span>

[!INCLUDE[platform-note](~/includes/c-and-posix-cultures.md)]

 <span data-ttu-id="7ec08-262">大小写操作可以基于当前区域性的规则、指定的区域性或固定区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-262">Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.</span></span> <span data-ttu-id="7ec08-263">由于大小写映射可能会因所使用的区域性而异，因此大小写操作的结果可能会因区域性而异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-263">Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.</span></span> <span data-ttu-id="7ec08-264">大小写的实际差异为三种类型：</span><span class="sxs-lookup"><span data-stu-id="7ec08-264">The actual differences in casing are of three kinds:</span></span>

- <span data-ttu-id="7ec08-265">拉丁文大写字母 I (U + 0049) ，拉丁文小写字母 I (U + 0069) ，拉丁文大写字母 I 与上面的点 (U + 0130) ，以及拉丁文小写字母无点 I (U + 0131) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-265">Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).</span></span> <span data-ttu-id="7ec08-266">在 tr-TR (土耳其语 (土耳其) ) 和 az-AZ (阿塞拜疆，拉丁语) 文化，在 tr，az，and az-Latn 中立文化中，小写字母 I 的小写等效项是拉丁语小写字母无点 I，大写字母 i 的大写等效项为拉丁文大写字母 I。</span><span class="sxs-lookup"><span data-stu-id="7ec08-266">In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span> <span data-ttu-id="7ec08-267">在所有其他区域性（包括固定区域性）中，拉丁文小写字母 I 和拉丁大写字母 I 是小写和大写等效项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-267">In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.</span></span>

     <span data-ttu-id="7ec08-268">下面的示例演示了在依赖于区分区域性的大小写比较的情况下，用于防止文件系统访问的字符串比较可能会失败。</span><span class="sxs-lookup"><span data-stu-id="7ec08-268">The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.</span></span> <span data-ttu-id="7ec08-269"> (应使用固定区域性的大小写约定。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-269">(The casing conventions of the invariant culture should have been used.)</span></span>

     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]
     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]

- <span data-ttu-id="7ec08-270">固定区域性与所有其他区域性之间的大小写映射差异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-270">Differences in case mappings between the invariant culture and all other cultures.</span></span> <span data-ttu-id="7ec08-271">在这些情况下，使用固定区域性的大小写规则将字符更改为大写或小写将返回相同的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-271">In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.</span></span> <span data-ttu-id="7ec08-272">对于所有其他区域性，它返回不同的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-272">For all other cultures, it returns a different character.</span></span> <span data-ttu-id="7ec08-273">下表列出了一些受影响的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-273">Some of the affected characters are listed in the following table.</span></span>

    |<span data-ttu-id="7ec08-274">字符</span><span class="sxs-lookup"><span data-stu-id="7ec08-274">Character</span></span>|<span data-ttu-id="7ec08-275">如果更改为</span><span class="sxs-lookup"><span data-stu-id="7ec08-275">If changed to</span></span>|<span data-ttu-id="7ec08-276">返回</span><span class="sxs-lookup"><span data-stu-id="7ec08-276">Returns</span></span>|
    |---------------|-------------------|-------------|
    |<span data-ttu-id="7ec08-277">微米符号 (U + 00B5) </span><span class="sxs-lookup"><span data-stu-id="7ec08-277">MICRON SIGN (U+00B5)</span></span>|<span data-ttu-id="7ec08-278">大写</span><span class="sxs-lookup"><span data-stu-id="7ec08-278">Uppercase</span></span>|<span data-ttu-id="7ec08-279">希腊语大写字母 MU (U +-39C) </span><span class="sxs-lookup"><span data-stu-id="7ec08-279">GREEK CAPITAL LETTER MU (U+-39C)</span></span>|
    |<span data-ttu-id="7ec08-280">拉丁文大写字母 I 与上点 (U + 0130) </span><span class="sxs-lookup"><span data-stu-id="7ec08-280">LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</span></span>|<span data-ttu-id="7ec08-281">小写</span><span class="sxs-lookup"><span data-stu-id="7ec08-281">Lowercase</span></span>|<span data-ttu-id="7ec08-282">拉丁文小写字母 I (U + 0069) </span><span class="sxs-lookup"><span data-stu-id="7ec08-282">LATIN SMALL LETTER I (U+0069)</span></span>|
    |<span data-ttu-id="7ec08-283">拉丁文小写字母无点 (U + 0131) </span><span class="sxs-lookup"><span data-stu-id="7ec08-283">LATIN SMALL LETTER DOTLESS I (U+0131)</span></span>|<span data-ttu-id="7ec08-284">大写</span><span class="sxs-lookup"><span data-stu-id="7ec08-284">Uppercase</span></span>|<span data-ttu-id="7ec08-285">拉丁文大写字母 I (U + 0049) </span><span class="sxs-lookup"><span data-stu-id="7ec08-285">LATIN CAPITAL LETTER I (U+0049)</span></span>|
    |<span data-ttu-id="7ec08-286">拉丁文小写字母长 S (U + 017F) </span><span class="sxs-lookup"><span data-stu-id="7ec08-286">LATIN SMALL LETTER LONG S (U+017F)</span></span>|<span data-ttu-id="7ec08-287">大写</span><span class="sxs-lookup"><span data-stu-id="7ec08-287">Uppercase</span></span>|<span data-ttu-id="7ec08-288">拉丁文大写字母 S (U + 0053) </span><span class="sxs-lookup"><span data-stu-id="7ec08-288">LATIN CAPITAL LETTER S (U+0053)</span></span>|
    |<span data-ttu-id="7ec08-289">拉丁文大写字母 D 与小写字母 Z 一起出现 (U + 01C5) </span><span class="sxs-lookup"><span data-stu-id="7ec08-289">LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</span></span>|<span data-ttu-id="7ec08-290">小写</span><span class="sxs-lookup"><span data-stu-id="7ec08-290">Lowercase</span></span>|<span data-ttu-id="7ec08-291">拉丁文小写字母 DZ 与抑扬符 (U + 01C6) </span><span class="sxs-lookup"><span data-stu-id="7ec08-291">LATIN SMALL LETTER DZ WITH CARON (U+01C6)</span></span>|
    |<span data-ttu-id="7ec08-292">结合希腊语 YPOGEGRAMMENI (U + 0345) </span><span class="sxs-lookup"><span data-stu-id="7ec08-292">COMBINING GREEK YPOGEGRAMMENI (U+0345)</span></span>|<span data-ttu-id="7ec08-293">大写</span><span class="sxs-lookup"><span data-stu-id="7ec08-293">Uppercase</span></span>|<span data-ttu-id="7ec08-294">希腊语大写字母 IOTA (U + 0399) </span><span class="sxs-lookup"><span data-stu-id="7ec08-294">GREEK CAPITAL LETTER IOTA (U+0399)</span></span>|

- <span data-ttu-id="7ec08-295">ASCII 字符范围内两个字母混合大小写对的大小写差异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-295">Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.</span></span> <span data-ttu-id="7ec08-296">在大多数区域性中，两字母混合大小写与等效的双字母大写或小写对相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-296">In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.</span></span> <span data-ttu-id="7ec08-297">对于以下区域性中的以下两个字母对，这并不是这样，因为在每种情况下，它们将与二个连字符进行比较：</span><span class="sxs-lookup"><span data-stu-id="7ec08-297">This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:</span></span>

    -   <span data-ttu-id="7ec08-298">hr-HR (克罗地亚语 (克罗地亚) ) 区域性中的 "V6d-lj-h2e" 和 "nJ"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-298">"lJ" and "nJ" in the hr-HR (Croatian (Croatia)) culture.</span></span>

    -   <span data-ttu-id="7ec08-299">cs-CZ 中的 "cH" (捷克 (捷克共和国) ) 和 sk-SK (斯洛伐克语 (斯洛伐克) ) 的文化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-299">"cH" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.</span></span>

    -   <span data-ttu-id="7ec08-300">da 中的 "aA"-深色 (丹麦 (丹麦) ) 区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-300">"aA" in the da-DK (Danish (Denmark)) culture.</span></span>

    -   <span data-ttu-id="7ec08-301"> (匈牙利 (匈牙利) ) 区域性中的 "cS"、"dZ"、"dZS"、"nY"、"sZ"、"tY" 和 "zS"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-301">"cS", "dZ", "dZS", "nY", "sZ", "tY", and "zS" in the hu-HU (Hungarian (Hungary)) culture.</span></span>

    -   <span data-ttu-id="7ec08-302">es ES_tradnl 中的 "cH" 和 "lL" (西班牙语 (西班牙，传统排序) ) 区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-302">"cH" and "lL" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.</span></span>

    -   <span data-ttu-id="7ec08-303">VN (越南语 (越南) ) 区域性中的 "cH"、"gI"、"kH"、"nG" "nH"、"pH"、"qU"、"tH" 和 "tR"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-303">"cH", "gI", "kH", "nG" "nH", "pH", "qU', "tH", and "tR" in the vi-VN (Vietnamese (Vietnam)) culture.</span></span>

     <span data-ttu-id="7ec08-304">但是，出现这种对等区分区域性的比较时可能会产生问题，因为这些对在固定字符串或标识符中不常见。</span><span class="sxs-lookup"><span data-stu-id="7ec08-304">However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.</span></span>

 <span data-ttu-id="7ec08-305">下面的示例演示了在将字符串转换为大写时，区域性之间的大小写规则的一些差异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-305">The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.</span></span>

 [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]
 [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]
 [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]

<a name="parsing"></a>
### <a name="parsing-and-formatting"></a><span data-ttu-id="7ec08-306">分析和格式化</span><span class="sxs-lookup"><span data-stu-id="7ec08-306">Parsing and formatting</span></span>
 <span data-ttu-id="7ec08-307">格式设置和分析是反向操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-307">Formatting and parsing are inverse operations.</span></span> <span data-ttu-id="7ec08-308">格式设置规则确定如何将值（如日期和时间或数字）转换为其字符串表示形式，而分析规则确定如何将字符串表示形式转换为值（如日期和时间）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-308">Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.</span></span> <span data-ttu-id="7ec08-309">格式设置和分析规则都依赖于区域性约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-309">Both formatting and parsing rules are dependent on cultural conventions.</span></span> <span data-ttu-id="7ec08-310">下面的示例说明了解释特定于区域性的日期字符串时可能出现的多义性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-310">The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.</span></span> <span data-ttu-id="7ec08-311">如果不知道用于生成日期字符串的区域性约定，则不可能知道03/01/2011、3/1/2011 和01/03/2011 是表示年1月 2011 3 日还是年3月 2011 1 日。</span><span class="sxs-lookup"><span data-stu-id="7ec08-311">Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.</span></span>

 [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]
 [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]
 [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]

 <span data-ttu-id="7ec08-312">同样，如下面的示例所示，单个字符串可以生成不同的日期，具体取决于在分析操作中使用约定的区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-312">Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.</span></span>

 [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]
 [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]
 [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]

<a name="comparison"></a>
### <a name="string-comparison-and-sorting"></a><span data-ttu-id="7ec08-313">字符串比较和排序</span><span class="sxs-lookup"><span data-stu-id="7ec08-313">String comparison and sorting</span></span>
 <span data-ttu-id="7ec08-314">用于比较和排序字符串的约定因区域性而异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-314">Conventions for comparing and sorting strings vary from culture to culture.</span></span> <span data-ttu-id="7ec08-315">例如，排序顺序可能基于拼音或字符的直观表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-315">For example, the sort order may be based on phonetics or on the visual representation of characters.</span></span> <span data-ttu-id="7ec08-316">在东亚语言中，按文字的笔画和部首对字符进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-316">In East Asian languages, characters are sorted by the stroke and radical of ideographs.</span></span> <span data-ttu-id="7ec08-317">排序也取决于字母表使用的排序语言和区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-317">Sorting also depends on the order languages and cultures use for the alphabet.</span></span> <span data-ttu-id="7ec08-318">例如，丹麦语包含一个 "Æ" 字符，该字符在字母表中的 "Z" 之后排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-318">For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet.</span></span> <span data-ttu-id="7ec08-319">此外，比较可以区分大小写或不区分大小写，而大小写规则可能会因区域性而异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-319">In addition, comparisons can be case-sensitive or case-insensitive, and casing rules might differ by culture.</span></span> <span data-ttu-id="7ec08-320">另一方面，序号比较在比较和排序字符串时使用字符串中各个字符的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="7ec08-320">Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.</span></span>

 <span data-ttu-id="7ec08-321">排序规则确定 Unicode 字符的字母顺序，以及两个字符串之间的相互比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-321">Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.</span></span> <span data-ttu-id="7ec08-322">例如， <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)?displayProperty=nameWithType> 方法基于参数比较两个字符串 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-322">For example, the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)?displayProperty=nameWithType> method compares two strings based on the <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="7ec08-323">如果参数值为 <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> ，则该方法执行使用当前区域性的约定的语言比较; 如果参数值为 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> ，则该方法执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-323">If the parameter value is <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>, the method performs an ordinal comparison.</span></span> <span data-ttu-id="7ec08-324">因此，正如下面的示例中所示，如果当前区域性为美国英语，则使用区分区域性的比较) 对方法的第一次调用会将 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)?displayProperty=nameWithType> "a" (视为 "a"，但使用序号) 比较 (对同一方法的第二次调用会将 "a" 视为大于 "a"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-324">Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)?displayProperty=nameWithType> method (using culture-sensitive comparison) considers "a" less than "A", but the second call to the same method (using ordinal comparison) considers "a" greater than "A".</span></span>

 [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]
 [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]
 [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]

 <span data-ttu-id="7ec08-325">.NET 支持 word、string 和 ordinal 排序规则：</span><span class="sxs-lookup"><span data-stu-id="7ec08-325">.NET supports word, string, and ordinal sort rules:</span></span>

- <span data-ttu-id="7ec08-326">单词排序会对字符串执行区分区域性的比较，在这些字符串中，某些非字母数字的 Unicode 字符可能会分配有特殊的权重。</span><span class="sxs-lookup"><span data-stu-id="7ec08-326">A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.</span></span> <span data-ttu-id="7ec08-327">例如，连字符 ( ) 可能会分配非常小的权重，以便在排序列表中彼此相邻显示 "合作比较" 和 "共同操作"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-327">For example, the hyphen (-) might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.</span></span> <span data-ttu-id="7ec08-328">有关 <xref:System.String> 使用单词排序规则比较两个字符串的方法列表，请参阅 " [按类别列出的字符串操作](#ByCategory) " 部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-328">For a list of the <xref:System.String> methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.</span></span>

- <span data-ttu-id="7ec08-329">字符串排序还会执行区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-329">A string sort also performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-330">它类似于单词排序，只不过没有特殊情况，所有非字母数字的符号都在所有字母数字 Unicode 字符之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-330">It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.</span></span> <span data-ttu-id="7ec08-331">可以使用字符串排序规则来比较两个字符串，方法是调用 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 具有参数的方法重载，该 `options` 参数提供值 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-331">Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-332">请注意，这是 .NET 提供的唯一方法，可使用字符串排序规则来比较两个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-332">Note that this is the only method that .NET provides to compare two strings using string sort rules.</span></span>

- <span data-ttu-id="7ec08-333">序号排序根据字符串中每个对象的数值来比较字符串 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-333">An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string.</span></span> <span data-ttu-id="7ec08-334">序号比较会自动区分大小写，因为字符的小写和大写版本具有不同的码位。</span><span class="sxs-lookup"><span data-stu-id="7ec08-334">An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.</span></span> <span data-ttu-id="7ec08-335">但是，如果 case 不重要，则可以指定忽略大小写的序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-335">However, if case is not important, you can specify an ordinal comparison that ignores case.</span></span> <span data-ttu-id="7ec08-336">这等效于使用固定区域性将字符串转换为大写，然后对结果执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-336">This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.</span></span> <span data-ttu-id="7ec08-337">有关 <xref:System.String> 使用序号排序规则比较两个字符串的方法的列表，请参阅 [按类别列出的字符串操作](#ByCategory) 部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-337">For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.</span></span>

 <span data-ttu-id="7ec08-338">区分区域性的比较是显式或隐式使用 <xref:System.Globalization.CultureInfo> 对象（包括属性指定的固定区域性）的任何比较 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-338">A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7ec08-339">隐式区域性为当前区域性，由 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 和 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 属性指定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-339">The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="7ec08-340">字母字符的排序顺序有相当大的变化形式 (即， <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> 属性 `true`) 跨区域性返回的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-340">There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> property returns `true`) across cultures.</span></span> <span data-ttu-id="7ec08-341">您可以通过 <xref:System.Globalization.CultureInfo> 向字符串比较方法（如）提供对象来指定使用特定区域性约定的区分区域性的比较 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-341">You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)>.</span></span> <span data-ttu-id="7ec08-342">您可以通过将 <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> 、或 <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> 除或之外的任何枚举成员提供 <xref:System.Globalization.CompareOptions> <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 给方法的适当重载 <xref:System.String.Compare%2A> ，来指定使用当前区域性的约定的区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-342">You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> to an appropriate overload of the <xref:System.String.Compare%2A> method.</span></span> <span data-ttu-id="7ec08-343">通常，区分区域性的比较适用于排序，而序号比较不是。</span><span class="sxs-lookup"><span data-stu-id="7ec08-343">A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.</span></span> <span data-ttu-id="7ec08-344">序号比较通常适用于确定两个字符串是否相等 (也就是说，确定标识) 而不区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-344">An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.</span></span>

 <span data-ttu-id="7ec08-345">下面的示例阐释区分区域性和顺序比较之间的差异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-345">The following example illustrates the difference between culture-sensitive and ordinal comparison.</span></span> <span data-ttu-id="7ec08-346">该示例计算三个字符串： "Apple"、"Æble" 和 "AEble"，使用序号比较以及 "" 和 "en-us" 区域性的约定 (其中每个都是调用方法时的默认区域性 <xref:System.String.Compare%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-346">The example evaluates three strings, "Apple", "Æble", and "AEble", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called).</span></span> <span data-ttu-id="7ec08-347">由于丹麦语将字符 "Æ" 视为单个字母，并在字母表中的 "Z" 后对其进行排序，因此字符串 "Æble" 大于 "Apple"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-347">Because the Danish language treats the character "Æ" as an individual letter and sorts it after "Z" in the alphabet, the string "Æble" is greater than "Apple".</span></span> <span data-ttu-id="7ec08-348">但是，"Æble" 不会视为等效于 "AEble"，因此 "Æble" 还会大于 "AEble"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-348">However, "Æble" is not considered equivalent to "AEble", so "Æble" is also greater than "AEble".</span></span> <span data-ttu-id="7ec08-349">En-us 区域性不包含字母 "Æ"，而是将其视为等效于 "AE"，这说明 "Æble" 小于 "Apple" 但等于 "AEble" 的原因。</span><span class="sxs-lookup"><span data-stu-id="7ec08-349">The en-US culture doesn't include the letter"Æ" but treats it as equivalent to "AE", which explains why  "Æble" is less than "Apple" but equal to "AEble".</span></span> <span data-ttu-id="7ec08-350">另一方面，序号比较会将 "Apple" 视为小于 "Æble"，将 "Æble" 视为大于 "AEble"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-350">Ordinal comparison, on the other hand, considers "Apple" to be less than "Æble", and "Æble" to be greater than "AEble".</span></span>

 [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]
 [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]

 <span data-ttu-id="7ec08-351">使用以下一般准则来选择适当的排序或字符串比较方法：</span><span class="sxs-lookup"><span data-stu-id="7ec08-351">Use the following general guidelines to choose an appropriate sorting or string comparison method:</span></span>

- <span data-ttu-id="7ec08-352">如果希望根据用户的区域性对字符串进行排序，则应根据当前区域性的约定对它们进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-352">If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.</span></span> <span data-ttu-id="7ec08-353">如果用户的区域性发生更改，则排序字符串的顺序也会相应地发生更改。</span><span class="sxs-lookup"><span data-stu-id="7ec08-353">If the user's culture changes, the order of sorted strings will also change accordingly.</span></span> <span data-ttu-id="7ec08-354">例如，同义词库应用程序应始终基于用户的区域性对单词进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-354">For example, a thesaurus application should always sort words based on the user's culture.</span></span>

- <span data-ttu-id="7ec08-355">如果希望根据特定区域性的约定对字符串进行排序，则应通过将 <xref:System.Globalization.CultureInfo> 表示该区域性的对象提供给比较方法进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-355">If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method.</span></span> <span data-ttu-id="7ec08-356">例如，在旨在向学生讲授特定语言的应用程序中，你希望根据使用该语言的某个区域性的约定对字符串进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-356">For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.</span></span>

- <span data-ttu-id="7ec08-357">如果希望字符串顺序在不同的区域性中保持不变，则应根据固定区域性的约定或使用序号比较对它们进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-357">If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.</span></span> <span data-ttu-id="7ec08-358">例如，使用序号排序来组织文件、进程、互斥体或命名管道的名称。</span><span class="sxs-lookup"><span data-stu-id="7ec08-358">For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.</span></span>

- <span data-ttu-id="7ec08-359">对于涉及安全决策的比较 (例如用户名是否有效) ，应始终通过调用方法的重载来执行顺序相等性测试 <xref:System.String.Equals%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-359">For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-360">字符串比较中使用的区分区域性的排序和大小写规则取决于 .NET 的版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-360">The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET.</span></span> <span data-ttu-id="7ec08-361">在 .NET Core 上，字符串比较依赖于基础操作系统支持的 Unicode 标准版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-361">On .NET Core, string comparison depends on the version of the Unicode Standard supported by the underlying operating system.</span></span> <span data-ttu-id="7ec08-362">在 Windows 8 或更高版本上运行的 .NET Framework 4.5 及更高版本中，排序、大小写、规范化和 Unicode 字符信息符合 Unicode 6.0 标准。</span><span class="sxs-lookup"><span data-stu-id="7ec08-362">In .NET Framework 4.5 and later versions running on Windows 8 or later, sorting, casing, normalization, and Unicode character information conform to the Unicode 6.0 standard.</span></span> <span data-ttu-id="7ec08-363">在其他 Windows 操作系统上，它们遵循 Unicode 5.0 标准。</span><span class="sxs-lookup"><span data-stu-id="7ec08-363">On other Windows operating systems, they conform to the Unicode 5.0 standard.</span></span>

 <span data-ttu-id="7ec08-364">有关 word、字符串和顺序排序规则的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 主题。</span><span class="sxs-lookup"><span data-stu-id="7ec08-364">For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> topic.</span></span> <span data-ttu-id="7ec08-365">有关何时使用每个规则的其他建议，请参阅 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-365">For additional recommendations on when to use each rule, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 <span data-ttu-id="7ec08-366">通常，您不会直接调用字符串比较方法（如） <xref:System.String.Compare%2A> 来确定字符串的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-366">Ordinarily, you don't call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings.</span></span> <span data-ttu-id="7ec08-367">相反，通过排序方法（如或）调用比较 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 方法 <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-367">Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=nameWithType> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-368">下面的示例使用当前区域性执行四个不同的排序操作 (单词排序、使用固定区域性进行排序、序号排序和使用固定区域性的字符串排序) 而无需显式调用字符串比较方法，尽管它们确实指定了要使用的比较类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-368">The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.</span></span> <span data-ttu-id="7ec08-369">请注意，每种类型的排序在其数组中生成唯一的字符串排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-369">Note that each type of sort produces a unique ordering of strings in its array.</span></span>

 [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]
 [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]
 [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]

> [!TIP]
> <span data-ttu-id="7ec08-370">在内部，.NET 使用排序键来支持区分区域性的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-370">Internally, .NET uses sort keys to support culturally sensitive string comparison.</span></span> <span data-ttu-id="7ec08-371">对于字符串中的每个字符，都赋予若干类排序权重，包括字母、大小写和变音符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-371">Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.</span></span> <span data-ttu-id="7ec08-372">由类表示的排序关键字 <xref:System.Globalization.SortKey> 为特定字符串提供了这些权重的存储库。</span><span class="sxs-lookup"><span data-stu-id="7ec08-372">A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string.</span></span> <span data-ttu-id="7ec08-373">如果你的应用程序对相同的一组字符串执行大量搜索或排序操作，则可以通过为其使用的所有字符串生成和存储排序关键字来提高其性能。</span><span class="sxs-lookup"><span data-stu-id="7ec08-373">If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.</span></span> <span data-ttu-id="7ec08-374">需要进行排序或比较操作时，请使用排序关键字而不是字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-374">When a sort or comparison operation is required, you use the sort keys instead of the strings.</span></span> <span data-ttu-id="7ec08-375">有关更多信息，请参见 <xref:System.Globalization.SortKey> 类。</span><span class="sxs-lookup"><span data-stu-id="7ec08-375">For more information, see the <xref:System.Globalization.SortKey> class.</span></span>

 <span data-ttu-id="7ec08-376">如果未指定字符串比较约定，将对 <xref:System.Array.Sort(System.Array)?displayProperty=nameWithType> 字符串执行区分区域性、区分大小写的排序等方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-376">If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort(System.Array)?displayProperty=nameWithType> perform a culture-sensitive, case-sensitive sort on strings.</span></span> <span data-ttu-id="7ec08-377">下面的示例演示更改当前区域性如何影响数组中已排序字符串的顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-377">The following example illustrates how changing the current culture affects the order of sorted strings in an array.</span></span> <span data-ttu-id="7ec08-378">它创建一个包含三个字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-378">It creates an array of three strings.</span></span> <span data-ttu-id="7ec08-379">首先，它将 `System.Threading.Thread.CurrentThread.CurrentCulture` 属性设置为 en-US，并调用 <xref:System.Array.Sort(System.Array)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-379">First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort(System.Array)?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ec08-380">生成的排序顺序基于英语 (美国) 区域性的排序约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-380">The resulting sort order is based on sorting conventions for the English (United States) culture.</span></span> <span data-ttu-id="7ec08-381">接着，此示例将 `System.Threading.Thread.CurrentThread.CurrentCulture` 属性设置为 da-DK 并再次调用 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-381">Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method again.</span></span> <span data-ttu-id="7ec08-382">请注意，最终排序顺序与使用 en-US 时的结果不一样，因为这次使用的是针对丹麦语（丹麦）的排序约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-382">Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).</span></span>

 [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]
 [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]

> [!WARNING]
> <span data-ttu-id="7ec08-383">如果比较字符串的主要目的是确定它们是否相等，应调用 <xref:System.String.Equals%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-383">If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ec08-384">通常，应使用 <xref:System.String.Equals%2A> 来执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-384">Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison.</span></span> <span data-ttu-id="7ec08-385"><xref:System.String.Compare%2A?displayProperty=nameWithType>方法主要用于对字符串进行排序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-385">The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is intended primarily to sort strings.</span></span>

 <span data-ttu-id="7ec08-386">字符串搜索方法（如 <xref:System.String.StartsWith%2A?displayProperty=nameWithType> 和 <xref:System.String.IndexOf%2A?displayProperty=nameWithType> ）也可以执行区分区域性或序号字符串比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-386">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons.</span></span> <span data-ttu-id="7ec08-387">下面的示例使用方法说明了序号和区分区域性的比较之间的差异 <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-387">The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="7ec08-388">区分区域性的搜索，其中，当前区域性为英语 (美国) 将子字符串 "oe" 与连字 "–" 相匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-388">A culture-sensitive search in which the current culture is English (United States) considers the substring "oe" to match the ligature "œ".</span></span> <span data-ttu-id="7ec08-389">由于软连字符 (U + 00AD) 是宽度为零的字符，因此搜索会将软连字符视为等效于 <xref:System.String.Empty?displayProperty=nameWithtype> 并在字符串的开头找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-389">Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty?displayProperty=nameWithtype> and finds a match at the beginning of the string.</span></span> <span data-ttu-id="7ec08-390">另一方面，序号搜索在任一情况下都找不到匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-390">An ordinal search, on the other hand, does not find a match in either case.</span></span>

 [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]
 [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]
 [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]

### <a name="search-in-strings"></a><span data-ttu-id="7ec08-391">在字符串中搜索</span><span class="sxs-lookup"><span data-stu-id="7ec08-391">Search in strings</span></span>
 <span data-ttu-id="7ec08-392">字符串搜索方法（如 <xref:System.String.StartsWith%2A?displayProperty=nameWithType> 和 <xref:System.String.IndexOf%2A?displayProperty=nameWithType> ）也可以执行区分区域性或序号的字符串比较，以确定是否在指定字符串中找到了字符或子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-392">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.</span></span>

 <span data-ttu-id="7ec08-393">类中搜索单独字符的搜索方法（如 <xref:System.String> <xref:System.String.IndexOf%2A> 方法）或一组字符（如方法）中的一种搜索方法 <xref:System.String.IndexOfAny%2A> 都执行序号搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-393">The search methods in the <xref:System.String> class that search for an individual character, such as the <xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search.</span></span> <span data-ttu-id="7ec08-394">若要对字符执行区分区域性的搜索，必须调用 <xref:System.Globalization.CompareInfo> 方法，如 <xref:System.Globalization.CompareInfo.IndexOf(System.String%2CSystem.Char)?displayProperty=nameWithType> 或 <xref:System.Globalization.CompareInfo.LastIndexOf(System.String%2CSystem.Char)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-394">To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf(System.String%2CSystem.Char)?displayProperty=nameWithType> or <xref:System.Globalization.CompareInfo.LastIndexOf(System.String%2CSystem.Char)?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-395">请注意，使用序号和区分区域性的比较搜索字符的结果可能会有很大的不同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-395">Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.</span></span> <span data-ttu-id="7ec08-396">例如，搜索预构成 Unicode 字符（如连字 "Æ" (U + 00C6) ）可能会以正确的顺序（例如 "AE" (U + 041U + 0045) ）匹配其任何组件的出现位置，具体取决于区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-396">For example, a search for a precomposed Unicode character such as the ligature "Æ" (U+00C6) might match any occurrence of its components in the correct sequence, such as "AE" (U+041U+0045), depending on the culture.</span></span> <span data-ttu-id="7ec08-397">下面的示例演示了在 <xref:System.String.IndexOf(System.Char)?displayProperty=nameWithType> <xref:System.Globalization.CompareInfo.IndexOf(System.String%2CSystem.Char)?displayProperty=nameWithType> 搜索单个字符时和方法之间的差异。</span><span class="sxs-lookup"><span data-stu-id="7ec08-397">The following example illustrates the difference between the <xref:System.String.IndexOf(System.Char)?displayProperty=nameWithType> and <xref:System.Globalization.CompareInfo.IndexOf(System.String%2CSystem.Char)?displayProperty=nameWithType> methods when searching for an individual character.</span></span> <span data-ttu-id="7ec08-398">使用 en-us 区域性约定时，在字符串 "高空" 中找到连字 "æ" (U + 00E6) ，但不能在使用 da-深色区域性或执行序号比较时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-398">The ligature "æ" (U+00E6) is found in the string "aerial" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.</span></span>

 [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]
 [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]

 <span data-ttu-id="7ec08-399">另一方面， <xref:System.String> 搜索字符串（而不是字符）的类方法执行区分区域性的搜索（如果搜索选项未由类型的参数显式指定） <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-399">On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>.</span></span> <span data-ttu-id="7ec08-400">唯一的例外是 <xref:System.String.Contains%2A> ，它执行序号搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-400">The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.</span></span>

<a name="equality"></a>
### <a name="testing-for-equality"></a><span data-ttu-id="7ec08-401">测试是否相等</span><span class="sxs-lookup"><span data-stu-id="7ec08-401">Testing for equality</span></span>

<span data-ttu-id="7ec08-402">使用 <xref:System.String.Compare%2A?displayProperty=nameWithType> 方法来确定两个字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-402">Use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relationship of two strings in the sort order.</span></span> <span data-ttu-id="7ec08-403">通常，这是一个区分区域性的操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-403">Typically, this is a culture-sensitive operation.</span></span> <span data-ttu-id="7ec08-404">与此相反，请调用 <xref:System.String.Equals%2A?displayProperty=nameWithType> 方法来测试是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-404">In contrast, call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method to test for equality.</span></span> <span data-ttu-id="7ec08-405">由于测试相等性通常会将用户输入与某个已知的字符串（如有效用户名、密码或文件系统路径）进行比较，因此通常为序号运算。</span><span class="sxs-lookup"><span data-stu-id="7ec08-405">Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.</span></span>

> [!WARNING]
> <span data-ttu-id="7ec08-406">可以通过调用方法来测试相等性 <xref:System.String.Compare%2A?displayProperty=nameWithType> ，并确定返回值是否为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-406">It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=nameWithType> method and determining whether the return value is zero.</span></span> <span data-ttu-id="7ec08-407">但是，不建议使用这种做法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-407">However, this practice is not recommended.</span></span> <span data-ttu-id="7ec08-408">若要确定两个字符串是否相等，应调用方法的重载之一 <xref:System.String.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-408">To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ec08-409">要调用的首选重载是实例 <xref:System.String.Equals(System.String%2CSystem.StringComparison)> 方法或静态 <xref:System.String.Equals(System.String%2CSystem.String%2CSystem.StringComparison)> 方法，因为这两个方法都包含 <xref:System.StringComparison?displayProperty=nameWithType> 显式指定比较类型的参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-409">The preferred overload to call is either the instance <xref:System.String.Equals(System.String%2CSystem.StringComparison)> method or the static <xref:System.String.Equals(System.String%2CSystem.String%2CSystem.StringComparison)> method, because both methods include a <xref:System.StringComparison?displayProperty=nameWithType> parameter that explicitly specifies the type of comparison.</span></span>

 <span data-ttu-id="7ec08-410">下面的示例说明了在应改用序号时执行区分区域性比较是否相等的危险。</span><span class="sxs-lookup"><span data-stu-id="7ec08-410">The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.</span></span> <span data-ttu-id="7ec08-411">在这种情况下，代码的目的是禁止从以 "FILE://" 或 "file://" 开头的 url 进行文件系统访问，方法是对 URL 开头使用字符串 "FILE://" 执行不区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-411">In this case, the intent of the code is to prohibit file system access from URLs that begin with "FILE://" or "file://" by performing a case-insensitive comparison of the beginning of a URL with the string "FILE://".</span></span> <span data-ttu-id="7ec08-412">但是，如果在以 "file://" 开头的 URL 上使用土耳其语 (土耳其) 区域性来执行区分区域性的比较，则相等比较将失败，因为土耳其语大写字母等效于小写的 "i"，而不是 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-412">However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with "file://", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase "i" is "İ" instead of "I".</span></span> <span data-ttu-id="7ec08-413">因此，无意允许文件系统访问。</span><span class="sxs-lookup"><span data-stu-id="7ec08-413">As a result, file system access is inadvertently permitted.</span></span> <span data-ttu-id="7ec08-414">另一方面，如果执行了序号比较，则相等比较将成功，并且拒绝文件系统访问。</span><span class="sxs-lookup"><span data-stu-id="7ec08-414">On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.</span></span>

 [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]
 [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]
 [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]

<a name="Normalization"></a>
## <a name="normalization"></a><span data-ttu-id="7ec08-415">标准化</span><span class="sxs-lookup"><span data-stu-id="7ec08-415">Normalization</span></span>
 <span data-ttu-id="7ec08-416">某些 Unicode 字符具有多个表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-416">Some Unicode characters have multiple representations.</span></span> <span data-ttu-id="7ec08-417">例如，以下任何代码点都可以表示字母 "ắ"：</span><span class="sxs-lookup"><span data-stu-id="7ec08-417">For example, any of the following code points can represent the letter "ắ":</span></span>

- <span data-ttu-id="7ec08-418">U + 1EAF</span><span class="sxs-lookup"><span data-stu-id="7ec08-418">U+1EAF</span></span>

- <span data-ttu-id="7ec08-419">U + 0103 U + 0301</span><span class="sxs-lookup"><span data-stu-id="7ec08-419">U+0103 U+0301</span></span>

- <span data-ttu-id="7ec08-420">U + 0061 U + 0306 U + 0301</span><span class="sxs-lookup"><span data-stu-id="7ec08-420">U+0061 U+0306 U+0301</span></span>

 <span data-ttu-id="7ec08-421">单个字符的多个表示形式使得搜索、排序、匹配和其他字符串操作复杂化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-421">Multiple representations for a single character complicate searching, sorting, matching, and other string operations.</span></span>

 <span data-ttu-id="7ec08-422">Unicode 标准定义了一个名为规范化的进程，该进程为其任何等效的二进制表示形式返回 Unicode 字符的一个二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-422">The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.</span></span> <span data-ttu-id="7ec08-423">规范化可以使用多种算法，这些算法采用不同的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-423">Normalization can use several algorithms, called normalization forms, that follow different rules.</span></span> <span data-ttu-id="7ec08-424">.NET 支持 Unicode 范式 C、D、GLM-KC-QNW 和 KD。</span><span class="sxs-lookup"><span data-stu-id="7ec08-424">.NET supports Unicode normalization forms C, D, KC, and KD.</span></span> <span data-ttu-id="7ec08-425">将字符串规范化为同一范式后，可以使用序号比较对它们进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-425">When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.</span></span>

 <span data-ttu-id="7ec08-426">序号比较是 <xref:System.Char> 每个字符串中相应对象的 Unicode 标量值的二进制比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-426">An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string.</span></span> <span data-ttu-id="7ec08-427"><xref:System.String>类包括多个可执行序号比较的方法，其中包括：</span><span class="sxs-lookup"><span data-stu-id="7ec08-427">The <xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:</span></span>

- <span data-ttu-id="7ec08-428">包含参数的、、、、 <xref:System.String.Compare%2A> <xref:System.String.Equals%2A> <xref:System.String.StartsWith%2A>  <xref:System.String.EndsWith%2A> <xref:System.String.IndexOf%2A> 和 <xref:System.String.LastIndexOf%2A> 方法 <xref:System.StringComparison> 的任何重载。</span><span class="sxs-lookup"><span data-stu-id="7ec08-428">Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>, and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="7ec08-429">如果 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 为此参数提供或的值，则方法会执行序号比较 <xref:System.StringComparison.OrdinalIgnoreCase> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-429">The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.</span></span>

- <span data-ttu-id="7ec08-430">方法的重载 <xref:System.String.CompareOrdinal%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-430">The overloads of the <xref:System.String.CompareOrdinal%2A> method.</span></span>

- <span data-ttu-id="7ec08-431">默认情况下使用序号比较的方法，例如 <xref:System.String.Contains%2A> 、 <xref:System.String.Replace%2A> 和 <xref:System.String.Split%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-431">Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.</span></span>

- <span data-ttu-id="7ec08-432"><xref:System.Char>在字符串实例中搜索值或数组中元素的方法 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-432">Methods that search for a <xref:System.Char> value or for the elements in a <xref:System.Char> array in a string instance.</span></span> <span data-ttu-id="7ec08-433">此类方法包括 <xref:System.String.IndexOf(System.Char)> 和 <xref:System.String.Split(System.Char%5B%5D)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-433">Such methods include <xref:System.String.IndexOf(System.Char)> and <xref:System.String.Split(System.Char%5B%5D)>.</span></span>

 <span data-ttu-id="7ec08-434">可以通过调用方法来确定字符串是否规范化为范式 C <xref:System.String.IsNormalized?displayProperty=nameWithType> ，也可以调用 <xref:System.String.IsNormalized(System.Text.NormalizationForm)?displayProperty=nameWithType> 方法来确定字符串是否规范化为指定的范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-434">You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=nameWithType> method, or you can call the <xref:System.String.IsNormalized(System.Text.NormalizationForm)?displayProperty=nameWithType> method to determine whether a string is normalized to a specified normalization form.</span></span> <span data-ttu-id="7ec08-435">还可以调用方法将 <xref:System.String.Normalize?displayProperty=nameWithType> 字符串转换为范式 C，也可以调用 <xref:System.String.Normalize(System.Text.NormalizationForm)?displayProperty=nameWithType> 方法将字符串转换为指定的范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-435">You can also call the <xref:System.String.Normalize?displayProperty=nameWithType> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize(System.Text.NormalizationForm)?displayProperty=nameWithType> method to convert a string to a specified normalization form.</span></span> <span data-ttu-id="7ec08-436">有关规范化和比较字符串的分步信息，请参阅 <xref:System.String.Normalize> 和 <xref:System.String.Normalize(System.Text.NormalizationForm)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-436">For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize(System.Text.NormalizationForm)> methods.</span></span>

 <span data-ttu-id="7ec08-437">以下简单示例演示了字符串规范化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-437">The following simple example illustrates string normalization.</span></span> <span data-ttu-id="7ec08-438">它在三个不同的字符串中以三种不同的方式定义字母 "ố"，并使用相等的序号比较来确定每个字符串与其他两个字符串不同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-438">It defines the letter "ố" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.</span></span> <span data-ttu-id="7ec08-439">然后，它将每个字符串转换为支持的范式，并再次对每个字符串采用指定范式的序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-439">It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.</span></span> <span data-ttu-id="7ec08-440">在每种情况下，第二个相等测试会显示字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-440">In each case, the second test for equality shows that the strings are equal.</span></span>

 [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]
 [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]
 [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]

 <span data-ttu-id="7ec08-441">有关规范化和范式的详细信息，请参阅 <xref:System.Text.NormalizationForm?displayProperty=nameWithType> ，以及 [Unicode 标准附录 #15：](https://unicode.org/reports/tr15/) unicode.org 网站上的 Unicode 范式和 [规范化常见问题解答](https://www.unicode.org/faq/normalization.html) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-441">For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](https://unicode.org/reports/tr15/) and the [Normalization FAQ](https://www.unicode.org/faq/normalization.html) on the unicode.org website.</span></span>

<a name="ByCategory"></a>
## <a name="string-operations-by-category"></a><span data-ttu-id="7ec08-442">按类别列出的字符串操作</span><span class="sxs-lookup"><span data-stu-id="7ec08-442">String operations by category</span></span>
 <span data-ttu-id="7ec08-443">此 <xref:System.String> 类提供了成员，用于比较字符串，测试字符串是否相等，查找字符串中的字符或子字符串，修改字符串，从字符串中提取子字符串，组合字符串，格式化值，复制字符串，以及规范化字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-443">The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.</span></span>

### <a name="compare-strings"></a><span data-ttu-id="7ec08-444">比较字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-444">Compare strings</span></span>
 <span data-ttu-id="7ec08-445">您可以通过使用以下方法来比较字符串，以确定它们在排序顺序中的相对位置 <xref:System.String> ：</span><span class="sxs-lookup"><span data-stu-id="7ec08-445">You can compare strings to determine their relative position in the sort order by using the following <xref:System.String> methods:</span></span>

- <span data-ttu-id="7ec08-446"><xref:System.String.Compare%2A> 返回一个整数，该整数指示在排序顺序中一个字符串与另一个字符串的关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-446"><xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.</span></span>

- <span data-ttu-id="7ec08-447"><xref:System.String.CompareOrdinal%2A> 返回一个整数，该整数指示一个字符串与另一个字符串的关系是否基于其码位的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-447"><xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.</span></span>

- <span data-ttu-id="7ec08-448"><xref:System.String.CompareTo%2A> 返回一个整数，该整数指示当前字符串实例与排序顺序中的第二个字符串之间的关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-448"><xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.</span></span> <span data-ttu-id="7ec08-449"><xref:System.String.CompareTo(System.String)>方法 <xref:System.IComparable> 为类提供和 <xref:System.IComparable%601> 实现 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-449">The <xref:System.String.CompareTo(System.String)> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.</span></span>

### <a name="test-strings-for-equality"></a><span data-ttu-id="7ec08-450">测试字符串的相等性</span><span class="sxs-lookup"><span data-stu-id="7ec08-450">Test strings for equality</span></span>

<span data-ttu-id="7ec08-451">调用 <xref:System.String.Equals%2A> 方法来确定两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-451">You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal.</span></span> <span data-ttu-id="7ec08-452">实例 <xref:System.String.Equals(System.String%2CSystem.String%2CSystem.StringComparison)> 和静态 <xref:System.String.Equals(System.String%2CSystem.StringComparison)> 重载使你能够指定比较是区分区域性还是序号，以及是否考虑或忽略大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-452">The instance <xref:System.String.Equals(System.String%2CSystem.String%2CSystem.StringComparison)> and the static <xref:System.String.Equals(System.String%2CSystem.StringComparison)> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.</span></span> <span data-ttu-id="7ec08-453">大多数相等测试都是序号，并且确定对系统资源的访问权限的相等性比较 (如文件系统对象) 应始终为序号。</span><span class="sxs-lookup"><span data-stu-id="7ec08-453">Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.</span></span>

### <a name="find-characters-in-a-string"></a><span data-ttu-id="7ec08-454">查找字符串中的字符</span><span class="sxs-lookup"><span data-stu-id="7ec08-454">Find characters in a string</span></span>

<span data-ttu-id="7ec08-455"><xref:System.String>类包含两种搜索方法：</span><span class="sxs-lookup"><span data-stu-id="7ec08-455">The <xref:System.String> class includes two kinds of search methods:</span></span>

- <span data-ttu-id="7ec08-456">返回一个 <xref:System.Boolean> 值以指示特定子字符串是否出现在字符串实例中的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-456">Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance.</span></span> <span data-ttu-id="7ec08-457">其中包括 <xref:System.String.Contains%2A> 、 <xref:System.String.EndsWith%2A> 和 <xref:System.String.StartsWith%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-457">These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.</span></span>

- <span data-ttu-id="7ec08-458">指示字符串实例中子字符串的起始位置的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-458">Methods that indicate the starting position of a substring in a string instance.</span></span> <span data-ttu-id="7ec08-459">其中包括 <xref:System.String.IndexOf%2A> 、 <xref:System.String.IndexOfAny%2A> 、 <xref:System.String.LastIndexOf%2A> 和 <xref:System.String.LastIndexOfAny%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-459">These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.</span></span>

> [!WARNING]
> <span data-ttu-id="7ec08-460">如果要在字符串中搜索特定模式而不是特定子字符串，应使用正则表达式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-460">If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.</span></span> <span data-ttu-id="7ec08-461">有关详细信息，请参阅 [.Net 正则表达式](/dotnet/standard/base-types/regular-expressions)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-461">For more information, see [.NET Regular Expressions](/dotnet/standard/base-types/regular-expressions).</span></span>

### <a name="modify-a-string"></a><span data-ttu-id="7ec08-462">修改字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-462">Modify a string</span></span>

<span data-ttu-id="7ec08-463"><xref:System.String>类包括以下用于修改字符串值的方法：</span><span class="sxs-lookup"><span data-stu-id="7ec08-463">The <xref:System.String> class includes the following methods that appear to modify the value of a string:</span></span>

- <span data-ttu-id="7ec08-464"><xref:System.String.Insert%2A> 将字符串插入到当前 <xref:System.String> 实例中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-464"><xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.</span></span>

- <span data-ttu-id="7ec08-465"><xref:System.String.PadLeft%2A> 在字符串的开头插入一个或多个指定字符的匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-465"><xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.</span></span>

- <span data-ttu-id="7ec08-466"><xref:System.String.PadRight%2A> 在字符串的末尾插入指定字符的一个或多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-466"><xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the end of a string.</span></span>

- <span data-ttu-id="7ec08-467"><xref:System.String.Remove%2A> 删除当前实例中的子字符串 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-467"><xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.</span></span>

- <span data-ttu-id="7ec08-468"><xref:System.String.Replace%2A> 将子字符串替换为当前实例中的另一个子字符串 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-468"><xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.</span></span>

- <span data-ttu-id="7ec08-469"><xref:System.String.ToLower%2A><xref:System.String.ToLowerInvariant%2A>将字符串中的所有字符转换为小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-469"><xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.</span></span>

- <span data-ttu-id="7ec08-470"><xref:System.String.ToUpper%2A><xref:System.String.ToUpperInvariant%2A>将字符串中的所有字符转换为大写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-470"><xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.</span></span>

- <span data-ttu-id="7ec08-471"><xref:System.String.Trim%2A> 删除字符串开头和结尾的所有匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-471"><xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.</span></span>

- <span data-ttu-id="7ec08-472"><xref:System.String.TrimEnd%2A> 删除字符串末尾的所有匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-472"><xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.</span></span>

- <span data-ttu-id="7ec08-473"><xref:System.String.TrimStart%2A> 从字符串的开头移除字符的所有匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-473"><xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="7ec08-474">所有字符串修改方法都将返回新的 <xref:System.String> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-474">All string modification methods return a new <xref:System.String> object.</span></span> <span data-ttu-id="7ec08-475">它们不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-475">They don't modify the value of the current instance.</span></span>

### <a name="extract-substrings-from-a-string"></a><span data-ttu-id="7ec08-476">从字符串中提取子字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-476">Extract substrings from a string</span></span>

<span data-ttu-id="7ec08-477"><xref:System.String.Split%2A?displayProperty=nameWithType>方法将单个字符串分隔为多个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-477">The <xref:System.String.Split%2A?displayProperty=nameWithType> method separates a single string into multiple strings.</span></span> <span data-ttu-id="7ec08-478">方法的重载允许您指定多个分隔符，以限制该方法提取的子字符串的数量，并可指定是否 (空字符串（当分隔符为相邻时) 会包含在返回的字符串中）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-478">Overloads of the method allow you to specify multiple delimiters, to limit the number of substrings that the method extracts, to trim white space from substrings, and to specify whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.</span></span>

### <a name="combine-strings"></a><span data-ttu-id="7ec08-479">合并字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-479">Combine strings</span></span>

<span data-ttu-id="7ec08-480">以下 <xref:System.String> 方法可用于字符串串联：</span><span class="sxs-lookup"><span data-stu-id="7ec08-480">The following <xref:System.String> methods can be used for string concatenation:</span></span>

- <span data-ttu-id="7ec08-481"><xref:System.String.Concat%2A> 将一个或多个子字符串合并为一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-481"><xref:System.String.Concat%2A> combines one or more substrings into a single string.</span></span>

- <span data-ttu-id="7ec08-482"><xref:System.String.Join%2A> 将一个或多个子字符串连接到单个元素，并在每个子字符串之间添加分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-482"><xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.</span></span>

### <a name="format-values"></a><span data-ttu-id="7ec08-483">设置值格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-483">Format values</span></span>

<span data-ttu-id="7ec08-484"><xref:System.String.Format%2A?displayProperty=nameWithType>方法使用复合格式设置功能将字符串中的一个或多个占位符替换为一些对象或值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-484">The <xref:System.String.Format%2A?displayProperty=nameWithType> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.</span></span> <span data-ttu-id="7ec08-485"><xref:System.String.Format%2A>方法通常用于执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="7ec08-485">The <xref:System.String.Format%2A> method is often used to do the following:</span></span>

- <span data-ttu-id="7ec08-486">在字符串中嵌入数值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-486">To embed the string representation of a numeric value in a string.</span></span>

- <span data-ttu-id="7ec08-487">在字符串中嵌入日期和时间值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-487">To embed the string representation of a date and time value in a string.</span></span>

- <span data-ttu-id="7ec08-488">在字符串中嵌入枚举值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-488">To embed the string representation of an enumeration value in a string.</span></span>

- <span data-ttu-id="7ec08-489">在字符串中嵌入支持接口的某些对象的字符串表示形式 <xref:System.IFormattable> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-489">To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.</span></span>

- <span data-ttu-id="7ec08-490">如果为，则在较大字符串中右对齐或左对齐字段中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-490">To right-justify or left-justify a substring in a field within a larger string.</span></span>

 <span data-ttu-id="7ec08-491">有关格式化操作和示例的详细信息，请参阅 " <xref:System.String.Format%2A> 重载摘要"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-491">For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.</span></span>

### <a name="copy-a-string"></a><span data-ttu-id="7ec08-492">复制字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-492">Copy a string</span></span>

<span data-ttu-id="7ec08-493">您可以调用以下 <xref:System.String> 方法来创建字符串的副本：</span><span class="sxs-lookup"><span data-stu-id="7ec08-493">You can call the following <xref:System.String> methods to make a copy of a string:</span></span>

- <span data-ttu-id="7ec08-494"><xref:System.String.Clone%2A> 返回对现有对象的引用 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-494"><xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.</span></span>

- <span data-ttu-id="7ec08-495"><xref:System.String.Copy%2A> 创建现有字符串的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-495"><xref:System.String.Copy%2A> creates a copy of an existing string.</span></span>

- <span data-ttu-id="7ec08-496"><xref:System.String.CopyTo%2A> 将部分字符串复制到字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-496"><xref:System.String.CopyTo%2A> copies a portion of a string to a character array.</span></span>

### <a name="normalize-a-string"></a><span data-ttu-id="7ec08-497">规范化字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-497">Normalize a string</span></span>

<span data-ttu-id="7ec08-498">在 Unicode 中，单个字符可以有多个码位。</span><span class="sxs-lookup"><span data-stu-id="7ec08-498">In Unicode, a single character can have multiple code points.</span></span> <span data-ttu-id="7ec08-499">规范化将这些等效字符转换为相同的二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-499">Normalization converts these equivalent characters into the same binary representation.</span></span> <span data-ttu-id="7ec08-500"><xref:System.String.Normalize%2A?displayProperty=nameWithType>方法执行规范化， <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> 方法确定字符串是否规范化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-500">The <xref:System.String.Normalize%2A?displayProperty=nameWithType> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> method determines whether a string is normalized.</span></span>

<span data-ttu-id="7ec08-501">有关详细信息和示例，请参阅本主题前面的 [规范化](#Normalization) 部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-501">For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.</span></span>

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/download/details.aspx?id=10921"><span data-ttu-id="7ec08-502">仅限 Windows ( .NET Framework 和 .NET Core 的权重表) </span><span class="sxs-lookup"><span data-stu-id="7ec08-502">Sorting Weight Tables for Windows (.NET Framework and .NET Core only)</span></span></related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt"><span data-ttu-id="7ec08-503">默认 Unicode 排序规则元素表</span><span class="sxs-lookup"><span data-stu-id="7ec08-503">Default Unicode Collation Element Tables</span></span></related>
    <threadsafe><span data-ttu-id="7ec08-504">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-504">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.ICloneable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Text.StringBuilder" />
    <altmember cref="T:System.Globalization.CultureInfo" />
    <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-505">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-505">Formatting Types in .NET</span></span></related>
    <related type="Article" href="/dotnet/standard/base-types/best-practices-strings"><span data-ttu-id="7ec08-506">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="7ec08-506">Best Practices for Using Strings in .NET</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-507">初始化 <see cref="T:System.String" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-507">Initializes a new instance of the <see cref="T:System.String" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="7ec08-508">本节内容：</span><span class="sxs-lookup"><span data-stu-id="7ec08-508">In this section:</span></span>

<span data-ttu-id="7ec08-509">[重载的构造函数语法](#Syntax)</span><span class="sxs-lookup"><span data-stu-id="7ec08-509">[Overloaded constructor syntax](#Syntax)</span></span>\
<span data-ttu-id="7ec08-510">[Parameters](#Params)</span><span class="sxs-lookup"><span data-stu-id="7ec08-510">[Parameters](#Params)</span></span>\
<span data-ttu-id="7ec08-511">[不同](#Exceptions)</span><span class="sxs-lookup"><span data-stu-id="7ec08-511">[Exceptions](#Exceptions)</span></span>\
<span data-ttu-id="7ec08-512">[我要调用哪种方法？](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="7ec08-512">[Which method do I call?](#Tasks)</span></span>\
<span data-ttu-id="7ec08-513">[创建字符串](#Creating_Strings)</span><span class="sxs-lookup"><span data-stu-id="7ec08-513">[Creating strings](#Creating_Strings)</span></span>\
[<span data-ttu-id="7ec08-514">处理重复的字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-514">Handle repetitive strings</span></span>](#Repetitive)

<span data-ttu-id="7ec08-515">实例化字符串示例：</span><span class="sxs-lookup"><span data-stu-id="7ec08-515">Examples of instantiating strings:</span></span>

<span data-ttu-id="7ec08-516">[使用字符串赋值](#Ctor1_Example)</span><span class="sxs-lookup"><span data-stu-id="7ec08-516">[Use string assignment](#Ctor1_Example)</span></span>\
<span data-ttu-id="7ec08-517">[使用字符数组](#Ctor2_Example)</span><span class="sxs-lookup"><span data-stu-id="7ec08-517">[Use a character array](#Ctor2_Example)</span></span>\
<span data-ttu-id="7ec08-518">[使用字符数组的一部分并重复使用单个字符](#Ctor3_Example)</span><span class="sxs-lookup"><span data-stu-id="7ec08-518">[Use a portion of a character array and repeating a single character](#Ctor3_Example)</span></span>\
<span data-ttu-id="7ec08-519">[使用指向字符数组的指针](#Ctor4_Example)</span><span class="sxs-lookup"><span data-stu-id="7ec08-519">[Use a pointer to a character array](#Ctor4_Example)</span></span>\
<span data-ttu-id="7ec08-520">[使用指针和数组的范围](#Ctor5_Example)</span><span class="sxs-lookup"><span data-stu-id="7ec08-520">[Use  a pointer and a range of an array](#Ctor5_Example)</span></span>\
[<span data-ttu-id="7ec08-521">使用带符号字节数组的指针</span><span class="sxs-lookup"><span data-stu-id="7ec08-521">Use a pointer to a signed byte array</span></span>](#Ctor6_Example)

<a name="Syntax"></a>
## <a name="overloaded-constructor-syntax"></a><span data-ttu-id="7ec08-522">重载的构造函数语法</span><span class="sxs-lookup"><span data-stu-id="7ec08-522">Overloaded constructor syntax</span></span>

<span data-ttu-id="7ec08-523">字符串构造函数分为两类：不带指针参数的类，以及带有指针参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-523">String constructors fall into two categories: those without pointer parameters, and those with pointer parameters.</span></span> <span data-ttu-id="7ec08-524">使用指针的构造函数不符合 CLS。</span><span class="sxs-lookup"><span data-stu-id="7ec08-524">The constructors that use pointers are not CLS-compliant.</span></span> <span data-ttu-id="7ec08-525">此外，Visual Basic 不支持使用指针，并且 c # 要求使用指针的代码在不安全的上下文中运行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-525">In addition, Visual Basic does not support the use of pointers, and C# requires code that uses pointers to run in an unsafe context.</span></span> <span data-ttu-id="7ec08-526">有关详细信息，请参阅 [unsafe](/dotnet/csharp/language-reference/keywords/unsafe)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-526">For more information, see [unsafe](/dotnet/csharp/language-reference/keywords/unsafe).</span></span>

<span data-ttu-id="7ec08-527">有关选择重载的其他指导，请参阅 [应该调用哪种方法？](#Tasks)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-527">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks).</span></span>

 `String(Char[] value)`\
 <span data-ttu-id="7ec08-528">将新实例初始化为由 Unicode 字符数组指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-528">Initializes the new instance to the value indicated by an array of Unicode characters.</span></span> <span data-ttu-id="7ec08-529">此构造函数将 Unicode 字符复制 ([示例](#Ctor2_Example)) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-529">This constructor copies Unicode characters([example](#Ctor2_Example)).</span></span>

 `String(Char[] value, Int32 startIndex, Int32 length)`\
 <span data-ttu-id="7ec08-530">将新实例初始化为由 Unicode 字符数组指示的值、该数组内的起始字符位置和长度 ([示例](#Ctor3_Example)) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-530">Initializes the new instance to the value indicated by an array of Unicode characters, a starting character position within that array, and a length ([example](#Ctor3_Example)).</span></span>

 `String(Char c, Int32 count)`\
 <span data-ttu-id="7ec08-531">将新的实例初始化为指定 Unicode 字符指示的值， ([示例](#Ctor3_Example)) 重复指定的次数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-531">Initializes the new instance to the value indicated by a specified Unicode character repeated a specified number of times ([example](#Ctor3_Example)).</span></span>

 `String(char* value)`\
 <span data-ttu-id="7ec08-532">**(不符合 CLS)** 将新的实例初始化为由指向 Unicode 字符数组的指针指示的值，该数组由 null 字符 (U + 0000 或 "\ 0" ) 终止。</span><span class="sxs-lookup"><span data-stu-id="7ec08-532">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters that is terminated by a null character (U+0000 or '\0').</span></span> <span data-ttu-id="7ec08-533"> ([示例](#Ctor4_Example)) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-533">([example](#Ctor4_Example)).</span></span>

 <span data-ttu-id="7ec08-534">权限： <xref:System.Security.SecurityCriticalAttribute> 需要直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="7ec08-534">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ec08-535">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-535">This member cannot be used by partially trusted or transparent code.</span></span>

 `String(char* value, Int32 startIndex, Int32 length)`\
 <span data-ttu-id="7ec08-536">**(不符合 CLS)** 将新的实例初始化为由指向 Unicode 字符数组的指针、该数组内的起始字符位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-536">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span> <span data-ttu-id="7ec08-537">构造函数从 `value` 索引处开始复制 Unicode 字符 `startIndex` ，并在索引-1 处结束， `startIndex`  +  `length` ([示例](#Ctor5_Example)) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-537">The constructor copies the Unicode characters from `value` starting at index `startIndex` and ending at index `startIndex` + `length` - 1 ([example](#Ctor5_Example)).</span></span>

 <span data-ttu-id="7ec08-538">权限： <xref:System.Security.SecurityCriticalAttribute> 需要直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="7ec08-538">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ec08-539">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-539">This member cannot be used by partially trusted or transparent code.</span></span>

 `String(SByte* value)`\
 <span data-ttu-id="7ec08-540">**(不符合 CLS)** 将新的实例初始化为由指向8位有符号整数数组的指针指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-540">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="7ec08-541">假定数组表示使用当前系统代码页编码的字符串 (即) 指定的编码 <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-541">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="7ec08-542">构造函数将处理从 `value` 指针指定的位置开始的字符，直到到达 (0x00)  ([示例](#Ctor6_Example)) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-542">The constructor processes characters from `value` starting from the location specified by the pointer until a null character (0x00) is reached ([example](#Ctor6_Example)).</span></span>

 <span data-ttu-id="7ec08-543">权限： <xref:System.Security.SecurityCriticalAttribute> 需要直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="7ec08-543">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ec08-544">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-544">This member cannot be used by partially trusted or transparent code.</span></span>

 `String(SByte* value, Int32 startIndex, Int32 length)`\
 <span data-ttu-id="7ec08-545">**(不符合 CLS)** 将新实例初始化为由指向8位有符号整数数组的指针、该数组内的起始位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-545">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span>  <span data-ttu-id="7ec08-546">假定数组表示使用当前系统代码页编码的字符串 (即) 指定的编码 <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-546">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="7ec08-547">构造函数从开始 `startIndex` ，到 `startIndex`  +  `length` -1 ([示例](#Ctor6_Example)) 的值处理字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-547">The constructor processes characters from value starting at `startIndex` and ending at `startIndex` + `length` - 1 ([example](#Ctor6_Example)).</span></span>

 <span data-ttu-id="7ec08-548">权限： <xref:System.Security.SecurityCriticalAttribute> 需要直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="7ec08-548">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ec08-549">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-549">This member cannot be used by partially trusted or transparent code.</span></span>

 `String(SByte* value, Int32 startIndex, Int32 length, Encoding enc)`\
 <span data-ttu-id="7ec08-550">**(不符合 CLS)** 将新实例初始化为由指向8位有符号整数数组的指针、该数组内的起始位置、长度和对象指示的值 <xref:System.Text.Encoding> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-550">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref:System.Text.Encoding> object.</span></span>

 <span data-ttu-id="7ec08-551">权限： <xref:System.Security.SecurityCriticalAttribute> 需要直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="7ec08-551">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="7ec08-552">部分受信任的或透明的代码不能使用此成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-552">This member cannot be used by partially trusted or transparent code.</span></span>

<a name="Params"></a>
## <a name="parameters"></a><span data-ttu-id="7ec08-553">参数</span><span class="sxs-lookup"><span data-stu-id="7ec08-553">Parameters</span></span>

<span data-ttu-id="7ec08-554">下面是 <xref:System.String> 不包含指针参数的构造函数所使用的参数的完整列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-554">Here is a complete list of parameters used by <xref:System.String> constructors that don't include a pointer parameter.</span></span> <span data-ttu-id="7ec08-555">对于每个重载使用的参数，请参阅上述重载语法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-555">For the parameters used by each overload, see the overload syntax above.</span></span>

|<span data-ttu-id="7ec08-556">参数</span><span class="sxs-lookup"><span data-stu-id="7ec08-556">Parameter</span></span>|<span data-ttu-id="7ec08-557">类型</span><span class="sxs-lookup"><span data-stu-id="7ec08-557">Type</span></span>|<span data-ttu-id="7ec08-558">说明</span><span class="sxs-lookup"><span data-stu-id="7ec08-558">Description</span></span>|
|---------------|----------|-----------------|
|`value`|<span data-ttu-id="7ec08-559"><xref:System.Char>[]</span><span class="sxs-lookup"><span data-stu-id="7ec08-559"><xref:System.Char>[]</span></span>|<span data-ttu-id="7ec08-560">Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-560">An array of Unicode characters.</span></span>|
|`c`|<xref:System.Char>|<span data-ttu-id="7ec08-561">一个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-561">A Unicode character.</span></span>|
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="7ec08-562">`value`新字符串中第一个字符的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-562">The starting position in `value` of the first character in the new string.</span></span><br /><br /> <span data-ttu-id="7ec08-563">默认值：0</span><span class="sxs-lookup"><span data-stu-id="7ec08-563">Default value: 0</span></span>|
|`length`|<xref:System.Int32>|<span data-ttu-id="7ec08-564">要包含在新字符串中的中的字符数 `value` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-564">The number of characters in `value` to include in the new string.</span></span><br /><br /> <span data-ttu-id="7ec08-565">默认值：30<xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="7ec08-565">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|
|`count`|<xref:System.Int32>|<span data-ttu-id="7ec08-566">`c`在新字符串中重复字符的次数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-566">The number of times the character `c` is repeated in the new string.</span></span> <span data-ttu-id="7ec08-567">如果 `count` 为零，则新对象的值为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-567">If `count` is zero, the value of the new object is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|

 <span data-ttu-id="7ec08-568">下面是 <xref:System.String> 包含指针参数的构造函数所使用的参数的完整列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-568">Here is a complete list of parameters used by <xref:System.String> constructors that include a pointer parameter.</span></span> <span data-ttu-id="7ec08-569">对于每个重载使用的参数，请参阅上述重载语法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-569">For the parameters used by each overload, see the overload syntax above.</span></span>

|<span data-ttu-id="7ec08-570">参数</span><span class="sxs-lookup"><span data-stu-id="7ec08-570">Parameter</span></span>|<span data-ttu-id="7ec08-571">类型</span><span class="sxs-lookup"><span data-stu-id="7ec08-571">Type</span></span>|<span data-ttu-id="7ec08-572">描述</span><span class="sxs-lookup"><span data-stu-id="7ec08-572">Description</span></span>|
|---------------|----------|-----------------|
|`value`|<xref:System.Char>*<br /><br /> <span data-ttu-id="7ec08-573">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-573">-or-</span></span><br /><br /> <xref:System.SByte>\*|<span data-ttu-id="7ec08-574">指向以 null 结尾的 Unicode 字符数组的指针或一个8位有符号整数数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-574">A pointer to a null-terminated array of Unicode characters or an array of 8-bit signed integers.</span></span> <span data-ttu-id="7ec08-575">如果 `value` 为 `null` 或空数组，则新字符串的值为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-575">If `value` is `null` or an empty array, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="7ec08-576">数组元素的索引，该元素定义新字符串中的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-576">The index of the array element that defines the first character in the new string.</span></span><br /><br /> <span data-ttu-id="7ec08-577">默认值：0</span><span class="sxs-lookup"><span data-stu-id="7ec08-577">Default value: 0</span></span>|
|`length`|<xref:System.Int32>|<span data-ttu-id="7ec08-578">用于创建新字符串的数组元素的数目。</span><span class="sxs-lookup"><span data-stu-id="7ec08-578">The number of array elements to use to create the new string.</span></span> <span data-ttu-id="7ec08-579">如果 length 为零，则构造函数将创建一个值为的字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-579">If length is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span><br /><br /> <span data-ttu-id="7ec08-580">默认值：30<xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="7ec08-580">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|
|`enc`|<xref:System.Text.Encoding>|<span data-ttu-id="7ec08-581">一个对象，该对象指定如何对 `value` 数组进行编码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-581">An object that specifies how the `value` array is encoded.</span></span><br /><br /> <span data-ttu-id="7ec08-582">默认值： <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> ，或系统的当前 ANSI 代码页</span><span class="sxs-lookup"><span data-stu-id="7ec08-582">Default value: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>, or the system's current ANSI code page</span></span>|

<a name="Exceptions"></a>
## <a name="exceptions"></a><span data-ttu-id="7ec08-583">异常</span><span class="sxs-lookup"><span data-stu-id="7ec08-583">Exceptions</span></span>
 <span data-ttu-id="7ec08-584">下面是不包含指针参数的构造函数引发的异常列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-584">Here's a list of exceptions thrown by constructors that don't include pointer parameters.</span></span>

|<span data-ttu-id="7ec08-585">异常</span><span class="sxs-lookup"><span data-stu-id="7ec08-585">Exception</span></span>|<span data-ttu-id="7ec08-586">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-586">Condition</span></span>|<span data-ttu-id="7ec08-587">引发者</span><span class="sxs-lookup"><span data-stu-id="7ec08-587">Thrown by</span></span>|
|---------------|---------------|---------------|
|<xref:System.ArgumentNullException>|<span data-ttu-id="7ec08-588">`value` 为 `null`。</span><span class="sxs-lookup"><span data-stu-id="7ec08-588">`value` is `null`.</span></span>|<xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)>|
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="7ec08-589">`startIndex`、 `length` 或 `count` 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-589">`startIndex`,`length`, or `count` is less than zero.</span></span><br /><br /> <span data-ttu-id="7ec08-590">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-590">-or-</span></span><br /><br /> <span data-ttu-id="7ec08-591">`startIndex` 与 `length` 的和大于 `value` 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-591">The sum of `startIndex` and `length` is greater than the number of elements in `value`.</span></span><br /><br /> <span data-ttu-id="7ec08-592">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-592">-or-</span></span><br /><br /> <span data-ttu-id="7ec08-593">`count` 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-593">`count` is less than zero.</span></span>|<xref:System.String.%23ctor(System.Char%2CSystem.Int32)><br /><br /> <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)>|

 <span data-ttu-id="7ec08-594">下面是包含指针参数的构造函数引发的异常列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-594">Here's a list of exceptions thrown by constructors that include pointer parameters.</span></span>

|<span data-ttu-id="7ec08-595">异常</span><span class="sxs-lookup"><span data-stu-id="7ec08-595">Exception</span></span>|<span data-ttu-id="7ec08-596">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-596">Condition</span></span>|<span data-ttu-id="7ec08-597">引发者</span><span class="sxs-lookup"><span data-stu-id="7ec08-597">Thrown by</span></span>|
|---------------|---------------|---------------|
|<xref:System.ArgumentException>|<span data-ttu-id="7ec08-598">`value` 指定包含无效 Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-598">`value` specifies an array that contains an invalid Unicode character.</span></span><br /><br /> <span data-ttu-id="7ec08-599">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-599">-or-</span></span><br /><br /> <span data-ttu-id="7ec08-600">`value`或 `value`  +  `startIndex` 指定的地址小于64k。</span><span class="sxs-lookup"><span data-stu-id="7ec08-600">`value` or `value` + `startIndex` specifies an address that is less than 64K.</span></span><br /><br /> <span data-ttu-id="7ec08-601">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-601">-or-</span></span><br /><br /> <span data-ttu-id="7ec08-602"><xref:System.String>无法从字节数组初始化新的实例， `value` 因为不 `value` 使用默认代码页编码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-602">A new <xref:System.String> instance could not be initialized from the `value` byte array because `value` does not use the default code page encoding.</span></span>|<span data-ttu-id="7ec08-603">带有指针的所有构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-603">All constructors with pointers.</span></span>|
|<xref:System.ArgumentNullException>|<span data-ttu-id="7ec08-604">`value` 为 null。</span><span class="sxs-lookup"><span data-stu-id="7ec08-604">`value` is null.</span></span>|<xref:System.String.%23ctor(System.SByte%2A)><br /><br /> <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)><br /><br /> <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding)>|
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="7ec08-605">当前进程不具有对所有通过地址访问的字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="7ec08-605">The current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="7ec08-606">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-606">-or-</span></span><br /><br /> <span data-ttu-id="7ec08-607">`startIndex` 或 `length` 小于零，`value` + `startIndex` 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="7ec08-607">`startIndex` or `length` is less than zero, `value` + `startIndex` cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="7ec08-608">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-608">-or-</span></span><br /><br /> <span data-ttu-id="7ec08-609">新字符串的长度太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-609">The length of the new string is too large to allocate.</span></span>|<span data-ttu-id="7ec08-610">带有指针的所有构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-610">All constructors with pointers.</span></span>|
|<xref:System.AccessViolationException>|<span data-ttu-id="7ec08-611">`value`，或 `value`  +  `startIndex`  +  `length` 为-1，则指定无效的地址。</span><span class="sxs-lookup"><span data-stu-id="7ec08-611">`value`, or `value` + `startIndex` + `length` - 1, specifies an invalid address.</span></span>|<xref:System.String.%23ctor(System.SByte%2A)><br /><br /> <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)><br /><br /> <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding)>|

<a name="Tasks"></a>
## <a name="which-method-do-i-call"></a><span data-ttu-id="7ec08-612">我要调用哪种方法？</span><span class="sxs-lookup"><span data-stu-id="7ec08-612">Which method do I call?</span></span>

|<span data-ttu-id="7ec08-613">功能</span><span class="sxs-lookup"><span data-stu-id="7ec08-613">To</span></span>|<span data-ttu-id="7ec08-614">调用或使用</span><span class="sxs-lookup"><span data-stu-id="7ec08-614">Call or use</span></span>|
|--------|-----------------|
|<span data-ttu-id="7ec08-615">创建一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-615">Create a string.</span></span>|<span data-ttu-id="7ec08-616">从字符串文字或现有字符串赋值 ([示例](#Ctor1_Example)) </span><span class="sxs-lookup"><span data-stu-id="7ec08-616">Assignment from a string literal or an existing string ([example](#Ctor1_Example))</span></span>|
|<span data-ttu-id="7ec08-617">从整个字符数组创建字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-617">Create a string from an entire character array.</span></span>|<span data-ttu-id="7ec08-618"><xref:System.String.%23ctor(System.Char%5B%5D)> ([示例](#Ctor2_Example)) </span><span class="sxs-lookup"><span data-stu-id="7ec08-618"><xref:System.String.%23ctor(System.Char%5B%5D)> ([example](#Ctor2_Example))</span></span>|
|<span data-ttu-id="7ec08-619">从字符数组的一部分创建字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-619">Create a string from a portion of a character array.</span></span>|<span data-ttu-id="7ec08-620"><xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> ([示例](#Ctor3_Example)) </span><span class="sxs-lookup"><span data-stu-id="7ec08-620"><xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> ([example](#Ctor3_Example))</span></span>|
|<span data-ttu-id="7ec08-621">创建多次重复相同字符的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-621">Create a string that repeats the same character multiple times.</span></span>|<span data-ttu-id="7ec08-622"><xref:System.String.%23ctor(System.Char%2CSystem.Int32)> ([示例](#Ctor3_Example)) </span><span class="sxs-lookup"><span data-stu-id="7ec08-622"><xref:System.String.%23ctor(System.Char%2CSystem.Int32)> ([example](#Ctor3_Example))</span></span>|
|<span data-ttu-id="7ec08-623">从指向 Unicode 或宽字符数组的指针创建一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-623">Create a string from a pointer to a Unicode or wide character array.</span></span>|<xref:System.String.%23ctor(System.Char%2A)>|
|<span data-ttu-id="7ec08-624">使用其指针从 Unicode 或宽字符数组的一部分创建字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-624">Create a string from a portion of a Unicode or wide character array by using its pointer.</span></span>|<xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)>|
|<span data-ttu-id="7ec08-625">创建 c + + 数组中的字符串 `char` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-625">Create a string from a C++ `char` array.</span></span>|<span data-ttu-id="7ec08-626"><xref:System.String.%23ctor(System.SByte%2A)>, <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)></span><span class="sxs-lookup"><span data-stu-id="7ec08-626"><xref:System.String.%23ctor(System.SByte%2A)>, <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)></span></span><br /><br /> <span data-ttu-id="7ec08-627">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-627">-or-</span></span><br /><br /> <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding)>|
|<span data-ttu-id="7ec08-628">从 ASCII 字符创建一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-628">Create a string from ASCII characters.</span></span>|<xref:System.Text.ASCIIEncoding.GetString%2A?displayProperty=nameWithType>|

<a name="Creating_Strings"></a>
## <a name="create-strings"></a><span data-ttu-id="7ec08-629">创建字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-629">Create strings</span></span>

<span data-ttu-id="7ec08-630">以编程方式创建字符串时最常用的方法是简单赋值，如 [本示例](#Ctor1_Example)中所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-630">The most commonly used technique for creating strings programmatically is simple assignment, as illustrated in [this example](#Ctor1_Example).</span></span> <span data-ttu-id="7ec08-631"><xref:System.String>类还包括四种类型的构造函数重载，可用于从以下值创建字符串：</span><span class="sxs-lookup"><span data-stu-id="7ec08-631">The <xref:System.String> class also includes four types of constructor overloads that let you create strings from the following values:</span></span>

- <span data-ttu-id="7ec08-632">从字符数组 (由 UTF-16 编码的字符组成的数组) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-632">From a character array (an array of UTF-16-encoded characters).</span></span> <span data-ttu-id="7ec08-633">您可以 <xref:System.String> 从整个数组或其中某个部分的字符创建新的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-633">You can create a new <xref:System.String> object from the characters in the entire array or a portion of it.</span></span> <span data-ttu-id="7ec08-634"><xref:System.String.%23ctor(System.Char%5B%5D)>构造函数将数组中的所有字符复制到新字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-634">The <xref:System.String.%23ctor(System.Char%5B%5D)> constructor copies all the characters in the array to the new string.</span></span> <span data-ttu-id="7ec08-635"><xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)>构造函数将索引中的字符复制 `startIndex` 到索引 `startIndex`  +  `length` -1 到新的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-635">The <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> constructor copies the characters from index `startIndex` to index `startIndex` + `length` - 1 to the new string.</span></span> <span data-ttu-id="7ec08-636">如果 `length` 为零，则新字符串的值为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-636">If `length` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

  <span data-ttu-id="7ec08-637">如果你的代码重复实例化具有相同值的字符串，则可以使用创建字符串的替代方法来提高应用程序性能。</span><span class="sxs-lookup"><span data-stu-id="7ec08-637">If your code repeatedly instantiates strings that have the same value, you can improve application performance by using an alternate means of creating strings.</span></span> <span data-ttu-id="7ec08-638">有关详细信息，请参阅 [处理重复的字符串](#Repetitive)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-638">For more information, see [Handling repetitive strings](#Repetitive).</span></span>

- <span data-ttu-id="7ec08-639">使用构造函数从零次、一次或多次重复的单个字符 <xref:System.String.%23ctor(System.Char%2CSystem.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-639">From a single character that is duplicated zero, one, or more times, by using the <xref:System.String.%23ctor(System.Char%2CSystem.Int32)> constructor.</span></span> <span data-ttu-id="7ec08-640">如果 `count` 为零，则新字符串的值为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-640">If `count` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

- <span data-ttu-id="7ec08-641">通过使用 <xref:System.String.%23ctor(System.Char%2A)> 或构造函数从指向以 null 结尾的字符数组的指针 <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-641">From a pointer to a null-terminated character array, by using the <xref:System.String.%23ctor(System.Char%2A)> or <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> constructor.</span></span> <span data-ttu-id="7ec08-642">整个数组或指定范围可用于初始化字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-642">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="7ec08-643">构造函数从指定的指针或从指定的指针加上 `startIndex` 并继续到数组的末尾或为字符复制一系列 Unicode 字符 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-643">The constructor copies a sequence of Unicode characters starting from the specified pointer or from the specified pointer plus `startIndex` and continuing to the end of the array or for `length` characters.</span></span> <span data-ttu-id="7ec08-644">如果 `value` 为 null 指针或 `length` 为零，则构造函数将创建一个值为的字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-644">If `value` is a null pointer or `length` is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-645">如果复制操作继续到数组末尾，并且数组不是以 null 终止的，则构造函数行为与系统相关。</span><span class="sxs-lookup"><span data-stu-id="7ec08-645">If the copy operation proceeds to the end of the array and the array is not null-terminated, the constructor behavior is system-dependent.</span></span> <span data-ttu-id="7ec08-646">这种情况可能导致访问冲突。</span><span class="sxs-lookup"><span data-stu-id="7ec08-646">Such a condition might cause an access violation.</span></span>

  <span data-ttu-id="7ec08-647">如果数组包含任何嵌入的 null 字符 (U + 0000 或 "\ 0" ) 并且 <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> 调用了重载，则字符串实例将包含包含 `length` 任何嵌入的 null 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-647">If the array contains any embedded null characters (U+0000 or '\0') and the <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="7ec08-648">下面的示例演示在将包含两个 null 字符的数组的指针传递到方法时会发生的情况 <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-648">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> method.</span></span> <span data-ttu-id="7ec08-649">由于地址是数组的开头，数组中的所有元素都将添加到字符串，因此构造函数将实例化包含10个字符的字符串，包括两个嵌入的 null。</span><span class="sxs-lookup"><span data-stu-id="7ec08-649">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="7ec08-650">另一方面，如果将同一个数组传递给 <xref:System.String.%23ctor(System.Char%2A)> 构造函数，则结果是一个四个字符的字符串，该字符串不包含第一个 null 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-650">On the other hand, if the same array is passed to the <xref:System.String.%23ctor(System.Char%2A)> constructor, the result is a four-character string that does not include the first null character.</span></span>

  [!code-cpp[System.String.ctor#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/chptrctor_null.cpp#5)]
  [!code-csharp[System.String.ctor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/chptrctor_null.cs#5)]

  <span data-ttu-id="7ec08-651">数组必须包含 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-651">The array must contain Unicode characters.</span></span> <span data-ttu-id="7ec08-652">在 c + + 中，这意味着必须将字符数组定义为 managed <xref:System.Char> [] 类型或非托管 `wchar_t` [] 类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-652">In C++, this means that the character array must be defined either as the managed <xref:System.Char>[] type or the unmanaged`wchar_t`[] type.</span></span>

  <span data-ttu-id="7ec08-653">如果 <xref:System.String.%23ctor(System.Char%2A)> 调用了重载，且数组不是以 null 结尾的，或者如果 <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> 调用了重载，并且 `startIndex`  +  `length` -1 包括的范围超出了为字符序列分配的内存，则构造函数的行为将与系统相关，并可能会发生访问冲突。</span><span class="sxs-lookup"><span data-stu-id="7ec08-653">If the <xref:System.String.%23ctor(System.Char%2A)> overload is called and the array is not null-terminated, or if the <xref:System.String.%23ctor(System.Char%2A%2CSystem.Int32%2CSystem.Int32)> overload is called and `startIndex` + `length`-1 includes a range that is outside the memory allocated for the sequence of characters, the behavior of the constructor is system-dependent, and an access violation may occur.</span></span>

- <span data-ttu-id="7ec08-654">从指向有符号字节数组的指针。</span><span class="sxs-lookup"><span data-stu-id="7ec08-654">From a pointer to a signed byte array.</span></span> <span data-ttu-id="7ec08-655">整个数组或指定范围可用于初始化字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-655">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="7ec08-656">可以使用默认代码页编码来解释字节序列，也可以在构造函数调用中指定编码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-656">The sequence of bytes can be interpreted by using the default code page encoding, or an encoding can be specified in the constructor call.</span></span> <span data-ttu-id="7ec08-657">如果构造函数尝试从整个数组中实例化不是以 null 结尾的字符串，或者从 `value`  +  `startIndex` -1 到-1 的数组范围超出了为 `value`  +  `startIndex`  +  `length` 数组分配的内存，则此构造函数的行为与系统相关，并可能会发生访问冲突。</span><span class="sxs-lookup"><span data-stu-id="7ec08-657">If the constructor tries to instantiate a string from an entire array that is not null-terminated, or if the range of the array from `value` + `startIndex` to `value` + `startIndex` + `length` -1 is outside of the memory allocated for the array, the behavior of this constructor is system-dependent, and an access violation may occur.</span></span>

  <span data-ttu-id="7ec08-658">这三个构造函数将有符号字节数组作为参数，主要用于将 c + + `char` 数组转换为字符串，如以下示例中所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-658">The three constructors that include a signed byte array as a parameter are designed primarily to convert a C++ `char` array to a string, as shown in this example:</span></span>

  [!code-cpp[System.String.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/sbyte_ctor1.cpp#4)]

  <span data-ttu-id="7ec08-659">如果数组包含任何 null 字符 ( "\ 0" ) 或值为0的字节 <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)> ，并且调用了重载，则字符串实例将包含 `length` 任何嵌入的 null 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-659">If the array contains any null characters ('\0') or bytes whose value is 0 and the <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="7ec08-660">下面的示例演示在将包含两个 null 字符的数组的指针传递到方法时会发生的情况 <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-660">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)> method.</span></span> <span data-ttu-id="7ec08-661">由于地址是数组的开头，数组中的所有元素都将添加到字符串，因此构造函数将实例化包含10个字符的字符串，包括两个嵌入的 null。</span><span class="sxs-lookup"><span data-stu-id="7ec08-661">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="7ec08-662">另一方面，如果将同一个数组传递给 <xref:System.String.%23ctor(System.SByte%2A)> 构造函数，则结果是一个四个字符的字符串，该字符串不包含第一个 null 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-662">On the other hand, if the same array is passed to the <xref:System.String.%23ctor(System.SByte%2A)> constructor, the result is a four-character string that does not include the first null character.</span></span>

  [!code-cpp[System.String.ctor#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/ptrctor_null.cpp#6)]
  [!code-csharp[System.String.ctor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ptrctor_null.cs#6)]

  <span data-ttu-id="7ec08-663">由于 <xref:System.String.%23ctor(System.SByte%2A)> 和 <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)> 构造函数 `value` 使用默认的 ANSI 代码页进行解释，因此，使用相同的字节数组调用这些构造函数可能会在不同系统上创建具有不同值的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-663">Because the <xref:System.String.%23ctor(System.SByte%2A)> and <xref:System.String.%23ctor(System.SByte%2A%2CSystem.Int32%2CSystem.Int32)> constructors interpret `value` by using the default ANSI code page, calling these constructors with identical byte arrays may create strings that have different values on different systems.</span></span>

<a name="Repetitive"></a>
## <a name="handle-repetitive-strings"></a><span data-ttu-id="7ec08-664">处理重复的字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-664">Handle repetitive strings</span></span>

<span data-ttu-id="7ec08-665">分析或解码文本流的应用通常使用 <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> 构造函数或方法将 <xref:System.Text.StringBuilder.Append(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)?displayProperty=nameWithType> 字符序列转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-665">Apps that parse or decode streams of text often use the <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> constructor or the <xref:System.Text.StringBuilder.Append(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)?displayProperty=nameWithType> method to convert sequences of characters into a string.</span></span> <span data-ttu-id="7ec08-666">重复创建具有相同值的新字符串，而不是创建和重用一个字符串会浪费内存。</span><span class="sxs-lookup"><span data-stu-id="7ec08-666">Repeatedly creating new strings with the same value instead of creating and reusing one string wastes memory.</span></span> <span data-ttu-id="7ec08-667">如果您可能会通过调用构造函数反复创建相同的字符串值 <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> ，即使您事先事先不知道这些相同的字符串值，也可以改用查找表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-667">If you are likely to create the same string value repeatedly by calling the <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> constructor, even if you don't know in advance what those identical string values may be, you can use a lookup table instead.</span></span>

<span data-ttu-id="7ec08-668">例如，假设您从包含 XML 标记和特性的文件中读取和分析字符流。</span><span class="sxs-lookup"><span data-stu-id="7ec08-668">For example, suppose you read and parse a stream of characters from a file that contains XML tags and attributes.</span></span> <span data-ttu-id="7ec08-669">分析流时，会反复遇到某些标记 (即具有符号表示) 的字符序列。</span><span class="sxs-lookup"><span data-stu-id="7ec08-669">When you parse the stream, you repeatedly encounter certain tokens (that is, sequences of characters that have a symbolic meaning).</span></span> <span data-ttu-id="7ec08-670">与字符串 "0"、"1"、"true" 和 "false" 等效的标记可能经常出现在 XML 流中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-670">Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream.</span></span>

<span data-ttu-id="7ec08-671">你可以创建一个 <xref:System.Xml.NameTable?displayProperty=nameWithType> 对象来保存通常出现的字符串，而不是将每个标记转换为一个新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-671">Instead of converting each token into a new string, you can create a <xref:System.Xml.NameTable?displayProperty=nameWithType> object to hold commonly occurring strings.</span></span> <span data-ttu-id="7ec08-672"><xref:System.Xml.NameTable>对象可提高性能，因为它检索存储的字符串，而不分配临时内存。</span><span class="sxs-lookup"><span data-stu-id="7ec08-672">The <xref:System.Xml.NameTable> object improves performance, because it retrieves stored strings without allocating temporary memory.</span></span> <span data-ttu-id="7ec08-673">如果遇到标记，请使用 <xref:System.Xml.NameTable.Get(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)?displayProperty=nameWithType> 方法从表中检索标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-673">When you encounter a token, use the <xref:System.Xml.NameTable.Get(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)?displayProperty=nameWithType> method to retrieve the token from the table.</span></span> <span data-ttu-id="7ec08-674">如果标记存在，则方法返回相应的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-674">If the token exists, the method returns the corresponding string.</span></span> <span data-ttu-id="7ec08-675">如果该标记不存在，请使用 <xref:System.Xml.NameTable.Add(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)?displayProperty=nameWithType> 方法将该标记插入到表中，并获取相应的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-675">If the token does not exist, use the <xref:System.Xml.NameTable.Add(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)?displayProperty=nameWithType> method to insert the token into the table and to get the corresponding string.</span></span>

<a name="Ctor1_Example"></a>
## <a name="example-1-use-string-assignment"></a><span data-ttu-id="7ec08-676">示例1：使用字符串赋值</span><span class="sxs-lookup"><span data-stu-id="7ec08-676">Example 1: Use string assignment</span></span>

<span data-ttu-id="7ec08-677">下面的示例通过为字符串赋值来创建一个新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-677">The following example creates a new string by assigning it a string literal.</span></span> <span data-ttu-id="7ec08-678">它通过将第一个字符串的值分配给它来创建第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-678">It creates a second string by assigning the value of the first string to it.</span></span> <span data-ttu-id="7ec08-679">这是实例化新对象的两种最常用的方法 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-679">These are the two most common ways to instantiate a new <xref:System.String> object.</span></span>

:::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/assignment.cpp" id="Snippet1":::
:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor1.cs" interactive="try-dotnet" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.ctor/vb/ctor1.vb" id="Snippet1":::

<a name="Ctor2_Example"></a>
## <a name="example-2-use-a-character-array"></a><span data-ttu-id="7ec08-680">示例2：使用字符数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-680">Example 2: Use a character array</span></span>

<span data-ttu-id="7ec08-681">下面的示例演示如何 <xref:System.String> 从字符数组创建新的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-681">The following example demonstrates how to create a new <xref:System.String> object from a character array.</span></span>

:::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp" id="Snippet1":::
:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs" interactive="try-dotnet-method" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb" id="Snippet1":::

<a name="Ctor3_Example"></a>
## <a name="example-3-use-a-portion-of-a-character-array-and-repeating-a-single-character"></a><span data-ttu-id="7ec08-682">示例3：使用字符数组的一部分并重复单个字符</span><span class="sxs-lookup"><span data-stu-id="7ec08-682">Example 3: Use a portion of a character array and repeating a single character</span></span>

<span data-ttu-id="7ec08-683">下面的示例演示如何 <xref:System.String> 从字符数组的一部分创建一个新的对象，以及如何创建一个新的 <xref:System.String> 对象，该对象包含单个字符的多个匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-683">The following example demonstrates how to create a new <xref:System.String> object from a portion of a character array, and how to create a new <xref:System.String> object that contains multiple occurrences of a single character.</span></span>

:::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp" id="Snippet3":::
:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs" interactive="try-dotnet-method" id="Snippet3":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb" id="Snippet3":::

<a name="Ctor4_Example"></a>
## <a name="example-4-use-a-pointer-to-a-character-array"></a><span data-ttu-id="7ec08-684">示例4：使用指向字符数组的指针</span><span class="sxs-lookup"><span data-stu-id="7ec08-684">Example 4: Use a pointer to a character array</span></span>

<span data-ttu-id="7ec08-685">下面的示例演示如何 <xref:System.String> 从指向字符数组的指针创建新的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-685">The following example demonstrates how to create a new <xref:System.String> object from a pointer to an array of characters.</span></span> <span data-ttu-id="7ec08-686">必须使用编译器开关编译 c # 示例 `/unsafe` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-686">The C# example must be compiled by using the `/unsafe` compiler switch.</span></span>

[!code-cpp[System.String.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char1_ctor.cpp#2)]
[!code-csharp[System.String.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor2.cs#2)]

<a name="Ctor5_Example"></a>
## <a name="example-5-instantiate-a-string-from-a-pointer-and-a-range-of-an-array"></a><span data-ttu-id="7ec08-687">示例5：从指针和数组的范围实例化字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-687">Example 5: Instantiate a string from a pointer and a range of an array</span></span>

<span data-ttu-id="7ec08-688">下面的示例检查某个字符数组的元素中是否有句点或感叹号。</span><span class="sxs-lookup"><span data-stu-id="7ec08-688">The following example examines the elements of a character array for either a period or an exclamation point.</span></span> <span data-ttu-id="7ec08-689">如果找到了一个字符串，则会从该标点符号前面的数组中的字符实例化一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-689">If one is found, it instantiates a string from the characters in the array that precede the punctuation symbol.</span></span> <span data-ttu-id="7ec08-690">如果不是，则会实例化包含数组全部内容的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-690">If not, it instantiates a string with the entire contents of the array.</span></span> <span data-ttu-id="7ec08-691">必须使用编译器开关编译 c # 示例 `/unsafe` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-691">The C# example must be compiled using the `/unsafe` compiler switch.</span></span>

[!code-cpp[System.String.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char2_ctor.cpp#3)]
[!code-csharp[System.String.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/char2_ctor.cs#3)]

<a name="Ctor6_Example"></a>
## <a name="example-6-instantiate-a-string-from-a-pointer-to-a-signed-byte-array"></a><span data-ttu-id="7ec08-692">示例6：从指向有符号字节数组的指针实例化字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-692">Example 6: Instantiate a string from a pointer to a signed byte array</span></span>

<span data-ttu-id="7ec08-693">下面的示例演示如何 <xref:System.String> 使用构造函数创建类的实例 <xref:System.String.%23ctor(System.SByte%2A)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-693">The following example demonstrates how you can create an instance of the <xref:System.String> class with the <xref:System.String.%23ctor(System.SByte%2A)> constructor.</span></span>

[!code-cpp[stringexample1#2](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#2)]
[!code-csharp[stringexample1#2](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#2)]

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-694">指向以 null 终止的 Unicode 字符数组的指针。</span><span class="sxs-lookup"><span data-stu-id="7ec08-694">A pointer to a null-terminated array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="7ec08-695">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-695">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-696">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-696">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-697">当前进程不具有对所有通过地址访问的字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="7ec08-697">The current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-698"><paramref name="value" /> 指定的数组包含无效的 Unicode 字符，或 <paramref name="value" /> 指定的地址小于 64000。</span><span class="sxs-lookup"><span data-stu-id="7ec08-698"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new string : char[] -&gt; string" Usage="new System.string value" />
      <MemberSignature Language="C#" Value="public String (char[]? value);" FrameworkAlternate="net-5.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-699">Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-699">An array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="7ec08-700">将 <see cref="T:System.String" /> 类的新实例初始化为指定字符数组中指示的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-700">Initializes a new instance of the <see cref="T:System.String" /> class to the Unicode characters indicated in the specified character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-701">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-701">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="new string : ReadOnlySpan&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-702">Unicode 字符的只读范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-702">A read-only span of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="7ec08-703">将 <see cref="T:System.String" /> 类的新实例初始化为指定只读范围中指示的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-703">Initializes a new instance of the <see cref="T:System.String" /> class to the Unicode characters indicated in the specified read-only span.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-704">一个指针，指向以 null 结尾的 8 位带符号整数数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-704">A pointer to a null-terminated array of 8-bit signed integers.</span></span> <span data-ttu-id="7ec08-705">使用当前系统代码页编码（即由 <see cref="P:System.Text.Encoding.Default" /> 指定的编码）来解释整数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-705">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <summary><span data-ttu-id="7ec08-706">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 8 位有符号整数数组的指针指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-706">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-707">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-707">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-708"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-708"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-709">如果 <paramref name="value" /> 采用 ANSI 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-709">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-710">要初始化的新字符串的长度（该长度由 <paramref name="value" /> 的 null 终止字符确定）太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-710">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="7ec08-711"><paramref name="value" /> 指定的地址无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-711"><paramref name="value" /> specifies an invalid address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char c, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char c, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (c As Char, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char c, int count);" />
      <MemberSignature Language="F#" Value="new string : char * int -&gt; string" Usage="new System.string (c, count)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="7ec08-712">一个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-712">A Unicode character.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-713"><paramref name="c" /> 出现的次数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-713">The number of times <paramref name="c" /> occurs.</span></span></param>
        <summary><span data-ttu-id="7ec08-714">将 <see cref="T:System.String" /> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-714">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-715">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-715">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-716"><paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-716"><paramref name="count" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-717">指向 Unicode 字符数组的指针。</span><span class="sxs-lookup"><span data-stu-id="7ec08-717">A pointer to an array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-718"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-718">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-719">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-719">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="7ec08-720">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值、该数组内的起始字符位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-720">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-721">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-721">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-722"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，<paramref name="value" /> + <paramref name="startIndex" /> 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</span><span class="sxs-lookup"><span data-stu-id="7ec08-722"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-723"><paramref name="value" /> 指定的数组包含无效的 Unicode 字符，或 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64000。</span><span class="sxs-lookup"><span data-stu-id="7ec08-723"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : char[] * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-724">Unicode 字符的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-724">An array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-725"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-725">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-726">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-726">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="7ec08-727">将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-727">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-728">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-728">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-729"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-729"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-730"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-730"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="7ec08-731">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-731">-or-</span></span>

<span data-ttu-id="7ec08-732"><paramref name="startIndex" /> 与 <paramref name="length" /> 的和大于 <paramref name="value" /> 中的元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-732">The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-733">指向 8 位带符号整数数组的指针。</span><span class="sxs-lookup"><span data-stu-id="7ec08-733">A pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="7ec08-734">使用当前系统代码页编码（即由 <see cref="P:System.Text.Encoding.Default" /> 指定的编码）来解释整数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-734">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-735"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-735">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-736">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-736">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="7ec08-737">将 <see cref="T:System.String" /> 类的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置和一个长度指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-737">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-738">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-738">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-739"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-739"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-740"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-740"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="7ec08-741">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-741">-or-</span></span>

<span data-ttu-id="7ec08-742">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。</span><span class="sxs-lookup"><span data-stu-id="7ec08-742">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>

<span data-ttu-id="7ec08-743">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-743">-or-</span></span>

<span data-ttu-id="7ec08-744">要初始化的新字符串的长度太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-744">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-745">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64K。</span><span class="sxs-lookup"><span data-stu-id="7ec08-745">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>

<span data-ttu-id="7ec08-746">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-746">-or-</span></span>

<span data-ttu-id="7ec08-747">如果 <paramref name="value" /> 采用 ANSI 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-747">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="7ec08-748"><paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定的地址无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-748"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length, class System.Text.Encoding enc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length, System::Text::Encoding ^ enc);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int * System.Text.Encoding -&gt; string" Usage="new System.string (value, startIndex, length, enc)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enc" Type="System.Text.Encoding" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-749">指向 8 位带符号整数数组的指针。</span><span class="sxs-lookup"><span data-stu-id="7ec08-749">A pointer to an array of 8-bit signed integers.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-750"><paramref name="value" /> 内的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-750">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-751">要使用的 <paramref name="value" /> 内的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-751">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <param name="enc"><span data-ttu-id="7ec08-752">一个对象，用于指定如何对 <paramref name="value" /> 所引用的数组进行编码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-752">An object that specifies how the array referenced by <paramref name="value" /> is encoded.</span></span> <span data-ttu-id="7ec08-753">如果 <paramref name="enc" /> 为 <see langword="null" />，则假定以 ANSI 编码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-753">If <paramref name="enc" /> is <see langword="null" />, ANSI encoding is assumed.</span></span></param>
        <summary><span data-ttu-id="7ec08-754">将 <see cref="T:System.String" /> 的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置、长度以及 <see cref="T:System.Text.Encoding" /> 对象指示的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-754">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-755">有关此和其他构造函数重载的示例和综合使用信息 `String` ，请参阅 <xref:System.String.%23ctor%2A> 构造函数摘要。</span><span class="sxs-lookup"><span data-stu-id="7ec08-755">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-756"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-756"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-757"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-757"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="7ec08-758">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-758">-or-</span></span>

<span data-ttu-id="7ec08-759">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。</span><span class="sxs-lookup"><span data-stu-id="7ec08-759">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>

<span data-ttu-id="7ec08-760">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-760">-or-</span></span>

<span data-ttu-id="7ec08-761">要初始化的新字符串的长度太大，无法分配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-761">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-762">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64K。</span><span class="sxs-lookup"><span data-stu-id="7ec08-762">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>

<span data-ttu-id="7ec08-763">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-763">-or-</span></span>

<span data-ttu-id="7ec08-764">如果 <paramref name="value" /> 按照指定的 <paramref name="enc" /> 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-764">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="7ec08-765"><paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定的地址无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-765"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[int] { char get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Chars(int) : char" Usage="System.string.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="7ec08-766">当前的字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-766">A position in the current string.</span></span></param>
        <summary><span data-ttu-id="7ec08-767">获取当前 <see cref="T:System.Char" /> 对象中位于指定位置的 <see cref="T:System.String" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-767">Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="7ec08-768">位于 <paramref name="index" /> 位置的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-768">The object at position <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-769">`index`参数是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-769">The `index` parameter is zero-based.</span></span>

 <span data-ttu-id="7ec08-770">此属性返回 <xref:System.Char> 参数所指定位置处的对象 `index` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-770">This property returns the <xref:System.Char> object at the position specified by the `index` parameter.</span></span> <span data-ttu-id="7ec08-771">但是，Unicode 字符可能由多个表示 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-771">However, a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="7ec08-772">使用 <xref:System.Globalization.StringInfo?displayProperty=nameWithType> 类来处理 Unicode 字符，而不是 <xref:System.Char> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-772">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with Unicode characters instead of <xref:System.Char> objects.</span></span> <span data-ttu-id="7ec08-773">有关详细信息，请参阅类概述中的 "Char 对象和 Unicode 字符" 一节 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-773">For more information, see the "Char Objects and Unicode Characters" section in the <xref:System.String> class overview.</span></span>

 <span data-ttu-id="7ec08-774">在 c # 中， <xref:System.String.Chars%2A> 属性是一个索引器。</span><span class="sxs-lookup"><span data-stu-id="7ec08-774">In C#, the <xref:System.String.Chars%2A> property is an indexer.</span></span> <span data-ttu-id="7ec08-775">在 Visual Basic 中，这是类的默认属性 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-775">In Visual Basic, it is the default property of the <xref:System.String> class.</span></span> <span data-ttu-id="7ec08-776"><xref:System.Char>可以使用如下代码访问字符串中的每个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-776">Each <xref:System.Char> object in the string can be accessed by using code such as the following.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb" id="Snippet1":::

## Examples
 <span data-ttu-id="7ec08-777">下面的示例演示如何在例程中使用此索引器来验证字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-777">The following example demonstrates how you can use this indexer in a routine to validate a string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Uri_IsHexDigit/CPP/uri_ishexdigit.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/CS/uri_ishexdigit.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Uri_IsHexDigit/VB/uri_ishexdigit.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="7ec08-778"><paramref name="index" /> 大于或等于此对象的长度或小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-778"><paramref name="index" /> is greater than or equal to the length of this object or less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.GetEnumerator" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="string.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-779">返回对此 <see cref="T:System.String" />实例的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-779">Returns a reference to this instance of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-780">此 <see cref="T:System.String" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-780">This instance of <see cref="T:System.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-781">返回值不是此实例的独立副本;它只是相同数据的另一个视图。</span><span class="sxs-lookup"><span data-stu-id="7ec08-781">The return value is not an independent copy of this instance; it is simply another view of the same data.</span></span> <span data-ttu-id="7ec08-782">使用 <xref:System.String.Copy%2A> 或 <xref:System.String.CopyTo%2A> 方法来创建一个 <xref:System.String> 与此实例具有相同值的单独对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-782">Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.</span></span>

 <span data-ttu-id="7ec08-783">因为 <xref:System.String.Clone%2A> 方法只是返回现有的字符串实例，所以很少需要直接调用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-783">Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Copy(System.String)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-784">比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-784">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-785"><xref:System.String.Compare%2A> 方法的所有重载返回一个 32 位有符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-785">All overloads of the <xref:System.String.Compare%2A> method return a 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>

|<span data-ttu-id="7ec08-786">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-786">Value</span></span>|<span data-ttu-id="7ec08-787">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-787">Condition</span></span>|
|-----------|---------------|
|<span data-ttu-id="7ec08-788">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-788">Less than zero</span></span>|<span data-ttu-id="7ec08-789">在排序顺序中，第一个子字符串在第二个子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-789">The first substring precedes the second substring in the sort order.</span></span>|
|<span data-ttu-id="7ec08-790">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-790">Zero</span></span>|<span data-ttu-id="7ec08-791">子字符串在排序顺序中出现的位置相同或 `length` 为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-791">The substrings occur in the same position in the sort order, or `length` is zero.</span></span>|
|<span data-ttu-id="7ec08-792">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-792">Greater than zero</span></span>|<span data-ttu-id="7ec08-793">第一个子字符串在排序顺序中后跟第二个子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-793">The first substring follows the second substring in the sort order.</span></span>|

> [!WARNING]
> <span data-ttu-id="7ec08-794">应尽可能调用 <xref:System.String.Compare%2A> 包含参数的方法的重载 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-794">Whenever possible, you should call an overload of the <xref:System.String.Compare%2A> method that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="7ec08-795">有关详细信息，请参阅[有关使用字符串的最佳实践](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-795">For more information, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/best-practices-strings"><span data-ttu-id="7ec08-796">有关使用 .NET 中字符串的最佳做法</span><span class="sxs-lookup"><span data-stu-id="7ec08-796">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string -&gt; int" Usage="System.string.Compare (strA, strB)" />
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, string? strB);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-797">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-797">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-798">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-798">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="7ec08-799">比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-799">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-800">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-800">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-801">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-801">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-802">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-802">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-803">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-803">Less than zero</span></span>

 </term><description><span data-ttu-id="7ec08-804"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-804"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-805">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-805">Zero</span></span>

 </term><description><span data-ttu-id="7ec08-806"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-806"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-807">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-807">Greater than zero</span></span>

 </term><description><span data-ttu-id="7ec08-808"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-808"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-809">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-809">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="7ec08-810">例如，区域性可以指定将某些字符组合视为单个字符，或以特定方式比较大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-810">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="7ec08-811">使用字词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-811">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="7ec08-812">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-812">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
> <span data-ttu-id="7ec08-813">在比较字符串时，应调用 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> 方法，这要求您显式指定方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-813">When comparing strings, you should call the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="7ec08-814">有关详细信息，请参阅[有关使用字符串的最佳实践](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-814">For more information, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 <span data-ttu-id="7ec08-815">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-815">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-816">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-816">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-817">当发现不相等或已比较两个字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-817">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="7ec08-818">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-818">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-819">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-819">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-820">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-820">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-821">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-821">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]
 [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]
 [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]

 <span data-ttu-id="7ec08-822">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-822">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-823">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-823">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]
 [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]
 [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]

## Examples
 <span data-ttu-id="7ec08-824">下面的示例调用 <xref:System.String.Compare(System.String%2CSystem.String)> 方法来比较三组字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-824">The following example calls the <xref:System.String.Compare(System.String%2CSystem.String)> method to compare three sets of strings.</span></span>

 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp-interactive[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]

 <span data-ttu-id="7ec08-825">在下面的示例中， `ReverseStringComparer` 类演示了如何用方法来计算两个字符串 <xref:System.String.Compare%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-825">In the following example, the `ReverseStringComparer` class demonstrates how you can evaluate two strings with the <xref:System.String.Compare%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/ArrayList/CPP/ArrayListSample.cpp" id="Snippet7":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/ArrayList/CS/ArrayListSample.cs" interactive="try-dotnet" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/ArrayList/VB/ArrayListSample.vb" id="Snippet7":::

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-826">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-826">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-827"><see cref="M:System.String.Compare(System.String,System.String)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-827">The <see cref="M:System.String.Compare(System.String,System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-828">例如，如果以下代码在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则使用软连字符将 "动物" 与 "动物" 的 "动物" 比较（使用 "ani"） (或 U + 00AD) 指示这两个字符串是等效的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-828">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="7ec08-829">[！ code-csharp[system.web. 比较 # 21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)][！ code-vb[system.web. 比较 # 21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-829">[!code-csharp[System.String.Compare#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)] [!code-vb[System.String.Compare#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]</span></span>

<span data-ttu-id="7ec08-830">若要在字符串比较中识别可忽略字符，请调用 <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> 方法，并 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 为参数提供或的值 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-830">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase)" />
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, string? strB, bool ignoreCase);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-831">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-831">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-832">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-832">The second string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-833">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-833"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-834">比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-834">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-835">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-835">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-836">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-836">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-837">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-837">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-838">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-838">Less than zero</span></span>

 </term><description><span data-ttu-id="7ec08-839"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-839"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-840">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-840">Zero</span></span>

 </term><description><span data-ttu-id="7ec08-841"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-841"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-842">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-842">Greater than zero</span></span>

 </term><description><span data-ttu-id="7ec08-843"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-843"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-844">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-844">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="7ec08-845">例如，区域性可以指定将某些字符组合视为单个字符，或以特定方式比较大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-845">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="7ec08-846">使用字词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-846">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="7ec08-847">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-847">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
> <span data-ttu-id="7ec08-848">在比较字符串时，应调用 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> 方法，这要求您显式指定方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-848">When comparing strings, you should call the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="7ec08-849">有关详细信息，请参阅[有关使用字符串的最佳实践](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-849">For more information, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 <span data-ttu-id="7ec08-850">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-850">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-851">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-851">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-852">当发现不相等或已比较两个字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-852">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="7ec08-853">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-853">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-854">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-854">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-855">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-855">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-856">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-856">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]
 [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]
 [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]

 <span data-ttu-id="7ec08-857">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-857">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-858">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-858">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]
 [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]
 [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]

## Examples
 <span data-ttu-id="7ec08-859">下面的示例演示 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.Boolean)> 方法等效于在 <xref:System.String.ToUpper%2A> <xref:System.String.ToLower%2A> 比较字符串时使用或。</span><span class="sxs-lookup"><span data-stu-id="7ec08-859">The following example demonstrates that the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.Boolean)> method is equivalent to using <xref:System.String.ToUpper%2A> or <xref:System.String.ToLower%2A> when comparing strings.</span></span>

 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp-interactive[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-860">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-860">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-861"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-861">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-862">例如，如果以下代码在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则使用软连字符的 "动物" (区分区域性、不区分大小写的 "动物" 或 U + 00AD) 指示这两个字符串是等效的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-862">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive, case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="7ec08-863">[！ code-csharp[system.web. 比较 # 22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)][！ code-vb[system.web. 比较 # 22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-863">[!code-csharp[System.String.Compare#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)] [!code-vb[System.String.Compare#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]</span></span>

<span data-ttu-id="7ec08-864">若要在字符串比较中识别可忽略字符，请调用 <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> 方法，并 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 为参数提供或的值 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-864">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, StringComparison comparisonType);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * StringComparison -&gt; int" Usage="System.string.Compare (strA, strB, comparisonType)" />
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, string? strB, StringComparison comparisonType);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-865">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-865">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-866">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-866">The second string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-867">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-867">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-868">使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-868">Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-869">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-869">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-870">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-870">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-871">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-871">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-872">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-872">Less than zero</span></span>

 </term><description><span data-ttu-id="7ec08-873"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-873"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-874">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-874">Zero</span></span>

 </term><description><span data-ttu-id="7ec08-875"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中的位置相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-875"><paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-876">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-876">Greater than zero</span></span>

 </term><description><span data-ttu-id="7ec08-877"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-877"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-878">`comparisonType`参数指示比较应使用当前的或固定的区域性，是接受还是忽略比较规则的大小写，还是使用 word (区分区域性的) 或序号 (不区分区域性的) 排序规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-878">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>

 <span data-ttu-id="7ec08-879">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-879">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-880">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-880">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-881">当发现不相等或已比较两个字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-881">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="7ec08-882">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-882">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-883">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-883">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-884">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-884">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-885">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-885">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]
 [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]
 [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]

 <span data-ttu-id="7ec08-886">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-886">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-887">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-887">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]
 [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]
 [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]

## Examples
 <span data-ttu-id="7ec08-888">下面的示例比较字母 "I" 的三个版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-888">The following example compares three versions of the letter "I".</span></span> <span data-ttu-id="7ec08-889">结果受区域性选择的影响，是否忽略大小写，以及是否执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-889">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>

 [!code-cpp[System.String.CompareCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.CompareCmp/cpp/cmpcmp.cpp#1)]
 [!code-csharp[System.String.CompareCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.CompareCmp/cs/cmpcmp.cs#1)]
 [!code-vb[System.String.CompareCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.CompareCmp/vb/cmpcmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-890"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-890"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7ec08-891">不支持 <see cref="T:System.StringComparison" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-891"><see cref="T:System.StringComparison" /> is not supported.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-892">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-892">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-893"><see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-893">The <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-894">若要在比较中识别可忽略字符，请 <see cref="F:System.StringComparison.Ordinal" /> 为参数提供值或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-894">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, string? strB, bool ignoreCase, System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase, culture)" />
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-895">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-895">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-896">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-896">The second string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-897">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-897"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-898">一个对象，提供区域性特定的比较信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-898">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="7ec08-899">比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-899">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-900">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-900">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-901">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-901">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-902">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-902">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-903">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-903">Less than zero</span></span>

 </term><description><span data-ttu-id="7ec08-904"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-904"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-905">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-905">Zero</span></span>

 </term><description><span data-ttu-id="7ec08-906"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-906"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-907">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-907">Greater than zero</span></span>

 </term><description><span data-ttu-id="7ec08-908"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-908"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-909">该比较使用 `culture` 参数获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-909">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="7ec08-910">例如，区域性可以指定将某些字符组合视为单个字符，或以特定方式比较大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-910">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="7ec08-911">使用字词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-911">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="7ec08-912">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-912">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-913">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-913">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-914">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-914">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-915">当发现不相等或已比较两个字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-915">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="7ec08-916">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-916">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-917">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-917">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-918">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-918">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-919">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-919">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]
 [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]
 [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]

 <span data-ttu-id="7ec08-920">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-920">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-921">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-921">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]
 [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]
 [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]

## Examples
 <span data-ttu-id="7ec08-922">下面的示例演示区域性如何影响比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-922">The following example demonstrates how culture can affect a comparison.</span></span> <span data-ttu-id="7ec08-923">在捷克语-捷克语，"ch" 是大于 "d" 的单个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-923">In Czech - Czech Republic culture, "ch" is a single character that is greater than "d".</span></span> <span data-ttu-id="7ec08-924">但是，在英语美国区域性中，"ch" 包含两个字符，"c" 小于 "d"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-924">However, in English - United States culture, "ch" consists of two characters, and "c" is less than "d".</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.comp4/CPP/string.comp4.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.comp4/CS/string.comp4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.comp4/VB/string.comp4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-925"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-925"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-926">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-926">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-927"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-927">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-928">例如，如果以下代码在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，在使用软连字符的情况下，不区分大小写的 "动物" (使用软连字符，或使用固定区域性的 U + 00AD) ，则指示这两个字符串是等效的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-928">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) using the invariant culture indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="7ec08-929">[！ code-csharp[system.web. 比较 # 23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)][！ code-vb[system.string. 比较 # 23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-929">[!code-csharp[System.String.Compare#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)] [!code-vb[System.String.Compare#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]</span></span>

<span data-ttu-id="7ec08-930">若要在字符串比较中识别可忽略字符，请调用 <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 方法，并 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 为参数提供或的值 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="options" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-930">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, string? strB, System.Globalization.CultureInfo? culture, System.Globalization.CompareOptions options);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, strB, culture, options)" />
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-931">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-931">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-932">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-932">The second string to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-933">提供区域性特定的比较信息的区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-933">The culture that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-934">要在执行比较时使用的选项（如忽略大小写或符号）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-934">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="7ec08-935">对两个指定的 <see cref="T:System.String" /> 对象进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-935">Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-936">一个 32 位带符号整数，该整数指示 <paramref name="strA" /> 与 <paramref name="strB" /> 之间的词法关系，如下表所示</span><span class="sxs-lookup"><span data-stu-id="7ec08-936">A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-937">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-937">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-938">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-938">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-939">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-939">Less than zero</span></span>

 </term><description><span data-ttu-id="7ec08-940"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-940"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-941">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-941">Zero</span></span>

 </term><description><span data-ttu-id="7ec08-942"><paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-942"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-943">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-943">Greater than zero</span></span>

 </term><description><span data-ttu-id="7ec08-944"><paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-944"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-945">该比较使用 `culture` 参数获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-945">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="7ec08-946">例如，特定的区域性可以指定将某些字符组合视为单个字符、以特定方式进行比较的大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-946">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>

> [!CAUTION]
> <span data-ttu-id="7ec08-947">此 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> 方法主要用于排序或 alphabetizing 操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-947">The <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="7ec08-948">当方法调用的主要目的是确定两个字符串是否等效时，不应使用此方法，即，当方法调用的目的是测试零) 的返回值时 (。</span><span class="sxs-lookup"><span data-stu-id="7ec08-948">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="7ec08-949">若要确定两个字符串是否相等，请调用 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-949">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="7ec08-950">可以通过参数进一步指定比较，该 `options` 参数由一个或多个枚举成员组成 <xref:System.Globalization.CompareOptions> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-950">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration.</span></span> <span data-ttu-id="7ec08-951">但是，由于此方法的目的是执行区分区域性的字符串比较， <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 因此和 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 值不起作用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-951">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>

 <span data-ttu-id="7ec08-952">两者或两个比较字都可以 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-952">Either or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-953">按照定义，任何字符串（包括 <xref:System.String.Empty?displayProperty=nameWithType> 、）比较大于 null 引用，而两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-953">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-954">当发现不相等或已比较两个字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-954">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="7ec08-955">但是，如果两个字符串的比较结果与一个字符串的末尾相等，而另一个字符串还剩个字符，则将剩余字符视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-955">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span>

## Examples
 <span data-ttu-id="7ec08-956">下面的示例以三种不同的方式对两个字符串进行比较：对 en-us 区域性使用语言比较;对于 en-us 区域性，使用区分语言区分大小写的比较;和使用序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-956">The following example compares two strings in three different ways: Use linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-957">它说明了这三种比较方法如何产生三个不同的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-957">It illustrates how the three methods of comparison produce three different results.</span></span>

 [!code-cpp[System.String.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/example.cpp#1)]
 [!code-csharp[System.String.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/Example.cs#1)]
 [!code-vb[System.String.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/Example.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-958"><paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-958"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-959"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-959"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-960">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-960">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-961"><see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-961">The <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-962">若要在比较中识别可忽略字符，请 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 为参数提供值或 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="options" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-962">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="Overload:System.String.CompareOrdinal" />
        <altmember cref="Overload:System.String.CompareTo" />
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length)" />
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, int indexA, string? strB, int indexB, int length);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-963">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-963">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="7ec08-964"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-964">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-965">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-965">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="7ec08-966"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-966">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-967">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-967">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="7ec08-968">比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个指示二者在排序顺序中的相对位置的整数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-968">Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-969">一个 32 位有符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-969">A 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-970">值</span><span class="sxs-lookup"><span data-stu-id="7ec08-970">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-971">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-971">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-972">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-972">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-973"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-973">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-974">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-974">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-975">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-975">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-976">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-976">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-977"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-977">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-978">要比较的子字符串 `strA` 在 `indexA` 和中的开始 `strB` 处 `indexB` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-978">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="7ec08-979">`indexA`和 `indexB` 都是从零开始的; 即，和中的第一个字符位于 `strA` `strB` 位置零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-979">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="7ec08-980">第一个子字符串的长度等于 `strA` 减号 `indexA` 加1的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-980">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="7ec08-981">第二个子字符串的长度等于 `strB` 减号 `indexB` 加1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-981">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="7ec08-982">要比较的字符数是两个子字符串的长度中较小的一个和 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-982">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="7ec08-983">`indexA`、 `indexB` 和 `length` 参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-983">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="7ec08-984">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-984">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="7ec08-985">例如，区域性可以指定将某些字符组合视为单个字符，或以特定方式比较大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-985">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="7ec08-986">使用字词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-986">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="7ec08-987">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-987">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
> <span data-ttu-id="7ec08-988">在比较字符串时，应调用 <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison)> 方法，这要求您显式指定方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-988">When comparing strings, you should call the <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison)> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="7ec08-989">有关详细信息，请参阅[有关使用字符串的最佳实践](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-989">For more information, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 <span data-ttu-id="7ec08-990">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-990">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-991">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-991">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-992">当发现不相等或比较两个子字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-992">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="7ec08-993">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-993">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-994">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-994">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-995">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-995">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-996">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-996">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]
 [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]
 [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]

 <span data-ttu-id="7ec08-997">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-997">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-998">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-998">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]
 [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]
 [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]

## Examples
 <span data-ttu-id="7ec08-999">下面的示例比较两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-999">The following example compares two substrings.</span></span>

 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp-interactive[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1000"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1000"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1001">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1001">-or-</span></span>

 <span data-ttu-id="7ec08-1002"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1002"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1003">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1003">-or-</span></span>

 <span data-ttu-id="7ec08-1004"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1004"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="7ec08-1005">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1005">-or-</span></span>

<span data-ttu-id="7ec08-1006"><paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1006">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1007">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1007">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1008">此 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> 方法在执行语言或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1008">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1009">若要在比较中识别可忽略字符，请调用 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> 方法，并为 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 参数提供值或 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1009">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, int indexA, string? strB, int indexB, int length, bool ignoreCase);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase)" />
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-1010">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1010">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="7ec08-1011"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1011">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-1012">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1012">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="7ec08-1013"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1013">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-1014">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1014">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-1015">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1015"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-1016">比较两个指定的 <see cref="T:System.String" /> 对象的子字符串（忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1016">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1017">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1017">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1018">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1018">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1019">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1019">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1020">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1020">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1021"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1021">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1022">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1022">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1023">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1023">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1024">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1024">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1025"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1025">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1026">要比较的子字符串在中的开始 `strA` `indexA` ，位于中 `strB` `indexB` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1026">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="7ec08-1027">`indexA`和 `indexB` 都是从零开始的; 即，和中的第一个字符位于 `strA` `strB` 位置零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1027">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="7ec08-1028">第一个子字符串的长度等于 `strA` 减号 `indexA` 加1的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1028">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="7ec08-1029">第二个子字符串的长度等于 `strB` 减号 `indexB` 加1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1029">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="7ec08-1030">要比较的字符数是两个子字符串的长度中较小的一个和 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1030">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="7ec08-1031">`indexA`、 `indexB` 和 `length` 参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1031">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="7ec08-1032">比较使用当前区域性来获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1032">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="7ec08-1033">例如，区域性可以指定将某些字符组合视为单个字符，或以特定方式比较大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1033">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="7ec08-1034">使用字词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1034">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="7ec08-1035">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1035">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
> <span data-ttu-id="7ec08-1036">在比较字符串时，应调用 <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison)> 方法，这要求您显式指定方法使用的字符串比较的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1036">When comparing strings, you should call the <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison)> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="7ec08-1037">有关详细信息，请参阅[有关使用字符串的最佳实践](/dotnet/standard/base-types/best-practices-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1037">For more information, see [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings).</span></span>

 <span data-ttu-id="7ec08-1038">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1038">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-1039">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1039">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-1040">当发现不相等或比较两个子字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1040">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="7ec08-1041">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1041">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-1042">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1042">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-1043">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1043">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-1044">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1044">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]
 [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]
 [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]

 <span data-ttu-id="7ec08-1045">路径名称需要按固定方式进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1045">The path name needs to be compared in an invariant manner.</span></span> <span data-ttu-id="7ec08-1046">要执行此操作，正确的代码如下所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1046">The correct code to do this is as follows.</span></span>

 [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]
 [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]
 [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]

## Examples
 <span data-ttu-id="7ec08-1047">下面的示例对两个仅大小写不同的子字符串执行两次比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1047">The following example performs two comparisons of two substrings that only differ in case.</span></span> <span data-ttu-id="7ec08-1048">第一个比较忽略大小写，第二个比较考虑用例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1048">The first comparison ignores case and the second comparison considers case.</span></span>

 [!code-cpp[string.compare4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare4/CPP/comp4.cpp#1)]
 [!code-csharp-interactive[string.compare4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare4/CS/comp4.cs#1)]
 [!code-vb[string.compare4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare4/VB/comp4.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1049"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1049"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1050">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1050">-or-</span></span>

 <span data-ttu-id="7ec08-1051"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1051"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1052">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1052">-or-</span></span>

 <span data-ttu-id="7ec08-1053"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1053"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="7ec08-1054">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1054">-or-</span></span>

<span data-ttu-id="7ec08-1055"><paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1055">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1056">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1056">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1057">此 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> 方法在执行语言或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1057">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1058">若要在比较中识别可忽略字符，请调用 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> 方法，并为 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 参数提供值或 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1058">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * StringComparison -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, comparisonType)" />
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, int indexA, string? strB, int indexB, int length, StringComparison comparisonType);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="5" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-1059">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1059">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="7ec08-1060"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1060">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-1061">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1061">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="7ec08-1062"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1062">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-1063">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1063">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-1064">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1064">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-1065">使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1065">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1066">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1066">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1067">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1067">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1068">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1068">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1069">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1069">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1070"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1070">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1071">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1071">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1072">子字符串在排序顺序中出现的位置相同，或 <paramref name="length" /> 参数为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1072">The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1073">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1073">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1074"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1074">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1075">要比较的子字符串 `strA` 在 `indexA` 和中的开始 `strB` 处 `indexB` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1075">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="7ec08-1076">`indexA`和 `indexB` 都是从零开始的; 即，和中的第一个字符位于 `strA` `strB` 位置零，而不是位置1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1076">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="7ec08-1077">第一个子字符串的长度等于 `strA` 减号 `indexA` 加1的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1077">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="7ec08-1078">第二个子字符串的长度等于 `strB` 减号 `indexB` 加1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1078">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="7ec08-1079">要比较的字符数是两个子字符串的长度中较小的一个和 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1079">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="7ec08-1080">`indexA`、 `indexB` 和 `length` 参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1080">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="7ec08-1081">`comparisonType`参数指示比较应使用当前的或固定的区域性，是接受还是忽略比较规则的大小写，还是使用 word (区分区域性的) 或序号 (不区分区域性的) 排序规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1081">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>

 <span data-ttu-id="7ec08-1082">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1082">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-1083">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1083">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-1084">当发现不相等或比较两个子字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1084">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="7ec08-1085">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1085">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-1086">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1086">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-1087">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1087">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-1088">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1088">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]
 [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]
 [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]

 <span data-ttu-id="7ec08-1089">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1089">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-1090">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1090">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]
 [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]
 [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]

## Examples
 <span data-ttu-id="7ec08-1091">下面的示例比较两个子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1091">The following example compares two substrings.</span></span>

 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp-interactive[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1092"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1092"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1093">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1093">-or-</span></span>

 <span data-ttu-id="7ec08-1094"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1094"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1095">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1095">-or-</span></span>

 <span data-ttu-id="7ec08-1096"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1096"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="7ec08-1097">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1097">-or-</span></span>

<span data-ttu-id="7ec08-1098"><paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1098">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-1099"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1099"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1100">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1100">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1101">此 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> 方法在执行语言或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1101">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1102">若要在比较中识别可忽略字符，请 <see cref="F:System.StringComparison.Ordinal" /> 为参数提供值或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1102">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, int indexA, string? strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase, culture)" />
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-1103">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1103">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="7ec08-1104"><paramref name="strA" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1104">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-1105">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1105">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="7ec08-1106"><paramref name="strB" /> 中子字符串的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1106">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-1107">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1107">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-1108">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1108"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-1109">一个对象，提供区域性特定的比较信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1109">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="7ec08-1110">比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1110">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1111">一个整数，指示两个比较字之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1111">An integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1112">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1112">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1113">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1113">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1114">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1114">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1115"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1115">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1116">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1116">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1117">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1117">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1118">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1118">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1119"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1119">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1120">要比较的子字符串在中的开始 `strA` `indexA` ，位于中 `strB` `indexB` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1120">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="7ec08-1121">`indexA`和 `indexB` 都是从零开始的; 即，和中的第一个字符位于 `strA` `strB` 位置零，而不是位置1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1121">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="7ec08-1122">第一个子字符串的长度等于 `strA` 减号 `indexA` 加1的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1122">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="7ec08-1123">第二个子字符串的长度等于 `strB` 减号 `indexB` 加1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1123">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="7ec08-1124">要比较的字符数是两个子字符串的长度中较小的一个和 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1124">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="7ec08-1125">`indexA`、 `indexB` 和 `length` 参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1125">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="7ec08-1126">该比较使用 `culture` 参数获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1126">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="7ec08-1127">例如，区域性可以指定将某些字符组合视为单个字符，或以特定方式比较大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1127">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="7ec08-1128">使用字词排序规则执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1128">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="7ec08-1129">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1129">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-1130">其中一个或两个比较字可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1130">One or both comparands can be `null`.</span></span> <span data-ttu-id="7ec08-1131">按照定义，包含空字符串 ( "" ) 中的任何字符串都会比较大于 null 引用;和两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1131">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-1132">当发现不相等或比较两个子字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1132">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="7ec08-1133">但是，如果两个字符串的比较结果等于一个字符串的末尾，而另一个字符串还剩个字符，则包含剩余字符的字符串将被视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1133">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-1134">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1134">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="7ec08-1135">当比较受区域性特定的大小写规则影响时，可能会出现意外的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1135">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="7ec08-1136">例如，在土耳其语中，以下示例产生了错误的结果，因为土耳其语中的文件系统不会将语言大小写规则用于 "file" 中的字母 "i"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1136">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]
 [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]
 [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]

 <span data-ttu-id="7ec08-1137">使用序号比较将路径名称与 "file" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1137">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="7ec08-1138">要执行此操作，正确的代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1138">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]
 [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]
 [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]

## Examples
 <span data-ttu-id="7ec08-1139">下面的示例使用不同的区域性比较两个子字符串，并忽略子字符串的大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1139">The following example compares two substrings using different cultures and ignoring the case of the substrings.</span></span> <span data-ttu-id="7ec08-1140">区域性的选择会影响字母 "I" 的比较方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1140">The choice of culture affects how the letter "I" is compared.</span></span>

 [!code-cpp[string.compare5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare5/CPP/comp5.cpp#1)]
 [!code-csharp[string.compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare5/CS/comp5.cs#1)]
 [!code-vb[string.compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare5/VB/comp5.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1141"><paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1141"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1142">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1142">-or-</span></span>

 <span data-ttu-id="7ec08-1143"><paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1143"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1144">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1144">-or-</span></span>

 <span data-ttu-id="7ec08-1145"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1145"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="7ec08-1146">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1146">-or-</span></span>

<span data-ttu-id="7ec08-1147"><paramref name="strA" /> 或 <paramref name="strB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1147">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1148"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1148"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1149">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1149">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1150">此 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> 方法在执行语言或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1150">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1151">若要在比较中识别可忽略字符，请调用 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 方法，并为 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 参数提供值或 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="options" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1151">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string? strA, int indexA, string? strB, int indexB, int length, System.Globalization.CultureInfo? culture, System.Globalization.CompareOptions options);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, culture, options)" />
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-1152">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1152">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="7ec08-1153"><paramref name="strA" /> 中子字符串开始的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1153">The starting position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-1154">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1154">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="7ec08-1155"><paramref name="strB" /> 中子字符串开始的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1155">The starting position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-1156">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1156">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-1157">一个对象，提供区域性特定的比较信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1157">An object that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-1158">要在执行比较时使用的选项（如忽略大小写或符号）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1158">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="7ec08-1159">对两个指定 <see cref="T:System.String" /> 对象的子字符串进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个子字符串在排序顺序中的关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1159">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1160">一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1160">An integer that indicates the lexical relationship between the two substrings, as shown in the following table.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1161">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1161">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1162">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1162">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1163">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1163">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1164"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1164">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1165">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1165">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1166">子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1166">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1167">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1167">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1168"><paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1168">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1169">要比较的子字符串的起始 `strA` 位置 `indexA` 和位置 `strB` `indexB` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1169">The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`.</span></span> <span data-ttu-id="7ec08-1170">第一个子字符串的长度是减号的长度 `strA` `indexA` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1170">The length of the first substring is the length of `strA` minus `indexA`.</span></span> <span data-ttu-id="7ec08-1171">第二个子字符串的长度是减号的 `strB` 长度 `indexB` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1171">The length of the second substring is the length of `strB` minus `indexB`.</span></span>

 <span data-ttu-id="7ec08-1172">要比较的字符数是两个子字符串的长度中较小的一个和 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1172">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="7ec08-1173">`indexA`、 `indexB` 和 `length` 参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1173">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="7ec08-1174">该比较使用 `culture` 参数获取特定于区域性的信息，如大小写规则和单个字符的字母顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1174">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="7ec08-1175">例如，特定的区域性可以指定将某些字符组合视为单个字符、以特定方式进行比较的大写和小写字符，或字符的排序顺序取决于其前面或后面的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1175">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>

> [!CAUTION]
> <span data-ttu-id="7ec08-1176">此 <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> 方法主要用于排序或 alphabetizing 操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1176">The <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="7ec08-1177">当方法调用的主要目的是确定两个子字符串是否等效时，不应使用此方法，即，当方法调用的目的是测试零) 的返回值时 (。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1177">It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="7ec08-1178">若要确定两个字符串是否相等，请调用 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1178">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="7ec08-1179">`strA`和均 `strB` 可为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1179">One or both of `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="7ec08-1180">按照定义，任何字符串（包括 <xref:System.String.Empty?displayProperty=nameWithType> 、）比较大于 null 引用，而两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1180">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>

 <span data-ttu-id="7ec08-1181">可以通过参数进一步指定比较，该 `options` 参数由一个或多个枚举成员组成 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1181">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="7ec08-1182">但是，由于此方法的目的是执行区分区域性的字符串比较， <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 因此和 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 值不起作用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1182">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>

 <span data-ttu-id="7ec08-1183">当发现不相等或比较两个子字符串时，将终止比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1183">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="7ec08-1184">但是，如果两个字符串的比较结果与一个字符串的末尾相等，而另一个字符串还剩个字符，则将剩余字符视为更大的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1184">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span> <span data-ttu-id="7ec08-1185">返回值是执行的最后一次比较的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1185">The return value is the result of the last comparison performed.</span></span>

## Examples
 <span data-ttu-id="7ec08-1186">下面的示例使用 <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> 方法来比较两个人员的姓氏。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1186">The following example uses the <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions)> method to compare the last names of two people.</span></span> <span data-ttu-id="7ec08-1187">然后，它按字母顺序列出。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1187">It then lists them in alphabetical order.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare5/cs/Example.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare5/vb/Example.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-1188"><paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1188"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1189"><paramref name="indexA" /> 大于 <paramref name="strA" /><see langword=".Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1189"><paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.</span></span>

<span data-ttu-id="7ec08-1190">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1190">-or-</span></span>

 <span data-ttu-id="7ec08-1191"><paramref name="indexB" /> 大于 <paramref name="strB" /><see langword=".Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1191"><paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.</span></span>

<span data-ttu-id="7ec08-1192">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1192">-or-</span></span>

 <span data-ttu-id="7ec08-1193"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1193"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="7ec08-1194">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1194">-or-</span></span>

<span data-ttu-id="7ec08-1195"><paramref name="strA" /> 或 <paramref name="strB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1195">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1196"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1196"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1197">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1197">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1198">此 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 方法在执行语言或区分区域性的比较时不考虑这些字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1198">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1199">若要在比较中识别可忽略字符，请 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 为参数提供值或 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> <paramref name="options" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1199">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareOrdinal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-1200">通过计算每个字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1200">Compares two <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, string strB);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * string -&gt; int" Usage="System.string.CompareOrdinal (strA, strB)" />
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string? strA, string? strB);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-1201">要比较的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1201">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-1202">要比较的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1202">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="7ec08-1203">通过计算每个字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1203">Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1204">一个整数，指示两个比较字之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1204">An integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1205">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1205">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1206">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1206">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1207">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1207">Less than zero</span></span>

 </term><description><span data-ttu-id="7ec08-1208"><paramref name="strA" /> 小于 <paramref name="strB" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1208"><paramref name="strA" /> is less than <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1209">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1209">Zero</span></span>

 </term><description><span data-ttu-id="7ec08-1210"><paramref name="strA" /> 与 <paramref name="strB" /> 相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1210"><paramref name="strA" /> and <paramref name="strB" /> are equal.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1211">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1211">Greater than zero</span></span>

 </term><description><span data-ttu-id="7ec08-1212"><paramref name="strA" /> 大于 <paramref name="strB" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1212"><paramref name="strA" /> is greater than <paramref name="strB" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1213">此方法使用序号排序规则执行区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1213">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="7ec08-1214">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1214">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-1215">若要使用序号排序规则执行不区分大小写的比较，请调用 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> 方法，并将 `comparisonType` 参数设置为 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1215">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-1216">由于 <xref:System.String.CompareOrdinal(System.String%2CSystem.String)> 是静态方法，因此 `strA` `strB` 可以是 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1216">Because <xref:System.String.CompareOrdinal(System.String%2CSystem.String)> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="7ec08-1217">如果这两个值都为 `null` ，则该方法将返回 0 (零) ，这指示 `strA` 和 `strB` 相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1217">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="7ec08-1218">如果只有一个值为 `null` ，则该方法会将非 null 值视为更大的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1218">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>

## Examples
 <span data-ttu-id="7ec08-1219">下面的示例对两个仅大小写不同的字符串执行和序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1219">The following example performs and ordinal comparison of two strings that only differ in case.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.compareordinal/CPP/comp0.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.compareordinal/CS/comp0.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compareordinal/VB/comp0.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * int * string * int * int -&gt; int" Usage="System.string.CompareOrdinal (strA, indexA, strB, indexB, length)" />
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string? strA, int indexA, string? strB, int indexB, int length);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="7ec08-1220">要在比较中使用的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1220">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="7ec08-1221"><paramref name="strA" /> 中子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1221">The starting index of the substring in <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="7ec08-1222">要在比较中使用的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1222">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="7ec08-1223"><paramref name="strB" /> 中子字符串的起始索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1223">The starting index of the substring in <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-1224">要比较的子字符串中字符的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1224">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="7ec08-1225">通过计算每个子字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1225">Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1226">一个 32 位带符号整数，指示两个比较数之间的词法关系。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1226">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1227">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1227">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1228">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1228">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1229">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1229">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1230"><paramref name="strA" /> 中的子字符串小于 <paramref name="strB" /> 中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1230">The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1231">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1231">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1232">子字符串相等，或者 <paramref name="length" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1232">The substrings are equal, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1233">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1233">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1234"><paramref name="strA" /> 中的子字符串大于 <paramref name="strB" /> 中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1234">The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1235">`indexA`、 `indexB` 和 `length` 参数必须为非负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1235">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="7ec08-1236">比较的字符数是较小的长度 `strA` `indexA` ，长度 `strB` 小于 `indexB` 或等于 `length` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1236">The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.</span></span>

 <span data-ttu-id="7ec08-1237">此方法使用序号排序规则执行区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1237">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="7ec08-1238">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1238">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-1239">若要使用序号排序规则执行不区分大小写的比较，请调用 <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison)> 方法，并将 `comparisonType` 参数设置为 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1239">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare(System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison)> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-1240">由于 <xref:System.String.CompareOrdinal(System.String%2CSystem.String)> 是静态方法，因此 `strA` `strB` 可以是 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1240">Because <xref:System.String.CompareOrdinal(System.String%2CSystem.String)> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="7ec08-1241">如果这两个值都为 `null` ，则该方法将返回 0 (零) ，这指示 `strA` 和 `strB` 相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1241">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="7ec08-1242">如果只有一个值为 `null` ，则该方法会将非 null 值视为更大的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1242">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>

## Examples
 <span data-ttu-id="7ec08-1243">下面的示例演示 <xref:System.String.CompareOrdinal%2A> 并 <xref:System.String.Compare%2A> 使用不同的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1243">This following example demonstrates that <xref:System.String.CompareOrdinal%2A> and <xref:System.String.Compare%2A> use different sort orders.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareOrdinal/CPP/stringcompareordinal.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/CS/stringcompareordinal.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareOrdinal/VB/stringcompareordinal.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1244"><paramref name="strA" /> 不为 <see langword="null" /> ，且 <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1244"><paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1245">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1245">-or-</span></span>

 <span data-ttu-id="7ec08-1246"><paramref name="strB" /> 不为 <see langword="null" /> ，且 <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1246"><paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="7ec08-1247">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1247">-or-</span></span>

 <span data-ttu-id="7ec08-1248"><paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1248"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span></exception>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-1249">将此实例与指定对象或 <see cref="T:System.String" /> 进行比较，并返回一个整数，该整数指示此实例在排序顺序中是位于指定对象或 <see cref="T:System.String" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1249">Compares this instance with a specified object or <see cref="T:System.String" /> and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or <see cref="T:System.String" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1250">此方法的两个重载都 <xref:System.String.CompareTo%2A> 执行区分区域性和区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1250">Both overloads of the <xref:System.String.CompareTo%2A> method perform culture-sensitive and case-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1251">不能使用此方法来执行不区分区域性或序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1251">You cannot use this method to perform culture-insensitive or ordinal comparisons.</span></span> <span data-ttu-id="7ec08-1252">为实现代码清晰度，建议你避免方法， <xref:System.String.CompareTo%2A> 并改为调用 <xref:System.String.Compare%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1252">For code clarity, we recommend that you avoid the <xref:System.String.CompareTo%2A> method and call the <xref:System.String.Compare%2A> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="string.CompareTo value" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1253">一个对象，其计算结果为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1253">An object that evaluates to a <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-1254">将此实例与指定的 <see cref="T:System.Object" /> 进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1254">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1255">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value" /> 参数之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1255">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1256">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1256">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1257">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1257">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1258">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1258">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1259">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1259">This instance precedes <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1260">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1260">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1261">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1261">This instance has the same position in the sort order as <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1262">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1262">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1263">此实例位于 <paramref name="value" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1263">This instance follows <paramref name="value" />.</span></span>

<span data-ttu-id="7ec08-1264">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1264">-or-</span></span>

 <span data-ttu-id="7ec08-1265"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1265"><paramref name="value" /> is <see langword="null" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1266">`value` 必须是一个 <xref:System.String> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1266">`value` must be a <xref:System.String> object.</span></span>

> [!CAUTION]
> <span data-ttu-id="7ec08-1267">此 <xref:System.String.CompareTo%2A> 方法主要用于排序或 alphabetizing 操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1267">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="7ec08-1268">当方法调用的主要目的是确定两个字符串是否相等时，不应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1268">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="7ec08-1269">若要确定两个字符串是否相等，请调用 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1269">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="7ec08-1270">此方法使用当前区域性执行区分大小写的 (区分大小写的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1270">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="7ec08-1271">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1271">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-1272">有关此方法的行为的详细信息，请参阅方法的 "备注" 部分 <xref:System.String.Compare(System.String%2CSystem.String)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1272">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare(System.String%2CSystem.String)?displayProperty=nameWithType> method.</span></span>

## Examples
 <span data-ttu-id="7ec08-1273">下面的示例将 <xref:System.String.CompareTo%2A> 方法与一起使用 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1273">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="7ec08-1274">因为它尝试将实例与 <xref:System.String> 对象进行比较 `TestClass` ，所以方法会引发 <xref:System.ArgumentException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1274">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>

 [!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
 [!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
 [!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-1275"><paramref name="value" /> 不是 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1275"><paramref name="value" /> is not a <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1276">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1276">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1277"><see cref="M:System.String.CompareTo(System.Object)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1277">The <see cref="M:System.String.CompareTo(System.Object)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1278">例如，如果以下代码在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则使用软连字符将 "动物" 与 ("00AD" 进行比较，或使用 U +) 指示这两个字符串是等效的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1278">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="7ec08-1279">[！ code-csharp[CompareTo # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)][！ code-vb[CompareTo # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-1279">[!code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)] [!code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]</span></span>

<span data-ttu-id="7ec08-1280">若要在字符串比较中识别可忽略字符，请调用 <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1280">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para></block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (string strB);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(string strB) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::String ^ strB);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : string -&gt; int&#xA;override this.CompareTo : string -&gt; int" Usage="string.CompareTo strB" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public int CompareTo (string? strB);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(string strB) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::String ^ strB);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.CompareTo : string -&gt; int" Usage="string.CompareTo strB" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strB"><span data-ttu-id="7ec08-1281">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1281">The string to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-1282">将此实例与指定的 <see cref="T:System.String" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的字符串之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1282">Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1283">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="strB" /> 参数之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1283">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="7ec08-1284">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-1284">Value</span></span>

 </term><description> <span data-ttu-id="7ec08-1285">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-1285">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="7ec08-1286">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1286">Less than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1287">此实例位于 <paramref name="strB" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1287">This instance precedes <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1288">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1288">Zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1289">此实例在排序顺序中的位置与 <paramref name="strB" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1289">This instance has the same position in the sort order as <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="7ec08-1290">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-1290">Greater than zero</span></span>

 </term><description> <span data-ttu-id="7ec08-1291">此实例位于 <paramref name="strB" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1291">This instance follows <paramref name="strB" />.</span></span>

<span data-ttu-id="7ec08-1292">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1292">-or-</span></span>

 <span data-ttu-id="7ec08-1293"><paramref name="strB" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1293"><paramref name="strB" /> is <see langword="null" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1294">此方法使用当前区域性执行区分大小写的 (区分大小写的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1294">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="7ec08-1295">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1295">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!CAUTION]
> <span data-ttu-id="7ec08-1296">此 <xref:System.String.CompareTo%2A> 方法主要用于排序或 alphabetizing 操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1296">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="7ec08-1297">当方法调用的主要目的是确定两个字符串是否相等时，不应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1297">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="7ec08-1298">若要确定两个字符串是否相等，请调用 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1298">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="7ec08-1299">有关此方法的行为的详细信息，请参阅方法的 "备注" 部分 <xref:System.String.Compare(System.String%2CSystem.String)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1299">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare(System.String%2CSystem.String)> method.</span></span>

 <span data-ttu-id="7ec08-1300">此方法实现 <xref:System.IComparable%601?displayProperty=nameWithType> 接口，且执行方式略优于 <xref:System.String.CompareTo(System.Object)?displayProperty=nameWithType> 方法，因为它不必确定 `strB` 自变量是否为必须进行装箱的可变值类型，并且无需将其参数从转换 <xref:System.Object> 为 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1300">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.String.CompareTo(System.Object)?displayProperty=nameWithType> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object> to a <xref:System.String>.</span></span>

## Examples
 <span data-ttu-id="7ec08-1301">下面的示例使用 <xref:System.String.CompareTo%2A> 方法将当前字符串实例与另一个字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1301">The following example uses the <xref:System.String.CompareTo%2A> method to compare the current string instance with another string.</span></span>

 [!code-cpp[stringcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareTo/CPP/stringcompareto.cpp#1)]
 [!code-csharp[stringcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/CS/stringcompareto.cs#1)]
 [!code-vb[stringcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareTo/VB/stringcompareto.vb#1)]

 <span data-ttu-id="7ec08-1302">下面的示例演示了多个值和引用类型的 CompareTo 方法的泛型和非泛型版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1302">The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</span></span>

 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1303">字符集包括可忽略字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1303">Character sets include ignorable characters.</span></span> <span data-ttu-id="7ec08-1304"><see cref="M:System.String.CompareTo(System.String)" />当方法执行区分区域性的比较时，它不会考虑此类字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1304">The <see cref="M:System.String.CompareTo(System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-1305">例如，如果以下代码在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则使用软连字符将 "动物" 与 ("00AD" 进行比较，或使用 U +) 指示这两个字符串是等效的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1305">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="7ec08-1306">[！ code-csharp[CompareTo # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)][！ code-vb[CompareTo # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-1306">[!code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)] [!code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]</span></span>

<span data-ttu-id="7ec08-1307">若要在字符串比较中识别可忽略字符，请调用 <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1307">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para></block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Concat">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-1308">连接 <see cref="T:System.String" /> 的一个或多个实例，或 <see cref="T:System.String" /> 的一个或多个实例的值的 <see cref="T:System.Object" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1308">Concatenates one or more instances of <see cref="T:System.String" />, or the <see cref="T:System.String" /> representations of the values of one or more instances of <see cref="T:System.Object" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

> [!NOTE]
> <span data-ttu-id="7ec08-1309">你还可以使用语言的字符串串联运算符（如 `+` c # 中的）， `&` 或 `+` 在 Visual Basic 中连接字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1309">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic, to concatenate strings.</span></span> <span data-ttu-id="7ec08-1310">这两个编译器都将串连运算符转换为对的重载之一的调用 `String.Concat` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1310">Both compilers translate the concatenation operator into a call to one of the overloads of `String.Concat`.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;string&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberSignature Language="C#" Value="public static string Concat (System.Collections.Generic.IEnumerable&lt;string?&gt; values);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="7ec08-1311">一个集合对象，该对象实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型类型参数为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1311">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-1312">串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1312">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1313"><paramref name="values" /> 中的串联字符串；如果 <paramref name="values" /> 为空 <see langword="IEnumerable(Of String)" />，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1313">The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1314">此方法连接中的每个对象 `values` ; 它不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1314">The method concatenates each object in `values`; it does not add any delimiters.</span></span> <span data-ttu-id="7ec08-1315">若要指定每个成员之间的分隔符 `values` ，请调用 <xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1315">To specify a delimiter between each member of `values`, call the <xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> method.</span></span>

 <span data-ttu-id="7ec08-1316"><xref:System.String.Empty?displayProperty=nameWithtype>字符串用于替换中的任何 null 元素 `values` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1316">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null element in `values`.</span></span>

 <span data-ttu-id="7ec08-1317">如果 `values` ，则为 `IEnumerable(Of String)`，则此方法返回 <xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1317">If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-1318">如果 `values` 为 `null` ，则该方法将引发 <xref:System.ArgumentNullException> 异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1318">If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.</span></span>

 <span data-ttu-id="7ec08-1319"><xref:System.String.Concat(System.Collections.Generic.IEnumerable%7BSystem.String%7D)> 是一种简便方法，使您可以连接集合中的每个元素， `IEnumerable(Of String)` 而无需先将元素转换为字符串数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1319"><xref:System.String.Concat(System.Collections.Generic.IEnumerable%7BSystem.String%7D)> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="7ec08-1320">它对于 Language-Integrated 查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1320">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="7ec08-1321">下面的示例将 `List(Of String)` 包含字母表的大写或小写字母的对象传递给 lambda 表达式，该表达式选择等于或大于特定字母 (的字母，在本例中为 "M" ) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1321">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="7ec08-1322">`IEnumerable(Of String)`方法返回的集合 <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 传递给 <xref:System.String.Concat(System.Collections.Generic.IEnumerable%7BSystem.String%7D)> 方法，以单个字符串的形式显示结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1322">The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Concat(System.Collections.Generic.IEnumerable%7BSystem.String%7D)> method to display the result as a single string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb" id="Snippet3":::

## Examples
 <span data-ttu-id="7ec08-1323">下面的示例使用埃拉托色 of 尼斯筛法算法来计算小于或等于100的质数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1323">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="7ec08-1324">它将结果分配给 <xref:System.Collections.Generic.List%601> 类型的对象，然后将该对象 <xref:System.String> 传递给 <xref:System.String.Concat(System.Collections.Generic.IEnumerable%7BSystem.String%7D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1324">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Concat(System.Collections.Generic.IEnumerable%7BSystem.String%7D)> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat1.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat1.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1325"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1325"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Concat : obj -&gt; string" Usage="System.string.Concat arg0" />
      <MemberSignature Language="C#" Value="public static string Concat (object? arg0);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="7ec08-1326">要表示的对象，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1326">The object to represent, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-1327">创建指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1327">Creates the string  representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1328"><paramref name="arg0" /> 的值的字符串表示形式，如果 <see cref="F:System.String.Empty" /> 为 <paramref name="arg0" />，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1328">The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1329"><xref:System.String.Concat(System.Object)>方法 `arg0` 通过调用其无参数的方法将表示为字符串 `ToString` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1329">The <xref:System.String.Concat(System.Object)> method represents `arg0` as a string by calling its parameterless `ToString` method.</span></span>

## Examples
 <span data-ttu-id="7ec08-1330">下面的示例演示 <xref:System.String.Concat%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1330">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params object[] args);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Concat : obj[] -&gt; string" Usage="System.string.Concat args" />
      <MemberSignature Language="C#" Value="public static string Concat (params object?[] args);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="7ec08-1331">一个对象数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1331">An object array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1332">连接指定 <see cref="T:System.Object" /> 数组中的元素的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1332">Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1333"><paramref name="args" /> 中元素的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1333">The concatenated string representations of the values of the elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1334">方法 `args` 通过调用该对象的无参数方法来连接中的每个对象，而不 `ToString` 会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1334">The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1335"><xref:System.String.Empty?displayProperty=nameWithType> 用于替代数组中的任何 null 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1335"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null object in the array.</span></span>

## Examples
 <span data-ttu-id="7ec08-1336">下面的示例演示如何将方法用于 <xref:System.String.Concat%2A> <xref:System.Object> 数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1336">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with an <xref:System.Object> array.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/CS/stringconcat1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat1/VB/stringconcat1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1337"><paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1337"><paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-1338">内存不足。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1338">Out of memory.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1339">C + + 代码不会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1339">This method is not called by C++ code.</span></span> <span data-ttu-id="7ec08-1340">C + + 编译器解析对 <see cref="Overload:System.String.Concat" /> 的调用，该调用具有四个或更多对象参数作为对的调用 <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1340">The C++ compiler resolves calls to <see cref="Overload:System.String.Concat" /> that have four or more object parameters as a call to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params string[] values);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray values As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : string[] -&gt; string" Usage="System.string.Concat values" />
      <MemberSignature Language="C#" Value="public static string Concat (params string?[] values);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="7ec08-1341">字符串实例的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1341">An array of string instances.</span></span></param>
        <summary><span data-ttu-id="7ec08-1342">连接指定的 <see cref="T:System.String" /> 数组的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1342">Concatenates the elements of a specified <see cref="T:System.String" /> array.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1343"><paramref name="values" /> 的串联元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1343">The concatenated elements of <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1344">此方法连接中的每个对象 `values` ; 它不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1344">The method concatenates each object in `values`; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1345"><xref:System.String.Empty?displayProperty=nameWithtype>字符串用于替代数组中的任何 null 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1345">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null object in the array.</span></span>

## Examples
 <span data-ttu-id="7ec08-1346">下面的示例演示如何将方法用于 <xref:System.String.Concat%2A> <xref:System.String> 数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1346">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with a <xref:System.String> array.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat3/CPP/stringconcat3.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/CS/stringconcat3.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat3/VB/stringconcat3.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1347"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1347"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-1348">内存不足。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1348">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1)" />
      <MemberSignature Language="C#" Value="public static string Concat (object? arg0, object? arg1);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="7ec08-1349">要连接的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1349">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1350">要连接的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1350">The second object to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1351">连接两个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1351">Concatenates the string representations of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1352"><paramref name="arg0" /> 和 <paramref name="arg1" /> 的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1352">The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1353">方法 `arg0` `arg1` 通过调用和的无参数方法连接和，而 `ToString` `arg0` `arg1` 不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1353">The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1354"><xref:System.String.Empty?displayProperty=nameWithType> 用于替代任何空参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1354"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>

 <span data-ttu-id="7ec08-1355">如果任何一个参数为数组引用，则该方法将连接一个表示该数组的字符串，而不是它的成员 (例如 "System.string []" ) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1355">If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</span></span>

## Examples
 <span data-ttu-id="7ec08-1356">下面的示例演示 <xref:System.String.Concat%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1356">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="7ec08-1357">要连接的第一个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1357">The first read-only character span to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="7ec08-1358">要连接的第二个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1358">The second read-only character span to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1359">连接两个指定的只读字符范围的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1359">Concatenates the string representations of two specified read-only character spans.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1360"><paramref name="str0" /> 和 <paramref name="str1" /> 的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1360">The concatenated string representations of the values of <paramref name="str0" /> and <paramref name="str1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberSignature Language="C#" Value="public static string Concat (string? str0, string? str1);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="7ec08-1361">要串联的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1361">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="7ec08-1362">要串联的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1362">The second string to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1363">连接 <see cref="T:System.String" /> 的两个指定实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1363">Concatenates two specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1364"><paramref name="str0" /> 和 <paramref name="str1" /> 的串联。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1364">The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1365">方法连接 `str0` 和 `str1` ; 它不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1365">The method concatenates `str0` and `str1`; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1366"><xref:System.String.Empty?displayProperty=nameWithtype>字符串用于替代任何空参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1366">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null argument.</span></span>

## Examples
 <span data-ttu-id="7ec08-1367">下面的示例将用户的名字、中间名和姓氏连接起来。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1367">The following example concatenates a person's first, middle, and last name.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat4/CPP/stringconcat4.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/CS/stringconcat4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat4/VB/stringconcat4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2)" />
      <MemberSignature Language="C#" Value="public static string Concat (object? arg0, object? arg1, object? arg2);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="7ec08-1368">要连接的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1368">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1369">要连接的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1369">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="7ec08-1370">要连接的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1370">The third object to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1371">连接三个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1371">Concatenates the string representations of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1372"><paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的值的串联字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1372">The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1373">方法 `arg0` `arg1` `arg2` 通过调用每个对象的无参数方法连接、和，而 `ToString` 不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1373">The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1374"><xref:System.String.Empty?displayProperty=nameWithType> 用于替代任何空参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1374"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>

## Examples
 <span data-ttu-id="7ec08-1375">下面的示例演示 <xref:System.String.Concat%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1375">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1, valuetype System.ReadOnlySpan`1&lt;char&gt; str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char), str2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="7ec08-1376">要连接的第一个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1376">The first read-only character span to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="7ec08-1377">要连接的第二个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1377">The second read-only character span to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="7ec08-1378">要连接的第三个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1378">The third read-only character span to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1379">连接三个指定的只读字符范围的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1379">Concatenates the string representations of three specified read-only character spans.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1380"><paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的值的已连接字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1380">The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" /> and <paramref name="str2" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberSignature Language="C#" Value="public static string Concat (string? str0, string? str1, string? str2);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="7ec08-1381">要串联的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1381">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="7ec08-1382">要串联的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1382">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="7ec08-1383">要比较的第三个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1383">The third string to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1384">连接 <see cref="T:System.String" /> 的三个指定实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1384">Concatenates three specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1385"><paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串联。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1385">The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1386">方法连接 `str0` 、和，而 `str1` `str2` 不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1386">The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.</span></span>

## Examples
 <span data-ttu-id="7ec08-1387">下面的示例使用 <xref:System.String.Concat%2A> 方法连接三个字符串并显示结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1387">The following example uses the <xref:System.String.Concat%2A> method to concatenate three strings and displays the result.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.concat/cpp/Concat6.cpp" id="Snippet6":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/Concat6.cs" interactive="try-dotnet" id="Snippet6":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/Concat6.vb" id="Snippet6":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="7ec08-1388">要连接的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1388">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1389">要连接的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1389">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="7ec08-1390">要连接的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1390">The third object to concatenate.</span></span></param>
        <param name="arg3"><span data-ttu-id="7ec08-1391">要连接的第四个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1391">The fourth object to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1392">将四个指定对象的字符串表示形式与可选变量长度参数列表中指定的任何对象串联起来。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1392">Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1393">参数列表中的每个值的连接字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1393">The concatenated string representation of each value in the parameter list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> <span data-ttu-id="7ec08-1394">此 API 不符合 CLS。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1394">This API is not CLS-compliant.</span></span> <span data-ttu-id="7ec08-1395">符合 CLS 的替代方法是 <xref:System.String.Concat(System.Object%5B%5D)?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1395">The CLS-compliant alternative is <xref:System.String.Concat(System.Object%5B%5D)?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-1396">C # 和 Visual Basic 编译器会自动将对此方法的调用解析为对的调用 <xref:System.String.Concat(System.Object%5B%5D)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1396">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat(System.Object%5B%5D)?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-1397">方法通过调用其无参数方法连接参数列表中的每个对象，而不 `ToString` 会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1397">The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1398"><xref:System.String.Empty?displayProperty=nameWithType> 用于替代任何空参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1398"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-1399">方法的最后一个参数  <xref:System.String.Concat%2A> 是要连接的一个或多个附加对象的以逗号分隔的可选列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1399">The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.</span></span>

## Examples
 <span data-ttu-id="7ec08-1400">下面的示例演示 <xref:System.String.Concat(System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object)> 如何使用方法连接变量参数的列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1400">The following example illustrates the use of the <xref:System.String.Concat(System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object)> method to concatenate a list of variable parameters.</span></span> <span data-ttu-id="7ec08-1401">在这种情况下，将调用方法并带有九个参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1401">In this case, the method is called with nine parameters.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1402">此方法使用关键字进行标记 <see langword="vararg" /> ，这意味着它支持数量可变的参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1402">This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters.</span></span> <span data-ttu-id="7ec08-1403">可以从 Visual C++ 调用方法，但不能从 c # 或 Visual Basic 代码中调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1403">The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</span></span> <span data-ttu-id="7ec08-1404">C # 和 Visual Basic 编译器将调用解析为对的调用 <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:System.String.Concat(System.Object[])" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1404">The C# and Visual Basic compilers resolve calls to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.String.Concat(System.Object[])" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2, ReadOnlySpan&lt;char&gt; str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1, valuetype System.ReadOnlySpan`1&lt;char&gt; str2, valuetype System.ReadOnlySpan`1&lt;char&gt; str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char), str2 As ReadOnlySpan(Of Char), str3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2, ReadOnlySpan&lt;char&gt; str3);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="7ec08-1405">要连接的第一个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1405">The first read-only character span to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="7ec08-1406">要连接的第二个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1406">The second read-only character span to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="7ec08-1407">要连接的第三个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1407">The third read-only character span to concatenate.</span></span></param>
        <param name="str3"><span data-ttu-id="7ec08-1408">要连接的第四个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1408">The fourth read-only character span to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1409">连接四个指定的只读字符范围的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1409">Concatenates the string representations of four specified read-only character spans.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1410"><paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的值的已连接字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1410">The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" /> and <paramref name="str3" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2, string str3);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2, string str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String, str3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2, System::String ^ str3);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberSignature Language="C#" Value="public static string Concat (string? str0, string? str1, string? str2, string? str3);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
        <Parameter Name="str3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="7ec08-1411">要串联的第一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1411">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="7ec08-1412">要串联的第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1412">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="7ec08-1413">要比较的第三个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1413">The third string to concatenate.</span></span></param>
        <param name="str3"><span data-ttu-id="7ec08-1414">要比较的第四个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1414">The fourth string to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-1415">连接 <see cref="T:System.String" /> 的四个指定实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1415">Concatenates four specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1416"><paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串联。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1416">The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1417">方法会连接 `str0` 、 `str1` 、 `str2` 和， `str3` 但不会添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1417">The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.</span></span>

## Examples
 <span data-ttu-id="7ec08-1418">下面的示例定义一个包含四个字母的单词的数组，并将其各个字母存储到字符串数组中，以便对它们进行编码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1418">The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them.</span></span> <span data-ttu-id="7ec08-1419">然后，它会调用 <xref:System.String.Concat(System.String%2CSystem.String%2CSystem.String%2CSystem.String)> 方法来重新组合打乱的单词。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1419">It then calls the <xref:System.String.Concat(System.String%2CSystem.String%2CSystem.String%2CSystem.String)> method to reassemble the scrambled words.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat(Of T) (values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'T&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7ec08-1420"><paramref name="values" /> 成员的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1420">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="values"><span data-ttu-id="7ec08-1421">一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 接口的集合对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1421">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</span></span></param>
        <summary><span data-ttu-id="7ec08-1422">串联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现的成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1422">Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1423"><paramref name="values" /> 中的串联成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1423">The concatenated members in <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1424">此方法连接中的每个对象 `values` ; 它不添加任何分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1424">The method concatenates each object in `values`; it does not add any delimiters.</span></span>

 <span data-ttu-id="7ec08-1425"><xref:System.String.Empty?displayProperty=nameWithtype>字符串用于替代任何空参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1425">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null argument.</span></span>

 <span data-ttu-id="7ec08-1426"><xref:System.String.Concat%60%601(System.Collections.Generic.IEnumerable%7B%60%600%7D)> 是一种简便方法，使您可以连接集合中的每个元素， <xref:System.Collections.Generic.IEnumerable%601> 而无需先将元素转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1426"><xref:System.String.Concat%60%601(System.Collections.Generic.IEnumerable%7B%60%600%7D)> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings.</span></span> <span data-ttu-id="7ec08-1427">如示例所示，它对于 Language-Integrated 查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1427">It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.</span></span> <span data-ttu-id="7ec08-1428">集合中每个对象的字符串表示形式 <xref:System.Collections.Generic.IEnumerable%601> 都是通过调用该对象的 `ToString` 方法派生的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1428">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>

## Examples
 <span data-ttu-id="7ec08-1429">下面的示例定义了一个非常简单的 `Animal` 类，其中包含动物的名称及其所属的顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1429">The following example defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="7ec08-1430">然后，它定义一个 <xref:System.Collections.Generic.List%601> 对象，该对象包含多个 `Animal` 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1430">It then defines a <xref:System.Collections.Generic.List%601> object to contain a number of `Animal` objects.</span></span> <span data-ttu-id="7ec08-1431"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>调用扩展方法以提取 `Animal` 其 `Order` 属性等于 "啮齿类" 的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1431">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="7ec08-1432">结果传递给 <xref:System.String.Concat%60%601(System.Collections.Generic.IEnumerable%7B%60%600%7D)> 方法并显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1432">The result is passed to the <xref:System.String.Concat%60%601(System.Collections.Generic.IEnumerable%7B%60%600%7D)> method and displayed to the console.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat3.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat3.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1433"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1433"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value);" />
      <MemberSignature Language="F#" Value="member this.Contains : char -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1434">要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1434">The character to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-1435">返回一个值，该值指示指定的字符是否出现在此字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1435">Returns a value indicating whether a specified character occurs within this string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1436">如果 <paramref name="value" /> 参数在此字符串中出现，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1436"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1437">此方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1437">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1438">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1438">The string to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-1439">返回一个值，该值指示指定的子串是否出现在此字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1439">Returns a value indicating whether a specified substring occurs within this string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1440">如果 <see langword="true" /> 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1440"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1441">此方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1441">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span> <span data-ttu-id="7ec08-1442">搜索从该字符串的第一个字符位置开始，并继续到最后一个字符的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1442">The search begins at the first character position of this string and continues through the last character position.</span></span>

<span data-ttu-id="7ec08-1443">若要执行区分区域性或不区分大小写的比较：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1443">To perform a culture-sensitive or ordinal case-insensitive comparison:</span></span>

- <span data-ttu-id="7ec08-1444">在 .NET Core 2.1 及更高版本上： <xref:System.String.Contains(System.Char,System.StringComparison)> 改为调用重载。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1444">On .NET Core 2.1 and later versions: Call the <xref:System.String.Contains(System.Char,System.StringComparison)> overload instead.</span></span>

- <span data-ttu-id="7ec08-1445">.NET Framework 上：创建自定义方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1445">On .NET Framework: Create a custom method.</span></span> <span data-ttu-id="7ec08-1446">下面的示例阐释了这种方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1446">The following example illustrates one such approach.</span></span> <span data-ttu-id="7ec08-1447">它定义了一个 <xref:System.String> 扩展方法，该方法包含一个 <xref:System.StringComparison> 参数，并指示当使用指定的字符串比较形式时，字符串是否包含子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1447">It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</span></span>

 [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]
 [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]

 <span data-ttu-id="7ec08-1448">如果对子字符串 `value` 在当前实例中的位置感兴趣，则可以调用 <xref:System.String.IndexOf%2A> 方法来获取其第一次出现的起始位置，也可以调用 <xref:System.String.LastIndexOf%2A> 方法来获取其最后一个匹配项的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1448">If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence.</span></span> <span data-ttu-id="7ec08-1449"><xref:System.String.IndexOf(System.String)>如果在字符串实例中找到子字符串，则该示例包括对方法的调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1449">The example includes a call to the <xref:System.String.IndexOf(System.String)> method if a substring is found in a string instance.</span></span>

## Examples
 <span data-ttu-id="7ec08-1450">下面的示例确定字符串 "fox" 是否为熟悉的引号的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1450">The following example determines whether the string "fox" is a substring of a familiar quotation.</span></span> <span data-ttu-id="7ec08-1451">如果在字符串中找到 "fox"，则它还会显示其起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1451">If "fox" is found in the string, it also displays its starting position.</span></span>

 [!code-cpp[String.Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.contains/CPP/cont.cpp#1)]
 [!code-csharp-interactive[String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.contains/CS/cont.cs#1)]
 [!code-vb[String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.contains/VB/cont.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1452"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1452"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : char * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1453">要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1453">The character to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-1454">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1454">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-1455">使用指定的比较规则返回一个值，该值指示指定的字符是否出现在此字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1455">Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1456">如果 <paramref name="value" /> 参数在此字符串中出现，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1456"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : string * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1457">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1457">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-1458">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1458">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-1459">使用指定的比较规则返回一个值，该值指示指定的字符串是否出现在此字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1459">Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1460">如果 <see langword="true" /> 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1460"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static string Copy (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Copy(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Copy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Copy (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Copy(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Copy : string -&gt; string" Usage="System.string.Copy str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("This API should not be used to create mutable strings. See https://go.microsoft.com/fwlink/?linkid=2084035 for alternatives.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API should not be used to create mutable strings. See https://go.microsoft.com/fwlink/?linkid=2084035 for alternatives.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="7ec08-1461">要复制的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1461">The string to copy.</span></span></param>
        <summary><span data-ttu-id="7ec08-1462">创建一个与指定的 <see cref="T:System.String" /> 具有相同值的 <see cref="T:System.String" /> 的新实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1462">Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1463">值与 <paramref name="str" /> 相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1463">A new string with the same value as <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-1464">`Copy`方法返回一个 <xref:System.String> 对象，该对象与原始字符串具有相同的值，但表示不同的对象引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1464">The `Copy` method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference.</span></span> <span data-ttu-id="7ec08-1465">这不同于赋值操作，后者将现有字符串引用分配给其他对象变量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1465">It differs from an assignment operation, which assigns an existing string reference to an additional object variable.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="7ec08-1466">从 .NET Core 3.0 开始，此方法已过时。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1466">Starting with .NET Core 3.0, this method is obsolete.</span></span> <span data-ttu-id="7ec08-1467">但是，我们不建议在任何 .NET 实现中使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1467">However, we do not recommend its use in any .NET implementation.</span></span> <span data-ttu-id="7ec08-1468">特别是，由于 .NET Core 3.0 中的字符串暂存发生了更改，因此，在某些情况下，该 `Copy` 方法将不会创建新的字符串，而只会返回对现有暂存字符串的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1468">In particular, because of changes in string interning in .NET Core 3.0, in some cases the `Copy` method will not create a new string but will simply return a reference to an existing interned string.</span></span>

<span data-ttu-id="7ec08-1469">根据要调用方法的原因 `Copy` ，有多种方法可供选择：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1469">Depending on Why you want to call the `Copy` method, there are a number of alternatives:</span></span>

- <span data-ttu-id="7ec08-1470">如果希望在修改字符串的操作中使用不同的字符串实例，请使用原始字符串实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1470">If you want a different string instance to use in an operation that modifies the string, use the original string instance.</span></span> <span data-ttu-id="7ec08-1471">因为字符串是不可变的，所以字符串操作会创建一个新的字符串实例，而原始字符串不受影响。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1471">Because strings are immutable, the string operation creates a new string instance, and the original string remains unaffected.</span></span> <span data-ttu-id="7ec08-1472">在这种情况下，不应将新字符串引用分配给原始字符串变量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1472">In this case, you should not assign the new string reference to the original string variable.</span></span> <span data-ttu-id="7ec08-1473">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1473">The following example provides an illustration.</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#1)]
  [!code-vb[Performing a string operation](~/samples/snippets/visualbasic/api/system/string/copy/program.vb#1)]

   <span data-ttu-id="7ec08-1474">在这种情况下，在 `Copy` 调用方法之前调用方法以创建新字符串会 <xref:System.String.Substring%2A> 创建一个新的字符串实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1474">In this case, calling the `Copy` method to create a new string before calling the <xref:System.String.Substring%2A> method unnecessarily creates a new string instance.</span></span>

- <span data-ttu-id="7ec08-1475">如果要创建具有与原始字符串相同的内容的可变缓冲区，请调用 <xref:System.String.ToCharArray%2A?displayProperty=nameWithType> 或 <xref:System.Text.StringBuilder.%23ctor(System.String)?displayProperty=nameWithType> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1475">If you want to create a mutable buffer with the same contents as the original string, call the <xref:System.String.ToCharArray%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.%23ctor(System.String)?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="7ec08-1476">例如：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1476">For example:</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#2)]
  [!code-vb[Performing a string operation](~/samples/snippets/visualbasic/api/system/string/copy/program.vb#2)]

- <span data-ttu-id="7ec08-1477">如果要创建字符串的可变副本以便可以使用不安全代码修改字符串内容，请使用 <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1477">If you want to create a mutable copy of the string so that you can use unsafe code to modify the string contents, use <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ec08-1478">下面的示例使用 <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> 方法获取指向非托管内存中复制字符串的位置的指针，将字符串中每个字符的 Unicode 码位递增一，并将生成的字符串复制回托管字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1478">The following example uses the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> method to get a pointer to the location of an copied string in unmanaged memory, increments the Unicode code point of each character in the string by one, and copies the resulting string back to a managed string.</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1479"><paramref name="str" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1479"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * char[] * int * int -&gt; unit" Usage="string.CopyTo (sourceIndex, destination, destinationIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex"><span data-ttu-id="7ec08-1480">要复制的此实例中第一个字符的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1480">The index of the first character in this instance to copy.</span></span></param>
        <param name="destination"><span data-ttu-id="7ec08-1481">此实例中的字符所复制到的 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1481">An array of Unicode characters to which characters in this instance are copied.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="7ec08-1482"><paramref name="destination" /> 中的索引，在此处开始复制操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1482">The index in <paramref name="destination" /> at which the copy operation begins.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-1483">此实例中要复制到 <paramref name="destination" /> 的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1483">The number of characters in this instance to copy to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-1484">将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1484">Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1485">此方法将 `count` 字符从此 `sourceIndex` 实例的位置复制到 `destinationIndex` 字符数组的位置 `destination` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1485">This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array.</span></span> <span data-ttu-id="7ec08-1486">此方法不调整 `destination` 字符数组的大小; 它必须具有足够数量的元素来容纳复制的字符或方法引发 <xref:System.ArgumentOutOfRangeException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1486">This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>

 <span data-ttu-id="7ec08-1487">`sourceIndex` 和 `destinationIndex` 是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1487">`sourceIndex` and `destinationIndex` are zero-based.</span></span>

## Examples
 <span data-ttu-id="7ec08-1488">下面的示例演示 <xref:System.String.CopyTo%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1488">The following example demonstrates the <xref:System.String.CopyTo%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringcopyto/CPP/stringcopyto.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/CS/stringcopyto.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringcopyto/VB/stringcopyto.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1489"><paramref name="destination" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1489"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-1490"><paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 为负</span><span class="sxs-lookup"><span data-stu-id="7ec08-1490"><paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative</span></span>

<span data-ttu-id="7ec08-1491">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1491">-or-</span></span>

 <span data-ttu-id="7ec08-1492"><paramref name="sourceIndex" /> 不标识当前实例中的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1492"><paramref name="sourceIndex" /> does not identify a position in the current instance.</span></span>

<span data-ttu-id="7ec08-1493">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1493">-or-</span></span>

 <span data-ttu-id="7ec08-1494"><paramref name="destinationIndex" /> 不标识 <paramref name="destination" /> 数组中的有效索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1494"><paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.</span></span>

<span data-ttu-id="7ec08-1495">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1495">-or-</span></span>

 <span data-ttu-id="7ec08-1496"><paramref name="count" /> 大于从 <paramref name="sourceIndex" /> 到此实例末尾的子字符串的长度</span><span class="sxs-lookup"><span data-stu-id="7ec08-1496"><paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance</span></span>

<span data-ttu-id="7ec08-1497">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1497">-or-</span></span>

 <span data-ttu-id="7ec08-1498"><paramref name="count" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destination" /> 数组末尾的子数组的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1498"><paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static string Create&lt;TState&gt; (int length, TState state, System.Buffers.SpanAction&lt;char,TState&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create&lt;TState&gt;(int32 length, !!TState state, class System.Buffers.SpanAction`2&lt;char, !!TState&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TState) (length As Integer, state As TState, action As SpanAction(Of Char, TState)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static System::String ^ Create(int length, TState state, System::Buffers::SpanAction&lt;char, TState&gt; ^ action);" />
      <MemberSignature Language="F#" Value="static member Create : int * 'State * System.Buffers.SpanAction&lt;char, 'State&gt; -&gt; string" Usage="System.string.Create (length, state, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="action" Type="System.Buffers.SpanAction&lt;System.Char,TState&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState"><span data-ttu-id="7ec08-1499">要传递到的元素的类型 <paramref name="action" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1499">The type of the element to pass to <paramref name="action" />.</span></span></typeparam>
        <param name="length"><span data-ttu-id="7ec08-1500">要创建的字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1500">The length of the string to create.</span></span></param>
        <param name="state"><span data-ttu-id="7ec08-1501">要传递给 <paramref name="action" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1501">The element to pass to <paramref name="action" />.</span></span></param>
        <param name="action"><span data-ttu-id="7ec08-1502">用于初始化字符串的回叫。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1502">A callback to initialize the string.</span></span></param>
        <summary><span data-ttu-id="7ec08-1503">创建一个具有特定长度的新字符串，并在创建后使用指定的回叫对其进行初始化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1503">Creates a new string with a specific length and initializes it after creation by using the specified callback.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1504">创建的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1504">The created string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="7ec08-1505">传递给的目标跨度的初始内容未 `action` 定义。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1505">The initial content of the destination span passed to `action` is undefined.</span></span> <span data-ttu-id="7ec08-1506">因此，委托负责确保已分配范围的每个元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1506">Therefore, it is the delegate's responsibility to ensure that every element of the span is assigned.</span></span> <span data-ttu-id="7ec08-1507">否则，结果字符串可能包含随机字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1507">Otherwise, the resulting string could contain random characters.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly string Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string Empty" />
      <MemberSignature Language="DocId" Value="F:System.String.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : string" Usage="System.string.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ec08-1508">表示空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1508">Represents the empty string.</span></span> <span data-ttu-id="7ec08-1509">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1509">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1510">此字段的值是长度为零的字符串 ""。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1510">The value of this field is the zero-length string, "".</span></span>

 <span data-ttu-id="7ec08-1511">在应用程序代码中，此字段最常用于赋值，以将字符串变量初始化为空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1511">In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.</span></span> <span data-ttu-id="7ec08-1512">若要测试字符串的值是否为 `null` 或 <xref:System.String.Empty?displayProperty=nameWithType> ，请使用 <xref:System.String.IsNullOrEmpty%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1512">To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, use the <xref:System.String.IsNullOrEmpty%2A> method.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EndsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-1513">确定此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1513">Determines whether the end of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (char value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(char value) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.Char)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As Char) As Boolean" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(char value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="F#" Value="member this.EndsWith : char -&gt; bool" Usage="string.EndsWith value" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1514">要与此实例末尾的字符进行比较的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1514">The character to compare to the character at the end of this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-1515">确定此字符串实例的结尾是否与指定的字符匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1515">Determines whether the end of this string instance matches the specified character.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1516">如果 <see langword="true" /> 与此实例的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1516"><see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-1517">此方法使用当前区域性执行区分大小写和区分区域性的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1517">This method performs a case-sensitive and culture-sensitive comparison using the current culture.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string -&gt; bool" Usage="string.EndsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1518">要与此实例末尾的子字符串进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1518">The string to compare to the substring at the end of this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-1519">确定此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1519">Determines whether the end of this string instance matches the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1520">如果 <see langword="true" /> 与此实例的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1520"><see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1521">此方法 `value` 与此实例末尾的子字符串进行比较，其长度与相同 `value` ，并返回一个指示是否相等的指示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1521">This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="7ec08-1522">若要相等， `value` 必须是对此实例的引用，或与此实例的末尾匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1522">To be equal, `value` must be a reference to this same instance or match the end of this instance.</span></span>

 <span data-ttu-id="7ec08-1523">此方法使用当前区域性执行区分大小写的 (区分大小写的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1523">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-1524">下面的示例指示数组中的每个字符串是否以句点结束， ( "。) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1524">The following example indicates whether each string in an array ends with a period (".").</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.EndsWith/cs/EndsWith1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.EndsWith/vb/EndsWith1.vb" id="Snippet1":::

 <span data-ttu-id="7ec08-1525">下面的示例定义了一个 `StripEndTags` 方法，该方法使用 <xref:System.String.EndsWith(System.String)> 方法从行的末尾删除 HTML 结束标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1525">The following example defines a `StripEndTags` method that uses the <xref:System.String.EndsWith(System.String)> method to remove HTML end tags from the end of a line.</span></span> <span data-ttu-id="7ec08-1526">请注意，将  `StripEndTags` 以递归方式调用方法，以确保删除行末尾处的多个 HTML 结束标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1526">Note that the  `StripEndTags` method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringendswith/CPP/stringendswith.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringendswith/CS/stringendswith.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringendswith/VB/stringendswith.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1527"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1527"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-1528">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1528">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-1529">若要通过使用当前区域性的字符串比较规则来确定某个字符串是否以特定子字符串结束，请使用 <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> 其参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1529">To determine whether a string ends with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.StartsWith(System.String)" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * StringComparison -&gt; bool" Usage="string.EndsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1530">要与此实例末尾的子字符串进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1530">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-1531">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1531">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="7ec08-1532">确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1532">Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1533">如果 <see langword="true" /> 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1533"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1534"><xref:System.String.EndsWith%2A>方法将 `value` 参数与此字符串末尾的子字符串进行比较，并返回一个值，该值指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1534">The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="7ec08-1535">若要相等， `value` 必须是对此同一个字符串的引用，必须为空字符串 ( "" ) ，或者必须与此字符串的末尾匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1535">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the end of this string.</span></span> <span data-ttu-id="7ec08-1536">方法所执行的比较的类型 <xref:System.String.EndsWith%2A> 取决于参数的值 `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1536">The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span>

## Examples
 <span data-ttu-id="7ec08-1537">下面的示例确定字符串是否以特定子字符串结束。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1537">The following example determines whether a string ends with a particular substring.</span></span> <span data-ttu-id="7ec08-1538">结果受区域性选择的影响，是否忽略大小写，以及是否执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1538">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cpp/ewcmp.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cs/ewcmp.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.EndsWithCmp/vb/ewcmp.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1539"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1539"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-1540"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1540"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.EndsWith (value, ignoreCase, culture)" />
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1541">要与此实例末尾的子字符串进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1541">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-1542">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1542"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-1543">确定如何对此实例与 <paramref name="value" /> 进行比较的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1543">Cultural information that determines how this instance and <paramref name="value" /> are compared.</span></span> <span data-ttu-id="7ec08-1544">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1544">If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="7ec08-1545">确定在使用指定的区域性进行比较时此字符串实例的结尾是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1545">Determines whether the end of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1546">如果 <see langword="true" /> 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1546"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1547">此方法将 `value` 参数与此字符串末尾与相同的子字符串进行比较 `value` ，并返回一个值，该值指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1547">This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="7ec08-1548">若要相等， `value` 必须是对此同一个实例的引用，或与此字符串的末尾匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1548">To be equal, `value` must be a reference to this same instance or match the end of this string.</span></span>

 <span data-ttu-id="7ec08-1549">此方法使用指定的大小写和区域性执行 word (区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1549">This method performs a word (culture-sensitive) comparison using the specified casing and culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-1550">下面的示例确定字符串是否出现在另一个字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1550">The following example determines whether a string occurs at the end of another string.</span></span> <span data-ttu-id="7ec08-1551"><xref:System.String.EndsWith%2A>方法使用区分大小写、不区分大小写和影响搜索结果的不同区域性多次调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1551">The <xref:System.String.EndsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.EndsWithCI/cs/ewci.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.EndsWithCI/vb/ewci.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1552"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1552"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public System.Text.StringRuneEnumerator EnumerateRunes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.StringRuneEnumerator EnumerateRunes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EnumerateRunes" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateRunes () As StringRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringRuneEnumerator EnumerateRunes();" />
      <MemberSignature Language="F#" Value="member this.EnumerateRunes : unit -&gt; System.Text.StringRuneEnumerator" Usage="string.EnumerateRunes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-1553">从此字符串返回 <see cref="T:System.Text.Rune" /> 的枚举。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1553">Returns an enumeration of <see cref="T:System.Text.Rune" /> from this string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1554">一个字符串 Rune 枚举器。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1554">A string rune enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

### Remarks

<span data-ttu-id="7ec08-1555">无效的序列在枚举中表示 <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1555">Invalid sequences are represented in the enumeration by <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-1556">确定两个 <see cref="T:System.String" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1556">Determines whether two <see cref="T:System.String" /> objects have the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="string.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7ec08-1557">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1557">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-1558">确定此实例是否与指定的对象（也必须是 <see cref="T:System.String" /> 对象）具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1558">Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1559">如果 <see langword="true" /> 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.String" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1559"><see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="7ec08-1560">如果 <paramref name="obj" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1560">If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1561">此方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1561">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

## Examples
 <span data-ttu-id="7ec08-1562">下面的示例演示 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1562">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string value) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::String ^ value);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.Equals : string -&gt; bool" Usage="string.Equals value" />
      <MemberSignature Language="C#" Value="public bool Equals (string? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1563">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1563">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-1564">确定此实例是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1564">Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1565">如果 <see langword="true" /> 参数的值与此实例的值相同，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1565"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7ec08-1566">如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1566">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1567">此方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1567">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

## Examples
 <span data-ttu-id="7ec08-1568">下面的示例演示 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1568">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span> <span data-ttu-id="7ec08-1569">它将标题-大写字母 "File" 与等效的单词、其小写等效项、大写等效项以及包含拉丁文小写字母无点的单词（I (U + 0131) 而不是拉丁小写字母 I (U + 0069) 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1569">It compares the title-cased word "File" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069).</span></span> <span data-ttu-id="7ec08-1570">由于 <xref:System.String.Equals(System.String)> 方法执行序号比较，因此只有与相同单词的比较返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1570">Because the <xref:System.String.Equals(System.String)> method performs an ordinal comparison, only the comparison with an identical word returns `true`.</span></span>

 [!code-csharp[System.String.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equalsex1.cs#2)]
 [!code-vb[System.String.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equalsex1.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string -&gt; bool" Usage="System.string.Equals (a, b)" />
      <MemberSignature Language="C#" Value="public static bool Equals (string? a, string? b);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="7ec08-1571">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1571">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="7ec08-1572">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1572">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-1573">确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1573">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1574">如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1574"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7ec08-1575">如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 <see langword="null" />，此方法将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1575">If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1576">此方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1576">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

## Examples
 <span data-ttu-id="7ec08-1577">下面的示例演示 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1577">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value, StringComparison comparisonType);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * StringComparison -&gt; bool" Usage="string.Equals (value, comparisonType)" />
      <MemberSignature Language="C#" Value="public bool Equals (string? value, StringComparison comparisonType);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-1578">要与此实例进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1578">The string to compare to this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-1579">枚举值之一，用于指定如何比较字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1579">One of the enumeration values that specifies how the strings will be compared.</span></span></param>
        <summary><span data-ttu-id="7ec08-1580">确定此字符串是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1580">Determines whether this string and a specified <see cref="T:System.String" /> object have the same value.</span></span> <span data-ttu-id="7ec08-1581">参数指定区域性、大小写以及比较所用的排序规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1581">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1582">如果 <see langword="true" /> 参数的值与此字符串相同，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1582"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1583">`comparisonType`参数指示比较是否应使用当前或固定的区域性，以服从或忽略所比较的两个字符串的大小写，或使用 word 或序号排序规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1583">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-1584">下面的示例创建一个字符串数组，该数组由大写的 "I"、小写 "i" 和无点 "ı" 组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1584">The following example creates a string array that consists of an uppercase "I", a lowercase "i", and a dotless "ı".</span></span> <span data-ttu-id="7ec08-1585">然后，它调用 <xref:System.String.Equals(System.String%2CSystem.StringComparison)> 方法，通过使用每个可能的枚举值对它们进行比较 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1585">It then calls the <xref:System.String.Equals(System.String%2CSystem.StringComparison)> method to compare them by using each possible <xref:System.StringComparison> enumeration value.</span></span>

 [!code-csharp[System.String.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/eqcmp.cs#1)]
 [!code-vb[System.String.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/eqcmp.vb#1)]

 <span data-ttu-id="7ec08-1586">下面的示例通过使用枚举的每个成员来比较四组单词 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1586">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="7ec08-1587">这种比较使用英语 (美国) 和萨米语 (高瑞典) 文化的约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1587">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="7ec08-1588">请注意，在 en-us 区域性中，字符串 "encyclopædia" 和 "encyclopaedia" 被视为等效，而不是在北瑞典 (北瑞典) 文化中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1588">Note that the strings "encyclopædia" and "encyclopaedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex4.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-1589"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1589"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b, StringComparison comparisonType);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string * StringComparison -&gt; bool" Usage="System.string.Equals (a, b, comparisonType)" />
      <MemberSignature Language="C#" Value="public static bool Equals (string? a, string? b, StringComparison comparisonType);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="b" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="7ec08-1590">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1590">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="7ec08-1591">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1591">The second string to compare, or <see langword="null" />.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-1592">枚举值之一，用于指定比较的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1592">One of the enumeration values that specifies the rules for the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-1593">确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1593">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span> <span data-ttu-id="7ec08-1594">参数指定区域性、大小写以及比较所用的排序规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1594">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1595">如果 <see langword="true" /> 参数的值与 <paramref name="a" /> 参数的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1595"><see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1596">`comparisonType`参数指示比较是否应使用当前或固定的区域性，以服从或忽略所比较的两个字符串的大小写，或使用 word 或序号排序规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1596">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-1597">下面的示例通过使用枚举的每个成员来比较四组单词 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1597">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="7ec08-1598">这种比较使用英语 (美国) 和萨米语 (高瑞典) 文化的约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1598">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="7ec08-1599">请注意，在 en-us 区域性中，字符串 "encyclopædia" 和 "encyclopaedia" 被视为等效，而不是在北瑞典 (北瑞典) 文化中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1599">Note that the strings "encyclopædia" and "encyclopaedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-1600"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1600"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Format">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-1601">将对象的值转换为基于指定格式的字符串，并将其插入到另一个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1601">Converts the value of objects to strings based on the formats specified and inserts them into another string.</span></span>

<span data-ttu-id="7ec08-1602">如果不熟悉 `String.Format` 方法，请参阅 [String.Format 方法入门](#Starting)一节来进行快速了解。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1602">If you are new to the `String.Format` method, see the [Get started with the String.Format method](#Starting) section for a quick overview.</span></span>

<span data-ttu-id="7ec08-1603">有关 `String.Format` 方法的常规文档，请参阅[备注](#remarks-top)部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1603">See the [Remarks](#remarks-top) section for general documentation for the `String.Format` method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

<a name="remarks-top"></a>
## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

 <span data-ttu-id="7ec08-1604">本节内容：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1604">In this section:</span></span>

 <span data-ttu-id="7ec08-1605">[开始处理字符串. 格式方法](#Starting)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1605">[Get started with the String.Format method](#Starting)</span></span>\
 <span data-ttu-id="7ec08-1606">[我要调用哪种方法？](#FTaskList)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1606">[Which method do I call?](#FTaskList)</span></span>\
 <span data-ttu-id="7ec08-1607">[Format 方法 brief](#Format_Brief)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1607">[The Format method in brief](#Format_Brief)</span></span>\
 <span data-ttu-id="7ec08-1608">[格式项](#FormatItem)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1608">[The Format item](#FormatItem)</span></span>\
 <span data-ttu-id="7ec08-1609">[如何设置参数的格式](#HowFormatted)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1609">[How arguments are formatted](#HowFormatted)</span></span>\
 <span data-ttu-id="7ec08-1610">[设置具有相同索引的项的格式](#SameIndex)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1610">[Format items that have the same index](#SameIndex)</span></span>\
 <span data-ttu-id="7ec08-1611">[格式设置和区域性](#Format_Culture)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1611">[Formatting and culture](#Format_Culture)</span></span>\
 <span data-ttu-id="7ec08-1612">[自定义格式设置操作](#Format_Custom)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1612">[Custom formatting operations](#Format_Custom)</span></span>\
 [<span data-ttu-id="7ec08-1613">字符串格式 Q &</span><span class="sxs-lookup"><span data-stu-id="7ec08-1613">String.Format Q & A</span></span>](#QA)

<a name="Starting"></a>
## <a name="get-started-with-the-stringformat-method"></a><span data-ttu-id="7ec08-1614">开始处理字符串. 格式方法</span><span class="sxs-lookup"><span data-stu-id="7ec08-1614">Get started with the String.Format method</span></span>
 <span data-ttu-id="7ec08-1615"><xref:System.String.Format%2A?displayProperty=nameWithType>如果需要将对象、变量或表达式的值插入到另一个字符串，请使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1615">Use <xref:System.String.Format%2A?displayProperty=nameWithType> if you need to insert the value of an object, variable, or expression into another string.</span></span> <span data-ttu-id="7ec08-1616">例如，可以将值的值插入 <xref:System.Decimal> 字符串中，以单个字符串的形式向用户显示该值：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1616">For example, you can insert the value of a <xref:System.Decimal> value into a string to display it to the user as a single string:</span></span>

 [!code-cpp[System.String.Format#35](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#35)]
 [!code-csharp-interactive[System.String.Format#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#35)]
 [!code-vb[System.String.Format#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#35)]

 <span data-ttu-id="7ec08-1617">您可以控制该值的格式：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1617">And you can control that value's formatting:</span></span>

 [!code-cpp[System.String.Format#36](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#36)]
 [!code-csharp[System.String.Format#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#36)]
 [!code-vb[System.String.Format#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#36)]

 <span data-ttu-id="7ec08-1618">除了格式设置，还可以控制对齐方式和间距。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1618">Besides formatting, you can also control alignment and spacing.</span></span>

 ### <a name="insert-a-string"></a><span data-ttu-id="7ec08-1619">插入字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1619">Insert a string</span></span>

 <span data-ttu-id="7ec08-1620"><xref:System.String.Format%2A?displayProperty=nameWithType> 以格式字符串开头，后跟一个或多个将转换为字符串并在格式字符串中的指定位置插入的对象或表达式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1620"><xref:System.String.Format%2A?displayProperty=nameWithType> starts with a format string, followed by one or more objects or expressions that will be converted to strings and inserted at a specified place in the format string.</span></span> <span data-ttu-id="7ec08-1621">例如：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1621">For example:</span></span>

 [!code-cpp[System.String.Format#30](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#30)]
 [!code-csharp-interactive[System.String.Format#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#30)]
 [!code-vb[System.String.Format#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#30)]

 <span data-ttu-id="7ec08-1622">`{0}`格式字符串中的是格式项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1622">The `{0}` in the format string is a format item.</span></span> <span data-ttu-id="7ec08-1623">`0` 对象的索引，该对象的字符串值将在该位置插入。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1623">`0` is the index of the object whose string value will be inserted at that position.</span></span> <span data-ttu-id="7ec08-1624"> (索引从0开始 ) 。如果要插入的对象不是字符串，则调用它的方法将其 `ToString` 转换为一个字符串，然后再将其插入到结果字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1624">(Indexes start at 0.) If the object to be inserted is not a string, its `ToString` method is called to convert it to one before inserting it in the result string.</span></span>

 <span data-ttu-id="7ec08-1625">下面是使用两个格式项和对象列表中的两个对象的另一个示例：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1625">Here's another example that uses two format items and two objects in the object list:</span></span>

 [!code-cpp[System.String.Format#31](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#31)]
 [!code-csharp[System.String.Format#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#31)]
 [!code-vb[System.String.Format#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#31)]

 <span data-ttu-id="7ec08-1626">只要每个格式项的索引在对象列表中都有匹配的对象，就可以拥有任意数量的格式项以及对象列表中的任意多个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1626">You can have as many format items and as many objects in the object list as you want, as long as the index of every format item has a matching object in the object list.</span></span> <span data-ttu-id="7ec08-1627">您也不必担心您调用的是哪个重载;编译器将为您选择合适的一个。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1627">You also don't have to worry about which overload you call; the compiler will select the appropriate one for you.</span></span>

 ### <a name="control-formatting"></a><span data-ttu-id="7ec08-1628">控件格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1628">Control formatting</span></span>
 <span data-ttu-id="7ec08-1629">可以在格式项中的索引后跟格式字符串，以控制如何设置对象的格式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1629">You can follow the index in a format item with a format string to control how an object is formatted.</span></span> <span data-ttu-id="7ec08-1630">例如， `{0:d}` 将 "d" 格式字符串应用于对象列表中的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1630">For example, `{0:d}` applies the "d" format string to the first object in the object list.</span></span> <span data-ttu-id="7ec08-1631">下面是一个包含单个对象和两个格式项的示例：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1631">Here is an example with a single object and two format items:</span></span>

 [!code-cpp[System.String.Format#32](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#32)]
 [!code-csharp[System.String.Format#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#32)]
 [!code-vb[System.String.Format#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#32)]

 <span data-ttu-id="7ec08-1632">许多类型都支持格式字符串，其中[包括标准和](/dotnet/standard/base-types/standard-numeric-format-strings)[自](/dotnet/standard/base-types/custom-numeric-format-strings)定义格式字符串 (的所有数字类型) [、标准和](/dotnet/standard/base-types/standard-date-and-time-format-strings)自[定义格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings))  (的所有日期和时间均[为标准和](/dotnet/standard/base-types/standard-timespan-format-strings)自[定义](/dotnet/standard/base-types/custom-timespan-format-strings)格式字符串 (、所有枚举类型[枚举类型](/dotnet/standard/base-types/enumeration-format-strings)以及[guid](xref:System.Guid.ToString(System.String))。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1632">A number of types support format strings, including all numeric types (both [standard](/dotnet/standard/base-types/standard-numeric-format-strings) and [custom](/dotnet/standard/base-types/custom-numeric-format-strings) format strings), all dates and times (both [standard](/dotnet/standard/base-types/standard-date-and-time-format-strings) and [custom](/dotnet/standard/base-types/custom-date-and-time-format-strings) format strings) and time intervals (both [standard](/dotnet/standard/base-types/standard-timespan-format-strings) and [custom](/dotnet/standard/base-types/custom-timespan-format-strings) format strings), all enumeration types [enumeration types](/dotnet/standard/base-types/enumeration-format-strings), and [GUIDs](xref:System.Guid.ToString(System.String)).</span></span> <span data-ttu-id="7ec08-1633">您还可以将对格式字符串的支持添加到您自己的类型中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1633">You can also add support for format strings to your own types.</span></span>

 ### <a name="control-spacing"></a><span data-ttu-id="7ec08-1634">控件间距</span><span class="sxs-lookup"><span data-stu-id="7ec08-1634">Control spacing</span></span>
 <span data-ttu-id="7ec08-1635">您可以通过使用诸如的语法（ `{0,12}` 插入12个字符的字符串）来定义插入到结果字符串中的字符串的宽度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1635">You can define the width of the string that is inserted into the result string by using syntax such as `{0,12}`, which inserts a 12-character string.</span></span> <span data-ttu-id="7ec08-1636">在这种情况下，第一个对象的字符串表示形式在12个字符的字段中右对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1636">In this case, the string representation of the first object is right-aligned in the 12-character field.</span></span>  <span data-ttu-id="7ec08-1637"> (如果第一个对象的字符串表示形式的长度超过12个字符，则将忽略首选字段宽度，并将整个字符串插入到结果字符串中。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1637">(If the string representation of the first object is more than 12 characters in length, though, the preferred field width is ignored, and the entire string is inserted into the result string.)</span></span>

 <span data-ttu-id="7ec08-1638">下面的示例定义了一个包含字符串 "Year" 和一些年份字符串的6字符字段，以及一个包含字符串 "人口" 和一些人口数据的15个字符的字段。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1638">The following example defines a 6-character field to hold the string "Year" and some year strings, as well as an 15-character field to hold the string "Population" and some population data.</span></span> <span data-ttu-id="7ec08-1639">请注意，字符在字段中右对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1639">Note that the characters are right-aligned in the field.</span></span>

 [!code-cpp[System.String.Format#33](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#33)]
 [!code-csharp[System.String.Format#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting3.cs#33)]
 [!code-vb[System.String.Format#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#33)]

 ### <a name="control-alignment"></a><span data-ttu-id="7ec08-1640">控件对齐</span><span class="sxs-lookup"><span data-stu-id="7ec08-1640">Control alignment</span></span>
 <span data-ttu-id="7ec08-1641">默认情况下，如果指定字段宽度，则字符串在其字段内右对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1641">By default, strings are right-aligned within their field if you specify a field width.</span></span> <span data-ttu-id="7ec08-1642">若要在字段中左对齐字符串，请在字段宽度前面加上负号，如 `{0,-12}` 定义12个字符左对齐字段。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1642">To left-align strings in a field, you preface the field width with a negative sign, such as `{0,-12}` to define a 12-character left-aligned field.</span></span>

 <span data-ttu-id="7ec08-1643">下面的示例与上一个示例类似，不同之处在于它会将标签和数据保持一致。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1643">The following example is similar to the previous one, except that it left-aligns both labels and data.</span></span>

 [!code-cpp[System.String.Format#34](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#34)]
 [!code-csharp[System.String.Format#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#34)]
 [!code-vb[System.String.Format#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#34)]

 <span data-ttu-id="7ec08-1644"><xref:System.String.Format%2A?displayProperty=nameWithType> 使用复合格式设置功能。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1644"><xref:System.String.Format%2A?displayProperty=nameWithType> makes use of the composite formatting feature.</span></span> <span data-ttu-id="7ec08-1645">有关更多信息，请参见[复合格式设置](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1645">For more information, see [Composite Formatting](/dotnet/standard/base-types/composite-formatting).</span></span>

<a name="FTaskList"></a>
## <a name="which-method-do-i-call"></a><span data-ttu-id="7ec08-1646">我要调用哪种方法？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1646">Which method do I call?</span></span>

|<span data-ttu-id="7ec08-1647">功能</span><span class="sxs-lookup"><span data-stu-id="7ec08-1647">To</span></span>|<span data-ttu-id="7ec08-1648">调用</span><span class="sxs-lookup"><span data-stu-id="7ec08-1648">Call</span></span>|
|--------|----------|
|<span data-ttu-id="7ec08-1649">使用当前区域性的约定设置一个或多个对象的格式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1649">Format one or more objects by using the conventions of the current culture.</span></span>|<span data-ttu-id="7ec08-1650">除了包含参数的重载以外 `provider` ，其余 <xref:System.String.Format%2A> 重载包含一个参数， <xref:System.String> 后跟一个或多个对象参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1650">Except for the overloads that include a `provider` parameter, the remaining <xref:System.String.Format%2A> overloads include a <xref:System.String> parameter followed by one or more object parameters.</span></span> <span data-ttu-id="7ec08-1651">因此，不必确定要 <xref:System.String.Format%2A> 调用的重载。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1651">Because of this, you don't have to determine which <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="7ec08-1652">根据参数列表，语言编译器会从没有参数的重载中选择相应的重载 `provider` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1652">Your language compiler selects the appropriate overload from among the overloads that don't have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="7ec08-1653">例如，如果参数列表具有五个参数，则编译器将调用 <xref:System.String.Format(System.String%2CSystem.Object%5B%5D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1653">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format(System.String%2CSystem.Object%5B%5D)> method.</span></span>|
|<span data-ttu-id="7ec08-1654">通过使用特定区域性的约定来设置一个或多个对象的格式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1654">Format one or more objects by using the conventions of a specific culture.</span></span>|<span data-ttu-id="7ec08-1655">以 <xref:System.String.Format%2A> 参数开头的每个重载 `provider` 后跟一个 <xref:System.String> 参数和一个或多个对象参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1655">Each <xref:System.String.Format%2A> overload that begins with a `provider` parameter is followed by a <xref:System.String> parameter and one or more object parameters.</span></span> <span data-ttu-id="7ec08-1656">因此，不必确定要调用的特定 <xref:System.String.Format%2A> 重载。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1656">Because of this, you don't have to determine which specific <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="7ec08-1657">语言编译器根据参数列表，从具有参数的重载中选择适当的重载 `provider` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1657">Your language compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="7ec08-1658">例如，如果参数列表具有五个参数，则编译器将调用 <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1658">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> method.</span></span>|
|<span data-ttu-id="7ec08-1659">使用实现或实现执行自定义格式设置操作 <xref:System.ICustomFormatter> <xref:System.IFormattable> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1659">Perform a custom formatting operation either with an <xref:System.ICustomFormatter> implementation or an <xref:System.IFormattable> implementation.</span></span>|<span data-ttu-id="7ec08-1660">四个具有参数的重载中的任何一个 `provider` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1660">Any of the four overloads with a `provider` parameter.</span></span> <span data-ttu-id="7ec08-1661">编译器根据参数列表，从具有参数的重载中选择适当的重载 `provider` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1661">The compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span>|

<a name="Format_Brief"></a>
## <a name="the-format-method-in-brief"></a><span data-ttu-id="7ec08-1662">Format 方法 brief</span><span class="sxs-lookup"><span data-stu-id="7ec08-1662">The Format method in brief</span></span>

 <span data-ttu-id="7ec08-1663">该方法的每个重载都 <xref:System.String.Format%2A> 使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) ，以复合格式字符串形式包含从零开始的索引占位符（称为 *格式项*）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1663">Each overload of the <xref:System.String.Format%2A> method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to include zero-based indexed placeholders, called *format items*, in a composite format string.</span></span> <span data-ttu-id="7ec08-1664">在运行时，每个格式项都替换为参数列表中相应参数的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1664">At run time, each format item is replaced with the string representation of the corresponding argument in a parameter list.</span></span> <span data-ttu-id="7ec08-1665">如果参数的值为，则 `null` 将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1665">If the value of the argument is `null`, the format item is replaced with <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-1666">例如，以下对方法的调用 <xref:System.String.Format(System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object)> 包含一个格式字符串，其中包含三个格式项、、 {0} {1} 和 {2} ，以及包含三个项的参数列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1666">For example, the following call to the <xref:System.String.Format(System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object)> method includes a format string with three format items, {0}, {1}, and {2}, and an argument list with three items.</span></span>

 [!code-cpp[System.String.Format#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload1.cpp#8)]
 [!code-csharp[System.String.Format#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload1.cs#8)]
 [!code-vb[System.String.Format#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload1.vb#8)]

<a name="FormatItem"></a>
## <a name="the-format-item"></a><span data-ttu-id="7ec08-1667">格式项</span><span class="sxs-lookup"><span data-stu-id="7ec08-1667">The format item</span></span>
 <span data-ttu-id="7ec08-1668">格式项具有以下语法：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1668">A format item has this syntax:</span></span>

```
{index[,alignment][:formatString]}
```

 <span data-ttu-id="7ec08-1669">方括号表示可选元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1669">Brackets denote optional elements.</span></span> <span data-ttu-id="7ec08-1670">需要左大括号和右大括号。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1670">The opening and closing braces are required.</span></span> <span data-ttu-id="7ec08-1671"> (在格式字符串中包含文本左大括号或右大括号，请参阅[复合格式设置](/dotnet/standard/base-types/composite-formatting)一文中的[转义大括号](/dotnet/standard/base-types/composite-formatting#escaping-braces)部分。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1671">(To include a literal opening or closing brace in the format string, see the [Escaping Braces](/dotnet/standard/base-types/composite-formatting#escaping-braces) section in the [Composite Formatting](/dotnet/standard/base-types/composite-formatting) article.)</span></span>

 <span data-ttu-id="7ec08-1672">例如，设置货币值格式的格式项可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1672">For example, a format item to format a currency value might appear like this:</span></span>

 [!code-cpp[System.String.Format#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatsyntax1.cpp#12)]
 [!code-csharp[System.String.Format#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatsyntax1.cs#12)]
 [!code-vb[System.String.Format#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatsyntax1.vb#12)]

 <span data-ttu-id="7ec08-1673">格式项包含以下元素：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1673">A format item has the following elements:</span></span>

 <span data-ttu-id="7ec08-1674">index</span><span class="sxs-lookup"><span data-stu-id="7ec08-1674">*index*</span></span>\
 <span data-ttu-id="7ec08-1675">自变量的从零开始的索引，其字符串表示形式将包含在字符串中的此位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1675">The zero-based index of the argument whose string representation is to be included at this position in the string.</span></span> <span data-ttu-id="7ec08-1676">如果此参数为 `null` ，则字符串中此位置将包含空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1676">If this argument is `null`, an empty string will be included at this position in the string.</span></span>

 <span data-ttu-id="7ec08-1677">*关联*</span><span class="sxs-lookup"><span data-stu-id="7ec08-1677">*alignment*</span></span>\
 <span data-ttu-id="7ec08-1678">可选。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1678">Optional.</span></span> <span data-ttu-id="7ec08-1679">一个有符号整数，它指示要插入自变量的字段的总长度，并指定该参数是右对齐的， (是正整数) 还是) 负整数 (左对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1679">A signed integer that indicates the total length of the field into which the argument is inserted and whether it is right-aligned (a positive integer) or left-aligned (a negative integer).</span></span> <span data-ttu-id="7ec08-1680">如果省略 *对齐方式*，则会在不带前导空格或尾随空格的字段中插入相应参数的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1680">If you omit *alignment*, the string representation of the corresponding argument is inserted in a field with no leading or trailing spaces.</span></span>

 <span data-ttu-id="7ec08-1681">如果 *对齐* 值小于要插入的参数的长度，则将忽略 *对齐* ，并使用参数的字符串表示形式的长度作为字段宽度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1681">If the value of *alignment* is less than the length of the argument to be inserted, *alignment* is ignored and the length of the string representation of the argument is used as the field width.</span></span>

 <span data-ttu-id="7ec08-1682">*说明符*</span><span class="sxs-lookup"><span data-stu-id="7ec08-1682">*formatString*</span></span>\
 <span data-ttu-id="7ec08-1683">可选。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1683">Optional.</span></span> <span data-ttu-id="7ec08-1684">一个字符串，指定相应参数的结果字符串的格式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1684">A string that specifies the format of the corresponding argument's result string.</span></span> <span data-ttu-id="7ec08-1685">如果省略 *格式说明符*，则将调用相应的参数的无参数 `ToString` 方法，以生成其字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1685">If you omit *formatString*, the corresponding argument's parameterless `ToString` method is called to produce its string representation.</span></span> <span data-ttu-id="7ec08-1686">如果指定格式 *字符串*，则该格式项引用的参数必须实现 <xref:System.IFormattable> 接口。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1686">If you specify *formatString*, the argument referenced by the format item must implement the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="7ec08-1687">支持格式字符串的类型包括：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1687">Types that support format strings include:</span></span>

- <span data-ttu-id="7ec08-1688">所有整型和浮点类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1688">All integral and floating-point types.</span></span> <span data-ttu-id="7ec08-1689"> (参见 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1689">(See [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).)</span></span>

- <span data-ttu-id="7ec08-1690"><xref:System.DateTime> 和 <xref:System.DateTimeOffset>。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1690"><xref:System.DateTime> and <xref:System.DateTimeOffset>.</span></span> <span data-ttu-id="7ec08-1691"> (参见 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1691">(See [Standard Date and Time Format Strings](/dotnet/standard/base-types/standard-date-and-time-format-strings) and [Custom Date and Time Format Strings](/dotnet/standard/base-types/custom-date-and-time-format-strings).)</span></span>

- <span data-ttu-id="7ec08-1692">所有枚举类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1692">All enumeration types.</span></span> <span data-ttu-id="7ec08-1693"> (参见 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1693">(See [Enumeration Format Strings](/dotnet/standard/base-types/enumeration-format-strings).)</span></span>

- <span data-ttu-id="7ec08-1694"><xref:System.TimeSpan> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1694"><xref:System.TimeSpan> values.</span></span> <span data-ttu-id="7ec08-1695"> (参见 [标准 Timespan 格式字符串](/dotnet/standard/base-types/standard-timespan-format-strings) 和 [自定义时间跨度格式字符串](/dotnet/standard/base-types/custom-timespan-format-strings)。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1695">(See [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).)</span></span>

- <span data-ttu-id="7ec08-1696">GUID。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1696">GUIDs.</span></span> <span data-ttu-id="7ec08-1697"> (参见 <xref:System.Guid.ToString(System.String)?displayProperty=nameWithType> 方法。 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1697">(See the <xref:System.Guid.ToString(System.String)?displayProperty=nameWithType> method.)</span></span>

 <span data-ttu-id="7ec08-1698">但请注意，任何自定义类型都可以实现 <xref:System.IFormattable> 或扩展现有类型的 <xref:System.IFormattable> 实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1698">However, note that any custom type can implement <xref:System.IFormattable> or extend an existing type's <xref:System.IFormattable> implementation.</span></span>

 <span data-ttu-id="7ec08-1699">下面的示例使用 `alignment` 和 `formatString` 参数来生成格式化的输出。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1699">The following example uses the `alignment` and `formatString` arguments to produce formatted output.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload2.cpp" id="Snippet9":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload2.cs" interactive="try-dotnet-method" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload2.vb" id="Snippet9":::

<a name="HowFormatted"></a>
## <a name="how-arguments-are-formatted"></a><span data-ttu-id="7ec08-1700">如何设置参数的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1700">How arguments are formatted</span></span>
 <span data-ttu-id="7ec08-1701">格式项从字符串的开头按顺序处理。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1701">Format items are processed sequentially from the beginning of the string.</span></span> <span data-ttu-id="7ec08-1702">每个格式项都具有与方法的参数列表中的对象相对应的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1702">Each format item has an index that corresponds to an object in the method's argument list.</span></span> <span data-ttu-id="7ec08-1703"><xref:System.String.Format%2A>方法检索参数并按如下方式派生其字符串表示形式：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1703">The <xref:System.String.Format%2A> method retrieves the argument and derives its string representation as follows:</span></span>

- <span data-ttu-id="7ec08-1704">如果参数为 `null` ，则该方法将插入 <xref:System.String.Empty?displayProperty=nameWithType> 到结果字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1704">If the argument is `null`, the method inserts <xref:System.String.Empty?displayProperty=nameWithType> into the result string.</span></span> <span data-ttu-id="7ec08-1705">不必担心如何处理 <xref:System.NullReferenceException> null 参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1705">You don't have to be concerned with handling a <xref:System.NullReferenceException> for null arguments.</span></span>

- <span data-ttu-id="7ec08-1706">如果调用 <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> 重载并且 `provider` 对象的 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 实现返回非 null <xref:System.ICustomFormatter> 实现，则会将参数传递给其 <xref:System.ICustomFormatter.Format(System.String%2CSystem.Object%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1706">If you call the <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> overload and the `provider` object's <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation returns a non-null <xref:System.ICustomFormatter> implementation, the argument is passed to its <xref:System.ICustomFormatter.Format(System.String%2CSystem.Object%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ec08-1707">如果格式项包含格式 *字符串* 参数，则它将作为第一个参数传递给方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1707">If the format item includes a *formatString* argument, it is passed as the first argument to the method.</span></span> <span data-ttu-id="7ec08-1708">如果 <xref:System.ICustomFormatter> 实现可用并且产生一个非空字符串，则返回该字符串作为参数的字符串表示形式; 否则，将执行下一步。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1708">If the <xref:System.ICustomFormatter> implementation is available and produces a non-null string, that string is returned as the string representation of the argument; otherwise, the next step executes.</span></span>

- <span data-ttu-id="7ec08-1709">如果参数实现 <xref:System.IFormattable> 接口， <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 则调用其实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1709">If the argument implements the <xref:System.IFormattable> interface, its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation is called.</span></span>

- <span data-ttu-id="7ec08-1710">调用了自变量的无参数 `ToString` 方法，该方法可重写或继承基类实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1710">The argument's parameterless `ToString` method, which either overrides or inherits from a base class implementation, is called.</span></span>

 <span data-ttu-id="7ec08-1711">有关截获对方法的调用， <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 并允许你查看 <xref:System.String.Format%2A> 方法为复合格式字符串中的每个格式项传递到格式设置方法的信息，请参阅 [示例：截获提供程序和罗马数字格式化程序](#Format7_Example)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1711">For an example that intercepts calls to the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method and allows you to see what information the <xref:System.String.Format%2A> method passes to a formatting method for each format item in a composite format string, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>

 <span data-ttu-id="7ec08-1712">有关详细信息，请参阅[复合格式设置](/dotnet/standard/base-types/composite-formatting)一文中的 "[处理顺序](/dotnet/standard/base-types/composite-formatting##processing-order)" 部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1712">For more information, see the [Processing Order](/dotnet/standard/base-types/composite-formatting##processing-order) section in the [Composite Formatting](/dotnet/standard/base-types/composite-formatting) article.</span></span>

<a name="SameIndex"></a>
## <a name="format-items-that-have-the-same-index"></a><span data-ttu-id="7ec08-1713">设置具有相同索引的项的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1713">Format items that have the same index</span></span>
 <span data-ttu-id="7ec08-1714"><xref:System.String.Format%2A> <xref:System.FormatException> 如果索引项的索引大于或等于参数列表中的参数数目，则该方法将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1714">The <xref:System.String.Format%2A> method throws a <xref:System.FormatException> exception if the index of an index item is greater than or equal to the number of arguments in the argument list.</span></span> <span data-ttu-id="7ec08-1715">但是， `format` 只要多个格式项具有相同的索引，就可以包含比参数更多的格式项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1715">However, `format` can include more format items than there are arguments, as long as multiple format items have the same index.</span></span> <span data-ttu-id="7ec08-1716">在以下示例中，对方法的调用中 <xref:System.String.Format(System.String%2CSystem.Object)> ，参数列表具有单个参数，但格式字符串包含两个格式项：一个显示数字的十进制值，另一个显示其十六进制值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1716">In the call to the <xref:System.String.Format(System.String%2CSystem.Object)> method in following example, the argument list has a single argument, but the format string includes two format items: one displays the decimal value of a number, and the other displays its hexadecimal value.</span></span>

 [!code-csharp-interactive[System.String.Format2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example1.cs#1)]
 [!code-vb[System.String.Format2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example1.vb#1)]

<a name="Format_Culture"></a>
## <a name="format-and-culture"></a><span data-ttu-id="7ec08-1717">格式和区域性</span><span class="sxs-lookup"><span data-stu-id="7ec08-1717">Format and culture</span></span>
 <span data-ttu-id="7ec08-1718">通常，使用当前区域性的约定（由属性返回），将参数列表中的对象转换为其字符串表示形式 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1718">Generally, objects in the argument list are converted to their string representations by using the conventions of the current culture, which is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7ec08-1719">可以通过调用包含参数的的重载之一来控制此行为 <xref:System.String.Format%2A> `provider` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1719">You can control this behavior by calling one of the overloads of <xref:System.String.Format%2A> that includes a `provider` parameter.</span></span> <span data-ttu-id="7ec08-1720">`provider`参数是一个 <xref:System.IFormatProvider> 实现，提供用于使格式设置过程适中的自定义和区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1720">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies custom and culture-specific formatting information that is used to moderate the formatting process.</span></span>

 <span data-ttu-id="7ec08-1721">此 <xref:System.IFormatProvider> 接口具有一个成员， <xref:System.IFormatProvider.GetFormat%2A> 该成员负责返回提供格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1721">The <xref:System.IFormatProvider> interface has a single member, <xref:System.IFormatProvider.GetFormat%2A>, which is responsible for returning the object that provides formatting information.</span></span> <span data-ttu-id="7ec08-1722">.NET 具有三种 <xref:System.IFormatProvider> 实现，它们提供区域性特定的格式设置：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1722">.NET has three <xref:System.IFormatProvider> implementations that provide culture-specific formatting:</span></span>

- <span data-ttu-id="7ec08-1723"><xref:System.Globalization.CultureInfo>.</span><span class="sxs-lookup"><span data-stu-id="7ec08-1723"><xref:System.Globalization.CultureInfo>.</span></span> <span data-ttu-id="7ec08-1724">其 <xref:System.Globalization.CultureInfo.GetFormat%2A> 方法返回一个特定于区域性的 <xref:System.Globalization.NumberFormatInfo> 对象，用于设置数值的格式，以及 <xref:System.Globalization.DateTimeFormatInfo> 用于设置日期和时间值格式的区域性特定的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1724">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> object for formatting numeric values and a culture-specific <xref:System.Globalization.DateTimeFormatInfo> object for formatting date and time values.</span></span>

- <span data-ttu-id="7ec08-1725"><xref:System.Globalization.DateTimeFormatInfo>，它用于日期和时间值的区域性特定格式设置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1725"><xref:System.Globalization.DateTimeFormatInfo>, which is used for culture-specific formatting of date and time values.</span></span> <span data-ttu-id="7ec08-1726">其 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> 方法返回自身。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1726">Its <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> method returns itself.</span></span>

- <span data-ttu-id="7ec08-1727"><xref:System.Globalization.NumberFormatInfo>，它用于指定数值的区域性特定格式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1727"><xref:System.Globalization.NumberFormatInfo>, which is used for culture-specific formatting of numeric values.</span></span> <span data-ttu-id="7ec08-1728">其 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 属性返回自身。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1728">Its <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> property returns itself.</span></span>

<a name="Format_Custom"></a>
## <a name="custom-formatting-operations"></a><span data-ttu-id="7ec08-1729">自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="7ec08-1729">Custom formatting operations</span></span>
 <span data-ttu-id="7ec08-1730">您还可以调用 <xref:System.String.Format%2A> 具有类型的参数的方法的任何重载 `provider` <xref:System.IFormatProvider> 来执行自定义格式设置操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1730">You can also call the any of the overloads of the <xref:System.String.Format%2A> method that have a `provider` parameter of type <xref:System.IFormatProvider> to perform custom formatting operations.</span></span> <span data-ttu-id="7ec08-1731">例如，可以将整数的格式设置为标识号或电话号码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1731">For example, you could format an integer as an identification number or as a telephone number.</span></span> <span data-ttu-id="7ec08-1732">若要执行自定义格式设置，你 `provider` 的参数必须实现 <xref:System.IFormatProvider> 和 <xref:System.ICustomFormatter> 接口。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1732">To perform custom formatting, your `provider` argument must implement both the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces.</span></span> <span data-ttu-id="7ec08-1733">当向 <xref:System.String.Format%2A> 方法传递 <xref:System.ICustomFormatter> 实现作为 `provider` 参数时， <xref:System.String.Format%2A> 方法将调用其   <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 实现并请求类型的对象 <xref:System.ICustomFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1733">When the <xref:System.String.Format%2A> method is passed an <xref:System.ICustomFormatter> implementation as the `provider` argument, the <xref:System.String.Format%2A> method calls its   <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation and requests an object of type <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="7ec08-1734">然后，它调用返回的 <xref:System.ICustomFormatter> 对象的 <xref:System.ICustomFormatter.Format%2A> 方法，以设置传递给它的复合字符串中的每个格式项的格式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1734">It then calls the returned <xref:System.ICustomFormatter> object's <xref:System.ICustomFormatter.Format%2A> method to format each format item in the composite string passed to it.</span></span>

 <span data-ttu-id="7ec08-1735">有关提供自定义格式设置解决方案的详细信息，请参阅 [如何：定义和使用自定义数值格式提供程序](/dotnet/standard/base-types/how-to-define-and-use-custom-numeric-format-providers) 和 <xref:System.ICustomFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1735">For more information about providing custom formatting solutions, see [How to: Define and Use Custom Numeric Format Providers](/dotnet/standard/base-types/how-to-define-and-use-custom-numeric-format-providers) and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="7ec08-1736">有关将整数转换为格式化自定义数字的示例，请参阅 [示例：自定义格式设置操作](#Format6_Example)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1736">For an example that converts integers to formatted custom numbers, see [Example: A custom formatting operation](#Format6_Example).</span></span> <span data-ttu-id="7ec08-1737">有关将无符号字节转换为罗马数字的示例，请参阅 [示例：截获提供程序和罗马数字格式化程序](#Format7_Example)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1737">For an example that converts unsigned bytes to Roman numerals, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>

<a name="Format6_Example"></a>
### <a name="example-a-custom-formatting-operation"></a><span data-ttu-id="7ec08-1738">示例：自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="7ec08-1738">Example: A custom formatting operation</span></span>
 <span data-ttu-id="7ec08-1739">此示例定义格式提供程序，该提供程序将整数值的格式设置为 x-xxxxx-xx 形式的客户帐户号。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1739">This example defines a format provider that formats an integer value as a customer account number in the form x-xxxxx-xx.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample2.cpp" id="Snippet2":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/FormatExample2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/FormatExample2.vb" id="Snippet2":::

<a name="Format7_Example"></a>
### <a name="example-an-intercept-provider-and-roman-numeral-formatter"></a><span data-ttu-id="7ec08-1740">示例：截距提供程序和罗马数字格式化程序</span><span class="sxs-lookup"><span data-stu-id="7ec08-1740">Example: An intercept provider and Roman numeral formatter</span></span>
 <span data-ttu-id="7ec08-1741">此示例定义了一个自定义格式提供程序，该提供程序实现 <xref:System.ICustomFormatter> 和 <xref:System.IFormatProvider> 接口以执行两项操作：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1741">This example defines a custom format provider that implements the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces to do two things:</span></span>

- <span data-ttu-id="7ec08-1742">它将显示传递到其实现的参数 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1742">It displays the parameters passed to its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="7ec08-1743">这使我们能够查看方法将哪些参数 <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> 传递到其尝试设置格式的每个对象的自定义格式设置实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1743">This enables us to see what parameters the <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> method is passing to the custom formatting implementation for each object that it tries to format.</span></span> <span data-ttu-id="7ec08-1744">调试应用程序时，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1744">This can be useful when you're debugging your application.</span></span>

- <span data-ttu-id="7ec08-1745">如果要设置格式的对象是要使用 "R" 标准格式字符串设置格式的无符号字节值，则自定义格式化程序将数值的格式设置为罗马数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1745">If the object to be formatted is an unsigned byte value that is to be formatted by using the "R" standard format string, the custom formatter formats the numeric value as a Roman numeral.</span></span>

 [!code-cpp[System.String.Format#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/interceptor2.cpp#11)]
 [!code-csharp[System.String.Format#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/interceptor2.cs#11)]
 [!code-vb[System.String.Format#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/interceptor2.vb#11)]

<a name="QA"></a>
## <a name="stringformat-q--a"></a><span data-ttu-id="7ec08-1746">字符串格式 Q &</span><span class="sxs-lookup"><span data-stu-id="7ec08-1746">String.Format Q & A</span></span>

### <a name="why-do-you-recommend-string-interpolation-over-calls-to-the-stringformat-method"></a><span data-ttu-id="7ec08-1747">为什么建议通过调用方法来插入字符串 `String.Format` ？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1747">Why do you recommend string interpolation over calls to the `String.Format` method?</span></span>

<span data-ttu-id="7ec08-1748">字符串内插为：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1748">String interpolation is:</span></span>

- <span data-ttu-id="7ec08-1749">更灵活。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1749">More flexible.</span></span> <span data-ttu-id="7ec08-1750">它可用于任何字符串，无需调用支持复合格式设置的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1750">It can be used in any string without requiring a call to a method that supports composite formatting.</span></span> <span data-ttu-id="7ec08-1751">否则，必须调用 <xref:System.String.Format%2A> 方法或支持复合格式设置的其他方法，如 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 或 <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1751">Otherwise, you have to call the <xref:System.String.Format%2A> method or another method that supports composite formatting, such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>.</span></span>

- <span data-ttu-id="7ec08-1752">可读性更强。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1752">More readable.</span></span> <span data-ttu-id="7ec08-1753">由于插入到字符串中的表达式出现在内插表达式中（而不是自变量列表中），因此，内插字符串的代码和读取更为容易。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1753">Because the expression to insert into a string appears in the interpolated expression rather than in a argument list, interpolated strings are far easier to code and to read.</span></span> <span data-ttu-id="7ec08-1754">由于其可读性更高，内插字符串不仅可以替换对复合格式方法的调用，还可以在字符串串联操作中使用，以生成更简洁简洁的代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1754">Because of their greater readability, interpolated strings can replace not only calls to composite format methods, but they can also be used in string concatenation operations to produce more concise, clearer code.</span></span>

<span data-ttu-id="7ec08-1755">下面两个代码示例的比较说明了经营字符串连接和对复合格式设置方法的调用的内插字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1755">A comparison of the following two code examples illustrates the superiority of interpolated strings over string concatenation and calls to composite formatting methods.</span></span> <span data-ttu-id="7ec08-1756">在下面的示例中，使用多个字符串串联操作会生成详细的代码和难于阅读的代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1756">The use of multiple string concatenation operations in the following example produces verbose and hard-to-read code.</span></span>

[!code-csharp[non-interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated1.cs#QAInterpolated)]
[!code-vb[non-interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated1.vb)]

<span data-ttu-id="7ec08-1757">与此相反，在下面的示例中使用内插字符串会生成比字符串串联语句更清晰、更简洁的代码，并对 <xref:System.String.Format%2A> 上一示例中的方法进行调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1757">In contrast, the use of interpolated strings in the following example produce much clearer, more concise code than the string concatenation statement and the call to the <xref:System.String.Format%2A> method in the previous example.</span></span>

[!code-csharp[interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated2.cs#QAInterpolated2)]
[!code-vb[interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated2.vb)]

### <a name="where-can-i-find-a-list-of-the-predefined-format-strings-that-can-be-used-with-format-items"></a><span data-ttu-id="7ec08-1758">在哪里可以找到可用于格式项的预定义格式字符串列表？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1758">Where can I find a list of the predefined format strings that can be used with format items?</span></span>

- <span data-ttu-id="7ec08-1759">对于所有整型和浮点类型，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1759">For all integral and floating-point types, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>

- <span data-ttu-id="7ec08-1760">对于日期和时间值，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1760">For date and time values, see [Standard Date and Time Format Strings](/dotnet/standard/base-types/standard-date-and-time-format-strings) and [Custom Date and Time Format Strings](/dotnet/standard/base-types/custom-date-and-time-format-strings).</span></span>

- <span data-ttu-id="7ec08-1761">对于枚举值，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1761">For enumeration values, see [Enumeration Format Strings](/dotnet/standard/base-types/enumeration-format-strings).</span></span>

- <span data-ttu-id="7ec08-1762">有关 <xref:System.TimeSpan> 值，请参阅  [标准 Timespan 格式字符串](/dotnet/standard/base-types/standard-timespan-format-strings) 和 [自定义 timespan 格式字符串](/dotnet/standard/base-types/custom-timespan-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1762">For <xref:System.TimeSpan> values, see  [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).</span></span>

- <span data-ttu-id="7ec08-1763">有关 <xref:System.Guid> 值，请参阅引用页的 "备注" 部分 <xref:System.Guid.ToString(System.String)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1763">For <xref:System.Guid> values, see the Remarks section of the <xref:System.Guid.ToString(System.String)?displayProperty=nameWithType> reference page.</span></span>

### <a name="how-do-i-control-the-alignment-of-the-result-strings-that-replace-format-items"></a><span data-ttu-id="7ec08-1764">如何实现控制替换格式项的结果字符串的对齐方式吗？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1764">How do I control the alignment of the result strings that replace format items?</span></span>
 <span data-ttu-id="7ec08-1765">格式项的一般语法为：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1765">The general syntax of a format item is:</span></span>

```
{index[,alignment][: formatString]}
```

 <span data-ttu-id="7ec08-1766">其中， *对齐方式* 是一个定义字段宽度的带符号整数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1766">where *alignment* is a signed integer that defines the field width.</span></span> <span data-ttu-id="7ec08-1767">如果此值为负数，则字段中的文本为左对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1767">If this value is negative, text in the field is left-aligned.</span></span> <span data-ttu-id="7ec08-1768">如果为正数，则文本右对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1768">If it is positive, text is right-aligned.</span></span>

### <a name="how-do-i-control-the-number-of-digits-after-the-decimal-separator"></a><span data-ttu-id="7ec08-1769">如何实现控制小数点分隔符后的位数？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1769">How do I control the number of digits after the decimal separator?</span></span>
 <span data-ttu-id="7ec08-1770">除 "D" (之外的所有 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) （仅适用于整数) "G"、"R" 和 "X"）都允许使用精度说明符定义结果字符串中的小数位数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1770">All [standard numeric format strings](/dotnet/standard/base-types/standard-numeric-format-strings) except "D" (which is used with integers only), "G", "R", and "X" allow a precision specifier that defines the number of decimal digits in the result string.</span></span> <span data-ttu-id="7ec08-1771">下面的示例使用标准数字格式字符串来控制结果字符串中的小数位数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1771">The following example uses standard numeric format strings to control the number of decimal digits in the result string.</span></span>

 [!code-csharp[System.String.Format#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa26.cs#26)]
 [!code-vb[System.String.Format#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa26.vb#26)]

 <span data-ttu-id="7ec08-1772">如果使用的是 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)，请使用 "0" 格式说明符控制结果字符串中的小数位数，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1772">If you're using a [custom numeric format string](/dotnet/standard/base-types/custom-numeric-format-strings), use the "0" format specifier to control the number of decimal digits in the result string, as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Format#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa27.cs#27)]
 [!code-vb[System.String.Format#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa27.vb#27)]

### <a name="how-do-i-control-the-number-of-integral-digits"></a><span data-ttu-id="7ec08-1773">如何实现控制整数位数？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1773">How do I control the number of integral digits?</span></span>
 <span data-ttu-id="7ec08-1774">默认情况下，格式设置操作仅显示非零整数位数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1774">By default, formatting operations only display non-zero integral digits.</span></span> <span data-ttu-id="7ec08-1775">如果要设置整数格式，则可以使用带有 "D" 和 "X" 标准格式字符串的精度说明符来控制数字的位数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1775">If you are formatting integers, you can use a precision specifier with the "D" and "X" standard format strings to control the number of digits.</span></span>

 [!code-csharp-interactive[System.String.Format#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa29.cs#29)]
 [!code-vb[System.String.Format#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa29.vb#29)]

 <span data-ttu-id="7ec08-1776">可以通过使用 "0" [自定义数值格式说明符](/dotnet/standard/base-types/custom-numeric-format-strings)，使用前导零填充整数或浮点数，以生成具有指定数量整数位数的结果字符串，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1776">You can pad an integer or floating-point number with leading zeros to produce a result string with a specified number of integral digits by using the "0" [custom numeric format specifier](/dotnet/standard/base-types/custom-numeric-format-strings), as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Format#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa28.cs#28)]
 [!code-vb[System.String.Format#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa28.vb#28)]

### <a name="how-many-items-can-i-include-in-the-format-list"></a><span data-ttu-id="7ec08-1777">可以在 "格式" 列表中包含多少项？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1777">How many items can I include in the format list?</span></span>
 <span data-ttu-id="7ec08-1778">没有实际限制。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1778">There is no practical limit.</span></span> <span data-ttu-id="7ec08-1779">方法的第二个参数 <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> 使用特性进行标记 <xref:System.ParamArrayAttribute> ，这允许您将分隔的列表或对象数组作为格式列表包括在内。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1779">The second parameter of the <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> method is tagged with the <xref:System.ParamArrayAttribute> attribute, which allows you to include either a delimited list or an object array as your format list.</span></span>

<a name="braces"></a>
### <a name="how-do-i-include-literal-braces--and--in-the-result-string"></a><span data-ttu-id="7ec08-1780">如何实现在结果字符串中包含 "{" 和 "}" ( 文本大括号 ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-1780">How do I include literal braces ("{" and "}") in the result string?</span></span>
 <span data-ttu-id="7ec08-1781">例如，如何防止下面的方法调用引发 <xref:System.FormatException> 异常？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1781">For example, how do you prevent the following method call from throwing a <xref:System.FormatException> exception?</span></span>

 [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
 [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]

 <span data-ttu-id="7ec08-1782">单个左大括号或右大括号始终解释为格式项的开头或结尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1782">A single opening or closing brace is always interpreted as the beginning or end of a format item.</span></span> <span data-ttu-id="7ec08-1783">若要按原义解释，则必须对其进行转义。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1783">To be interpreted literally, it must be escaped.</span></span> <span data-ttu-id="7ec08-1784">通过添加另一个大括号 ( "{{" 和 "}}" 而不是 "{" 和 "}" ) 来转义大括号，如以下方法调用所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1784">You escape a brace by adding another brace ("{{" and "}}" instead of "{" and "}"), as in the following method call:</span></span>

 [!code-csharp-interactive[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
 [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]

 <span data-ttu-id="7ec08-1785">不过，甚至可以轻松地误解转义大括号。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1785">However, even escaped braces are easily misinterpreted.</span></span> <span data-ttu-id="7ec08-1786">建议在格式列表中包含大括号，并使用格式项将它们插入到结果字符串中，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1786">We recommend that you include braces in the format list and use format items to insert them in the result string, as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Format#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#25)]
 [!code-vb[System.String.Format#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#25)]

### <a name="why-does-my-call-to-the-stringformat-method-throw-a-formatexception"></a><span data-ttu-id="7ec08-1787">为什么调用字符串。 Format 方法会引发 FormatException？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1787">Why does my call to the String.Format method throw a FormatException?</span></span>
 <span data-ttu-id="7ec08-1788">最常见的原因是，格式项的索引不与 "格式" 列表中的对象相对应。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1788">The most common cause of the exception is that the index of a format item doesn't correspond to an object in the format list.</span></span> <span data-ttu-id="7ec08-1789">通常，这表示您已 misnumbered 格式项的索引，或者您忘记在 "格式" 列表中包含一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1789">Usually this indicates that you've misnumbered the indexes of format items or you've forgotten to include an object in the format list.</span></span> <span data-ttu-id="7ec08-1790">尝试包含非转义的左大括号或右大括号会引发 <xref:System.FormatException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1790">Attempting to include an unescaped left or right brace character also throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="7ec08-1791">偶尔，异常是由键入错误引起的;例如，典型的错误是错误地键入了 "[" (左括号) 而不是 "{" (左大括号) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1791">Occasionally, the exception is the result of a typo; for example, a typical mistake is to mistype "[" (the left bracket) instead of "{" (the left brace).</span></span>

### <a name="if-the-formatsystemiformatprovidersystemstringsystemobject-method-supports-parameter-arrays-why-does-my-code-throw-an-exception-when-i-use-an-array"></a><span data-ttu-id="7ec08-1792">如果 (IFormatProvider，System.string，system.object [] ) 方法的格式支持参数数组，则我的代码在使用数组时为什么会引发异常？</span><span class="sxs-lookup"><span data-stu-id="7ec08-1792">If the Format(System.IFormatProvider,System.String,System.Object[]) method supports parameter arrays, why does my code throw an exception when I use an array?</span></span>
 <span data-ttu-id="7ec08-1793">例如，以下代码将引发 <xref:System.FormatException> 异常：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1793">For example, the following code throws a <xref:System.FormatException> exception:</span></span>

 [!code-csharp[System.String.Format#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa1.cs#21)]
 [!code-vb[System.String.Format#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa1.vb#21)]

 <span data-ttu-id="7ec08-1794">这是编译器重载决策的问题。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1794">This is a problem of compiler overload resolution.</span></span> <span data-ttu-id="7ec08-1795">由于编译器无法将整数数组转换为对象数组，因此它将整数数组视为单个参数，因此它将调用 <xref:System.String.Format(System.String%2CSystem.Object)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1795">Because the compiler cannot convert an array of integers to an object array, it treats the integer array as a single argument, so it calls the <xref:System.String.Format(System.String%2CSystem.Object)> method.</span></span> <span data-ttu-id="7ec08-1796">引发此异常的原因是存在四个格式项，但在 "格式" 列表中只有一个项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1796">The exception is thrown because there are four format items but only a single item in the format list.</span></span>

 <span data-ttu-id="7ec08-1797">因为 Visual Basic 和 c # 都不能将整数数组转换为对象数组，所以必须在调用方法之前自行执行转换 <xref:System.String.Format(System.String%2CSystem.Object%5B%5D)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1797">Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the <xref:System.String.Format(System.String%2CSystem.Object%5B%5D)> method.</span></span> <span data-ttu-id="7ec08-1798">以下示例提供了一个实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1798">The following example provides one implementation.</span></span>

 [!code-csharp-interactive[System.String.Format#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa2.cs#22)]
 [!code-vb[System.String.Format#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa2.vb#22)]

## Examples

<span data-ttu-id="7ec08-1799">调用方法的多 <xref:System.String.Format%2A> 个示例贯穿本文的 " [备注](#remarks-top) " 部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1799">Numerous examples that call the <xref:System.String.Format%2A> method are interspersed through the [Remarks](#remarks-top) section of this article.</span></span>

<span data-ttu-id="7ec08-1800">你还可以下载一组完整的 `String.Format` 示例，其中包括 [适用于 c # 的 .net Core 项目](https://docs.microsoft.com/samples/dotnet/samples/string-format/)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1800">You can also download a complete set of `String.Format` examples, which are included a [.NET Core project for C#](https://docs.microsoft.com/samples/dotnet/samples/string-format/).</span></span>

<span data-ttu-id="7ec08-1801">下面是本文中包含的一些示例：</span><span class="sxs-lookup"><span data-stu-id="7ec08-1801">The following are some of the examples included in the article:</span></span>

### <a name="create-a-format-string"></a><span data-ttu-id="7ec08-1802">创建格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1802">Create a format string</span></span>

<span data-ttu-id="7ec08-1803">[插入字符串](#insert-a-string)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1803">[Inserting a string](#insert-a-string)</span></span>\
<span data-ttu-id="7ec08-1804">[格式项](#the-format-item)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1804">[The format item](#the-format-item)</span></span>\
[<span data-ttu-id="7ec08-1805">设置具有相同索引的项的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1805">Format items that have the same index</span></span>](#format-items-that-have-the-same-index)

### <a name="control-formatted-output"></a><span data-ttu-id="7ec08-1806">控制格式化输出</span><span class="sxs-lookup"><span data-stu-id="7ec08-1806">Control formatted output</span></span>

<span data-ttu-id="7ec08-1807">[控制格式设置](#control-formatting)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1807">[Controlling formatting](#control-formatting)</span></span>\
<span data-ttu-id="7ec08-1808">[控制间距](#control-spacing)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1808">[Controlling spacing](#control-spacing)</span></span>\
<span data-ttu-id="7ec08-1809">[控制对齐方式](#control-alignment)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1809">[Controlling alignment](#control-alignment)</span></span>\
<span data-ttu-id="7ec08-1810">[控制整数位数](#how-do-i-control-the-number-of-integral-digits)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1810">[Controlling the number of integral digits](#how-do-i-control-the-number-of-integral-digits)</span></span>\
<span data-ttu-id="7ec08-1811">[控制小数点分隔符后的位数](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1811">[Controlling the number of digits after the decimal separator](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)</span></span>\
[<span data-ttu-id="7ec08-1812">在结果字符串中包含字面大括号</span><span class="sxs-lookup"><span data-stu-id="7ec08-1812">Including literal braces in a result string</span></span>](#braces)

### <a name="make-format-strings-culture-sensitive"></a><span data-ttu-id="7ec08-1813">使格式字符串区分区域性</span><span class="sxs-lookup"><span data-stu-id="7ec08-1813">Make format strings culture-sensitive</span></span>

[<span data-ttu-id="7ec08-1814">区分区域性的格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1814">Culture-sensitive formatting</span></span>](#culture-sensitive-formatting)

### <a name="customize-the-formatting-operation"></a><span data-ttu-id="7ec08-1815">自定义格式设置操作</span><span class="sxs-lookup"><span data-stu-id="7ec08-1815">Customize the formatting operation</span></span>

<span data-ttu-id="7ec08-1816">[自定义格式设置操作](#example-a-custom-formatting-operation)</span><span class="sxs-lookup"><span data-stu-id="7ec08-1816">[A custom formatting operation](#example-a-custom-formatting-operation)</span></span>\
[<span data-ttu-id="7ec08-1817">截距提供程序和罗马数字格式化程序</span><span class="sxs-lookup"><span data-stu-id="7ec08-1817">An intercept provider and Roman numeral formatter</span></span>](#example-an-intercept-provider-and-roman-numeral-formatter)

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-1818">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1818">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="7ec08-1819">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1819">Composite Formatting</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings"><span data-ttu-id="7ec08-1820">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1820">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings"><span data-ttu-id="7ec08-1821">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1821">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="7ec08-1822">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1822">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="7ec08-1823">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1823">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings"><span data-ttu-id="7ec08-1824">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1824">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings"><span data-ttu-id="7ec08-1825">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1825">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/enumeration-format-strings"><span data-ttu-id="7ec08-1826">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1826">Enumeration Format Strings</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj -&gt; string" Usage="System.string.Format (format, arg0)" />
      <MemberSignature Language="C#" Value="public static string Format (string format, object? arg0);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="7ec08-1827">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1827">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="arg0"><span data-ttu-id="7ec08-1828">要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1828">The object to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1829">将字符串中的一个或多个格式项替换为指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1829">Replaces one or more format items in a string with the string representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1830"><paramref name="format" /> 的副本，其中的任何格式项均替换为 <paramref name="arg0" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1830">A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1831">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将表达式的值转换为其字符串表示形式，并将该表示形式嵌入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1831">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-a-single-argument"></a><span data-ttu-id="7ec08-1832">示例：设置单个参数的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1832">Example: Formatting a single argument</span></span>

 <span data-ttu-id="7ec08-1833">下面的示例使用 <xref:System.String.Format(System.String%2CSystem.Object)> 方法在字符串中间嵌入单个年龄。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1833">The following example uses the <xref:System.String.Format(System.String%2CSystem.Object)> method to embed an individual's age in the middle of a string.</span></span>

 [!code-cpp[System.String.Format#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format7.cpp#7)]
 [!code-csharp-interactive[System.String.Format#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format7.cs#7)]
 [!code-vb[System.String.Format#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format7.vb#7)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1834"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1834"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1835"><paramref name="format" /> 中的格式项无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1835">The format item in <paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1836">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1836">-or-</span></span>

<span data-ttu-id="7ec08-1837">格式项的索引不为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1837">The index of a format item is not zero.</span></span></exception>
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-1838">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1838">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="7ec08-1839">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1839">Composite Formatting</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings"><span data-ttu-id="7ec08-1840">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1840">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings"><span data-ttu-id="7ec08-1841">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1841">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="7ec08-1842">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1842">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="7ec08-1843">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1843">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings"><span data-ttu-id="7ec08-1844">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1844">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings"><span data-ttu-id="7ec08-1845">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1845">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/enumeration-format-strings"><span data-ttu-id="7ec08-1846">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1846">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, params object[] args);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj[] -&gt; string" Usage="System.string.Format (format, args)" />
      <MemberSignature Language="C#" Value="public static string Format (string format, params object?[] args);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="7ec08-1847">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1847">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="args"><span data-ttu-id="7ec08-1848">一个对象数组，其中包含零个或多个要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1848">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1849">将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1849">Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1850"><paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1850">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1851">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将4个或更多表达式的值转换为它们的字符串表示形式，并将这些表示形式嵌入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1851">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert the value of four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="7ec08-1852">由于 `args` 参数是用特性标记的 <xref:System.ParamArrayAttribute?displayProperty=nameWithType> ，因此可以将对象作为单个参数或数组传递给方法 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1852">Since the `args` parameter is marked with the <xref:System.ParamArrayAttribute?displayProperty=nameWithType> attribute, you can pass the objects to the method as individual arguments or as an <xref:System.Object> array.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-format-more-than-three-arguments"></a><span data-ttu-id="7ec08-1853">示例：格式化三个以上的参数</span><span class="sxs-lookup"><span data-stu-id="7ec08-1853">Example: Format more than three arguments</span></span>

 <span data-ttu-id="7ec08-1854">此示例将创建一个字符串，其中包含特定日期的高温和低温度数据。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1854">This example creates a string that contains data on the high and low temperature on a particular date.</span></span> <span data-ttu-id="7ec08-1855">复合格式字符串在 c # 示例中有五个格式项，在 Visual Basic 示例中有六个格式项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1855">The composite format string has five format items in the C# example and six in the Visual Basic example.</span></span> <span data-ttu-id="7ec08-1856">两个格式项定义其对应值的字符串表示形式的宽度，第一个格式项还包括标准日期和时间格式字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1856">Two of the format items define the width of their corresponding value's string representation, and the first format item also includes a standard date and time format string.</span></span>

 [!code-cpp[System.String.Format#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format5.cpp#5)]
 [!code-csharp[System.String.Format#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format5.cs#5)]
 [!code-vb[System.String.Format#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format5.vb#5)]

 <span data-ttu-id="7ec08-1857">还可以传递要格式化为数组而不是参数列表的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1857">You can also pass the objects to be formatted as an array rather than as an argument list.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format_paramarray1.cpp" id="Snippet10":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format_paramarray1.cs" interactive="try-dotnet" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format_paramarray1.vb" id="Snippet10":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1858"><paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1858"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1859"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1859"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1860">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1860">-or-</span></span>

<span data-ttu-id="7ec08-1861">格式项的索引小于零，或者大于或等于 <paramref name="args" /> 数组的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1861">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-1862">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1862">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="7ec08-1863">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1863">Composite Formatting</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings"><span data-ttu-id="7ec08-1864">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1864">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings"><span data-ttu-id="7ec08-1865">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1865">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="7ec08-1866">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1866">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="7ec08-1867">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1867">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings"><span data-ttu-id="7ec08-1868">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1868">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings"><span data-ttu-id="7ec08-1869">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1869">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/enumeration-format-strings"><span data-ttu-id="7ec08-1870">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1870">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj -&gt; string" Usage="System.string.Format (provider, format, arg0)" />
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider? provider, string format, object? arg0);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-1871">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1871">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="7ec08-1872">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1872">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="arg0"><span data-ttu-id="7ec08-1873">要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1873">The object to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1874">将指定字符串中的一个或多个格式项替换为对应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1874">Replaces the format item or items in a specified string with the string representation of the corresponding object.</span></span> <span data-ttu-id="7ec08-1875">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1875">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1876"><paramref name="format" /> 的副本，其中的一个或多个格式项已替换为 <paramref name="arg0" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1876">A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1877">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将表达式的值转换为其字符串表示形式，并将该表示形式嵌入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1877">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> <span data-ttu-id="7ec08-1878">在执行转换时，方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1878">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="7ec08-1879">方法 `arg0` 通过调用其 tostring **(IFormatProvider)** 方法转换为其字符串表示形式; 如果对象的相应格式项包含格式字符串，则通过调用其 **Tostring (string，IFormatProvider)** 方法来转换为字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1879">The method converts `arg0` to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="7ec08-1880">如果这些方法不存在，它将调用对象的无参数 **ToString** 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1880">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1881"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1881"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1882"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1882"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1883">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1883">-or-</span></span>

<span data-ttu-id="7ec08-1884">格式项的索引不为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1884">The index of a format item is not zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, params object[] args);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj[] -&gt; string" Usage="System.string.Format (provider, format, args)" />
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider? provider, string format, params object?[] args);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-1885">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1885">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="7ec08-1886">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1886">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="args"><span data-ttu-id="7ec08-1887">一个对象数组，其中包含零个或多个要设置格式的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1887">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1888">将字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1888">Replaces the format items in a string with the string representations of corresponding objects in a specified array.</span></span> <span data-ttu-id="7ec08-1889">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1889">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1890"><paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1890">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1891">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将4个或更多表达式转换为其字符串表示形式，并将这些表示形式嵌入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1891">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="7ec08-1892">在执行转换时，方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1892">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="7ec08-1893">方法通过调用其 tostring <xref:System.Object> **(IFormatProvider)** 方法来将每个参数转换为其字符串表示形式; 如果对象的相应格式项包含格式字符串，则通过调用其 **Tostring (string，IFormatProvider)** 方法来将其转换为字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1893">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="7ec08-1894">如果这些方法不存在，它将调用对象的无参数 **ToString** 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1894">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

<a name="culture-sensitive-formatting" />

### <a name="example-culture-sensitive-formatting"></a><span data-ttu-id="7ec08-1895">示例：区分区域性的格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1895">Example: Culture-sensitive formatting</span></span>

 <span data-ttu-id="7ec08-1896">此示例使用 <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> 方法通过使用几个不同的区域性显示某些日期和时间值的字符串表示形式和数值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1896">This example uses the <xref:System.String.Format(System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D)> method to display the string representation of some date and time values and numeric values by using several different cultures.</span></span>

 [!code-csharp-interactive[System.String.Format2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example2.cs#2)]
 [!code-vb[System.String.Format2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example2.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1897"><paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1897"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1898"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1898"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1899">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1899">-or-</span></span>

<span data-ttu-id="7ec08-1900">格式项的索引小于零，或者大于或等于 <paramref name="args" /> 数组的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1900">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.ICustomFormatter" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-1901">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1901">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="7ec08-1902">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1902">Composite Formatting</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings"><span data-ttu-id="7ec08-1903">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1903">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings"><span data-ttu-id="7ec08-1904">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1904">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="7ec08-1905">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1905">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="7ec08-1906">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1906">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings"><span data-ttu-id="7ec08-1907">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1907">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings"><span data-ttu-id="7ec08-1908">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1908">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/enumeration-format-strings"><span data-ttu-id="7ec08-1909">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1909">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1)" />
      <MemberSignature Language="C#" Value="public static string Format (string format, object? arg0, object? arg1);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="7ec08-1910">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1910">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="arg0"><span data-ttu-id="7ec08-1911">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1911">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1912">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1912">The second object to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1913">将字符串中的格式项替换为两个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1913">Replaces the format items in a string with the string representation of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1914"><paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1914">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1915">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将两个表达式的值转换为它们的字符串表示形式，并将这些表示形式嵌入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1915">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert the value of two expressions to their string representations and to embed those representations in a string.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-format-two-arguments"></a><span data-ttu-id="7ec08-1916">示例：设置两个参数的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1916">Example: Format two arguments</span></span>

 <span data-ttu-id="7ec08-1917">此示例使用 <xref:System.String.Format(System.String%2CSystem.Object%2CSystem.Object)> 方法来显示通用对象中存储的时间和温度数据 <xref:System.Collections.Generic.Dictionary%602> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1917">This example uses the <xref:System.String.Format(System.String%2CSystem.Object%2CSystem.Object)> method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object.</span></span> <span data-ttu-id="7ec08-1918">请注意，尽管只有两个要设置格式的对象，但格式字符串具有三个格式项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1918">Note that the format string has three format items, although there are only two objects to format.</span></span> <span data-ttu-id="7ec08-1919">这是因为列表中的第一个对象 (日期和时间值) 由两个格式项使用：第一个格式项显示时间，第二个对象显示日期。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1919">This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.</span></span>

 [!code-cpp[System.String.Format#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample4.cpp#6)]
 [!code-csharp[System.String.Format#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatexample4.cs#6)]
 [!code-vb[System.String.Format#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatexample4.vb#6)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1920"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1920"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1921"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1921"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1922">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1922">-or-</span></span>

<span data-ttu-id="7ec08-1923">格式项的索引不为零或一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1923">The index of a format item is not zero or one.</span></span></exception>
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-1924">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1924">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="7ec08-1925">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1925">Composite Formatting</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings"><span data-ttu-id="7ec08-1926">标准日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1926">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings"><span data-ttu-id="7ec08-1927">自定义日期和时间格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1927">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-numeric-format-strings"><span data-ttu-id="7ec08-1928">标准数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1928">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-numeric-format-strings"><span data-ttu-id="7ec08-1929">自定义数字格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1929">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings"><span data-ttu-id="7ec08-1930">标准 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1930">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings"><span data-ttu-id="7ec08-1931">自定义的 TimeSpan 格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1931">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/enumeration-format-strings"><span data-ttu-id="7ec08-1932">枚举格式字符串</span><span class="sxs-lookup"><span data-stu-id="7ec08-1932">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1)" />
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider? provider, string format, object? arg0, object? arg1);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-1933">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1933">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="7ec08-1934">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1934">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="arg0"><span data-ttu-id="7ec08-1935">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1935">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1936">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1936">The second object to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1937">将字符串中的格式项替换为两个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1937">Replaces the format items in a string with the string representation of two specified objects.</span></span> <span data-ttu-id="7ec08-1938">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1938">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1939"><paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1939">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1940">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将两个表达式转换为其字符串表示形式，并将这些表示形式嵌入字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1940">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert two expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="7ec08-1941">在执行转换时，方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1941">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="7ec08-1942">方法通过调用其 tostring <xref:System.Object> **(IFormatProvider)** 方法来将每个参数转换为其字符串表示形式; 如果对象的相应格式项包含格式字符串，则通过调用其 **Tostring (string，IFormatProvider)** 方法来将其转换为字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1942">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="7ec08-1943">如果这些方法不存在，它将调用对象的无参数 **ToString** 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1943">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1944"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1944"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1945"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1945"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1946">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1946">-or-</span></span>

<span data-ttu-id="7ec08-1947">格式项的索引不为零或一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1947">The index of a format item is not zero or one.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1, object arg2);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1, arg2)" />
      <MemberSignature Language="C#" Value="public static string Format (string format, object? arg0, object? arg1, object? arg2);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="7ec08-1948">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1948">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="arg0"><span data-ttu-id="7ec08-1949">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1949">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1950">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1950">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="7ec08-1951">要设置格式的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1951">The third object to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1952">将字符串中的格式项替换为三个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1952">Replaces the format items in a string with the string representation of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1953"><paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1953">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1954">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将三个表达式的值转换为其字符串表示形式，并将这些表示形式嵌入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1954">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert the value of three expressions to their string representations and to embed those representations in a string.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-format-three-arguments"></a><span data-ttu-id="7ec08-1955">示例：设置三个参数的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1955">Example: Format three arguments</span></span>

 <span data-ttu-id="7ec08-1956">此示例使用 <xref:System.String.Format(System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object)> 方法创建一个字符串，该字符串演示 `And` 具有两个整数值的布尔运算的结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1956">This example uses the <xref:System.String.Format(System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object)> method to create a string that illustrates the result of a Boolean `And` operation with two integer values.</span></span> <span data-ttu-id="7ec08-1957">请注意，格式字符串包含六个格式项，但该方法在其参数列表中只有三个项，因为每个项都以两种不同的方式进行格式设置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1957">Note that the format string includes six format items, but the method has only three items in its parameter list, because each item is formatted in two different ways.</span></span>

 [!code-cpp[System.String.Format#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format4.cpp#4)]
 [!code-csharp-interactive[System.String.Format#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format4.cs#4)]
 [!code-vb[System.String.Format#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format4.vb#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1958"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1958"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1959"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1959"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1960">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1960">-or-</span></span>

<span data-ttu-id="7ec08-1961">格式项的索引小于零，或者大于二。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1961">The index of a format item is less than zero, or greater than two.</span></span></exception>
        <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="7ec08-1962">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="7ec08-1962">Formatting Types in .NET</span></span></related>
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting"><span data-ttu-id="7ec08-1963">复合格式设置</span><span class="sxs-lookup"><span data-stu-id="7ec08-1963">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1, arg2)" />
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider? provider, string format, object? arg0, object? arg1, object? arg2);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-1964">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1964">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="7ec08-1965">[复合格式字符串](/dotnet/standard/base-types/composite-formatting)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1965">A [composite format string](/dotnet/standard/base-types/composite-formatting).</span></span></param>
        <param name="arg0"><span data-ttu-id="7ec08-1966">要设置格式的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1966">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="7ec08-1967">要设置格式的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1967">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="7ec08-1968">要设置格式的第三个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1968">The third object to format.</span></span></param>
        <summary><span data-ttu-id="7ec08-1969">将字符串中的格式项替换为三个指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1969">Replaces the format items in a string with the string representation of three specified objects.</span></span> <span data-ttu-id="7ec08-1970">参数提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1970">An parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1971"><paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1971">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="7ec08-1972">此方法使用 [复合格式设置功能](/dotnet/standard/base-types/composite-formatting) 将三个表达式转换为其字符串表示形式，并将这些表示形式嵌入字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1972">This method uses the [composite formatting feature](/dotnet/standard/base-types/composite-formatting) to convert three expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="7ec08-1973">在执行转换时，方法使用区分区域性的格式设置或自定义格式化程序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1973">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="7ec08-1974">方法通过调用其 tostring <xref:System.Object> **(IFormatProvider)** 方法来将每个参数转换为其字符串表示形式; 如果对象的相应格式项包含格式字符串，则通过调用其 **Tostring (string，IFormatProvider)** 方法来将其转换为字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1974">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="7ec08-1975">如果这些方法不存在，它将调用对象的无参数 **ToString** 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1975">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-1976"><paramref name="format" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1976"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-1977"><paramref name="format" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1977"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="7ec08-1978">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-1978">-or-</span></span>

<span data-ttu-id="7ec08-1979">格式项的索引小于零，或者大于二。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1979">The index of a format item is less than zero, or greater than two.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public CharEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CharEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As CharEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CharEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; CharEnumerator" Usage="string.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CharEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-1980">检索一个可以循环访问此字符串中的每个字符的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1980">Retrieves an object that can iterate through the individual characters in this string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1981">枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1981">An enumerator object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!TIP]
> <span data-ttu-id="7ec08-1982">不是调用 <xref:System.String.GetEnumerator%2A> 方法来检索用于 <xref:System.CharEnumerator> 枚举字符串的对象，而应改为使用语言的迭代构造 (c # 中的 c + +/clr 和 Visual Basic) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1982">Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct (in C#, in C++/CLR, and in Visual Basic).</span></span> <span data-ttu-id="7ec08-1983">c # 中的[foreach](/dotnet/csharp/language-reference/keywords/foreach-in) ，[适用](/cpp/dotnet/for-each-in)于 c + +/clr 中的每个，[每个](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)Visual Basic) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1983">[foreach](/dotnet/csharp/language-reference/keywords/foreach-in) in C#, [for each](/cpp/dotnet/for-each-in) in C++/CLR, and [For Each](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) in Visual Basic).</span></span>

 <span data-ttu-id="7ec08-1984">此方法使您可以循环访问字符串中的单个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1984">This method enables you to iterate the individual characters in a string.</span></span> <span data-ttu-id="7ec08-1985">例如，Visual Basic `For Each` 和 c # `foreach` 语句调用此方法以返回一个 <xref:System.CharEnumerator> 对象，该对象可提供对此字符串实例中字符的只读访问。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1985">For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.</span></span>

## Examples
 <span data-ttu-id="7ec08-1986">下面的示例将循环访问多个字符串中的字符，并显示有关其各个字符的信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1986">The following example iterates the characters in several strings and displays information about their individual characters.</span></span> <span data-ttu-id="7ec08-1987">它使用语言迭代构造，而不是调用 <xref:System.String.GetEnumerator%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1987">It uses the language iteration construct rather than a call to the <xref:System.String.GetEnumerator%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetEnumerator/CPP/getenumerator.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetEnumerator/CS/getenumerator.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetEnumerator/VB/getenumerator.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="P:System.String.Chars(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="string.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-1988">返回该字符串的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1988">Returns the hash code for this string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-1989">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1989">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-1990">的行为 <xref:System.String.GetHashCode%2A> 依赖于其实现，该实现可能会从公共语言运行时的一个版本更改为另一个版本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1990">The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another.</span></span> <span data-ttu-id="7ec08-1991">导致这种情况的原因是提高的性能 <xref:System.String.GetHashCode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1991">A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="7ec08-1992">如果两个字符串对象相等，则该 <xref:System.String.GetHashCode%2A> 方法将返回相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1992">If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values.</span></span> <span data-ttu-id="7ec08-1993">但是，每个唯一字符串值没有唯一的哈希代码值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1993">However, there is not a unique hash code value for each unique string value.</span></span> <span data-ttu-id="7ec08-1994">不同的字符串可以返回相同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1994">Different strings can return the same hash code.</span></span>
>
> <span data-ttu-id="7ec08-1995">哈希代码本身不一定是稳定的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1995">The hash code itself is not guaranteed to be stable.</span></span> <span data-ttu-id="7ec08-1996">相同字符串的哈希代码可跨 .net 实现、跨 .NET 版本和跨 .NET 平台 (例如，.NET 的单个版本32位和64位) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1996">Hash codes for identical strings can differ across .NET implementations, across .NET versions, and across .NET platforms (such as 32-bit and 64-bit) for a single version of .NET.</span></span> <span data-ttu-id="7ec08-1997">在某些情况下，它们甚至不同于应用程序域。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1997">In some cases, they can even differ by application domain.</span></span> <span data-ttu-id="7ec08-1998">这意味着，同一程序的两次后续运行可能返回不同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1998">This implies that two subsequent runs of the same program may return different hash codes.</span></span>
>
> <span data-ttu-id="7ec08-1999">因此，哈希代码决不能在创建它们的应用程序域的外部使用，它们永远不应用作集合中的键字段，它们永远不会保留。</span><span class="sxs-lookup"><span data-stu-id="7ec08-1999">As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</span></span>
>
> <span data-ttu-id="7ec08-2000">最后，如果需要加密型强哈希，请不要使用哈希代码（而不是加密哈希函数返回的值）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2000">Finally, don't use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="7ec08-2001">对于加密哈希，请使用派生自 <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> 或类的类 <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2001">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>
>
> <span data-ttu-id="7ec08-2002">有关哈希代码的详细信息，请参阅 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2002">For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="7ec08-2003">在桌面应用中，你可以使用[ \<UseRandomizedStringHashAlgorithm> 元素](/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element)基于每个应用程序域生成唯一的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2003">In desktop apps, you can use the [\<UseRandomizedStringHashAlgorithm> element](/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element) to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="7ec08-2004">这可以减少冲突数，并改善使用哈希表的插入和查找的整体性能。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2004">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="7ec08-2005">下面的示例演示如何使用[ \<UseRandomizedStringHashAlgorithm> 元素](/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2005">The following example shows how to use the [\<UseRandomizedStringHashAlgorithm> element](/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element).</span></span> <span data-ttu-id="7ec08-2006">它定义一个 `DisplayString` 类，该类包含一个私有字符串常量， `s` 其值为 "This is a string"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2006">It defines a `DisplayString` class that includes a private string constant, `s`, whose value is "This is a string."</span></span> <span data-ttu-id="7ec08-2007">它还包括显示字符串值及其哈希代码的 `ShowStringHashCode` 方法以及该方法在其中执行的应用程序域的名称。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2007">It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</span></span>

 [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]
 [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]

 <span data-ttu-id="7ec08-2008">当您在未提供配置文件的情况下运行该示例时，它会显示类似下面的输出。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2008">When you run the example without supplying a configuration file, it displays output similar to the following.</span></span> <span data-ttu-id="7ec08-2009">请注意，字符串的散列码在两个应用程序域中是相同的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2009">Note that the hash codes for the string are identical in the two application domains.</span></span>

```
String 'This is a string.' in domain 'PerDomain.exe': 941BCEAC
String 'This is a string.' in domain 'NewDomain': 941BCEAC
```

 <span data-ttu-id="7ec08-2010">但是，如果将以下配置文件添加到示例目录，然后运行该示例，则同一个字符串的哈希代码将通过应用程序域进行区分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2010">However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.</span></span>

```xml
<?xml version ="1.0"?>
<configuration>
   <runtime>
      <UseRandomizedStringHashAlgorithm enabled="1" />
   </runtime>
</configuration>
```

 <span data-ttu-id="7ec08-2011">存在配置文件时，示例会显示以下输出：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2011">When the configuration file is present, the example displays the following output:</span></span>

```
String 'This is a string.' in domain 'PerDomain.exe': 5435776D
String 'This is a string.' in domain 'NewDomain': 75CC8236
```

> [!IMPORTANT]
> <span data-ttu-id="7ec08-2012">哈希代码用于有效地从哈希表中插入和检索密钥对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2012">Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.</span></span> <span data-ttu-id="7ec08-2013">但哈希代码不能唯一标识字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2013">However, hash codes don't uniquely identify strings.</span></span> <span data-ttu-id="7ec08-2014">相同的字符串具有相同的哈希代码，但公共语言运行时还可以将相同的哈希代码分配给不同的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2014">Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.</span></span> <span data-ttu-id="7ec08-2015">此外，哈希代码可根据 .NET 版本、单个版本内的平台和应用程序域的不同而不同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2015">In addition, hash codes can vary by version of .NET, by platform within a single version, and by application domain.</span></span> <span data-ttu-id="7ec08-2016">因此，不应序列化或保留哈希代码值，也不应将其用作哈希表或字典中的键。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2016">Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</span></span>

 <span data-ttu-id="7ec08-2017">有关哈希代码和方法的使用的其他信息 `GetHashCode` ，请参阅 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2017">For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>

## Examples
 <span data-ttu-id="7ec08-2018">下面的示例演示 <xref:System.String.GetHashCode%2A> 使用各种输入字符串的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2018">The following example demonstrates the <xref:System.String.GetHashCode%2A> method using various input strings.</span></span>

 [!code-cpp[system.string.gethashcode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetHashCode/CPP/gethashcode.cpp#1)]
 [!code-csharp[system.string.gethashcode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/gethashcode.cs#1)]
 [!code-vb[system.string.gethashcode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/gethashcode.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2019">返回的值 <see cref="M:System.String.GetHashCode" /> 与平台相关。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2019">The value returned by <see cref="M:System.String.GetHashCode" /> is platform-dependent.</span></span> <span data-ttu-id="7ec08-2020">它在 .NET Framework 的32位和64位版本上有所不同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2020">It differs on the 32-bit and 64-bit versions of .NET Framework.</span></span> <span data-ttu-id="7ec08-2021">它还可能在不同版本的 .NET Framework 和 .NET Core 之间有所不同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2021">It also can differ between versions of .NET Framework and .NET Core.</span></span></para></block>
        <altmember cref="M:System.Object.GetHashCode" />
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element"><span data-ttu-id="7ec08-2022">&lt;UseRandomizedStringHashAlgorithm &gt; 元素</span><span class="sxs-lookup"><span data-stu-id="7ec08-2022">&lt;UseRandomizedStringHashAlgorithm&gt; Element</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHashCode (value As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHashCode(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="static member GetHashCode : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="System.string.GetHashCode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2023">一个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2023">A read-only character span.</span></span></param>
        <summary><span data-ttu-id="7ec08-2024">返回所提供的只读字符范围的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2024">Returns the hash code for the provided read-only character span.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2025">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2025">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : StringComparison -&gt; int" Usage="string.GetHashCode comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="comparisonType"><span data-ttu-id="7ec08-2026">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2026">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-2027">使用指定的规则返回此字符串的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2027">Returns the hash code for this string using the specified rules.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2028">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2028">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHashCode (value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHashCode(ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member GetHashCode : ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.string.GetHashCode (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2029">一个只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2029">A read-only character span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2030">一个枚举值，用于指定比较中要使用的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2030">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="7ec08-2031">使用指定的规则返回所提供的只读字符范围的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2031">Returns the hash code for the provided read-only character span using the specified rules.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2032">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2032">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly char GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; char ^ GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; char" Usage="string.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Readonly">
        <ReturnType>System.Char</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-5.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-2033">返回对索引 0 处字符串的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2033">Returns a reference to the element of the string at index zero.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2034">一个字符，表示对索引 0 处字符串的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2034">A character representing the reference to the element of the string at index zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-2035">`GetPinnableReference`方法返回一个可用于 <xref:System.String> 在内存中固定的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2035">The `GetPinnableReference` method returns a character that can be used for pinning a <xref:System.String> in memory.</span></span> <span data-ttu-id="7ec08-2036">需要在 <xref:System.String> fixed 语句中支持的使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2036">It is required to support the use of a <xref:System.String> within a fixed statement.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="7ec08-2037">字符串为 NULL。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2037">The string is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="string.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-2038">返回 <see cref="T:System.String" /> 类的 <see cref="T:System.TypeCode" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2038">Returns the <see cref="T:System.TypeCode" /> for the <see cref="T:System.String" /> class.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2039">枚举常数 <see cref="F:System.TypeCode.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2039">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="7ec08-2040">下面的示例显示了 <xref:System.TypeCode> 类型的枚举常数 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2040">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2041">报告指定 Unicode 字符或字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2041">Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="7ec08-2042">如果未在此实例中找到该字符或字符串，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2042">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2043">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2043">A Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-2044">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2044">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2045">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2045">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2046">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2046">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2047">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2047">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2048">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2048">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2049">下面的示例演示如何 <xref:System.String> 使用方法搜索字符 <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2049">The following example demonstrates how you can search a <xref:System.String> for a character using the <xref:System.String.IndexOf%2A> method.</span></span>

 [!code-cpp[System.String.IndexOf#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexof_c.cpp#5)]
 [!code-csharp-interactive[System.String.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexof_c.cs#5)]
 [!code-vb[System.String.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexof_c.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2050">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2050">The string to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-2051">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2051">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2052">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2052">The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="7ec08-2053">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2053">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2054">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2054">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2055">此方法使用当前区域性执行 (区分大小写和区分区域性的) 搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2055">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="7ec08-2056">搜索从该实例的第一个字符位置开始，并继续到最后一个字符的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2056">The search begins at the first character position of this instance and continues until the last character position.</span></span>

 <span data-ttu-id="7ec08-2057">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2057">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2058">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2058">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2059">如果 `value` 仅包含一个或多个可忽略字符，则该 <xref:System.String.IndexOf(System.String)> 方法将始终返回 0 (零) ，以指示在当前实例的开头处找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2059">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf(System.String)> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span> <span data-ttu-id="7ec08-2060">在下面的示例中， <xref:System.String.IndexOf(System.String)> 方法用于查找 (软连字符的三个子字符串 (U + 00AD) ，软连字符后跟 "n"，软连字符后跟两个字符串中的 "m" ) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2060">In the following example, the <xref:System.String.IndexOf(System.String)> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="7ec08-2061">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2061">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="7ec08-2062">如果该示例在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则在每种情况下，因为软连字符是可忽略字符，所以，结果与中未包含软连字符的结果相同 `value` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2062">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="7ec08-2063">仅搜索软连字符时，方法将返回 0 (零) ，以指示它已在字符串的开头找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2063">When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</span></span>

 [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]
 [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]

## Examples
 <span data-ttu-id="7ec08-2064">下面的示例在 "动物" 中搜索 "n"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2064">The following example searches for the "n" in "animal".</span></span> <span data-ttu-id="7ec08-2065">因为字符串索引从零开始，而不是从零开始，所以 <xref:System.String.IndexOf(System.String)> 方法指示 "n" 位于位置1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2065">Because string indexes begin at zero rather than one, the <xref:System.String.IndexOf(System.String)> method indicates that the "n" is at position 1.</span></span>

 [!code-cpp[System.String.IndexOf#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/simple1.cpp#12)]
 [!code-csharp-interactive[System.String.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/simple1.cs#12)]
 [!code-vb[System.String.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/simple1.vb#12)]

 <span data-ttu-id="7ec08-2066">下面的示例使用 <xref:System.String.IndexOf%2A> 方法来确定某一句子中动物名称的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2066">The following example uses the <xref:System.String.IndexOf%2A> method to determine the starting position of an animal name in a sentence.</span></span> <span data-ttu-id="7ec08-2067">然后，它将使用此位置插入描述动物的形容词。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2067">It then uses this position to insert an adjective that describes the animal into the sentence.</span></span>

 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2068"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2068"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2069">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2069">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-2070">若要使用当前区域性的比较规则查找字符串实例内子字符串的第一个索引，请使用 <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> 其参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2070">To find the first index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2071">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2071">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2072">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2072">The search starting position.</span></span></param>
        <summary><span data-ttu-id="7ec08-2073">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2073">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="7ec08-2074">该搜索从指定字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2074">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2075">如果找到该字符，则为从字符串的起始位置开始的 <paramref name="value" /> 从零开始的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2075">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2076">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2076">Index numbering starts from 0.</span></span> <span data-ttu-id="7ec08-2077">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2077">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="7ec08-2078">如果 `startIndex` 等于字符串实例的长度，则此方法返回-1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2078">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>

 <span data-ttu-id="7ec08-2079">搜索范围从 `startIndex` 到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2079">The search ranges from `startIndex` to the end of the string.</span></span>

 <span data-ttu-id="7ec08-2080">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2080">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2081">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2081">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2082">下面的示例演示 <xref:System.String.IndexOf%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2082">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>

 [!code-cpp[string.indexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof1/CPP/ixof1.cpp#1)]
 [!code-csharp-interactive[string.indexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof1/CS/ixof1.cs#1)]
 [!code-vb[string.indexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof1/VB/ixof1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2083"><paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2083"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2084">要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2084">The character to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2085">指定搜索规则的枚举值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2085">An enumeration value that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2086">报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2086">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="7ec08-2087">一个参数指定要用于指定字符的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2087">A parameter specifies the type of search to use for the specified character.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2088">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2088">The zero-based index of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-2089">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2089">Index numbering starts from zero.</span></span>

<span data-ttu-id="7ec08-2090">`comparisonType`参数是一个 <xref:System.StringComparison> 枚举成员，用于指定对参数的搜索 `value` 是使用当前还是固定的区域性，区分大小写或不区分大小写，或者使用单词或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2090">The `comparisonType` parameter is a <xref:System.StringComparison> enumeration member that specifies whether the search for the `value` argument uses the current or invariant culture, is case-sensitive or case-insensitive, or uses word or ordinal comparison rules.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2091"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2091"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2092">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2092">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2093">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2093">The search starting position.</span></span></param>
        <summary><span data-ttu-id="7ec08-2094">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2094">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="7ec08-2095">该搜索从指定字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2095">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2096">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2096">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="7ec08-2097">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2097">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2098">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2098">Index numbering starts from 0.</span></span> <span data-ttu-id="7ec08-2099">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2099">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="7ec08-2100">如果 `startIndex` 等于字符串实例的长度，则此方法返回-1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2100">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>

 <span data-ttu-id="7ec08-2101">此方法使用当前区域性执行 (区分大小写和区分区域性的) 搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2101">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="7ec08-2102">搜索从 `startIndex` 该实例的字符位置开始，并继续到最后一个字符的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2102">The search begins at the `startIndex` character position of this instance and continues until the last character position.</span></span>

 <span data-ttu-id="7ec08-2103">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2103">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2104">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2104">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2105">如果 `value` 仅包含一个或多个可忽略字符，则该 <xref:System.String.IndexOf(System.String%2CSystem.Int32)> 方法将始终返回 `startIndex` ，这是搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2105">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf(System.String%2CSystem.Int32)> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="7ec08-2106">在下面的示例中， <xref:System.String.IndexOf(System.String%2CSystem.Int32)> 方法用于查找软连字符 (U + 00AD 的位置) 后跟两个字符串中的 "m"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2106">In the following example, the <xref:System.String.IndexOf(System.String%2CSystem.Int32)> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings.</span></span> <span data-ttu-id="7ec08-2107">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2107">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="7ec08-2108">如果本示例在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则在这两种情况下，因为软连字符是可忽略字符，该方法将返回字符串中的 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2108">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string.</span></span> <span data-ttu-id="7ec08-2109">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2109">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>

 [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]
 [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]

## Examples
 <span data-ttu-id="7ec08-2110">下面的示例在目标字符串中搜索指定字符串的所有匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2110">The following example searches for all occurrences of a specified string within a target string.</span></span>

 [!code-cpp[stringindexof4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringindexof4/CPP/stringindexof4.cpp#1)]
 [!code-csharp[stringindexof4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/CS/stringindexof4.cs#1)]
 [!code-vb[stringindexof4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringindexof4/VB/stringindexof4.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2111"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2111"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2112"><paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2112"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2113">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2113">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-2114">若要通过使用当前区域性的比较规则查找特定字符位置之后发生的子字符串的第一个索引，请使用 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> 值为的参数调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2114">To find the first index of a substring that occurs after a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2115">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2115">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2116">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2116">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2117">报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2117">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="7ec08-2118">一个参数指定要用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2118">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2119">如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2119">The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="7ec08-2120">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2120">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2121">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2121">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2122">`comparisonType`参数指定 `value` 使用当前或固定区域性搜索参数，使用区分大小写或不区分大小写的搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2122">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-2123">下面的示例演示了方法的三个重载 <xref:System.String.IndexOf%2A> ，这些重载使用枚举的不同值在另一个字符串内查找字符串的第一个匹配项 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2123">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2124"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2124"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2125"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2125"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2126">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2126">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2127">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2127">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2128">如果 <paramref name="value" /> 仅包含一个或多个可忽略字符，则该 <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> 方法将始终返回 0 (零) ，以指示在当前实例的开头处找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2128">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span>

<span data-ttu-id="7ec08-2129">在下面的示例中， <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> 方法用于查找 (软连字符的三个子字符串 (U + 00AD) ，软连字符后跟 "n"，软连字符后跟两个字符串中的 "m" ) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2129">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="7ec08-2130">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2130">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="7ec08-2131">如果本示例在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，因为软连字符是可忽略的字符，所以区分区域性的搜索返回的值与在搜索字符串中未包含软连字符时返回的值相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2131">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="7ec08-2132">不过，序号搜索成功地在一个字符串中查找软连字符，并报告从第二个字符串中缺少它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2132">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>

<span data-ttu-id="7ec08-2133">[！ code-csharp[IndexOf # 26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)][！ code-vb[IndexOf # 26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2133">[!code-csharp[System.String.IndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)] [!code-vb[System.String.IndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2134">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2134">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2135">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2135">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2136">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2136">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="7ec08-2137">报告指定字符在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2137">Reports the zero-based index of the first occurrence of the specified character in this instance.</span></span> <span data-ttu-id="7ec08-2138">搜索从指定字符位置开始，并检查指定数量的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2138">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2139">如果找到该字符，则为从字符串的起始位置开始的 <paramref name="value" /> 从零开始的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2139">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2140">搜索从开始 `startIndex` ，并继续到 `startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2140">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="7ec08-2141">位于处的字符 `startIndex`  +  `count` 不包含在搜索中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2141">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="7ec08-2142">索引编号从 0 (零开始) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2142">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="7ec08-2143">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2143">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>

 <span data-ttu-id="7ec08-2144">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2144">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2145">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2145">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2146">下面的示例演示 <xref:System.String.IndexOf%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2146">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexofcii.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexofcii.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexofcii.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2147"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2147"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2148">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2148">-or-</span></span>

 <span data-ttu-id="7ec08-2149"><paramref name="startIndex" /> 大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2149"><paramref name="startIndex" /> is greater than the length of this string.</span></span>

<span data-ttu-id="7ec08-2150">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2150">-or-</span></span>

 <span data-ttu-id="7ec08-2151"><paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2151"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2152">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2152">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2153">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2153">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2154">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2154">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="7ec08-2155">报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2155">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="7ec08-2156">搜索从指定字符位置开始，并检查指定数量的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2156">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2157">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 的索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2157">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="7ec08-2158">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2158">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2159">索引编号从 0 (零开始) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2159">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="7ec08-2160">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2160">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>

 <span data-ttu-id="7ec08-2161">此方法使用当前区域性执行 (区分大小写和区分区域性的) 搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2161">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="7ec08-2162">搜索从开始 `startIndex` ，并继续到 `startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2162">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="7ec08-2163">位于处的字符 `startIndex`  +  `count` 不包含在搜索中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2163">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="7ec08-2164">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2164">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2165">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2165">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2166">如果 `value` 仅包含一个或多个可忽略字符，则该 <xref:System.String.IndexOf(System.String%2CSystem.Int32%2CSystem.Int32)> 方法将始终返回 `startIndex` ，这是搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2166">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf(System.String%2CSystem.Int32%2CSystem.Int32)> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="7ec08-2167">在下面的示例中， <xref:System.String.IndexOf(System.String%2CSystem.Int32%2CSystem.Int32)> 方法用于查找软连字符 (U + 00AD) 的位置，并在两个字符串中从第三个到第六个字符位置开始的 "m"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2167">In the following example, the <xref:System.String.IndexOf(System.String%2CSystem.Int32%2CSystem.Int32)> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="7ec08-2168">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2168">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="7ec08-2169">如果该示例在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则在这两种情况下，因为软连字符是可忽略的字符，所以当执行区分区域性的比较时，该方法将返回字符串中的 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2169">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2170">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2170">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>

 [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]
 [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]

## Examples
 <span data-ttu-id="7ec08-2171">下面的示例查找字符串 "he" 在另一个字符串的子字符串中的所有匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2171">The following example finds the index of all occurrences of the string "he" within a substring of another string.</span></span> <span data-ttu-id="7ec08-2172">请注意，必须为每个搜索迭代重新计算要搜索的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2172">Note that the number of characters to be searched must be recalculated for each search iteration.</span></span>

 [!code-cpp[string.indexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof8/CPP/ixof8.cpp#1)]
 [!code-csharp-interactive[string.indexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof8/CS/ixof8.cs#1)]
 [!code-vb[string.indexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof8/VB/ixof8.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2173"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2173"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2174"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2174"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2175">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2175">-or-</span></span>

 <span data-ttu-id="7ec08-2176"><paramref name="startIndex" /> 大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2176"><paramref name="startIndex" /> is greater than the length of this string.</span></span>

<span data-ttu-id="7ec08-2177">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2177">-or-</span></span>

 <span data-ttu-id="7ec08-2178"><paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2178"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2179">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2179">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-2180">若要使用当前区域性的比较规则来执行此操作，请使用的 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2180">To use the comparison rules of the current culture to perform this operation, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2181">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2181">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2182">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2182">The search starting position.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2183">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2183">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2184">报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2184">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="7ec08-2185">参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2185">Parameters specify the starting search position in the current string and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2186">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 参数索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2186">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="7ec08-2187">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2187">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2188">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2188">Index numbering starts from 0.</span></span> <span data-ttu-id="7ec08-2189">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2189">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="7ec08-2190">如果 `startIndex` 等于字符串实例的长度，则此方法返回-1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2190">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>

 <span data-ttu-id="7ec08-2191">`comparisonType`参数指定 `value` 使用当前或固定区域性搜索参数，使用区分大小写或不区分大小写的搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2191">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-2192">下面的示例演示了方法的三个重载 <xref:System.String.IndexOf%2A> ，这些重载使用枚举的不同值在另一个字符串内查找字符串的第一个匹配项 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2192">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2193"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2193"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2194"><paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2194"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2195"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2195"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2196">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2196">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2197">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2197">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2198">如果 <paramref name="value" /> 仅包含一个或多个可忽略字符，则该 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> 方法将始终返回 <paramref name="startIndex" /> ，这是搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2198">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>

<span data-ttu-id="7ec08-2199">在下面的示例中， <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> 方法用于查找软连字符 (U + 00AD 的位置) 后跟一个从两个字符串中的第三个字符位置开始的 "m"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2199">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings.</span></span> <span data-ttu-id="7ec08-2200">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2200">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="7ec08-2201">如果该示例在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则在这两种情况下，因为软连字符是可忽略的字符，所以当执行区分区域性的比较时，该方法将返回字符串中的 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2201">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2202">注意对于第一个字符串，包含软连字符后跟“m”，该方法无法返回该软连字符的索引，而是返回“m”的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2202">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="7ec08-2203">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2203">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="7ec08-2204">[！ code-csharp[IndexOf # 25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)][！ code-vb[IndexOf # 25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2204">[!code-csharp[System.String.IndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)] [!code-vb[System.String.IndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2205">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2205">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2206">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2206">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2207">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2207">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2208">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2208">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2209">报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2209">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="7ec08-2210">参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2210">Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2211">如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 参数索引位置；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2211">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="7ec08-2212">如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2212">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2213">索引编号从 0 (零开始) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2213">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="7ec08-2214">`startIndex` 参数可以介于 0 到字符串实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2214">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>

 <span data-ttu-id="7ec08-2215">搜索从开始 `startIndex` ，并继续到 `startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2215">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="7ec08-2216">位于处的字符 `startIndex`  +  `count` 不包含在搜索中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2216">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="7ec08-2217">`comparisonType`参数指定 `value` 使用当前或固定区域性搜索参数，使用区分大小写或不区分大小写的搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2217">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-2218">下面的示例演示了方法的三个重载 <xref:System.String.IndexOf%2A> ，这些重载使用枚举的不同值在另一个字符串内查找字符串的第一个匹配项 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2218">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2219"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2219"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2220"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2220"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2221">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2221">-or-</span></span>

 <span data-ttu-id="7ec08-2222"><paramref name="startIndex" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2222"><paramref name="startIndex" /> is greater than the length of this instance.</span></span>

<span data-ttu-id="7ec08-2223">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2223">-or-</span></span>

 <span data-ttu-id="7ec08-2224"><paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2224"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2225"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2225"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2226">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2226">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2227">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2227">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2228">如果 <paramref name="value" /> 仅包含一个或多个可忽略字符，则该 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 方法将始终返回 <paramref name="startIndex" /> ，这是搜索开始处的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2228">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>

<span data-ttu-id="7ec08-2229">在下面的示例中， <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 方法用于查找软连字符 (U + 00AD) 的位置，并在两个字符串中从第三个到第六个字符位置开始的 "m"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2229">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="7ec08-2230">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2230">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="7ec08-2231">如果该示例在 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 或更高版本上运行，则在这两种情况下，因为软连字符是可忽略的字符，所以当执行区分区域性的比较时，该方法将返回字符串中的 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2231">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2232">但当它执行序号比较时，它只查找第一个字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2232">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="7ec08-2233">请注意，对于包含软连字符后跟 "m" 的软连字符的第一个字符串，该方法将无法返回软连字符的索引，而是在执行区分区域性的比较时返回 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2233">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2234">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2234">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="7ec08-2235">[！ code-csharp[IndexOf # 24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)][！ code-vb[IndexOf # 24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2235">[!code-csharp[System.String.IndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)] [!code-vb[System.String.IndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2236">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2236">Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="7ec08-2237">如果未在此实例中找到数组中的字符，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2237">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] -&gt; int" Usage="string.IndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="7ec08-2238">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2238">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-2239">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2239">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2240">在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2240">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2241">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2241">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2242">的搜索 `anyOf` 区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2242">The search for `anyOf` is case-sensitive.</span></span> <span data-ttu-id="7ec08-2243">如果 `anyOf` 为空数组，该方法将在字符串的开头找到匹配项 (即索引零) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2243">If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</span></span>

 <span data-ttu-id="7ec08-2244">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2244">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2245">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2245">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2246">下面的示例查找字符串中的第一个元音。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2246">The following example finds the first vowel in a string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.IndexOfAny/cs/IndexOfAny1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.IndexOfAny/vb/IndexOfAny1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2247"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2247"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="7ec08-2248">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2248">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2249">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2249">The search starting position.</span></span></param>
        <summary><span data-ttu-id="7ec08-2250">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2250">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="7ec08-2251">该搜索从指定字符位置开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2251">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2252">在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2252">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2253">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2253">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2254">`startIndex`参数的范围可以介于0到字符串实例的长度之间。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2254">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>

 <span data-ttu-id="7ec08-2255">搜索范围从 `startIndex` 到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2255">The search ranges from `startIndex` to the end of the string.</span></span>

 <span data-ttu-id="7ec08-2256">的搜索 `anyOf` 区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2256">The search for `anyOf` is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2257">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2257">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="7ec08-2258">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2258">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2259">下面的示例查找字符串 "is" 在另一个字符串的子字符串中的匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2259">The following example finds the index of the occurrence of any character of the string "is" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany2/CPP/ixany2.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany2/CS/ixany2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany2/VB/ixany2.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2260"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2260"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2261"><paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2261"><paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2262">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2262">-or-</span></span>

 <span data-ttu-id="7ec08-2263"><paramref name="startIndex" /> 大于此实例中的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2263"><paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="7ec08-2264">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2264">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2265">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2265">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2266">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2266">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="7ec08-2267">报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2267">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="7ec08-2268">搜索从指定字符位置开始，并检查指定数量的字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2268">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2269">在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2269">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2270">搜索从开始 `startIndex` ，并继续到 `startIndex`  +  `count` -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2270">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="7ec08-2271">位于处的字符 `startIndex`  +  `count` 不包含在搜索中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2271">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="7ec08-2272">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2272">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2273">`startIndex`参数的范围可以介于0到字符串实例的长度之间。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2273">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>

 <span data-ttu-id="7ec08-2274">的搜索 `anyOf` 区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2274">The search for `anyOf` is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2275">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2275">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="7ec08-2276">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2276">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2277">下面的示例查找字符串 "辅助" 的任何字符在另一个字符串的子字符串中的匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2277">The following example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany3/CPP/ixany3.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany3/CS/ixany3.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany3/VB/ixany3.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2278"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2278"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2279"><paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2279"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2280">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2280">-or-</span></span>

 <span data-ttu-id="7ec08-2281"><paramref name="count" /> + <paramref name="startIndex" /> 大于此实例中的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2281"><paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public string Insert (int startIndex, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Insert(int32 startIndex, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (startIndex As Integer, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Insert(int startIndex, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; string" Usage="string.Insert (startIndex, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="7ec08-2282">插入的从零开始的索引位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2282">The zero-based index position of the insertion.</span></span></param>
        <param name="value"><span data-ttu-id="7ec08-2283">要插入的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2283">The string to insert.</span></span></param>
        <summary><span data-ttu-id="7ec08-2284">返回一个新的字符串，在此实例中的指定的索引位置插入指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2284">Returns a new string in which a specified string is inserted at a specified index position in this instance.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2285">与此实例等效的一个新字符串，但在该字符串的 <paramref name="value" /> 位置处插入了 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2285">A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2286">如果 `startIndex` 等于此实例的长度， `value` 则将追加到此实例的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2286">If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2287">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2287">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2288">相反，它会返回一个新字符串， `value` 并将其插入到当前实例中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2288">Instead, it returns a new string in which `value` is inserted into the current instance.</span></span>

 <span data-ttu-id="7ec08-2289">例如，返回值 `"abc".Insert(2, "XYZ")` 为 "abXYZc"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2289">For example, the return value of `"abc".Insert(2, "XYZ")` is "abXYZc".</span></span>

## Examples
 <span data-ttu-id="7ec08-2290">下面的示例在字符串的索引 3) 的字符 (的第四个字符位置插入一个空格字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2290">The following example inserts a space character in the fourth character position (the character at index 3) of a string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Insert/cs/Insert1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Insert/vb/Insert1.vb" id="Snippet1":::

 <span data-ttu-id="7ec08-2291">以下控制台应用程序将提示用户输入一个或多个形容词来描述两个动物。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2291">The following console application prompts the users to enter one or more adjectives to describe two animals.</span></span> <span data-ttu-id="7ec08-2292">然后，它调用 <xref:System.String.Insert%2A> 方法将用户输入的文本插入到字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2292">It then calls the <xref:System.String.Insert%2A> method to insert the text entered by the user into a string.</span></span>

 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2293"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2293"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2294"><paramref name="startIndex" /> 为负数或大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2294"><paramref name="startIndex" /> is negative or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Intern">
      <MemberSignature Language="C#" Value="public static string Intern (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Intern(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Intern(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intern (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Intern(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Intern : string -&gt; string" Usage="System.string.Intern str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="7ec08-2295">要在暂存池中搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2295">A string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="7ec08-2296">检索系统对指定 <see cref="T:System.String" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2296">Retrieves the system's reference to the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2297">如果暂存了 <paramref name="str" />，则返回系统对其的引用；否则返回对值为 <paramref name="str" /> 的字符串的新引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2297">The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2298">公共语言运行时通过维护名为拘留池的表来节省字符串存储，该表包含对程序中以编程方式声明或创建的每个唯一文本字符串的单个引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2298">The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.</span></span> <span data-ttu-id="7ec08-2299">因此，系统中仅存在一个具有特定值的文本字符串的实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2299">Consequently, an instance of a literal string with a particular value only exists once in the system.</span></span>

 <span data-ttu-id="7ec08-2300">例如，如果将相同的文本字符串分配给几个变量，则运行时将从暂存池中检索到文本字符串的相同引用，并将其分配给每个变量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2300">For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</span></span>

 <span data-ttu-id="7ec08-2301"><xref:System.String.Intern%2A>方法使用拘留池搜索等于值的字符串 `str` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2301">The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`.</span></span> <span data-ttu-id="7ec08-2302">如果存在这样的字符串，则返回暂存池中的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2302">If such a string exists, its reference in the intern pool is returned.</span></span> <span data-ttu-id="7ec08-2303">如果该字符串不存在，则会将对的引用 `str` 添加到拘留池中，然后返回该引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2303">If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.</span></span>

 <span data-ttu-id="7ec08-2304">在下面的示例中，已暂存值为 "MyTest" 的字符串 s1，因为它是程序中的文本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2304">In the following example, the string s1, which has a value of "MyTest", is already interned because it is a literal in the program.</span></span> <span data-ttu-id="7ec08-2305"><xref:System.Text.StringBuilder?displayProperty=nameWithType>类将生成一个与 s1 具有相同值的新字符串对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2305">The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class generates a new string object that has the same value as s1.</span></span> <span data-ttu-id="7ec08-2306">对该字符串的引用将分配给 s2。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2306">A reference to that string is assigned to s2.</span></span> <span data-ttu-id="7ec08-2307"><xref:System.String.Intern%2A>方法搜索与 s2 具有相同值的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2307">The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2.</span></span> <span data-ttu-id="7ec08-2308">由于存在这样的字符串，因此该方法将返回分配给 s1 的相同引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2308">Because such a string exists, the method returns the same reference that is assigned to s1.</span></span> <span data-ttu-id="7ec08-2309">然后，将该引用分配给 s3。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2309">That reference is then assigned to s3.</span></span> <span data-ttu-id="7ec08-2310">引用 s1 和 s2 比较不相等，因为它们引用不同的对象;引用 s1 和 s3 比较相等，因为它们引用相同的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2310">References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb" id="Snippet1":::

 <span data-ttu-id="7ec08-2311">将此方法与方法进行比较 <xref:System.String.IsInterned%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2311">Compare this method to the <xref:System.String.IsInterned%2A> method.</span></span>

## <a name="version-considerations"></a><span data-ttu-id="7ec08-2312">版本注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-2312">Version considerations</span></span>

 <span data-ttu-id="7ec08-2313">在中 [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)] ， <xref:System.String.Intern%2A> 方法将恢复为其在 .NET Framework 1.0 和1.1 中的行为，并在其中包含空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2313">In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in .NET Framework 1.0 and 1.1 with regard to interning the empty string.</span></span> <span data-ttu-id="7ec08-2314">在下面的示例中，为变量 `str1` 赋值 <xref:System.String.Empty?displayProperty=nameWithtype> ，并 `str2` <xref:System.String.Empty?displayProperty=nameWithtype> 通过 <xref:System.String.Intern%2A> 在将值为的对象转换为字符串后调用方法，将对的引用分配给该变量 <xref:System.Text.StringBuilder> <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2314">In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty?displayProperty=nameWithtype>, and the variable `str2` is assigned the reference to <xref:System.String.Empty?displayProperty=nameWithtype> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty?displayProperty=nameWithtype> to a string.</span></span> <span data-ttu-id="7ec08-2315">然后，比较和中包含的引用是否 `str1` `str2` 相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2315">Then the references contained in `str1` and `str2` are compared for equality.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb" id="Snippet2":::

 <span data-ttu-id="7ec08-2316">在 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] 和中 [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)] ， `str1` 和 `str2` 不相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2316">In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.</span></span> <span data-ttu-id="7ec08-2317">在所有其他版本中， `str1` 和 `str2` 相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2317">In all other versions, `str1` and `str2` are equal.</span></span>

## <a name="performance-considerations"></a><span data-ttu-id="7ec08-2318">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-2318">Performance Considerations</span></span>
 <span data-ttu-id="7ec08-2319">如果尝试减少应用程序分配的内存总量，请记住，暂存字符串具有两个不需要的副作用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2319">If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.</span></span> <span data-ttu-id="7ec08-2320">首先，在 <xref:System.String> 公共语言运行时 (CLR) 终止之前，为暂存对象分配的内存不大可能被释放。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2320">First, the memory allocated for interned <xref:System.String> objects is not likely to be released until the common language runtime (CLR) terminates.</span></span> <span data-ttu-id="7ec08-2321">原因在于，在 <xref:System.String> 应用程序甚至应用程序域终止后，CLR 对暂存对象的引用可能会保持不变。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2321">The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates.</span></span> <span data-ttu-id="7ec08-2322">其次，若要暂存字符串，必须先创建字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2322">Second, to intern a string, you must first create the string.</span></span> <span data-ttu-id="7ec08-2323"><xref:System.String>即使将最终回收内存，仍必须分配对象使用的内存。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2323">The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.</span></span>

<span data-ttu-id="7ec08-2324"><xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType>枚举成员将程序集标记为不需要字符串的暂留。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2324">The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> enumeration member marks an assembly as not requiring string-literal interning.</span></span> <span data-ttu-id="7ec08-2325">您可以 <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> 使用属性应用于程序集 <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2325">You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute.</span></span> <span data-ttu-id="7ec08-2326">此外，当你使用 [Ngen.exe (本机映像生成器) ](/dotnet/framework/tools/ngen-exe-native-image-generator) 以便在运行时提前编译程序集时，不会在模块之间暂存字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2326">Also, when you use [Ngen.exe (Native Image Generator)](/dotnet/framework/tools/ngen-exe-native-image-generator) to compile an assembly in advance of run time, strings are not interned across modules.</span></span>

## Examples
 <span data-ttu-id="7ec08-2327">下面的示例使用三个相同值的字符串来确定新创建的字符串和暂存的字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2327">The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.intern/CPP/string_intern.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.intern/CS/string_intern.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.intern/VB/string_intern.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2328"><paramref name="str" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2328"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IsInterned(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsInterned">
      <MemberSignature Language="C#" Value="public static string? IsInterned (string str);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string IsInterned(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsInterned(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInterned (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ IsInterned(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member IsInterned : string -&gt; string" Usage="System.string.IsInterned str" />
      <MemberSignature Language="C#" Value="public static string IsInterned (string str);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="7ec08-2329">要在暂存池中搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2329">The string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="7ec08-2330">检索对指定 <see cref="T:System.String" /> 的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2330">Retrieves a reference to a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2331">如果 <paramref name="str" /> 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2331">A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2332">公共语言运行时自动维护一个名为拘留池的表，该表包含在程序中声明的每个唯一文本字符串常量的单个实例，以及 <xref:System.String> 通过调用方法以编程方式添加的任何唯一实例 <xref:System.String.Intern%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2332">The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.</span></span>

 <span data-ttu-id="7ec08-2333">拘留池节省了字符串存储。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2333">The intern pool conserves string storage.</span></span> <span data-ttu-id="7ec08-2334">如果将文本字符串常量分配给几个变量，则每个变量将设置为引用拘留池中的相同常量，而不是引用具有相同值的多个不同实例 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2334">If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.</span></span>

 <span data-ttu-id="7ec08-2335">此方法查找 `str` 暂存池中的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2335">This method looks up `str` in the intern pool.</span></span> <span data-ttu-id="7ec08-2336">如果已 `str` 暂存，则返回对该实例的引用; 否则 `null` 返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2336">If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.</span></span>

 <span data-ttu-id="7ec08-2337">将此方法与方法进行比较 <xref:System.String.Intern%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2337">Compare this method to the <xref:System.String.Intern%2A> method.</span></span>

 <span data-ttu-id="7ec08-2338">此方法不返回布尔值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2338">This method does not return a Boolean value.</span></span> <span data-ttu-id="7ec08-2339">如果调用方法，因为您需要一个指示是否暂存特定字符串的布尔值，则可以使用如下所示的代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2339">If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb" id="Snippet1":::

> [!NOTE]
> <span data-ttu-id="7ec08-2340">使用 [Ngen.exe (本机映像生成器) ](/dotnet/framework/tools/ngen-exe-native-image-generator) 将程序集安装到本地计算机上的本机映像缓存中时，可以重写拘留池的使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2340">You can override the use of the intern pool when you use [Ngen.exe (Native Image Generator)](/dotnet/framework/tools/ngen-exe-native-image-generator) to install an assembly to the native image cache on a local computer.</span></span> <span data-ttu-id="7ec08-2341">有关详细信息，请参阅 "备注" 部分中属性的性能注意事项 <xref:System.String.Intern%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2341">For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.</span></span>

## Examples
 <span data-ttu-id="7ec08-2342">下面的示例演示了编译器自动暂存文本字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2342">The following example demonstrates that literal strings are interned automatically by the compiler.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.isinterned/CPP/isin.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.isinterned/CS/isin.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isinterned/VB/isin.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2343"><paramref name="str" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2343"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Intern(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2344">指示此字符串是否符合特定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2344">Indicates whether this string is in a particular Unicode normalization form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="7ec08-2345">下面的示例确定字符串是否已成功规范化为各种范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2345">The following example determines whether a string is successfully normalized to various normalization forms.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized();" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : unit -&gt; bool" Usage="string.IsNormalized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-2346">指示此字符串是否符合 Unicode 范式 C。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2346">Indicates whether this string is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2347">如果此字符串符合范式 C，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2347"><see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2348">某些 Unicode 字符具有多个等效的二进制表示形式，其中包含组合和/或复合 Unicode 字符的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2348">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="7ec08-2349">单个字符存在多个表示形式会使搜索、排序、匹配和其他操作复杂化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2349">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="7ec08-2350">Unicode 标准定义了一个名为规范化的进程，该进程在给定任何等效的二进制表示形式的字符时返回一个二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2350">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="7ec08-2351">可以通过多个算法（称为标准化形式）来执行规范化，它们遵循不同的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2351">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="7ec08-2352">.NET 当前支持范式 C、D、GLM-KC-QNW 和 KD。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2352">.NET currently supports normalization forms C, D, KC, and KD.</span></span>

 <span data-ttu-id="7ec08-2353">有关支持的 Unicode 范式的说明，请参阅 <xref:System.Text.NormalizationForm?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2353">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2354">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2354">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2355">此 <see cref="Overload:System.String.IsNormalized" /> 方法 <see langword="false" /> 会在遇到字符串中第一个非规范化字符时立即返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2355">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="7ec08-2356">因此，如果字符串包含非规范化字符后跟无效的 Unicode 字符，则该 <see cref="Overload:System.String.Normalize" /> 方法将引发， <see cref="T:System.ArgumentException" /> 但 <see cref="Overload:System.String.IsNormalized" /> 返回 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2356">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized (normalizationForm As NormalizationForm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : System.Text.NormalizationForm -&gt; bool" Usage="string.IsNormalized normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="7ec08-2357">一个 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2357">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="7ec08-2358">指示此字符串是否符合指定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2358">Indicates whether this string is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2359">如果此字符串符合由 <see langword="true" /> 参数指定的范式，则为 <paramref name="normalizationForm" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2359"><see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2360">某些 Unicode 字符具有多个等效的二进制表示形式，其中包含组合和/或复合 Unicode 字符的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2360">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="7ec08-2361">单个字符存在多个表示形式会使搜索、排序、匹配和其他操作复杂化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2361">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="7ec08-2362">Unicode 标准定义了一个名为规范化的进程，该进程在给定任何等效的二进制表示形式的字符时返回一个二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2362">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="7ec08-2363">可以通过多个算法（称为标准化形式）来执行规范化，它们遵循不同的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2363">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="7ec08-2364">.NET 当前支持范式 C、D、GLM-KC-QNW 和 KD。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2364">.NET currently supports normalization forms C, D, KC, and KD.</span></span>

 <span data-ttu-id="7ec08-2365">有关支持的 Unicode 范式的说明，请参阅 <xref:System.Text.NormalizationForm?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2365">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2366">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2366">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2367">此 <see cref="Overload:System.String.IsNormalized" /> 方法 <see langword="false" /> 会在遇到字符串中第一个非规范化字符时立即返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2367">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="7ec08-2368">因此，如果字符串包含非规范化字符后跟无效的 Unicode 字符，则该 <see cref="Overload:System.String.Normalize" /> 方法将引发， <see cref="T:System.ArgumentException" /> 但 <see cref="Overload:System.String.IsNormalized" /> 返回 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2368">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrEmpty">
      <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (string value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrEmpty(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrEmpty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrEmpty (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrEmpty(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrEmpty : string -&gt; bool" Usage="System.string.IsNullOrEmpty value" />
      <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (string? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2369">要测试的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2369">The string to test.</span></span></param>
        <summary><span data-ttu-id="7ec08-2370">指示指定的字符串是 <see langword="null" /> 还是空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2370">Indicates whether the specified string is <see langword="null" /> or an empty string ("").</span></span></summary>
        <returns><span data-ttu-id="7ec08-2371">如果 <see langword="true" /> 参数为 <paramref name="value" /> 或空字符串 ("")，则为 <see langword="null" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2371"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2372"><xref:System.String.IsNullOrEmpty%2A> 是一种便捷方法，使您能够同时测试 <xref:System.String> 是 `null` 还是其值为 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2372"><xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-2373">它等效于以下代码：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2373">It is equivalent to the following code:</span></span>

 [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]
 [!code-csharp-interactive[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]
 [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]

 <span data-ttu-id="7ec08-2374">您可以使用 <xref:System.String.IsNullOrWhiteSpace%2A> 方法来测试字符串是否为 `null` ，其值为 <xref:System.String.Empty?displayProperty=nameWithType> ，或仅由空白字符组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2374">You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=nameWithType>,  or it consists only of white-space characters.</span></span>

## <a name="what-is-a-null-string"></a><span data-ttu-id="7ec08-2375">什么是空字符串？</span><span class="sxs-lookup"><span data-stu-id="7ec08-2375">What is a null string?</span></span>

<span data-ttu-id="7ec08-2376">如果尚未为 `null` 它分配值 (c + + 和 Visual Basic) ，或者显式为其赋值，则为字符串 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2376">A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if it has explicitly been assigned a value of `null`.</span></span> <span data-ttu-id="7ec08-2377">尽管 [复合格式设置](/dotnet/standard/base-types/composite-formatting) 功能可以适当地处理空字符串（如下面的示例所示），但如果其成员引发，则尝试调用它 <xref:System.NullReferenceException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2377">Although the [composite formatting](/dotnet/standard/base-types/composite-formatting) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.</span></span>

[!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]
[!code-csharp-interactive[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]
[!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]

## <a name="what-is-an-empty-string"></a><span data-ttu-id="7ec08-2378">什么是空字符串？</span><span class="sxs-lookup"><span data-stu-id="7ec08-2378">What is an empty string?</span></span>

<span data-ttu-id="7ec08-2379">如果字符串显式分配空字符串 ( "" ) 或，则为空字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2379">A string is empty if it  is explicitly assigned an empty string ("") or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-2380">空字符串的为 <xref:System.String.Length%2A> 0。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2380">An empty string has a <xref:System.String.Length%2A> of 0.</span></span>  <span data-ttu-id="7ec08-2381">下面的示例创建一个空字符串并显示其值和它的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2381">The following example creates an empty string and displays its value and its length.</span></span>

[!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]
[!code-csharp-interactive[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]
[!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]

## Examples
 <span data-ttu-id="7ec08-2382">下面的示例检查三个字符串，并确定每个字符串是否有值、是否为空字符串或是否为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2382">The following example examines three strings and determines whether each string has a value, is an empty string, or is `null`.</span></span>

 [!code-cpp[String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isNullOrEmpty/CPP/inoe.cpp#1)]
 [!code-csharp-interactive[String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isNullOrEmpty/CS/inoe.cs#1)]
 [!code-vb[String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isNullOrEmpty/VB/inoe.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsNullOrWhiteSpace (string value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrWhiteSpace(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrWhiteSpace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrWhiteSpace (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrWhiteSpace(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrWhiteSpace : string -&gt; bool" Usage="System.string.IsNullOrWhiteSpace value" />
      <MemberSignature Language="C#" Value="public static bool IsNullOrWhiteSpace (string? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2383">要测试的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2383">The string to test.</span></span></param>
        <summary><span data-ttu-id="7ec08-2384">指示指定的字符串是 <see langword="null" />、空还是仅由空白字符组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2384">Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2385">如果 <see langword="true" /> 参数为 <paramref name="value" /> 或 <see langword="null" />，或者如果 <see cref="F:System.String.Empty" /> 仅由空白字符组成，则为 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2385"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2386"><xref:System.String.IsNullOrWhiteSpace%2A> 是一种简便的方法，类似于以下代码，但它提供了优异的性能：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2386"><xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb" id="Snippet2":::

 <span data-ttu-id="7ec08-2387">空白字符由 Unicode 标准定义。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2387">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="7ec08-2388"><xref:System.String.IsNullOrWhiteSpace%2A>当将值 `true` 作为空白字符传递给方法时，该方法将解释返回值的任何字符 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2388">The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method as a white-space character.</span></span>

## Examples
 <span data-ttu-id="7ec08-2389">下面的示例创建一个字符串数组，然后将数组的每个元素传递给 <xref:System.String.IsNullOrWhiteSpace%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2389">The following example creates a string array, and then passes each element of the array to the <xref:System.String.IsNullOrWhiteSpace%2A> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2390">连接指定数组的元素或集合的成员，在每个元素或成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2390">Concatenates the elements of a specified array or the members of a collection, using the specified separator between each element or member.</span></span></summary>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params object?[] values);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberSignature Language="C#" Value="public static string Join (char separator, params object[] values);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="values" Type="System.Object[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2391">要用作分隔符的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2391">The character to use as a separator.</span></span> <span data-ttu-id="7ec08-2392">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2392"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="7ec08-2393">将连接其字符串表示形式的对象数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2393">An array of objects whose string representations will be concatenated.</span></span></param>
        <summary><span data-ttu-id="7ec08-2394">连接对象数组的字符串表示形式，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2394">Concatenates the string representations of an array of objects, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2395">一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2395">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="7ec08-2396">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2396">-or-</span></span>

<span data-ttu-id="7ec08-2397">如果 <paramref name="values" /> 有零个元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2397"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2398"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2398"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2399">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2399">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params string?[] value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberSignature Language="C#" Value="public static string Join (char separator, params string[] value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="value" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2400">要用作分隔符的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2400">The character to use as a separator.</span></span> <span data-ttu-id="7ec08-2401">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2401"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="7ec08-2402">要连接的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2402">An array of strings to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-2403">连接字符串数组，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2403">Concatenates an array of strings, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2404">一个由 <paramref name="value" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2404">A string that consists of the elements of <paramref name="value" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="7ec08-2405">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2405">-or-</span></span>

<span data-ttu-id="7ec08-2406">如果 <paramref name="value" /> 有零个元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2406"><see cref="F:System.String.Empty" /> if <paramref name="value" /> has zero elements.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2407"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2407"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2408">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2408">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;string&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberSignature Language="C#" Value="public static string Join (string? separator, System.Collections.Generic.IEnumerable&lt;string?&gt; values);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2409">要用作分隔符的字符串。<paramref name="separator" /></span><span class="sxs-lookup"><span data-stu-id="7ec08-2409">The string to use as a separator.<paramref name="separator" /></span></span> <span data-ttu-id="7ec08-2410">包括在返回的字符串中（只有在 <paramref name="values" /> 具有多个元素时）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2410">is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="7ec08-2411">一个包含要串联的字符串的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2411">A collection that contains the strings to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-2412">串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2412">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2413">一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2413">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span>

<span data-ttu-id="7ec08-2414">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2414">-or-</span></span>

<span data-ttu-id="7ec08-2415">如果 <paramref name="values" /> 有零个元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2415"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2416">如果 `separator` 为 `null` ，则改为使用 () 的空字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2416">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="7ec08-2417">如果的任何成员 `values` 为 `null` ，则改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2417">If any member of `values` is `null`, an empty string is used instead.</span></span>

 <span data-ttu-id="7ec08-2418"><xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> 是一种简便方法，使您可以连接集合中的每个元素， `IEnumerable(Of String)` 而无需先将元素转换为字符串数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2418"><xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="7ec08-2419">它对于 Language-Integrated 查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2419">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="7ec08-2420">下面的示例将 `List(Of String)` 包含字母表的大写或小写字母的对象传递给 lambda 表达式，该表达式选择等于或大于特定字母 (的字母，在本例中为 "M" ) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2420">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="7ec08-2421">`IEnumerable(Of String)`方法返回的集合 <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 传递给 <xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> 方法，以单个字符串的形式显示结果。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2421">The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> method to display the result as a single string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb" id="Snippet4":::

## Examples
 <span data-ttu-id="7ec08-2422">下面的示例使用埃拉托色 of 尼斯筛法算法来计算小于或等于100的质数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2422">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="7ec08-2423">它将结果分配给 <xref:System.Collections.Generic.List%601> 类型的对象，然后将该对象 <xref:System.String> 传递给 <xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2423">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Join(System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D)> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join3.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2424"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2424"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2425">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2425">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params object[] values);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberSignature Language="C#" Value="public static string Join (string? separator, params object?[] values);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Object[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2426">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2426">The string to use as a separator.</span></span> <span data-ttu-id="7ec08-2427">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2427"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="7ec08-2428">一个数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2428">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-2429">串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2429">Concatenates the elements of an object array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2430">一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2430">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span>

<span data-ttu-id="7ec08-2431">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2431">-or-</span></span>

<span data-ttu-id="7ec08-2432">如果 <paramref name="values" /> 有零个元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2432"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements.</span></span>

<span data-ttu-id="7ec08-2433">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2433">-or-</span></span>

<span data-ttu-id="7ec08-2434">仅 .NET Framework：如果 <paramref name="values" /> 的第一个元素是 <see langword="null" />，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2434">.NET Framework only: <see cref="F:System.String.Empty" /> if the first element of <paramref name="values" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2435">如果 `separator` 为 `null` ，或者第一个元素之外的任何元素 `values` 为 `null` ，则改为使用空字符串 (<xref:System.String.Empty?displayProperty=nameWithType>) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2435">If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="7ec08-2436">如果的第一个元素为，请参阅 "调用方的说明" 部分 `values` `null` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2436">See the Notes for Callers section if the first element of `values` is `null`.</span></span>

 <span data-ttu-id="7ec08-2437"><xref:System.String.Join(System.String%2CSystem.Object%5B%5D)> 是一种简便方法，使您可以连接对象数组中的每个元素，而无需将其元素显式转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2437"><xref:System.String.Join(System.String%2CSystem.Object%5B%5D)> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.</span></span> <span data-ttu-id="7ec08-2438">数组中每个对象的字符串表示形式是通过调用该对象的方法派生的 `ToString` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2438">The string representation of each object in the array is derived by calling that object's `ToString` method.</span></span>

## Examples
 <span data-ttu-id="7ec08-2439">下面的示例使用埃拉托色 of 尼斯筛法算法来计算小于或等于100的质数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2439">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="7ec08-2440">它将结果赋给一个整数数组，然后将其传递给 <xref:System.String.Join(System.String%2CSystem.Object%5B%5D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2440">It assigns the result to a integer array, which it then passes to the <xref:System.String.Join(System.String%2CSystem.Object%5B%5D)> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2441"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2441"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2442">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2442">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2443">仅 .NET Framework：如果的第一个元素 <paramref name="values" /> 为 <see langword="null" /> ，则该 <see cref="M:System.String.Join(System.String,System.Object[])" /> 方法不会连接中的元素， <paramref name="values" /> 而是返回 <see cref="F:System.String.Empty" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2443">.NET Framework only: If the first element of <paramref name="values" /> is <see langword="null" />, the <see cref="M:System.String.Join(System.String,System.Object[])" /> method does not concatenate the elements in <paramref name="values" /> but instead returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="7ec08-2444">此问题有多种解决方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2444">A number of workarounds for this issue are available.</span></span> <span data-ttu-id="7ec08-2445">最简单的方法是将值赋给 <see cref="F:System.String.Empty" /> 数组的第一个元素，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2445">The easiest is to assign a value of <see cref="F:System.String.Empty" /> to the first element of the array, as the following example shows.</span></span>

<span data-ttu-id="7ec08-2446">[！ code-csharp-interactive[system.string # 6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)][！ code-vb[system.string # 6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2446">[!code-csharp-interactive[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)] [!code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</span></span></para></block>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params string[] value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray value As String()) As String" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::String ^&gt; ^ value);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberSignature Language="C#" Value="public static string Join (string? separator, params string?[] value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String()) As String" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2447">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2447">The string to use as a separator.</span></span> <span data-ttu-id="7ec08-2448">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2448"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="7ec08-2449">一个数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2449">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-2450">串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2450">Concatenates all the elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2451">一个由 <paramref name="value" /> 中的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2451">A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span>

<span data-ttu-id="7ec08-2452">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2452">-or-</span></span>

<span data-ttu-id="7ec08-2453">如果 <paramref name="values" /> 有零个元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2453"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2454">例如，如果 `separator` 为 "，"，的元素为 `value` "apple"、"橙色"、"grape" 和 "梨"，则 `Join(separator, value)` 返回 "apple，橙色，grape，梨"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2454">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value)` returns "apple, orange, grape, pear".</span></span>

 <span data-ttu-id="7ec08-2455">如果 `separator` 为 `null` ，则改为使用 () 的空字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2455">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="7ec08-2456">如果中的任何元素 `value` 为 `null` ，则改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2456">If any element in `value` is `null`, an empty string is used instead.</span></span>

## Examples
 <span data-ttu-id="7ec08-2457">下面的示例演示 <xref:System.String.Join%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2457">The following example demonstrates the <xref:System.String.Join%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringjoin/CPP/stringjoin.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringjoin/CS/stringjoin.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringjoin/VB/stringjoin.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2458"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2458"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2459">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2459">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, string?[] value, int startIndex, int count);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberSignature Language="C#" Value="public static string Join (char separator, string[] value, int startIndex, int count);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="value" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2460">连接字符串数组，其中在每个成员之间使用指定的分隔符，并且从位于指定索引处的元素开始，并包含指定数量的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2460">Concatenates an array of strings, using the specified separator between each member, starting with the element located at the specified index and including a specified number of elements.</span></span></param>
        <param name="value"><span data-ttu-id="7ec08-2461">要连接的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2461">An array of strings to concatenate.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2462">要连接的 <paramref name="value" /> 中的第一个项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2462">The first item in <paramref name="value" /> to concatenate.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2463">要连接的 <paramref name="value" /> 中的元素数，从位于 <paramref name="startIndex" /> 位置的元素开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2463">The number of elements from <paramref name="value" /> to concatenate, starting with the element in the <paramref name="startIndex" /> position.</span></span></param>
        <summary><span data-ttu-id="7ec08-2464">连接字符串数组，其中在每个成员之间使用指定的分隔符，并且从位于 <paramref name="startIndex" /> 位置的 <paramref name="value" /> 中的元素开始，并连接多达 <paramref name="count" /> 个元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2464">Concatenates an array of strings, using the specified separator between each member, starting with the element in <paramref name="value" /> located at the <paramref name="startIndex" /> position, and concatenating up to <paramref name="count" /> elements.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2465">一个由 <paramref name="count" /> 个 <paramref name="value" /> 元素组成的字符串，从 <paramref name="startIndex" /> 开始，由 <paramref name="separator" /> 字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2465">A string that consists of <paramref name="count" /> elements of <paramref name="value" /> starting at <paramref name="startIndex" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="7ec08-2466">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2466">-or-</span></span>

<span data-ttu-id="7ec08-2467">如果 <paramref name="count" /> 为零，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2467"><see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2468"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2468"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2469"><paramref name="startIndex" /> 或 <paramref name="count" /> 为负。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2469"><paramref name="startIndex" /> or <paramref name="count" /> are negative.</span></span>

<span data-ttu-id="7ec08-2470">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2470">-or-</span></span>

<span data-ttu-id="7ec08-2471"><paramref name="startIndex" /> 大于 <paramref name="value" /> 的长度   - <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2471"><paramref name="startIndex" /> is greater than the length of <paramref name="value" />  - <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2472">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2472">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value, int startIndex, int count);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberSignature Language="C#" Value="public static string Join (string? separator, string?[] value, int startIndex, int count);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-2473">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2473">The string to use as a separator.</span></span> <span data-ttu-id="7ec08-2474">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2474"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="7ec08-2475">一个数组，其中包含要连接的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2475">An array that contains the elements to concatenate.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2476"><paramref name="value" /> 中要使用的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2476">The first element in <paramref name="value" /> to use.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2477">要使用的 <paramref name="value" /> 的元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2477">The number of elements of <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="7ec08-2478">串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2478">Concatenates the specified elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2479">一个由 <paramref name="count" /> 个 <paramref name="value" /> 元素组成的字符串，从 <paramref name="startIndex" /> 开始，由 <paramref name="separator" /> 字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2479">A string that consists of <paramref name="count" /> elements of <paramref name="value" /> starting at <paramref name="startIndex" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="7ec08-2480">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2480">-or-</span></span>

 <span data-ttu-id="7ec08-2481">如果 <paramref name="count" /> 为零，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2481"><see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2482">例如，如果 `separator` 为 "，"，的元素为 `value` "apple"、"橙色"、"grape" 和 "梨"，则 `Join(separator, value, 1, 2)` 返回 "橙色，grape"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2482">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value, 1, 2)` returns "orange, grape".</span></span>

 <span data-ttu-id="7ec08-2483">如果 `separator` 为 `null` ，则改为使用 () 的空字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2483">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="7ec08-2484">如果中的任何元素 `value` 为 `null` ，则改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2484">If any element in `value` is `null`, an empty string is used instead.</span></span>

## Examples
 <span data-ttu-id="7ec08-2485">下面的示例连接水果名称数组中的两个元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2485">The following example concatenates two elements from an array of names of fruit.</span></span>

 [!code-cpp[string.join2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.join2/CPP/join2.cpp#1)]
 [!code-csharp-interactive[string.join2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.join2/CS/join2.cs#1)]
 [!code-vb[string.join2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.join2/VB/join2.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2486"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2486"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2487"><paramref name="startIndex" /> 或 <paramref name="count" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2487"><paramref name="startIndex" /> or <paramref name="count" /> is less than 0.</span></span>

<span data-ttu-id="7ec08-2488">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2488">-or-</span></span>

<span data-ttu-id="7ec08-2489"><paramref name="startIndex" /> 加上 <paramref name="count" /> 大于 <paramref name="value" />中的元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2489"><paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2490">内存不足。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2490">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (char separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(char separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As Char, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(char separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7ec08-2491"><paramref name="values" /> 成员的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2491">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="separator"><span data-ttu-id="7ec08-2492">要用作分隔符的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2492">The character to use as a separator.</span></span> <span data-ttu-id="7ec08-2493">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2493"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="7ec08-2494">一个包含要串联的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2494">A collection that contains the objects to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-2495">串联集合的成员，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2495">Concatenates the members of a collection, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2496">一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2496">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="7ec08-2497">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2497">-or-</span></span>

<span data-ttu-id="7ec08-2498">如果 <paramref name="values" /> 没有任何元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2498"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has no elements.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2499"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2499"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2500">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2500">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(string separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As String, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (string? separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7ec08-2501"><paramref name="values" /> 成员的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2501">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="separator"><span data-ttu-id="7ec08-2502">要用作分隔符的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2502">The string to use as a separator.</span></span> <span data-ttu-id="7ec08-2503">只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2503"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="7ec08-2504">一个包含要串联的对象的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2504">A collection that contains the objects to concatenate.</span></span></param>
        <summary><span data-ttu-id="7ec08-2505">串联集合的成员，其中在每个成员之间使用指定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2505">Concatenates the members of a collection, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2506">一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2506">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span>

<span data-ttu-id="7ec08-2507">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2507">-or-</span></span>

<span data-ttu-id="7ec08-2508">如果 <paramref name="values" /> 没有任何元素，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2508"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has no elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2509">如果 `separator` 为 `null` ，则改为使用 () 的空字符串 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2509">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="7ec08-2510">如果的任何成员 `values` 为 `null` ，则改为使用空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2510">If any member of `values` is `null`, an empty string is used instead.</span></span>

 <span data-ttu-id="7ec08-2511"><xref:System.String.Join%60%601(System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D)> 是一种简便方法，使您可以连接集合的每个成员， <xref:System.Collections.Generic.IEnumerable%601> 无需先将其转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2511"><xref:System.String.Join%60%601(System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D)> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings.</span></span> <span data-ttu-id="7ec08-2512">集合中每个对象的字符串表示形式 <xref:System.Collections.Generic.IEnumerable%601> 都是通过调用该对象的 `ToString` 方法派生的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2512">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>

 <span data-ttu-id="7ec08-2513">此方法对于 Language-Integrated 查询 (LINQ) 查询表达式特别有用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2513">This method is particular useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="7ec08-2514">例如，下面的代码定义了一个非常简单的 `Animal` 类，其中包含动物的名称及其所属的顺序。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2514">For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="7ec08-2515">然后，它定义 <xref:System.Collections.Generic.List%601> 包含多个对象的对象 `Animal` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2515">It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects.</span></span> <span data-ttu-id="7ec08-2516"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType>调用扩展方法以提取 `Animal` 其 `Order` 属性等于 "啮齿类" 的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2516">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="7ec08-2517">结果传递给 <xref:System.String.Join%60%601(System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2517">The result is passed to the <xref:System.String.Join%60%601(System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D)> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb" id="Snippet5":::

## Examples
 <span data-ttu-id="7ec08-2518">下面的示例使用埃拉托色 of 尼斯筛法算法来计算小于或等于100的质数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2518">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="7ec08-2519">它将结果分配给 <xref:System.Collections.Generic.List%601> 类型为 integer 的对象，然后将该对象传递给 <xref:System.String.Join%60%601(System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2519">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type integer, which it then passes to the <xref:System.String.Join%60%601(System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D)> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join2.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2520"><paramref name="values" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2520"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="7ec08-2521">生成的字符串长度超出了允许的最大长度 (<see cref="F:System.Int32.MaxValue" />)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2521">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2522">报告指定 Unicode 字符或字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2522">Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="7ec08-2523">如果未在此实例中找到该字符或字符串，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2523">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2524">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2524">The Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-2525">报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2525">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2526">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2526">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2527">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2527">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2528">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2528">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="7ec08-2529">此方法从该实例的最后一个字符位置开始搜索，然后在 `value` 找到或检查了第一个字符位置之前，向后翻一层。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2529">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="7ec08-2530">搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2530">The search is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2531">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2531">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2532">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2532">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2533">下面的示例定义了一个 `ExtractFilename` 方法，该方法使用 <xref:System.String.LastIndexOf(System.Char)> 方法查找字符串中的最后一个目录分隔符字符并提取字符串的文件名。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2533">The following example defines an `ExtractFilename` method that uses the <xref:System.String.LastIndexOf(System.Char)> method to find the last directory separator character in a string and to extract the string's file name.</span></span> <span data-ttu-id="7ec08-2534">如果文件存在，则方法将返回文件名，而不返回其路径。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2534">If the file exists, the method returns the file name without its path.</span></span>

 [!code-csharp[System.String.LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/LastIndexOf_Example.cs#1)]
 [!code-vb[System.String.LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/LastIndexOf_Example.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2535">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2535">The string to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-2536">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2536">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2537">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2537">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-2538">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2538">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2539">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2539">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

<span data-ttu-id="7ec08-2540">此搜索从该实例的最后一个字符位置开始，并在 `value` 找到或已检查第一个字符位置之前的某个时间开始向后滚动。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2540">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>

<span data-ttu-id="7ec08-2541">此方法使用当前区域性执行 (区分大小写和区分区域性的) 搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2541">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>

<span data-ttu-id="7ec08-2542">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2542">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2543">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2543">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span>

<span data-ttu-id="7ec08-2544">在下面的示例中， <xref:System.String.LastIndexOf%28System.String%29> 方法用于查找两个子字符串， (软连字符后跟 "n"，软连字符后跟 "m" ) 在两个字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2544">In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find two substrings (a soft hyphen followed by "n" and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="7ec08-2545">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2545">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="7ec08-2546">如果该示例在 .NET Framework 4 或更高版本上运行，则在每种情况下，因为软连字符是可忽略字符，则结果与软连字符不在中的情况相同 `value` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2546">If the example is run on .NET Framework 4 or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span>

 [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]
 [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]

## Examples
 <span data-ttu-id="7ec08-2547">下面的示例在标记开始和结束字符串时，删除字符串中的开始和关闭 HTML 标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2547">The following example removes opening and closing HTML tags from a string if the tags begin and end the string.</span></span> <span data-ttu-id="7ec08-2548">如果字符串以右括号字符结尾 ( ">" ) ，则该示例使用 <xref:System.String.LastIndexOf%2A> 方法来查找结束标记的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2548">If a string ends with a closing bracket character (">"), the example uses the <xref:System.String.LastIndexOf%2A> method to locate the start of the end tag.</span></span>

 [!code-csharp[System.String.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof_example2.cs#2)]
 [!code-vb[System.String.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof_example2.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2549"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2549"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2550">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2550">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-2551">若要通过使用当前区域性的比较规则查找字符串实例内子字符串的最后一个索引，请使用的 <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> 参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2551">To find the last index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2552">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2552">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2553">搜索的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2553">The starting position of the search.</span></span> <span data-ttu-id="7ec08-2554">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2554">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-2555">报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2555">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span> <span data-ttu-id="7ec08-2556">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2556">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2557">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2557">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2558">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2558">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2559">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2559">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span> <span data-ttu-id="7ec08-2560">此方法开始搜索 `startIndex` 此实例的字符位置，并沿当前实例的开头向后移动，直到 `value` 找到或已检查第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2560">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="7ec08-2561">例如，如果 `startIndex` 为 <xref:System.String.Length%2A> -1，则方法会搜索字符串中最后一个字符的每个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2561">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span> <span data-ttu-id="7ec08-2562">搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2562">The search is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2563">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2563">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2564">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2564">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2565">下面的示例查找字符串中出现的所有字符的索引，该索引从字符串的末尾到字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2565">The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.</span></span>

 [!code-cpp[string.lastindexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof1/CPP/lastixof1.cpp#1)]
 [!code-csharp[string.lastindexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof1/CS/lastixof1.cs#1)]
 [!code-vb[string.lastindexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof1/VB/lastixof1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2566">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于等于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2566">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2567">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2567">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2568">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2568">The search starting position.</span></span> <span data-ttu-id="7ec08-2569">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2569">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-2570">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2570">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="7ec08-2571">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2571">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2572">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2572">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2573">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2573">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2574">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2574">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="7ec08-2575">此搜索从 `startIndex` 该实例的字符位置开始，并在 `value` 找到或已检查第一个字符位置之前向后继续。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2575">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="7ec08-2576">例如，如果 `startIndex` 为 <xref:System.String.Length%2A> -1，则方法会搜索字符串中最后一个字符的每个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2576">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>

 <span data-ttu-id="7ec08-2577">此方法使用当前区域性执行 (区分大小写和区分区域性的) 搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2577">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>

 <span data-ttu-id="7ec08-2578">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2578">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2579">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2579">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="7ec08-2580">在下面的示例中， <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> 方法用于查找子字符串，其中包含软连字符 (U + 00AD) ，并在字符串前面或包含最后的 "m"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2580">In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string.</span></span> <span data-ttu-id="7ec08-2581">如果该示例在 .NET Framework 4 或更高版本上运行，则将忽略搜索字符串中的软连字符，调用方法以查找由软连字符和 "m" 组成的子字符串，并将 "m" 的位置返回到字符串中，而调用该方法可查找包含软连字符的子字符串，"n" 将返回 "n" 的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2581">If the example is run on .NET Framework 4 or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n".</span></span>

 [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]
 [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]

## Examples
 <span data-ttu-id="7ec08-2582">下面的示例查找目标字符串中字符串的所有匹配项的索引，从目标字符串的末尾到目标字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2582">The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.</span></span>

 [!code-cpp[string.lastindexof7#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf7/CPP/lastixof7.cpp#1)]
 [!code-csharp[string.lastindexof7#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf7/CS/lastixof7.cs#1)]
 [!code-vb[string.lastindexof7#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf7/VB/lastixof7.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2583"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2583"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2584">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2584">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>

<span data-ttu-id="7ec08-2585">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2585">-or-</span></span>

<span data-ttu-id="7ec08-2586">当前实例等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于-1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2586">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2587">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2587">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-2588">若要通过使用当前区域性的比较规则查找特定字符位置之前的子字符串的索引，请使用 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> 其参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2588">To find the index of a substring that precedes a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * StringComparison -&gt; int" Usage="string.LastIndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2589">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2589">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2590">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2590">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2591">报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2591">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="7ec08-2592">一个参数指定要用于指定字符串的搜索类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2592">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2593">如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2593">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-2594">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2594">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2595">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2595">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

<span data-ttu-id="7ec08-2596">`comparisonType`参数指定 `value` 使用以下内容搜索参数：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2596">The `comparisonType` parameter specifies to search for the `value` parameter using:</span></span>

- <span data-ttu-id="7ec08-2597">当前区域性或固定区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2597">The current or invariant culture.</span></span>
- <span data-ttu-id="7ec08-2598">区分大小写或不区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2598">A case-sensitive or case-insensitive search.</span></span>
- <span data-ttu-id="7ec08-2599">字词比较规则或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2599">Word or ordinal comparison rules.</span></span>

<span data-ttu-id="7ec08-2600">此搜索从该实例的最后一个字符位置开始，并在 `value` 找到或已检查第一个字符位置之前的某个时间开始向后滚动。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2600">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>

## Examples
 <span data-ttu-id="7ec08-2601">下面的示例演示了方法的三个重载 <xref:System.String.LastIndexOf%2A> ，这些重载使用枚举的不同值在另一个字符串内查找字符串的最后一个匹配项 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2601">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2602"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2602"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2603"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2603"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2604">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2604">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2605">在区分区域性的搜索 (即，如果 <paramref name="options" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2605">In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span>

<span data-ttu-id="7ec08-2606">在下面的示例中， <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> 方法用于查找两个子字符串 (软连字符后跟 "n"，软连字符后跟 "m" ) 在两个字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2606">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method is used to find two substrings (a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="7ec08-2607">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2607">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="7ec08-2608">如果该示例在 .NET Framework 4 或更高版本上运行，因为软连字符是可忽略的字符，所以区分区域性的搜索返回的值与在搜索字符串中未包含软连字符时返回的值相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2608">If the example is run on .NET Framework 4 or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="7ec08-2609">不过，序号搜索成功地在一个字符串中查找软连字符，并报告从第二个字符串中缺少它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2609">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>

<span data-ttu-id="7ec08-2610">[！ code-csharp[LastIndexOf # 26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)][！ code-vb[LastIndexOf # 26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2610">[!code-csharp[System.String.LastIndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)] [!code-vb[System.String.LastIndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2611">要查找的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2611">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2612">搜索的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2612">The starting position of the search.</span></span> <span data-ttu-id="7ec08-2613">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2613">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2614">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2614">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="7ec08-2615">报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2615">Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.</span></span> <span data-ttu-id="7ec08-2616">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2616">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2617">如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2617">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2618">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2618">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2619">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2619">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="7ec08-2620">此方法从 `startIndex` 字符位置开始搜索，并沿此实例的开头向后移动，直到 `value` 找到了或已检查了个 `count` 字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2620">This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="7ec08-2621">例如，如果 `startIndex` 为 <xref:System.String.Length%2A> -1，则该方法将在 `count` 字符串的最后一个字符中搜索向后字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2621">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span> <span data-ttu-id="7ec08-2622">搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2622">The search is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2623">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2623">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="7ec08-2624">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2624">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2625">下面的示例查找子字符串中某个字符的所有匹配项的索引，该索引从子字符串的末尾到子字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2625">The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.</span></span>

 [!code-cpp[string.lastindexof2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof2/CPP/lastixof2.cpp#1)]
 [!code-csharp[string.lastindexof2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof2/CS/lastixof2.cs#1)]
 [!code-vb[string.lastindexof2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof2/VB/lastixof2.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2626">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于等于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2626">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span>

<span data-ttu-id="7ec08-2627">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2627">-or-</span></span>

<span data-ttu-id="7ec08-2628">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2628">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2629">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2629">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2630">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2630">The search starting position.</span></span> <span data-ttu-id="7ec08-2631">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2631">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2632">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2632">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="7ec08-2633">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2633">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="7ec08-2634">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2634">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2635">如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2635">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2636">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2636">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2637">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2637">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="7ec08-2638">此搜索从 `startIndex` 该实例的字符位置开始，并在找到或已检查了个 `value` 字符位置之前向后继续 `count` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2638">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="7ec08-2639">例如，如果 `startIndex` 为 <xref:System.String.Length%2A> -1，则该方法将在 `count` 字符串的最后一个字符中搜索向后字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2639">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>

 <span data-ttu-id="7ec08-2640">此方法使用当前区域性执行 (区分大小写和区分区域性的) 搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2640">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>

 <span data-ttu-id="7ec08-2641">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2641">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2642">在区分区域性的搜索中，如果 `value` 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2642">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span>

<span data-ttu-id="7ec08-2643">在下面的示例中， <xref:System.String.LastIndexOf%2A> 方法用于查找软连字符 (U + 00AD 的位置) 后跟两个字符串中的 "m" 或 "n"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2643">In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" or "n" in two strings.</span></span> <span data-ttu-id="7ec08-2644">只有一个字符串包含软连字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2644">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="7ec08-2645">如果包含软连字符后跟 "m" 的字符串，则在 `LastIndexOf` 搜索软连字符后跟 "m" 时，将返回 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2645">In the case of the string that includes the soft hyphen followed by an "m", `LastIndexOf` returns the index of the "m" when searching for the soft hyphen followed by "m".</span></span>

 [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]
 [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]

## Examples
 <span data-ttu-id="7ec08-2646">下面的示例查找子字符串中字符串的所有匹配项的索引（从子字符串的末尾到子字符串的开头）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2646">The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.</span></span>

 [!code-cpp[string.lastindexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf8/CPP/lastixof8.cpp#1)]
 [!code-csharp[string.lastindexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf8/CS/lastixof8.cs#1)]
 [!code-vb[string.lastindexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf8/VB/lastixof8.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2647"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2647"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2648"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2648"><paramref name="count" /> is negative.</span></span>

<span data-ttu-id="7ec08-2649">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2649">-or-</span></span>

<span data-ttu-id="7ec08-2650">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2650">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2651">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2651">-or-</span></span>

<span data-ttu-id="7ec08-2652">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2652">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>

<span data-ttu-id="7ec08-2653">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2653">-or-</span></span>

<span data-ttu-id="7ec08-2654">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 指定不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2654">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.</span></span>

<span data-ttu-id="7ec08-2655">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2655">-or-</span></span>

<span data-ttu-id="7ec08-2656">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="start" /> 小于 -1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2656">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>

<span data-ttu-id="7ec08-2657">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2657">-or-</span></span>

<span data-ttu-id="7ec08-2658">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="count" /> 大于 1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2658">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2659">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2659">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-2660">若要通过使用当前区域性的比较规则来执行此操作，请使用的 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2660">To perform this operation by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2661">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2661">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2662">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2662">The search starting position.</span></span> <span data-ttu-id="7ec08-2663">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2663">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2664">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2664">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2665">报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2665">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="7ec08-2666">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2666">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span> <span data-ttu-id="7ec08-2667">一个参数指定要执行搜索指定字符串的比较类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2667">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2668">如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2668">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2669">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2669">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2670">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2670">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="7ec08-2671">搜索从 `startIndex` 字符位置开始，一直向后移动，直到 `value` 找到或已检查第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2671">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="7ec08-2672">例如，如果 `startIndex` 为 <xref:System.String.Length%2A> -1，则方法会搜索字符串中最后一个字符的每个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2672">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>

 <span data-ttu-id="7ec08-2673">`comparisonType`参数指定 `value` 使用当前或固定区域性搜索参数，使用区分大小写或不区分大小写的搜索，以及使用 word 或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2673">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-2674">下面的示例演示了方法的三个重载 <xref:System.String.LastIndexOf%2A> ，这些重载使用枚举的不同值在另一个字符串内查找字符串的最后一个匹配项 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2674">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2675"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2675"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2676">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于当前实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2676">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>

<span data-ttu-id="7ec08-2677">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2677">-or-</span></span>

<span data-ttu-id="7ec08-2678">当前实例等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于-1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2678">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2679"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2679"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2680">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2680">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2681">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2681">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span>

<span data-ttu-id="7ec08-2682">在下面的示例中， <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> 方法用于查找软连字符 (U + 00AD 的位置) 后跟 "m"，从两个字符串中的最后一个 "m" 开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2682">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings.</span></span> <span data-ttu-id="7ec08-2683">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2683">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="7ec08-2684">如果在这两种情况下，该示例在 .NET Framework 4 或更高版本上运行，则在这两种情况下，因为软连字符为可忽略字符，所以当执行区分区域性的比较时，该方法将返回字符串中的 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2684">If the example is run on .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2685">请注意，对于包含软连字符后跟 "m" 的软连字符的第一个字符串，该方法返回 "m" 的索引，而不是软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2685">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method returns the index of the "m" and not the index of the soft hyphen.</span></span> <span data-ttu-id="7ec08-2686">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2686">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="7ec08-2687">[！ code-csharp[LastIndexOf # 25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)][！ code-vb[LastIndexOf # 25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2687">[!code-csharp[System.String.LastIndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)] [!code-vb[System.String.LastIndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2688">要搜寻的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2688">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2689">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2689">The search starting position.</span></span> <span data-ttu-id="7ec08-2690">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2690">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2691">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2691">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2692">指定搜索规则的枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2692">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="7ec08-2693">报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2693">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="7ec08-2694">搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2694">The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.</span></span> <span data-ttu-id="7ec08-2695">一个参数指定要执行搜索指定字符串的比较类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2695">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2696">如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2696">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2697">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2697">Index numbering starts from zero.</span></span> <span data-ttu-id="7ec08-2698">也就是说，字符串中的第一个字符位于索引零，最后一个字符为 <xref:System.String.Length%2A> -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2698">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="7ec08-2699">搜索从 `startIndex` 字符位置开始，一直向后移动，直到 `value` 找到或检查了个 `count` 字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2699">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="7ec08-2700">例如，如果 `startIndex` 为 <xref:System.String.Length%2A> -1，则该方法将在 `count` 字符串的最后一个字符中搜索向后字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2700">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>

 <span data-ttu-id="7ec08-2701">`comparisonType`参数指定 `value` 使用以下内容搜索参数：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2701">The `comparisonType` parameter specifies to search for the `value` parameter using:</span></span>

- <span data-ttu-id="7ec08-2702">当前区域性或固定区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2702">The current or invariant culture.</span></span>
- <span data-ttu-id="7ec08-2703">区分大小写或不区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2703">A case-sensitive or case-insensitive search.</span></span>
- <span data-ttu-id="7ec08-2704">字词比较规则或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2704">Word or ordinal comparison rules.</span></span>

## Examples
 <span data-ttu-id="7ec08-2705">下面的示例演示了方法的三个重载 <xref:System.String.LastIndexOf%2A> ，这些重载使用枚举的不同值在另一个字符串内查找字符串的最后一个匹配项 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2705">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2706"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2706"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2707"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2707"><paramref name="count" /> is negative.</span></span>

<span data-ttu-id="7ec08-2708">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2708">-or-</span></span>

<span data-ttu-id="7ec08-2709">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2709">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2710">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2710">-or-</span></span>

<span data-ttu-id="7ec08-2711">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2711">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>

<span data-ttu-id="7ec08-2712">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2712">-or-</span></span>

<span data-ttu-id="7ec08-2713">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> + 1 - <paramref name="count" /> 指定不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2713">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.</span></span>

<span data-ttu-id="7ec08-2714">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2714">-or-</span></span>

<span data-ttu-id="7ec08-2715">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="start" /> 小于 -1 或大于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2715">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>

<span data-ttu-id="7ec08-2716">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2716">-or-</span></span>

<span data-ttu-id="7ec08-2717">当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="count" /> 大于 1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2717">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2718"><paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2718"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2719">字符集包括可忽略字符，在执行语言性的或区分区域性的比较时该字符不被考虑。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2719">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2720">在区分区域性的搜索 (即，如果 <paramref name="comparisonType" /> 不是 <see cref="F:System.StringComparison.Ordinal" /> 或 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />) 中，如果 <paramref name="value" /> 包含一个可忽略字符，则结果与移除了该字符的搜索等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2720">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span>

<span data-ttu-id="7ec08-2721">在下面的示例中， <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 方法用于查找软连字符 (U + 00AD 的位置) 后跟一个 "m"，但在两个字符串中的最后一个字符位置之前的第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2721">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings.</span></span> <span data-ttu-id="7ec08-2722">只有一个字符串包含必需的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2722">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="7ec08-2723">如果在这两种情况下，该示例在 .NET Framework 4 或更高版本上运行，则在这两种情况下，因为软连字符为可忽略字符，所以当执行区分区域性的比较时，该方法将返回字符串中的 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2723">If the example is run on .NET Framework 4 or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2724">但当它执行序号比较时，它只查找第一个字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2724">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="7ec08-2725">请注意，对于包含软连字符后跟 "m" 的软连字符的第一个字符串，该方法在执行区分区域性的比较时返回 "m" 的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2725">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="7ec08-2726">只有当此方法执行序号比较时，它才会在第一个字符串中返回软连字符的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2726">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="7ec08-2727">[！ code-csharp[LastIndexOf # 24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)][！ code-vb[LastIndexOf # 24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</span><span class="sxs-lookup"><span data-stu-id="7ec08-2727">[!code-csharp[System.String.LastIndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)] [!code-vb[System.String.LastIndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2728">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2728">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="7ec08-2729">如果未在此实例中找到数组中的字符，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2729">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] -&gt; int" Usage="string.LastIndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="7ec08-2730">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2730">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="7ec08-2731">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2731">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2732">最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2732">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2733">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2733">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2734">此方法从该实例的最后一个字符位置开始搜索，并在开始时向后继续，直到找到中的字符 `anyOf` 或检查了第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2734">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="7ec08-2735">搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2735">The search is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2736">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2736">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2737">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2737">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2738">下面的示例查找字符串 "is" 中的任何字符在另一个字符串中的最后一个匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2738">The following example finds the index of the last occurrence of any character in the string "is" within another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny1/CPP/lastixany1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny1/CS/lastixany1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny1/VB/lastixany1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2739"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2739"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="7ec08-2740">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2740">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2741">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2741">The search starting position.</span></span> <span data-ttu-id="7ec08-2742">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2742">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-2743">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2743">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="7ec08-2744">在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2744">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2745">最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2745">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2746">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2746">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2747">此方法从 `startIndex` 该实例的字符位置开始搜索，并在开始时向后移动，直到找到中的字符 `anyOf` 或检查了第一个字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2747">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="7ec08-2748">搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2748">The search is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2749">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2749">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2750">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2750">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2751">下面的示例查找字符串 "is" 中任何字符的最后一个匹配项的索引，该字符串位于另一个字符串的子字符串中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2751">The following example finds the index of the last occurrence of any character in the string "is" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny2/CPP/lastixany2.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny2/CS/lastixany2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny2/VB/lastixany2.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2752"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2752"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2753">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 指定不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2753">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="7ec08-2754">Unicode 字符数组，包含一个或多个要查找的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2754">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="7ec08-2755">搜索起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2755">The search starting position.</span></span> <span data-ttu-id="7ec08-2756">从 <paramref name="startIndex" /> 此实例的开头开始搜索。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2756">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2757">要检查的字符位置数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2757">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="7ec08-2758">报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2758">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="7ec08-2759">搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2759">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2760">最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2760">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2761">索引编号从0开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2761">Index numbering starts from zero.</span></span>

 <span data-ttu-id="7ec08-2762">此方法从 `startIndex` 该实例的字符位置开始搜索，并在开始时向后移动，直到找到了中的一个字符 `anyOf` 或 `count` 已检查了个字符位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2762">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="7ec08-2763">搜索区分大小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2763">The search is case-sensitive.</span></span>

 <span data-ttu-id="7ec08-2764">此方法执行一个序号 (不区分区域性的) 搜索，其中，仅当字符的 Unicode 标量值相同时，才将其视为等效于另一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2764">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="7ec08-2765">若要执行区分区域性的搜索，请使用 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 方法，其中表示预构成字符的 Unicode 标量值（如连字 "Æ" (U + 00C6) ）可能被视为等效于正确序列中任何字符的组成部分（例如 "AE" (U + 0041，u + 0045) ，具体取决于区域性）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2765">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-2766">下面的示例查找字符串 "帮助" 中的任意字符在另一个字符串的子字符串中的最后一个匹配项的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2766">The following example finds the index of the last occurrence of any character in the string "aid" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny3/CPP/lastixany3.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny3/CS/lastixany3.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny3/VB/lastixany3.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2767"><paramref name="anyOf" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2767"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2768">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2768">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="7ec08-2769">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2769">-or-</span></span>

<span data-ttu-id="7ec08-2770">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 减去 <paramref name="count" /> 再加 1 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2770">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.String.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.string.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7ec08-2771">获取当前 <see cref="T:System.String" /> 对象中的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2771">Gets the number of characters in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="7ec08-2772">当前字符串中字符的数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2772">The number of characters in the current string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2773"><xref:System.String.Length%2A>属性返回 <xref:System.Char> 此实例中的对象数，而不是 Unicode 字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2773">The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="7ec08-2774">原因是 Unicode 字符可能由多个表示 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2774">The reason is that a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="7ec08-2775">使用 <xref:System.Globalization.StringInfo?displayProperty=nameWithType> 类来处理每个 Unicode 字符，而不是每个 Unicode 字符 <xref:System.Char> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2775">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with each Unicode character instead of each <xref:System.Char>.</span></span>

 <span data-ttu-id="7ec08-2776">在某些语言（如 C 和 c + +）中，空字符表示字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2776">In some languages, such as C and C++, a null character indicates the end of a string.</span></span> <span data-ttu-id="7ec08-2777">在 .NET 中，可以在字符串中嵌入空字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2777">In .NET, a null character can be embedded in a string.</span></span> <span data-ttu-id="7ec08-2778">如果字符串中包含一个或多个 null 字符，则它们将包含在总字符串的长度中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2778">When a string includes one or more null characters, they are included in the length of the total string.</span></span> <span data-ttu-id="7ec08-2779">例如，在下面的字符串中，子字符串 "abc" 和 "def" 由 null 字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2779">For example, in the following string, the substrings "abc" and "def" are separated by a null character.</span></span> <span data-ttu-id="7ec08-2780"><xref:System.String.Length%2A>属性返回7，这表示它包含六个字母字符以及 null 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2780">The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</span></span>

 [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]
 [!code-csharp-interactive[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]
 [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]

## Examples
 <span data-ttu-id="7ec08-2781">下面的示例演示了 <xref:System.String.Length%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2781">The following example demonstrates the <xref:System.String.Length%2A> property.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.length/CPP/length.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.length/CS/length.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.length/VB/length.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Normalize">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2782">返回一个新字符串，其二进制表示形式符合特定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2782">Returns a new string whose binary representation is in a particular Unicode normalization form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="7ec08-2783">下面的示例将一个字符串规范化为四个范式中的每一个，确认该字符串已规范化为指定范式，然后列出规范化字符串中的码位。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2783">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; string" Usage="string.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-2784">返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合 Unicode 范式 C。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2784">Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2785">一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式 C。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2785">A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2786">某些 Unicode 字符具有多个等效的二进制表示形式，其中包含组合和/或复合 Unicode 字符的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2786">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="7ec08-2787">例如，以下任何代码点都可以表示字母 "ắ"：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2787">For example, any of the following code points can represent the letter "ắ":</span></span>

- <span data-ttu-id="7ec08-2788">U + 1EAF</span><span class="sxs-lookup"><span data-stu-id="7ec08-2788">U+1EAF</span></span>

- <span data-ttu-id="7ec08-2789">U + 0103 U + 0301</span><span class="sxs-lookup"><span data-stu-id="7ec08-2789">U+0103 U+0301</span></span>

- <span data-ttu-id="7ec08-2790">U + 0061 U + 0306 U + 0301</span><span class="sxs-lookup"><span data-stu-id="7ec08-2790">U+0061 U+0306 U+0301</span></span>

 <span data-ttu-id="7ec08-2791">单个字符存在多个表示形式会使搜索、排序、匹配和其他操作复杂化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2791">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="7ec08-2792">Unicode 标准定义了一个名为规范化的进程，该进程在给定任何等效的二进制表示形式的字符时返回一个二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2792">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="7ec08-2793">可以通过多个算法（称为标准化形式）来执行规范化，它们遵循不同的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2793">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="7ec08-2794">.NET 支持由 Unicode 标准定义的四种范式 (C、D、GLM-KC-QNW 和 KD) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2794">.NET supports the four normalization forms (C, D, KC, and KD) that are defined by the Unicode standard.</span></span> <span data-ttu-id="7ec08-2795">如果两个字符串用同一范式表示，则可以使用序号比较对它们进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2795">When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>

 <span data-ttu-id="7ec08-2796">若要规范化和比较两个字符串，请执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2796">To normalize and compare two strings, do the following:</span></span>

1.  <span data-ttu-id="7ec08-2797">获取要从输入源（如文件或用户输入设备）进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2797">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>

2.  <span data-ttu-id="7ec08-2798">调用 <xref:System.String.Normalize> 方法以将字符串规范化为范式 C。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2798">Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.</span></span>

3.  <span data-ttu-id="7ec08-2799">若要比较两个字符串，请调用支持序号字符串比较的方法，如 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> 方法，并将或的值 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 作为参数提供 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2799">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="7ec08-2800">若要对规范化字符串数组进行排序，请将 `comparer` 或的值传递给的 <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> 适当重载 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2800">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>

4.  <span data-ttu-id="7ec08-2801">根据上一步指示的顺序，在已排序的输出中发出字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2801">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>

 <span data-ttu-id="7ec08-2802">有关支持的 Unicode 范式的说明，请参阅 <xref:System.Text.NormalizationForm?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2802">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2803">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2803">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2804">此 <see cref="Overload:System.String.IsNormalized" /> 方法 <see langword="false" /> 会在遇到字符串中第一个非规范化字符时立即返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2804">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="7ec08-2805">因此，如果字符串包含非规范化字符后跟无效的 Unicode 字符，则该 <see cref="Overload:System.String.Normalize" /> 方法将引发， <see cref="T:System.ArgumentException" /> 但 <see cref="Overload:System.String.IsNormalized" /> 返回 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2805">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize (normalizationForm As NormalizationForm) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.Normalize : System.Text.NormalizationForm -&gt; string" Usage="string.Normalize normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="7ec08-2806">一个 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2806">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="7ec08-2807">返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合指定的 Unicode 范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2807">Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2808">一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合由 <paramref name="normalizationForm" /> 参数指定的范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2808">A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2809">某些 Unicode 字符具有多个等效的二进制表示形式，其中包含组合和/或复合 Unicode 字符的集合。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2809">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="7ec08-2810">单个字符存在多个表示形式会使搜索、排序、匹配和其他操作复杂化。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2810">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="7ec08-2811">Unicode 标准定义了一个名为规范化的进程，该进程在给定任何等效的二进制表示形式的字符时返回一个二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2811">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="7ec08-2812">可以通过多个算法（称为标准化形式）来执行规范化，它们遵循不同的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2812">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="7ec08-2813">.NET 支持由 Unicode 标准定义的四种范式 (C、D、GLM-KC-QNW 和 KD) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2813">.NET supports the four normalization forms (C, D, KC, and KD) that are defined by the Unicode standard.</span></span> <span data-ttu-id="7ec08-2814">如果两个字符串用同一范式表示，则可以使用序号比较对它们进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2814">When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>

 <span data-ttu-id="7ec08-2815">若要规范化和比较两个字符串，请执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="7ec08-2815">To normalize and compare two strings, do the following:</span></span>

1.  <span data-ttu-id="7ec08-2816">获取要从输入源（如文件或用户输入设备）进行比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2816">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>

2.  <span data-ttu-id="7ec08-2817">调用 <xref:System.String.Normalize(System.Text.NormalizationForm)> 方法以将字符串规范化为指定的范式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2817">Call the <xref:System.String.Normalize(System.Text.NormalizationForm)> method to normalize the strings to a specified normalization form.</span></span>

3.  <span data-ttu-id="7ec08-2818">若要比较两个字符串，请调用支持序号字符串比较的方法，如 <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> 方法，并将或的值 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 作为参数提供 <xref:System.StringComparison> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2818">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare(System.String%2CSystem.String%2CSystem.StringComparison)> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="7ec08-2819">若要对规范化字符串数组进行排序，请将 `comparer` 或的值传递给的 <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> 适当重载 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2819">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>

4.  <span data-ttu-id="7ec08-2820">根据上一步指示的顺序，在已排序的输出中发出字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2820">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>

 <span data-ttu-id="7ec08-2821">有关支持的 Unicode 范式的说明，请参阅 <xref:System.Text.NormalizationForm?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2821">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2822">当前实例包含无效的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2822">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-2823">此 <see cref="Overload:System.String.IsNormalized" /> 方法 <see langword="false" /> 会在遇到字符串中第一个非规范化字符时立即返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2823">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="7ec08-2824">因此，如果字符串包含非规范化字符后跟无效的 Unicode 字符，则该 <see cref="Overload:System.String.Normalize" /> 方法可能会引发， <see cref="T:System.ArgumentException" /> 但 <see cref="Overload:System.String.IsNormalized" /> 返回 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2824">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method may throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (string a, string b);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Equality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member ( = ) : string * string -&gt; bool" Usage="a = b" />
      <MemberSignature Language="C#" Value="public static bool operator == (string? a, string? b);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="7ec08-2825">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2825">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="7ec08-2826">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2826">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-2827">确定两个指定的字符串是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2827">Determines whether two specified strings have the same value.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2828">如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2828"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2829"><xref:System.String.op_Equality%2A>方法定义类的相等运算符的运算 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2829">The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class.</span></span> <span data-ttu-id="7ec08-2830">它将启用示例部分中所示的代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2830">It enables code such as that shown in the Example section.</span></span> <span data-ttu-id="7ec08-2831">运算符反过来调用静态 <xref:System.String.Equals(System.String%2CSystem.String)> 方法，该方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2831">The operator, in turn, calls the static <xref:System.String.Equals(System.String%2CSystem.String)> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2832">Visual Basic 编译器不会将相等运算符解析为对方法的调用 <xref:System.String.op_Equality%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2832">The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method.</span></span> <span data-ttu-id="7ec08-2833">相反，相等运算符包装对方法的调用 <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2833">Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>

## Examples
 <span data-ttu-id="7ec08-2834">下面的示例演示了相等运算符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2834">The following example demonstrates the equality operator.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Equality/CPP/equalityop.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Equality/CS/equalityop.cs" interactive="try-dotnet" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;char&gt; (string? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;char&gt; op_Implicit(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;char&gt;(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.string.op_Implicit value" />
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;char&gt; (string value);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-2835">要隐式转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2835">A string to implicitly convert.</span></span></param>
        <summary><span data-ttu-id="7ec08-2836">定义给定字符串到只读字符范围的隐式转换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2836">Defines an implicit conversion of a given string to a read-only span of characters.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2837">表示字符串的新只读字符范围。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2837">A new read-only span of characters representing the string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (string a, string b);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Inequality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : string * string -&gt; bool" Usage="System.string.op_Inequality (a, b)" />
      <MemberSignature Language="C#" Value="public static bool operator != (string? a, string? b);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="7ec08-2838">要比较的第一个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2838">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="7ec08-2839">要比较的第二个字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2839">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-2840">确定两个指定的字符串是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2840">Determines whether two specified strings have different values.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2841">如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值不同，则为 <paramref name="b" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2841"><see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2842"><xref:System.String.op_Inequality%2A>方法为类定义不相等运算符的运算 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2842">The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.</span></span>   <span data-ttu-id="7ec08-2843">它将启用示例部分中所示的代码。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2843">It enables code such as that shown in the Examples section.</span></span>

 <span data-ttu-id="7ec08-2844"><xref:System.String.op_Inequality%2A>运算符反过来调用静态 <xref:System.String.Equals(System.String%2CSystem.String)> 方法，该方法执行 (区分大小写和不区分区域性的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2844">The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals(System.String%2CSystem.String)> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2845">Visual Basic 编译器不会将不相等运算符解析为对方法的调用 <xref:System.String.op_Inequality%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2845">The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method.</span></span> <span data-ttu-id="7ec08-2846">相反，不等运算符包装对方法的调用 <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2846">Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>

## Examples
 <span data-ttu-id="7ec08-2847">下面的示例演示不等运算符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2847">The following example demonstrates the inequality operator.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Inequality/CPP/inequalityop.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Inequality/CS/inequalityop.cs" interactive="try-dotnet" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PadLeft">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2848">返回一个指定长度的新字符串，其中在当前字符串的开头填充空格或指定的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2848">Returns a new string of a specified length in which the beginning of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int -&gt; string" Usage="string.PadLeft totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="7ec08-2849">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2849">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="7ec08-2850">返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2850">Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2851">与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2851">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="7ec08-2852">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2852">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="7ec08-2853">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2853">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2854">Unicode 空格定义为十六进制0x0020。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2854">A Unicode space is defined as hexadecimal 0x0020.</span></span>

 <span data-ttu-id="7ec08-2855"><xref:System.String.PadLeft(System.Int32)>方法用于填充返回的字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2855">The <xref:System.String.PadLeft(System.Int32)> method pads the beginning of the returned string.</span></span> <span data-ttu-id="7ec08-2856">这意味着，当与从右到左的语言结合使用时，它将填充字符串的右侧部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2856">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2857">如果 <xref:System.String.PadLeft%2A> 方法用空白字符填充当前实例，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2857">If the <xref:System.String.PadLeft%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2858">相反，它会返回一个新字符串，该字符串使用前导空格填充，使其总长度为 `totalWidth` 个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2858">Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.</span></span>

## Examples
 <span data-ttu-id="7ec08-2859">下面的示例演示 <xref:System.String.PadLeft%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2859">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CS/source.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2860"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2860"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int * char -&gt; string" Usage="string.PadLeft (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="7ec08-2861">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2861">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="7ec08-2862">Unicode 填充字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2862">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="7ec08-2863">返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2863">Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2864">与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2864">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="7ec08-2865">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2865">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="7ec08-2866">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2866">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2867"><xref:System.String.PadLeft(System.Int32%2CSystem.Char)>方法用于填充返回的字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2867">The <xref:System.String.PadLeft(System.Int32%2CSystem.Char)> method pads the beginning of the returned string.</span></span> <span data-ttu-id="7ec08-2868">这意味着，当与从右到左的语言结合使用时，它将填充字符串的右侧部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2868">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2869">如果 <xref:System.String.PadLeft%2A> 方法用空白字符填充当前实例，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2869">If the <xref:System.String.PadLeft%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2870">相反，它会返回一个新字符串，该字符串使用前导字符填充， `paddingChar` 使其总长度为 `totalWidth` 个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2870">Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>

## Examples
 <span data-ttu-id="7ec08-2871">下面的示例演示 <xref:System.String.PadLeft%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2871">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CS/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2872"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2872"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PadRight">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2873">返回一个指定长度的新字符串，其中在当前字符串的结尾填充空格或指定的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2873">Returns a new string of a specified length in which the end of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int -&gt; string" Usage="string.PadRight totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="7ec08-2874">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2874">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="7ec08-2875">返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2875">Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2876">与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2876">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="7ec08-2877">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2877">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="7ec08-2878">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2878">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2879">Unicode 空格定义为十六进制0x0020。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2879">A Unicode space is defined as hexadecimal 0x0020.</span></span>

 <span data-ttu-id="7ec08-2880"><xref:System.String.PadRight(System.Int32)>方法用于填充返回的字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2880">The <xref:System.String.PadRight(System.Int32)> method pads the end of the returned string.</span></span> <span data-ttu-id="7ec08-2881">这意味着，当与从右到左的语言结合使用时，它将填充字符串的左侧部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2881">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2882">如果 <xref:System.String.PadRight%2A> 方法用空白字符填充当前实例，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2882">If the <xref:System.String.PadRight%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2883">相反，它会返回一个新字符串，该字符串用尾随空格填充，使其总长度为 `totalWidth` 个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2883">Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.</span></span>

## Examples
 <span data-ttu-id="7ec08-2884">下面的示例演示 <xref:System.String.PadRight%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2884">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight Example/cs/source.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2885"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2885"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int * char -&gt; string" Usage="string.PadRight (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="7ec08-2886">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2886">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="7ec08-2887">Unicode 填充字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2887">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="7ec08-2888">返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2888">Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2889">与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2889">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="7ec08-2890">但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2890">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="7ec08-2891">如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2891">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2892"><xref:System.String.PadRight(System.Int32%2CSystem.Char)>方法用于填充返回的字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2892">The <xref:System.String.PadRight(System.Int32%2CSystem.Char)> method pads the end of the returned string.</span></span> <span data-ttu-id="7ec08-2893">这意味着，当与从右到左的语言结合使用时，它将填充字符串的左侧部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2893">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2894">如果 <xref:System.String.PadRight%2A> 方法用空白字符填充当前实例，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2894">If the <xref:System.String.PadRight%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2895">相反，它会返回一个新字符串，该字符串用尾随字符填充， `paddingChar` 使其总长度为 `totalWidth` 个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2895">Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>

## Examples
 <span data-ttu-id="7ec08-2896">下面的示例演示 <xref:System.String.PadRight%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2896">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/cs/source.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2897"><paramref name="totalWidth" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2897"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2898">返回一个新字符串，它相当于从当前字符串删除了指定数量的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2898">Returns a new string in which a specified number of characters from the current string are deleted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; string" Usage="string.Remove startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="7ec08-2899">开始删除字符的从零开始的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2899">The zero-based position to begin deleting characters.</span></span></param>
        <summary><span data-ttu-id="7ec08-2900">返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2900">Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2901">一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2901">A new string that is equivalent to this string except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2902">在中 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ，字符串是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2902">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="7ec08-2903">参数的值的 `startIndex` 范围可以介于0到字符串实例的长度之间。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2903">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2904">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2904">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2905">相反，它会返回一个新字符串，其中的所有字符都从 `startIndex` 一个位置移到原始字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2905">Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.</span></span>

## Examples
 <span data-ttu-id="7ec08-2906">下面的示例演示 <xref:System.String.Remove%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2906">The following example demonstrates the <xref:System.String.Remove%2A> method.</span></span> <span data-ttu-id="7ec08-2907">"下一步到最后一种情况" 从字符串的末尾开始删除从指定索引处开始的所有文本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2907">The next-to-last case removes all text starting from the specified index through the end of the string.</span></span> <span data-ttu-id="7ec08-2908">最后一种情况从指定的索引开始删除三个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2908">The last case removes three characters starting from the specified index.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.remove/CPP/r.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.remove/CS/r.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.remove/VB/r.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2909"><paramref name="startIndex" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2909"><paramref name="startIndex" /> is less than zero.</span></span>

<span data-ttu-id="7ec08-2910">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2910">-or-</span></span>

 <span data-ttu-id="7ec08-2911"><paramref name="startIndex" /> 指定不在此字符串中的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2911"><paramref name="startIndex" /> specifies a position that is not within this string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Remove : int * int -&gt; string" Usage="string.Remove (startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="7ec08-2912">开始删除字符的从零开始的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2912">The zero-based position to begin deleting characters.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-2913">要删除的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2913">The number of characters to delete.</span></span></param>
        <summary><span data-ttu-id="7ec08-2914">返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2914">Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2915">一个新字符串，除所删除的字符之外，该字符串与此实例等效。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2915">A new string that is equivalent to this instance except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2916">在中 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ，字符串是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2916">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="7ec08-2917">参数的值的 `startIndex` 范围可以介于0到字符串实例的长度之间。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2917">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2918">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2918">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2919">相反，它会返回一个新字符串，其中已删除参数指定的字符数 `count` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2919">Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed.</span></span> <span data-ttu-id="7ec08-2920">在指定的位置删除字符 `startIndex` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2920">The characters are removed at the position specified by `startIndex`.</span></span>

## Examples
 <span data-ttu-id="7ec08-2921">下面的示例演示如何删除完整名称中的中间名。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2921">The following example demonstrates how you can remove the middle name from a complete name.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringremove/CPP/stringremove.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringremove/CS/stringremove.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringremove/VB/stringremove.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-2922"><paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2922">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</span></span>

<span data-ttu-id="7ec08-2923">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-2923">-or-</span></span>

 <span data-ttu-id="7ec08-2924"><paramref name="startIndex" /> 加 <paramref name="count" /> 指定此实例之外的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2924"><paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2925">返回一个新字符串，其中已将当前字符串中的指定 Unicode 字符或 <see cref="T:System.String" /> 的所有匹配项替换为其他指定的 Unicode 字符或 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2925">Returns a new string in which all occurrences of a specified Unicode character or <see cref="T:System.String" /> in the current string are replaced with another specified Unicode character or <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(char oldChar, char newChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(char oldChar, char newChar);" />
      <MemberSignature Language="F#" Value="member this.Replace : char * char -&gt; string" Usage="string.Replace (oldChar, newChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="oldChar"><span data-ttu-id="7ec08-2926">要替换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2926">The Unicode character to be replaced.</span></span></param>
        <param name="newChar"><span data-ttu-id="7ec08-2927">要替换出现的所有 <paramref name="oldChar" /> 的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2927">The Unicode character to replace all occurrences of <paramref name="oldChar" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-2928">返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2928">Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2929">等效于此实例（除了 <paramref name="oldChar" /> 的所有实例都已替换为 <paramref name="newChar" /> 外）的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2929">A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</span></span> <span data-ttu-id="7ec08-2930">如果在当前实例中找不到 <paramref name="oldChar" />，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2930">If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2931">此方法执行 (区分大小写和不区分区域性的序号) 搜索以查找 `oldChar` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2931">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2932">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2932">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2933">相反，它会返回一个新字符串，其中的所有匹配项 `oldChar` 都将替换为 `newChar` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2933">Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.</span></span>

 <span data-ttu-id="7ec08-2934">由于此方法返回修改后的字符串，因此可以将对方法的连续调用链接在一起， <xref:System.String.Replace%2A> 以对原始字符串执行多次替换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2934">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="7ec08-2935">方法调用从左至右执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2935">Method calls are executed from left to right.</span></span> <span data-ttu-id="7ec08-2936">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2936">The following example provides an illustration.</span></span>

 [!code-csharp-interactive[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]
 [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]

## Examples
 <span data-ttu-id="7ec08-2937">下面的示例通过用逗号替换一系列数字之间的空格来创建逗号分隔值列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2937">The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</span></span>

 [!code-cpp[string.replace1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.replace1/CPP/string.replace1.cpp#1)]
 [!code-csharp-interactive[string.replace1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.replace1/CS/string.replace1.cs#1)]
 [!code-vb[string.replace1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.replace1/VB/string.replace1.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="string.Replace (oldValue, newValue)" />
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string? newValue);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="7ec08-2938">要替换的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2938">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="7ec08-2939">要替换 <paramref name="oldValue" /> 的所有匹配项的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2939">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-2940">返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2940">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2941">等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2941">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="7ec08-2942">如果在当前实例中找不到 <paramref name="oldValue" />，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2942">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-2943">如果 `newValue` 为 `null` ，则删除的所有匹配项 `oldValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2943">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2944">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2944">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2945">相反，它会返回一个新字符串，其中的所有匹配项 `oldValue` 都将替换为 `newValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2945">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>

 <span data-ttu-id="7ec08-2946">此方法执行 (区分大小写和不区分区域性的序号) 搜索以查找 `oldValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2946">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.</span></span>

 <span data-ttu-id="7ec08-2947">由于此方法返回修改后的字符串，因此可以将对方法的连续调用链接在一起， <xref:System.String.Replace%2A> 以对原始字符串执行多次替换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2947">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="7ec08-2948">方法调用从左至右执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2948">Method calls are executed from left to right.</span></span> <span data-ttu-id="7ec08-2949">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2949">The following example provides an illustration.</span></span>

 [!code-csharp-interactive[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
 [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]

## Examples
 <span data-ttu-id="7ec08-2950">下面的示例演示如何使用 <xref:System.String.Replace%2A> 方法更正拼写错误。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2950">The following example demonstrates how you can use the <xref:System.String.Replace%2A> method to correct a spelling error.</span></span>

 [!code-cpp[stringreplace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringreplace/CPP/stringreplace.cpp#1)]
 [!code-csharp-interactive[stringreplace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringreplace/CS/stringreplace.cs#1)]
 [!code-vb[stringreplace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringreplace/VB/stringreplace.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2951"><paramref name="oldValue" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2951"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2952"><paramref name="oldValue" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2952"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string? newValue, StringComparison comparisonType);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, comparisonType As StringComparison) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * StringComparison -&gt; string" Usage="string.Replace (oldValue, newValue, comparisonType)" />
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, StringComparison comparisonType);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="newValue" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="7ec08-2953">要替换的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2953">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="7ec08-2954">要替换 <paramref name="oldValue" /> 的所有匹配项的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2954">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-2955">枚举值之一，用于确定在此实例内搜索 <paramref name="oldValue" /> 的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2955">One of the enumeration values that determines how <paramref name="oldValue" /> is searched within this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-2956">返回一个新字符串，其中当前实例中出现的所有指定字符串都使用提供的比较类型替换为另一个指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2956">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided comparison type.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2957">等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2957">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="7ec08-2958">如果在当前实例中找不到 <paramref name="oldValue" />，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2958">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="7ec08-2959">如果 `newValue` 为 `null` ，则删除的所有匹配项 `oldValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2959">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2960">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2960">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2961">相反，它会返回一个新字符串，其中的所有匹配项 `oldValue` 都将替换为 `newValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2961">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>

<span data-ttu-id="7ec08-2962">此方法执行搜索以查找 `oldValue` 使用所述的区域性和区分大小写 `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2962">This method performs a search to find `oldValue` using the culture and case sensitivity described by `comparisonType`.</span></span>

<span data-ttu-id="7ec08-2963">由于此方法返回修改后的字符串，因此可以将对方法的连续调用链接在一起， <xref:System.String.Replace%2A> 以对原始字符串执行多次替换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2963">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="7ec08-2964">方法调用从左至右执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2964">Method calls are executed from left to right.</span></span> <span data-ttu-id="7ec08-2965">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2965">The following example provides an illustration.</span></span>

[!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
[!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2966"><paramref name="oldValue" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2966"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2967"><paramref name="oldValue" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2967"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string? newValue, bool ignoreCase, System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, ignoreCase As Boolean, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * bool * System.Globalization.CultureInfo -&gt; string" Usage="string.Replace (oldValue, newValue, ignoreCase, culture)" />
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, bool ignoreCase, System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="newValue" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="7ec08-2968">要替换的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2968">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="7ec08-2969">要替换 <paramref name="oldValue" /> 的所有匹配项的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2969">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-2970">在比较时忽略大小写则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2970"><see langword="true" /> to ignore casing when comparing; <see langword="false" /> otherwise.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-2971">比较时要使用的区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2971">The culture to use when comparing.</span></span></param>
        <summary><span data-ttu-id="7ec08-2972">返回一个新字符串，其中当前实例中出现的所有指定字符串都使用提供的区域性和区分大小写属性替换为另一个指定的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2972">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided culture and case sensitivity.</span></span></summary>
        <returns><span data-ttu-id="7ec08-2973">等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2973">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="7ec08-2974">如果在当前实例中找不到 <paramref name="oldValue" />，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2974">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="7ec08-2975">如果 `newValue` 为 `null` ，则删除的所有匹配项 `oldValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2975">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-2976">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2976">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-2977">相反，它会返回一个新字符串，其中的所有匹配项 `oldValue` 都将替换为 `newValue` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2977">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>

<span data-ttu-id="7ec08-2978">此方法 `oldValue` 使用提供的 `culture` 和 `ignoreCase` 区分大小写来执行搜索以查找。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2978">This method performs a search to find `oldValue` using the provided `culture` and `ignoreCase` case sensitivity.</span></span>

<span data-ttu-id="7ec08-2979">由于此方法返回修改后的字符串，因此可以将对方法的连续调用链接在一起， <xref:System.String.Replace%2A> 以对原始字符串执行多次替换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2979">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="7ec08-2980">方法调用从左至右执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2980">Method calls are executed from left to right.</span></span> <span data-ttu-id="7ec08-2981">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2981">The following example provides an illustration.</span></span>

[!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
[!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-2982"><paramref name="oldValue" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2982"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-2983"><paramref name="oldValue" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2983"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-2984">返回的字符串数组包含此实例中的子字符串（由指定字符串或 Unicode 字符数组的元素分隔）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2984">Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-2985"><xref:System.String.Split%2A> 用于将分隔的字符串拆分为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2985"><xref:System.String.Split%2A> is used to break a delimited string into substrings.</span></span> <span data-ttu-id="7ec08-2986">您可以使用字符数组或字符串数组来指定零个或多个分隔字符或字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2986">You can use either a character array or a string array to specify zero or more delimiting characters or strings.</span></span> <span data-ttu-id="7ec08-2987">如果未指定任何分隔字符，则将字符串拆分为空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2987">If no delimiting characters are specified, the string is split at white-space characters.</span></span>

<span data-ttu-id="7ec08-2988">使用方法的重载 <xref:System.String.Split%2A> ，可以限制方法)  (方法返回的子字符串的数量 <xref:System.String.Split(System.Char%5B%5D%2CSystem.Int32)> ，以指定是否在和方法)  (的结果中包含空字符串和/或剪裁子字符串 <xref:System.String.Split(System.Char%5B%5D%2CSystem.StringSplitOptions)> <xref:System.String.Split(System.String%5B%5D%2CSystem.StringSplitOptions)> ，或者 () <xref:System.String.Split(System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions)> 和 <xref:System.String.Split(System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2988">Overloads of the <xref:System.String.Split%2A> method allow you to limit the number of substrings returned by the method (the <xref:System.String.Split(System.Char%5B%5D%2CSystem.Int32)> method), to specify whether to include empty strings and/or trim substrings in the result (the <xref:System.String.Split(System.Char%5B%5D%2CSystem.StringSplitOptions)> and <xref:System.String.Split(System.String%5B%5D%2CSystem.StringSplitOptions)> methods), or to do both (the <xref:System.String.Split(System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions)> and <xref:System.String.Split(System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions)> methods).</span></span>

> [!TIP]
> <span data-ttu-id="7ec08-2989"><xref:System.String.Split%2A>方法并非总是将分隔的字符串拆分为子字符串的最佳方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2989">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="7ec08-2990">如果您不希望提取分隔字符串的所有子字符串，或者您想要基于某个模式（而不是一组分隔符字符）分析字符串，请考虑使用正则表达式，或将使用方法返回字符索引的搜索方法之一组合起来 <xref:System.String.Substring%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2990">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider using regular expressions, or combine one of the search methods that returns the index of a character with the <xref:System.String.Substring%2A> method.</span></span> <span data-ttu-id="7ec08-2991">有关详细信息，请参阅 [从字符串中提取子](/dotnet/standard/base-types/divide-up-strings)字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2991">For more information, see [Extract substrings from a string](/dotnet/standard/base-types/divide-up-strings).</span></span>

## <a name="example"></a><span data-ttu-id="7ec08-2992">示例</span><span class="sxs-lookup"><span data-stu-id="7ec08-2992">Example</span></span>

<span data-ttu-id="7ec08-2993">下面的示例显示了三种不同的 `String.Split()` 重载。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2993">The following examples show three different overloads of `String.Split()`.</span></span> <span data-ttu-id="7ec08-2994">第一个示例调用 <xref:System.String.Split(System.Char[])> 重载，并传入单个分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2994">The first example calls the <xref:System.String.Split(System.Char[])> overload and passes in a single delimiter.</span></span>

[!code-csharp-interactive[Intro#1](~/samples/snippets/csharp/system/string.split/intro.cs#1)]
[!code-vb[Intro#1](~/samples/snippets/visualbasic/system/string.split/intro.vb#1)]

<span data-ttu-id="7ec08-2995">正如你所看到的那样，两个子字符串之间包含句点字符 (`.`)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2995">As you can see, the period characters (`.`) are included in two of the substrings.</span></span> <span data-ttu-id="7ec08-2996">如果要排除句点字符，可以将句点字符添加为额外的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2996">If you want to exclude the period characters, you can add the period character as an additional delimiting character.</span></span> <span data-ttu-id="7ec08-2997">下面的示例演示了如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2997">The next example shows how to do this.</span></span>

[!code-csharp-interactive[Intro#2](~/samples/snippets/csharp/system/string.split/intro.cs#2)]
[!code-vb[Intro#2](~/samples/snippets/visualbasic/system/string.split/intro.vb#2)]

<span data-ttu-id="7ec08-2998">子字符串之间的句点消息，但现在包含了两个额外的空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2998">The periods are gone from the substrings, but now two extra empty substrings have been included.</span></span> <span data-ttu-id="7ec08-2999">这些空子字符串表示单词与其后的句点之间的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-2999">These empty substring represent the substring between a word and the period that follows it.</span></span> <span data-ttu-id="7ec08-3000">若要从生成的数组中删除空字符串，可以调用 <xref:System.String.Split(System.Char[],System.StringSplitOptions)> 重载，并为 `options` 参数指定 <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3000">To omit empty substrings from the resulting array, you can call the <xref:System.String.Split(System.Char[],System.StringSplitOptions)> overload and specify <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> for the `options` parameter.</span></span>

[!code-csharp-interactive[Intro#3](~/samples/snippets/csharp/system/string.split/intro.cs#3)]
[!code-vb[Intro#3](~/samples/snippets/visualbasic/system/string.split/intro.vb#3)]

<span data-ttu-id="7ec08-3001">各个重载的部分 `String.Split()` 包含进一步的示例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3001">The sections for the individual overloads of `String.Split()` contain further examples.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (params char[] separator);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (ParamArray separator As Char()) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(... cli::array &lt;char&gt; ^ separator);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] -&gt; string[]" Usage="string.Split separator" />
      <MemberSignature Language="C#" Value="public string[] Split (params char[]? separator);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3002">分隔字符的数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3002">An array of delimiting characters, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-3003">根据指定的分隔字符将字符串拆分为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3003">Splits a string into substrings based on specified delimiting characters.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3004">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3004">An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="7ec08-3005">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3005">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3006">当使用一组已知的字符分隔字符串时，可以使用 <xref:System.String.Split(System.Char%5B%5D)> 方法将其分隔为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3006">When a string is delimited by a known set of characters, you can use the <xref:System.String.Split(System.Char%5B%5D)> method to separate it into substrings.</span></span>

<span data-ttu-id="7ec08-3007">分隔符字符不包含在返回数组的元素中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3007">Delimiter characters are not included in the elements of the returned array.</span></span> <span data-ttu-id="7ec08-3008">例如，如果分隔符数组包含字符 "-"，而当前字符串实例的值为 "aa-bb-cc"，则该方法将返回包含三个元素的数组： "aa"、"bb" 和 "cc"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3008">For example, if the separator array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>

<span data-ttu-id="7ec08-3009">如果此实例不包含中的任何字符 `separator` ，则返回的数组由包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3009">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>

<span data-ttu-id="7ec08-3010">的每个元素 `separator` 定义单独的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3010">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="7ec08-3011">如果两个分隔符相邻，或在此实例的开头或结尾找到了分隔符，则返回数组中的相应元素包含 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3011">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

<span data-ttu-id="7ec08-3012">下表显示了一些示例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3012">The following table shows some examples.</span></span>

| <span data-ttu-id="7ec08-3013">语言</span><span class="sxs-lookup"><span data-stu-id="7ec08-3013">Language</span></span>     | <span data-ttu-id="7ec08-3014">字符串值</span><span class="sxs-lookup"><span data-stu-id="7ec08-3014">String value</span></span>             | <span data-ttu-id="7ec08-3015">Separator</span><span class="sxs-lookup"><span data-stu-id="7ec08-3015">Separator</span></span>              | <span data-ttu-id="7ec08-3016">返回数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-3016">Returned array</span></span>                 |
|--------------|--------------------------|------------------------|--------------------------------|
| <span data-ttu-id="7ec08-3017">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3017">C#</span></span>           | <span data-ttu-id="7ec08-3018">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3018">"42, 12, 19"</span></span>             | <span data-ttu-id="7ec08-3019">new Char [] {"，"，""}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3019">new Char[] {',', ' '}</span></span>  | <span data-ttu-id="7ec08-3020">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3020">{"42", "", "12", "", "19"}</span></span>     |
| <span data-ttu-id="7ec08-3021">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3021">Visual Basic</span></span> | <span data-ttu-id="7ec08-3022">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3022">"42, 12, 19"</span></span>             | <span data-ttu-id="7ec08-3023">Char () = {"，" c，"" c} ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-3023">Char() = {","c, " "c})</span></span> | <span data-ttu-id="7ec08-3024">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3024">{"42", "", "12", "", "19"}</span></span>     |
| <span data-ttu-id="7ec08-3025">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3025">C#</span></span>           | <span data-ttu-id="7ec08-3026">"42. 12 ... 19."</span><span class="sxs-lookup"><span data-stu-id="7ec08-3026">"42..12..19."</span></span>            | <span data-ttu-id="7ec08-3027">new Char [] {"."}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3027">new Char[] {'.'}</span></span>       | <span data-ttu-id="7ec08-3028">{"42"，""，"12"，""，"19"，""}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3028">{"42", "", "12", "", "19", ""}</span></span> |
| <span data-ttu-id="7ec08-3029">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3029">Visual Basic</span></span> | <span data-ttu-id="7ec08-3030">"42. 12 ... 19."</span><span class="sxs-lookup"><span data-stu-id="7ec08-3030">"42..12..19."</span></span>            | <span data-ttu-id="7ec08-3031">Char () = {"."ansi-c</span><span class="sxs-lookup"><span data-stu-id="7ec08-3031">Char() = {"."c}</span></span>        | <span data-ttu-id="7ec08-3032">{"42"，""，"12"，""，"19"，""}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3032">{"42", "", "12", "", "19", ""}</span></span> |
| <span data-ttu-id="7ec08-3033">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3033">C#</span></span>           | <span data-ttu-id="7ec08-3034">香蕉</span><span class="sxs-lookup"><span data-stu-id="7ec08-3034">"Banana"</span></span>                 | <span data-ttu-id="7ec08-3035">new Char [] {"."}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3035">new Char[] {'.'}</span></span>       | <span data-ttu-id="7ec08-3036">{"香蕉"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3036">{"Banana"}</span></span>                     |
| <span data-ttu-id="7ec08-3037">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3037">Visual Basic</span></span> | <span data-ttu-id="7ec08-3038">香蕉</span><span class="sxs-lookup"><span data-stu-id="7ec08-3038">"Banana"</span></span>                 | <span data-ttu-id="7ec08-3039">Char () = {"."ansi-c</span><span class="sxs-lookup"><span data-stu-id="7ec08-3039">Char() = {"."c}</span></span>        | <span data-ttu-id="7ec08-3040">{"香蕉"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3040">{"Banana"}</span></span>                     |
| <span data-ttu-id="7ec08-3041">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3041">C#</span></span>           | <span data-ttu-id="7ec08-3042">"Darb\nSmarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3042">"Darb\nSmarba"</span></span>           | <span data-ttu-id="7ec08-3043">new Char [] {}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3043">new Char[] {}</span></span>          | <span data-ttu-id="7ec08-3044">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3044">{"Darb", "Smarba"}</span></span>             |
| <span data-ttu-id="7ec08-3045">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3045">Visual Basic</span></span> | <span data-ttu-id="7ec08-3046">"Darb" & vbLf & "Smarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3046">"Darb" & vbLf & "Smarba"</span></span> | <span data-ttu-id="7ec08-3047">Char () = {}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3047">Char() = {}</span></span>            | <span data-ttu-id="7ec08-3048">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3048">{"Darb", "Smarba"}</span></span>             |
| <span data-ttu-id="7ec08-3049">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3049">C#</span></span>           | <span data-ttu-id="7ec08-3050">"Darb\nSmarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3050">"Darb\nSmarba"</span></span>           | <span data-ttu-id="7ec08-3051">Null</span><span class="sxs-lookup"><span data-stu-id="7ec08-3051">null</span></span>                   | <span data-ttu-id="7ec08-3052">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3052">{"Darb", "Smarba"}</span></span>             |
| <span data-ttu-id="7ec08-3053">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3053">Visual Basic</span></span> | <span data-ttu-id="7ec08-3054">"Darb" & vbLf & "Smarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3054">"Darb" & vbLf & "Smarba"</span></span> | <span data-ttu-id="7ec08-3055">无</span><span class="sxs-lookup"><span data-stu-id="7ec08-3055">Nothing</span></span>                | <span data-ttu-id="7ec08-3056">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3056">{"Darb", "Smarba"}</span></span>             |

### <a name="the-separator-array"></a><span data-ttu-id="7ec08-3057">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-3057">The separator array</span></span>

<span data-ttu-id="7ec08-3058">分隔符的每个元素都定义一个由单个字符组成的单独分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3058">Each element of separator defines a separate delimiter that consists of a single character.</span></span>

<span data-ttu-id="7ec08-3059">如果 `separator` 参数为 `null` 或不包含任何字符，则该方法将空白字符视为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3059">If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters.</span></span> <span data-ttu-id="7ec08-3060">空白字符由 Unicode 标准定义， <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> `true` 如果向其传递空白字符，该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3060">White-space characters are defined by the Unicode standard, and the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method returns `true` if a white-space character is passed to it.</span></span>

### <a name="stringsplitchar-and-compiler-overload-resolution"></a><span data-ttu-id="7ec08-3061">字符串拆分 (Char [] ) 和编译器重载决策</span><span class="sxs-lookup"><span data-stu-id="7ec08-3061">String.Split(Char[]) and compiler overload resolution</span></span>

<span data-ttu-id="7ec08-3062">尽管此重载的单个参数 <xref:System.String.Split%2A?displayProperty=nameWithType> 是字符数组，但你可以使用单个字符调用它，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3062">Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=nameWithType> is a character array, you can call it with a single character, as the following example shows.</span></span>

[!code-csharp-interactive[CompilerResolution#1](~/samples/snippets/csharp/system/string.split/compiler-resolution.cs#1)]
[!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/system/string.split/compiler-resolution.vb#12)]

<span data-ttu-id="7ec08-3063">由于 `separator` 参数使用特性进行修饰 <xref:System.ParamArrayAttribute> ，因此编译器会将单个字符解释为单元素字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3063">Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array.</span></span> <span data-ttu-id="7ec08-3064">这种情况并非 <xref:System.String.Split%2A?displayProperty=nameWithType> 包含参数的其他重载的情况 `separator` ; 必须以参数形式将字符数组显式传递给这些重载 `separator` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3064">This is not the case for other <xref:System.String.Split%2A?displayProperty=nameWithType> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.</span></span>

### <a name="comparison-details"></a><span data-ttu-id="7ec08-3065">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="7ec08-3065">Comparison details</span></span>

<span data-ttu-id="7ec08-3066"><xref:System.String.Split(System.Char%5B%5D)>方法提取此字符串中的子字符串，这些子字符串由数组中的一个或多个字符分隔 `separator` ，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3066">The <xref:System.String.Split(System.Char%5B%5D)> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.</span></span>

<span data-ttu-id="7ec08-3067"><xref:System.String.Split(System.Char%5B%5D)>方法通过使用区分大小写的序号排序规则执行比较来查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3067">The <xref:System.String.Split(System.Char%5B%5D)> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="7ec08-3068">有关 word、字符串和序号排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3068">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="7ec08-3069">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3069">Performance considerations</span></span>

<span data-ttu-id="7ec08-3070"><xref:System.String.Split%2A>方法为返回的数组对象分配内存，并为 <xref:System.String> 每个数组元素分配一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3070">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="7ec08-3071">如果你的应用程序需要最佳性能，或者在你的应用程序中管理内存分配非常重要，请考虑使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3071">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method.</span></span> <span data-ttu-id="7ec08-3072">你还可以选择使用 <xref:System.String.Compare%2A> 方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3072">You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.</span></span>

<span data-ttu-id="7ec08-3073">若要在分隔符处拆分字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法在字符串中查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3073">To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="7ec08-3074">若要将字符串拆分为分隔符字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3074">To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="7ec08-3075">然后，使用 <xref:System.String.Compare%2A> 方法来确定第一个字符后面的字符是否等于分隔符字符串的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3075">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

<span data-ttu-id="7ec08-3076">此外，如果使用相同的字符集拆分多个方法调用中的字符串 <xref:System.String.Split%2A> ，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3076">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="7ec08-3077">这可以显著降低每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3077">This significantly reduces the additional overhead of each method call.</span></span>

## Examples

<span data-ttu-id="7ec08-3078">下面的示例演示了如何通过将空格字符 (` `) 和制表符 (`\t`) 作为分隔符来从文本块提取各个单词。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3078">The following example demonstrates how to extract individual words from a block of text by treating the space character (` `) and tab character (`\t`) as delimiters.</span></span> <span data-ttu-id="7ec08-3079">要拆分的字符串同时包含这两个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3079">The string being split includes both of these characters.</span></span>

[!code-csharp-interactive[System.String.Split#1](~/samples/snippets/csharp/system/string.split/basic.cs#1)]
[!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/system/string.split/basic.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3080">在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，如果向 <see cref="M:System.String.Split(System.Char[])" /> 方法传递的 <paramref name="separator" /> 是 <see langword="null" /> 或不包含任何字符，则该方法将使用一组略微不同的空白字符来拆分字符串，而不是使用 <see cref="M:System.String.Trim(System.Char[])" /> 方法来剪裁字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3080">In [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of white-space characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="7ec08-3081">从 .NET Framework 4 开始，这两个方法都使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3081">Starting with .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3082">一个字符，用于分隔此字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3082">A character that delimits the substrings in this string.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3083">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3083">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3084">基于指定的分隔字符和（可选）选项将字符串拆分为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3084">Splits a string into substrings based on a specified delimiting character and, optionally, options.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3085">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3085">An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int -&gt; string[]" Usage="string.Split (separator, count)" />
      <MemberSignature Language="C#" Value="public string[] Split (char[]? separator, int count);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3086">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3086">An array of characters that delimit the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-3087">要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3087">The maximum number of substrings to return.</span></span></param>
        <summary><span data-ttu-id="7ec08-3088">根据指定的分隔字符将一个字符串拆分成最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3088">Splits a string into a maximum number of substrings based on specified delimiting characters.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3089">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3089">An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="7ec08-3090">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3090">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3091">分隔符字符不包含在返回数组的元素中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3091">Delimiter characters are not included in the elements of the returned array.</span></span>

 <span data-ttu-id="7ec08-3092">如果此实例不包含中的任何字符 `separator` ，则返回的数组由包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3092">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="7ec08-3093">如果 `count` 为零，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3093">If `count` is zero, an empty array is returned.</span></span>

 <span data-ttu-id="7ec08-3094">如果 `separator` 参数为 `null` 或不包含任何字符，则假定空格字符为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3094">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="7ec08-3095">空白字符由 Unicode 标准定义， <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> `true` 如果传递给它，则方法将返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3095">White-space characters are defined by the Unicode standard and the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method returns `true` if they are passed to it.</span></span>

 <span data-ttu-id="7ec08-3096">的每个元素 `separator` 定义单独的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3096">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="7ec08-3097">如果两个分隔符相邻，或在此实例的开头或结尾找到了分隔符，则对应的数组元素包含 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3097">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

 <span data-ttu-id="7ec08-3098">如果 `count` 此实例中有多个子字符串，则返回 `count - 1` 值的第一个元素中会返回第一个子字符串 `count - 1` ，并且返回值的最后一个元素中会返回此实例中的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3098">If there are more than `count` substrings in this instance, the first `count - 1` substrings are returned in the first `count - 1` elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>

 <span data-ttu-id="7ec08-3099">如果 `count` 大于子字符串的数目，则将返回可用的子字符串，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3099">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>

<span data-ttu-id="7ec08-3100">下表显示了一些示例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3100">The following table shows some examples.</span></span>

| <span data-ttu-id="7ec08-3101">语言</span><span class="sxs-lookup"><span data-stu-id="7ec08-3101">Language</span></span>     | <span data-ttu-id="7ec08-3102">字符串值</span><span class="sxs-lookup"><span data-stu-id="7ec08-3102">String value</span></span>             | <span data-ttu-id="7ec08-3103">Separator</span><span class="sxs-lookup"><span data-stu-id="7ec08-3103">Separator</span></span>              | <span data-ttu-id="7ec08-3104">返回数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-3104">Returned array</span></span>                 |
|--------------|--------------------------|------------------------|--------------------------------|
| <span data-ttu-id="7ec08-3105">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3105">C#</span></span>           | <span data-ttu-id="7ec08-3106">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3106">"42, 12, 19"</span></span>             | <span data-ttu-id="7ec08-3107">new Char [] {"，"，""}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3107">new Char[] {',', ' '}</span></span>  | <span data-ttu-id="7ec08-3108">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3108">{"42", "", "12", "", "19"}</span></span>     |
| <span data-ttu-id="7ec08-3109">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3109">Visual Basic</span></span> | <span data-ttu-id="7ec08-3110">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3110">"42, 12, 19"</span></span>             | <span data-ttu-id="7ec08-3111">Char () = {"，" c，"" c} ) </span><span class="sxs-lookup"><span data-stu-id="7ec08-3111">Char() = {","c, " "c})</span></span> | <span data-ttu-id="7ec08-3112">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3112">{"42", "", "12", "", "19"}</span></span>     |
| <span data-ttu-id="7ec08-3113">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3113">C#</span></span>           | <span data-ttu-id="7ec08-3114">"42. 12 ... 19."</span><span class="sxs-lookup"><span data-stu-id="7ec08-3114">"42..12..19."</span></span>            | <span data-ttu-id="7ec08-3115">new Char [] {"."}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3115">new Char[] {'.'}</span></span>       | <span data-ttu-id="7ec08-3116">{"42"，""，"12"，""，"19"，""}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3116">{"42", "", "12", "", "19", ""}</span></span> |
| <span data-ttu-id="7ec08-3117">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3117">Visual Basic</span></span> | <span data-ttu-id="7ec08-3118">"42. 12 ... 19."</span><span class="sxs-lookup"><span data-stu-id="7ec08-3118">"42..12..19."</span></span>            | <span data-ttu-id="7ec08-3119">Char () = {"."ansi-c</span><span class="sxs-lookup"><span data-stu-id="7ec08-3119">Char() = {"."c}</span></span>        | <span data-ttu-id="7ec08-3120">{"42"，""，"12"，""，"19"，""}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3120">{"42", "", "12", "", "19", ""}</span></span> |
| <span data-ttu-id="7ec08-3121">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3121">C#</span></span>           | <span data-ttu-id="7ec08-3122">香蕉</span><span class="sxs-lookup"><span data-stu-id="7ec08-3122">"Banana"</span></span>                 | <span data-ttu-id="7ec08-3123">new Char [] {"."}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3123">new Char[] {'.'}</span></span>       | <span data-ttu-id="7ec08-3124">{"香蕉"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3124">{"Banana"}</span></span>                     |
| <span data-ttu-id="7ec08-3125">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3125">Visual Basic</span></span> | <span data-ttu-id="7ec08-3126">香蕉</span><span class="sxs-lookup"><span data-stu-id="7ec08-3126">"Banana"</span></span>                 | <span data-ttu-id="7ec08-3127">Char () = {"."ansi-c</span><span class="sxs-lookup"><span data-stu-id="7ec08-3127">Char() = {"."c}</span></span>        | <span data-ttu-id="7ec08-3128">{"香蕉"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3128">{"Banana"}</span></span>                     |
| <span data-ttu-id="7ec08-3129">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3129">C#</span></span>           | <span data-ttu-id="7ec08-3130">"Darb\nSmarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3130">"Darb\nSmarba"</span></span>           | <span data-ttu-id="7ec08-3131">new Char [] {}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3131">new Char[] {}</span></span>          | <span data-ttu-id="7ec08-3132">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3132">{"Darb", "Smarba"}</span></span>             |
| <span data-ttu-id="7ec08-3133">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3133">Visual Basic</span></span> | <span data-ttu-id="7ec08-3134">"Darb" & vbLf & "Smarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3134">"Darb" & vbLf & "Smarba"</span></span> | <span data-ttu-id="7ec08-3135">Char () = {}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3135">Char() = {}</span></span>            | <span data-ttu-id="7ec08-3136">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3136">{"Darb", "Smarba"}</span></span>             |
| <span data-ttu-id="7ec08-3137">C#</span><span class="sxs-lookup"><span data-stu-id="7ec08-3137">C#</span></span>           | <span data-ttu-id="7ec08-3138">"Darb\nSmarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3138">"Darb\nSmarba"</span></span>           | <span data-ttu-id="7ec08-3139">Null</span><span class="sxs-lookup"><span data-stu-id="7ec08-3139">null</span></span>                   | <span data-ttu-id="7ec08-3140">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3140">{"Darb", "Smarba"}</span></span>             |
| <span data-ttu-id="7ec08-3141">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="7ec08-3141">Visual Basic</span></span> | <span data-ttu-id="7ec08-3142">"Darb" & vbLf & "Smarba"</span><span class="sxs-lookup"><span data-stu-id="7ec08-3142">"Darb" & vbLf & "Smarba"</span></span> | <span data-ttu-id="7ec08-3143">无</span><span class="sxs-lookup"><span data-stu-id="7ec08-3143">Nothing</span></span>                | <span data-ttu-id="7ec08-3144">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="7ec08-3144">{"Darb", "Smarba"}</span></span>             |

### <a name="performance-considerations"></a><span data-ttu-id="7ec08-3145">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3145">Performance considerations</span></span>
 <span data-ttu-id="7ec08-3146"><xref:System.String.Split%2A>方法为返回的数组对象分配内存，并为 <xref:System.String> 每个数组元素分配一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3146">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="7ec08-3147">如果你的应用程序需要最佳性能，或者在你的应用程序中管理内存分配非常重要，请考虑使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法，并根据需要使用 <xref:System.String.Compare%2A> 方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3147">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="7ec08-3148">如果要在分隔符处拆分字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法来查找字符串中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3148">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="7ec08-3149">如果要将字符串拆分为分隔符字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3149">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="7ec08-3150">然后，使用 <xref:System.String.Compare%2A> 方法来确定第一个字符后面的字符是否等于分隔符字符串的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3150">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="7ec08-3151">此外，如果使用相同的字符集拆分多个方法调用中的字符串 <xref:System.String.Split%2A> ，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3151">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="7ec08-3152">这可以显著降低每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3152">This significantly reduces the additional overhead of each method call.</span></span>

## Examples
 <span data-ttu-id="7ec08-3153">下面的示例演示如何 `count` 使用来限制返回的字符串的数目 <xref:System.String.Split%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3153">The following example demonstrates how `count` can be used to limit the number of strings returned by <xref:System.String.Split%2A>.</span></span>

[!code-csharp-interactive[String.Split#1](~/samples/snippets/csharp/system/string.split/limit.cs#1)]
[!code-vb[String.Split#1](~/samples/snippets/visualbasic/system/string.split/limit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-3154"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3154"><paramref name="count" /> is negative.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3155">在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，如果向 <see cref="M:System.String.Split(System.Char[])" /> 方法传递的 <paramref name="separator" /> 是 <see langword="null" /> 或不包含任何字符，则该方法将使用一组略微不同的空白字符来拆分字符串，而不是使用 <see cref="M:System.String.Trim(System.Char[])" /> 方法来剪裁字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3155">In [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of white-space characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="7ec08-3156">从 .NET Framework 4 开始，这两个方法都使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3156">Starting with .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, StringSplitOptions options);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberSignature Language="C#" Value="public string[] Split (char[]? separator, StringSplitOptions options);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3157">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3157">An array of characters that delimit the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3158">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3158">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3159">根据指定的分隔字符和选项将字符串拆分为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3159">Splits a string into substrings based on specified delimiting characters and options.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3160">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3160">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="7ec08-3161">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3161">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3162">分隔符字符 (数组中的字符 `separator`) 不包含在返回数组的元素中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3162">Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array.</span></span> <span data-ttu-id="7ec08-3163">例如，如果 `separator` 数组包含字符 "-"，而当前字符串实例的值为 "aa-bb-cc"，则该方法将返回包含三个元素的数组： "aa"、"bb" 和 "cc"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3163">For example, if the `separator` array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>

<span data-ttu-id="7ec08-3164">如果此实例不包含中的任何字符 `separator` ，则返回的数组由包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3164">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>

<span data-ttu-id="7ec08-3165">如果 `options` 参数为 <xref:System.StringSplitOptions.RemoveEmptyEntries> ，并且此实例的长度为零，则该方法将返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3165">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>

<span data-ttu-id="7ec08-3166">的每个元素都 `separator` 定义一个由单个字符组成的单独分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3166">Each element of `separator` defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="7ec08-3167">如果 `options` 参数为 <xref:System.StringSplitOptions.None> ，并且两个分隔符相邻，或在此实例的开头或结尾找到了分隔符，则对应的数组元素包含 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3167">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-3168">例如，如果 `separator` 包含两个元素， `'-'` 并且 `'_'` 字符串实例的值为 "- \_ aa- \_ "，并且参数的值 `options` 为 <xref:System.StringSplitOptions.None> ，则该方法将返回一个字符串数组，其中包含以下五个元素：</span><span class="sxs-lookup"><span data-stu-id="7ec08-3168">For example, if `separator` includes two elements, `'-'` and `'_'`, the value of the string instance is "-\_aa-\_", and the value of the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:</span></span>

1. <span data-ttu-id="7ec08-3169"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引0处的 "-" 字符之前的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3169"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" character at index 0.</span></span>

2. <span data-ttu-id="7ec08-3170"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引0处的 "-" 字符和索引1处 "_" 字符之间的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3170"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" character at index 0 and the "_" character at index 1.</span></span>

3. <span data-ttu-id="7ec08-3171">"aa"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3171">"aa".</span></span>

4. <span data-ttu-id="7ec08-3172"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引4处的 "-" 字符后面的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3172"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" character at index 4.</span></span>

5. <span data-ttu-id="7ec08-3173"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引5的 "_" 字符之后的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3173"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" character at index 5.</span></span>

### <a name="the-separator-array"></a><span data-ttu-id="7ec08-3174">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-3174">The separator array</span></span>

<span data-ttu-id="7ec08-3175">如果 `separator` 参数为 `null` 或不包含任何字符，则假定空格字符为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3175">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="7ec08-3176">空白字符由 Unicode 标准定义， <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> `true` 如果传递给它，则方法将返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3176">White-space characters are defined by the Unicode standard and the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method returns `true` if they are passed to it.</span></span>

<span data-ttu-id="7ec08-3177">若要 `null` 为 `char[] separator` 参数传递，必须指示的类型， `null` 以消除其他一些重载（如）的调用 <xref:System.String.Split(System.String[],System.StringSplitOptions)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3177">To pass `null` for the `char[] separator` parameter, you must indicate the type of the `null` to disambiguate the call from some other overloads, such as <xref:System.String.Split(System.String[],System.StringSplitOptions)>.</span></span> <span data-ttu-id="7ec08-3178">下面的示例演示了几种明确识别此重载的方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3178">The following example shows several ways to unambiguously identify this overload.</span></span>

[!code-csharp-interactive[Identify#5](~/samples/snippets/csharp/system/string.split/identify.cs#5)]
[!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/system/string.split/identify.vb#5)]

### <a name="comparison-details"></a><span data-ttu-id="7ec08-3179">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="7ec08-3179">Comparison details</span></span>
 <span data-ttu-id="7ec08-3180"><xref:System.String.Split%2A>方法提取此字符串中的子字符串，这些子字符串由参数中的一个或多个字符分隔 `separator` ，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3180">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="7ec08-3181"><xref:System.String.Split%2A>方法通过使用区分大小写的序号排序规则执行比较来查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3181">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="7ec08-3182">有关 word、字符串和序号排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3182">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="7ec08-3183">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3183">Performance considerations</span></span>
 <span data-ttu-id="7ec08-3184"><xref:System.String.Split%2A>方法为返回的数组对象分配内存，并为 <xref:System.String> 每个数组元素分配一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3184">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="7ec08-3185">如果你的应用程序需要最佳性能，或者在你的应用程序中管理内存分配非常重要，请考虑使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法，并根据需要使用 <xref:System.String.Compare%2A> 方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3185">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="7ec08-3186">如果要在分隔符处拆分字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法来查找字符串中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3186">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="7ec08-3187">如果要将字符串拆分为分隔符字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3187">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="7ec08-3188">然后，使用 <xref:System.String.Compare%2A> 方法来确定第一个字符后面的字符是否等于分隔符字符串的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3188">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="7ec08-3189">此外，如果使用相同的字符集拆分多个方法调用中的字符串 <xref:System.String.Split%2A> ，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3189">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="7ec08-3190">这可以显著降低每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3190">This significantly reduces the additional overhead of each method call.</span></span>

## Examples
 <span data-ttu-id="7ec08-3191">下面的示例使用 <xref:System.StringSplitOptions> 枚举来包括或排除方法生成的子字符串 <xref:System.String.Split%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3191">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>

 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[Options#1](~/samples/snippets/csharp/system/string.split/options.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/system/string.split/omit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-3192"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3192"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3193">在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，如果向 <see cref="M:System.String.Split(System.Char[])" /> 方法传递的 <paramref name="separator" /> 是 <see langword="null" /> 或不包含任何字符，则该方法将使用一组略微不同的空白字符来拆分字符串，而不是使用 <see cref="M:System.String.Trim(System.Char[])" /> 方法来剪裁字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3193">In [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of white-space characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="7ec08-3194">从 .NET Framework 4 开始，这两个方法都使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3194">Starting with .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string? separator, StringSplitOptions options = System.StringSplitOptions.None);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberSignature Language="C#" Value="public string[] Split (string separator, StringSplitOptions options = System.StringSplitOptions.None);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3195">一个字符串，用于分隔此字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3195">A string that delimits the substrings in this string.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3196">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3196">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3197">根据提供的字符串分隔符将字符串拆分为多个子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3197">Splits a string into substrings that are based on the provided string separator.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3198">一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3198">An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, StringSplitOptions options);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberSignature Language="C#" Value="public string[] Split (string[]? separator, StringSplitOptions options);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3199">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3199">An array of strings that delimit the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3200">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3200">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3201">基于指定的分隔字符串和（可选）选项将字符串拆分为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3201">Splits a string into substrings based on a specified delimiting string and, optionally, options.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3202">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3202">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="7ec08-3203">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3203">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3204">当使用一组已知的字符串分隔字符串时，可以使用 <xref:System.String.Split%2A> 方法将其分隔为子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3204">When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.</span></span>

<span data-ttu-id="7ec08-3205">分隔符字符串不包含在返回数组的元素中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3205">Delimiter strings are not included in the elements of the returned array.</span></span> <span data-ttu-id="7ec08-3206">例如，如果 `separator` 数组包含字符串 "--"，而当前字符串实例的值为 "aa--bb--cc"，则该方法将返回包含三个元素的数组： "aa"、"bb" 和 "cc"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3206">For example, if the `separator` array includes the string "--" and the value of the current string instance is "aa--bb--cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>

<span data-ttu-id="7ec08-3207">如果此实例不包含中的任何字符串 `separator` ，则返回的数组包含一个包含此实例的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3207">If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.</span></span>

<span data-ttu-id="7ec08-3208">如果 `options` 参数为 <xref:System.StringSplitOptions.RemoveEmptyEntries> ，并且此实例的长度为零，则该方法将返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3208">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>

<span data-ttu-id="7ec08-3209">的每个元素都 `separator` 定义一个由一个或多个字符组成的单独分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3209">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="7ec08-3210">如果 `options` 参数为 <xref:System.StringSplitOptions.None> ，并且两个分隔符相邻，或在此实例的开头或结尾找到了分隔符，则对应的数组元素包含 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3210">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-3211">例如，如果 `separator` 包含两个元素 "-" 和 " \_ "，则字符串实例的值为 "- \_ aa- \_ "，而参数的值 `options` 为 <xref:System.StringSplitOptions.None> ，则该方法返回一个字符串数组，其中包含以下五个元素：</span><span class="sxs-lookup"><span data-stu-id="7ec08-3211">For example, if `separator` includes two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:</span></span>

1. <span data-ttu-id="7ec08-3212"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引0处的 "-" 子字符串之前的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3212"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" substring at index 0.</span></span>

2. <span data-ttu-id="7ec08-3213"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引0处的 "-" 子字符串与索引1处的 "_" 子字符串之间的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3213"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" substring at index 0 and the "_" substring at index 1.</span></span>

3. <span data-ttu-id="7ec08-3214">"aa"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3214">"aa".</span></span>

4. <span data-ttu-id="7ec08-3215"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引4处的 "-" 子字符串后面的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3215"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" substring at index 4.</span></span>

5. <span data-ttu-id="7ec08-3216"><xref:System.String.Empty?displayProperty=nameWithType>，它表示位于索引5的 "_" 子字符串之后的空字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3216"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" substring at index 5.</span></span>

### <a name="the-separator-array"></a><span data-ttu-id="7ec08-3217">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-3217">The separator array</span></span>

<span data-ttu-id="7ec08-3218">如果中的任何元素 `separator` 包含多个字符，则整个子字符串被视为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3218">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="7ec08-3219">例如，如果中的一个元素 `separator` 为 "10"，则尝试拆分字符串 "This10is10a10string"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3219">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="7ec08-3220">返回以下四元素数组： {"This"、"is"、"a"、"string"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3220">returns the following four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="7ec08-3221">}.</span><span class="sxs-lookup"><span data-stu-id="7ec08-3221">}.</span></span>

<span data-ttu-id="7ec08-3222">如果 `separator` 参数为 `null` 或不包含非空字符串，则假定空格字符作为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3222">If the `separator` parameter is `null` or contains no non-empty strings, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="7ec08-3223">空白字符由 Unicode 标准定义， <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> `true` 如果传递给它，则方法将返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3223">White-space characters are defined by the Unicode standard and the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method returns `true` if they are passed to it.</span></span>

<span data-ttu-id="7ec08-3224">若要 `null` 为 `string[] separator` 参数传递，必须指示的类型， `null` 以消除其他一些重载（如）的调用 <xref:System.String.Split(System.Char[],System.StringSplitOptions)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3224">To pass `null` for the `string[] separator` parameter, you must indicate the type of the `null` to disambiguate the call from some other overloads, such as <xref:System.String.Split(System.Char[],System.StringSplitOptions)>.</span></span> <span data-ttu-id="7ec08-3225">下面的示例演示了几种明确识别此重载的方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3225">The following example shows several ways to unambiguously identify this overload.</span></span>

[!code-csharp-interactive[Identify#6](~/samples/snippets/csharp/system/string.split/identify.cs#6)]
[!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/system/string.split/identify.vb#6)]

### <a name="comparison-details"></a><span data-ttu-id="7ec08-3226">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="7ec08-3226">Comparison details</span></span>
 <span data-ttu-id="7ec08-3227"><xref:System.String.Split%2A>方法提取此字符串中的子字符串，这些子字符串由参数中的一个或多个字符串分隔 `separator` ，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3227">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="7ec08-3228"><xref:System.String.Split%2A>方法通过使用区分大小写的序号排序规则执行比较来查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3228">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="7ec08-3229">有关 word、字符串和序号排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3229">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

 <span data-ttu-id="7ec08-3230"><xref:System.String.Split%2A>方法将忽略 `separator` 其值为 `null` 或空字符串 ( "" ) 的任何元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3230">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>

 <span data-ttu-id="7ec08-3231">若要在中的字符串具有相同的字符时避免出现不明确的结果， `separator` 则 <xref:System.String.Split%2A> 操作将从实例值的开头开始，并与中的第一个元素（ `separator` 等于实例中的分隔符）匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3231">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="7ec08-3232">实例中的子字符串的出现顺序优先于中元素的顺序 `separator` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3232">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>

 <span data-ttu-id="7ec08-3233">例如，假设值为 "abcdef" 的实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3233">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="7ec08-3234">如果中的第一个元素 `separator` 为 "ef"，第二个元素为 "bcde"，则拆分操作的结果将是一个字符串数组，其中包含两个元素： "a" 和 "f"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3234">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be a string array that contains two elements, "a" and "f".</span></span> <span data-ttu-id="7ec08-3235">这是因为，在遇到子字符串 "f" 之前，遇到了实例 "bcde" 中的子字符串，并与中的元素匹配 `separator` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3235">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>

 <span data-ttu-id="7ec08-3236">但是，如果的第一个元素 `separator` 为 "bcd"，第二个元素为 "bc"，则拆分操作的结果将是一个字符串数组，其中包含两个元素： "a" 和 "ef"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3236">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be a string array that contains two elements, "a" and "ef".</span></span> <span data-ttu-id="7ec08-3237">这是因为 "bcd" 是中的第一个分隔符 `separator` ，它与实例中的分隔符相匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3237">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="7ec08-3238">如果分隔符的顺序已颠倒，因此第一个元素为 "bc"，第二个元素为 "bcd"，则结果将是一个字符串数组，其中包含两个元素： "a" 和 "def"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3238">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be a string array that contains two elements,  "a" and "def".</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="7ec08-3239">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3239">Performance considerations</span></span>
 <span data-ttu-id="7ec08-3240"><xref:System.String.Split%2A>方法为返回的数组对象分配内存，并为 <xref:System.String> 每个数组元素分配一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3240">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="7ec08-3241">如果你的应用程序需要最佳性能，或者在你的应用程序中管理内存分配非常重要，请考虑使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法，并根据需要使用 <xref:System.String.Compare%2A> 方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3241">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="7ec08-3242">如果要在分隔符处拆分字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法来查找字符串中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3242">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="7ec08-3243">如果要将字符串拆分为分隔符字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3243">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="7ec08-3244">然后，使用 <xref:System.String.Compare%2A> 方法来确定第一个字符后面的字符是否等于分隔符字符串的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3244">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="7ec08-3245">此外，如果使用相同的字符集拆分多个方法调用中的字符串 <xref:System.String.Split%2A> ，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3245">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="7ec08-3246">这可以显著降低每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3246">This significantly reduces the additional overhead of each method call.</span></span>

## Examples

<span data-ttu-id="7ec08-3247">下面的示例说明了通过调用字符串的 <xref:System.String.Split(System.String%5B%5D%2CSystem.StringSplitOptions)?displayProperty=nameWithType> 方法（其 `options` 参数等于和）返回的数组中的 <xref:System.StringSplitOptions.None?displayProperty=nameWithType> 差异 <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3247">The following example illustrates the difference in the arrays returned by calling a string's <xref:System.String.Split(System.String%5B%5D%2CSystem.StringSplitOptions)?displayProperty=nameWithType> method with its `options` parameter equal to <xref:System.StringSplitOptions.None?displayProperty=nameWithType> and <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span>

[!code-csharp-interactive[Options#2](~/samples/snippets/csharp/system/string.split/options.cs#2)]
[!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/system/string.split/options.vb#1)]

<span data-ttu-id="7ec08-3248">下面的示例定义一个包含标点和空白字符的分隔符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3248">The following example defines an array of separators that include punctuation and white-space characters.</span></span> <span data-ttu-id="7ec08-3249">如果将此数组与的值一起传递 <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> 给方法，则将 <xref:System.String.Split(System.String%5B%5D%2CSystem.StringSplitOptions)> 返回一个由字符串中的单个单词组成的数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3249">Passing this array along with a value of <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> to the <xref:System.String.Split(System.String%5B%5D%2CSystem.StringSplitOptions)> method returns an array that consists of the individual words from the string.</span></span>

[!code-csharp-interactive[Options#3](~/samples/snippets/csharp/system/string.split/options.cs#3)]
[!code-vb[System.String.Split#7](~/samples/snippets/visualbasic/system/string.split/options.vb#7)]

<span data-ttu-id="7ec08-3250">请注意，在参数设置为的情况下调用方法 `options` <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3250">Note that the method is called with the `options` argument set to <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7ec08-3251">这可以防止返回的数组包含 <xref:System.String.Empty?displayProperty=nameWithType> 表示标点符号和空白字符之间的空子字符串匹配项的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3251">This prevents the returned array from including <xref:System.String.Empty?displayProperty=nameWithType> values that represent empty substring matches between punctuation marks and white-space characters.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-3252"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3252"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3253">在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，如果向 <see cref="M:System.String.Split(System.Char[])" /> 方法传递的 <paramref name="separator" /> 是 <see langword="null" /> 或不包含任何字符，则该方法将使用一组略微不同的空白字符来拆分字符串，而不是使用 <see cref="M:System.String.Trim(System.Char[])" /> 方法来剪裁字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3253">In [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of white-space characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="7ec08-3254">从 .NET Framework 4 开始，这两个方法都使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3254">Starting with .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3255">一个字符，用于分隔此实例中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3255">A character that delimits the substrings in this instance.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-3256">数组中预期的最大元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3256">The maximum number of elements expected in the array.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3257">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3257">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3258">基于指定的分隔字符和（可选）选项将字符串拆分为最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3258">Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally, options.</span></span>
<span data-ttu-id="7ec08-3259">根据提供的字符分隔符将字符串拆分为最大数量的子字符串，可以选择忽略结果中的空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3259">Splits a string into a maximum number of substrings based on the provided character separator, optionally omitting empty substrings from the result.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3260">一个数组，该数组包含此实例中的至多 <paramref name="count" /> 个子字符串，这些子字符串由 <paramref name="separator" /> 分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3260">An array that contains at most <paramref name="count" /> substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3261">如果该字符串已拆分 `count` 为1次，但尚未到达字符串的末尾，则返回的数组中的最后一个字符串将包含此实例的其余尾随子字符串（不变）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3261">If the string has already been split `count` - 1 times, but the end of the string has not been reached, then the last string in the returned array will contain this instance's remaining trailing substring, untouched.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count, StringSplitOptions options);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberSignature Language="C#" Value="public string[] Split (char[]? separator, int count, StringSplitOptions options);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3262">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3262">An array of characters that delimit the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-3263">要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3263">The maximum number of substrings to return.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3264">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3264">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3265">基于指定的分隔字符和（可选）选项将字符串拆分为最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3265">Splits a string into a maximum number of substrings based on specified delimiting characters and, optionally, options.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3266">一个数组，该数组包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3266">An array that contains the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="7ec08-3267">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3267">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3268">分隔符字符不包含在返回数组的元素中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3268">Delimiter characters are not included in the elements of the returned array.</span></span>

<span data-ttu-id="7ec08-3269">如果此实例不包含中的任何字符 `separator` ，或者 `count` 参数为1，则返回的数组由包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3269">If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span>

<span data-ttu-id="7ec08-3270">如果 `separator` 参数为 `null` 或不包含任何字符，则假定空格字符为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3270">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="7ec08-3271">空白字符由 Unicode 标准定义， <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> `true` 如果传递给它，则方法将返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3271">White-space characters are defined by the Unicode standard and the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method returns `true` if they are passed to it.</span></span>

<span data-ttu-id="7ec08-3272">若要 `null` 为 `char[] separator` 参数传递，必须指示的类型， `null` 以消除其他一些重载（如）的调用 <xref:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3272">To pass `null` for the `char[] separator` parameter, you must indicate the type of the `null` to disambiguate the call from some other overloads, such as <xref:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)>.</span></span> <span data-ttu-id="7ec08-3273">下面的示例演示了几种明确识别此重载的方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3273">The following example shows several ways to unambiguously identify this overload.</span></span>

[!code-csharp-interactive[Identify#3](~/samples/snippets/csharp/system/string.split/identify.cs#3)]
[!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/system/string.split/identify.vb#3)]

 <span data-ttu-id="7ec08-3274">如果 `count` 参数为零，或者 `options` 参数为 <xref:System.StringSplitOptions.RemoveEmptyEntries> ，并且此实例的长度为零，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3274">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>

 <span data-ttu-id="7ec08-3275">的每个元素 `separator` 定义单独的分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3275">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="7ec08-3276">如果 `options` 参数为 <xref:System.StringSplitOptions.None> ，并且两个分隔符相邻，或在此实例的开头或结尾找到了分隔符，则对应的数组元素包含 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3276">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

 <span data-ttu-id="7ec08-3277">如果 `count` 此实例中的子字符串多于个子字符串，则返回 `count` 值的第一个减1元素返回第一个减号子字符串 `count` ，并且在返回值的最后一个元素中返回此实例中剩余的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3277">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>

 <span data-ttu-id="7ec08-3278">如果 `count` 大于子字符串的数目，则将返回可用的子字符串，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3278">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="7ec08-3279">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3279">Performance considerations</span></span>
 <span data-ttu-id="7ec08-3280"><xref:System.String.Split%2A>方法为返回的数组对象分配内存，并为 <xref:System.String> 每个数组元素分配一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3280">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="7ec08-3281">如果你的应用程序需要最佳性能，或者在你的应用程序中管理内存分配非常重要，请考虑使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法，并根据需要使用 <xref:System.String.Compare%2A> 方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3281">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="7ec08-3282">如果要在分隔符处拆分字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法来查找字符串中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3282">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="7ec08-3283">如果要将字符串拆分为分隔符字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3283">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="7ec08-3284">然后，使用 <xref:System.String.Compare%2A> 方法来确定第一个字符后面的字符是否等于分隔符字符串的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3284">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="7ec08-3285">此外，如果使用相同的字符集拆分多个方法调用中的字符串 <xref:System.String.Split%2A> ，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3285">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="7ec08-3286">这可以显著降低每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3286">This significantly reduces the additional overhead of each method call.</span></span>

## Examples

<span data-ttu-id="7ec08-3287">下面的示例使用 <xref:System.StringSplitOptions> 枚举来包括或排除方法生成的子字符串 <xref:System.String.Split%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3287">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>

[!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
[!code-csharp-interactive[Options#1](~/samples/snippets/csharp/system/string.split/options.cs#1)]
[!code-vb[string.split3#1](~/samples/snippets/visualbasic/system/string.split/omit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-3288"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3288"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-3289"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3289"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3290">在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，如果向 <see cref="M:System.String.Split(System.Char[])" /> 方法传递的 <paramref name="separator" /> 是 <see langword="null" /> 或不包含任何字符，则该方法将使用一组略微不同的空白字符来拆分字符串，而不是使用 <see cref="M:System.String.Trim(System.Char[])" /> 方法来剪裁字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3290">In [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of white-space characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="7ec08-3291">从 .NET Framework 4 开始，这两个方法都使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3291">Starting with .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string? separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberSignature Language="C#" Value="public string[] Split (string separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3292">一个字符串，用于分隔此实例中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3292">A string that delimits the substrings in this instance.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-3293">数组中预期的最大元素数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3293">The maximum number of elements expected in the array.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3294">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3294">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3295">基于指定的分隔字符串和（可选）选项将字符串拆分为最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3295">Splits a string into a maximum number of substrings based on a specified delimiting string and, optionally, options.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3296">一个数组，该数组包含此实例中的至多 <paramref name="count" /> 个子字符串，这些子字符串由 <paramref name="separator" /> 分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3296">An array that contains at most <paramref name="count" /> substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3297">如果该字符串已拆分 `count` 为1次，但尚未到达字符串的末尾，则返回的数组中的最后一个字符串将包含此实例的其余尾随子字符串（不变）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3297">If the string has already been split `count` - 1 times, but the end of the string has not been reached, then the last string in the returned array will contain this instance's remaining trailing substring, untouched.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, int count, StringSplitOptions options);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberSignature Language="C#" Value="public string[] Split (string[]? separator, int count, StringSplitOptions options);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="7ec08-3298">分隔此字符串中子字符串的字符串、不包含分隔符的空数组或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3298">The strings that delimit the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="7ec08-3299">要返回的子字符串的最大数量。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3299">The maximum number of substrings to return.</span></span></param>
        <param name="options"><span data-ttu-id="7ec08-3300">枚举值的按位组合，用于指定是否剪裁子字符串并包含空子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3300">A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.</span></span></param>
        <summary><span data-ttu-id="7ec08-3301">基于指定的分隔字符串和（可选）选项将字符串拆分为最大数量的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3301">Splits a string into a maximum number of substrings based on specified delimiting strings and, optionally, options.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3302">一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3302">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="7ec08-3303">有关详细信息，请参阅“备注”部分。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3303">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3304">分隔符字符串不包含在返回数组的元素中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3304">Delimiter strings are not included in the elements of the returned array.</span></span>

<span data-ttu-id="7ec08-3305">如果此实例不包含中的任何字符串 `separator` ，或者 `count` 参数为1，则返回的数组由包含此实例的单个元素组成。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3305">If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span>

<span data-ttu-id="7ec08-3306">如果 `separator` 参数为 `null` 或不包含任何字符，则假定空格字符为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3306">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="7ec08-3307">空白字符由 Unicode 标准定义， <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> `true` 如果传递给它，则方法将返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3307">White-space characters are defined by the Unicode standard and the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method returns `true` if they are passed to it.</span></span>

<span data-ttu-id="7ec08-3308">若要 `null` 为 `string[] separator` 参数传递，必须指示的类型， `null` 以消除其他一些重载（如）的调用 <xref:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3308">To pass `null` for the `string[] separator` parameter, you must indicate the type of the `null` to disambiguate the call from some other overloads, such as <xref:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)>.</span></span> <span data-ttu-id="7ec08-3309">下面的示例演示了几种明确识别此重载的方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3309">The following example shows several ways to unambiguously identify this overload.</span></span>

[!code-csharp-interactive[Identify#4](~/samples/snippets/csharp/system/string.split/identify.cs#4)]
[!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/system/string.split/identify.vb#4)]

 <span data-ttu-id="7ec08-3310">如果 `count` 参数为零，或者 `options` 参数为 <xref:System.StringSplitOptions.RemoveEmptyEntries> ，并且此实例的长度为零，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3310">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>

 <span data-ttu-id="7ec08-3311">的每个元素都 `separator` 定义一个由一个或多个字符组成的单独分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3311">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="7ec08-3312">如果 `options` 参数为 <xref:System.StringSplitOptions.None> ，并且两个分隔符相邻，或在此实例的开头或结尾找到了分隔符，则对应的数组元素包含 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3312">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

 <span data-ttu-id="7ec08-3313">如果 `count` 此实例中的子字符串多于个子字符串，则返回 `count` 值的第一个减1元素返回第一个减号子字符串 `count` ，并且在返回值的最后一个元素中返回此实例中剩余的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3313">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>

 <span data-ttu-id="7ec08-3314">如果 `count` 大于子字符串的数目，则将返回可用的子字符串，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3314">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>

### <a name="the-separator-array"></a><span data-ttu-id="7ec08-3315">分隔符数组</span><span class="sxs-lookup"><span data-stu-id="7ec08-3315">The separator array</span></span>

<span data-ttu-id="7ec08-3316">如果中的任何元素 `separator` 包含多个字符，则整个子字符串被视为分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3316">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="7ec08-3317">例如，如果中的一个元素 `separator` 为 "10"，则尝试拆分字符串 "This10is10a10string"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3317">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="7ec08-3318">返回这四元素数组： {"This"、"is"、"a"、"string"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3318">returns this four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="7ec08-3319">}.</span><span class="sxs-lookup"><span data-stu-id="7ec08-3319">}.</span></span>

### <a name="comparison-details"></a><span data-ttu-id="7ec08-3320">比较详细信息</span><span class="sxs-lookup"><span data-stu-id="7ec08-3320">Comparison details</span></span>
 <span data-ttu-id="7ec08-3321"><xref:System.String.Split%2A>方法提取此字符串中的子字符串，这些子字符串由参数中的一个或多个字符串分隔 `separator` ，并将这些子字符串作为数组的元素返回。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3321">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="7ec08-3322"><xref:System.String.Split%2A>方法通过使用区分大小写的序号排序规则执行比较来查找分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3322">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="7ec08-3323">有关 word、字符串和序号排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3323">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

 <span data-ttu-id="7ec08-3324"><xref:System.String.Split%2A>方法将忽略 `separator` 其值为 `null` 或空字符串 ( "" ) 的任何元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3324">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>

 <span data-ttu-id="7ec08-3325">若要避免在中的字符串具有相同的字符时出现不明确 `separator` 的结果，该 <xref:System.String.Split%2A> 方法将从实例值的开头开始，并与中的第一个元素（ `separator` 该元素等于实例中的分隔符）匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3325">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="7ec08-3326">实例中的子字符串的出现顺序优先于中元素的顺序 `separator` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3326">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>

 <span data-ttu-id="7ec08-3327">例如，假设值为 "abcdef" 的实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3327">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="7ec08-3328">如果中的第一个元素 `separator` 为 "ef"，第二个元素为 "bcde"，则拆分操作的结果为 "a" 和 "f"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3328">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f".</span></span> <span data-ttu-id="7ec08-3329">这是因为，在遇到子字符串 "f" 之前，遇到了实例 "bcde" 中的子字符串，并与中的元素匹配 `separator` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3329">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>

 <span data-ttu-id="7ec08-3330">但是，如果的第一个元素 `separator` 为 "bcd"，第二个元素为 "bc"，则拆分操作的结果为 "a" 和 "ef"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3330">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef".</span></span> <span data-ttu-id="7ec08-3331">这是因为 "bcd" 是中的第一个分隔符 `separator` ，它与实例中的分隔符相匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3331">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="7ec08-3332">如果分隔符的顺序已颠倒，因此第一个元素为 "bc"，第二个元素为 "bcd"，则结果为 "a" 和 "def"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3332">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def".</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="7ec08-3333">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3333">Performance considerations</span></span>
 <span data-ttu-id="7ec08-3334"><xref:System.String.Split%2A>方法为返回的数组对象分配内存，并为 <xref:System.String> 每个数组元素分配一个对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3334">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="7ec08-3335">如果你的应用程序需要最佳性能，或者在你的应用程序中管理内存分配非常重要，请考虑使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法，并根据需要使用 <xref:System.String.Compare%2A> 方法来查找字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3335">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="7ec08-3336">如果要在分隔符处拆分字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法来查找字符串中的分隔符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3336">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="7ec08-3337">如果要将字符串拆分为分隔符字符串，请使用 <xref:System.String.IndexOf%2A> 或 <xref:System.String.IndexOfAny%2A> 方法查找分隔符字符串的第一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3337">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="7ec08-3338">然后，使用 <xref:System.String.Compare%2A> 方法来确定第一个字符后面的字符是否等于分隔符字符串的剩余字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3338">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="7ec08-3339">此外，如果使用相同的字符集拆分多个方法调用中的字符串 <xref:System.String.Split%2A> ，请考虑创建一个数组，并在每个方法调用中引用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3339">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="7ec08-3340">这可以显著降低每个方法调用的额外开销。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3340">This significantly reduces the additional overhead of each method call.</span></span>

## Examples

<span data-ttu-id="7ec08-3341">下面的示例使用 <xref:System.StringSplitOptions> 枚举来包括或排除方法生成的子字符串 <xref:System.String.Split%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3341">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>

[!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
[!code-csharp-interactive[Options#1](~/samples/snippets/csharp/system/string.split/options.cs#1)]
[!code-vb[string.split3#1](~/samples/snippets/visualbasic/system/string.split/omit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-3342"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3342"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-3343"><paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3343"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3344">在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，如果向 <see cref="M:System.String.Split(System.Char[])" /> 方法传递的 <paramref name="separator" /> 是 <see langword="null" /> 或不包含任何字符，则该方法将使用一组略微不同的空白字符来拆分字符串，而不是使用 <see cref="M:System.String.Trim(System.Char[])" /> 方法来剪裁字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3344">In [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of white-space characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="7ec08-3345">从 .NET Framework 4 开始，这两个方法都使用一组相同的 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3345">Starting with .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(char value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : char -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-3346">要比较的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3346">The character to compare.</span></span></param>
        <summary><span data-ttu-id="7ec08-3347">确定此字符串实例是否以指定字符开始。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3347">Determines whether this string instance starts with the specified character.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3348">如果 <see langword="true" /> 与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3348"><see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3349">此方法使用当前区域性执行区分大小写的 (区分大小写的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3349">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-3350">要比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3350">The string to compare.</span></span></param>
        <summary><span data-ttu-id="7ec08-3351">确定此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3351">Determines whether the beginning of this string instance matches the specified string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3352">如果 <see langword="true" /> 与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3352"><see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3353">此方法 `value` 与此实例开头与相同的子字符串进行比较 `value` ，并返回一个指示是否相等的指示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3353">This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="7ec08-3354">若要相等， `value` 必须是 () 的空字符串 <xref:System.String.Empty?displayProperty=nameWithType> ，必须是对此同一个实例的引用，或者必须与此实例的开头匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3354">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>

<span data-ttu-id="7ec08-3355">此方法使用当前区域性执行区分大小写的 (区分大小写的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3355">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>

## Examples

<span data-ttu-id="7ec08-3356">下面的示例定义了一个 `StripStartTags` 方法，该方法使用 <xref:System.String.StartsWith(System.String)> 方法从字符串的开头移除 HTML 开始标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3356">The following example defines a `StripStartTags` method that uses the <xref:System.String.StartsWith(System.String)> method to remove HTML start tags from the beginning of a string.</span></span> <span data-ttu-id="7ec08-3357">请注意，将 `StripStartTags` 以递归方式调用方法，以确保删除行开头的多个 HTML 开始标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3357">Note that the `StripStartTags` method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed.</span></span> <span data-ttu-id="7ec08-3358">该示例不删除嵌入在字符串中的 HTML 标记。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3358">The example does not remove HTML tags embedded in a string.</span></span>

:::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringstartswith/CPP/stringstartswith.cpp" id="Snippet1":::
:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/CS/stringstartswith.cs" interactive="try-dotnet" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringstartswith/VB/stringstartswith.vb" id="Snippet1":::

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-3359"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3359"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3360">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串比较方法，并改为调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3360">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-3361">若要通过使用当前区域性的字符串比较规则来确定某个字符串是否以特定子字符串开头，请使用 <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> 其参数的值调用方法重载 <see cref="F:System.StringComparison.CurrentCulture" /> <paramref name="comparisonType" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3361">To determine whether a string begins with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.EndsWith(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * StringComparison -&gt; bool" Usage="string.StartsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-3362">要比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3362">The string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="7ec08-3363">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3363">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="7ec08-3364">确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3364">Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3365">如果此实例以 <see langword="true" /> 开头，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3365"><see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3366"><xref:System.String.StartsWith%2A>方法将 `value` 参数与此字符串开头的子字符串进行比较，并返回一个值，该值指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3366">The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="7ec08-3367">若要相等， `value` 必须是对此同一个字符串的引用，必须为空字符串 ( "" ) ，或者必须与此字符串的开头匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3367">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the beginning of this string.</span></span> <span data-ttu-id="7ec08-3368">方法所执行的比较的类型 <xref:System.String.StartsWith%2A> 取决于参数的值 `comparisonType` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3368">The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span> <span data-ttu-id="7ec08-3369">比较可以使用当前区域性的约定 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> 和 <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) 或固定区域性 (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> 和 <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>) ），也可以由代码点 (或) 的逐字符比较 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3369">The comparison can use the conventions of the current culture (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> and <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) or the invariant culture (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> and <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span> <span data-ttu-id="7ec08-3370">比较也可以区分大小写 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> 、 <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> 或 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>) ），也可以忽略大小写 (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> ， <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType> <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3370">The comparison can also be case-sensitive (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>, or <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>), or it can ignore case (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span>

## Examples
 <span data-ttu-id="7ec08-3371">下面的示例在字符串 "the" 中搜索以 "the" 开头的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3371">The following example searches for the string "the" at the beginning of a longer string that begins with the word "The".</span></span> <span data-ttu-id="7ec08-3372">如示例的输出所示，对 <xref:System.String.StartsWith(System.String%2CSystem.StringComparison)> 执行不区分区域性但区分大小写比较的方法的调用无法匹配字符串，而执行区域性和不区分大小写比较的调用与字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3372">As the output from the example shows, a call to the <xref:System.String.StartsWith(System.String%2CSystem.StringComparison)> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/StartsWith2.cpp" id="Snippet2":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/StartsWith2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/StartsWith2.vb" id="Snippet2":::

 <span data-ttu-id="7ec08-3373">下面的示例确定字符串是否以特定子字符串开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3373">The following example determines whether a string starts with a particular substring.</span></span> <span data-ttu-id="7ec08-3374">它初始化二维字符串数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3374">It initializes a two-dimensional string array.</span></span> <span data-ttu-id="7ec08-3375">第二个维度中的第一个元素包含一个字符串，第二个元素包含在第一个字符串的开头搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3375">The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string.</span></span> <span data-ttu-id="7ec08-3376">结果受区域性选择的影响，是否忽略大小写，以及是否执行序号比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3376">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span> <span data-ttu-id="7ec08-3377">请注意，当字符串实例包含连字时，具有其连续字符的区分区域性的比较成功匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3377">Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</span></span>

 [!code-cpp[System.String.StartsWith#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/startswith1.cpp#1)]
 [!code-csharp[System.String.StartsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/startswith1.cs#1)]
 [!code-vb[System.String.StartsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/startswith1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-3378"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3378"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-3379"><paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3379"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.StartsWith (value, ignoreCase, culture)" />
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-3380">要比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3380">The string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="7ec08-3381">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3381"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="7ec08-3382">确定如何对此字符串与 <paramref name="value" /> 进行比较的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3382">Cultural information that determines how this string and <paramref name="value" /> are compared.</span></span> <span data-ttu-id="7ec08-3383">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3383">If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="7ec08-3384">确定在使用指定的区域性进行比较时此字符串实例的开头是否与指定的字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3384">Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3385">如果 <see langword="true" /> 参数与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3385"><see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3386">此方法将 `value` 参数与此字符串开头与相同的子字符串进行比较 `value` ，并返回一个值，该值指示它们是否相等。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3386">This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="7ec08-3387">若要相等， `value` 必须是 () 的空字符串 <xref:System.String.Empty?displayProperty=nameWithType> ，必须是对此同一个实例的引用，或者必须与此实例的开头匹配。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3387">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>

 <span data-ttu-id="7ec08-3388">此方法使用指定的大小写和区域性执行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3388">This method performs a comparison using the specified casing and culture.</span></span>

## Examples
 <span data-ttu-id="7ec08-3389">下面的示例确定字符串是否出现在另一个字符串的开头。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3389">The following example determines whether a string occurs at the beginning of another string.</span></span> <span data-ttu-id="7ec08-3390"><xref:System.String.StartsWith%2A>方法使用区分大小写、不区分大小写和影响搜索结果的不同区域性多次调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3390">The <xref:System.String.StartsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>

 [!code-csharp[system.string.StartsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.StartsWithCI/cs/swci.cs#1)]
 [!code-vb[system.string.StartsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.StartsWithCI/vb/swci.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-3391"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3391"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Substring">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-3392">从此实例检索子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3392">Retrieves a substring from this instance.</span></span>

 <span data-ttu-id="7ec08-3393">重载此成员。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3393">This member is overloaded.</span></span> <span data-ttu-id="7ec08-3394">有关此成员的完整信息（包括语法、用法和示例），请单击重载列表中的相应名称。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3394">For complete information about this member, including syntax, usage, and examples, click a name in the overload list.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Substring : int -&gt; string" Usage="string.Substring startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="7ec08-3395">此实例中子字符串的起始字符位置（从零开始）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3395">The zero-based starting character position of a substring in this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-3396">从此实例检索子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3396">Retrieves a substring from this instance.</span></span> <span data-ttu-id="7ec08-3397">子字符串在指定的字符位置开始并一直到该字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3397">The substring starts at a specified character position and continues to the end of the string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3398">与此实例中在 <paramref name="startIndex" /> 处开头的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度，则为 <paramref name="startIndex" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3398">A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3399">调用 <xref:System.String.Substring(System.Int32)> 方法可从字符串中提取从指定字符位置开始并在字符串末尾结束的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3399">You call the <xref:System.String.Substring(System.Int32)> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.</span></span> <span data-ttu-id="7ec08-3400">起始字符位置是从零开始的;换句话说，字符串中的第一个字符位于索引0，而不是索引1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3400">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="7ec08-3401">若要提取从指定字符位置开始并在字符串末尾之前结束的子字符串，请调用 <xref:System.String.Substring(System.Int32%2CSystem.Int32)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3401">To extract a substring that begins at a specified character position and ends before the end of the string, call the <xref:System.String.Substring(System.Int32%2CSystem.Int32)> method.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3402">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3402">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3403">相反，它会返回从当前字符串中的位置开始的新字符串 `startIndex` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3403">Instead, it returns a new string that begins at the `startIndex` position in the current string.</span></span>

 <span data-ttu-id="7ec08-3404">若要提取以特定字符或字符序列开头的子字符串，请调用方法（如  <xref:System.String.IndexOf%2A> 或） <xref:System.String.IndexOf%2A> 来获取的值 `startIndex` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3404">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`.</span></span> <span data-ttu-id="7ec08-3405">第二个示例对此进行了说明：它提取在 "=" 字符后开始一个字符位置的键值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3405">The second example illustrates this; it extracts a key value that begins one character position after the "=" character.</span></span>

 <span data-ttu-id="7ec08-3406">如果 `startIndex` 等于零，则此方法返回未更改的原始字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3406">If `startIndex` is equal to zero, the method returns the original string unchanged.</span></span>
## Examples
 <span data-ttu-id="7ec08-3407">下面的示例演示如何从字符串中获取子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3407">The following example demonstrates obtaining a substring from a string.</span></span>

 [!code-cpp[System.String.Substring#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.String.Substring/cpp/Substring10.cpp#10)]
 [!code-csharp-interactive[System.String.Substring#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring10.cs#10)]
 [!code-vb[System.String.Substring#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring10.vb#10)]

 <span data-ttu-id="7ec08-3408">下面的示例使用 <xref:System.String.Substring%2A> 方法将由 equals ( "=" 分隔的键/值对 ) 字符分隔开。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3408">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>

 [!code-csharp-interactive[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]

 <span data-ttu-id="7ec08-3409"><xref:System.String.IndexOf%2A>方法用于获取字符串中 equals 字符的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3409">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="7ec08-3410">对方法的调用 <xref:System.String.Substring(System.Int32%2CSystem.Int32)> 提取键名称，该键名称从字符串中的第一个字符开始，并针对对方法的调用返回的字符数进行扩展 <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3410">The call to the <xref:System.String.Substring(System.Int32%2CSystem.Int32)> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="7ec08-3411">然后，对方法的调用将 <xref:System.String.Substring(System.Int32)> 提取分配给该密钥的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3411">The call to the <xref:System.String.Substring(System.Int32)> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="7ec08-3412">它从 equals 字符之外的一个字符位置开始，并扩展到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3412">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-3413"><paramref name="startIndex" /> 小于零或大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3413"><paramref name="startIndex" /> is less than zero or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.Substring : int * int -&gt; string" Usage="string.Substring (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="7ec08-3414">此实例中子字符串的起始字符位置（从零开始）。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3414">The zero-based starting character position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-3415">子字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3415">The number of characters in the substring.</span></span></param>
        <summary><span data-ttu-id="7ec08-3416">从此实例检索子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3416">Retrieves a substring from this instance.</span></span> <span data-ttu-id="7ec08-3417">子字符串从指定的字符位置开始且具有指定的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3417">The substring starts at a specified character position and has a specified length.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3418">与此实例中在 <paramref name="length" /> 处开头、长度为 <paramref name="startIndex" /> 的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度且 <paramref name="startIndex" /> 为零，则为 <paramref name="length" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3418">A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3419">调用 <xref:System.String.Substring(System.Int32%2CSystem.Int32)> 方法可从字符串中提取从指定字符位置开始并在字符串末尾之前结束的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3419">You call the <xref:System.String.Substring(System.Int32%2CSystem.Int32)> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.</span></span> <span data-ttu-id="7ec08-3420">起始字符位置是从零开始的;换句话说，字符串中的第一个字符位于索引0，而不是索引1。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3420">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="7ec08-3421">若要提取从指定字符位置开始并持续到字符串末尾的子字符串，请调用 <xref:System.String.Substring(System.Int32)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3421">To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring(System.Int32)> method.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3422">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3422">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3423">相反，它会返回一个新字符串，其中包含 `length` 从 `startIndex` 当前字符串中的位置开始的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3423">Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.</span></span>

 <span data-ttu-id="7ec08-3424">`length`参数表示要从当前字符串实例中提取的字符的总数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3424">The `length` parameter represents the total number of characters to extract from the current string instance.</span></span> <span data-ttu-id="7ec08-3425">这包括索引处的起始字符  `startIndex` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3425">This includes the starting character found at index  `startIndex`.</span></span>  <span data-ttu-id="7ec08-3426">换言之，此 <xref:System.String.Substring%2A> 方法尝试从索引 `startIndex` 到索引 `startIndex`  +  `length` -1 提取字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3426">In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.</span></span>

 <span data-ttu-id="7ec08-3427">若要提取以特定字符或字符序列开头的子字符串，请调用方法（如  <xref:System.String.IndexOf%2A> 或） <xref:System.String.LastIndexOf%2A> 来获取的值 `startIndex` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3427">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.</span></span>

 <span data-ttu-id="7ec08-3428">如果子字符串从扩展 `startIndex` 到指定的字符序列，则可以调用方法（如  <xref:System.String.IndexOf%2A> 或） <xref:System.String.LastIndexOf%2A> 来获取结束字符或字符序列的索引。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3428">If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.</span></span>  <span data-ttu-id="7ec08-3429">然后，可以将该值转换为字符串中的索引位置，如下所示：</span><span class="sxs-lookup"><span data-stu-id="7ec08-3429">You can then convert that value to an index position in the string as follows:</span></span>

- <span data-ttu-id="7ec08-3430">如果已搜索要标记子字符串末尾的单个字符，则 `length` 参数等于 `endIndex`  -  `startIndex` + 1，其中 `endIndex` 是或方法的返回值 <xref:System.String.IndexOf%2A> <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3430">If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="7ec08-3431">下面的示例从字符串中提取 "b" 字符的连续块。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3431">The following example extracts a continuous block of "b" characters from a string.</span></span>

     [!code-csharp-interactive[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]
     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]

- <span data-ttu-id="7ec08-3432">如果已搜索多个字符来标记子字符串的末尾，则 `length` 参数等于 `endIndex`  +  `endMatchLength`  -  `startIndex` ，其中 `endIndex` 是或方法的返回值 <xref:System.String.IndexOf%2A> <xref:System.String.IndexOf%2A> ， `endMatchLength` 是标记子字符串末尾的字符序列的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3432">If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method, and `endMatchLength` is the length of the character sequence that marks the end of the substring.</span></span> <span data-ttu-id="7ec08-3433">下面的示例提取包含 XML 元素的文本块 `<definition>` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3433">The following example extracts a block of text that contains an XML `<definition>` element.</span></span>

     [!code-csharp-interactive[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]
     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]

- <span data-ttu-id="7ec08-3434">如果字符或字符序列未包含在子字符串的末尾，则 `length` 参数等于 `endIndex`  -  `startIndex` ，其中 `endIndex` 是或方法的返回值 <xref:System.String.IndexOf%2A> <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3434">If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span>

 <span data-ttu-id="7ec08-3435">如果 `startIndex` 等于零并且等于当前字符串的长度，则此方法返回未更改的原始字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3435">If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</span></span>

## Examples
 <span data-ttu-id="7ec08-3436">下面的示例演示了一个简单的 <xref:System.String.Substring(System.Int32%2CSystem.Int32)> 方法调用方法，该方法从第六个字符位置开始的字符串中提取两个字符， (即索引为 5) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3436">The following example illustrates a simple call to the <xref:System.String.Substring(System.Int32%2CSystem.Int32)> method that extracts two characters from a string starting at the sixth character position (that is, at index five).</span></span>

 [!code-csharp-interactive[System.String.Substring#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring4.cs#4)]
 [!code-vb[System.String.Substring#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring4.vb#4)]

 <span data-ttu-id="7ec08-3437">下面的示例使用 <xref:System.String.Substring(System.Int32%2CSystem.Int32)> 以下三种情况中的方法来隔离字符串中的子字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3437">The following example uses the <xref:System.String.Substring(System.Int32%2CSystem.Int32)> method in the following three cases to isolate substrings within a string.</span></span> <span data-ttu-id="7ec08-3438">在两种情况下，将在比较中使用子字符串，在第三种情况下将引发异常，因为指定了无效的参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3438">In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</span></span>

- <span data-ttu-id="7ec08-3439">它提取索引) 2 处的字符串 (中的单个字符和第三个位置，并将其与 "c" 进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3439">It extracts the single character and the third position in the string (at index 2) and compares it with a "c".</span></span> <span data-ttu-id="7ec08-3440">此比较返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3440">This comparison returns `true`.</span></span>

- <span data-ttu-id="7ec08-3441">它从索引 3) 的字符串 (中的第四个位置提取零个字符，并将其传递给 <xref:System.String.IsNullOrEmpty%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3441">It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref:System.String.IsNullOrEmpty%2A> method.</span></span> <span data-ttu-id="7ec08-3442">此方法返回 true，因为对方法的调用将 <xref:System.String.Substring%2A> 返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3442">This returns true because the call to the <xref:System.String.Substring%2A> method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

- <span data-ttu-id="7ec08-3443">它将尝试从字符串中的第四个位置提取一个字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3443">It attempts to extract one character starting at the fourth position in the string.</span></span> <span data-ttu-id="7ec08-3444">由于该位置没有任何字符，因此方法调用会引发 <xref:System.ArgumentOutOfRangeException> 异常。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3444">Because there is no character at that position, the method call throws an <xref:System.ArgumentOutOfRangeException> exception.</span></span>

 [!code-csharp-interactive[Classic String.Substring1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.Substring1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.Substring1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.Substring1 Example/VB/source.vb#1)]

 <span data-ttu-id="7ec08-3445">下面的示例使用 <xref:System.String.Substring%2A> 方法将由 equals ( "=" 分隔的键/值对 ) 字符分隔开。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3445">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>

 [!code-csharp-interactive[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]

 <span data-ttu-id="7ec08-3446"><xref:System.String.IndexOf%2A>方法用于获取字符串中 equals 字符的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3446">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="7ec08-3447">对方法的调用 <xref:System.String.Substring(System.Int32%2CSystem.Int32)> 提取键名称，该键名称从字符串中的第一个字符开始，并针对对方法的调用返回的字符数进行扩展 <xref:System.String.IndexOf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3447">The call to the <xref:System.String.Substring(System.Int32%2CSystem.Int32)> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="7ec08-3448">然后，对方法的调用将 <xref:System.String.Substring(System.Int32)> 提取分配给该密钥的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3448">The call to the <xref:System.String.Substring(System.Int32)> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="7ec08-3449">它从 equals 字符之外的一个字符位置开始，并扩展到字符串的末尾。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3449">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-3450"><paramref name="startIndex" /> 加 <paramref name="length" /> 指示不在此实例内的位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3450"><paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.</span></span>

<span data-ttu-id="7ec08-3451">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-3451">-or-</span></span>

 <span data-ttu-id="7ec08-3452"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3452"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span></exception>
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator" ExplicitInterfaceMemberName="System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;char&gt; System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#Generic#IEnumerable&lt;char&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Char) Implements IEnumerable(Of Char).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;char&gt; ^ System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;char&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;char&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;char&gt;" Usage="string.System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3453">返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3453">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3454">可用于循环访问当前 <see cref="T:System.String" /> 对象的强类型化枚举器。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3454">A strongly-typed enumerator that can be used to iterate through the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3455">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3455">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3456">它只能在 <xref:System.String> 实例被强制转换为接口对象时使用 <xref:System.Collections.Generic.IEnumerable%601> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3456">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object.</span></span> <span data-ttu-id="7ec08-3457">有关更多信息，请参见 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3457">For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="string.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3458">返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3458">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3459">一个枚举器，可用于循环访问当前的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3459">An enumerator that can be used to iterate through the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3460">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3460">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3461">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3461">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="7ec08-3462">有关更多信息，请参见 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3462">For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="string.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7ec08-3463">一个对象，其计算结果为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3463">An object that evaluates to a <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-3464">将此实例与指定的 <see cref="T:System.Object" /> 进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3464">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3465">一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value" /> 参数之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3465">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span></span>

<list type="table"><listheader><term><span data-ttu-id="7ec08-3466">“值”</span><span class="sxs-lookup"><span data-stu-id="7ec08-3466">Value</span></span></term><description><span data-ttu-id="7ec08-3467">条件</span><span class="sxs-lookup"><span data-stu-id="7ec08-3467">Condition</span></span></description></listheader><item><term><span data-ttu-id="7ec08-3468">小于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-3468">Less than zero</span></span></term><description><span data-ttu-id="7ec08-3469">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3469">This instance precedes <paramref name="value" />.</span></span></description></item><item><term><span data-ttu-id="7ec08-3470">零</span><span class="sxs-lookup"><span data-stu-id="7ec08-3470">Zero</span></span></term><description><span data-ttu-id="7ec08-3471">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3471">This instance has the same position in the sort order as <paramref name="value" />.</span></span></description></item><item><term><span data-ttu-id="7ec08-3472">大于零</span><span class="sxs-lookup"><span data-stu-id="7ec08-3472">Greater than zero</span></span></term><description><span data-ttu-id="7ec08-3473">此实例位于 <paramref name="value" /> 之后，或 <paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3473">This instance follows <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3474">`value` 必须是一个 <xref:System.String> 对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3474">`value` must be a <xref:System.String> object.</span></span>

> [!CAUTION]
> <span data-ttu-id="7ec08-3475">此 <xref:System.String.CompareTo%2A> 方法主要用于排序或 alphabetizing 操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3475">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="7ec08-3476">当方法调用的主要目的是确定两个字符串是否相等时，不应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3476">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="7ec08-3477">若要确定两个字符串是否相等，请调用 <xref:System.String.Equals%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3477">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

<span data-ttu-id="7ec08-3478">此方法使用当前区域性执行区分大小写的 (区分大小写的) 比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3478">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="7ec08-3479">有关 word、字符串和顺序排序的详细信息，请参阅 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3479">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="7ec08-3480">有关此方法的行为的详细信息，请参阅方法的 "备注" 部分 <xref:System.String.Compare(System.String%2CSystem.String)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3480">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare(System.String%2CSystem.String)?displayProperty=nameWithType> method.</span></span>

## Examples

<span data-ttu-id="7ec08-3481">下面的示例将 <xref:System.String.CompareTo%2A> 方法与一起使用 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3481">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="7ec08-3482">因为它尝试将实例与 <xref:System.String> 对象进行比较 `TestClass` ，所以方法会引发 <xref:System.ArgumentException> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3482">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>

[!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
[!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
[!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7ec08-3483"><paramref name="value" /> 不是 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3483"><paramref name="value" /> is not a <see cref="T:System.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="string.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3484">返回 <see cref="T:System.String" /> 类的 <see cref="T:System.TypeCode" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3484">Returns the <see cref="T:System.TypeCode" /> for the <see cref="T:System.String" /> class.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3485">枚举常数 <see cref="F:System.TypeCode.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3485">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples

<span data-ttu-id="7ec08-3486">下面的示例显示了 <xref:System.TypeCode> 类型的枚举常数 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3486">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb" id="Snippet1":::

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="string.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3487">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3487">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="7ec08-3488">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3488">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3489">如果当前字符串的值为 <see langword="true" />，则为 <see cref="F:System.Boolean.TrueString" />；如果当前字符串的值为 <see langword="false" />，则为 <see cref="F:System.Boolean.FalseString" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3489"><see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3490">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3490">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3491">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3491">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3492">建议的替代方法是调用 <xref:System.Convert.ToBoolean(System.String)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3492">The recommended alternative is to call the <xref:System.Convert.ToBoolean(System.String)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3493">当前字符串的值不为 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3493">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="string.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3494">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3494">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3495">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3495">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3496">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3496">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3497">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3497">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3498">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3498">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3499">建议的替代方法是调用 <xref:System.Convert.ToByte(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3499">The recommended alternative is to call the <xref:System.Convert.ToByte(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3500">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3500">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3501">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3501">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="string.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3502">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3502">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3503">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3503">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3504">当前 <see cref="T:System.String" /> 对象中索引 0 处的字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3504">The character at index 0 in the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3505">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3505">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3506">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3506">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3507">建议的替代方法是调用 <xref:System.Convert.ToChar(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3507">The recommended alternative is to call the <xref:System.Convert.ToChar(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="string.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3508">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3508">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3509">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3509">For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3510">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3510">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3511">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3511">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3512">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3512">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3513">建议的替代方法是调用 <xref:System.Convert.ToDateTime(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3513">The recommended alternative is to call the <xref:System.Convert.ToDateTime(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="string.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3514">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3514">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3515">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3515">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3516">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3516">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3517">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3517">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3518">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3518">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3519">建议的替代方法是调用 <xref:System.Convert.ToDecimal(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3519">The recommended alternative is to call the <xref:System.Convert.ToDecimal(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3520">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3520">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3521">当前 <see cref="T:System.String" /> 对象的值是一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3521">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="string.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3522">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3522">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3523">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3523">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3524">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3524">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3525">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3525">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3526">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3526">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3527">建议的替代方法是调用 <xref:System.Convert.ToDouble(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3527">The recommended alternative is to call the <xref:System.Convert.ToDouble(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3528">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3528">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3529">当前 <see cref="T:System.String" /> 对象的值是一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3529">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="string.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3530">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3530">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3531">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3531">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3532">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3532">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3533">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3533">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3534">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3534">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3535">建议的替代方法是调用 <xref:System.Convert.ToInt16(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3535">The recommended alternative is to call the <xref:System.Convert.ToInt16(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3536">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3536">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3537">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3537">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="string.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3538">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3538">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3539">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3539">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3540">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3540">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3541">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3541">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3542">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3542">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3543">建议的替代方法是调用 <xref:System.Convert.ToInt32(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3543">The recommended alternative is to call the <xref:System.Convert.ToInt32(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="string.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3544">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3544">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3545">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3545">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3546">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3546">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3547">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3547">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3548">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3548">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3549">建议的替代方法是调用 <xref:System.Convert.ToInt64(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3549">The recommended alternative is to call the <xref:System.Convert.ToInt64(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="string.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3550">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3550">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3551">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3551">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3552">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3552">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3553">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3553">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3554">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3554">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3555">建议的替代方法是调用 <xref:System.Convert.ToSByte(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3555">The recommended alternative is to call the <xref:System.Convert.ToSByte(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3556">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3556">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3557">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3557">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="string.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3558">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3558">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3559">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3559">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3560">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3560">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3561">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3561">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3562">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3562">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3563">建议的替代方法是调用 <xref:System.Convert.ToSingle(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3563">The recommended alternative is to call the <xref:System.Convert.ToSingle(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToString : IFormatProvider -&gt; string&#xA;override this.System.IConvertible.ToString : IFormatProvider -&gt; string" Usage="string.System.IConvertible.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3564">一个提供区域性特定的格式设置信息的对象。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3564">An object that supplies culture-specific formatting information.</span></span>

<span data-ttu-id="7ec08-3565">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-3565">-or-</span></span>

<span data-ttu-id="7ec08-3566">若为 <see langword="null" />，则使用当前区域性的格式设置约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3566"><see langword="null" /> to use the formatting conventions of the current culture.</span></span></param>
        <summary><span data-ttu-id="7ec08-3567">有关此成员的说明，请参见 <see cref="T:System.IConvertible.ToString(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3567">For a description of this member, see <see cref="T:System.IConvertible.ToString(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3568">与此实例的值等效的 <see cref="T:System.String" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3568">A <see cref="T:System.String" /> instance equivalent to the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3569">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3569">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3570">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3570">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="string.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7ec08-3571">返回对象的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3571">The type of the returned object.</span></span></param>
        <param name="provider"><span data-ttu-id="7ec08-3572">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3572">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3573">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3573">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3574">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3574">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3575">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3575">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3576">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3576">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3577">建议的替代方法是调用 <xref:System.Convert.ChangeType%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3577">The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-3578"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3578"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="7ec08-3579">当前 <see cref="T:System.String" /> 对象的值不能转换为 <paramref name="type" /> 参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3579">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="string.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3580">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3580">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3581">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3581">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3582">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3582">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3583">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3583">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3584">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3584">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3585">建议的替代方法是调用 <xref:System.Convert.ToUInt16(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3585">The recommended alternative is to call the <xref:System.Convert.ToUInt16(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3586">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3586">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3587">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.UInt16.MaxValue" /> 或小于 <see cref="F:System.UInt16.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3587">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="string.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3588">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3588">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3589">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3589">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3590">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3590">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3591">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3591">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3592">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3592">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3593">建议的替代方法是调用 <xref:System.Convert.ToUInt32(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3593">The recommended alternative is to call the <xref:System.Convert.ToUInt32(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="7ec08-3594">无法分析当前 <see cref="T:System.String" /> 对象的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3594">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="7ec08-3595">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.UInt32.MaxValue" /> 或小于 <see cref="F:System.UInt32.MinValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3595">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="string.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3596">一个对象，提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3596">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3597">有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3597">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3598">当前 <see cref="T:System.String" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3598">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3599">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3599">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="7ec08-3600">它只能在 <xref:System.String> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3600">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="7ec08-3601">建议的替代方法是调用 <xref:System.Convert.ToUInt64(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3601">The recommended alternative is to call the <xref:System.Convert.ToUInt64(System.String%2CSystem.IFormatProvider)?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToCharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-3602">将此实例中的字符复制到 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3602">Copies the characters in this instance to a Unicode character array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray();" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : unit -&gt; char[]" Usage="string.ToCharArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3603">将此实例中的字符复制到 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3603">Copies the characters in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3604">元素为此实例的各字符的 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3604">A Unicode character array whose elements are the individual characters of this instance.</span></span> <span data-ttu-id="7ec08-3605">如果此实例是空字符串，则返回的数组为空且长度为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3605">If this instance is an empty string, the returned array is empty and has a zero length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3606">此方法将每个字符 (（即，每个对象都) 字符串中的每个对象）复制 <xref:System.Char> 到一个字符数组中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3606">This method copies each character (that is, each <xref:System.Char> object) in a string to a character array.</span></span> <span data-ttu-id="7ec08-3607">复制的第一个字符位于返回的字符数组的索引零处;最后复制的字符位于索引 <xref:System.Array.Length%2A?displayProperty=nameWithType> -1 处。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3607">The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=nameWithType> - 1.</span></span>

 <span data-ttu-id="7ec08-3608">若要从字符数组中的字符创建字符串，请调用 <xref:System.String.%23ctor(System.Char%5B%5D)> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3608">To create a string from the characters in a character array, call the <xref:System.String.%23ctor(System.Char%5B%5D)> constructor.</span></span>

 <span data-ttu-id="7ec08-3609">若要创建包含字符串中已编码字符的字节数组，请实例化相应的 <xref:System.Text.Encoding> 对象并调用其 <xref:System.Text.Encoding.GetBytes(System.String)?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3609">To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes(System.String)?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ec08-3610">.NET 中可用的一些标准编码包括：</span><span class="sxs-lookup"><span data-stu-id="7ec08-3610">Some of the standard encodings available in .NET include the following:</span></span>

|<span data-ttu-id="7ec08-3611">编码</span><span class="sxs-lookup"><span data-stu-id="7ec08-3611">Encoding</span></span>|<span data-ttu-id="7ec08-3612">对象</span><span class="sxs-lookup"><span data-stu-id="7ec08-3612">Object</span></span>|
|--------------|------------|
|<span data-ttu-id="7ec08-3613">ASCII</span><span class="sxs-lookup"><span data-stu-id="7ec08-3613">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|
|<span data-ttu-id="7ec08-3614">UTF-7</span><span class="sxs-lookup"><span data-stu-id="7ec08-3614">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|
|<span data-ttu-id="7ec08-3615">UTF-8</span><span class="sxs-lookup"><span data-stu-id="7ec08-3615">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|
|<span data-ttu-id="7ec08-3616">UTF-16</span><span class="sxs-lookup"><span data-stu-id="7ec08-3616">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|
|<span data-ttu-id="7ec08-3617">UTF-32</span><span class="sxs-lookup"><span data-stu-id="7ec08-3617">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|

 <span data-ttu-id="7ec08-3618">有关详细信息，请参阅 [.net 中的字符编码](/dotnet/standard/base-types/character-encoding)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3618">For more information, see [Character Encoding in .NET](/dotnet/standard/base-types/character-encoding).</span></span>

## Examples
 <span data-ttu-id="7ec08-3619">下面的示例调用 <xref:System.String.ToCharArray%2A> 方法将字符串中的字符提取到字符数组中。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3619">The following example calls the <xref:System.String.ToCharArray%2A> method to extract the characters in a string to a character array.</span></span> <span data-ttu-id="7ec08-3620">然后，它显示数组中的原始字符串和元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3620">It then displays the original string and the elements in the array.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tochararray/cs/ToCharArray1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tochararray/vb/ToCharArray1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray (startIndex As Integer, length As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : int * int -&gt; char[]" Usage="string.ToCharArray (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="7ec08-3621">此实例内子字符串的起始位置。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3621">The starting position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="7ec08-3622">此实例内子字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3622">The length of the substring in this instance.</span></span></param>
        <summary><span data-ttu-id="7ec08-3623">将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3623">Copies the characters in a specified substring in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3624">元素为此实例中从字符位置 <paramref name="length" /> 开始的 <paramref name="startIndex" /> 字符数的 Unicode 字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3624">A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3625">此方法将一部分字符串中的字符复制到字符数组。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3625">This method copies the characters in a portion of a string to a character array.</span></span> <span data-ttu-id="7ec08-3626">若要从字符数组的字符范围中创建字符串，请调用  <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3626">To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor(System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32)> constructor.</span></span>

 <span data-ttu-id="7ec08-3627">`startIndex`参数是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3627">The `startIndex` parameter is zero-based.</span></span> <span data-ttu-id="7ec08-3628">也就是说，字符串实例中第一个字符的索引为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3628">That is, the index of the first character in the string instance is zero.</span></span>

 <span data-ttu-id="7ec08-3629">如果 `length` 为零，则返回的数组为空且长度为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3629">If `length` is zero, the returned array is empty and has a zero length.</span></span> <span data-ttu-id="7ec08-3630">如果此实例为 `null` 或空字符串 ( "" ) ，则返回的数组为空且长度为零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3630">If this instance is `null` or an empty string (""), the returned array is empty and has a zero length.</span></span>

 <span data-ttu-id="7ec08-3631">若要创建包含字符串的一部分中编码字符的字节数组，请实例化相应的 <xref:System.Text.Encoding> 对象并调用其 <xref:System.Text.Encoding.GetBytes(System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32)> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3631">To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes(System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32)> method.</span></span> <span data-ttu-id="7ec08-3632">.NET 中可用的一些标准编码包括：</span><span class="sxs-lookup"><span data-stu-id="7ec08-3632">Some of the standard encodings available in .NET include:</span></span>

|<span data-ttu-id="7ec08-3633">编码</span><span class="sxs-lookup"><span data-stu-id="7ec08-3633">Encoding</span></span>|<span data-ttu-id="7ec08-3634">对象</span><span class="sxs-lookup"><span data-stu-id="7ec08-3634">Object</span></span>|
|--------------|------------|
|<span data-ttu-id="7ec08-3635">ASCII</span><span class="sxs-lookup"><span data-stu-id="7ec08-3635">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|
|<span data-ttu-id="7ec08-3636">UTF-7</span><span class="sxs-lookup"><span data-stu-id="7ec08-3636">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|
|<span data-ttu-id="7ec08-3637">UTF-8</span><span class="sxs-lookup"><span data-stu-id="7ec08-3637">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|
|<span data-ttu-id="7ec08-3638">UTF-16</span><span class="sxs-lookup"><span data-stu-id="7ec08-3638">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|
|<span data-ttu-id="7ec08-3639">UTF-32</span><span class="sxs-lookup"><span data-stu-id="7ec08-3639">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|

 <span data-ttu-id="7ec08-3640">有关详细信息，请参阅 [.net 中的字符编码](/dotnet/standard/base-types/character-encoding)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3640">For more information, see [Character Encoding in .NET](/dotnet/standard/base-types/character-encoding).</span></span>

## Examples
 <span data-ttu-id="7ec08-3641">下面的示例将字符串中的子字符串转换为字符数组，然后枚举并显示该数组的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3641">The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.ToCharArray1/CPP/tocharry1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.ToCharArray1/CS/tocharry1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.ToCharArray1/VB/tocharry1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7ec08-3642"><paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3642"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="7ec08-3643">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7ec08-3643">-or-</span></span>

 <span data-ttu-id="7ec08-3644"><paramref name="startIndex" /> 加 <paramref name="length" /> 大于此实例的长度。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3644"><paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-3645">返回此字符串转换为小写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3645">Returns a copy of this string converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower();" />
      <MemberSignature Language="F#" Value="member this.ToLower : unit -&gt; string" Usage="string.ToLower " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3646">返回此字符串转换为小写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3646">Returns a copy of this string converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3647">一个小写字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3647">A string in lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3648">此方法将考虑当前区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3648">This method takes into account the casing rules of the current culture.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3649">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3649">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3650">相反，它会返回一个新字符串，其中当前实例中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3650">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="7ec08-3651">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3651">Security Considerations</span></span>
 <span data-ttu-id="7ec08-3652">通过调用方法生成的大小写操作将 <xref:System.String.ToLower> 使用当前区域性的大小写约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3652">The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="7ec08-3653">如果需要操作系统标识符的小写或大写版本，如文件名、命名管道或注册表项，请使用 <xref:System.String.ToLowerInvariant%2A> 或 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3653">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span> <span data-ttu-id="7ec08-3654">与方法不同，每个区域性 (生成相同的结果 <xref:System.String.ToLower> ，) 并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3654">This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.</span></span>

## Examples
 <span data-ttu-id="7ec08-3655">下面的示例将几个大小写混合的字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3655">The following example converts several mixed case strings to lowercase.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringlowerupper/CPP/stringtolower.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/CS/stringtolower.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringlowerupper/VB/stringtolower.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3656">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串大小写方法，而是调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3656">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-3657">若要使用当前区域性的大小写约定将字符转换为小写，请使用 <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> 其参数的值调用方法重载 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> <paramref name="culture" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3657">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower (System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToLower : System.Globalization.CultureInfo -&gt; string" Usage="string.ToLower culture" />
      <MemberSignature Language="C#" Value="public string ToLower (System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="7ec08-3658">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3658">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="7ec08-3659">根据指定区域性的大小写规则返回此字符串转换为小写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3659">Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3660">当前字符串的等效小写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3660">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3661">参数指定的区域性的大小写规则 `culture` 确定了字符串大小写的更改方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3661">The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3662">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3662">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3663">相反，它会返回一个新字符串，其中当前实例中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3663">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="7ec08-3664">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3664">Security Considerations</span></span>
 <span data-ttu-id="7ec08-3665">如果将方法传递 <xref:System.String.ToLower(System.Globalization.CultureInfo)> <xref:System.Globalization.CultureInfo> 到之外的对象 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> ，则大小写操作将考虑特定于区域性的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3665">If you pass the <xref:System.String.ToLower(System.Globalization.CultureInfo)> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="7ec08-3666">如果需要操作系统标识符的小写或大写版本，如文件名、命名管道或注册表项，请使用 <xref:System.String.ToLowerInvariant%2A> 或 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3666">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="7ec08-3667">这会在每个区域性中产生相同的结果并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3667">This produces the same result in every culture and performs more efficiently.</span></span>

## Examples
 <span data-ttu-id="7ec08-3668">下面的示例使用 English-United 状态和 Turkish-Turkey 区域性将大写字符的两个字符串转换为小写字符，然后比较小写字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3668">The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings.</span></span> <span data-ttu-id="7ec08-3669">大写字符串完全相同，只是对于一个字符串中的每个 Unicode 大写字母 I 的每个匹配项，另一个字符串包含上面带点的拉丁文大写字母 I。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3669">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.tolower1/CPP/tolower.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.tolower1/CS/tolower.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tolower1/VB/tolower.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-3670"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3670"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.ToUpper" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public string ToLowerInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLowerInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLowerInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLowerInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLowerInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToLowerInvariant : unit -&gt; string" Usage="string.ToLowerInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3671">返回此 <see cref="T:System.String" /> 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3671">Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3672">当前字符串的等效小写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3672">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3673">固定区域性表示不区分区域性的区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3673">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="7ec08-3674">它与英语相关联，而不是与特定国家或地区相关联。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3674">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="7ec08-3675">有关更多信息，请参见 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3675">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>

 <span data-ttu-id="7ec08-3676">如果你的应用程序依赖于以可预测方式（不受当前区域性影响）更改的字符串，请使用 <xref:System.String.ToLowerInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3676">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="7ec08-3677"><xref:System.String.ToLowerInvariant%2A>方法等效于 `ToLower(CultureInfo.InvariantCulture)` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3677">The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="7ec08-3678">如果在用户界面控件中必须按可预测顺序显示字符串集合，则建议使用方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3678">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3679">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3679">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3680">相反，它会返回一个新字符串，其中当前实例中的所有字符都转换为小写。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3680">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="7ec08-3681">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3681">Security Considerations</span></span>
 <span data-ttu-id="7ec08-3682">如果需要操作系统标识符的小写或大写版本，如文件名、命名管道或注册表项，请使用 <xref:System.String.ToLowerInvariant%2A> 或 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3682">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>

## Examples
 <span data-ttu-id="7ec08-3683">下面的示例定义了一个字符串数组，其中包含多种语言的单个单词。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3683">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="7ec08-3684"><xref:System.String.ToLowerInvariant%2A>方法用于使用每个单词的不区分大小写的版本填充并行数组的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3684">The <xref:System.String.ToLowerInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="7ec08-3685"><xref:System.Array.Sort%60%602(%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D)?displayProperty=nameWithType>方法用于根据小写数组中元素的顺序对区分大小写的数组进行排序，以确保元素按与语言无关的顺序显示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3685">The <xref:System.Array.Sort%60%602(%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D)?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tolowerinvariant/cs/tolowerinvariant.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tolowerinvariant/vb/tolowerinvariant.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpperInvariant" />
        <altmember cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-3686">将此实例的值转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3686">Converts the value of this instance to a <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="string.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3687">返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3687">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3688">当前的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3688">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3689">由于此方法只是返回未更改的当前字符串，因此不需要直接调用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3689">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span> <span data-ttu-id="7ec08-3690">它通常在复合格式设置操作中进行隐式调用，如示例所示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3690">It is usually called implicitly in a composite formatting operation, as the example shows.</span></span>

## Examples
 <span data-ttu-id="7ec08-3691">下面的示例演示 <xref:System.String.ToString%2A> 方法。请注意，该示例不显式调用 <xref:System.String.ToString%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3691">The following example demonstrates the <xref:System.String.ToString%2A> method.Note that the example does not explicitly call the <xref:System.String.ToString%2A> method.</span></span> <span data-ttu-id="7ec08-3692">相反，该方法由 [复合格式设置](/dotnet/standard/base-types/composite-formatting) 功能隐式调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3692">Instead, the method is called implicitly by the [composite formatting](/dotnet/standard/base-types/composite-formatting) feature.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.tostring/CPP/string.tostring.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.tostring/CS/string.tostring.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tostring/VB/string.tostring.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Clone" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="string.ToString provider" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="7ec08-3693">（保留）一个对象，用于提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3693">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="7ec08-3694">返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3694">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3695">当前的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3695">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3696">`provider` 保留，并且当前不参与此操作。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3696">`provider` is reserved, and does not currently participate in this operation.</span></span>

 <span data-ttu-id="7ec08-3697">由于此方法只是返回未更改的当前字符串，因此不需要直接调用它。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3697">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-3698">返回此字符串转换为大写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3698">Returns a copy of this string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper();" />
      <MemberSignature Language="F#" Value="member this.ToUpper : unit -&gt; string" Usage="string.ToUpper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3699">返回此字符串转换为大写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3699">Returns a copy of this string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3700">当前字符串的大写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3700">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3701">此方法使用当前区域性的大小写规则将当前实例中的每个字符转换为其大写等效项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3701">This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.</span></span> <span data-ttu-id="7ec08-3702">如果某个字符没有大写等效项，则在返回的字符串中包含不变的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3702">If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3703">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3703">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3704">相反，它会返回一个新字符串，其中当前实例中的所有字符都转换为大写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3704">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>

 <span data-ttu-id="7ec08-3705"><xref:System.String.ToUpper%2A>方法通常用于将字符串转换为大写，以便可以在不区分大小写的比较中使用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3705">The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.</span></span> <span data-ttu-id="7ec08-3706">要执行不区分大小写的比较，更好的方法是调用具有参数的参数的字符串比较方法，此 <xref:System.StringComparison> 参数的值为 <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> 区分区域性、不区分大小写的比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3706">A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> for a culture-sensitive, case-insensitive comparison.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="7ec08-3707">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3707">Security Considerations</span></span>
 <span data-ttu-id="7ec08-3708">通过调用方法生成的大小写操作将 <xref:System.String.ToUpper> 使用当前区域性的大小写约定。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3708">The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="7ec08-3709">如果需要操作系统标识符的小写或大写版本，如文件名、命名管道或注册表项，请使用 <xref:System.String.ToLowerInvariant%2A> 或 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3709">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="7ec08-3710">与方法不同，每个区域性 (生成相同的结果 <xref:System.String.ToUpper> ，) 并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3710">This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.</span></span>

## Examples
 <span data-ttu-id="7ec08-3711">下面的示例调用 <xref:System.String.ToUpper%2A> 方法来转换包含基本拉丁语、拉丁语-1 补充和拉丁语扩展字符集中的每个字符的一系列单字符字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3711">The following example calls the <xref:System.String.ToUpper%2A> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets.</span></span> <span data-ttu-id="7ec08-3712">然后，它会显示其大写字符与小写字符不同的每个字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3712">It then displays each string whose uppercase character is different from its lowercase character.</span></span>

 [!code-cpp[System.String.ToUpper#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.ToUpper/cpp/ToUpperEx.cpp#1)]
 [!code-csharp[System.String.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.ToUpper/cs/ToUpperEx.cs#1)]
 [!code-vb[System.String.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.ToUpper/vb/ToUpperEx.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3713">如 [使用字符串的最佳做法](/dotnet/standard/base-types/best-practices-strings)中所述，建议你避免调用替换默认值的字符串大小写方法，而是调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3713">As explained in [Best Practices for Using Strings](/dotnet/standard/base-types/best-practices-strings), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="7ec08-3714">若要使用当前区域性的大小写约定将字符串转换为大写，请使用的 <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> 参数的值调用方法重载 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> <paramref name="culture" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3714">To convert a string to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper (System.Globalization.CultureInfo? culture);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToUpper : System.Globalization.CultureInfo -&gt; string" Usage="string.ToUpper culture" />
      <MemberSignature Language="C#" Value="public string ToUpper (System.Globalization.CultureInfo culture);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="7ec08-3715">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3715">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="7ec08-3716">根据指定区域性的大小写规则返回此字符串转换为大写形式的副本。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3716">Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3717">当前字符串的大写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3717">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3718">由参数指定的区域性的大小写规则 `culture` 确定字符串大小写的更改方式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3718">The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3719">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3719">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3720">相反，它会返回一个新字符串，其中当前实例中的所有字符都转换为大写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3720">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="7ec08-3721">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3721">Security Considerations</span></span>
 <span data-ttu-id="7ec08-3722">如果将方法传递 <xref:System.String.ToUpper(System.Globalization.CultureInfo)> <xref:System.Globalization.CultureInfo> 到之外的对象 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> ，则大小写操作将考虑特定于区域性的规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3722">If you pass the <xref:System.String.ToUpper(System.Globalization.CultureInfo)> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="7ec08-3723">如果需要操作系统标识符的小写或大写版本，如文件名、命名管道或注册表项，请使用 <xref:System.String.ToLowerInvariant%2A> 或 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3723">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="7ec08-3724">这会在每个区域性中产生相同的结果并更有效地执行。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3724">This produces the same result in every culture and performs more efficiently.</span></span>

## Examples
 <span data-ttu-id="7ec08-3725">下面的示例使用 English-United 状态和 Turkish-Turkey 区域性将小写字符字符串转换为大写字符的两个字符串，然后对大写字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3725">The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings.</span></span> <span data-ttu-id="7ec08-3726">大写字符串完全相同，只是对于一个字符串中的每个 Unicode 大写字母 I 的每个匹配项，另一个字符串包含上面带点的拉丁文大写字母 I。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3726">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>

 [!code-csharp[string.toupper1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.toupper1/CS/toupper.cs#1)]
 [!code-vb[string.toupper1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.toupper1/VB/toupper.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7ec08-3727"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3727"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public string ToUpperInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpperInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpperInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpperInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpperInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToUpperInvariant : unit -&gt; string" Usage="string.ToUpperInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3728">返回此 <see cref="T:System.String" /> 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3728">Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3729">当前字符串的大写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3729">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="7ec08-3730">固定区域性表示不区分区域性的区域性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3730">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="7ec08-3731">它与英语相关联，而不是与特定国家或地区相关联。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3731">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="7ec08-3732">有关更多信息，请参见 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3732">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>

 <span data-ttu-id="7ec08-3733">如果你的应用程序依赖于以可预测方式（不受当前区域性影响）更改的字符串，请使用 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3733">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="7ec08-3734"><xref:System.String.ToUpperInvariant%2A>方法等效于 `ToUpper(CultureInfo.InvariantCulture)` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3734">The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="7ec08-3735">如果在用户界面控件中必须按可预测顺序显示字符串集合，则建议使用方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3735">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3736">此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3736">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3737">相反，它会返回一个新字符串，其中当前实例中的所有字符都转换为大写形式。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3737">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="7ec08-3738">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="7ec08-3738">Security Considerations</span></span>
 <span data-ttu-id="7ec08-3739">如果需要操作系统标识符的小写或大写版本，如文件名、命名管道或注册表项，请使用 <xref:System.String.ToLowerInvariant%2A> 或 <xref:System.String.ToUpperInvariant%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3739">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>

## Examples
 <span data-ttu-id="7ec08-3740">下面的示例定义了一个字符串数组，其中包含多种语言的单个单词。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3740">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="7ec08-3741"><xref:System.String.ToUpperInvariant%2A>方法用于使用每个单词的不区分大小写的版本填充并行数组的元素。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3741">The <xref:System.String.ToUpperInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="7ec08-3742"><xref:System.Array.Sort%60%602(%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D)?displayProperty=nameWithType>方法用于根据大写数组中元素的顺序对区分大小写的数组进行排序，以确保元素按与语言无关的顺序显示。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3742">The <xref:System.Array.Sort%60%602(%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D)?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.</span></span>

 [!code-csharp[System.String.ToUpperInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.toupperinvariant/cs/toupperinvariant.cs#1)]
 [!code-vb[System.String.ToUpperInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.toupperinvariant/vb/toupperinvariant.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Trim">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7ec08-3743">返回一个新字符串，它相当于从当前字符串中删除了一组指定字符的所有前导匹配项和尾随匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3743">Returns a new string in which all leading and trailing occurrences of a set of specified characters from the current string are removed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim();" />
      <MemberSignature Language="F#" Value="member this.Trim : unit -&gt; string" Usage="string.Trim " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3744">从当前字符串删除所有前导空白字符和尾随空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3744">Removes all leading and trailing white-space characters from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3745">从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3745">The string that remains after all white-space characters are removed from the start and end of the current string.</span></span> <span data-ttu-id="7ec08-3746">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3746">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3747">`Trim`方法从当前字符串中删除所有前导和尾随空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3747">The `Trim` method removes from the current string all leading and trailing white-space characters.</span></span> <span data-ttu-id="7ec08-3748">遇到非空白字符时，每个前导和尾随修整操作都会停止。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3748">Each leading and trailing trim operation stops when a non-white-space character is encountered.</span></span> <span data-ttu-id="7ec08-3749">例如，如果当前字符串为 "abc xyz"，则该 `Trim` 方法返回 "abc xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3749">For example, if the current string is "   abc   xyz    ", the `Trim` method returns "abc   xyz".</span></span> <span data-ttu-id="7ec08-3750">若要删除字符串中的单词之间的空白字符，请使用 [.Net 正则表达式](/dotnet/standard/base-types/regular-expressions)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3750">To remove white-space characters between words in a string, use [.NET Regular Expressions](/dotnet/standard/base-types/regular-expressions).</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3751">如果该 `Trim` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3751">If the `Trim` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3752">相反，它会返回一个新字符串，其中将删除当前实例中找到的所有前导和尾随空格字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3752">Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</span></span>

<span data-ttu-id="7ec08-3753">如果当前字符串等于 <xref:System.String.Empty?displayProperty=nameWithtype> 或当前实例中的所有字符都包含空白字符，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3753">If the current string equals <xref:System.String.Empty?displayProperty=nameWithtype> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

<span data-ttu-id="7ec08-3754">空白字符由 Unicode 标准定义。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3754">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="7ec08-3755">`Trim`方法在将生成返回值的所有前导和尾随字符 `true` 传递给方法时，删除这些字符 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3755">The `Trim` method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

## Examples

<span data-ttu-id="7ec08-3756">下面的示例使用方法在连接 <xref:System.String.Trim?displayProperty=nameWithType> 之前从用户输入的字符串中删除任何多余的空格。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3756">The following example uses the <xref:System.String.Trim?displayProperty=nameWithType> method to remove any extra white space from strings entered by the user before concatenating them.</span></span>

[!code-cpp[System.String.Trim#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim2.cpp#2)]
[!code-csharp[System.String.Trim#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim2.cs#2)]
[!code-vb[System.String.Trim#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim2.vb#2)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3757">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和早期版本维护此方法修整的空白字符的内部列表。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3757">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintain an internal list of white-space characters that this method trims.</span></span> <span data-ttu-id="7ec08-3758">从开始 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，方法会剪裁所有 Unicode 空白字符， (也就是说，在将 <see langword="true" /> 其传递到方法) 时生成返回值的字符 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3758">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="7ec08-3759">由于此更改，和更 <see cref="M:System.String.Trim" /> 早版本中的方法将 [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 删除两个字符，零宽度空间 (u + 200B) 和零宽度无间断空格 (U + FEFF) ，则 <see cref="M:System.String.Trim" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 和更高版本中的方法不会删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3759">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="7ec08-3760">此外， <see cref="M:System.String.Trim" /> [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 和更早版本中的方法不会剪裁三个 Unicode 空白字符：蒙古语元音分隔符 (u + 180E) 、窄的无中断空格 (u + 202F) 和中等数学空间 (u + 205F) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3760">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.Trim : char -&gt; string" Usage="string.Trim trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="trimChar"><span data-ttu-id="7ec08-3761">要删除的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3761">A Unicode character to remove.</span></span></param>
        <summary><span data-ttu-id="7ec08-3762">从当前字符串删除字符的所有前导实例和尾随实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3762">Removes all leading and trailing instances of a character from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3763">从当前字符串的开头和结尾删除 <paramref name="trimChar" /> 字符的所有实例后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3763">The string that remains after all instances of the <paramref name="trimChar" /> character are removed from the start and end of the current string.</span></span> <span data-ttu-id="7ec08-3764">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3764">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3765">`Trim(System.Char)`方法从当前字符串中删除该字符的所有前导和尾随实例 `trimChar` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3765">The `Trim(System.Char)` method removes from the current string all leading and trailing instances of the `trimChar` character.</span></span> <span data-ttu-id="7ec08-3766">当遇到与不同的字符时，每个前导和尾随修整操作都会停止 `trimChar` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3766">Each leading and trailing trim operation stops when a character different from `trimChar` is encountered.</span></span> <span data-ttu-id="7ec08-3767">例如，如果 `trimChar` 为， `-` 并且当前字符串为 "---abc---xyz----"，则该 `Trim(System.Char)` 方法返回 "abc---xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3767">For example, if `trimChar` is `-` and the current string is "---abc---xyz----", the `Trim(System.Char)` method returns "abc---xyz".</span></span> <span data-ttu-id="7ec08-3768">若要删除字符串中的单词之间的字符，请使用 [.Net 正则表达式](/dotnet/standard/base-types/regular-expressions)。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3768">To remove characters between words in a string, use [.NET Regular Expressions](/dotnet/standard/base-types/regular-expressions).</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3769">如果该 `Trim(System.Char)` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3769">If the `Trim(System.Char)` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3770">相反，它会返回一个新字符串，其中将删除在 `trimChar` 当前实例中找到的所有前导和尾随字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3770">Instead, it returns a new string in which all leading and trailing `trimChar` characters found in the current instance are removed.</span></span>

<span data-ttu-id="7ec08-3771">如果当前字符串等于 <xref:System.String.Empty?displayProperty=nameWithtype> 或当前实例中的所有字符都包含 `trimChar` 字符，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3771">If the current string equals <xref:System.String.Empty?displayProperty=nameWithtype> or all the characters in the current instance consist of `trimChar` characters, the method returns <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (params char[] trimChars);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.Trim : char[] -&gt; string" Usage="string.Trim trimChars" />
      <MemberSignature Language="C#" Value="public string Trim (params char[]? trimChars);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="7ec08-3772">要删除的 Unicode 字符的数组，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3772">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-3773">从当前字符串删除数组中指定的一组字符的所有前导匹配项和尾随匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3773">Removes all leading and trailing occurrences of a set of characters specified in an array from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3774">从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3774">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string.</span></span> <span data-ttu-id="7ec08-3775">如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3775">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span> <span data-ttu-id="7ec08-3776">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3776">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3777">`Trim(System.Char[])`方法从当前字符串中删除参数中的所有前导和尾随字符 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3777">The `Trim(System.Char[])` method removes from the current string all leading and trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="7ec08-3778">当遇到不在中的字符时，每个前导和尾随修整操作都会停止 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3778">Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="7ec08-3779">例如，如果当前字符串为 "123abc456xyz789" 并且 `trimChars` 包含从 "1" 到 "9" 的数字，则该 `Trim(System.Char[])` 方法将返回 "abc456xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3779">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the `Trim(System.Char[])` method returns "abc456xyz".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3780">如果该 `Trim(System.Char[])` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3780">If the `Trim(System.Char[])` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3781">相反，它会返回一个新字符串，其中将删除在 `trimChars` 当前实例中找到的所有前导和尾随字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3781">Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.</span></span>

<span data-ttu-id="7ec08-3782">如果当前字符串等于 <xref:System.String.Empty?displayProperty=nameWithtype> 或当前实例中的所有字符都包含数组中的字符 `trimChars` ，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithtype> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3782">If the current string equals <xref:System.String.Empty?displayProperty=nameWithtype> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

<span data-ttu-id="7ec08-3783">如果 `trimChars` 为 `null` 或空数组，则此方法将删除在 `true` 将方法传递给方法时导致该方法返回的所有前导或尾随字符 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3783">If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

## Examples

<span data-ttu-id="7ec08-3784">下面的示例使用 `Trim(System.Char[])` 方法从字符串中删除空格、星号 ( \* ) 和撇号 ( ") 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3784">The following example uses the `Trim(System.Char[])` method to remove space, asterisk (\*), and apostrophe (') characters from a string.</span></span>

[!code-cpp[System.String.Trim#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim1.cpp#1)]
[!code-csharp-interactive[System.String.Trim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim1.cs#1)]
[!code-vb[System.String.Trim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim1.vb#1)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3785">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本维护一个内部空白字符列表，如果 <paramref name="trimChars" /> 为或空数组，此方法将修整此列表 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3785">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="7ec08-3786">从开始 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，该方法将剪裁所有 Unicode 空白字符， (也就是说，在将 <see langword="true" /> 其传递到方法) 时生成返回值的字符 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3786">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="7ec08-3787">由于此更改，和更 <see cref="M:System.String.Trim" /> 早版本中的方法将 [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 删除两个字符，零宽度空间 (u + 200B) 和零宽度无间断空格 (U + FEFF) ，则 <see cref="M:System.String.Trim" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 和更高版本中的方法不会删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3787">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="7ec08-3788">此外， <see cref="M:System.String.Trim" /> [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 和更早版本中的方法不会剪裁三个 Unicode 空白字符：蒙古语元音分隔符 (u + 180E) 、窄的无中断空格 (u + 202F) 和中等数学空间 (u + 205F) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3788">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd();" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : unit -&gt; string" Usage="string.TrimEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3789">从当前字符串删除所有尾随空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3789">Removes all the trailing white-space characters from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3790">从当前字符串的结尾删除所有空白字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3790">The string that remains after all white-space characters are removed from the end of the current string.</span></span> <span data-ttu-id="7ec08-3791">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3791">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3792">`TrimEnd`方法从当前字符串中删除所有尾随空格字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3792">The `TrimEnd` method removes from the current string all trailing white-space characters.</span></span> <span data-ttu-id="7ec08-3793">当在字符串末尾遇到第一个非空白字符时，剪裁操作将停止。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3793">The trim operation stops when the first non white-space character is encountered at the end of the string.</span></span> <span data-ttu-id="7ec08-3794">例如，如果当前字符串为 "abc xyz"，则该 `TrimEnd` 方法返回 "abc xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3794">For example, if the current string is "   abc   xyz    ", the `TrimEnd` method returns "   abc   xyz".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3795">如果该 `TrimEnd` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3795">If the `TrimEnd` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3796">相反，它会返回一个新字符串，其中所有尾随空格字符都从当前字符串中删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3796">Instead, it returns a new string in which all trailing white-space characters are removed from the current string.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char -&gt; string" Usage="string.TrimEnd trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="trimChar"><span data-ttu-id="7ec08-3797">要删除的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3797">A Unicode character to remove.</span></span></param>
        <summary><span data-ttu-id="7ec08-3798">从当前字符串删除字符的所有尾随匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3798">Removes all the trailing occurrences of a character from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3799">从当前字符串的末尾删除所出现的所有 <paramref name="trimChar" /> 字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3799">The string that remains after all occurrences of the <paramref name="trimChar" /> character are removed from the end of the current string.</span></span> <span data-ttu-id="7ec08-3800">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3800">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3801">`TrimEnd(System.Char)`方法从当前字符串中删除所有尾随 `trimChar` 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3801">The `TrimEnd(System.Char)` method removes from the current string all trailing `trimChar` characters.</span></span> <span data-ttu-id="7ec08-3802">当在字符串末尾遇到第一个不是的字符时，修整操作将停止 `trimChar` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3802">The trim operation stops when the first character that is not `trimChar` is encountered at the end of the string.</span></span> <span data-ttu-id="7ec08-3803">例如，如果 `trimChar` 为， `-` 并且当前字符串为 "---abc---xyz----"，则该 `TrimEnd(System.Char)` 方法返回 "---abc---xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3803">For example, if `trimChar` is `-` and the current string is "---abc---xyz----", the `TrimEnd(System.Char)` method returns "---abc---xyz".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3804">如果该 `TrimEnd(System.Char)` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3804">If the `TrimEnd(System.Char)` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3805">相反，它会返回一个新字符串，其中所有尾随 `trimChar` 字符都从当前字符串中删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3805">Instead, it returns a new string in which all trailing `trimChar` characters are removed from the current string.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (params char[] trimChars);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char[] -&gt; string" Usage="string.TrimEnd trimChars" />
      <MemberSignature Language="C#" Value="public string TrimEnd (params char[]? trimChars);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="7ec08-3806">要删除的 Unicode 字符的数组，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3806">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-3807">从当前字符串删除数组中指定的一组字符的所有尾随匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3807">Removes all the trailing occurrences of a set of characters specified in an array from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3808">从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3808">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string.</span></span> <span data-ttu-id="7ec08-3809">如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为删除 Unicode 空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3809">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead.</span></span> <span data-ttu-id="7ec08-3810">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3810">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3811">`TrimEnd(System.Char[])`方法从当前字符串中删除参数中的所有尾随字符 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3811">The `TrimEnd(System.Char[])` method removes from the current string all trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="7ec08-3812">当在字符串末尾遇到不在中的第一个字符时，剪裁操作将停止 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3812">The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string.</span></span> <span data-ttu-id="7ec08-3813">例如，如果当前字符串为 "123abc456xyz789" 并且 `trimChars` 包含从 "1" 到 "9" 的数字，则该 `TrimEnd(System.Char[])` 方法将返回 "123abc456xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3813">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the `TrimEnd(System.Char[])` method returns "123abc456xyz".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3814">如果该 `TrimEnd(System.Char[])` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3814">If the `TrimEnd(System.Char[])` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3815">相反，它会返回一个新字符串，其中在中找到的所有尾随字符 `trimChars` 将从当前字符串中删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3815">Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.</span></span>

## Examples

<span data-ttu-id="7ec08-3816">下面的示例演示如何使用 `TrimEnd(System.Char[])` 方法从字符串末尾修整空格或标点符号。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3816">The following example demonstrates how you can use the `TrimEnd(System.Char[])` method to trim white space or punctuation marks from the end of a string.</span></span>

[!code-csharp-interactive[System.String.TrimEnd#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimEnd/cs/sample2.cs#2)]
[!code-vb[System.String.TrimEnd#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimEnd/vb/Sample2.vb#2)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3817">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本维护一个内部空白字符列表，如果 <paramref name="trimChars" /> 为或空数组，此方法将修整此列表 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3817">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="7ec08-3818">从开始 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，该方法将剪裁所有 Unicode 空白字符， (也就是说，在将 <see langword="true" /> 其传递到方法) 时生成返回值的字符 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3818">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="7ec08-3819">由于此更改，和更 <see cref="M:System.String.Trim" /> 早版本中的方法将 [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 删除两个字符，零宽度空间 (u + 200B) 和零宽度无间断空格 (U + FEFF) ，则 <see cref="M:System.String.Trim" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 和更高版本中的方法不会删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3819">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="7ec08-3820">此外， <see cref="M:System.String.Trim" /> [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 和更早版本中的方法不会剪裁三个 Unicode 空白字符：蒙古语元音分隔符 (u + 180E) 、窄的无中断空格 (u + 202F) 和中等数学空间 (u + 205F) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3820">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart();" />
      <MemberSignature Language="F#" Value="member this.TrimStart : unit -&gt; string" Usage="string.TrimStart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ec08-3821">从当前字符串删除所有前导空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3821">Removes all the leading white-space characters from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3822">从当前字符串的开头删除所有空白字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3822">The string that remains after all white-space characters are removed from the start of the current string.</span></span> <span data-ttu-id="7ec08-3823">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3823">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3824">`TrimStart`方法从当前字符串中删除所有前导空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3824">The `TrimStart` method removes from the current string all leading white-space characters.</span></span> <span data-ttu-id="7ec08-3825">如果遇到非空白字符，剪裁操作将停止。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3825">The trim operation stops when a non white-space character is encountered.</span></span> <span data-ttu-id="7ec08-3826">例如，如果当前字符串为 "abc xyz"，则该 `TrimStart` 方法返回 "abc xyz"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3826">For example, if the current string is "   abc   xyz    ", the `TrimStart` method returns "abc   xyz    ".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3827">如果该 `TrimStart` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3827">If the `TrimStart` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3828">相反，它会返回一个新字符串，其中将删除当前实例中找到的所有前导空格字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3828">Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char -&gt; string" Usage="string.TrimStart trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="trimChar"><span data-ttu-id="7ec08-3829">要删除的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3829">The Unicode character to remove.</span></span></param>
        <summary><span data-ttu-id="7ec08-3830">删除当前字符串中的指定字符的所有前导匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3830">Removes all the leading occurrences of a specified character from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3831">从当前字符串的开头删除所出现的所有 <paramref name="trimChar" /> 字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3831">The string that remains after all occurrences of the <paramref name="trimChar" /> character are removed from the start of the current string.</span></span> <span data-ttu-id="7ec08-3832">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3832">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3833">`TrimStart(System.Char)`方法从当前字符串中删除所有前导 `trimChar` 字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3833">The `TrimStart(System.Char)` method removes from the current string all leading `trimChar` characters.</span></span> <span data-ttu-id="7ec08-3834">当遇到不是的字符时，剪裁操作将停止 `trimChar` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3834">The trim operation stops when a character that is not `trimChar` is encountered.</span></span> <span data-ttu-id="7ec08-3835">例如，如果 `trimChar` 为， `-` 并且当前字符串为 "---abc---xyz----"，则该 `TrimStart(System.Char)` 方法返回 "abc---xyz----"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3835">For example, if `trimChar` is `-` and the current string is "---abc---xyz----", the `TrimStart(System.Char)` method returns "abc---xyz----".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3836">如果该 `TrimStart(System.Char)` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3836">If the `TrimStart(System.Char)` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3837">相反，它会返回一个新字符串，其中将 `trimChar` 删除当前实例中找到的所有前导字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3837">Instead, it returns a new string in which all leading `trimChar` characters found in the current instance are removed.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (params char[] trimChars);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char[] -&gt; string" Usage="string.TrimStart trimChars" />
      <MemberSignature Language="C#" Value="public string TrimStart (params char[]? trimChars);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="7ec08-3838">要删除的 Unicode 字符的数组，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3838">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="7ec08-3839">从当前字符串删除数组中指定的一组字符的所有前导匹配项。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3839">Removes all the leading occurrences of a set of characters specified in an array from the current string.</span></span></summary>
        <returns><span data-ttu-id="7ec08-3840">从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3840">The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string.</span></span> <span data-ttu-id="7ec08-3841">如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为移除空白字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3841">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span> <span data-ttu-id="7ec08-3842">如果从当前实例无法删除字符，此方法返回未更改的当前实例。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3842">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7ec08-3843">`TrimStart(System.Char[])`方法从当前字符串中删除参数中的所有前导字符 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3843">The `TrimStart(System.Char[])` method removes from the current string all leading characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="7ec08-3844">当遇到不在中的字符时，剪裁操作将停止 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3844">The trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="7ec08-3845">例如，如果当前字符串为 "123abc456xyz789" 并且 `trimChars` 包含从 "1" 到 "9" 的数字，则该 `TrimStart(System.Char[])` 方法将返回 "abc456xyz789"。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3845">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the `TrimStart(System.Char[])` method returns "abc456xyz789".</span></span>

> [!NOTE]
> <span data-ttu-id="7ec08-3846">如果该 `TrimStart(System.Char[])` 方法从当前实例中移除所有字符，则此方法不会修改当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3846">If the `TrimStart(System.Char[])` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="7ec08-3847">相反，它会返回一个新字符串，其中将删除当前实例中找到的参数中的所有前导字符 `trimChars` 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3847">Instead, it returns a new string in which all leading characters that are in the `trimChars` parameter found in the current instance are removed.</span></span>

## Examples

<span data-ttu-id="7ec08-3848">下面的示例演示方法的基本功能 <xref:System.String.TrimStart%2A> ：</span><span class="sxs-lookup"><span data-stu-id="7ec08-3848">The following example demonstrates the basic functionality of the <xref:System.String.TrimStart%2A> method:</span></span>

:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb" id="Snippet1":::

<span data-ttu-id="7ec08-3849">下面的示例使用 <xref:System.String.TrimStart%2A> 方法从源代码行中剪裁空格和注释字符。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3849">The following example uses the <xref:System.String.TrimStart%2A> method to trim white space and comment characters from lines of source code.</span></span> <span data-ttu-id="7ec08-3850">`StripComments`方法包装对的调用 <xref:System.String.TrimStart%2A> ，并向其传递一个字符数组，该数组包含一个空格和注释字符，注释字符是 Visual Basic 中的撇号 ( ") ，后者是 c # 中的斜杠 (/) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3850">The `StripComments` method wraps a call to <xref:System.String.TrimStart%2A> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#.</span></span> <span data-ttu-id="7ec08-3851">在 <xref:System.String.TrimStart%2A> 计算字符串是否为注释时，还会调用方法来删除前导空格。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3851">The <xref:System.String.TrimStart%2A> method is also called to remove leading white space when evaluating whether a string is a comment.</span></span>

[!code-csharp[System.String.TrimStart#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#2)]
[!code-vb[System.String.TrimStart#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#2)]

<span data-ttu-id="7ec08-3852">下面的示例演示对 `StripComments` 方法的调用。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3852">The following example then illustrates a call to the `StripComments` method.</span></span>

[!code-csharp[System.String.TrimStart#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#3)]
[!code-vb[System.String.TrimStart#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#3)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="7ec08-3853">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]和更早版本维护一个内部空白字符列表，如果 <paramref name="trimChars" /> 为或空数组，此方法将修整此列表 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3853">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="7ec08-3854">从开始 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，该方法将剪裁所有 Unicode 空白字符， (也就是说，在将 <see langword="true" /> 其传递到方法) 时生成返回值的字符 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3854">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="7ec08-3855">由于此更改，和更 <see cref="M:System.String.Trim" /> 早版本中的方法将 [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 删除两个字符，零宽度空间 (u + 200B) 和零宽度无间断空格 (U + FEFF) ，则 <see cref="M:System.String.Trim" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 和更高版本中的方法不会删除。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3855">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="7ec08-3856">此外， <see cref="M:System.String.Trim" /> [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 和更早版本中的方法不会剪裁三个 Unicode 空白字符：蒙古语元音分隔符 (u + 180E) 、窄的无中断空格 (u + 202F) 和中等数学空间 (u + 205F) 。</span><span class="sxs-lookup"><span data-stu-id="7ec08-3856">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>
