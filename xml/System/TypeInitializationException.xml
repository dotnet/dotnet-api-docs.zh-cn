<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47970d6c34bc536fbad95329601734c8ce81fb23" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83528612" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeInitializationException extends System.Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit Exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeInitializationException extends System.SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="444f7-101">当类初始值设定项引发包装器异常时引发的异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-101">The exception that is thrown as a wrapper around the exception thrown by the class initializer.</span></span> <span data-ttu-id="444f7-102">无法继承此类。</span><span class="sxs-lookup"><span data-stu-id="444f7-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="444f7-103">当类初始值设定项初始化类型失败时，将创建一个 <xref:System.TypeInitializationException>，并向其传递对由该类型的类初始值设定项引发的异常的引用。</span><span class="sxs-lookup"><span data-stu-id="444f7-103">When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer.</span></span> <span data-ttu-id="444f7-104"><xref:System.TypeInitializationException> 的 <xref:System.Exception.InnerException%2A> 属性包含基础异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-104">The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.</span></span>  
  
 <span data-ttu-id="444f7-105">通常情况下，<xref:System.TypeInitializationException> 异常反映了灾难性条件（运行时无法实例化类型），这会阻止应用程序继续。</span><span class="sxs-lookup"><span data-stu-id="444f7-105">Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</span></span>  <span data-ttu-id="444f7-106">最常见的情况是，在应用程序的执行环境中发生某些更改时，会引发 <xref:System.TypeInitializationException>。</span><span class="sxs-lookup"><span data-stu-id="444f7-106">Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application.</span></span> <span data-ttu-id="444f7-107">因此，除了对调试代码进行故障排除外，不应在 `try`/`catch` 块中处理异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-107">Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block.</span></span> <span data-ttu-id="444f7-108">相反，应调查并消除异常的原因。</span><span class="sxs-lookup"><span data-stu-id="444f7-108">Instead, the cause of the exception should be investigated and eliminated.</span></span>  
  
 <span data-ttu-id="444f7-109"><xref:System.TypeInitializationException> 使用值为0x80131534 的 HRESULT COR_E_TYPEINITIALIZATION。</span><span class="sxs-lookup"><span data-stu-id="444f7-109"><xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</span></span>  
  
 <span data-ttu-id="444f7-110">有关实例的初始属性值的列表<xref:System.TypeInitializationException>，请参阅<xref:System.TypeInitializationException.%23ctor%2A>构造函数。</span><span class="sxs-lookup"><span data-stu-id="444f7-110">For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.</span></span>  
  
 <span data-ttu-id="444f7-111">以下各节介绍引发 <xref:System.TypeInitializationException> 异常的一些情况。</span><span class="sxs-lookup"><span data-stu-id="444f7-111">The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.</span></span>  
  
- [<span data-ttu-id="444f7-112">静态构造函数和 System.typeinitializationexception 异常</span><span class="sxs-lookup"><span data-stu-id="444f7-112">Static constructors and the TypeInitializationException exception</span></span>](#Static)   
- [<span data-ttu-id="444f7-113">正则表达式匹配超时值</span><span class="sxs-lookup"><span data-stu-id="444f7-113">Regular expression match timeout values</span></span>](#Timeout)   
- [<span data-ttu-id="444f7-114">日历和文化数据</span><span class="sxs-lookup"><span data-stu-id="444f7-114">Calendars and cultural data</span></span>](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a><span data-ttu-id="444f7-115">静态构造函数和 System.typeinitializationexception</span><span class="sxs-lookup"><span data-stu-id="444f7-115">Static constructors and the TypeInitializationException</span></span>

 <span data-ttu-id="444f7-116">静态构造函数（如果存在）在创建类型的新实例之前由运行时自动调用。</span><span class="sxs-lookup"><span data-stu-id="444f7-116">A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</span></span> <span data-ttu-id="444f7-117">静态构造函数可以由开发人员显式定义。</span><span class="sxs-lookup"><span data-stu-id="444f7-117">Static constructors can be explicitly defined by a developer.</span></span> <span data-ttu-id="444f7-118">如果未显式定义静态构造函数，编译器会自动创建一个构造函数以初始化该类型C#的任何 `static` （在中）或 `Shared` （在 Visual Basic 中）成员。</span><span class="sxs-lookup"><span data-stu-id="444f7-118">If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.</span></span>  <span data-ttu-id="444f7-119">有关静态构造函数的详细信息，请参阅[静态构造函数](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)。</span><span class="sxs-lookup"><span data-stu-id="444f7-119">For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).</span></span>  
  
 <span data-ttu-id="444f7-120">最常见的情况是，如果静态构造函数无法实例化类型，则会引发 <xref:System.TypeInitializationException> 异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-120">Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.</span></span>  <span data-ttu-id="444f7-121"><xref:System.Exception.InnerException%2A> 属性指示静态构造函数无法实例化类型的原因。</span><span class="sxs-lookup"><span data-stu-id="444f7-121">The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type.</span></span> <span data-ttu-id="444f7-122"><xref:System.TypeInitializationException> 异常的一些更常见的原因如下：</span><span class="sxs-lookup"><span data-stu-id="444f7-122">Some of the more common causes of a <xref:System.TypeInitializationException> exception are:</span></span>  
  
- <span data-ttu-id="444f7-123">静态构造函数中出现未经处理的异常</span><span class="sxs-lookup"><span data-stu-id="444f7-123">An unhandled exception in a static constructor</span></span>  
 
   <span data-ttu-id="444f7-124">如果在静态构造函数中引发异常，则该异常将包装在 <xref:System.TypeInitializationException> 异常中，并且该类型不能实例化。</span><span class="sxs-lookup"><span data-stu-id="444f7-124">If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.</span></span>  
  
   <span data-ttu-id="444f7-125">通常导致此异常难以解决的问题是：静态构造函数并不总是在源代码中显式定义。</span><span class="sxs-lookup"><span data-stu-id="444f7-125">What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</span></span> <span data-ttu-id="444f7-126">如果存在以下情况，则类型中存在静态构造函数：</span><span class="sxs-lookup"><span data-stu-id="444f7-126">A static constructor exists in a type if:</span></span>  
  
   -   <span data-ttu-id="444f7-127">它已显式定义为类型的成员。</span><span class="sxs-lookup"><span data-stu-id="444f7-127">It has been explicitly defined as a member of a type.</span></span>  
  
   -   <span data-ttu-id="444f7-128">此类型具有在单个语句C#中声明和初始化的 `static` （在中）或 `Shared` （在 Visual Basic）变量中。</span><span class="sxs-lookup"><span data-stu-id="444f7-128">The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement.</span></span> <span data-ttu-id="444f7-129">在这种情况下，语言编译器将为该类型生成静态构造函数。</span><span class="sxs-lookup"><span data-stu-id="444f7-129">In this case, the language compiler generates a static constructor for the type.</span></span> <span data-ttu-id="444f7-130">可以通过使用实用程序（如[IL 拆装](~/docs/framework/tools/ildasm-exe-il-disassembler.md)器）进行检查。</span><span class="sxs-lookup"><span data-stu-id="444f7-130">You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span> <span data-ttu-id="444f7-131">例如，当C#和 VB 编译器编译以下示例时，它们将为类似于以下内容的静态构造函数生成 IL：</span><span class="sxs-lookup"><span data-stu-id="444f7-131">For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</span></span>  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   <span data-ttu-id="444f7-132">下面的示例演示由编译器生成的静态构造函数引发 <xref:System.TypeInitializationException> 异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-132">The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor.</span></span> <span data-ttu-id="444f7-133">`Example` 类包括一个 `static` （在中C#）或 `Shared` （在 Visual Basic 中）字段，该 `TestClass` 字段通过将值3传递到其类构造函数进行实例化。</span><span class="sxs-lookup"><span data-stu-id="444f7-133">The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.</span></span>  <span data-ttu-id="444f7-134">然而，此值是非法的;只允许值0或1。</span><span class="sxs-lookup"><span data-stu-id="444f7-134">That value, however, is illegal; only values of 0 or 1 are permitted.</span></span> <span data-ttu-id="444f7-135">因此，`TestClass` 类构造函数引发了 <xref:System.ArgumentOutOfRangeException>。</span><span class="sxs-lookup"><span data-stu-id="444f7-135">As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>.</span></span> <span data-ttu-id="444f7-136">由于不处理此异常，因此将其包装在 <xref:System.TypeInitializationException> 异常中。</span><span class="sxs-lookup"><span data-stu-id="444f7-136">Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   <span data-ttu-id="444f7-137">请注意，异常消息会显示有关 <xref:System.Exception.InnerException%2A> 属性的信息。</span><span class="sxs-lookup"><span data-stu-id="444f7-137">Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.</span></span>  
  
- <span data-ttu-id="444f7-138">缺少程序集或数据文件</span><span class="sxs-lookup"><span data-stu-id="444f7-138">A missing assembly or data file</span></span>  
 
   <span data-ttu-id="444f7-139"><xref:System.TypeInitializationException> 异常的常见原因是，应用程序的开发和测试环境中存在的程序集或数据文件从其运行时环境中丢失。</span><span class="sxs-lookup"><span data-stu-id="444f7-139">A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</span></span> <span data-ttu-id="444f7-140">例如，可以使用以下命令行语法将下面的示例编译为名为 Missing1a 的程序集：</span><span class="sxs-lookup"><span data-stu-id="444f7-140">For example, you can compile the following example to an assembly named Missing1a.dll by using this command-line syntax:</span></span>  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   <span data-ttu-id="444f7-141">然后，可以通过包含对 Missing1a 的引用，将以下示例编译到名为 Missing1 的可执行文件：</span><span class="sxs-lookup"><span data-stu-id="444f7-141">You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</span></span>  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   <span data-ttu-id="444f7-142">但是，如果重命名、移动或删除 Missing1a 并运行该示例，则会引发 <xref:System.TypeInitializationException> 异常，并显示示例中所示的输出。</span><span class="sxs-lookup"><span data-stu-id="444f7-142">However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.</span></span>  <span data-ttu-id="444f7-143">请注意，异常消息包括有关 <xref:System.Exception.InnerException%2A> 属性的信息。</span><span class="sxs-lookup"><span data-stu-id="444f7-143">Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="444f7-144">在这种情况下，内部异常是引发的 <xref:System.IO.FileNotFoundException>，因为运行时找不到依赖程序集。</span><span class="sxs-lookup"><span data-stu-id="444f7-144">In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.</span></span>  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  <span data-ttu-id="444f7-145">在此示例中，由于未能加载程序集而引发 <xref:System.TypeInitializationException> 异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-145">In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded.</span></span> <span data-ttu-id="444f7-146">如果静态构造函数尝试打开数据文件（如配置文件、XML 文件或包含序列化数据的文件），则也可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-146">The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</span></span>  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a><span data-ttu-id="444f7-147">正则表达式匹配超时值</span><span class="sxs-lookup"><span data-stu-id="444f7-147">Regular expression match timeout values</span></span>  
 <span data-ttu-id="444f7-148">可以为每个应用程序域设置正则表达式模式匹配操作的默认超时值。</span><span class="sxs-lookup"><span data-stu-id="444f7-148">You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</span></span> <span data-ttu-id="444f7-149">超时值由指定 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 方法的 "REGEX_DEFAULT_MATCH_TIMEOUT" 属性 <xref:System.TimeSpan> 值定义。</span><span class="sxs-lookup"><span data-stu-id="444f7-149">The timeout is defined by a specifying a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="444f7-150">时间间隔必须是大于零且小于24天的有效 <xref:System.TimeSpan> 对象。</span><span class="sxs-lookup"><span data-stu-id="444f7-150">The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days.</span></span> <span data-ttu-id="444f7-151">如果未满足这些要求，则设置默认超时值的尝试会引发 <xref:System.ArgumentOutOfRangeException>，而这反过来会在 <xref:System.TypeInitializationException> 异常中进行包装。</span><span class="sxs-lookup"><span data-stu-id="444f7-151">If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.</span></span>  
  
 <span data-ttu-id="444f7-152">下面的示例演示当分配给 "REGEX_DEFAULT_MATCH_TIMEOUT" 属性的值无效时引发的 <xref:System.TypeInitializationException>。</span><span class="sxs-lookup"><span data-stu-id="444f7-152">The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</span></span> <span data-ttu-id="444f7-153">若要消除此异常，请将 "REGEX_DEFAULT_MATCH_TIMEOUT" 属性设置为大于零且小于大约24天的 <xref:System.TimeSpan> 值。</span><span class="sxs-lookup"><span data-stu-id="444f7-153">To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.</span></span>  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a><span data-ttu-id="444f7-154">日历和文化数据</span><span class="sxs-lookup"><span data-stu-id="444f7-154">Calendars and cultural data</span></span>  
 <span data-ttu-id="444f7-155">如果尝试实例化日历但运行时无法实例化对应于该日历的 <xref:System.Globalization.CultureInfo> 对象，则会引发 <xref:System.TypeInitializationException> 异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-155">If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception.</span></span> <span data-ttu-id="444f7-156">以下 calendar 类构造函数可能会引发此异常：</span><span class="sxs-lookup"><span data-stu-id="444f7-156">This exception can be thrown by the following calendar class constructors:</span></span>  
  
-   <span data-ttu-id="444f7-157"><xref:System.Globalization.JapaneseCalendar> 类的无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="444f7-157">The parameterless constructor of the <xref:System.Globalization.JapaneseCalendar> class.</span></span>  
  
-   <span data-ttu-id="444f7-158"><xref:System.Globalization.KoreanCalendar> 类的无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="444f7-158">The parameterless constructor of the <xref:System.Globalization.KoreanCalendar> class.</span></span>  
  
-   <span data-ttu-id="444f7-159"><xref:System.Globalization.TaiwanCalendar> 类的无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="444f7-159">The parameterless constructor of the <xref:System.Globalization.TaiwanCalendar> class.</span></span>  
  
 <span data-ttu-id="444f7-160">由于这些区域性的区域性数据应在所有系统上都可用，因此，您几乎不会遇到此异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-160">Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="444f7-161">在 .NET 中处理和引发异常</span><span class="sxs-lookup"><span data-stu-id="444f7-161">Handling and throwing exceptions in .NET</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName"><span data-ttu-id="444f7-162">未能初始化类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="444f7-162">The fully qualified name of the type that fails to initialize.</span></span></param>
        <param name="innerException"><span data-ttu-id="444f7-163">引起当前异常的异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-163">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="444f7-164">如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</span><span class="sxs-lookup"><span data-stu-id="444f7-164">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="444f7-165">用默认错误消息、指定的类型名称和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.TypeInitializationException" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="444f7-165">Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="444f7-166">因前一个异常而直接引发的异常可以在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。</span><span class="sxs-lookup"><span data-stu-id="444f7-166">An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="444f7-167"><xref:System.Exception.InnerException%2A> 属性返回传递到构造函数中的相同值，或者如果 `Nothing` 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 <xref:System.Exception.InnerException%2A>）。</span><span class="sxs-lookup"><span data-stu-id="444f7-167">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="444f7-168">下表显示了 <xref:System.TypeInitializationException> 实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="444f7-168">The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.</span></span>  
  
|<span data-ttu-id="444f7-169">属性</span><span class="sxs-lookup"><span data-stu-id="444f7-169">Property</span></span>|<span data-ttu-id="444f7-170">值</span><span class="sxs-lookup"><span data-stu-id="444f7-170">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="444f7-171">内部异常引用。</span><span class="sxs-lookup"><span data-stu-id="444f7-171">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="444f7-172">本地化的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="444f7-172">The localized error message string.</span></span>|  
|<xref:System.TypeInitializationException.TypeName%2A>|<span data-ttu-id="444f7-173">类型的名称。</span><span class="sxs-lookup"><span data-stu-id="444f7-173">The name of the type.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="444f7-174">在 .NET 中处理和引发异常</span><span class="sxs-lookup"><span data-stu-id="444f7-174">Handling and throwing exceptions in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="444f7-175">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="444f7-175">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="444f7-176">包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</span><span class="sxs-lookup"><span data-stu-id="444f7-176">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="444f7-177">设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="444f7-177">Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and additional exception information.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="444f7-178">获取未能初始化类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="444f7-178">Gets the fully qualified name of the type that fails to initialize.</span></span></summary>
        <value><span data-ttu-id="444f7-179">未能初始化类型的完全限定名。</span><span class="sxs-lookup"><span data-stu-id="444f7-179">The fully qualified name of the type that fails to initialize.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
