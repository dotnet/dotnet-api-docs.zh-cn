<Type Name="GC" FullName="System.GC">
  <Metadata><Meta Name="ms.openlocfilehash" Value="66e665e167586a53e39c3af9d9797d9f7cf529e3" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83962208" /></Metadata><TypeSignature Language="C#" Value="public static class GC" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type GC = class" />
  <TypeSignature Language="C#" Value="public sealed class GC" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GC extends System.Object" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GC" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC sealed" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f8d49-101">控制系统垃圾回收器（一种自动回收未使用内存的服务）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-101">Controls the system garbage collector, a service that automatically reclaims unused memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-102">垃圾回收器是公共语言运行时组件，它控制托管内存的分配和释放。</span><span class="sxs-lookup"><span data-stu-id="f8d49-102">The garbage collector is a common language runtime component that controls the allocation and release of managed memory.</span></span> <span data-ttu-id="f8d49-103">此类中的方法会影响在对象上执行垃圾回收的时间，以及释放由对象分配的资源的时间。</span><span class="sxs-lookup"><span data-stu-id="f8d49-103">The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released.</span></span> <span data-ttu-id="f8d49-104">此类中的属性提供有关系统中可用的总内存量以及分配给对象的内存的总内存量的信息。</span><span class="sxs-lookup"><span data-stu-id="f8d49-104">Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.</span></span>  
  
 <span data-ttu-id="f8d49-105">垃圾回收器跟踪并回收托管内存中分配的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-105">The garbage collector tracks and reclaims objects allocated in managed memory.</span></span> <span data-ttu-id="f8d49-106">垃圾回收器会定期执行垃圾回收，以回收分配给没有有效引用的对象的内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-106">Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references.</span></span> <span data-ttu-id="f8d49-107">当使用可用可用内存无法满足内存请求时，将自动进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-107">Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory.</span></span> <span data-ttu-id="f8d49-108">或者，应用程序可以使用 <xref:System.GC.Collect%2A> 方法强制进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-108">Alternatively, an application can force garbage collection using the <xref:System.GC.Collect%2A> method.</span></span>  
  
 <span data-ttu-id="f8d49-109">垃圾回收包括以下步骤：</span><span class="sxs-lookup"><span data-stu-id="f8d49-109">Garbage collection consists of the following steps:</span></span>  
  
1.  <span data-ttu-id="f8d49-110">垃圾回收器搜索在托管代码中引用的托管对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-110">The garbage collector searches for managed objects that are referenced in managed code.</span></span>  
  
2.  <span data-ttu-id="f8d49-111">垃圾回收器尝试完成未引用的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-111">The garbage collector tries to finalize objects that are not referenced.</span></span>  
  
3.  <span data-ttu-id="f8d49-112">垃圾回收器释放未引用的对象并回收其内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-112">The garbage collector frees objects that are not referenced and reclaims their memory.</span></span>  
  
 <span data-ttu-id="f8d49-113">本主题包含下列部分：</span><span class="sxs-lookup"><span data-stu-id="f8d49-113">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="f8d49-114">[垃圾回收器和非托管资源](#unmanaged) </span><span class="sxs-lookup"><span data-stu-id="f8d49-114">[The garbage collector and unmanaged resources](#unmanaged) </span></span>  
 <span data-ttu-id="f8d49-115">[对象老化和代](#generations) </span><span class="sxs-lookup"><span data-stu-id="f8d49-115">[Object aging and generations](#generations) </span></span>  
 [<span data-ttu-id="f8d49-116">禁止垃圾回收</span><span class="sxs-lookup"><span data-stu-id="f8d49-116">Disallowing garbage collection</span></span>](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a><span data-ttu-id="f8d49-117">垃圾回收器和非托管资源</span><span class="sxs-lookup"><span data-stu-id="f8d49-117">The garbage collector and unmanaged resources</span></span>  
 <span data-ttu-id="f8d49-118">在集合期间，如果对象在托管代码中找到对对象的一个或多个引用，则垃圾回收器不会释放对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-118">During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code.</span></span> <span data-ttu-id="f8d49-119">但是，垃圾回收器不会从非托管代码识别对对象的引用，并且可能会在非托管代码中独占使用对象，除非明确禁止这样做。</span><span class="sxs-lookup"><span data-stu-id="f8d49-119">However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so.</span></span> <span data-ttu-id="f8d49-120"><xref:System.GC.KeepAlive%2A> 方法提供一种机制，该机制可防止垃圾回收器收集仍在非托管代码中使用的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-120">The <xref:System.GC.KeepAlive%2A> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.</span></span>  
  
 <span data-ttu-id="f8d49-121">除了托管内存分配外，垃圾回收器的实现不会维护对象所持有的资源（例如文件句柄或数据库连接）的相关信息。</span><span class="sxs-lookup"><span data-stu-id="f8d49-121">Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections.</span></span> <span data-ttu-id="f8d49-122">当类型使用必须在回收类型的实例之前释放的非托管资源时，该类型可以实现终结器。</span><span class="sxs-lookup"><span data-stu-id="f8d49-122">When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.</span></span>  
  
 <span data-ttu-id="f8d49-123">在大多数情况下，通过重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法来实现终结器;不过，编写C#或C++实现析构函数的类型，编译器会转换为 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>的重写。</span><span class="sxs-lookup"><span data-stu-id="f8d49-123">In most cases, finalizers are implemented by overriding the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f8d49-124">在大多数情况下，如果某个对象具有终结器，垃圾回收器将在释放该对象之前调用它。</span><span class="sxs-lookup"><span data-stu-id="f8d49-124">In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object.</span></span> <span data-ttu-id="f8d49-125">但是，在所有情况下，都不需要垃圾回收器来调用终结器;例如，<xref:System.GC.SuppressFinalize%2A> 方法显式阻止调用对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="f8d49-125">However, the garbage collector is not required to call finalizers in all situations; for example, the <xref:System.GC.SuppressFinalize%2A> method explicitly prevents an object's finalizer from being called.</span></span> <span data-ttu-id="f8d49-126">此外，垃圾回收器不需要使用特定线程来完成对象，也不需要确保为彼此引用但可用于垃圾回收的对象调用终结器的顺序。</span><span class="sxs-lookup"><span data-stu-id="f8d49-126">Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.</span></span>  
  
 <span data-ttu-id="f8d49-127">在必须在特定时间释放资源的情况下，类可以实现 <xref:System.IDisposable> 接口，该接口包含执行资源管理和清理任务的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-127">In scenarios where resources must be released at a specific time, classes can implement the <xref:System.IDisposable> interface, which contains the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method that performs resource management and cleanup tasks.</span></span> <span data-ttu-id="f8d49-128">实现 <xref:System.IDisposable.Dispose%2A> 的类必须指定作为其类协定的一部分，前提是类使用方调用方法来清理对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-128">Classes that implement <xref:System.IDisposable.Dispose%2A> must specify, as part of their class contract, if and when class consumers call the method to clean up the object.</span></span> <span data-ttu-id="f8d49-129">默认情况下，垃圾回收器不会调用 <xref:System.IDisposable.Dispose%2A> 方法;但是，<xref:System.IDisposable.Dispose%2A> 方法的实现可调用 <xref:System.GC> 类中的方法，以自定义垃圾回收器的终止行为。</span><span class="sxs-lookup"><span data-stu-id="f8d49-129">The garbage collector does not, by default, call the <xref:System.IDisposable.Dispose%2A> method; however, implementations of the <xref:System.IDisposable.Dispose%2A> method can call methods in the <xref:System.GC> class to customize the finalization behavior of the garbage collector.</span></span>  
  
 <span data-ttu-id="f8d49-130">有关对象终止和释放模式的详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="f8d49-130">For more information on object finalization and the dispose pattern, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a><span data-ttu-id="f8d49-131">对象老化和代</span><span class="sxs-lookup"><span data-stu-id="f8d49-131">Object aging and generations</span></span>  
 <span data-ttu-id="f8d49-132">公共语言运行时中的垃圾回收器支持使用代的对象老化。</span><span class="sxs-lookup"><span data-stu-id="f8d49-132">The garbage collector in the common language runtime supports object aging using generations.</span></span> <span data-ttu-id="f8d49-133">代是内存中对象的相对生存期的单位。</span><span class="sxs-lookup"><span data-stu-id="f8d49-133">A generation is a unit of measure of the relative age of objects in memory.</span></span> <span data-ttu-id="f8d49-134">对象的代数或 age 指示对象所属的代。</span><span class="sxs-lookup"><span data-stu-id="f8d49-134">The generation number, or age, of an object indicates the generation to which an object belongs.</span></span> <span data-ttu-id="f8d49-135">最近创建的对象是较新的生成的一部分，其生成号比之前在应用程序生命周期中创建的对象的生成号要低。</span><span class="sxs-lookup"><span data-stu-id="f8d49-135">Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle.</span></span> <span data-ttu-id="f8d49-136">最近一代中的对象位于第0代中。</span><span class="sxs-lookup"><span data-stu-id="f8d49-136">Objects in the most recent generation are in generation 0.</span></span> <span data-ttu-id="f8d49-137">垃圾回收器的这种实现支持三代对象，第0代、第1代和第2代。</span><span class="sxs-lookup"><span data-stu-id="f8d49-137">This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2.</span></span> <span data-ttu-id="f8d49-138">可以检索 <xref:System.GC.MaxGeneration%2A> 属性的值，以确定系统支持的最大代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-138">You can retrieve the value of the <xref:System.GC.MaxGeneration%2A> property to determine the maximum generation number supported by the system.</span></span>  
  
 <span data-ttu-id="f8d49-139">对象老化允许应用程序以一组特定的代进行垃圾回收，而不需要垃圾回收器来评估所有代。</span><span class="sxs-lookup"><span data-stu-id="f8d49-139">Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations.</span></span> <span data-ttu-id="f8d49-140">包含 `generation` 参数的 <xref:System.GC.Collect%2A> 方法的重载允许您指定要进行垃圾回收的最早代。</span><span class="sxs-lookup"><span data-stu-id="f8d49-140">Overloads of the <xref:System.GC.Collect%2A> method that include a `generation` parameter allow you to specify the oldest generation to be garbage collected.</span></span>  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a><span data-ttu-id="f8d49-141">禁止垃圾回收</span><span class="sxs-lookup"><span data-stu-id="f8d49-141">Disallowing garbage collection</span></span>  
 <span data-ttu-id="f8d49-142">从 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]开始，垃圾回收器支持无 GC 区域延迟模式，在执行关键路径期间，垃圾回收可能会对应用的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="f8d49-142">Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app's performance.</span></span> <span data-ttu-id="f8d49-143">无 GC 区域延迟模式要求您指定可在不干扰垃圾回收器的情况下分配的内存量。</span><span class="sxs-lookup"><span data-stu-id="f8d49-143">The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector.</span></span> <span data-ttu-id="f8d49-144">如果运行时可以分配该内存，则运行时将不会在执行关键路径中的代码时执行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-144">If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.</span></span>  
  
 <span data-ttu-id="f8d49-145">可以通过调用 <xref:System.GC.TryStartNoGCRegion%2A>的重载之一，定义无 GC 区域的关键路径的开头。</span><span class="sxs-lookup"><span data-stu-id="f8d49-145">You define the beginning of the critical path of the no GC region by calling one of the overloads of the <xref:System.GC.TryStartNoGCRegion%2A>.</span></span> <span data-ttu-id="f8d49-146">可以通过调用 <xref:System.GC.EndNoGCRegion%2A> 方法来指定其关键路径的末尾。</span><span class="sxs-lookup"><span data-stu-id="f8d49-146">You specify the end of its critical path by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 <span data-ttu-id="f8d49-147">不能将调用嵌套到 <xref:System.GC.TryStartNoGCRegion%2A> 方法，只应在运行时当前处于无 GC 区域延迟模式时调用 <xref:System.GC.EndNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-147">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-148">换句话说，您不应多次调用 <xref:System.GC.TryStartNoGCRegion%2A> （在第一次调用方法后，后续调用将不会成功），并且您不应该只是因为对 <xref:System.GC.TryStartNoGCRegion%2A> 的第一次调用成功，因此不应指望 <xref:System.GC.EndNoGCRegion%2A> 成功。</span><span class="sxs-lookup"><span data-stu-id="f8d49-148">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-149">下面的示例使用几个 GC 方法获取有关未使用的对象块的生成和内存信息，并将其打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="f8d49-149">The following example uses several GC methods to get generation and memory information about a block of unused objects and print it to the console.</span></span> <span data-ttu-id="f8d49-150">然后收集未使用的对象，并显示生成的内存总计。</span><span class="sxs-lookup"><span data-stu-id="f8d49-150">The unused objects are then collected, and the resulting memory totals are displayed.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
    <related type="Article" href="/dotnet/standard/garbage-collection/"><span data-ttu-id="f8d49-151">垃圾回收</span><span class="sxs-lookup"><span data-stu-id="f8d49-151">Garbage Collection</span></span></related>
    <related type="Article" href="/dotnet/standard/garbage-collection/fundamentals"><span data-ttu-id="f8d49-152">垃圾回收的基础</span><span class="sxs-lookup"><span data-stu-id="f8d49-152">Fundamentals of Garbage Collection</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member AddMemoryPressure : int64 -&gt; unit" Usage="System.GC.AddMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="f8d49-153">已分配的非托管内存的增量。</span><span class="sxs-lookup"><span data-stu-id="f8d49-153">The incremental amount of unmanaged memory that has been allocated.</span></span></param>
        <summary><span data-ttu-id="f8d49-154">通知运行时在安排垃圾回收时应考虑分配大量的非托管内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-154">Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-155">在确定何时计划垃圾回收时，运行时将考虑分配多少托管内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-155">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="f8d49-156">如果某个小型托管对象分配了大量非托管内存，则运行时将仅考虑托管内存，从而低估计划垃圾回收的紧急性。</span><span class="sxs-lookup"><span data-stu-id="f8d49-156">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="f8d49-157"><xref:System.GC.AddMemoryPressure%2A> 方法将此额外压力通知给运行时系统内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-157">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory.</span></span>  
  
 <span data-ttu-id="f8d49-158">在最简单的用法模式下，托管对象在构造函数中分配非托管内存，并在 `Dispose` 或 `Finalize` 方法中释放它。</span><span class="sxs-lookup"><span data-stu-id="f8d49-158">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="f8d49-159">在分配非托管内存后调用 <xref:System.GC.AddMemoryPressure%2A> 方法，并在释放后调用 <xref:System.GC.RemoveMemoryPressure%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-159">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="f8d49-160">在更复杂的情况下，如果非托管内存分配在托管对象的生存期内发生了重大更改，则可以调用 <xref:System.GC.AddMemoryPressure%2A> 和 <xref:System.GC.RemoveMemoryPressure%2A> 方法将这些增量更改传递给运行时。</span><span class="sxs-lookup"><span data-stu-id="f8d49-160">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f8d49-161">您必须确保完全删除所添加的压力。</span><span class="sxs-lookup"><span data-stu-id="f8d49-161">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="f8d49-162">否则，可能会对长时间运行的应用程序中系统的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="f8d49-162">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-163"><paramref name="bytesAllocated" /> 小于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="f8d49-163"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
<span data-ttu-id="f8d49-164">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f8d49-164">-or-</span></span> 
<span data-ttu-id="f8d49-165">在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-165">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] AllocateArray&lt;T&gt; (int length, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] AllocateArray&lt;T&gt;(int32 length, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AllocateArray``1(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateArray(Of T) (length As Integer, Optional pinned As Boolean = false) As T()" />
      <MemberSignature Language="F#" Value="static member AllocateArray : int * bool -&gt; 'T[]" Usage="System.GC.AllocateArray (length, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="pinned" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateUninitializedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] AllocateUninitializedArray&lt;T&gt; (int length, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] AllocateUninitializedArray&lt;T&gt;(int32 length, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AllocateUninitializedArray``1(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateUninitializedArray(Of T) (length As Integer, Optional pinned As Boolean = false) As T()" />
      <MemberSignature Language="F#" Value="static member AllocateUninitializedArray : int * bool -&gt; 'T[]" Usage="System.GC.AllocateUninitializedArray (length, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="pinned" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberSignature Language="F#" Value="static member CancelFullGCNotification : unit -&gt; unit" Usage="System.GC.CancelFullGCNotification " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-166">取消注册垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-166">Cancels the registration of a garbage collection notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-167">此方法取消使用 <xref:System.GC.RegisterForFullGCNotification%2A> 方法注册的垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-167">This method cancels a garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="f8d49-168">在对 <xref:System.GC.RegisterForFullGCNotification%2A> 方法的后续调用中调整阈值参数值之前，不必调用此方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-168">You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-169">下面的示例取消垃圾回收的注册。</span><span class="sxs-lookup"><span data-stu-id="f8d49-169">The following example cancels a garbage collection registration.</span></span> <span data-ttu-id="f8d49-170">此示例摘自为[垃圾回收通知](/dotnet/standard/garbage-collection/notifications)主题提供的更大示例。</span><span class="sxs-lookup"><span data-stu-id="f8d49-170">This example is part of a larger example provided for the [Garbage Collection Notifications](/dotnet/standard/garbage-collection/notifications) topic.</span></span>  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-171">此成员在启用并发垃圾回收时不可用。</span><span class="sxs-lookup"><span data-stu-id="f8d49-171">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="f8d49-172">若要了解如何禁用并发垃圾回收，请参阅 [&lt;gcConcurrent&gt;](/dotnet/framework/configure-apps/file-schema/runtime/gcconcurrent-element) 运行时设置。</span><span class="sxs-lookup"><span data-stu-id="f8d49-172">See the [&lt;gcConcurrent&gt;](/dotnet/framework/configure-apps/file-schema/runtime/gcconcurrent-element) runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
        <related type="Article" href="/dotnet/standard/garbage-collection/notifications"><span data-ttu-id="f8d49-173">垃圾回收通知</span><span class="sxs-lookup"><span data-stu-id="f8d49-173">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8d49-174">强制进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-174">Forces garbage collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberSignature Language="F#" Value="static member Collect : unit -&gt; unit" Usage="System.GC.Collect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-175">强制对所有代进行即时垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-175">Forces an immediate garbage collection of all generations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-176">使用此方法尝试回收所有无法访问的内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-176">Use this method to try to reclaim all memory that is inaccessible.</span></span> <span data-ttu-id="f8d49-177">它执行所有生成的阻止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-177">It performs a blocking garbage collection of all generations.</span></span>  
  
 <span data-ttu-id="f8d49-178">所有对象（无论它们处于内存中的时长）都视为集合;但是，不会收集在托管代码中引用的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-178">All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected.</span></span> <span data-ttu-id="f8d49-179">使用此方法可强制系统尝试回收最大可用内存量。</span><span class="sxs-lookup"><span data-stu-id="f8d49-179">Use this method to force the system to try to reclaim the maximum amount of available memory.</span></span>  
  
 <span data-ttu-id="f8d49-180">从 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]开始，你可以在调用 <xref:System.GC.Collect%2A> 方法之前，通过将 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 属性设置为 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 来压缩大型对象堆（LOH），如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="f8d49-180">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], you can compact the large object heap (LOH) by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-181">下面的示例演示如何使用 <xref:System.GC.Collect%2A> 方法在所有内存代上执行集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-181">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on all generations of memory.</span></span> <span data-ttu-id="f8d49-182">此代码会生成大量未使用的对象，然后调用 <xref:System.GC.Collect%2A> 方法从内存中清理它们。</span><span class="sxs-lookup"><span data-stu-id="f8d49-182">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/induced"><span data-ttu-id="f8d49-183">被动回收</span><span class="sxs-lookup"><span data-stu-id="f8d49-183">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberSignature Language="F#" Value="static member Collect : int -&gt; unit" Usage="System.GC.Collect generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="f8d49-184">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-184">The number of the oldest generation to be garbage collected.</span></span></param>
        <summary><span data-ttu-id="f8d49-185">强制对 0 代到指定代进行即时垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-185">Forces an immediate garbage collection from generation 0 through a specified generation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-186">使用此方法尝试回收不可访问的内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-186">Use this method to try to reclaim memory that is inaccessible.</span></span> <span data-ttu-id="f8d49-187">但是，使用此方法并不保证回收指定代中所有无法访问的内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-187">However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="f8d49-188">如果实现了对象老化，垃圾回收器不会收集版本号高于指定代的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-188">If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation.</span></span> <span data-ttu-id="f8d49-189">如果未实现对象老化，垃圾回收器将在垃圾回收过程中考虑所有对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-189">If object aging is not implemented, the garbage collector considers all objects during the garbage collection.</span></span>  
  
 <span data-ttu-id="f8d49-190">使用 <xref:System.GC.MaxGeneration%2A> 属性可确定 `generation` 参数的最大有效值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-190">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of the `generation` parameter.</span></span>  
  
 <span data-ttu-id="f8d49-191">若要让垃圾回收器考虑所有对象，而不管它们代有哪些，请使用不带任何参数的此方法的版本。</span><span class="sxs-lookup"><span data-stu-id="f8d49-191">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span> <span data-ttu-id="f8d49-192">若要使垃圾回收器根据 <xref:System.GCCollectionMode> 设置回收对象，请使用 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="f8d49-192">To have the garbage collector reclaim objects based on a <xref:System.GCCollectionMode> setting, use the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-193">下面的示例演示如何使用 <xref:System.GC.Collect%2A> 方法在内存的各个层上执行集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-193">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on individual layers of memory.</span></span> <span data-ttu-id="f8d49-194">此代码会生成大量未使用的对象，然后调用 <xref:System.GC.Collect%2A> 方法从内存中清理它们。</span><span class="sxs-lookup"><span data-stu-id="f8d49-194">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-195"><paramref name="generation" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="f8d49-195"><paramref name="generation" /> is not valid.</span></span></exception>
        <related type="Article" href="/dotnet/standard/garbage-collection/induced"><span data-ttu-id="f8d49-196">被动回收</span><span class="sxs-lookup"><span data-stu-id="f8d49-196">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode -&gt; unit" Usage="System.GC.Collect (generation, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="f8d49-197">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-197">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="f8d49-198">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</span><span class="sxs-lookup"><span data-stu-id="f8d49-198">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <summary><span data-ttu-id="f8d49-199">强制在 <see cref="T:System.GCCollectionMode" /> 值所指定的时间对 0 代到指定代进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-199">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-200">使用 `mode` 参数可指定垃圾回收应立即发生还是仅在回收对象的最佳时间时进行。</span><span class="sxs-lookup"><span data-stu-id="f8d49-200">Use the `mode` parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects.</span></span> <span data-ttu-id="f8d49-201">使用此方法不能保证回收指定代中的所有无法访问的内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-201">Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="f8d49-202">若要在应用程序的关键期间调整垃圾回收的侵入性，请设置 <xref:System.Runtime.GCSettings.LatencyMode%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="f8d49-202">To adjust the intrusiveness of garbage collection during critical periods in your application, set the <xref:System.Runtime.GCSettings.LatencyMode%2A> property.</span></span>  
  
 <span data-ttu-id="f8d49-203">垃圾回收器不会收集版本号高于 `generation` 参数指定的代数的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-203">The garbage collector does not collect objects with a generation number higher than specified by the `generation` parameter.</span></span> <span data-ttu-id="f8d49-204">使用 <xref:System.GC.MaxGeneration%2A> 属性可确定 `generation`的最大有效值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-204">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of `generation`.</span></span>  
  
 <span data-ttu-id="f8d49-205">若要让垃圾回收器考虑所有对象，而不管它们代有哪些，请使用不带任何参数的此方法的版本。</span><span class="sxs-lookup"><span data-stu-id="f8d49-205">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span>  
  
 <span data-ttu-id="f8d49-206">若要使垃圾回收器将对象回收到指定的对象代，请使用 <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="f8d49-206">To have the garbage collector reclaim objects up to a specified generation of objects, use the <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="f8d49-207">指定最大生成时，将收集所有对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-207">When you specify the maximum generation, all objects are collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-208">下面的示例使用 <xref:System.GCCollectionMode.Optimized> 设置强制执行第2代对象的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-208">The following example forces a garbage collection for generation 2 objects with the <xref:System.GCCollectionMode.Optimized> setting.</span></span>  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-209"><paramref name="generation" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="f8d49-209"><paramref name="generation" /> is not valid.</span></span>  
  
<span data-ttu-id="f8d49-210">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f8d49-210">-or-</span></span> 
 <span data-ttu-id="f8d49-211"><paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="f8d49-211"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
        <related type="Article" href="/dotnet/standard/garbage-collection/induced"><span data-ttu-id="f8d49-212">被动回收</span><span class="sxs-lookup"><span data-stu-id="f8d49-212">Induced Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="blocking" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="f8d49-213">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-213">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="f8d49-214">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</span><span class="sxs-lookup"><span data-stu-id="f8d49-214">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking"><span data-ttu-id="f8d49-215"><see langword="true" /> 执行阻碍性垃圾回收；<see langword="false" /> 在可能的情况下执行后台垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-215"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <summary><span data-ttu-id="f8d49-216">在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。</span><span class="sxs-lookup"><span data-stu-id="f8d49-216">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-217">下表总结了 `mode` 和 `blocking` 参数的交互：</span><span class="sxs-lookup"><span data-stu-id="f8d49-217">The following table summarizes the interaction of the `mode` and `blocking` parameters:</span></span>  
  
|`mode`|<span data-ttu-id="f8d49-218">`blocking` 是 `true`</span><span class="sxs-lookup"><span data-stu-id="f8d49-218">`blocking` is `true`</span></span>|<span data-ttu-id="f8d49-219">`blocking` 是 `false`</span><span class="sxs-lookup"><span data-stu-id="f8d49-219">`blocking` is `false`</span></span>|  
|-|-|-|  
|<span data-ttu-id="f8d49-220"><xref:System.GCCollectionMode.Forced> 或 <xref:System.GCCollectionMode.Default></span><span class="sxs-lookup"><span data-stu-id="f8d49-220"><xref:System.GCCollectionMode.Forced> or <xref:System.GCCollectionMode.Default></span></span>|<span data-ttu-id="f8d49-221">尽快执行阻塞回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-221">A blocking collection is performed as soon as possible.</span></span> <span data-ttu-id="f8d49-222">如果后台回收正在进行，并且 `generation` 为0或1，则 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 方法会立即触发阻止回收，并在回收完成后返回。</span><span class="sxs-lookup"><span data-stu-id="f8d49-222">If a background collection is in progress and `generation` is 0 or 1, the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method immediately triggers a blocking collection and returns when the collection is finished.</span></span> <span data-ttu-id="f8d49-223">如果后台回收正在进行，并且 `generation` 为2，则该方法将一直等待，直到后台收集完成，触发一个阻止第2代回收，然后返回。</span><span class="sxs-lookup"><span data-stu-id="f8d49-223">If a background collection is in progress and `generation` is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</span></span>|<span data-ttu-id="f8d49-224">尽快执行回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-224">A collection is performed as soon as possible.</span></span> <span data-ttu-id="f8d49-225"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 方法请求执行后台回收，但这并没有保证；阻止式回收仍可执行，具体视环境而定。</span><span class="sxs-lookup"><span data-stu-id="f8d49-225">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="f8d49-226">如果后台回收正在进行，该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="f8d49-226">If a background collection is already in progress, the method returns immediately.</span></span>|  
|<xref:System.GCCollectionMode.Optimized>|<span data-ttu-id="f8d49-227">可能会执行阻止式回收，具体视垃圾回收器的状态和 `generation` 参数而定。</span><span class="sxs-lookup"><span data-stu-id="f8d49-227">A blocking collection may be performed, depending on the state of the garbage collector and the `generation` parameter.</span></span> <span data-ttu-id="f8d49-228">垃圾回收器会尽量提供最佳性能。</span><span class="sxs-lookup"><span data-stu-id="f8d49-228">The garbage collector tries to provide optimal performance.</span></span>|<span data-ttu-id="f8d49-229">根据垃圾回收器的状态，有时可执行回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-229">A collection may be performed, depending on the state of the garbage collector.</span></span> <span data-ttu-id="f8d49-230"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 方法请求执行后台回收，但这并没有保证；阻止式回收仍可执行，具体视环境而定。</span><span class="sxs-lookup"><span data-stu-id="f8d49-230">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="f8d49-231">垃圾回收器会尽量提供最佳性能。</span><span class="sxs-lookup"><span data-stu-id="f8d49-231">The garbage collector tries to provide optimal performance.</span></span> <span data-ttu-id="f8d49-232">如果后台回收正在进行，该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="f8d49-232">If a background collection is already in progress, the method returns immediately.</span></span>|  
  
 <span data-ttu-id="f8d49-233">如果调用 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 方法会执行完全阻止性垃圾回收，还可以通过在调用 <xref:System.GC.Collect%2A> 方法之前将 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 属性设置为 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 来压缩大型对象堆。</span><span class="sxs-lookup"><span data-stu-id="f8d49-233">If a call to the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method performs a full blocking garbage collection, you can also compact the large object heap by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-234"><paramref name="generation" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="f8d49-234"><paramref name="generation" /> is not valid.</span></span>  
  
<span data-ttu-id="f8d49-235">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f8d49-235">-or-</span></span> 
 <span data-ttu-id="f8d49-236"><paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="f8d49-236"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="F#" Value="static member Collect : int * GCCollectionMode * bool * bool -&gt; unit" Usage="System.GC.Collect (generation, mode, blocking, compacting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="mode" Type="System.GCCollectionMode" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="blocking" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="compacting" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="f8d49-237">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-237">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="f8d49-238">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</span><span class="sxs-lookup"><span data-stu-id="f8d49-238">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking"><span data-ttu-id="f8d49-239"><see langword="true" /> 执行阻碍性垃圾回收；<see langword="false" /> 在可能的情况下执行后台垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-239"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <param name="compacting"><span data-ttu-id="f8d49-240"><see langword="true" /> 表示压缩小对象堆；<see langword="false" /> 表示仅进行清理。</span><span class="sxs-lookup"><span data-stu-id="f8d49-240"><see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</span></span></param>
        <summary><span data-ttu-id="f8d49-241">在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。</span><span class="sxs-lookup"><span data-stu-id="f8d49-241">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-242">如果 `false``blocking`，GC 将决定是执行后台还是阻止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-242">If `blocking` is `false`, the GC decides whether to perform a background or a blocking garbage collection.</span></span> <span data-ttu-id="f8d49-243">如果 `true``compacting`，则会执行阻止性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-243">If `compacting` is `true`, it performs a blocking garbage collection.</span></span>  
  
 <span data-ttu-id="f8d49-244">如果 `true``compacting`，则运行时将压缩小对象堆（SOH）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-244">If `compacting` is `true`, the runtime compacts the small object heap (SOH).</span></span> <span data-ttu-id="f8d49-245">不会压缩大型对象堆（LOH），除非 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 属性设置为 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f8d49-245">The large object heap (LOH) is not compacted unless the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f8d49-246">请注意，这包括所有阻碍性垃圾回收，而不只是完全阻止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-246">Note that this includes all blocking garbage collections, not just full blocking garbage collections.</span></span>  
  
 <span data-ttu-id="f8d49-247">可以调用 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 方法，将托管堆减小到可能的最小大小，如以下代码片段所示。</span><span class="sxs-lookup"><span data-stu-id="f8d49-247">You can call the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.</span></span>  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 <span data-ttu-id="f8d49-248">指定 `compacting` 参数 `true` 可保证压缩、完全阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-248">Specifying `true` for the `compacting` argument guarantees a compacting, full blocking garbage collection.</span></span> <span data-ttu-id="f8d49-249">将 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 属性设置为 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 可确保对 LOH 和 SOH 进行压缩。</span><span class="sxs-lookup"><span data-stu-id="f8d49-249">Setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> ensures that both the LOH and SOH are compacted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberSignature Language="F#" Value="static member CollectionCount : int -&gt; int" Usage="System.GC.CollectionCount generation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="f8d49-250">对象的代，将针对此代确定垃圾回收计数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-250">The generation of objects for which the garbage collection count is to be determined.</span></span></param>
        <summary><span data-ttu-id="f8d49-251">返回已经对对象的指定代进行的垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-251">Returns the number of times garbage collection has occurred for the specified generation of objects.</span></span></summary>
        <returns><span data-ttu-id="f8d49-252">自启动进程以来已经对指定代进行的垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-252">The number of times garbage collection has occurred for the specified generation since the process was started.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-253">如果实现自己的资源管理，则可能需要通过调用 <xref:System.GC.Collect%2A> 方法来定期强制进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-253">If you implement your own resource management, you might need to force garbage collection periodically by calling the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="f8d49-254">由于这是一种代价高昂的操作，因此可以通过在最近发生垃圾回收时跳过调用来提高性能。</span><span class="sxs-lookup"><span data-stu-id="f8d49-254">Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently.</span></span> <span data-ttu-id="f8d49-255"><xref:System.GC.Collect%2A>调用后立即保存 <xref:System.GC.CollectionCount%2A> 返回的值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-255">Save the value returned by <xref:System.GC.CollectionCount%2A> immediately after calling <xref:System.GC.Collect%2A>.</span></span> <span data-ttu-id="f8d49-256">下次需要调用 <xref:System.GC.Collect%2A>时，请将 <xref:System.GC.CollectionCount%2A> 返回的当前值与保存的值进行比较。</span><span class="sxs-lookup"><span data-stu-id="f8d49-256">The next time you need to call <xref:System.GC.Collect%2A>, compare the current value returned by <xref:System.GC.CollectionCount%2A> to the saved value.</span></span> <span data-ttu-id="f8d49-257">如果这两个值相等，则说明中间没有出现任何集合，因此再次调用 <xref:System.GC.Collect%2A> 是合理的。</span><span class="sxs-lookup"><span data-stu-id="f8d49-257">If the two values are equal, no collection has occurred in the interim and it is reasonable to call <xref:System.GC.Collect%2A> again.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-258"><paramref name="generation" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="f8d49-258"><paramref name="generation" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberSignature Language="F#" Value="static member EndNoGCRegion : unit -&gt; unit" Usage="System.GC.EndNoGCRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-259">结束无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-259">Ends the no GC region latency mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-260">如果垃圾回收器不处于无 GC 区域延迟模式，<xref:System.GC.EndNoGCRegion%2A> 方法将引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="f8d49-260">The <xref:System.GC.EndNoGCRegion%2A> method throws an <xref:System.InvalidOperationException> if the garbage collector is not in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-261">在以下任一情况下会发生此情况：</span><span class="sxs-lookup"><span data-stu-id="f8d49-261">This occurs under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="f8d49-262">之前未调用 <xref:System.GC.TryStartNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-262">The <xref:System.GC.TryStartNoGCRegion%2A> method was not called previously.</span></span>  
  
-   <span data-ttu-id="f8d49-263">对 <xref:System.GC.TryStartNoGCRegion%2A> 方法的调用 `false`返回。</span><span class="sxs-lookup"><span data-stu-id="f8d49-263">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method returned `false`.</span></span>  
  
-   <span data-ttu-id="f8d49-264">对 <xref:System.GC.TryStartNoGCRegion%2A> 方法的调用引发了异常。</span><span class="sxs-lookup"><span data-stu-id="f8d49-264">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method threw an exception.</span></span>  
  
 <span data-ttu-id="f8d49-265">可以通过使用如下所示的代码来防止发生异常：</span><span class="sxs-lookup"><span data-stu-id="f8d49-265">You can prevent an exception for any of these reasons by using code such as the following:</span></span>  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-266">垃圾回收器不处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-266">The garbage collector is not in no GC region latency mode.</span></span>  
  
<span data-ttu-id="f8d49-267">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f8d49-267">-or-</span></span> 
<span data-ttu-id="f8d49-268">无 GC 区域延迟模式已结束，可能是因为已引发垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-268">The no GC region latency mode was ended previously because a garbage collection was induced.</span></span>  
  
<span data-ttu-id="f8d49-269">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f8d49-269">-or-</span></span> 
<span data-ttu-id="f8d49-270">内存分配超过了 <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> 方法调用中指定的量。</span><span class="sxs-lookup"><span data-stu-id="f8d49-270">A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</span></span></exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
        <related type="Article" href="/dotnet/standard/garbage-collection/latency"><span data-ttu-id="f8d49-271">滞后时间模式</span><span class="sxs-lookup"><span data-stu-id="f8d49-271">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberSignature Language="F#" Value="static member GetAllocatedBytesForCurrentThread : unit -&gt; int64" Usage="System.GC.GetAllocatedBytesForCurrentThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-272">获取自当前线程的生存期开始以来分配给它的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-272">Gets the total number of bytes allocated to the current thread since the beginning of its lifetime.</span></span></summary>
        <returns><span data-ttu-id="f8d49-273">自当前线程的生存期开始以来分配给它的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-273">The total number of bytes allocated to the current thread since the beginning of its lifetime.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f8d49-274">`GetAllocatedBytesForCurrentThread` 方法返回在线程的生存期内在托管堆上分配的字节总数，而不是在垃圾回收后的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-274">The `GetAllocatedBytesForCurrentThread` method returns the total number of bytes allocated on the managed heap during the lifetime of a thread, not the total number of bytes that have survived garbage collection.</span></span> <span data-ttu-id="f8d49-275">返回的值还不包括任何本机分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-275">The returned value also does not include any native allocations.</span></span>

<span data-ttu-id="f8d49-276">此方法对于测量时间间隔或事件之间的内存分配差异的监视方案最为有用。</span><span class="sxs-lookup"><span data-stu-id="f8d49-276">This method is most useful in monitoring scenarios for measuring the difference in memory allocation between time intervals or events.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGCMemoryInfo">
      <MemberSignature Language="C#" Value="public static GCMemoryInfo GetGCMemoryInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCMemoryInfo GetGCMemoryInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGCMemoryInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGCMemoryInfo () As GCMemoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCMemoryInfo GetGCMemoryInfo();" />
      <MemberSignature Language="F#" Value="static member GetGCMemoryInfo : unit -&gt; GCMemoryInfo" Usage="System.GC.GetGCMemoryInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.GCMemoryInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-277">获取垃圾回收的内存信息。</span><span class="sxs-lookup"><span data-stu-id="f8d49-277">Gets garbage collection memory information.</span></span></summary>
        <returns><span data-ttu-id="f8d49-278">一个对象，该对象包含有关垃圾回收器的内存使用量的信息。</span><span class="sxs-lookup"><span data-stu-id="f8d49-278">An object that contains information about the garbage collector's memory usage.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8d49-279">返回对象的当前代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-279">Returns the current generation number of an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : obj -&gt; int" Usage="System.GC.GetGeneration obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f8d49-280">检索其代信息的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-280">The object that generation information is retrieved for.</span></span></param>
        <summary><span data-ttu-id="f8d49-281">返回指定对象的当前代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-281">Returns the current generation number of the specified object.</span></span></summary>
        <returns><span data-ttu-id="f8d49-282"><paramref name="obj" /> 的当前代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-282">The current generation number of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-283">使用此方法来确定对象的使用期限，然后将该信息与 <xref:System.GC.Collect%2A> 方法一起使用，以强制垃圾回收器收集同一代中的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-283">Use this method to determine the age of an object, and then use that information with the <xref:System.GC.Collect%2A> method to force the garbage collector to collect objects in the same generation.</span></span> <span data-ttu-id="f8d49-284">例如，如果有一组对象以组的形式创建，且同时变为不可访问，则可使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-284">For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-285">下面的示例演示如何使用 <xref:System.GC.GetGeneration%2A> 方法来确定对象的时间。</span><span class="sxs-lookup"><span data-stu-id="f8d49-285">The following example demonstrates how to use the <xref:System.GC.GetGeneration%2A> method to determine the age of an object.</span></span> <span data-ttu-id="f8d49-286">然后，该示例执行垃圾回收以清理内存，并在控制台中比较 pre 和 post 收集的内存总计。</span><span class="sxs-lookup"><span data-stu-id="f8d49-286">The example then performs garbage collections to clean up memory and compare the pre and post collection memory totals in the console.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberSignature Language="F#" Value="static member GetGeneration : WeakReference -&gt; int" Usage="System.GC.GetGeneration wo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="wo"><span data-ttu-id="f8d49-287">引用要确定其代数的目标对象的 <see cref="T:System.WeakReference" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-287">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</span></span></param>
        <summary><span data-ttu-id="f8d49-288">返回指定弱引用的目标的当前代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-288">Returns the current generation number of the target of a specified weak reference.</span></span></summary>
        <returns><span data-ttu-id="f8d49-289"><paramref name="wo" /> 的目标的当前代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-289">The current generation number of the target of <paramref name="wo" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f8d49-290">下面的示例演示如何使用 <xref:System.GC.GetGeneration%2A> 方法来确定弱引用对象的时间。</span><span class="sxs-lookup"><span data-stu-id="f8d49-290">The following example demonstrates the use of the <xref:System.GC.GetGeneration%2A> method to determine the age of a weak reference object.</span></span>  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f8d49-291">已经对 <paramref name="wo" /> 执行了垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-291">Garbage collection has already been performed on <paramref name="wo" />.</span></span></exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalAllocatedBytes">
      <MemberSignature Language="C#" Value="public static long GetTotalAllocatedBytes (bool precise = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalAllocatedBytes(bool precise) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalAllocatedBytes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalAllocatedBytes (Optional precise As Boolean = false) As Long" />
      <MemberSignature Language="F#" Value="static member GetTotalAllocatedBytes : bool -&gt; int64" Usage="System.GC.GetTotalAllocatedBytes precise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precise" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="precise"><span data-ttu-id="f8d49-292">如果为 <see langword="true" />，则收集一个精确的数字；否则，收集近似计数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-292">If <see langword="true" />, gather a precise number; otherwise, gather an approximate count.</span></span> <span data-ttu-id="f8d49-293">收集精确值会大大降低性能。</span><span class="sxs-lookup"><span data-stu-id="f8d49-293">Gathering a precise value entails a significant performance penalty.</span></span></param>
        <summary><span data-ttu-id="f8d49-294">获取在进程生命周期内分配的字节计数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-294">Gets a count of the bytes allocated over the lifetime of the process.</span></span></summary>
        <returns><span data-ttu-id="f8d49-295">在进程生命周期内分配的总字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-295">The total number of bytes allocated over the lifetime of the process.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberSignature Language="F#" Value="static member GetTotalMemory : bool -&gt; int64" Usage="System.GC.GetTotalMemory forceFullCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection"><span data-ttu-id="f8d49-296">如果此方法可以在返回之前等待垃圾回收发生，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-296"><see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f8d49-297">检索当前认为要分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-297">Retrieves the number of bytes currently thought to be allocated.</span></span> <span data-ttu-id="f8d49-298">一个参数，指示此方法是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-298">A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</span></span></summary>
        <returns><span data-ttu-id="f8d49-299">一个数字，它是托管内存中当前所分配字节数的可用的最佳近似值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-299">A number that is the best available approximation of the number of bytes currently allocated in managed memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-300">如果 `forceFullCollection` 参数 `true`，则在系统收集垃圾和终结对象时，此方法将等待较短的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="f8d49-300">If the `forceFullCollection` parameter is `true`, this method waits a short interval before returning while the system collects garbage and finalizes objects.</span></span> <span data-ttu-id="f8d49-301">间隔的持续时间是一个内部指定的限制，由已完成的垃圾回收周期数和循环之间的内存恢复量决定。</span><span class="sxs-lookup"><span data-stu-id="f8d49-301">The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles.</span></span> <span data-ttu-id="f8d49-302">垃圾回收器不保证收集所有不可访问的内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-302">The garbage collector does not guarantee that all inaccessible memory is collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-303">下面的示例演示如何使用 <xref:System.GC.GetTotalMemory%2A> 方法来获取和显示托管内存中当前分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-303">The following example demonstrates how to use the <xref:System.GC.GetTotalMemory%2A> method to get and display the number of bytes currently allocated in managed memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member KeepAlive : obj -&gt; unit" Usage="System.GC.KeepAlive obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f8d49-304">要引用的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-304">The object to reference.</span></span></param>
        <summary><span data-ttu-id="f8d49-305">引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。</span><span class="sxs-lookup"><span data-stu-id="f8d49-305">References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-306"><xref:System.GC.KeepAlive%2A> 方法的目的是确保存在对某个对象的引用，而该对象存在于垃圾回收器过早回收的风险。</span><span class="sxs-lookup"><span data-stu-id="f8d49-306">The purpose of the <xref:System.GC.KeepAlive%2A> method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector.</span></span> <span data-ttu-id="f8d49-307">这种情况的常见情况是，在托管代码或数据中没有对该对象的引用，但该对象仍在非托管代码（如 Windows Api、非托管 Dll 或使用 COM 的方法）中使用。</span><span class="sxs-lookup"><span data-stu-id="f8d49-307">A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Windows APIs, unmanaged DLLs, or methods using COM.</span></span>  
  
 <span data-ttu-id="f8d49-308">此方法引用 `obj` 参数，使该对象不符合从例程开始到调用此方法的点的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-308">This method references the `obj` parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called.</span></span> <span data-ttu-id="f8d49-309">在 `obj` 必须可用的指令范围的结尾（而不是开始）对此方法进行编码。</span><span class="sxs-lookup"><span data-stu-id="f8d49-309">Code this method at the end, not the beginning, of the range of instructions where `obj` must be available.</span></span>  
  
 <span data-ttu-id="f8d49-310"><xref:System.GC.KeepAlive%2A> 方法不执行任何操作，并且不会对作为参数传递的对象的生存期进行扩展，因此不会产生副作用。</span><span class="sxs-lookup"><span data-stu-id="f8d49-310">The <xref:System.GC.KeepAlive%2A> method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-311">下面的代码示例在其 `Main` 方法的开头创建一个对象，并在调用 <xref:System.GC.KeepAlive%2A> 方法时再次引用该对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-311">The following code example creates an object at the beginning of its `Main` method and does not refer to the object again until the end, when the <xref:System.GC.KeepAlive%2A> method is called.</span></span> <span data-ttu-id="f8d49-312">尽管对 <xref:System.GC.Collect%2A> 和 <xref:System.GC.WaitForPendingFinalizers%2A> 方法的调用，对象仍会在 `Main` 方法的30秒持续时间内保持不变。</span><span class="sxs-lookup"><span data-stu-id="f8d49-312">The object persists for the 30-second duration of the `Main` method, despite calls to the <xref:System.GC.Collect%2A> and <xref:System.GC.WaitForPendingFinalizers%2A> methods.</span></span>  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxGeneration : int" Usage="System.GC.MaxGeneration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f8d49-313">获取系统当前支持的最大代数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-313">Gets the maximum number of generations that the system currently supports.</span></span></summary>
        <value><span data-ttu-id="f8d49-314">从零到所支持的最大代数间的一个值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-314">A value that ranges from zero to the maximum number of supported generations.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-315">对象的代数或 age 是对象生命周期的实现定义的相对度量值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-315">The generation number, or age, of an object is an implementation-defined relative measure of an object's lifespan.</span></span> <span data-ttu-id="f8d49-316">最近创建的对象位于第0代中，最旧的对象在代中的代数小于或等于 <xref:System.GC.MaxGeneration%2A> 属性返回的代。</span><span class="sxs-lookup"><span data-stu-id="f8d49-316">The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the <xref:System.GC.MaxGeneration%2A> property.</span></span>  
  
 <span data-ttu-id="f8d49-317">垃圾回收器假设较新的内存更有可能符合旧内存的垃圾回收的条件。</span><span class="sxs-lookup"><span data-stu-id="f8d49-317">The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory.</span></span> <span data-ttu-id="f8d49-318">因此，垃圾回收器会在每次回收内存时调整代数，提高其性能，而 <xref:System.GC.MaxGeneration%2A> 属性值会随着时间的推移而增加。</span><span class="sxs-lookup"><span data-stu-id="f8d49-318">Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the <xref:System.GC.MaxGeneration%2A> property value can grow over time.</span></span>  
  
 <span data-ttu-id="f8d49-319">如果实现了对象老化，则 <xref:System.GC.MaxGeneration%2A> 属性返回系统使用的最大世代号;否则，此属性将返回零。</span><span class="sxs-lookup"><span data-stu-id="f8d49-319">If object aging is implemented, the <xref:System.GC.MaxGeneration%2A> property returns the maximum generation number used by the system; otherwise, this property returns zero.</span></span>  
  
 <span data-ttu-id="f8d49-320">对于此实现，保证 <xref:System.GC.MaxGeneration> 属性返回的值在执行的应用程序的生存期内保持不变。</span><span class="sxs-lookup"><span data-stu-id="f8d49-320">For this implementation, the value returned by the <xref:System.GC.MaxGeneration> property is guaranteed to remain constant for the lifetime of an executing application.</span></span>  
  
 <span data-ttu-id="f8d49-321">使用 <xref:System.GC.MaxGeneration> 属性可以确定调用采用生成参数的 <xref:System.GC.Collect%28System.Int32%29> 方法时可以指定的最大值。</span><span class="sxs-lookup"><span data-stu-id="f8d49-321">Use the <xref:System.GC.MaxGeneration> property to determine the maximum value you can specify when calling the <xref:System.GC.Collect%28System.Int32%29> method that takes a generation parameter.</span></span>
 
 
## Examples  
 <span data-ttu-id="f8d49-322">下面的示例演示如何使用 <xref:System.GC.MaxGeneration> 属性显示当前正在使用的最大世代号。</span><span class="sxs-lookup"><span data-stu-id="f8d49-322">The following example demonstrates how to use the <xref:System.GC.MaxGeneration> property to display the largest generation number currently in use.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="F#" Value="static member RegisterForFullGCNotification : int * int -&gt; unit" Usage="System.GC.RegisterForFullGCNotification (maxGenerationThreshold, largeObjectHeapThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold"><span data-ttu-id="f8d49-323">一个介于 1 和 99 之间的数字，指定根据在第 2 代中分配的对象，应何时引发通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-323">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</span></span></param>
        <param name="largeObjectHeapThreshold"><span data-ttu-id="f8d49-324">一个介于 1 和 99 之间的数字，指定根据大对象堆中分配的对象，应何时引发通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-324">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</span></span></param>
        <summary><span data-ttu-id="f8d49-325">指定当条件支持完整垃圾回收以及回收完成时，应引发垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-325">Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-326">对于每个代，垃圾回收器会将分配的阈值设置为该代。</span><span class="sxs-lookup"><span data-stu-id="f8d49-326">For each generation, the garbage collector sets a threshold for allocations into that generation.</span></span> <span data-ttu-id="f8d49-327">当分配的大小超过此阈值时，将在该生成上触发垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-327">When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation.</span></span> <span data-ttu-id="f8d49-328">例如，如果第2代的阈值为20MB （这意味着20MB 置第1代回收，并提升为第2代），超过20% 的第1代，并且收到第2代回收，则会尝试下一次垃圾回收作为第2代回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-328">For example, if generation 2's threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection.</span></span> <span data-ttu-id="f8d49-329">同样，如果大对象堆（LOH）的阈值为20MB，而你的应用已分配超过20MB 的大型对象，则下一次垃圾回收也将作为第2代回收进行，因为 LOH 只收集在 gen2 垃圾回收中。</span><span class="sxs-lookup"><span data-stu-id="f8d49-329">Similarly, if the large object heap's (LOH's) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).</span></span>  
  
 <span data-ttu-id="f8d49-330">`maxGenerationThreshold` 和 `largeObjectHeapThreshold` 阈值控制在进行完整垃圾回收之前通知您的进度。</span><span class="sxs-lookup"><span data-stu-id="f8d49-330">The `maxGenerationThreshold` and `largeObjectHeapThreshold` thresholds control how much in advance you are notified before a full garbage collection occurs.</span></span> <span data-ttu-id="f8d49-331">阈值越高，通知与下一次完整垃圾回收之间可能发生的分配越多。</span><span class="sxs-lookup"><span data-stu-id="f8d49-331">The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.</span></span>  
  
 <span data-ttu-id="f8d49-332">如果你在某些情况下，公共语言运行时的完整垃圾回收会对应用程序的性能产生负面影响，则可以要求在运行时要执行完整垃圾回收时收到通知，并在条件仍有利时通过引入回收（使用 <xref:System.GC.Collect%2A> 方法）来绕过该集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-332">If you have situations in which a full garbage collection by the common language runtime would adversely affect your application's performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <xref:System.GC.Collect%2A> method) when conditions are still favorable.</span></span> <span data-ttu-id="f8d49-333">除了自行更改垃圾回收计划之外，在以下情况下，完整的 GC 通知会很有用：</span><span class="sxs-lookup"><span data-stu-id="f8d49-333">In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:</span></span>  
  
-   <span data-ttu-id="f8d49-334">你需要监视完整垃圾回收的方法，并在收到通知时，减少实时数据大小（例如，通过释放一些缓存条目）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-334">You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries).</span></span> <span data-ttu-id="f8d49-335">因此，垃圾回收发生时，可以回收更多内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-335">As a result, when the garbage collection occurs, it is able to reclaim more memory.</span></span>  
  
-   <span data-ttu-id="f8d49-336">你监视已完成的完整垃圾回收，以便收集一些统计信息。</span><span class="sxs-lookup"><span data-stu-id="f8d49-336">You monitor for the completion of a full garbage collection so that you can collect some statistics.</span></span>  <span data-ttu-id="f8d49-337">例如，你可能想要在 GC 完成时测量堆的大小，以便了解实时数据的大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-337">For example, you might want to measure the size of the heap at GC completion so that you know the size of live data.</span></span> <span data-ttu-id="f8d49-338">（在完全 GC 后，堆的大小最小。）</span><span class="sxs-lookup"><span data-stu-id="f8d49-338">(After a full GC, the heap is at its smallest size.)</span></span>  
  
 <span data-ttu-id="f8d49-339">有关什么表示完整垃圾回收的详细信息，请参阅[垃圾回收通知](/dotnet/standard/garbage-collection/notifications)。</span><span class="sxs-lookup"><span data-stu-id="f8d49-339">For more information about what represents a full garbage collection, see [Garbage Collection Notifications](/dotnet/standard/garbage-collection/notifications).</span></span>  
  
 <span data-ttu-id="f8d49-340">当你注册垃圾回收通知时，你可以在完全垃圾回收接近和完成时收到通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-340">When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed.</span></span> <span data-ttu-id="f8d49-341">此模式类似于操作系统监视内存不足通知的方式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-341">This pattern resembles how the operating system monitors for low memory notifications.</span></span>  
  
 <span data-ttu-id="f8d49-342">使用以下准则指定 `maxGenerationThreshold` 和 `largeObjectHeapThreshold` 参数：</span><span class="sxs-lookup"><span data-stu-id="f8d49-342">Use the following guidelines for specifying the `maxGenerationThreshold` and `largeObjectHeapThreshold` parameters:</span></span>  
  
-   <span data-ttu-id="f8d49-343">阈值越大，通知与完整垃圾回收之间发生的分配就越多。</span><span class="sxs-lookup"><span data-stu-id="f8d49-343">The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.</span></span>  
  
     <span data-ttu-id="f8d49-344">较大的阈值为运行时检查接近的集合提供了更多机会。</span><span class="sxs-lookup"><span data-stu-id="f8d49-344">A larger threshold value provides more opportunities for the runtime to check for an approaching collection.</span></span> <span data-ttu-id="f8d49-345">这会增加您收到通知的可能性。</span><span class="sxs-lookup"><span data-stu-id="f8d49-345">This increases the likelihood that you will be notified.</span></span> <span data-ttu-id="f8d49-346">但是，您不应将阈值设置得太高，因为这样会导致在运行时引发下一个集合之前分配更多。</span><span class="sxs-lookup"><span data-stu-id="f8d49-346">However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.</span></span>  
  
     <span data-ttu-id="f8d49-347">使用高阈值的通知自行引发回收时，回收的对象比运行时的下一个集合回收的对象更少。</span><span class="sxs-lookup"><span data-stu-id="f8d49-347">When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime's next collection.</span></span>  
  
-   <span data-ttu-id="f8d49-348">阈值越小，通知与完整垃圾回收之间的分配越少。</span><span class="sxs-lookup"><span data-stu-id="f8d49-348">The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-349">下面的示例演示如何注册垃圾回收通知并启动一个线程来监视垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-349">The following example shows how to register a garbage collection notification and start a thread to monitor the status of the garbage collection notification.</span></span> <span data-ttu-id="f8d49-350">此代码示例是为[垃圾回收通知](/dotnet/standard/garbage-collection/notifications)主题提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="f8d49-350">This code example is part of a larger example provided for [Garbage Collection Notifications](/dotnet/standard/garbage-collection/notifications) topic.</span></span>  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-351"><paramref name="maxGenerationThreshold" /> 或 <paramref name="largeObjectHeapThreshold" /> 不在 1 和 99 之间。</span><span class="sxs-lookup"><span data-stu-id="f8d49-351"><paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</span></span></exception>
        <related type="Article" href="/dotnet/standard/garbage-collection/notifications"><span data-ttu-id="f8d49-352">垃圾回收通知</span><span class="sxs-lookup"><span data-stu-id="f8d49-352">Garbage Collection Notifications</span></span></related>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-353">此成员在启用并发垃圾回收时不可用。</span><span class="sxs-lookup"><span data-stu-id="f8d49-353">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="f8d49-354">若要了解如何禁用并发垃圾回收，请参阅 &lt;gcConcurrent&gt; 运行时设置。</span><span class="sxs-lookup"><span data-stu-id="f8d49-354">See the &lt;gcConcurrent&gt; runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberSignature Language="F#" Value="static member RemoveMemoryPressure : int64 -&gt; unit" Usage="System.GC.RemoveMemoryPressure bytesAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="f8d49-355">已释放的非托管内存量。</span><span class="sxs-lookup"><span data-stu-id="f8d49-355">The amount of unmanaged memory that has been released.</span></span></param>
        <summary><span data-ttu-id="f8d49-356">通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。</span><span class="sxs-lookup"><span data-stu-id="f8d49-356">Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-357">在确定何时计划垃圾回收时，运行时将考虑分配多少托管内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-357">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="f8d49-358">如果某个小型托管对象分配了大量非托管内存，则运行时将仅考虑托管内存，从而低估计划垃圾回收的紧急性。</span><span class="sxs-lookup"><span data-stu-id="f8d49-358">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="f8d49-359"><xref:System.GC.AddMemoryPressure%2A> 方法向运行时通知系统内存的这一额外压力，<xref:System.GC.RemoveMemoryPressure%2A> 方法通知运行时已释放额外压力。</span><span class="sxs-lookup"><span data-stu-id="f8d49-359">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory, and the <xref:System.GC.RemoveMemoryPressure%2A> method informs the runtime that the additional pressure has been released.</span></span>  
  
 <span data-ttu-id="f8d49-360">在最简单的用法模式下，托管对象在构造函数中分配非托管内存，并在 `Dispose` 或 `Finalize` 方法中释放它。</span><span class="sxs-lookup"><span data-stu-id="f8d49-360">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="f8d49-361">在分配非托管内存后调用 <xref:System.GC.AddMemoryPressure%2A> 方法，并在释放后调用 <xref:System.GC.RemoveMemoryPressure%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-361">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="f8d49-362">在更复杂的情况下，如果非托管内存分配在托管对象的生存期内发生了重大更改，则可以调用 <xref:System.GC.AddMemoryPressure%2A> 和 <xref:System.GC.RemoveMemoryPressure%2A> 方法将这些增量更改传递给运行时。</span><span class="sxs-lookup"><span data-stu-id="f8d49-362">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f8d49-363">您必须确保完全删除所添加的压力。</span><span class="sxs-lookup"><span data-stu-id="f8d49-363">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="f8d49-364">否则，可能会对长时间运行的应用程序中系统的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="f8d49-364">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-365"><paramref name="bytesAllocated" /> 小于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="f8d49-365"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
<span data-ttu-id="f8d49-366">- 或 -</span><span class="sxs-lookup"><span data-stu-id="f8d49-366">-or-</span></span> 
<span data-ttu-id="f8d49-367">在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-367">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member ReRegisterForFinalize : obj -&gt; unit" Usage="System.GC.ReRegisterForFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f8d49-368">必须为其调用终结器的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-368">The object that a finalizer must be called for.</span></span></param>
        <summary><span data-ttu-id="f8d49-369">请求系统调用指定对象的终结器，此前已为该对象调用 <see cref="M:System.GC.SuppressFinalize(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-369">Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-370"><xref:System.GC.ReRegisterForFinalize%2A> 方法将 `obj` 参数添加到请求在垃圾回收器释放对象之前终止的对象列表中。</span><span class="sxs-lookup"><span data-stu-id="f8d49-370">The <xref:System.GC.ReRegisterForFinalize%2A> method adds the `obj` parameter to the list of objects that request finalization before the garbage collector frees the object.</span></span> <span data-ttu-id="f8d49-371">`obj` 参数必须是此方法的调用方。</span><span class="sxs-lookup"><span data-stu-id="f8d49-371">The `obj` parameter must be the caller of this method.</span></span>  
  
 <span data-ttu-id="f8d49-372">调用 <xref:System.GC.ReRegisterForFinalize%2A> 方法不保证垃圾回收器将调用对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="f8d49-372">Calling the <xref:System.GC.ReRegisterForFinalize%2A> method does not guarantee that the garbage collector will call an object's finalizer.</span></span>  
  
 <span data-ttu-id="f8d49-373">默认情况下，实现终结器的所有对象都将添加到需要完成的对象列表中;但是，对象可能已经完成了，或者通过调用 <xref:System.GC.SuppressFinalize%2A> 方法禁用了终止。</span><span class="sxs-lookup"><span data-stu-id="f8d49-373">By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <xref:System.GC.SuppressFinalize%2A> method.</span></span>  
  
 <span data-ttu-id="f8d49-374">终结器可以使用此方法恢复自身或其引用的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-374">A finalizer can use this method to resurrect itself or an object that it references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-375">下面的示例演示如何使用 <xref:System.GC.ReRegisterForFinalize%2A> 方法在垃圾回收后第二次完成一个对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-375">The following example demonstrates how to use the <xref:System.GC.ReRegisterForFinalize%2A> method to finalize an object a second time after garbage collection.</span></span>  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f8d49-376"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-376"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member SuppressFinalize : obj -&gt; unit" Usage="System.GC.SuppressFinalize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f8d49-377">不得执行其终结器的对象。</span><span class="sxs-lookup"><span data-stu-id="f8d49-377">The object whose finalizer must not be executed.</span></span></param>
        <summary><span data-ttu-id="f8d49-378">请求公共语言运行时不要调用指定对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="f8d49-378">Requests that the common language runtime not call the finalizer for the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f8d49-379">此方法设置 `obj`的对象标头中的一个位，运行时在调用终结器时进行检查。</span><span class="sxs-lookup"><span data-stu-id="f8d49-379">This method sets a bit in the object header of `obj`, which the runtime checks when calling finalizers.</span></span> <span data-ttu-id="f8d49-380">由 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 方法表示的终结器用于在对对象进行垃圾回收之前释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="f8d49-380">A finalizer, which is represented by the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, is used to release unmanaged resources before an object is garbage-collected.</span></span> <span data-ttu-id="f8d49-381">如果 `obj` 没有终结器或 GC 已向终结器线程发出运行终结器的信号，则对 <xref:System.GC.SuppressFinalize%2A> 方法的调用不起作用。</span><span class="sxs-lookup"><span data-stu-id="f8d49-381">If `obj` does not have a finalizer or the GC has already signaled the finalizer thread to run the finalizer, the call to the <xref:System.GC.SuppressFinalize%2A> method has no effect.</span></span>  
  
 <span data-ttu-id="f8d49-382">实现 <xref:System.IDisposable> 接口的对象可以从对象的 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现中调用此方法，以防止垃圾回收器在不需要的对象上调用 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f8d49-382">Objects that implement the <xref:System.IDisposable> interface can call this method from the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to prevent the garbage collector from calling <xref:System.Object.Finalize%2A?displayProperty=nameWithType> on an object that does not require it.</span></span> <span data-ttu-id="f8d49-383">通常，这样做是为了防止终结器释放已由 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 实现释放的非托管资源。</span><span class="sxs-lookup"><span data-stu-id="f8d49-383">Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-384">下面的示例演示如何在资源类中使用 <xref:System.GC.SuppressFinalize%2A> 方法，以防止调用冗余垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-384">The following example demonstrates how to use the <xref:System.GC.SuppressFinalize%2A> method in a resource class to prevent a redundant garbage collection from being called.</span></span> <span data-ttu-id="f8d49-385">该示例使用[dispose 模式](/dotnet/standard/garbage-collection/implementing-dispose)来释放托管资源（即实现 <xref:System.IDisposable>的对象）和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="f8d49-385">The example uses the [dispose pattern](/dotnet/standard/garbage-collection/implementing-dispose) to free both managed resources (that is, objects that implement <xref:System.IDisposable>) and unmanaged resources.</span></span>  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f8d49-386"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-386"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="f8d49-387">释放模式</span><span class="sxs-lookup"><span data-stu-id="f8d49-387">Dispose Pattern</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8d49-388">在关键路径执行期间尝试禁止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-388">Attempts to disallow garbage collection during the execution of a critical path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d49-389">不能将调用嵌套到 <xref:System.GC.TryStartNoGCRegion%2A> 方法，只应在运行时当前处于无 GC 区域延迟模式时调用 <xref:System.GC.EndNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-389">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-390">换句话说，您不应多次调用 <xref:System.GC.TryStartNoGCRegion%2A> （在第一次调用方法后，后续调用将不会成功），并且您不应该只是因为对 <xref:System.GC.TryStartNoGCRegion%2A> 的第一次调用成功，因此不应指望 <xref:System.GC.EndNoGCRegion%2A> 成功。</span><span class="sxs-lookup"><span data-stu-id="f8d49-390">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion totalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="f8d49-391">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-391">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="f8d49-392">它必须小于或等于临时段的大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-392">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="f8d49-393">有关暂时段大小的信息，请参阅[垃圾回收基础知识](/dotnet/standard/garbage-collection/fundamentals)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="f8d49-393">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](/dotnet/standard/garbage-collection/fundamentals) article.</span></span></param>
        <summary><span data-ttu-id="f8d49-394">如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-394">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</span></span></summary>
        <returns><span data-ttu-id="f8d49-395">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-395"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-396"><xref:System.GC.TryStartNoGCRegion%28System.Int64%29> 方法尝试将垃圾回收器置于无 GC 区域延迟模式，这在应用执行关键的代码区域时不允许垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-396">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="f8d49-397">如果运行时无法最初分配所请求的内存量，垃圾回收器将执行完全阻止性垃圾回收，尝试释放更多内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-397">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="f8d49-398">如果垃圾回收器可以分配所需的内存量（在本例中为 2 \* `totalSize` 字节，则它将尝试为小对象堆分配 `totalSize` 字节，并为大型对象堆 `totalSize` 字节），则不会输入 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-398">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` bytes (it attempts to allocate `totalSize` bytes for the small object heap and `totalSize` bytes for the large object heap).</span></span>  
  
 <span data-ttu-id="f8d49-399">`totalSize` 必须足够大才能处理在关键路径中发生的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-399">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="f8d49-400">这包括应用的分配以及运行时代表应用程序进行的分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-400">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d49-401">不能将调用嵌套到 <xref:System.GC.TryStartNoGCRegion%2A> 方法，只应在运行时当前处于无 GC 区域延迟模式时调用 <xref:System.GC.EndNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-401">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-402">换句话说，您不应多次调用 <xref:System.GC.TryStartNoGCRegion%2A> （在第一次调用方法后，后续调用将不会成功），并且您不应该只是因为对 <xref:System.GC.TryStartNoGCRegion%2A> 的第一次调用成功，因此不应指望 <xref:System.GC.EndNoGCRegion%2A> 成功。</span><span class="sxs-lookup"><span data-stu-id="f8d49-402">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="f8d49-403">可以通过调用 <xref:System.GC.EndNoGCRegion%2A> 方法退出无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-403">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-404"><paramref name="totalSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-404"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-405">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-405">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="/dotnet/standard/garbage-collection/fundamentals"><span data-ttu-id="f8d49-406">垃圾回收的基础</span><span class="sxs-lookup"><span data-stu-id="f8d49-406">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="/dotnet/standard/garbage-collection/latency"><span data-ttu-id="f8d49-407">滞后时间模式</span><span class="sxs-lookup"><span data-stu-id="f8d49-407">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="f8d49-408">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-408">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="f8d49-409">它必须小于或等于临时段的大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-409">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="f8d49-410">有关暂时段大小的信息，请参阅[垃圾回收基础知识](/dotnet/standard/garbage-collection/fundamentals)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="f8d49-410">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](/dotnet/standard/garbage-collection/fundamentals) article.</span></span></param>
        <param name="disallowFullBlockingGC"><span data-ttu-id="f8d49-411"><see langword="true" /> 表示如果垃圾回收器初始无法分配 <paramref name="totalSize" /> 字节，则忽略完整的阻碍性垃圾回收；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-411"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <paramref name="totalSize" /> bytes; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f8d49-412">如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-412">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns><span data-ttu-id="f8d49-413">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-413"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-414"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> 方法尝试将垃圾回收器置于无 GC 区域延迟模式，这在应用执行关键的代码区域时不允许垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-414">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="f8d49-415">如果运行时无法最初分配所请求的内存量，并且 `false``disallowFullBlockingGC` 参数，垃圾回收器将执行完全阻止性垃圾回收，尝试释放更多内存;否则，分配将失败，并且方法将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="f8d49-415">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="f8d49-416">如果垃圾回收器能够分配所需的内存量（在这种情况下，实际上是 2 \* `totalSize` （它会尝试为小对象堆分配 `totalSize`，并为大型对象堆 `totalSize`），则垃圾回收器不会输入 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-416">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` (it attempts to allocate `totalSize` for the small object heap and `totalSize` for the large object heap).</span></span>  
  
 <span data-ttu-id="f8d49-417">`totalSize` 必须足够大才能处理在关键路径中发生的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-417">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="f8d49-418">这包括应用的分配以及运行时代表应用程序进行的分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-418">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="f8d49-419">将 `disallowFullBlockingGC` 设置为 "`true` 以防止完全阻止垃圾回收的情况下，如果最初没有足够的内存可用，则在负载平衡方案中最有用：一个系统可以调用此方法，并将其报告为准备好在返回 `true`的情况下接受请求，并让负载均衡器将请求重定向到其他系统（如果返回 `false`）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-419">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="f8d49-420">然后，在通过调用 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 方法来处理请求时，它可以执行完全阻止性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-420">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d49-421">不能将调用嵌套到 <xref:System.GC.TryStartNoGCRegion%2A> 方法，只应在运行时当前处于无 GC 区域延迟模式时调用 <xref:System.GC.EndNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-421">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-422">换句话说，您不应多次调用 <xref:System.GC.TryStartNoGCRegion%2A> （在第一次调用方法后，后续调用将不会成功），并且您不应该只是因为对 <xref:System.GC.TryStartNoGCRegion%2A> 的第一次调用成功，因此不应指望 <xref:System.GC.EndNoGCRegion%2A> 成功。</span><span class="sxs-lookup"><span data-stu-id="f8d49-422">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="f8d49-423">可以通过调用 <xref:System.GC.EndNoGCRegion%2A> 方法退出无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-423">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-424"><paramref name="totalSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-424"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-425">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-425">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="/dotnet/standard/garbage-collection/fundamentals"><span data-ttu-id="f8d49-426">垃圾回收的基础</span><span class="sxs-lookup"><span data-stu-id="f8d49-426">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="/dotnet/standard/garbage-collection/latency"><span data-ttu-id="f8d49-427">滞后时间模式</span><span class="sxs-lookup"><span data-stu-id="f8d49-427">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="lohSize" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="f8d49-428">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-428">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="f8d49-429"><paramref name="totalSize" /> -<paramref name="lohSize" /> 必须小于或等于临时段的大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-429"><paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="f8d49-430">有关暂时段大小的信息，请参阅[垃圾回收基础知识](/dotnet/standard/garbage-collection/fundamentals)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="f8d49-430">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](/dotnet/standard/garbage-collection/fundamentals) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="f8d49-431"><paramref name="totalSize" /> 中用于大对象堆 (LOH) 分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-431">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</span></span></param>
        <summary><span data-ttu-id="f8d49-432">如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-432">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</span></span></summary>
        <returns><span data-ttu-id="f8d49-433">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-433"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-434"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> 方法尝试将垃圾回收器置于无 GC 区域延迟模式，这在应用执行关键的代码区域时不允许垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-434">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="f8d49-435">如果运行时无法最初分配所请求的内存量，垃圾回收器将执行完全阻止性垃圾回收，尝试释放更多内存。</span><span class="sxs-lookup"><span data-stu-id="f8d49-435">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="f8d49-436">如果垃圾回收器能够为小对象堆（SOH）的 LOH 和 `totalSize` - `lohSize` 分配 `lohSize`，则垃圾回收器不会输入 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-436">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` - `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="f8d49-437">`lohSize` 必须足够大才能处理 LOH 的关键路径中发生的所有内存分配，并且 `totalSize` - `lohSize` 必须足够大才能处理 SOH 关键路径中发生的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-437">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` - `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="f8d49-438">这包括应用的分配以及运行时代表应用程序进行的分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-438">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d49-439">不能将调用嵌套到 <xref:System.GC.TryStartNoGCRegion%2A> 方法，只应在运行时当前处于无 GC 区域延迟模式时调用 <xref:System.GC.EndNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-439">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-440">换句话说，您不应多次调用 <xref:System.GC.TryStartNoGCRegion%2A> （在第一次调用方法后，后续调用将不会成功），并且您不应该只是因为对 <xref:System.GC.TryStartNoGCRegion%2A> 的第一次调用成功，因此不应指望 <xref:System.GC.EndNoGCRegion%2A> 成功。</span><span class="sxs-lookup"><span data-stu-id="f8d49-440">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="f8d49-441">可以通过调用 <xref:System.GC.EndNoGCRegion%2A> 方法退出无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-441">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-442"><paramref name="totalSize" /> - <paramref name="lohSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-442"><paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-443">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-443">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="/dotnet/standard/garbage-collection/fundamentals"><span data-ttu-id="f8d49-444">垃圾回收的基础</span><span class="sxs-lookup"><span data-stu-id="f8d49-444">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="/dotnet/standard/garbage-collection/latency"><span data-ttu-id="f8d49-445">滞后时间模式</span><span class="sxs-lookup"><span data-stu-id="f8d49-445">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="F#" Value="static member TryStartNoGCRegion : int64 * int64 * bool -&gt; bool" Usage="System.GC.TryStartNoGCRegion (totalSize, lohSize, disallowFullBlockingGC)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="lohSize" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="f8d49-446">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-446">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="f8d49-447"><paramref name="totalSize" /> -<paramref name="lohSize" /> 必须小于或等于临时段的大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-447"><paramref name="totalSize" /> -<paramref name="lohSize" /> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="f8d49-448">有关暂时段大小的信息，请参阅[垃圾回收基础知识](/dotnet/standard/garbage-collection/fundamentals)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="f8d49-448">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](/dotnet/standard/garbage-collection/fundamentals) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="f8d49-449"><paramref name="totalSize" /> 中用于大对象堆 (LOH) 分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-449">The number of bytes in <paramref name="totalSize" /> to use for large object heap (LOH) allocations.</span></span></param>
        <param name="disallowFullBlockingGC"><span data-ttu-id="f8d49-450"><see langword="true" /> 表示如果垃圾回收器初始无法分配小对象堆 (SOH) 和 LOH 上的指定内存，则忽略完整的阻碍性垃圾回收；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-450"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f8d49-451">如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-451">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns><span data-ttu-id="f8d49-452">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f8d49-452"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-453"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> 方法尝试将垃圾回收器置于无 GC 区域延迟模式，这在应用执行关键的代码区域时不允许垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-453">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="f8d49-454">如果运行时无法最初分配所请求的内存量，并且 `false``disallowFullBlockingGC` 参数，垃圾回收器将执行完全阻止性垃圾回收，尝试释放更多内存;否则，分配将失败，并且方法将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="f8d49-454">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="f8d49-455">如果垃圾回收器能够为小对象堆（SOH）的 LOH 和 `totalSize` - `lohSize` 分配 `lohSize`，则垃圾回收器不会输入 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-455">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` - `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="f8d49-456">`lohSize` 必须足够大才能处理 LOH 的关键路径中发生的所有内存分配，并且 `totalSize` - `lohSize` 必须足够大才能处理 SOH 关键路径中发生的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-456">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` - `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="f8d49-457">这包括应用的分配以及运行时代表应用程序进行的分配。</span><span class="sxs-lookup"><span data-stu-id="f8d49-457">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="f8d49-458">将 `disallowFullBlockingGC` 设置为 "`true` 以防止完全阻止垃圾回收的情况下，如果最初没有足够的内存可用，则在负载平衡方案中最有用：一个系统可以调用此方法，并将其报告为准备好在返回 `true`的情况下接受请求，并让负载均衡器将请求重定向到其他系统（如果返回 `false`）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-458">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="f8d49-459">然后，在通过调用 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 方法来处理请求时，它可以执行完全阻止性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-459">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d49-460">不能将调用嵌套到 <xref:System.GC.TryStartNoGCRegion%2A> 方法，只应在运行时当前处于无 GC 区域延迟模式时调用 <xref:System.GC.EndNoGCRegion%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-460">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="f8d49-461">换句话说，您不应多次调用 <xref:System.GC.TryStartNoGCRegion%2A> （在第一次调用方法后，后续调用将不会成功），并且您不应该只是因为对 <xref:System.GC.TryStartNoGCRegion%2A> 的第一次调用成功，因此不应指望 <xref:System.GC.EndNoGCRegion%2A> 成功。</span><span class="sxs-lookup"><span data-stu-id="f8d49-461">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="f8d49-462">可以通过调用 <xref:System.GC.EndNoGCRegion%2A> 方法退出无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-462">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-463"><paramref name="totalSize" /> - <paramref name="lohSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="f8d49-463"><paramref name="totalSize" /> - <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-464">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="f8d49-464">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
        <related type="Article" href="/dotnet/standard/garbage-collection/fundamentals"><span data-ttu-id="f8d49-465">垃圾回收的基础</span><span class="sxs-lookup"><span data-stu-id="f8d49-465">Fundamentals of Garbage Collection</span></span></related>
        <related type="Article" href="/dotnet/standard/garbage-collection/latency"><span data-ttu-id="f8d49-466">滞后时间模式</span><span class="sxs-lookup"><span data-stu-id="f8d49-466">Latency Modes</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8d49-467">返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-467">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-468">返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-468">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="f8d49-469">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-469">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-470">使用此方法返回的 <xref:System.GCNotificationStatus> 枚举确定使用 <xref:System.GC.RegisterForFullGCNotification%2A> 方法注册的当前垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-470">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="f8d49-471">你还可以使用 <xref:System.GC.WaitForFullGCComplete%2A> 方法来确定完整垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="f8d49-471">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="f8d49-472">如果枚举返回 <xref:System.GCNotificationStatus.Succeeded>，则可以执行一些任务，如阻止分配其他对象并使用 <xref:System.GC.Collect%2A> 方法自行引入集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-472">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="f8d49-473">请注意，通知不保证会发生完整的垃圾回收，只有该条件达到了阈值，才能进行完整垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-473">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="f8d49-474">此方法无限期地等待获取垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-474">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="f8d49-475">如果要为在无法获取通知时返回的方法指定超时时间，请使用 <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="f8d49-475">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="f8d49-476">如果在不指定超时的情况下调用此方法，则可以调用 <xref:System.GC.CancelFullGCNotification%2A> 方法（如果等待时间长于首选）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-476">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="f8d49-477">在调用 <xref:System.GC.WaitForFullGCComplete%2A> 方法时，应遵循此方法，以确保具有完全垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-477">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="f8d49-478">单独调用此方法会导致不确定的结果。</span><span class="sxs-lookup"><span data-stu-id="f8d49-478">Calling this method alone causes indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-479">下面的示例演示如何使用此方法来确定完全、阻止的垃圾回收是否接近。</span><span class="sxs-lookup"><span data-stu-id="f8d49-479">The following example shows how to use this method to determine whether a full, blocking garbage collection is approaching.</span></span> <span data-ttu-id="f8d49-480">只要 <xref:System.GCNotificationStatus.Succeeded>通知的状态，就会调用用户方法 `OnFullGCApproachNotify` 来执行操作，以响应接近的集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-480">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCApproachNotify` is called to perform actions in response to the approaching collection.</span></span> <span data-ttu-id="f8d49-481">此代码示例是为[垃圾回收通知](/dotnet/standard/garbage-collection/notifications)主题提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="f8d49-481">This code example is part of a larger example provided for [Garbage Collection Notifications](/dotnet/standard/garbage-collection/notifications) topic.</span></span>  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/notifications"><span data-ttu-id="f8d49-482">垃圾回收通知</span><span class="sxs-lookup"><span data-stu-id="f8d49-482">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCApproach : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCApproach millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="f8d49-483">在获取通知状态前等待的时间长度。</span><span class="sxs-lookup"><span data-stu-id="f8d49-483">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="f8d49-484">指定 -1 表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="f8d49-484">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="f8d49-485">在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-485">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="f8d49-486">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-486">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-487">使用此方法返回的 <xref:System.GCNotificationStatus> 枚举确定使用 <xref:System.GC.RegisterForFullGCNotification%2A> 方法注册的当前垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-487">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="f8d49-488">你还可以使用 <xref:System.GC.WaitForFullGCComplete%2A> 方法来确定完整垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="f8d49-488">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="f8d49-489">请注意，只要获取了垃圾回收通知状态，此方法就会立即返回，而不管 `millisecondsTimeout`指定的值是什么。</span><span class="sxs-lookup"><span data-stu-id="f8d49-489">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="f8d49-490">如果在 `millisecondsTimeout` 超时之前未获得垃圾回收通知状态，则此方法返回 <xref:System.GCNotificationStatus.NotApplicable>。</span><span class="sxs-lookup"><span data-stu-id="f8d49-490">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="f8d49-491">如果枚举返回 <xref:System.GCNotificationStatus.Succeeded>，则可以执行一些任务，如阻止分配其他对象并使用 <xref:System.GC.Collect%2A> 方法自行引入集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-491">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="f8d49-492">请注意，通知不保证会发生完整的垃圾回收，只有该条件达到了阈值，才能进行完整垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-492">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="f8d49-493">当你无法等待超时期限结束时，你可以调用 <xref:System.GC.CancelFullGCNotification%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-493">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="f8d49-494">在调用 <xref:System.GC.WaitForFullGCComplete%2A> 方法时，应遵循此方法，以确保具有完全垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-494">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="f8d49-495">单独调用此方法会导致不确定的结果。</span><span class="sxs-lookup"><span data-stu-id="f8d49-495">Calling this method alone causes indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f8d49-496"><paramref name="millisecondsTimeout" /> 必须为非负数，或者小于等于 <see cref="F:System.Int32.MaxValue" /> 或 -1。</span><span class="sxs-lookup"><span data-stu-id="f8d49-496"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <related type="Article" href="/dotnet/standard/garbage-collection/notifications"><span data-ttu-id="f8d49-497">垃圾回收通知</span><span class="sxs-lookup"><span data-stu-id="f8d49-497">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8d49-498">返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="f8d49-498">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : unit -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-499">返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="f8d49-499">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="f8d49-500">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-500">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-501">使用此方法返回的 <xref:System.GCNotificationStatus> 枚举确定使用 <xref:System.GC.RegisterForFullGCNotification%2A> 方法注册的当前垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-501">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="f8d49-502">你还可以使用 <xref:System.GC.WaitForFullGCApproach%2A> 方法来确定是否即将发生完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-502">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="f8d49-503">如果枚举返回 <xref:System.GCNotificationStatus.Succeeded>，则可以执行任务（例如恢复工作）并使用 <xref:System.GC.CollectionCount%2A> 属性获取集合计数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-503">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="f8d49-504">此方法无限期地等待获取垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="f8d49-504">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="f8d49-505">如果要为在无法获取通知时返回的方法指定超时时间，请使用 <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="f8d49-505">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="f8d49-506">如果在不指定超时的情况下调用此方法，则可以调用 <xref:System.GC.CancelFullGCNotification%2A> 方法（如果等待时间长于首选）。</span><span class="sxs-lookup"><span data-stu-id="f8d49-506">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="f8d49-507">此方法调用之前应调用 <xref:System.GC.WaitForFullGCApproach%2A> 方法，以确保具有完全垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-507">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="f8d49-508">单独调用此方法可能会产生不确定的结果。</span><span class="sxs-lookup"><span data-stu-id="f8d49-508">Calling this method alone can produce indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-509">下面的示例演示如何使用此方法来确定完整垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="f8d49-509">The following example shows how to use this method to determine whether a full garbage collection has completed.</span></span> <span data-ttu-id="f8d49-510">只要 <xref:System.GCNotificationStatus.Succeeded>通知的状态，就会调用用户方法 `OnFullGCCompletedNotify` 来执行操作，以响应已完成的集合。</span><span class="sxs-lookup"><span data-stu-id="f8d49-510">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCCompletedNotify` is called to perform actions in response to the completed collection.</span></span> <span data-ttu-id="f8d49-511">此代码示例是为[垃圾回收通知](/dotnet/standard/garbage-collection/notifications)主题提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="f8d49-511">This code example is part of a larger example provided for [Garbage Collection Notifications](/dotnet/standard/garbage-collection/notifications) topic.</span></span>  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/notifications"><span data-ttu-id="f8d49-512">垃圾回收通知</span><span class="sxs-lookup"><span data-stu-id="f8d49-512">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitForFullGCComplete : int -&gt; GCNotificationStatus" Usage="System.GC.WaitForFullGCComplete millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="f8d49-513">在获取通知状态前等待的时间长度。</span><span class="sxs-lookup"><span data-stu-id="f8d49-513">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="f8d49-514">指定 -1 表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="f8d49-514">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="f8d49-515">在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="f8d49-515">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="f8d49-516">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-516">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-517">使用此方法返回的 <xref:System.GCNotificationStatus> 枚举确定使用 <xref:System.GC.RegisterForFullGCNotification%2A> 方法注册的当前垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="f8d49-517">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="f8d49-518">你还可以使用 <xref:System.GC.WaitForFullGCApproach%2A> 方法来确定是否即将发生完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-518">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="f8d49-519">请注意，只要获取了垃圾回收通知状态，此方法就会立即返回，而不管 `millisecondsTimeout`指定的值是什么。</span><span class="sxs-lookup"><span data-stu-id="f8d49-519">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="f8d49-520">如果在 `millisecondsTimeout` 超时之前未获得垃圾回收通知状态，则此方法返回 <xref:System.GCNotificationStatus.NotApplicable>。</span><span class="sxs-lookup"><span data-stu-id="f8d49-520">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="f8d49-521">如果枚举返回 <xref:System.GCNotificationStatus.Succeeded>，则可以执行任务（例如恢复工作）并使用 <xref:System.GC.CollectionCount%2A> 属性获取集合计数。</span><span class="sxs-lookup"><span data-stu-id="f8d49-521">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="f8d49-522">当你无法等待超时期限结束时，你可以调用 <xref:System.GC.CancelFullGCNotification%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8d49-522">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="f8d49-523">此方法调用之前应调用 <xref:System.GC.WaitForFullGCApproach%2A> 方法，以确保具有完全垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="f8d49-523">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="f8d49-524">单独调用此方法可能会产生不确定的结果。</span><span class="sxs-lookup"><span data-stu-id="f8d49-524">Calling this method alone can produce indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f8d49-525"><paramref name="millisecondsTimeout" /> 必须为非负数，或者小于等于 <see cref="F:System.Int32.MaxValue" /> 或 -1。</span><span class="sxs-lookup"><span data-stu-id="f8d49-525"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <related type="Article" href="/dotnet/standard/garbage-collection/notifications"><span data-ttu-id="f8d49-526">垃圾回收通知</span><span class="sxs-lookup"><span data-stu-id="f8d49-526">Garbage Collection Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberSignature Language="F#" Value="static member WaitForPendingFinalizers : unit -&gt; unit" Usage="System.GC.WaitForPendingFinalizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f8d49-527">挂起当前线程，直到处理终结器队列的线程清空该队列为止。</span><span class="sxs-lookup"><span data-stu-id="f8d49-527">Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d49-528">当垃圾回收器发现可回收的对象时，它会检查每个对象以确定对象的终止要求。</span><span class="sxs-lookup"><span data-stu-id="f8d49-528">When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object's finalization requirements.</span></span> <span data-ttu-id="f8d49-529">如果对象实现终结器，且尚未通过调用 <xref:System.GC.SuppressFinalize%2A>禁用完成，则该对象将被置于标记为已准备好进行终结的对象的列表中。</span><span class="sxs-lookup"><span data-stu-id="f8d49-529">If an object implements a finalizer and has not disabled finalization by calling <xref:System.GC.SuppressFinalize%2A>, the object is placed in a list of objects that are marked as ready for finalization.</span></span> <span data-ttu-id="f8d49-530">垃圾回收器为此列表中的对象调用 <xref:System.Object.Finalize%2A> 方法，并从列表中删除这些项。</span><span class="sxs-lookup"><span data-stu-id="f8d49-530">The garbage collector calls the <xref:System.Object.Finalize%2A> methods for the objects in this list and removes the entries from the list.</span></span> <span data-ttu-id="f8d49-531">此方法会一直阻止，直到所有终结器都已运行完毕。</span><span class="sxs-lookup"><span data-stu-id="f8d49-531">This method blocks until all finalizers have run to completion.</span></span>  
  
 <span data-ttu-id="f8d49-532">未指定运行终结器的线程，因此无法保证此方法将终止。</span><span class="sxs-lookup"><span data-stu-id="f8d49-532">The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate.</span></span> <span data-ttu-id="f8d49-533">但是，当 <xref:System.GC.WaitForPendingFinalizers%2A> 方法正在进行时，此线程可能会被另一个线程中断。</span><span class="sxs-lookup"><span data-stu-id="f8d49-533">However, this thread can be interrupted by another thread while the <xref:System.GC.WaitForPendingFinalizers%2A> method is in progress.</span></span> <span data-ttu-id="f8d49-534">例如，你可以启动等待一段时间的另一个线程，并在此线程仍处于挂起状态时中断此线程。</span><span class="sxs-lookup"><span data-stu-id="f8d49-534">For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d49-535">下面的示例演示如何使用 <xref:System.GC.WaitForPendingFinalizers%2A> 方法挂起当前线程，直到完成所有收集的对象的终止为止。</span><span class="sxs-lookup"><span data-stu-id="f8d49-535">The following example demonstrates how to use the <xref:System.GC.WaitForPendingFinalizers%2A> method to suspend the current thread until finalization of all the collected objects is complete.</span></span>  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
