<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac2afe8a2f7bbfb01fe3d92de95a94bad626b235" /><Meta Name="ms.sourcegitcommit" Value="5a1772308619a503b0c695dfca01b279c555fa43" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/15/2021" /><Meta Name="ms.locfileid" Value="98237301" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IConvertible&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IConvertible&#xA;    interface IFormattable&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IEquatable(Of DateTime), IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示时间上的一刻，通常以日期和当天的时间表示。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## <a name="quick-links-to-example-code"></a>示例代码的快速链接

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

本文包括使用类型的几个示例 `DateTime` ：

**初始化示例**      
- [调用构造函数](#initialization-01)
- [调用隐式无参数构造函数](#initialization-02)
- [从返回值赋值](#initialization-03)
- [分析表示日期和时间的字符串](#initialization-04)
- [Visual Basic 语法来初始化日期和时间](#initialization-05)

**将 `DateTime` 对象格式设置为字符串**  
- [使用默认日期时间格式](#formatting-01)
- [使用特定区域性设置日期和时间的格式](#formatting-02)
- [使用标准或自定义格式字符串设置日期时间格式](#formatting-03)
- [指定格式字符串和特定区域性](#formatting-04)
- [使用 web 服务的 ISO 8601 标准格式化日期时间](#formatting-05)

**将字符串分析为 `DateTime` 对象**  
- [使用 `Parse` 或 `TryParse` 将字符串转换为日期和时间](#parsing-01)
- [使用 `ParseExact` 或 `TryParseExact` 转换已知格式的字符串](#parsing-02)
- [从 ISO 8601 字符串表示形式转换为日期和时间](#parsing-03)

**`DateTime` 分辨率**  
- [浏览日期和时间值的解决方法](#resolution-01)
- [在容差中比较是否相等](#comparison-01)

**区域性和日历**  
- [使用区域性特定日历显示日期和时间值](#calendars-01)
- [根据特定于区域性的日历分析字符串](#calendars-02)
- [初始化特定区域性日历中的日期和时间](#calendars-03)
- [使用特定区域性的日历访问日期和时间属性](#calendars-04)
- [使用特定于区域性的日历检索一年中的第几周](#calendars-05)

**持久性**  
- [将日期和时间值保持为本地时区中的字符串](#persistence-01)
- [将日期和时间值保存为区域性和时间固定格式的字符串](#persistence-02)
- [将日期和时间值保持为整数](#persistence-03)
- [使用保存日期和时间值 `XmlSerializer`](#persistence-04)
- [使用保存日期和时间值 `BinaryFormatter`](#persistence-05)
- [保留时区数据的日期和时间值](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>说明主题的快速链接。

本部分包含结构的许多常见用途的主题 `DateTime` ：
  
- [初始化 `DateTime` 对象](#initializing-a-datetime-object)
- [DateTime 值及其字符串表示形式](#datetime-values-and-their-string-representations)
- [分析字符串中的日期时间值](#parsing-datetime-values-from-strings)
- [DateTime 值](#datetime-values)
- [DateTime 操作](#datetime-operations)
- [日期时间解析](#datetime-resolution)
- [DateTime 值和日历](#datetime-values-and-calendars)
- [保留日期时间值](#persisting-datetime-values)
- [DateTime 与 TimeSpan](#datetime-vs-timespan)
- [在容错范围内比较是否相等](#comparing-for-equality-within-tolerance)
- [COM 互操作注意事项](#com-interop-considerations)
   
<xref:System.DateTime>值类型表示日期和时间，其值范围是从 00:00:00 (0001 年1月1日午夜) ， (0001 年1月1日) 到 11:59:59 p.m，年12月31日，年12月 9999 31 日 晚上 11:59:59。  
  
时间值以100毫微秒为单位进行度量。 特定日期是自公元12:00 年1月1日午夜开始的计时周期数。 日历 (公历 ) <xref:System.Globalization.GregorianCalendar> 。 数字不包括闰秒将添加的刻度。 例如，31241376000000000L 的滴答值表示日期星期五，0100 12:00:00 午夜。 <xref:System.DateTime>值始终在显式或默认日历的上下文中表示。  
  
> [!NOTE]
>  如果使用的计时周期值要转换为其他时间间隔（如分钟或秒），则应使用 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType> 、 <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType> 、 <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType> 、 <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType> 或 <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> 常量来执行转换。 例如，若要将指定的刻度数表示的秒数添加到 <xref:System.DateTime.Second%2A> 值的分量 <xref:System.DateTime> 中，则可以使用表达式 `dateValue.Second + nTicks/Timespan.TicksPerSecond` 。  

可以从 GitHub 上的文档存储库中的 [Visual Basic](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/visualbasic/System.DateTime/) 或 [c #](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/csharp/System.DateTime/) 中查看本文的整个示例集源。

> [!NOTE]
>  <xref:System.DateTime>使用特定时区的日期和时间值的结构的一种替代方法是 <xref:System.DateTimeOffset> 结构。 <xref:System.DateTimeOffset>结构在私有字段中存储日期和时间信息 <xref:System.DateTime> ，并在私有字段中存储日期和时间与 UTC 不同的分钟数 <xref:System.Int16> 。 这样一 <xref:System.DateTimeOffset> 来，一个值就可以反映特定时区中的时间，而 <xref:System.DateTime> 值只能明确反映 UTC 和本地时区的时间。 有关 <xref:System.DateTime> <xref:System.DateTimeOffset> 处理日期和时间值时何时使用结构或结构的讨论，请参阅在 [DateTime、DateTimeOffset、TimeSpan 和 TimeZoneInfo 之间进行选择](/dotnet/standard/datetime/choosing-between-datetime)。  
  
### <a name="initializing-a-datetime-object"></a>初始化 DateTime 对象  

可以通过多种不同的方式为新值指定初始值 `DateTime` ：

- 调用构造函数（在其中指定值的参数），或使用隐式无参数构造函数。
- 将分配 `DateTime` 给属性或方法的返回值。
- 分析 `DateTime` 值的字符串表示形式。
- 使用 Visual Basic 特定语言功能来实例化 `DateTime` 。 

下面的代码片段演示了每种情况的示例：

#### <a name="invoke-constructors"></a>调用构造函数

调用构造函数的任何重载 <xref:System.DateTime> ，这些重载指定日期和时间值的元素 (例如年、月、日或计时周期) 数。 下面的代码使用 <xref:System.DateTime> 构造函数指定年、月、日、小时、分钟和秒来创建特定日期。  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

`DateTime`如果希望将 `DateTime` 初始化为其默认值，请调用结构的隐式无参数构造函数。  (有关值类型的隐式无参数构造函数的详细信息，请参阅 [值类型](/dotnet/csharp/language-reference/keywords/value-types)。 ) 某些编译器还支持声明 <xref:System.DateTime> 值，而无需向其显式赋值。 在不使用显式初始化的情况下创建值还会生成默认值。 下面的示例演示了 <xref:System.DateTime> c # 和 Visual Basic 中的隐式无参数构造函数，以及 <xref:System.DateTime> Visual Basic 中无赋值的声明。  

<a name="initialization-02"></a>
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb" id="Snippet5":::
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Instantiation.cs" interactive="try-dotnet-method" id="Snippet5":::
    
#### <a name="assigning-a-computed-value"></a>分配计算值

可以为对象指定 <xref:System.DateTime> 由属性或方法返回的日期和时间值。 下面的示例将当前日期和时间、当前的协调世界时 (UTC) 日期和时间以及当前日期指定为三个新 <xref:System.DateTime> 变量。  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>分析表示日期时间的字符串

<xref:System.DateTime.Parse%2A>、 <xref:System.DateTime.ParseExact%2A> 、 <xref:System.DateTime.TryParse%2A> 和 <xref:System.DateTime.TryParseExact%2A> 方法均将字符串转换为其等效的日期和时间值。 下面的示例使用 <xref:System.DateTime.Parse%2A> 和 <xref:System.DateTime.ParseExact%2A> 方法来分析字符串并将其转换为 <xref:System.DateTime> 值。 第二种格式使用 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) 标准支持的窗体，表示字符串格式的日期和时间。 此标准表示形式通常用于传输 web 服务中的日期信息。

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

<xref:System.DateTime.TryParse%2A>和 <xref:System.DateTime.TryParseExact%2A> 方法指示字符串是否为有效的值表示形式， <xref:System.DateTime> 如果为，则执行转换。  

#### <a name="language-specific-syntax-for-visual-basic"></a>Visual Basic 语言特定的语法

下面的 Visual Basic 语句初始化一个新 <xref:System.DateTime> 值。  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime 值及其字符串表示形式  

在内部，所有 <xref:System.DateTime> 值都表示为自0001年1月1日午夜12:00:00 日午夜以来经过的100毫微秒时间间隔 () 数。 实际 <xref:System.DateTime> 值与显示时值的显示方式无关。 值的外观 <xref:System.DateTime> 是格式设置操作的结果，它将值转换为其字符串表示形式。  
  
日期和时间值的外观依赖于区域性、国际标准、应用程序要求和个人喜好。 <xref:System.DateTime>结构通过的重载为日期和时间值设置格式提供灵活性 <xref:System.DateTime.ToString%2A> 。 默认 <xref:System.DateTime.ToString?displayProperty=nameWithType> 方法使用当前区域性的短日期和长时间模式返回日期和时间值的字符串表示形式。 下面的示例使用默认 <xref:System.DateTime.ToString?displayProperty=nameWithType> 方法。 它使用当前区域性的短日期和长时间模式显示日期和时间。 En-us 区域性是在其上运行示例的计算机上的当前区域性。  
  
<a name="formatting-01"></a> [!code-csharp[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

您可能需要设置特定区域性中的日期格式，以支持服务器可能与客户端不同的区域性的 web 方案。 使用方法指定区域性 <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> ，以在特定区域性中创建短日期和长时间表示形式。 下面的示例使用 <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 方法来显示使用 fr-fr 区域性的短日期和长时间模式的日期和时间。  
  
<a name="formatting-02"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/StringFormat.cs" interactive="try-dotnet-method" id="Snippet2":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb" id="Snippet2":::

 其他应用程序可能需要日期的不同字符串表示形式。 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法使用当前区域性的格式设置约定返回由标准或自定义格式说明符定义的字符串表示形式。 下面的示例使用 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 方法来显示 en-us 区域性（运行该示例的计算机上的当前区域性）的完整日期和时间模式。  
  
<a name="formatting-03"></a> [!code-csharp[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 最后，可以使用方法指定区域性和格式 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 。 下面的示例使用 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 方法显示 fr-fr 区域性的完整日期和时间模式。  

<a name="formatting-04"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/StringFormat.cs" interactive="try-dotnet-method" id="Snippet4":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb" id="Snippet4":::

<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>重载还可与自定义格式字符串一起用于指定其他格式。 下面的示例演示如何使用通常用于 web 服务的 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) 标准格式来设置字符串的格式。 Iso 8601 格式没有对应的标准格式字符串。

<a name="formatting-05"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/StringFormat.cs" interactive="try-dotnet-method" id="Snippet5":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb" id="Snippet5":::

有关设置值格式的详细信息 <xref:System.DateTime> ，请参阅  [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  

### <a name="parsing-datetime-values-from-strings"></a>分析字符串中的日期时间值

分析将日期和时间的字符串表示形式转换为 <xref:System.DateTime> 值。 通常，在应用程序中，日期和时间字符串具有两种不同的用法：  
  
-   日期和时间采用各种形式，并反映了当前区域性或特定区域性的约定。 例如，应用程序允许其当前区域性为 en-us 的用户将日期值输入为 "12/15/2013" 或 "12 月15日，2013"。 它允许当前区域性为 en 的用户将日期值输入为 "15/12/2013" 或 "15 12 月12日 2013"。  
  
-   日期和时间以预定义的格式表示。 例如，应用程序将日期序列化为 "20130103"，而不考虑应用运行的区域性。 应用程序可能需要以当前区域性的短日期格式输入日期。
  
使用 <xref:System.DateTime.Parse%2A> 或方法可以 <xref:System.DateTime.TryParse%2A> 将字符串从区域性使用的一个通用日期和时间格式转换为一个 <xref:System.DateTime> 值。 下面的示例演示如何使用将 <xref:System.DateTime.TryParse%2A> 不同区域性特定格式的日期字符串转换为 <xref:System.DateTime> 值。 它将当前区域性更改为英语 (英国) ，并调用 <xref:System.DateTime.GetDateTimeFormats> 方法来生成日期和时间字符串的数组。 然后，它将数组中的每个元素传递给 <xref:System.DateTime.TryParse%2A> 方法。 该示例的输出显示，分析方法能够成功转换每个特定于区域性的日期和时间字符串。  
  
<a name="parsing-01"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Parsing.cs" interactive="try-dotnet-method" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Parsing.vb" id="Snippet1":::

使用 <xref:System.DateTime.ParseExact%2A> 和 <xref:System.DateTime.TryParseExact%2A> 方法可将必须与特定格式或格式匹配的字符串转换为 <xref:System.DateTime> 值。 将一个或多个日期和时间格式字符串指定为分析方法的参数。 下面的示例使用 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 方法将必须以 "yyyyMMdd" 格式或 "HHmmss" 格式的字符串转换为 <xref:System.DateTime> 值。  
  
<a name="parsing-02"></a> [!code-csharp[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

的一个常见用途 <xref:System.DateTime.ParseExact%2A> 是转换 web 服务的字符串表示形式，通常采用 [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) 标准格式。 下面的代码显示要使用的正确格式字符串：

<a name="parsing-03"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Parsing.cs" interactive="try-dotnet-method" id="Snippet3":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Parsing.vb" id="Snippet3":::

如果无法分析字符串，则 <xref:System.DateTime.Parse%2A> 和方法会 <xref:System.DateTime.ParseExact%2A> 引发异常。 <xref:System.DateTime.TryParse%2A>和 <xref:System.DateTime.TryParseExact%2A> 方法返回一个 <xref:System.Boolean> 值，该值指示转换是成功还是失败。 <xref:System.DateTime.TryParse%2A> <xref:System.DateTime.TryParseExact%2A> 在性能非常重要的情况下，应使用或方法。 日期和时间字符串的分析操作往往会产生较高的故障率，并且异常处理开销较高。 如果用户输入字符串或来自未知源，请使用这些方法。 
  
有关分析日期和时间值的详细信息，请参阅 [分析日期和时间字符串](/dotnet/standard/base-types/parsing-datetime)。  

### <a name="datetime-values"></a>DateTime 值

类型中时间值的说明 <xref:System.DateTime> 通常使用协调世界时 (UTC) 标准来表示。 协调世界时是格林尼治标准时间 (GMT) 的国际公认的名称。 协调世界时是指以零度经度（UTC 原点）度量的时间。 夏令时不适用于 UTC。  
  
本地时间相对于特定时区。 时区与时区偏移量关联。 时区偏移量是从 UTC 原点开始，以小时为单位的时间范围的位移。 此外，还可以根据夏令时（添加或减去时间间隔调整）来影响本地时间。 本地时间是通过将时区偏移量添加到 UTC 并调整夏令时（如有必要）来计算的。 UTC 原点的时区偏移量为零。  
  
UTC 时间适用于计算、比较以及在文件中存储日期和时间。 本地时间适用于桌面应用程序的用户界面。 时区感知应用程序 (例如许多 Web 应用程序，) 还需要使用一些其他时区。  
  
如果 <xref:System.DateTime.Kind%2A> 对象的属性 <xref:System.DateTime> 为，则 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 指示表示的时间是本地时间、UTC 时间还是其他某个时区中的时间。  

### <a name="datetime-resolution"></a>日期时间解析
  
> [!NOTE]
>  作为对值执行日期和时间算法 <xref:System.DateTime> 以测量运行时间的替代方法，可以使用 <xref:System.Diagnostics.Stopwatch> 类。  
  
<xref:System.DateTime.Ticks%2A>属性表示日期和时间值，单位为 1 10-秒秒。 <xref:System.DateTime.Millisecond%2A>属性返回日期和时间值的秒数的分之几秒。 使用对属性的重复调用 <xref:System.DateTime.Now%2A?displayProperty=nameWithType> 来度量经过的时间取决于系统时钟。 Windows 7 和 Windows 8 系统上的系统时钟的分辨率约为15毫秒。 此分辨率会影响小于100毫秒的小时间间隔。 
  
下面的示例演示了当前日期和时间值对系统时钟的分辨率的依赖关系。 在此示例中，外部循环重复了20次，而内层循环用于延迟外部循环。 如果外部循环计数器的值为10，则调用 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 方法会引入5毫秒的延迟。 下面的示例演示了在对的调用后，属性更改返回的毫秒数 `DateTime.Now.Milliseconds` <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 。  

<a name="resolution-01"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Resolution.cs" interactive="try-dotnet-method" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Resolution.vb" id="Snippet1":::

### <a name="datetime-operations"></a>DateTime 操作  

使用 <xref:System.DateTime> 结构（如或）的计算 <xref:System.DateTime.Add%2A> <xref:System.DateTime.Subtract%2A> 不会修改结构的值。 相反，计算返回一个新的 <xref:System.DateTime> 结构，其值为计算结果。  
  
时区之间的转换操作 (如 UTC 和本地时间之间，或在一个时区与另一个) 之间进行转换，则需要夏令时，但算术和比较运算不会考虑到这一点。  
  
<xref:System.DateTime>结构本身为从一个时区转换到另一个时区提供有限的支持。 您可以使用 <xref:System.DateTime.ToLocalTime%2A> 方法将 UTC 转换为本地时间，也可以使用 <xref:System.DateTime.ToUniversalTime%2A> 方法将本地时间转换为 UTC。 但是，类中提供了一组完整的时区转换方法 <xref:System.TimeZoneInfo> 。 您可以使用这些方法将世界上任一时区中的时间转换为任何其他时区中的时间。  
  
<xref:System.DateTime>仅当对象表示相同时区中的时间时，对象的计算和比较才有意义。 可以使用 <xref:System.TimeZoneInfo> 对象来表示 <xref:System.DateTime> 值的时区，尽管这两个值是松散耦合的。 <xref:System.DateTime>对象没有返回对象的属性，该对象表示日期和时间值的时区。 <xref:System.DateTime.Kind%2A>属性指示 `DateTime` 表示 UTC、本地时间还是未指定。 在时区感知应用程序中，必须依赖于某些外部机制来确定 <xref:System.DateTime> 创建对象的时区。 可以使用一个封装 <xref:System.DateTime> 值和 <xref:System.TimeZoneInfo> 表示 <xref:System.DateTime> 值的时区的对象的结构。 有关在计算中使用 UTC 和值的比较的详细信息 <xref:System.DateTime> ，请参阅使用 [日期和时间执行算术运算](/dotnet/standard/datetime/performing-arithmetic-operations)。  
  
每个 <xref:System.DateTime> 成员都隐式使用公历来执行其操作。 异常是隐式指定日历的方法。 其中包括用于指定日历的构造函数，以及使用派生自的参数的方法 <xref:System.IFormatProvider> ，例如 <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> 。  
  
类型成员的操作将考虑 <xref:System.DateTime> 闰年和一个月中的天数等详细信息。  

## <a name="datetime-values-and-calendars"></a>DateTime 值和日历  

.NET Framework 类库包含多个 calendar 类，它们都派生自 <xref:System.Globalization.Calendar> 类。  它们是：  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> 类。  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> 类。  
-   <xref:System.Globalization.GregorianCalendar> 类。  
-   <xref:System.Globalization.HebrewCalendar> 类。  
-   <xref:System.Globalization.HijriCalendar> 类。  
-   <xref:System.Globalization.JapaneseCalendar> 类。  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> 类。  
-   <xref:System.Globalization.JulianCalendar> 类。  
-   <xref:System.Globalization.KoreanCalendar> 类。  
-   <xref:System.Globalization.KoreanLunisolarCalendar> 类。  
-   <xref:System.Globalization.PersianCalendar> 类。  
-   <xref:System.Globalization.TaiwanCalendar> 类。  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> 类。  
-   <xref:System.Globalization.ThaiBuddhistCalendar> 类。  
-   <xref:System.Globalization.UmAlQuraCalendar> 类。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

每个区域性都使用由其只读属性定义的默认日历 <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> 。 每个区域性都可以支持由其只读属性定义的一个或多个日历 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> 。 特定对象当前使用的日历 <xref:System.Globalization.CultureInfo> 由其 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 属性定义。 它必须是在数组中找到的一个日历 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> 。  
  
区域性的当前日历用于该区域性的所有格式设置操作中。 例如，泰国佛历区域性的默认日历为泰国历年代日历，由 <xref:System.Globalization.ThaiBuddhistCalendar> 类表示。  如果 <xref:System.Globalization.CultureInfo> 在日期和时间格式设置操作中使用表示泰国历区域性的对象，则默认情况下将使用泰国历时代日历。 公历仅在区域性的 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 属性更改时使用，如下面的示例所示：  

<a name="calendars-01"></a> [!code-csharp[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

区域性的当前日历还用于该区域性的所有分析操作，如下面的示例所示。  
  
<a name="calendars-02"></a> [!code-csharp[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

您可以 <xref:System.DateTime> 使用日期和时间元素来实例化某个值 (特定日历的年、月和日) 的数目，方法是调用包含参数的 [DateTime 构造函数](xref:System.DateTime.%23ctor%2A) `calendar` 并向其传递一个 <xref:System.Globalization.CultureInfo.Calendar%2A> 表示该日历的对象。 下面的示例使用日历中的日期和时间元素 <xref:System.Globalization.ThaiBuddhistCalendar> 。  
  
<a name="calendars-03"></a> [!code-csharp[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> 不包含参数的构造函数 `calendar` 假设日期和时间元素以公历表示为单位。  
  
所有其他 <xref:System.DateTime> 属性和方法都使用公历。 例如， <xref:System.DateTime.Year%2A?displayProperty=nameWithType> 属性返回公历中的年份， <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> 方法假定 `year` 参数是公历中的年份。  使用公历的每个 <xref:System.DateTime> 成员都具有 <xref:System.Globalization.CultureInfo.Calendar%2A> 使用特定日历的类的相应成员。 例如， <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> 方法返回特定日历中的年份， <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> 方法将 `year` 参数解释为特定日历中的年份号。 下面的示例同时使用 <xref:System.DateTime> 和类的相应成员  <xref:System.Globalization.ThaiBuddhistCalendar> 。  
  
<a name="calendars-04"></a> [!code-csharp[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

<xref:System.DateTime>结构包含一个 <xref:System.DateTime.DayOfWeek%2A> 属性，该属性返回公历中的第几天。 它不包含允许检索年份周数的成员。 若要检索一年中的某一周，请调用单个日历的 <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> 方法。 下面的示例进行了这方面的演示。  
  
<a name="calendars-05"></a> [!code-csharp[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

有关日期和日历的详细信息，请参阅使用 [日历](/dotnet/standard/datetime/working-with-calendars)。  
  
### <a name="persisting-datetime-values"></a>保留日期时间值  

可以 <xref:System.DateTime> 通过以下四种方式持久保存值：  
  
-   [将它们转换为字符串](#persisting-values-as-strings)，然后保留字符串。  
-   [将它们转换为64位整数值](#persisting-values-as-integers) (属性的值 <xref:System.DateTime.Ticks%2A>) 并保留整数。  
-   [序列化日期时间值](#serializing-datetime-values)。  
-   [序列化日期时间值和时区信息](#serializing-datetime-and-time-zone-data)。  
  
无论选择哪种方法，都必须确保还原值的例程 <xref:System.DateTime> 不会丢失数据或引发异常。 <xref:System.DateTime> 值应往返。 也就是说，原始值和还原的值应相同。 如果原始 <xref:System.DateTime> 值表示一次时间，则它应在还原时标识同一时刻。  
  
#### <a name="persisting-values-as-strings"></a>将值保留为字符串  

若要成功还原 <xref:System.DateTime> 作为字符串保存的值，请遵循以下规则：  
  
-   当你在还原字符串时将其视为保留时，请对区域性特定的格式设置相同的假设。 若要确保可在其当前区域性不同于其保存所在系统的区域性的系统上还原字符串，请调用 <xref:System.DateTime.ToString%2A> 重载以使用固定区域性的约定保存字符串。 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 使用固定区域性的约定调用或重载来还原字符串。 决不要使用 <xref:System.DateTime.ToString> 、 <xref:System.DateTime.Parse%28System.String%29> 或 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> 重载，它们使用当前线程区域性的约定。  
  
-   如果该日期表示一个时间点，请确保它在还原时表示相同的时间点，即使在不同的时区也是如此。 <xref:System.DateTime>保存之前，将值转换为协调世界时 (UTC) 。 你还可以将值和时区信息进行序列化。 有关此方法的详细信息，请参阅 [序列化日期时间和时区数据](#serializing-datetime-and-time-zone-data)。  
  
 将值作为字符串保留时，最常见的错误 <xref:System.DateTime> 是依赖于默认或当前区域性的格式设置约定。 如果在保存和还原字符串时当前区域性不同，则会出现问题。 下面的示例阐释了这些问题。 它使用当前区域性的格式设置约定（在本例中为英语 (美国) ）保存五个日期。 它使用不同区域性的格式设置约定来还原日期，在本例中为英语 (英国) 。 由于这两个区域性的格式设置约定不同，因此不能还原两个日期，其余三个日期将被错误解释。 此外，如果原始日期和时间值表示一段时间，则还原时间不正确，因为时区信息丢失。  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

若要成功舍入 <xref:System.DateTime> 值，请执行以下步骤：  
  
1.  如果这些值表示一段时间，则通过调用方法将其从本地时间转换为 UTC <xref:System.DateTime.ToUniversalTime%2A> 。  
1.  通过调用或重载，将日期转换为其字符串表示形式 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。 使用固定区域性的格式设置约定，方法是将指定 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 为 `provider` 参数。 通过使用 "O" 或 "R" 标准格式字符串，指定该值应往返。  
  
若要在 <xref:System.DateTime> 不丢失数据的情况下还原持久值，请执行以下步骤：  
  
1.  通过调用或重载来分析 <xref:System.DateTime.ParseExact%2A> 数据 <xref:System.DateTime.TryParseExact%2A> 。 指定 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 作为 `provider` 参数，并使用在转换过程中用于参数的相同标准格式字符串 `format` 。 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>将该值包含在 `styles` 参数中。  
1.  如果这些 <xref:System.DateTime> 值表示单个时刻，则调用方法将 <xref:System.DateTime.ToLocalTime%2A> 分析的日期从 UTC 转换为本地时间。  
  
下面的示例使用固定区域性和 "O" 标准格式字符串来确保 <xref:System.DateTime> 已保存和还原的值表示同一时刻，而不考虑源和目标系统的系统、区域性或时区。  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>将值保留为整数  

可以将日期和时间保存为 <xref:System.Int64> 表示刻度数的值。 在这种情况下，您不必考虑系统的区域性，这些 <xref:System.DateTime> 值将保留并在上还原。  
  
若要将 <xref:System.DateTime> 值保留为整数：  
  
-   如果这些 <xref:System.DateTime> 值表示一段时间，则通过调用方法将其转换为 UTC <xref:System.DateTime.ToUniversalTime%2A> 。  
-   <xref:System.DateTime>从其属性中检索值所表示的计时周期数 <xref:System.DateTime.Ticks%2A> 。  
  
若要还原已 <xref:System.DateTime> 持久化为整数的值，请执行以下操作：  
  
1.  <xref:System.DateTime>通过将 <xref:System.Int64> 值传递给构造函数来实例化新的对象 <xref:System.DateTime.%23ctor%28System.Int64%29> 。  
1.  如果 <xref:System.DateTime> 该值表示单个时间点，则通过调用方法将其从 UTC 转换为本地时间 <xref:System.DateTime.ToLocalTime%2A> 。  
  
下面的示例 <xref:System.DateTime> 在美国太平洋时区中的系统上将值数组作为整数保存。 它在 UTC 时区中的系统上进行还原。 包含整数的文件包含一个 <xref:System.Int32> 值，该值指示紧随其后的值的总数 <xref:System.Int64> 。  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

<a name="serializing-datetime-values"></a>
#### <a name="serializing-datetime-values"></a>序列化日期时间值  

可以 <xref:System.DateTime> 通过序列化将值保留到流或文件中，然后通过反序列化还原它们。 <xref:System.DateTime> 以某种指定的对象格式对数据进行序列化。 反序列化对象时将还原对象。 格式化程序或序列化程序（如 <xref:System.Xml.Serialization.XmlSerializer> 或 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> ）处理序列化和反序列化的过程。 有关序列化和 .NET Framework 支持的序列化的类型的详细信息，请参阅 [序列化](/dotnet/standard/serialization/)。
  
下面的示例使用 <xref:System.Xml.Serialization.XmlSerializer> 类来序列化和反序列化 <xref:System.DateTime> 值。 这些值表示二十个世纪内的所有闰年。 如果该示例在当前区域性为英语 (英国) 的系统上运行，则输出表示结果。 由于已经反序列化 <xref:System.DateTime> 对象本身，因此代码不必处理日期和时间格式的区域性差异。  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

前面的示例未包括时间信息。 如果 <xref:System.DateTime> 值表示时间点并表示为本地时间，则在通过调用方法对其进行序列化之前，将其从本地时间转换为 UTC <xref:System.DateTime.ToUniversalTime%2A> 。 反序列化后，通过调用方法将其从 UTC 转换为本地时间 <xref:System.DateTime.ToLocalTime%2A> 。 下面的示例使用 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> 类 <xref:System.DateTime> 在美国太平洋标准时区的系统上对数据进行序列化，并将其反序列化到美国中部标准区域中的系统上。  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

<a name="serializing-datetime-and-time-zone-data"></a>
#### <a name="serializing-datetime-and-time-zone-data"></a>序列化日期时间和时区数据  

前面的示例假定 <xref:System.DateTime> 值表示为本地时间。 代码在 UTC 和本地时间之间转换了值，因此它们反映了源系统和目标系统上的同一时刻。 <xref:System.DateTime> 值还可能在本地和 UTC 之外的时区中反映时间。 由于 <xref:System.DateTime> 结构不能识别时区，因此必须同时序列化 <xref:System.DateTime> 值和 <xref:System.TimeZoneInfo> 表示其时区的对象。 创建一个类型，其字段同时包括 <xref:System.DateTime> 值和时区。 下面的示例定义了一个 `DateWithTimeZone` 结构。  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  `DateWithTimeZone`在接下来的两个示例中，将使用结构来序列化和反序列化对象的数组 `DateWithTimeZone` 。 可以从 GitHub 上的文档存储库中的 [Visual Basic](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/visualbasic/System.DateTime/) 或 [c #](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/csharp/System.DateTime/) 中查看本文的整个示例集源。
  
通过使用 `DateWithTimeZone` 结构，可以将日期和时间与时区信息一起保存。 下面的示例使用 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> 类来序列化对象的数组 `DateWithTimeZone` 。  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

然后，下面的示例调用 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> 方法对其进行反序列化。  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime 与 TimeSpan  

<xref:System.DateTime>和 <xref:System.TimeSpan> 值类型在中是不同的，它表示时间上的某个 <xref:System.DateTime> 时刻，而 <xref:System.TimeSpan> 表示时间间隔。 可以从一个实例中减去另一个实例， <xref:System.DateTime> 以获取 <xref:System.TimeSpan> 表示它们之间的时间间隔的对象。 或者，您可以向当前添加一个正值 <xref:System.TimeSpan> <xref:System.DateTime> ，以获取一个 <xref:System.DateTime> 表示未来日期的值。  
  
可以从对象添加或减去时间间隔 <xref:System.DateTime> 。 时间间隔可以是负数也可以是正数，它们可以用时间刻度、秒数或 <xref:System.TimeSpan> 对象表示。  

### <a name="comparing-for-equality-within-tolerance"></a>在容错范围内比较是否相等

值的相等比较 <xref:System.DateTime> 是精确的。 这意味着两个值必须表示为相同的刻度数，才能视为相等。 对于许多应用程序而言，这种精度通常是不必要的，甚至不正确。 通常，您需要测试 <xref:System.DateTime> 对象是否 **大致相等**。 

下面的示例演示如何比较大致等效 <xref:System.DateTime> 值。 当将它们声明为相等时，它将接受较小的差别。  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM 互操作注意事项  

如果某个 <xref:System.DateTime> 值已传输到 COM 应用程序，则会传输回托管应用程序，这被称为往返。 但是， <xref:System.DateTime> 仅指定时间的值不会像预期的那样往返。  
  
如果只往返时间（如下午3点），则最终日期和时间为公元1899年12月30日 在下午3:00，而不是公元0001年1月1日 下午3:00 在仅指定时间时，.NET Framework 和 COM 将假定为默认日期。 但是，COM 系统假定基准日期为公元1899年12月30日，而 .NET Framework 假设基准日期为公元0001年1月1日。  
  
当只将时间从 .NET Framework 传递到 COM 时，会执行特殊处理，将时间转换为 COM 使用的格式。 如果仅将时间从 COM 传递到 .NET Framework，则不会执行任何特殊处理，因为这样会损坏1899年12月30日或之前的合法日期和时间。 如果日期从 COM 开始往返，则 .NET Framework 和 COM 将保留日期。  
  
.NET Framework 和 COM 的行为意味着，如果你的应用程序往返 <xref:System.DateTime> 仅指定时间，则你的应用程序必须记得修改或忽略最后一个对象中的错误日期 <xref:System.DateTime> 。  
     
 ]]></format>
    </remarks>
    <threadsafe>此类型的所有成员都是线程安全的。 看似修改实例状态的成员实际上返回用新值初始化的新实例。 与任何其他类型一样，读取和写入包含此类型的实例的共享变量时，必须通过锁保护以保证线程安全。</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="/dotnet/standard/datetime/choosing-between-datetime">在 DateTime、DateTimeOffset、TimeSpan 和 TimeZoneInfo 之间进行选择</related>
    <related type="Article" href="/dotnet/standard/datetime/working-with-calendars">使用日历</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/">示例：.NET Core WinForms 格式设置实用工具 (C#)</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/">示例：.NET Core WinForms 格式设置实用工具 (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.DateTime" /> 结构的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的刻度数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified>。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  
  
   
  
## Examples  
 下面的示例演示其中一个 <xref:System.DateTime> 构造函数。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
        <param name="kind">枚举值之一，该值指示 <paramref name="ticks" /> 是指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的计时周期数以及协调世界时 (UTC) 或本地时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月和日。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将 `year` 、 `month` 和解释 `day` 为公历年、月和日。 若要 <xref:System.DateTime> 使用另一个日历中的年、月和日来实例化某个值，请调用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 构造函数。  
  
 生成的时间的 <xref:System.DateTime> 午夜为 00:00:00)  (。 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> 构造函数实例化某个 <xref:System.DateTime> 值。 该示例还说明了此重载创建了一个 <xref:System.DateTime> 值，其时间组成部分等于午夜 (或 0:00) 。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, calendar As Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
        <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的指定年、月和日。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 生成的时间的 <xref:System.DateTime> 午夜为 00:00:00)  (。 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified>。  
  
 、和的允许 `year` 值 `month` `day` 依赖于 `calendar` 。 如果无法使用表示指定的日期和时间，则会引发异常 `calendar` 。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization>命名空间提供了多个日历，其中包括 <xref:System.Globalization.GregorianCalendar> 和 <xref:System.Globalization.JulianCalendar> 。  
  
   
  
## Examples  
 下面的示例调用两 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 次构造函数来实例化两个 <xref:System.DateTime> 值。 第一次调用 <xref:System.DateTime> 通过使用对象来实例化某个值 <xref:System.Globalization.PersianCalendar> 。 由于不能将波斯历指定为区域性的默认日历，因此在波斯历中显示日期要求对其 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType> 、和方法进行单独调用 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 。 对构造函数的第二次调用 <xref:System.DateTime> 通过使用对象来实例化值 <xref:System.Globalization.HijriCalendar> 。 该示例将当前区域性更改为阿拉伯语 (叙利亚) 并将当前区域性的默认日历更改为回历。 由于回历是当前区域性的默认日历，因此该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法使用它来设置日期的格式。 如果以前的当前区域性 (是英语的 (美国在这种情况) 下) ，则该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法将使用当前区域性的默认公历来设置日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟和秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified>。  
  
 此构造函数将 `year` 、 `month` 和解释 `day` 为公历年、月和日。 若要 <xref:System.DateTime> 使用另一个日历中的年、月和日来实例化某个值，请调用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 构造函数。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.%23ctor%2A> 构造函数实例化某个 <xref:System.DateTime> 值。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet3":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="6" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒和协调世界时 (UTC) 或本地时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将 `year` 、 `month` 和解释 `day` 为公历年、月和日。 若要 <xref:System.DateTime> 使用另一个日历中的年、月和日来实例化某个值，请调用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 构造函数。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> 构造函数实例化某个 <xref:System.DateTime> 值。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet7":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, calendar As Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
        <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的年、月、日、小时、分钟和秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified>。  
  
 、和的允许 `year` 值 `month` `day` 依赖于 `calendar` 。 如果无法使用表示指定的日期和时间，则会引发异常 `calendar` 。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization>命名空间提供了多个日历，其中包括 <xref:System.Globalization.GregorianCalendar> 和 <xref:System.Globalization.JulianCalendar> 。  
  
   
  
## Examples  
 下面的示例调用两 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 次构造函数来实例化两个 <xref:System.DateTime> 值。 第一次调用 <xref:System.DateTime> 通过使用对象来实例化某个值 <xref:System.Globalization.PersianCalendar> 。 由于不能将波斯历指定为区域性的默认日历，因此在波斯历中显示日期要求对其 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType> 、和方法进行单独调用 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 。 对构造函数的第二次调用 <xref:System.DateTime> 通过使用对象来实例化值 <xref:System.Globalization.HijriCalendar> 。 该示例将当前区域性更改为阿拉伯语 (叙利亚) 并将当前区域性的默认日历更改为回历。 由于回历是当前区域性的默认日历，因此该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法使用它来设置日期的格式。 如果以前的当前区域性 (是英语的 (美国在这种情况) 下) ，则该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法将使用当前区域性的默认公历来设置日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23 
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟、秒和毫秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将 `year` 、 `month` 和解释 `day` 为公历年、月和日。 若要 <xref:System.DateTime> 使用另一个日历中的年、月和日来实例化某个值，请调用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 构造函数。  
  
 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified>。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> 构造函数实例化某个 <xref:System.DateTime> 值。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet5":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="7" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 9999）。</param>
        <param name="month">月（1 到 12）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />, <paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将 `year` 、 `month` 和解释 `day` 为公历年、月和日。 若要 <xref:System.DateTime> 使用另一个日历中的年、月和日来实例化某个值，请调用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 构造函数。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> 构造函数实例化某个 <xref:System.DateTime> 值。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
        <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒和毫秒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.DateTime.Kind%2A> 属性初始化为 <xref:System.DateTimeKind.Unspecified>。  
  
 、和的允许 `year` 值 `month` `day` 依赖于 `calendar` 。 如果无法使用表示指定的日期和时间，则会引发异常 `calendar` 。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization>命名空间提供了多个日历，其中包括 <xref:System.Globalization.GregorianCalendar> 和 <xref:System.Globalization.JulianCalendar> 。  
  
   
  
## Examples  
 下面的示例调用两 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 次构造函数来实例化两个 <xref:System.DateTime> 值。 第一次调用 <xref:System.DateTime> 通过使用对象来实例化某个值 <xref:System.Globalization.PersianCalendar> 。 由于不能将波斯历指定为区域性的默认日历，因此在波斯历中显示日期要求对其 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType> 、和方法进行单独调用 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 。 对构造函数的第二次调用 <xref:System.DateTime> 通过使用对象来实例化值 <xref:System.Globalization.HijriCalendar> 。 该示例将当前区域性更改为阿拉伯语 (叙利亚) 并将当前区域性的默认日历更改为回历。 由于回历是当前区域性的默认日历，因此该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法使用它来设置日期的格式。 如果以前的当前区域性 (是英语的 (美国在这种情况) 下) ，则该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法将使用当前区域性的默认公历来设置日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
        <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
        <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
        <param name="hour">小时（0 到 23）。</param>
        <param name="minute">分（0 到 59）。</param>
        <param name="second">秒（0 到 59）。</param>
        <param name="millisecond">毫秒（0 到 999）。</param>
        <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
        <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />, <paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
        <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`、和参数允许的值 `month` 取决于 `day` `calendar` 参数。 如果无法使用表示指定的日期和时间，则会引发异常 `calendar` 。  
  
 对于在其中具有日期和时间数据的可移植性或有限程度的时区感知的应用程序，可以使用相应的 <xref:System.DateTimeOffset> 构造函数。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization>命名空间提供了多个日历，其中包括 <xref:System.Globalization.GregorianCalendar> 和 <xref:System.Globalization.JulianCalendar> 。  
  
   
  
## Examples  
 下面的示例调用两 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 次构造函数来实例化两个 <xref:System.DateTime> 值。 第一次调用 <xref:System.DateTime> 通过使用对象来实例化某个值 <xref:System.Globalization.PersianCalendar> 。 由于不能将波斯历指定为区域性的默认日历，因此在波斯历中显示日期要求对其 <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType> 、和方法进行单独调用 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> 。 对构造函数的第二次调用 <xref:System.DateTime> 通过使用对象来实例化值 <xref:System.Globalization.HijriCalendar> 。 该示例将当前区域性更改为阿拉伯语 (叙利亚) 并将当前区域性的默认日历更改为回历。 由于回历是当前区域性的默认日历，因此该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法使用它来设置日期的格式。 如果以前的当前区域性 (是英语的 (美国在这种情况) 下) ，则该 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法将使用当前区域性的默认公历来设置日期格式。  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
  
- 或 - 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  
  
- 或 - 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
  
- 或 - 
 <paramref name="hour" /> 小于 0 或大于 23。  
  
- 或 - 
 <paramref name="minute" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="second" /> 小于 0 或大于 59。  
  
- 或 - 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">正或负时间间隔。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定 <see cref="T:System.TimeSpan" /> 的值添加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间间隔之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用 <xref:System.DateTime.Add%2A> 方法在单个操作中添加多个类型的时间间隔 (天、小时、分钟、秒或毫秒) 。 此方法的行为与加法运算符的行为相同。 该 <xref:System.DateTime> 结构还支持特殊的加法方法， (<xref:System.DateTime.AddDays%2A> 例如 <xref:System.DateTime.AddHours%2A> <xref:System.DateTime.AddMinutes%2A> 每个时间间隔的、和) 。  
  
 <xref:System.DateTime.Add%2A>方法会在执行日期算法时考虑闰年和月份中的天数。  
  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。 <xref:System.DateTime.Kind%2A>新实例的属性与 <xref:System.DateTime> 当前实例的属性相同。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Add%2A> 方法。 它计算一周中的某一天，该日期为36天 (864 小时) 。  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">由整数和小数部分组成的天数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的天数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的天数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。  
  
 的小数部分 `value` 是一天中的小数部分。 例如，4.5 等效于4天，12小时，0分钟，0秒，0毫秒，0刻度。  
  
 `value`参数舍入为最接近的毫秒。  
  
 <xref:System.DateTime.AddDays%2A>方法会在执行日期算法时考虑闰年和月份中的天数。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.AddDays%2A> 方法来确定当前日期之后36天中的第几天。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">由整数和小数部分组成的小时数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的小时数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的小时数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。 返回的对象的属性与的 <xref:System.DateTime.Kind%2A> 属性 <xref:System.DateTime> 相同 `value` 。  
  
 的小数部分 `value` 是一个小时的小数部分。 例如，4.5 等效于4小时30分钟0秒0毫秒，0刻度。  
  
 `value`参数舍入为最接近的毫秒。  
  
 如果结果是非终止的重复小数，则将不到1小时的时间间隔转换为分数可能会损失精度。  (例如，一分钟为0.016667 小时。 ) 如果这有问题，则可以使用 <xref:System.DateTime.Add%2A> 方法，该方法使你能够在单个方法调用中指定多个时间间隔，并且无需将时间间隔转换为小时的小数部分。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.AddHours%2A> 方法将一些整数值和小数部分值添加到日期和时间。 它还说明了通过向方法传递包含小数部分的值导致的精度损失。  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">由整数和小数部分组成的毫秒数。 <paramref name="value" /> 参数可以是负数也可以是正数。 请注意，该值被舍入到最近的整数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的毫秒数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的毫秒数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。  
  
 的小数部分 `value` 是毫秒的小数部分。 例如，4.5 等效于4毫秒，5000计时周期，其中一毫秒 = 10000 刻度。  
  
 `value`参数舍入为最接近的整数。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.AddMilliseconds%2A> 方法将1毫秒和1.5 毫秒添加到 <xref:System.DateTime> 值。 然后，它显示每个新值，并显示它与原始值之间的差异。 差异同时显示为时间跨度和刻度数。 该示例可以清楚地表明1毫秒等于10000刻度。 还显示了在执行加法运算之前舍入的小数部分; <xref:System.DateTime> 向原始日期添加1.5 毫秒后得出的值比原始日期大2毫秒。  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">由整数和小数部分组成的分钟数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的分钟数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的分钟数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。  
  
 的小数部分 `value` 是一分钟的小数部分。 例如，4.5 等效于4分钟30秒0毫秒，0刻度。  
  
 `value`参数舍入为最接近的毫秒。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.AddMinutes%2A> 方法将一些整数值和小数部分值添加到日期和时间。  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">月份数。 <paramref name="months" /> 参数可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的月数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="months" /> 所表示的时间之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此对象的值 <xref:System.DateTime> 。 相反，它会返回一个新的 <xref:System.DateTime> 对象，其值为此操作的结果。  
  
 <xref:System.DateTime.AddMonths%2A>方法计算得出的月份和年份，考虑闰年和月份中的天数，然后调整结果对象的日部分 <xref:System.DateTime> 。 如果生成的日期不是生成的月中的有效日期，则使用生成的月份的最后一个有效日期。 例如，三月 31 + 1 个月 = 4 月30日，3月31日到1月 = 2 月28日 = 闰年，闰年2月29日。  
  
 生成的对象的时间部分与 <xref:System.DateTime> 此实例保持不变。  
  
   
  
## Examples  
 下面的示例将在12月1日到2015年12月之间添加0到15个月。 在这种情况下，AddMonths 方法将返回每月最后一天的日期，并成功处理闰年。  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。  
  
- 或 - 
 <paramref name="months" /> 小于 -120,000 或大于 120,000。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">由整数和小数部分组成的秒数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的秒数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的秒数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。  
  
 的小数部分 `value` 是秒的小数部分。 例如，4.5 等效于4秒，500毫秒，0刻度。  
  
 `value`参数舍入为最接近的毫秒。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.AddSeconds%2A> 方法将30秒和一天中的秒数加到 <xref:System.DateTime> 值中。 然后，它显示每个新值，并显示它与原始值之间的差异。 差异同时显示为时间跨度和刻度数。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb" id="Snippet1":::
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">以 100 纳秒为单位的计时周期数。 <paramref name="value" /> 参数可以是正数也可以是负数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的刻度数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">年份数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的年份数加到此实例的值上。</summary>
        <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的年份数之和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不更改此对象的值 <xref:System.DateTime> 。 相反，它会返回一个新的 <xref:System.DateTime> 对象，其值为此操作的结果。  
  
 <xref:System.DateTime.AddYears%2A>方法用于计算将在闰年中产生的年数。 生成的对象的月份和时间部分与 <xref:System.DateTime> 此实例保持不变。  
  
 如果当前实例表示闰年中的闰日，返回值取决于目标日期：  
  
-   如果 `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> 也是闰年，则返回值表示该年份中的闰日。 例如，如果将四年添加到2012年2月29日，则返回的日期为2016年2月29日。  
  
-   如果不是 `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> 闰年，则返回值表示该年份的闰日之前的那一天。 例如，如果一年添加到2012年2月29日，则返回的日期为2013年2月28日。  
  
 下面的示例演示如何将 <xref:System.DateTime.AddYears%2A> 方法与 <xref:System.DateTime> 表示闰年的值一起使用。 它显示了15年之前15年的日期和2000年2月29日之后的十五年。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> 或生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比较的第一个对象。</param>
        <param name="t2">要比较的第二个对象。</param>
        <summary>对两个 <see cref="T:System.DateTime" /> 的实例进行比较，并返回一个指示第一个实例是早于、等于还是晚于第二个实例的整数。</summary>
        <returns>有符号数字，指示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相对值。  
  
 <list type="table"><listheader><term> 值类型 
 </term><description> 条件 
 </description></listheader><item><term> 小于零 
 </term><description><paramref name="t1" /> 早于 <paramref name="t2" />。  
  
 </description></item><item><term> 零 
 </term><description><paramref name="t1" /> 与 <paramref name="t2" /> 相同。  
  
 </description></item><item><term> 大于零 
 </term><description><paramref name="t1" /> 晚于 <paramref name="t2" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定与的 `t1` 关系 `t2` ， <xref:System.DateTime.Compare%2A> 方法会比较 <xref:System.DateTime.Ticks%2A> 和的属性， `t1` 但会 `t2` 忽略其 <xref:System.DateTime.Kind%2A> 属性。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。  
  
   
  
## Examples 

 下面的示例演示 <xref:System.DateTime.Compare%2A> 方法。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将此实例的值与指定的 <see cref="T:System.DateTime" /> 值相比较，并指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的两个重载 <xref:System.DateTime.CompareTo%2A> 返回一个有符号数字，指示此实例和参数的相对值 `value` ，如下表所示。  
  
|值|描述|  
|-----------|-----------------|  
|小于零|此实例早于 `value`。|  
|零|此实例与 `value` 相同。|  
|大于零|此实例晚于 `value`。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要与当前类型进行比较的对象。</param>
        <summary>将此实例的值与指定的 <see cref="T:System.DateTime" /> 值相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
        <returns>有符号数字，指示此实例和 <paramref name="value" /> 参数的相对值。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 描述 
 </description></listheader><item><term> 小于零 
 </term><description> 此实例早于 <paramref name="value" />。  
  
 </description></item><item><term> 零 
 </term><description> 此实例与 <paramref name="value" /> 相同。  
  
 </description></item><item><term> 大于零 
 </term><description> 此实例晚于 <paramref name="value" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定当前实例与的关系 `value` ，方法会 <xref:System.DateTime.CompareTo%2A> 比较 <xref:System.DateTime.Ticks%2A> 当前实例的属性， `value` 但会忽略其 <xref:System.DateTime.Kind%2A> 属性。  在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其属性的值来执行此操作 <xref:System.DateTime.Kind%2A> 。  
  
 此方法实现 <xref:System.IComparable%601?displayProperty=nameWithType> 接口，且执行方式略优于 <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> 方法重载，因为无需将 `value` 参数转换为对象。  
  
   
  
## Examples  
 下面的示例实例化三个 <xref:System.DateTime> 对象，一个表示当天的日期，另一个表示一年中的日期，另一个表示未来一年的日期。 然后，它调用 <xref:System.DateTime.CompareTo%28System.DateTime%29> 方法并显示比较结果。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value">要比较的装箱对象，或 <see langword="null" />。</param>
        <summary>将此实例的值与包含指定的 <see cref="T:System.DateTime" /> 值的指定对象相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
        <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  
 <list type="table"><listheader><term> 值 
 </term><description> 描述 
 </description></listheader><item><term> 小于零 
 </term><description> 此实例早于 <paramref name="value" />。  
  
 </description></item><item><term> 零 
 </term><description> 此实例与 <paramref name="value" /> 相同。  
  
 </description></item><item><term> 大于零 
 </term><description> 此实例晚于 <paramref name="value" />，或 <paramref name="value" /> 为 <see langword="null" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定当前实例与的关系 `value` ，方法会 <xref:System.DateTime.CompareTo%2A> 比较 <xref:System.DateTime.Ticks%2A> 当前实例的属性， `value` 但会忽略其 <xref:System.DateTime.Kind%2A> 属性。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其属性的值来执行此操作 <xref:System.DateTime.Kind%2A> 。  
  
 的任何实例 <xref:System.DateTime> ，无论其值如何，都视为大于 `null` 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.CompareTo%2A> 方法。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例的日期部分。</summary>
        <value>一个新对象，其日期与此实例相同，时间值设置为午夜 12:00:00 (00:00:00)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的值的 <xref:System.DateTime.Kind%2A> 属性值与当前实例的属性的值 <xref:System.DateTime> 相同。  
  
 因为 <xref:System.DateTime> 类型表示单个类型的日期和时间，所以请务必避免将属性返回的日期错误解释 <xref:System.DateTime.Date%2A> 为日期和时间。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.Date%2A> 属性提取值的日期部分， <xref:System.DateTime> 其时间组成部分设置为零 (或0:00:00，或午夜) 。 它还说明了根据显示值时使用的格式字符串 <xref:System.DateTime> ，时间部分可以继续出现在格式化的输出中。  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示的日期为该月中的第几天。</summary>
        <value>日组成部分，表示为 1 和 31 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Day%2A>属性始终返回公历中每月的第几天，即使当前 <xref:System.DateTime> 值是使用其他日历实例化的，或者当前线程区域性的默认日历不是公历日历。 若要使用其他日历检索特定日期的日期，请调用该日历的 <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> 方法。 下面的示例使用 <xref:System.DateTime.Day%2A> 属性和 <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> 方法来检索 <xref:System.DateTime> 使用回历实例化的值的月份日期。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb" id="Snippet1":::

 同样，下面的示例使用 <xref:System.DateTime.Day%2A> 属性和 <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> 方法来检索当前线程区域性为 AR-SA （使用阿拉伯回历作为其默认日历）的月中的第几天。  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Day%2A> 属性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]   

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示的日期是星期几。</summary>
        <value>一个枚举常量，指示此 <see cref="T:System.DateTime" /> 值是星期几。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 枚举中的常量的值 <xref:System.DayOfWeek> 范围从 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> 到 <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType> 。 如果强制转换为整数，则其值范围为零 (这表示 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) ) 六个 (<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType> 。  
  
 <xref:System.DateTime.DayOfWeek%2A>属性返回一个枚举常量; 它不反映系统的区域和语言设置。 若要检索表示特定日期的本地化星期几名称的字符串，请调用包含参数的方法的重载之一， <xref:System.DateTime.ToString%2A> `format` 并向其传递 `ddd` 或 `dddd` 自定义格式字符串。 有关详细信息，请参阅 [如何：从特定日期中提取星期几](/dotnet/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date)。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.DayOfWeek%2A> 属性和 <xref:System.DayOfWeek?displayProperty=nameWithType> 枚举。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示的日期是该年中的第几天。</summary>
        <value>该年中的第几天，表示为 1 和 366 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.DateTime.DayOfYear%2A> 计算一年中的第几天时，属性将占用闰年。 无论当前线程区域性的当前日历如何，属性值始终反映公历中的第几天。 若要检索不同日历中的一年中的第几天，请调用 <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> 该日历的方法。  
  
   
  
## Examples  
 下面的示例显示公历中年2010-2020 年12月31日的日期。 请注意，该示例显示12月31日是一年中的第366日。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月（介于 1 到 12 之间的一个数字）。</param>
        <summary>返回指定年和月中的天数。</summary>
        <returns>指定 <paramref name="month" /> 中 <paramref name="year" /> 中的天数。  
  
例如，如果 <paramref name="month" /> 等于 2（表示二月），则返回值为 28 或 29，具体取决于 <paramref name="year" /> 是否为闰年。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DaysInMonth%2A> `month` `year` 即使公历不是当前区域性的当前日历，该方法也会将和解释为公历的月份和年份。 若要获取特定日历的指定月份中的天数，请调用该日历的 <xref:System.Globalization.Calendar.GetDaysInMonth%2A> 方法。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.DateTime.DaysInMonth%2A> 方法来确定2001年2月 1998 (非闰年) 和2月 1996 (闰年) 的天数。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb" id="Snippet1":::
  
 下面的示例显示在一个整数数组中指定的一年中每个月的天数。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> 小于 1 或大于 12。  
  
- 或 - 
 <paramref name="year" /> 小于 1 或大于 9999。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个值，该值指示两个 <see cref="T:System.DateTime" /> 对象，或者一个 <see cref="T:System.DateTime" /> 实例和另一个对象或 <see cref="T:System.DateTime" /> 是否具有相同的值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要与此实例进行比较的对象。</param>
        <summary>返回一个值，该值指示此实例的值是否等于指定 <see cref="T:System.DateTime" /> 实例的值。</summary>
        <returns>如果 <see langword="true" /> 参数与此实例的值相等，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当前实例的 `value` 属性值相等，则为该实例和相等 <xref:System.DateTime.Ticks%2A> 。 它们的 <xref:System.DateTime.Kind%2A> 属性值在测试中不被视为相等。  
  
 此方法实现 <xref:System.IEquatable%601?displayProperty=nameWithType> 接口，并且执行方式略优于方法， <xref:System.DateTime.Equals%2A> 因为 `value` 无需将参数转换为对象。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Equals%2A> 方法。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要与此实例进行比较的对象。</param>
        <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
        <returns>如果 <see langword="true" /> 是 <paramref name="value" /> 的实例并且等于此实例的值，则为 <see cref="T:System.DateTime" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当前实例的 `value` 属性值相等，则为该实例和相等 <xref:System.DateTime.Ticks%2A> 。 它们的 <xref:System.DateTime.Kind%2A> 属性值在测试中不被视为相等。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Equals%2A> 方法。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比较的第一个对象。</param>
        <param name="t2">要比较的第二个对象。</param>
        <summary>返回一个值，该值指示的两个 <see cref="T:System.DateTime" /> 实例是否具有同一个日期和时间值。</summary>
        <returns>如果两个值相等，则为，<see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1``t2`如果其属性值相等，则和相等 <xref:System.DateTime.Ticks%2A> 。 它们的 <xref:System.DateTime.Kind%2A> 属性值在测试中不被视为相等。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Equals%2A> 方法。  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateData">64 位带符号整数，它对 2 位字段的 <see cref="P:System.DateTime.Kind" /> 属性以及 62 位字段的 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</param>
        <summary>反序列化一个 64 位二进制值，并重新创建序列化的 <see cref="T:System.DateTime" /> 初始对象。</summary>
        <returns>一个对象，它等效于由 <see cref="T:System.DateTime" /> 方法序列化的 <see cref="M:System.DateTime.ToBinary" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.DateTime.ToBinary%2A> 方法将当前对象的值转换 <xref:System.DateTime> 为二进制值。 随后，使用二进制值和 <xref:System.DateTime.FromBinary%2A> 方法重新创建原始 <xref:System.DateTime> 对象。  
  
> [!IMPORTANT]
>  在某些情况下， <xref:System.DateTime> 方法返回的值与 <xref:System.DateTime.FromBinary%2A> <xref:System.DateTime> 提供给该方法的原始值不同 <xref:System.DateTime.ToBinary%2A> 。 有关详细信息，请参阅下一节 "本地时间调整"。  
  
## <a name="local-time-adjustment"></a>本地时间调整  
 本地时间（即调整为本地时区的协调世界时）由 <xref:System.DateTime> 其属性具有值的结构来表示 <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local> 。 <xref:System.DateTime>从方法生成的二进制表示形式还原本地值时 <xref:System.DateTime.ToBinary%2A> ，该 <xref:System.DateTime.FromBinary%2A> 方法可能会调整重新创建的值，使其不等于原始值。 在下列条件下，可能会出现这种情况：  
  
-   如果本地 <xref:System.DateTime> 对象由方法在一个时区中序列化 <xref:System.DateTime.ToBinary%2A> ，然后方法在不同时区中进行反序列化，则 <xref:System.DateTime.FromBinary%2A> 生成的对象所表示的本地时间会 <xref:System.DateTime> 自动调整为第二个时区。  
  
     例如，假设某个 <xref:System.DateTime> 对象表示本地时间下午3点。 在美国西部区域中执行的应用程序使用 <xref:System.DateTime.ToBinary%2A> 方法将该 <xref:System.DateTime> 对象转换为二进制值。 在美国东部时区正在执行的另一个应用程序然后使用 <xref:System.DateTime.FromBinary%2A> 方法将二进制值转换为新的 <xref:System.DateTime> 对象。 新的对象的值 <xref:System.DateTime> 为下午6点，表示与原来的下午3点相同的时间点。 值，但会调整为东部时区中的本地时间。  
  
-   如果本地值的二进制表示形式 <xref:System.DateTime> 表示所调用系统的本地时区中的无效时间，则将 <xref:System.DateTime.FromBinary%2A> 调整该时间，使其有效。  
  
     例如，从标准时间转换为夏时制时间美国在2010年3月14日上午，上午2:00，时间前进一小时，到上午3:00 此小时间隔为无效时间，即此时区中不存在的时间间隔。 下面的示例显示，当处于此范围内的时间由方法转换为二进制值， <xref:System.DateTime.ToBinary%2A> 然后通过方法还原时 <xref:System.DateTime.FromBinary%2A> ，原始值将调整为有效时间。 如示例所示，可以通过将特定日期和时间值传递给方法来确定是否可以修改该日期和时间值 <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> 。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>版本注意事项  
 从 .NET Framework 版本2.0 开始， <xref:System.DateTime> 结构包含一个私有类型字段，该字段指示指定时间是否为本地时间、协调世界时 (UTC) ，或者两者都不连接到专用刻度字段，后者包含指定日期和时间的100毫微秒刻度数。 可以通过属性访问的计时周期数 <xref:System.DateTime.Ticks%2A> ，可以通过属性访问 theKind 字段 <xref:System.DateTime.Kind%2A> 。  
  
 在 .NET Framework 2.0 之前，如果手动序列化 <xref:System.DateTime> 对象，而不是使用序列化接口（如 <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType> ），则只需要序列化中的滴答数据 <xref:System.DateTime> 。 从 .NET Framework 2.0 开始，还必须序列化类型数据。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateData" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
        <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
        <returns>一个表示本地时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是一个64位的值，它表示自公元1900年1月 1601 1 日午夜12:00 之后经过的100纳秒间隔数  (公历 ) 协调世界时 (UTC) 。 当应用程序创建、访问或写入到文件时，Windows 将使用文件时间来记录。  
  
 `fileTime`参数指定以100毫微秒计时周期表示的文件时间。  
  
 从 .NET Framework 版本2.0 开始，返回值为， <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.FromFileTime%2A> 方法。  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
        <block subset="none" type="usage"><para>通常， <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> 方法 <see cref="T:System.DateTime" /> 会还原由方法保存的值 <see cref="M:System.DateTime.ToFileTime" /> 。 但是，在下列情况下，这两个值可能不同： 
-如果值的序列化和反序列化 <see cref="T:System.DateTime" /> 出现在不同的时区中。 例如，如果 <see cref="T:System.DateTime" /> 值的时间为 12:30 P.M。 在美国东部时区，将序列化，然后在美国太平洋12:30 时区中反序列化 调整为凌晨9:30。 来反映两个时区之间的差异。  
  
-如果 <see cref="T:System.DateTime" /> 序列化的值表示本地时区中的无效时间，则为。 在这种情况下， <see cref="M:System.DateTime.ToFileTime" /> 方法会调整还原的 <see cref="T:System.DateTime" /> 值，使其表示本地时区中的有效时间。  
  
例如，从标准时间转换到夏令时的时间是在2010年3月14日上午2:00，上午，时间前进一小时，到凌晨3:00 此小时间隔为无效时间，即此时区中不存在的时间间隔。 下面的示例显示，当此范围内的时间由方法转换为长整数值， <see cref="M:System.DateTime.ToFileTime" /> 然后通过方法还原时 <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> ，原始值将调整为有效时间。 如示例所示，可以通过将特定日期和时间值传递给方法来确定是否可以修改该日期和时间值 <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> 。  
  
[！ code-csharp[FromFileTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)][！ code-vb[FromFileTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
        <summary>将指定的 Windows 文件时间转换为等效的 UTC 时间。</summary>
        <returns>一个表示 UTC 时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是一个64位的值，它表示自公元1900年1月 1601 1 日午夜12:00 之后经过的100纳秒间隔数  (公历 ) 协调世界时 (UTC) 。 当应用程序创建、访问或写入到文件时，Windows 将使用文件时间来记录。  
  
 `fileTime`参数指定以100毫微秒计时周期表示的文件时间。  
  
 从 .NET Framework 版本2.0 开始，返回值为， <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性为 <xref:System.DateTimeKind.Utc> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d">OLE 自动化日期值。</param>
        <summary>返回与指定的 OLE 自动化日期等效的 <see cref="T:System.DateTime" />。</summary>
        <returns>一个对象，它表示与 <paramref name="d" /> 相同的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d`参数是一个双精度浮点数，表示日期作为基准日期早于或晚于1899年12月30日的天数。 的符号和整数部分将 `d` 日期编码为从30年 12 1899 月30日起的正数或负数次偏移，并将 `d` 一天中的时间编码为从午夜开始进行日置换的一小部分。 `d` 必须是介于负657435.0 到正2958465.99999999 之间的值。  
  
 请注意，由于编码日期的方式，有两种方法可以表示一天中的任何时间（1899年12月30日）。 例如，-0.5 和0.5 都表示30年 12 1899 月30日，因为从基准日期算起的加减或减零天数仍是基准日期，而从午夜开始的半天置换为中午。  
  
 <xref:System.DateTime.ToOADate%2A>有关 OLE 自动化的详细信息，请参阅。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">日期不是有效的 OLE 自动化日期值。</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将此实例的值转换为标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  不应假设多次调用 <xref:System.DateTime.GetDateTimeFormats%2A> 重载将返回相同的数据。 根据特定的重载，此方法返回的数据可能会更改（如果当前区域性发生更改、用户重写单独的区域性设置或对系统的区域性数据进行更新）。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此实例的值转换为标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
        <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法返回的字符串数组等效于将 <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> 通过单独调用返回的字符串数组 <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> 与 "d"、"d"、"f"、"f"、"g"、"g"、"m"、"o"、"r"、"s"、"t"、"t"、"u"、"u" 和 "y" 标准格式字符串。 有关标准格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)。  
  
 使用当前区域性中的信息设置返回值的每个元素的格式。 有关当前区域性的区域性特定格式设置信息的详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 。  
  
> [!IMPORTANT]
>  由于此方法使用区分区域性的数据，因此不应假定对方法的多个调用将返回相同的数据。 如果当前区域性发生更改、用户重写单独的区域性设置或对系统的区域性数据进行更新，则此方法返回的数据可能会更改。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> 方法。 它使用计算机的当前区域性中所有可能的标准日期和时间格式显示日期的字符串表示形式，在本例中为 en-us。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 该示例显示以下输出：  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">标准日期和时间格式字符串。</param>
        <summary>将此实例的值转换为指定的标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
        <returns>符串数组，其中每个元素都表示此实例的以 <paramref name="format" /> 标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`参数可以是任何标准日期和时间格式说明符。 其中包括 d、D、f、F、g、G、M (或 M) 、O (或 o) 、R (或 R) 、s、t、T、u、U 和 Y (或 y) 。 有关详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)。  
  
 使用当前区域性中的信息设置返回值的每个元素的格式。 有关当前区域性的区域性特定格式设置信息的详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 。  
  
> [!IMPORTANT]
>  由于此方法使用区分区域性的数据，因此不应假定对方法的多个调用将返回相同的数据。 如果当前区域性发生更改、用户重写单独的区域性设置或对系统的区域性数据进行更新，则此方法返回的数据可能会更改。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> 方法。 它使用长日期格式说明符 ( "D" ) 为当前区域性显示日期的字符串表示形式。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
        <summary>将此实例的值转换为标准日期和时间格式说明符和指定的区域性特定格式信息支持的所有字符串表示形式。</summary>
        <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法返回的字符串数组等效于将 <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> 通过单独调用返回的字符串数组 <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 与 "d"、"d"、"f"、"f"、"g"、"g"、"m"、"o"、"r"、"s"、"t"、"t"、"u"、"u" 和 "y" 标准格式字符串。 有关标准格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)。  
  
 返回值的每个元素均使用提供的区域性特定信息进行格式化 `provider` 。  
  
> [!IMPORTANT]
>  由于此方法使用区分区域性的数据，因此不应假定对方法的多个调用将返回相同的数据，除非 `provider` 是 <xref:System.Globalization.CultureInfo> 表示固定区域性的对象。 如果用户重写的单个区域性设置， `provider` 或如果对系统的区域性数据进行更新，则此方法返回的数据可能会更改 `provider` 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> 方法。 它使用 fr-fr 区域性的所有可能标准日期和时间格式显示日期的字符串表示形式。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 该示例显示以下输出：  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">标准和时间格式字符串。</param>
        <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
        <summary>将此实例的值转换为指定的标准日期和时间格式说明符和区域性特定格式信息支持的所有字符串表示形式。</summary>
        <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Format 参数可以是任何标准日期和时间格式说明符。 其中包括 d、D、f、F、g、G、M (或 M) 、O (或 o) 、R (或 R) 、s、t、T、u、U 和 Y (或 y) 。 有关详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)。  
  
 返回值的每个元素均使用提供的区域性特定信息进行格式化 `provider` 。  
  
> [!IMPORTANT]
>  由于此方法使用区分区域性的数据，因此不应假定对方法的多个调用将返回相同的数据，除非 `provider` 是 <xref:System.Globalization.CultureInfo> 表示固定区域性的对象。 如果用户重写的单个区域性设置， `provider` 或如果对系统的区域性数据进行更新，则此方法返回的数据可能会更改 `provider` 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> 方法。 它使用短日期格式说明符来显示日期的字符串表示形式， ( "d" ) 用于 fr-fr 区域性。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs" interactive="try-dotnet-method" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns>32 位有符号整数哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DateTime" />。</summary>
        <returns>枚举常数 <see cref="F:System.TypeCode.DateTime" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示日期的小时部分。</summary>
        <value>小时组成部分，表示为 0 和 23 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Hour%2A>始终使用24小时制表示属性的值。 若要使用12小时制检索表示日期和时间的小时的字符串，请使用 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> "h" 自定义格式说明符调用或方法。 例如：  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb" id="Snippet1":::
  
   
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Hour%2A> 属性。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb" id="Snippet1"::: 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示此 <see cref="T:System.DateTime" /> 实例是否在当前时区的夏时制范围内。</summary>
        <returns>如果 <see langword="true" /> 属性的值为 <see cref="P:System.DateTime.Kind" /> 或 <see cref="F:System.DateTimeKind.Local" />，并且 <see cref="F:System.DateTimeKind.Unspecified" /> 的此实例的值在当前时区的夏时制范围内，则为 <see cref="T:System.DateTime" />；如果 <see langword="false" /> 为 <see cref="P:System.DateTime.Kind" />，则为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法确定当前值是否 <xref:System.DateTime> 处于本地时区的夏时制范围内，该范围由 <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> 属性返回。 可以通过检索其属性的值来确定时区是否支持夏令时 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> 。 对于观察夏令时的时区，可以通过检索 <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 由时区的属性返回的数组来确定何时从夏令时转换到夏令时 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> 。  
  
 如果当前 <xref:System.DateTime> 值表示在本地时区中不明确或无效的时间，则该方法将返回 `false` 。  
  
 在 [!INCLUDE[winxp](~/includes/winxp-md.md)] 系统上， <xref:System.DateTime.IsDaylightSavingTime%2A> 当确定当前实例是否为夏时制时，此方法仅识别当前调整规则。 因此，该方法可能无法准确报告当前实例是否为当前调整规则生效前的时间段的夏时制。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">四位数年份。</param>
        <summary>返回指定的年份是否为闰年的指示。</summary>
        <returns>如果 <see langword="true" /> 是闰年，则为 <paramref name="year" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` 指定为四位数基数为10的数字;例如，1996。  
  
 `year` 在公历中始终解释为年份。 若要确定某一年份是否为其他日历中的闰年，请调用该日历对象的 `IsLeapYear` 方法。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.IsLeapYear%2A> 方法来确定1994和2014之间的年份是闰年。 该示例还说明了 <xref:System.DateTime.AddYears%2A> 使用方法将年份添加到闰日时的结果。  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> 小于 1 或大于 9999。</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示由此实例表示的时间是基于本地时间、协调世界时 (UTC)，还是两者皆否。</summary>
        <value>用于指示当前时间表示的含义的枚举值之一。 默认值为 <see cref="F:System.DateTimeKind.Unspecified" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以 <xref:System.DateTime.Kind%2A> 通过调用方法将新值的属性显式设置 <xref:System.DateTime> 为特定 <xref:System.DateTimeKind> 值 <xref:System.DateTime.SpecifyKind%2A> 。  
  
 <xref:System.DateTime.Kind%2A>属性允许 <xref:System.DateTime> 值明确反映协调世界时 (UTC) 或本地时间。 与此相反，该 <xref:System.DateTimeOffset> 结构可以明确地将任何时区中的任何时间反映为单个时间点。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.SpecifyKind%2A> 方法演示 <xref:System.DateTime.Kind%2A> 属性如何影响 <xref:System.DateTime.ToLocalTime%2A> 和 <xref:System.DateTime.ToUniversalTime%2A> 转换方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="T:System.DateTime" /> 的最大可能值。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值等效于23：59： 59.9999999 UTC，9999（公历）12月31日，，1 100 毫微秒时间刻度早于 00:00:00 UTC，年1月 1 10000 日。  
  
 某些日历（如 <xref:System.Globalization.ThaiBuddhistCalendar> ）支持早于的日期范围 <xref:System.DateTime.MaxValue> 。 在这些情况下，尝试 <xref:System.DateTime.MaxValue> 在变量赋值或格式设置和分析操作中进行访问可能会引发 <xref:System.ArgumentOutOfRangeException> 。 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>您可以从属性中检索指定区域性的最新有效日期值，而不是检索的值 <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例 <xref:System.DateTime> 通过将对象的构造函数传递给 <xref:System.Int64> 一个表示刻度数的值来实例化对象。 在调用构造函数之前，该示例确保此值大于或等于 `DateTime.MinValue.Ticks` 且小于或等于 `DateTime.MaxValue.Ticks` 。 如果不是，则会引发 <xref:System.ArgumentOutOfRangeException> 。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示日期的毫秒部分。</summary>
        <value>毫秒组成部分，表示为 0 和 999 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以 <xref:System.DateTime.Millisecond%2A> 通过使用 "fff" 格式说明符来显示属性的字符串表示形式。 例如，下面的代码显示一个字符串，其中包含在控制台中的日期和时间的毫秒数。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb" id="Snippet1":::

 还可以通过使用 "o" 标准格式说明符，与日期和时间值的其他组件一起显示毫秒部分。 例如：  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb" id="Snippet2":::

 但是，对于显示，"o" 格式说明符比用于往返或存储值更少 <xref:System.DateTime> 。 你还可以通过使用自定义格式字符串，与其他日期和时间组件一起显示毫秒，如下面的示例所示。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb" id="Snippet3":::
   
  
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Millisecond%2A> 属性。  
 
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示日期的分钟部分。</summary>
        <value>分钟组成部分，表示为 0 和 59 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Minute%2A> 属性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="T:System.DateTime" /> 的最小可能值。 此字段为只读。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此常量的值等效于公历的00：00： 00.0000000 UTC，0001年1月1日。  
  
 <xref:System.DateTime.MinValue> 定义分配给未初始化的变量的日期和时间 <xref:System.DateTime> 。 下面的示例阐释了这一点。  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 在 <xref:System.DateTime.MinValue> 将 <xref:System.DateTime.MaxValue> 值传递给构造函数之前，可以使用和属性来确保值位于受支持的范围内 <xref:System.DateTime> 。 "示例" 部分中的代码说明了这种用法。  
  
   
  
## Examples  
 下面的示例 <xref:System.DateTime> 通过将对象的构造函数传递给 <xref:System.Int64> 一个表示刻度数的值来实例化对象。 在调用构造函数之前，该示例确保此值大于或等于 `DateTime.MinValue.Ticks` 且小于或等于 `DateTime.MaxValue.Ticks` 。 如果不是，则会引发 <xref:System.ArgumentOutOfRangeException> 。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb" id="Snippet2":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示日期的月份部分。</summary>
        <value>月组成部分，表示为 1 和 12 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Month%2A> 属性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为本地时间。</summary>
        <value>其值为当前日期和时间的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A>属性返回一个 <xref:System.DateTime> 值，该值表示本地计算机上的当前日期和时间。 请注意，一个 <xref:System.DateTime> 值（表示自0001年1月1日午夜以来经过的计时周期数）和该值的字符串表示形式之间存在差异，该值表示特定于 <xref:System.DateTime> 区域性的格式的日期和时间值。 有关格式化日期和时间值的信息，请参阅 <xref:System.DateTime.ToString%2A> 方法。 下面的示例显示了多个特定于区域性的格式的短日期和时间字符串。  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 此属性的解决方法取决于系统计时器，它依赖于基础操作系统。 它通常介于0.5 到15毫秒之间。 因此， <xref:System.DateTime.Now%2A> 在较短的时间间隔（如循环中）对属性的重复调用可能会返回相同的值。  
  
 <xref:System.DateTime.Now%2A>属性通常用于衡量性能。 然而，由于它的分辨率较低，因此不适合用作基准工具。 更好的替代方法是使用 <xref:System.Diagnostics.Stopwatch> 类。  
  
 从 .NET Framework 版本2.0 开始，返回值为， <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性返回 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
> [!NOTE]
>  你还可以使用 <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> 属性来检索当前的本地日期和时间。 它允许将本地时间明确表达为单个时间点，从而使该时间值可在计算机之间移植。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.Now%2A> 和 <xref:System.DateTime.UtcNow%2A> 属性来检索当前的本地日期和时间以及当前的统一协调 (UTC) 日期和时间。 然后，它将使用多个区域性的格式设置约定来显示字符串，以及其属性的值 <xref:System.DateTime.Kind%2A> 。  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">要添加的日期和时间值。</param>
        <param name="t">待添加的时间间隔。</param>
        <summary>将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。</summary>
        <returns>一个对象，它是 <paramref name="d" /> 和 <paramref name="t" /> 值的和。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[此运算符的等效方法是 <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 下面的示例演示加法运算符。  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">要比较的第一个对象。</param>
        <param name="d2">要比较的第二个对象。</param>
        <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否相等。</summary>
        <returns>如果 <see langword="true" /> 和 <paramref name="d1" /> 表示同一日期和时间，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Equality%2A>运算符通过比较两个 <xref:System.DateTime> 值的计时周期数来确定这两个值是否相等。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其 <xref:System.DateTime.Kind%2A> 属性的值来执行此操作。  
  
 此运算符的等效方法是 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 下面的示例演示了相等运算符。  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比较的第一个对象。</param>
        <param name="t2">要比较的第二个对象。</param>
        <summary>确定指定的 <see cref="T:System.DateTime" /> 是否晚于另一个指定的 <see cref="T:System.DateTime" />。</summary>
        <returns>如果 <see langword="true" /> 晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThan%2A>运算符通过比较两个值的 <xref:System.DateTime> 计时周期数来确定这两个值之间的关系。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其 <xref:System.DateTime.Kind%2A> 属性的值来执行此操作。  
  
 此运算符的等效方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比较的第一个对象。</param>
        <param name="t2">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTime" /> 表示的日期和时间等于还是晚于另一个指定的 <see cref="T:System.DateTime" />。</summary>
        <returns>如果 <see langword="true" /> 等于或晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThanOrEqual%2A>运算符通过比较两个值的 <xref:System.DateTime> 计时周期数来确定这两个值之间的关系。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其 <xref:System.DateTime.Kind%2A> 属性的值来执行此操作。  
  
 此运算符的等效方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">要比较的第一个对象。</param>
        <param name="d2">要比较的第二个对象。</param>
        <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否不等。</summary>
        <returns>如果 <see langword="true" /> 和 <paramref name="d1" /> 不表示同一日期和时间，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Inequality%2A>运算符 <xref:System.DateTime> 通过比较它们的计时周期数来确定两个值是否不相等。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其 <xref:System.DateTime.Kind%2A> 属性的值来执行此操作。  
  
 此运算符的等效方法是 <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比较的第一个对象。</param>
        <param name="t2">要比较的第二个对象。</param>
        <summary>确定指定的 <see cref="T:System.DateTime" /> 是否早于另一个指定的 <see cref="T:System.DateTime" />。</summary>
        <returns>如果 <see langword="true" /> 早于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThan%2A>运算符通过比较两个值的 <xref:System.DateTime> 计时周期数来确定这两个值之间的关系。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其 <xref:System.DateTime.Kind%2A> 属性的值来执行此操作。  
  
 此运算符的等效方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">要比较的第一个对象。</param>
        <param name="t2">要比较的第二个对象。</param>
        <summary>确定一个指定的 <see cref="T:System.DateTime" /> 表示的日期和时间等于还是早于另一个指定的 <see cref="T:System.DateTime" />。</summary>
        <returns>如果 <paramref name="t1" /> 等于或早于 <paramref name="t2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThanOrEqual%2A>运算符通过比较两个值的 <xref:System.DateTime> 计时周期数来确定这两个值之间的关系。 在比较 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 可以通过比较其 <xref:System.DateTime.Kind%2A> 属性的值来执行此操作。  
  
 此运算符的等效方法是 <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定的 <see cref="T:System.DateTime" /> 减去指定的 <see cref="T:System.DateTime" /> 或 <see cref="T:System.TimeSpan" />。</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">要从中减去的日期和时间值（被减数）。</param>
        <param name="d2">要减去的日期和时间值（减数）。</param>
        <summary>将指定的日期和时间与另一个指定的日期和时间相减，返回一个时间间隔。</summary>
        <returns><paramref name="d1" /> 和 <paramref name="d2" /> 之间的时间间隔；即 <paramref name="d1" /> 减去 <paramref name="d2" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> <xref:System.DateTime.Kind%2A> 执行减法运算时，此方法不会考虑两个值的属性的值 <xref:System.DateTime> 。 在减去 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 否则，结果将包括时区之间的差异。  
  
> [!NOTE]
>  在 <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> 执行减法运算时，此方法会考虑时区之间的差异。  
  
 此运算符的等效方法是 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Subtract%2A> 方法和减法运算符。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">要从其中减去的日期和时间值。</param>
        <param name="t">待减去的时间间隔。</param>
        <summary>从指定的日期和时间减去指定的时间间隔，返回新的日期和时间。</summary>
        <returns>一个对象，其值为 <paramref name="d" /> 的值减去 <paramref name="t" /> 的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法 `t` 从的计时周期值减去的计时周期值 `d` 。  
  
 此运算符的等效方法是 <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Subtract%2A> 方法和减法运算符。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  
 本节内容：  
  
- [我要调用哪种方法？](#Tasks)
- [要分析的字符串](#StringToParse)
- [分析和文化约定](#Culture)
- [分析和样式元素](#Styles)
- [返回值和日期时间类型](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>我要调用哪种方法？  
  
|功能|调用|  
|--------|----------|  
|使用当前区域性的约定分析日期和时间字符串。|<xref:System.DateTime.Parse%28System.String%29> 重载|  
|使用特定区域性的约定分析日期和时间字符串。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 重载 (参见 [分析和文化约定](#Culture)) |  
|使用特殊的样式元素分析日期和时间字符串 (如空白) 或无空白。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 重载|  
|分析日期和时间字符串，该字符串必须采用特定格式。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 或 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|分析日期和时间字符串，并执行到 UTC 或本地时间的转换。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 重载|  
|分析日期和时间字符串，而不处理异常。|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> 方法|  
|还原 () 格式设置操作所创建的日期和时间值。|向方法传递 "o" 或 "r" 标准格式字符串 <xref:System.DateTime.ToString%28System.String%29> ，并 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 通过调用重载 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|跨计算机 (和可能的文化) 边界分析固定格式的日期和时间字符串。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 或 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> 方法|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>要分析的字符串  
 <xref:System.DateTime.Parse%2A>方法尝试将日期和时间值的字符串表示形式转换为其等效的 <xref:System.DateTime> 。 它尝试完全分析输入字符串，而不引发 <xref:System.FormatException> 异常。  
  
> [!IMPORTANT]
>  如果分析操作由于字符串格式无法识别而失败，则该 <xref:System.DateTime.Parse%2A> 方法将引发 <xref:System.FormatException> ，而该 <xref:System.DateTime.TryParse%2A> 方法将返回 `false` 。 由于异常处理可能会消耗大量资源，因此应 <xref:System.DateTime.Parse%2A> 在分析操作成功成功时使用，因为输入源受信任。 <xref:System.DateTime.TryParse%2A> 当分析失败很有可能时，尤其是因为输入源不受信任，或者您具有合理的默认值来替换不能成功分析的字符串。   

 要分析的字符串可以采用以下任何形式：  
  
-   包含日期和时间组成部分的字符串。  
  
-   一个具有日期但没有时间部分的字符串。 如果时间部分不存在，则该方法假定为12:00 午夜。 如果日期部分具有两位数年份，则基于 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 当前区域性的当前日历或指定区域性的当前日历 (将其转换为年份，前提是使用具有非 null `provider` 参数) 的重载。  
  
- 包含日期部分的字符串，仅包含月份和年份，但不包括日期部分。 方法假设每月的第一天。

- 包含日期部分的字符串，仅包含月份和日期，但不包括年份部分。 方法假定当前年份。

-   带有时间但没有日期部分的字符串。 此方法假定当前日期，除非调用 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 重载并包括 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 在 `styles` 参数中，在这种情况下，该方法假设日期为0001年1月1日。  

- 包含时间部分的字符串，其中仅包含小时和 AM/PM 指示符，不包含日期部分。 方法假定当前日期和时间无分钟且无秒。 您可以通过调用 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 重载并在自变量中包含来更改此行为 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> `styles` ，在这种情况下，该方法假设日期为0001年1月1日。

-   包含时区信息并符合 ISO 8601 的字符串。 在下面的示例中，第一个字符串指定协调世界时 (UTC) ，第二个字符串指定时区中的时间早于 UTC 早7小时：  
  
    "2008-11-01T19：35： 00.0000000 Z"   
    "01T19：35： 00.0000000-07： 00"  
  
-   包含 GMT 指示符并符合 RFC 1123 时间格式的字符串;例如：  
  
     "Sat，01 11 11 2008 19:35:00 GMT"  
  
-   一个字符串，其中包含日期和时间以及时区偏移量信息;例如：  
  
     "03/01/2009 05:42:00-5:00"  

下面的示例使用当前区域性的格式设置约定（在本例中为 en-us 区域性）分析每种格式的字符串：

[!code-csharp[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 如果输入字符串表示在分析方法使用的日历中的闰年中的闰日 (参阅) 的 [分析和区域性约定](#Culture) ，则该 <xref:System.DateTime.Parse%2A> 方法将成功分析字符串。 如果输入字符串表示非闰年中的闰日，则该方法将引发 <xref:System.FormatException> 。  
  
 由于 <xref:System.DateTime.Parse%2A> 方法尝试使用当前或指定区域性的格式设置规则来分析日期和时间的字符串表示形式，因此尝试跨不同区域性分析字符串会失败。 若要在不同的区域设置中分析特定的日期和时间格式，请使用方法的重载之一 <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> ，并提供格式说明符。  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>分析和文化约定  
 <xref:System.DateTime.Parse%2A>除非) 符合 ISO 8601 模式，否则，方法的所有重载都区分区域性，除非要分析的字符串 (由 `s` 下表中的表示。 分析操作使用派生的对象中的格式设置信息，如下所示 <xref:System.Globalization.DateTimeFormatInfo> ：  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

|如果调用|并且 `provider` 为|格式设置信息派生自|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|当前线程区域性 (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 属性) |  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.DateTimeFormatInfo> 对象|指定的 <xref:System.Globalization.DateTimeFormatInfo> 对象|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|当前线程区域性 (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 属性) |  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.CultureInfo> 对象|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|自定义 <xref:System.IFormatProvider> 实现|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 方法|  
  
 当格式设置信息从对象派生时 <xref:System.Globalization.DateTimeFormatInfo> ， <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 属性将定义分析操作中使用的日历。  
  
 如果使用 <xref:System.Globalization.DateTimeFormatInfo> 与标准区域性不同的自定义设置来分析日期和时间字符串，请使用 <xref:System.DateTime.ParseExact%2A> 方法而不是 <xref:System.DateTime.Parse%2A> 方法来提高成功转换的几率。 非标准日期和时间字符串可能比较复杂且难以分析。 此 <xref:System.DateTime.Parse%2A> 方法尝试使用几个隐式分析模式分析字符串，所有这些模式都可能失败。 与此相反， <xref:System.DateTime.ParseExact%2A> 方法要求您显式指定一个或多个可能成功的准确分析模式。 有关详细信息，请参阅主题中的 "DateTimeFormatInfo and 动态数据" 部分 <xref:System.Globalization.DateTimeFormatInfo> 。  
  
> [!IMPORTANT]
>  请注意，特定区域性的格式设置约定是动态的，可能会发生更改。 这意味着依赖于默认 (当前) 区域性的格式设置约定的分析操作，或者 <xref:System.IFormatProvider> 如果出现以下任何一种情况，则不会在出现以下任何情况时意外失败：  
>   
> -   区域性特定的数据在 .NET Framework 的主版本或次版本中发生了更改，或作为 .NET Framework 的现有版本的更新结果。  
> -   特定于区域性的数据反映用户首选项，这些首选项因计算机而异，或会话之间有所不同。  
> -   特定于区域性的数据表示替代区域性，替代了标准区域性或自定义区域性的设置。  
>   
>  若要避免在分析与区域性数据中的更改关联的数据和时间字符串时遇到困难，可以使用固定区域性来分析日期和时间字符串，也可以调用 <xref:System.DateTime.ParseExact%2A> 或 <xref:System.DateTime.TryParseExact%2A> 方法并指定要分析的字符串的精确格式。 如果要序列化和反序列化日期和时间数据，则可以使用固定区域性的格式约定，也可以序列化和反序列化 <xref:System.DateTime> 二进制格式的值。  
>   
>  有关详细信息，请参阅主题中的 "动态区域性数据" 部分 <xref:System.Globalization.CultureInfo> 和 "保留日期时间值" 部分 <xref:System.DateTime> 。  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>分析和样式元素  
 所有 <xref:System.DateTime.Parse%2A> 重载都忽略输入字符串中的前导、内部或尾随空白字符， (`s` 下表中的表示) 。 日期和时间可以用一对前导和尾随数字符号字符括起来 ( "#"、U + 0023) ，并且可以使用一个或多个 NULL 字符 (U + 0000) 来 trailed。  
  
 此外，此 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 重载还具有一个 `styles` 由一个或多个枚举成员组成的参数 <xref:System.Globalization.DateTimeStyles> 。 此参数定义 `s` 应该如何解释和分析操作应该如何转换 `s` 为日期和时间。 下表描述了每个 <xref:System.Globalization.DateTimeStyles> 成员对分析操作的影响。  
  
|DateTimeStyles 成员|转换后的效果|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `s` 并根据需要将其转换为 UTC，如下所示：<br /><br /> -如果 `s` 包括时区偏移量，或者如果 `s` 不包含任何时区信息，但包含 `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal> 标志，则方法会分析该字符串，调用 <xref:System.DateTime.ToUniversalTime%2A> 将返回值转换 <xref:System.DateTime> 为 UTC，并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。<br />-如果 `s` 表示它表示 UTC，或者如果 `s` 不包含时区信息，但 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AssumeUniversal> 标志，则方法分析字符串，不对返回的值执行时区转换 <xref:System.DateTime> ，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。<br />-在所有其他情况下，该标志不起作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|忽略此值。 的日期和时间元素中始终允许内部空格 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|忽略此值。 的日期和时间元素中始终允许使用前导空格 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|忽略此值。 的日期和时间元素中始终允许尾随空格 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定 `s` 可能包含前导空格和尾随空格。 这是默认行为。 不能通过提供限制性更强的 <xref:System.Globalization.DateTimeStyles> 枚举值（如）来重写它 <xref:System.Globalization.DateTimeStyles.None> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定如果 `s` 缺少任何时区信息，则假定为本地时间。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 存在标志，否则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 将设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定如果 `s` 缺少任何时区信息，则采用 UTC。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 存在标志，否则方法会将返回的 <xref:System.DateTime> 值从 UTC 转换为本地时间，并将其 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但会忽略此值。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|对于包含时区信息的字符串，尝试防止将日期和时间字符串转换为 <xref:System.DateTime> 表示本地时间的值，并 <xref:System.DateTime.Kind%2A> 将其属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 通常，通过调用 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 方法并使用 "o"、"r" 或 "u" 标准格式说明符来创建此类字符串。|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>返回值和日期时间类型

`DateTime.Parse`重载返回一个 <xref:System.DateTime> 值，其 <xref:System.DateTime.Kind> 属性包含时区信息。 它可以指示时间为：

- 协调世界时 (<xref:System.DateTimeKind.Utc?displayProperty=fullName>) 。
- 本地时区中的时间 (<xref:System.DateTimeKind.Local?displayProperty=fullName>) 。
- 未知时区中的时间 (x： Datetimekind.utc？ displayProperty = fullName>) 。
 
 通常， <xref:System.DateTime.Parse%2A> 方法会返回一个 <xref:System.DateTime> 对象，其 <xref:System.DateTime.Kind%2A> 属性为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 但是，该 <xref:System.DateTime.Parse%2A> 方法还可能执行时区转换，并 <xref:System.DateTime.Kind%2A> 以不同的方式设置属性的值，具体取决于 `s` 和参数的值 `styles` ：  
  
|如果|时区转换|Kind 属性|  
|--------|--------------------------|-------------------|  
|`s` 包含时区信息。|日期和时间将转换为本地时区中的时间。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` 包含时区信息，并 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 标志。|日期和时间转换为协调世界时 (UTC) 。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` 包含 Z 或 GMT 时区指示符，并 `styles` 包含 <xref:System.Globalization.DateTimeStyles.RoundtripKind> 标志。|日期和时间解释为 UTC。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 下面的示例将包含时区信息的日期字符串转换为本地时区中的时间：  
  
 [!code-csharp[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  还可以 <xref:System.DateTime.Kind%2A> 通过使用标志在格式设置和分析操作期间保留日期和时间属性的值 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 。 下面的示例演示了标志如何对 <xref:System.Globalization.DateTimeStyles.RoundtripKind> <xref:System.DateTime> 通过使用 "o"、"r" 或 "u" 格式说明符转换为字符串的值影响分析操作。  
  
 [!code-csharp[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
## Examples

调用方法的很多示例 `DateTime.Parse` 都在本文的 " [备注](#remarks) " 部分和各个重载的文档中混杂在一起 `DateTime.Parse` 。

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

还可以下载 `DateTime.Parse` 包含在 [c # 的 .net Core 项目](https://docs.microsoft.com/samples/dotnet/samples/datetime-parse/)中的一组完整的示例。

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。 有关详细信息，请参阅[要分析的字符串](#StringToParse)。</param>
        <summary>使用当前线程区域性的约定将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
如果 `s` 包含时区信息，则此方法将返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ，并将中的日期和时间转换 `s` 为本地时间。 否则，它不执行时区转换，并返回 <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。

此重载尝试 `s` 使用当前区域性的格式设置约定进行分析。 当前区域性由 <xref:System.Globalization.CultureInfo.CurrentCulture> 属性指示。 若要使用特定区域性的格式设置约定分析字符串，请调用 <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> 或 <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> 重载。

此重载尝试 `s` 使用样式进行分析 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> 。

## Examples

下面的示例通过以下方式分析几个日期和时间值的字符串表示形式：

- 使用默认格式提供程序，该提供程序提供用于生成示例输出的计算机的当前线程区域性的格式设置约定。 此示例的输出反映了 en-us 区域性的格式设置约定。

- 使用默认样式值，即 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType> 。 

它处理 <xref:System.FormatException> 当方法尝试使用其他区域性的格式设置约定分析日期和时间的字符串表示形式时引发的异常。 它还演示如何成功分析不使用当前线程区域性的格式设置约定的日期和时间值。  
  
 [!code-csharp[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。 有关详细信息，请参阅[要分析的字符串](#StringToParse)。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。  请参阅[分析和区域性约定](#Culture)</param>
        <summary>使用指定的区域性特定格式设置信息，将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
如果 `s` 包含时区信息，则此方法将返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ，并将中的日期和时间转换 `s` 为本地时间。 否则，它不执行时区转换，并返回 <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。

此重载尝试 `s` 使用样式进行分析 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> 。

## Examples

下面的示例使用 en-us、fr 和 de 消除文化的约定分析日期字符串的数组。 它演示单个日期的字符串表示形式可以在不同的区域性中以不同的方式解释。  
  
[!code-csharp[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider? provider = default, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = Nothing, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = default, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">包含要分析的字符串的内存范围。 有关详细信息，请参阅[要分析的字符串](#StringToParse)。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。  请参阅[分析和区域性约定](#Culture)</param>
        <param name="styles">枚举值的按位组合，用于指示 <paramref name="s" /> 成功执行分析操作所需的样式元素以及定义如何根据当前时区或当前日期解释已分析日期的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的区域性特定格式设置信息和格式类型，将包含日期和时间的字符串表示形式的内存范围转换为其等效的 <see cref="T:System.DateTime" />。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 和 <paramref name="styles" /> 指定。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider? provider, System.Globalization.DateTimeStyles styles);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。 有关详细信息，请参阅[要分析的字符串](#StringToParse)。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。  请参阅[分析和区域性约定](#Culture)</param>
        <param name="styles">枚举值的按位组合，用于指示 <paramref name="s" /> 成功执行分析操作所需的样式元素以及定义如何根据当前时区或当前日期解释已分析日期的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的区域性特定格式设置信息和格式类型，将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 和 <paramref name="styles" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

此方法重载在中转换日期和时间 `s` ，并设置 <xref:System.DateTime.Kind%2A> 返回值的属性，如下所示 <xref:System.DateTime> ：

| 如果 | 时区转换 | Kind 属性 |
|----|----------------------|---------------|
| `s` 不包含时区信息。 | 无。 | <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> |
| `s` 包含时区信息。 | 到本地时区的时间 | <xref:System.DateTimeKind.Local?displayProperty=nameWithType> |
| `s` 包含时区信息，并 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 标志。 | 协调世界时 (UTC)  | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |
| `s` 包含 Z 或 GMT 时区指示符，并 `styles` 包括 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 。 | 无。 | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |

## Examples

下面的示例演示 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 方法，并显示 <xref:System.DateTime.Kind%2A> 结果值的属性的值 <xref:System.DateTime> 。  
  
[!code-csharp[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/how-to-round-trip-date-and-time-values">如何：往返日期和时间值</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。 有关详细信息，请参阅“备注”部分。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
        <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法分析日期的字符串表示形式，该日期必须采用参数定义的格式 `format` 。 它还要求 \<Date> \<Time> 日期和时间的字符串表示形式的和元素以指定的顺序出现 `format` ，并且没有 `s` 除允许的以外的任何空白 `format` 。 如果 `format` 定义的日期没有时间元素并且分析操作成功，则生成的 <xref:System.DateTime> 值的时间为午夜 (00:00:00) 。 如果 `format` 定义一个没有日期元素的时间并且分析操作成功，则生成的 <xref:System.DateTime> 值的日期为 `DateTime.Now.Date` 。  
  
 如果不 `s` 表示特定时区中的时间并且分析操作成功，则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 如果 `s` 表示特定时区中的时间，并 `format` 允许存在时区信息 (例如，如果 `format` 等于 "o"、"r" 或 "u" 标准格式说明符，或者它包含 "z"、"zz" 或 "zzz" 自定义格式说明符) ，则 <xref:System.DateTime.Kind%2A> 返回的值的属性 <xref:System.DateTime> 为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  

 `format`参数是一个字符串，其中包含单个标准格式说明符，或者一个或多个定义所需的格式的自定义格式说明符 `s` 。 有关有效格式设置代码的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 或 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
> [!NOTE]
>  如果 `format` 是不包含日期或时间分隔符的自定义格式模式 (例如 "yyyyMMddHHmm" ) ，请使用参数的固定区域性 `provider` 和每个自定义格式说明符的最宽形式。 例如，如果想要在格式模式中指定小时数，请指定更宽的形式 "HH"，而不是 "H"。  
  
 特定的日期和时间符号和字符串 (如中使用的特定语言) 的日期的名称 `s` ）是由参数定义的 `provider` ，因为 `s` if `format` 是标准格式说明符字符串。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，表示用于解释的区域性 `s` 。 <xref:System.Globalization.DateTimeFormatInfo>其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 定义中的符号和格式设置 `s` 。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个自定义 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象或对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.CultureInfo> 使用对应于当前区域性的对象。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.ParseExact%2A> 方法。  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 或 <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 或 <paramref name="format" /> 是一个空字符串。  
  
- 或 - 
 <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。  
  
- 或 - 
<paramref name="s" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <block subset="none" type="usage"><para>在中 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ， <see cref="Overload:System.DateTime.ParseExact" /> <see cref="T:System.FormatException" /> 如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则方法将引发。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider? provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="format">一个范围，包含表示用于定义所需的 <paramref name="s" /> 格式的格式说明符的字符。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="style">枚举值的按位组合，提供有关以下内容的附加信息：<paramref name="s" />、可能出现在 <paramref name="s" /> 中的样式元素或从 <paramref name="s" /> 到 <see cref="T:System.DateTime" /> 值的转换。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定范围表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[]? formats, IFormatProvider? provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="formats"><paramref name="s" /> 的允许格式的数组。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
        <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的格式数组、区域性特定的格式信息和样式将日期和时间的指定范围表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider? provider, System.Globalization.DateTimeStyles style);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。 有关详细信息，请参阅“备注”部分。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="style">枚举值的按位组合，提供有关以下内容的附加信息：<paramref name="s" />、可能出现在 <paramref name="s" /> 中的样式元素或从 <paramref name="s" /> 到 <see cref="T:System.DateTime" /> 值的转换。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析日期的字符串表示形式，该日期必须采用参数定义的格式 `format` 。 它还要求中的日期和时间元素按 `s` 指定的顺序显示 `format` 。 如果 `s` 与参数的模式不匹配 `format` ，并且具有参数定义的任何变体 `style` ，则该方法将引发 <xref:System.FormatException> 。 与此相反， <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法会分析格式提供程序的对象识别的任何格式的日期的字符串表示形式 <xref:System.Globalization.DateTimeFormatInfo> 。 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法还允许中的日期和时间元素 `s` 按任意顺序显示。  
  
 如果 `s` 参数只包含时间而不包含日期，则使用当前日期，除非 `style` 参数包含 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 标志，在这种情况下，将使用默认日期 (`DateTime.Date.MinValue`) 。 如果 `s` 参数仅包含日期而不包含时间，则使用 (00:00:00) 午夜。 `style`参数还可确定参数是否 `s` 可以包含前导空白字符和尾随空格字符。  
  
 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 此行为可以通过使用标志来更改 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> ，该标志返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ，或使用 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 和 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 标志，后者返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 包含时区信息，则时间转换为本地时间，如有必要， <xref:System.DateTime.Kind%2A> 返回对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 可以通过使用标志来更改此行为， <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 以便不将协调世界时 (UTC) 转换为本地时间并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。  
  
 `format`参数定义参数所需的模式 `s` 。 它可以包含 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 表中的一个或多个自定义格式说明符，也可以是从 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 表中标识预定义模式的单个标准格式说明符。  
  
 如果在自定义格式模式下不使用日期或时间分隔符，请对参数使用固定区域性， `provider` 并为每个自定义格式说明符使用最宽形式。 例如，如果想要在模式中指定小时数，请指定更宽的形式 "HH"，而不是 "H"。  
  
> [!NOTE]
>  `s`您可以调用 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法并指定多个允许的格式，而不是要求符合一种格式以便分析操作成功。 这使得分析操作更有可能成功。  
  
 `styles`参数包含一个或多个枚举成员， <xref:System.Globalization.DateTimeStyles> 这些成员确定是否可以在中显示未定义的，以及是否 `format` 能够 `s` 控制分析操作的确切行为。 下表描述了枚举的每个成员如何 <xref:System.Globalization.DateTimeStyles> 影响该方法的操作 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `s` 并根据需要将其转换为 UTC。 如果 `s` 包括时区偏移量，或者如果 `s` 不包含任何时区信息，但包含 `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 标志，则方法会分析该字符串，调用 <xref:System.DateTime.ToUniversalTime%2A> 将返回值转换 <xref:System.DateTime> 为 UTC，并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 指示它表示 UTC，或者如果 `s` 不包含时区信息，但 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，则方法分析字符串，不对返回的值执行时区转换 <xref:System.DateTime> ，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 在所有其他情况下，该标志不起作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定不由定义的空白 `format` 可以出现在任何单个日期或时间元素之间。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定不由定义的空白 `format` 可出现在的开头 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定的 `format` 末尾不能出现的空白 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定 `s` 可能包含未定义的前导空格、内部空格和尾随空格 `format` 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定如果 `s` 缺少任何时区信息，则假定它表示本地时间。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 将设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定如果 `s` 缺少任何时区信息，则假定它表示 UTC。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则方法会将返回的 <xref:System.DateTime> 值从 UTC 转换为本地时间，并将其 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果 `s` 包含时间而不包含日期信息，则返回值的日期设置为 `DateTime.MinValue.Date` 。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`使用默认值分析参数。 不允许使用以外的任何空白区域 `format` 。 如果 `s` 缺少日期部分，则返回值的日期 <xref:System.DateTime> 设置为1/1/0001。 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 如果中存在时区信息，则 `s` 该时间将转换为本地时间，而 <xref:System.DateTime.Kind%2A> 返回对象的属性将 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|对于包含时区信息的字符串，尝试防止转换为 <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性设置为的值日期和时间 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此标志主要用于防止 UTC 时间转换为本地时间。|  
  
 特定的日期和时间符号和字符串 (如中所用的特定语言) 的星期名称 `s` ，则该参数是由参数定义的 `provider` ， `s` 如果 `format` 是标准格式说明符字符串，则是的精确格式。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，表示用于解释的区域性 `s` 。 <xref:System.Globalization.DateTimeFormatInfo>其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 定义中的符号和格式设置 `s` 。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个自定义 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象或对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.CultureInfo> 使用对应于当前区域性的对象。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> 方法。 请注意，当参数等于时无法成功分析字符串 "5/01/2009 8:30 AM"， `styles` <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> 因为不允许使用前导空格 `format` 。 此外，不能使用 `format` "MM/dd/yyyyhh： MM" 成功分析字符串 "5/01/2009 09:00"，因为日期字符串未在月份号之前带有前导零，如 `format` 需要。  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 或 <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 或 <paramref name="format" /> 是一个空字符串。  
  
- 或 - 
 <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。  
  
- 或 - 
<paramref name="s" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
        <block subset="none" type="usage"><para>在中 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ， <see cref="Overload:System.DateTime.ParseExact" /> <see cref="T:System.FormatException" /> 如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则方法将引发。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider? provider, System.Globalization.DateTimeStyles style);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="formats"><paramref name="s" /> 的允许格式的数组。 有关详细信息，请参阅“备注”部分。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
        <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。</summary>
        <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法分析与分配给参数的模式之一匹配的日期的字符串表示形式 `formats` 。 如果字符串 `s` 与这些模式中的任何一种模式都不匹配，则该方法将 `styles` 引发 <xref:System.FormatException> 。 除了与 `s` 多个格式设置模式（而不是单个格式化模式）进行比较以外，此重载的行为与 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法相同。  
  
 `s`参数包含要分析的日期和时间。 如果 `s` 参数只包含时间而不包含日期，则使用当前日期，除非 `style` 参数包含 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 标志，在这种情况下，将使用默认日期 (`DateTime.Date.MinValue`) 。 如果 `s` 参数仅包含日期而不包含时间，则使用 (00:00:00) 午夜。 `style`参数还可确定参数是否 `s` 可以包含前导、内部或尾随空格字符，而不能包含中的某个格式字符串所允许的空白字符 `formats` 。  
  
 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 此行为可以通过使用标志来更改 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> ，该标志返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ，或使用 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 和 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 标志，后者返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 包含时区信息，则时间转换为本地时间，如有必要， <xref:System.DateTime.Kind%2A> 返回对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此行为可以通过使用 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 标志来更改， (UTC) 转换为本地时间，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。  
  
 `formats`参数包含模式的数组，其中一个模式 `s` 必须完全匹配（如果分析操作成功）。 参数中的模式 `formats` 包括 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 表中的一个或多个自定义格式说明符，或从 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 表中标识预定义模式的单个标准格式说明符。  
  
 如果在自定义格式模式下不使用日期或时间分隔符，请对参数使用固定区域性， `provider` 并为每个自定义格式说明符使用最宽形式。 例如，如果想要在模式中指定小时数，请指定更宽的形式 "HH"，而不是 "H"。  
  
 `styles`参数包含一个或多个枚举成员， <xref:System.Globalization.DateTimeStyles> 这些成员确定是否可以在中显示未定义的，以及是否 `format` 能够 `s` 控制分析操作的确切行为。 下表描述了枚举的每个成员如何 <xref:System.Globalization.DateTimeStyles> 影响该方法的操作 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> 。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `s` 并根据需要将其转换为 UTC。 如果 `s` 包括时区偏移量，或者如果 `s` 不包含任何时区信息，但包含 `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 标志，则方法会分析该字符串，调用 <xref:System.DateTime.ToUniversalTime%2A> 将返回值转换 <xref:System.DateTime> 为 UTC，并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 指示它表示 UTC，或者如果 `s` 不包含时区信息，但 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，则方法分析字符串，不对返回的值执行时区转换 <xref:System.DateTime> ，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 在所有其他情况下，该标志不起作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定不由定义的空白 `format` 可以出现在任何单个日期或时间元素之间。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定不由定义的空白 `format` 可出现在的开头 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定的 `format` 末尾不能出现的空白 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定 `s` 可能包含未定义的前导空格、内部空格和尾随空格 `format` 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定如果 `s` 缺少任何时区信息，则假定它表示本地时间。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 将设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定如果 `s` 缺少任何时区信息，则假定它表示 UTC。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则方法会将返回的 <xref:System.DateTime> 值从 UTC 转换为本地时间，并将其 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果 `s` 包含时间而不包含日期信息，则返回值的日期设置为 `DateTime.MinValue.Date` 。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`使用默认值分析参数。 不允许使用以外的任何空白区域 `format` 。 如果 `s` 缺少日期部分，则返回值的日期 <xref:System.DateTime> 设置为1/1/0001。 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 如果中存在时区信息，则 `s` 该时间将转换为本地时间，而 <xref:System.DateTime.Kind%2A> 返回对象的属性将 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|对于包含时区信息的字符串，尝试防止转换为其属性设置为的日期和时间 <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此标志主要用于防止 UTC 时间转换为本地时间。|  
  
 特定的日期和时间符号和字符串 (如中所用的特定语言) 的星期名称 `s` ，则该参数是由参数定义的 `provider` ， `s` 如果 `format` 是标准格式说明符字符串，则是的精确格式。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，表示用于解释的区域性 `s` 。 <xref:System.Globalization.DateTimeFormatInfo>其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 定义中的符号和格式设置 `s` 。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个自定义 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象或对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.CultureInfo> 使用对应于当前区域性的对象。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法来确保可以成功分析多种可能格式的字符串。  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 或 <paramref name="formats" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> 是一个空字符串。  
  
- 或 - 
<paramref name="formats" /> 的一个元素为空字符串。  
  
- 或 - 
 <paramref name="s" /> 不包含与 <paramref name="formats" /> 中任意元素相对应的日期和时间。  
  
- 或 - 
<paramref name="s" /> 中的小时组件和 AM/PM 指示符不一致。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
        <block subset="none" type="usage"><para>在中 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ， <see cref="Overload:System.DateTime.ParseExact" /> <see cref="T:System.FormatException" /> 如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则方法将引发。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示日期的秒部分。</summary>
        <value>秒组成部分，表示为 0 和 59 之间的一个值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Second%2A> 属性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">日期和时间。</param>
        <param name="kind">枚举值之一，该值指示新对象是表示本地时间、UTC，还是两者皆否。</param>
        <summary>创建新的 <see cref="T:System.DateTime" /> 对象，该对象具有与指定的 <see cref="T:System.DateTime" /> 相同的刻度数，但是根据指定的 <see cref="T:System.DateTimeKind" /> 值的指示，指定为本地时间或协调世界时 (UTC)，或者两者皆否。</summary>
        <returns>一个新对象，它与由 <paramref name="value" /> 参数和由 <see cref="T:System.DateTimeKind" /> 参数指定的 <paramref name="kind" /> 值代表的对象具有相同刻度数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime>对象包含一个类型字段，该字段指示时间值是基于本地时间、协调世界时 (UTC) 还是两者都不是，还是包含以 100-毫微秒为单位的时间值。 <xref:System.DateTime.SpecifyKind%2A>方法 <xref:System.DateTime> 使用指定的 `kind` 参数和原始时间值创建一个新的对象。  
  
> [!IMPORTANT]
>  返回的 <xref:System.DateTime> 值与参数的时间不相同，并且不是时区 `value` <xref:System.DateTime.SpecifyKind%2A> 转换方法。 相反，它会使参数指定的时间 `value` 保持不变，并将 <xref:System.DateTime.Kind%2A> 属性设置为 `kind` 。 有关时区转换的信息，请参阅 [在时区之间转换时间](/dotnet/standard/datetime/converting-between-time-zones)。  
  
 此 <xref:System.DateTime.SpecifyKind%2A> 方法在互操作性方案中非常有用，在这种情况下，你将收到一个 <xref:System.DateTime> 具有未指定的类型字段的对象，但你可以通过独立的方式来确定刻度字段表示本地时间或 UTC。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.SpecifyKind%2A> 方法演示 <xref:System.DateTime.Kind%2A> 属性如何影响 <xref:System.DateTime.ToLocalTime%2A> 和 <xref:System.DateTime.ToUniversalTime%2A> 转换方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications">.NET Framework 应用程序中的 COM 互操作性 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回通过从此实例的值减去指定的时间或持续时间得到的值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">要减去的日期和时间值。</param>
        <summary>返回一个新的 <see cref="T:System.TimeSpan" />，从此实例的值中减去指定的日期和时间。</summary>
        <returns>一个时间间隔，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的日期和时间。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29>方法确定两个日期之间的差异。 若要从当前实例中减去时间间隔，请调用 <xref:System.DateTime.Subtract%28System.TimeSpan%29> 方法。 若要从当前实例中减去特定时间间隔，请调用将该时间间隔添加到当前日期的方法，并提供一个负值作为方法自变量。 例如，若要从当前日期中减去两个月，请 <xref:System.DateTime.AddMonths%28System.Int32%29> 使用值-2 调用方法。  
  
 如果当前实例的日期和时间早于 `value` ，则该方法返回一个 <xref:System.TimeSpan> 表示负时间跨度的对象。 也就是说，其所有非零属性的值 (如 <xref:System.TimeSpan.Days%2A> 或 <xref:System.TimeSpan.Ticks%2A>) 为负数。  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29> <xref:System.DateTime.Kind%2A> 执行减法运算时，此方法不会考虑两个值的属性的值 <xref:System.DateTime> 。 在减去 <xref:System.DateTime> 对象之前，请确保对象表示相同时区中的时间。 否则，结果将包括时区之间的差异。  
  
> [!NOTE]
>  在 <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> 执行减法运算时，此方法会考虑时区之间的差异。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Subtract%2A> 方法和减法运算符。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">待减去的时间间隔。</param>
        <summary>返回一个新的 <see cref="T:System.DateTime" />，从此实例的值中减去指定持续时间。</summary>
        <returns>一个对象，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29>方法返回与当前实例的指定时间间隔的日期。 若要确定两个日期之间的时间间隔，请调用 <xref:System.DateTime.Subtract%28System.DateTime%29> 方法。 若要从当前实例中减去特定时间间隔，请调用将该时间间隔添加到当前日期的方法，并提供一个负值作为方法自变量。 例如，若要从当前日期中减去两个月，请 <xref:System.DateTime.AddMonths%28System.Int32%29> 使用值-2 调用方法。  
  
 此方法不更改此的值 <xref:System.DateTime> 。 相反，它会返回一个新的， <xref:System.DateTime> 其值为此操作的结果。  
  
 通常， <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 方法 <xref:System.TimeSpan> 会减去表示正时间跨度的对象，并返回一个 <xref:System.DateTime> 早于当前实例的日期和时间的值。 但是，如果 <xref:System.TimeSpan> 对象表示负时间跨度，则该 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 方法将返回一个 <xref:System.DateTime> 值，该值晚于当前实例的日期和时间。  
  
 使用 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> 方法可以减去包含多个时间单位的时间间隔 (例如给定小时数和给定分钟数) 。 若要从实例中减去单个时间单位 (例如年、月或日) <xref:System.DateTime> ，你可以将负值数值作为参数传递给以下任何方法：  
  
-   <xref:System.DateTime.AddYears%2A>，用于从当前日期和时间实例中减去特定的年数。  
  
-   <xref:System.DateTime.AddMonths%2A>，用于从当前日期和时间实例中减去特定的月份数。  
  
-   <xref:System.DateTime.AddDays%2A>，用于从当前日期和时间实例减去特定天数。  
  
-   <xref:System.DateTime.AddHours%2A>，用于从当前日期和时间实例中减去特定的小时数。  
  
-   <xref:System.DateTime.AddMinutes%2A>，用于从当前日期和时间实例减去特定分钟数。  
  
-   <xref:System.DateTime.AddSeconds%2A>，用于从当前日期和时间实例中减去特定的秒数。  
  
-   <xref:System.DateTime.AddMilliseconds%2A>，用于从当前日期和时间实例减去特定的毫秒数。  
  
-   <xref:System.DateTime.AddTicks%2A>，用于从当前日期和时间实例减去特定的计时周期数。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.Subtract%2A> 方法和减法运算符。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">使用日期和时间执行算术运算</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="dateTime.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">要比较的对象。</param>
        <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
        <returns>一个值，指示要比较的对象的相对顺序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此成员是显式接口成员的实现。 它只能在 <xref:System.DateTime> 实例被强制转换为 <xref:System.IComparable> 接口时使用。

返回值的含义如下：

| 值             | 含义                                                                 |
|-------------------|-------------------------------------------------------------------------|
| 小于零    | 此实例在排序顺序中位于 `value` 之前。                       |
| 零              | 此实例在排序顺序中的位置与 `value` 相同。 |
| 大于零 | 此实例在排序顺序中位于 `value` 之后。                        |

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的 <see cref="T:System.TypeCode" />。</summary>
        <returns>枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此成员是显式接口成员的实现。 它只能在 <xref:System.DateTime> 实例被强制转换为 <xref:System.IConvertible> 接口时使用。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="dateTime.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="dateTime.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="dateTime.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="dateTime.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>返回当前 <see cref="T:System.DateTime" /> 对象。</summary>
        <returns>当前对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="dateTime.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="dateTime.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="dateTime.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="dateTime.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="dateTime.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="dateTime.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="dateTime.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="dateTime.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">所需类型。</param>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象转换为指定类型的对象。</summary>
        <returns>由 <paramref name="type" /> 参数指定的类型的对象，其值与当前 <see cref="T:System.DateTime" /> 对象等效。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidCastException"><see cref="T:System.DateTime" /> 类型不支持此转换。</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="dateTime.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="dateTime.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="dateTime.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
        <returns>未使用此成员的返回值。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dateTime.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的对象。</param>
        <param name="context">此序列化的目标。 （未使用此参数；指定 <see langword="null" />。）</param>
        <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.DateTime" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法 `info` 用 <xref:System.DateTime.Ticks%2A> 和属性值填充参数 <xref:System.DateTime.Kind%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示此实例的日期和时间的计时周期数。</summary>
        <value>表示此实例的日期和时间的计时周期数。 该值介于 <see langword="DateTime.MinValue.Ticks" /> 和 <see langword="DateTime.MaxValue.Ticks" /> 之间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个计时周期表示一百纳秒，即一千万分之一秒。 毫秒中有10000的刻度 (请参阅 <xref:System.TimeSpan.TicksPerMillisecond>) 和10000000计时周期，以秒为单位。  
  
此属性的值表示12:00:00 自0001年1月1日午夜12月1日午夜（表示为）的100纳秒间隔数 <xref:System.DateTime.MinValue> 。 它不包括由闰秒组成的计时周期数。
如果 DateTime 对象的 `Kind` 属性设置为，则 `Local` 其刻度表示由当前时区设置指定的本地时间中自0001年1月1日午夜12:00:00 开始的时间。
如果 `DateTime` 对象的 `Kind` 属性设置为，则 `Utc` 其刻度表示自0001年1月1日午夜12:00:00 的时间，从协调世界时开始。
如果 `DateTime` 对象的 `Kind` 属性设置为，则 `Unspecified` 其刻度表示未知时区中从0001年1月1日午夜12:00:00 开始经过的时间。

通常，刻度根据属性指定的时区来表示时间 `Kind` 。

  
## Examples  

 下面的示例使用 <xref:System.DateTime.Ticks%2A> 属性来显示自第二十五世纪开始到实例化对象以来已过的计时周期数 <xref:System.TimeSpan> 。 然后，使用该 <xref:System.TimeSpan> 对象显示使用几个其他时间间隔的运行时间。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例的当天的时间。</summary>
        <value>一个时间间隔，它表示当天自午夜以来已经过时间的部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与 <xref:System.DateTime.Date%2A> 属性不同。 此属性返回一个值，该值 <xref:System.DateTime> 表示不带时间部分的日期， <xref:System.DateTime.TimeOfDay%2A> 属性返回一个 <xref:System.TimeSpan> 值，该值表示  <xref:System.DateTime> 值的时间部分。  
  
 如果要显示一天中的时间或检索值的某一天的字符串表示形式 <xref:System.DateTime> ，则可以改为调用具有参数的方法的重载， <xref:System.DateTime.ToString%2A> `format` 或将 [复合格式设置](/dotnet/standard/base-types/composite-formatting) 功能与 "t" 或 "t" 标准格式字符串一起使用。  
  
   
  
## Examples  
 下面的示例显示 <xref:System.DateTime.TimeOfDay%2A> 值数组的属性的值 <xref:System.DateTime> 。 它还使用复合格式设置操作中的 "t" 标准格式字符串返回的字符串来比较返回值。  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象序列化为一个 64 位二进制值，该值随后可用于重新创建 <see cref="T:System.DateTime" /> 对象。</summary>
        <returns>64 位有符号整数，它对 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.DateTime.ToBinary%2A> 方法将当前对象的值转换 <xref:System.DateTime> 为二进制值。 随后，使用二进制值和 <xref:System.DateTime.FromBinary%2A> 方法重新创建原始 <xref:System.DateTime> 对象。  
  
> [!IMPORTANT]
>  在某些情况下， <xref:System.DateTime> 方法返回的值与 <xref:System.DateTime.FromBinary%2A> <xref:System.DateTime> 提供给该方法的原始值不同 <xref:System.DateTime.ToBinary%2A> 。 有关详细信息，请参阅下一节 "本地时间调整"。  
  
## <a name="local-time-adjustment"></a>本地时间调整  
 本地时间（即调整为本地时区的协调世界时）由 <xref:System.DateTime> 其属性具有值的结构来表示 <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local> 。 <xref:System.DateTime>从方法生成的二进制表示形式还原本地值时 <xref:System.DateTime.ToBinary%2A> ，该 <xref:System.DateTime.FromBinary%2A> 方法可能会调整重新创建的值，使其不等于原始值。 在下列条件下，可能会出现这种情况：  
  
-   如果本地 <xref:System.DateTime> 对象由方法在一个时区中序列化 <xref:System.DateTime.ToBinary%2A> ，然后方法在不同时区中进行反序列化，则 <xref:System.DateTime.FromBinary%2A> 生成的对象所表示的本地时间会 <xref:System.DateTime> 自动调整为第二个时区。  
  
     例如，假设某个 <xref:System.DateTime> 对象表示本地时间下午3点。 在美国西部区域中执行的应用程序使用 <xref:System.DateTime.ToBinary%2A> 方法将该 <xref:System.DateTime> 对象转换为二进制值。 在美国东部时区正在执行的另一个应用程序使用 <xref:System.DateTime.FromBinary%2A> 方法将二进制值转换为新的 <xref:System.DateTime> 对象。 新的对象的值 <xref:System.DateTime> 为下午6点，表示与原来的下午3点相同的时间点。 值，但会调整为东部时区中的本地时间。  
  
-   如果本地值的二进制表示形式 <xref:System.DateTime> 表示所调用系统的本地时区中的无效时间，则将 <xref:System.DateTime.FromBinary%2A> 调整该时间，使其有效。  
  
     例如，从标准时间转换到夏令时的时间是在2010年3月14日上午2:00，上午，时间前进一小时，到凌晨3:00 此小时间隔为无效时间，即此时区中不存在的时间间隔。 下面的示例显示，当处于此范围内的时间由方法转换为二进制值， <xref:System.DateTime.ToBinary%2A> 然后通过方法还原时 <xref:System.DateTime.FromBinary%2A> ，原始值将调整为有效时间。 如示例所示，可以通过将特定日期和时间值传递给方法来确定是否可以修改该日期和时间值 <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> 。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>版本注意事项  
 从 .NET Framework 版本2.0 开始， <xref:System.DateTime> 结构包含一个私有类型字段，该字段指示指定的时间值是基于本地时间、协调世界时 (UTC) 还是两者都不是，后者包含指定日期和时间的100毫微秒刻度数。 可以通过属性访问刻度字段 <xref:System.DateTime.Ticks%2A> ，并且可以通过属性访问 Kind 字段 <xref:System.DateTime.Kind%2A> 。  
  
 在 .NET Framework 2.0 之前，如果手动序列化 <xref:System.DateTime> 对象，而不是使用序列化接口（如 <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType> ），则只需要序列化结构中的滴答数据 <xref:System.DateTime> 。 从版本2.0 开始，还必须序列化类型数据。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前日期。</summary>
        <value>一个对象，设置为当天日期，其时间组成部分设置为 00:00:00。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从 .NET Framework 版本2.0 开始，返回值为， <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性返回 <xref:System.DateTimeKind.Local> 。  
  
 由于它在不使用当前时间的情况下返回当前日期，因此该 <xref:System.DateTime.Today%2A> 属性适用于仅使用日期的应用程序。 有关详细信息，请参阅 [在 DateTime、DateTimeOffset、TimeSpan 和 TimeZoneInfo 之间进行选择](/dotnet/standard/datetime/choosing-between-datetime)。 与此相反， <xref:System.DateTime.TimeOfDay%2A> 属性返回当前时间而不包含当前日期， <xref:System.DateTime.Now%2A> 属性返回当前日期和当前时间。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.Date%2A> 属性检索当前日期。 它还说明了如何 <xref:System.DateTime> 使用某些标准日期和时间格式字符串来设置值的格式。 请注意，第三次调用方法所生成的输出将 <xref:System.DateTime.ToString%28System.String%29> 使用 g 格式说明符来包含时间部分（零）。  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
        <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是一个64位的值，它表示自公元1900年1月 1601 1 日午夜12:00 之后经过的100纳秒间隔数  (公历 ) 协调世界时 (UTC) 。 当应用程序创建、访问或写入到文件时，Windows 将使用文件时间来记录。  
  
 <xref:System.DateTime.ToFileTime%2A>方法使用 <xref:System.DateTime.Kind%2A> 属性来确定当前 <xref:System.DateTime> 对象是否为本地时间、UTC 时间或被视为本地时间的未指定时间类型。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.ToFileTime%2A> 方法。  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。 UTC。</exception>
        <block subset="none" type="usage"><para>通常， <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> 方法 <see cref="T:System.DateTime" /> 会还原由方法保存的值 <see cref="M:System.DateTime.ToFileTime" /> 。 但是，在下列情况下，这两个值可能不同： 
-如果值的序列化和反序列化 <see cref="T:System.DateTime" /> 出现在不同的时区中。 例如，如果 <see cref="T:System.DateTime" /> 值的时间为 12:30 P.M。 在美国东部时区，将序列化，然后在美国太平洋12:30 时区中反序列化 调整为凌晨9:30。 来反映两个时区之间的差异。  
  
-如果 <see cref="T:System.DateTime" /> 序列化的值表示本地时区中的无效时间，则为。 在这种情况下， <see cref="M:System.DateTime.ToFileTime" /> 方法会调整还原的 <see cref="T:System.DateTime" /> 值，使其表示本地时区中的有效时间。  
  
例如，从标准时间转换到夏令时的时间是在2010年3月14日上午2:00，上午，时间前进一小时，到凌晨3:00 此小时间隔为无效时间，即此时区中不存在的时间间隔。 下面的示例显示，当此范围内的时间由方法转换为长整数值， <see cref="M:System.DateTime.ToFileTime" /> 然后通过方法还原时 <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> ，原始值将调整为有效时间。 如示例所示，可以通过将特定日期和时间值传递给方法来确定是否可以修改该日期和时间值 <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> 。  
  
[！ code-csharp[FromFileTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)][！ code-vb[FromFileTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
        <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows 文件时间是一个64位的值，它表示自公元1900年1月 1601 1 日午夜12:00 之后经过的100纳秒间隔数  (公历 ) 协调世界时 (UTC) 。 当应用程序创建、访问或写入到文件时，Windows 将使用文件时间来记录。  
  
 <xref:System.DateTime.ToFileTimeUtc%2A>方法使用 <xref:System.DateTime.Kind%2A> 属性来确定当前 <xref:System.DateTime> 对象是本地时间、utc 时间还是被视为 utc 时间的未指定时间类型。 如果它是本地时间，则会在执行到 Windows 文件时间的转换之前将时间转换为 UTC。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。 UTC。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToFileTimeUtc" />方法有时用于将本地时间转换为 UTC，然后通过调用方法然后调用方法来还原该时间 <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> <see cref="M:System.DateTime.ToLocalTime" /> 。 但是，如果原始时间表示本地时区中的无效时间，则两个本地时间值将不相等。 有关其他信息，请参见 <see cref="M:System.DateTime.ToLocalTime" /> 方法。</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为本地时间。</summary>
        <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的本地时间；如果经转换的值过大以至于不能由 <see cref="F:System.DateTime.MaxValue" /> 对象表示，则为 <see cref="T:System.DateTime" />，或者，如果经转换的值过小以至于不能表示为 <see cref="F:System.DateTime.MinValue" /> 对象，则为 <see cref="T:System.DateTime" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本地时间等于协调世界时 (UTC) 时间加上 UTC 偏移量。 有关 UTC 偏移量的详细信息，请参阅 <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType> 。 转换还会考虑适用于当前对象所表示的时间的夏时制规则 <xref:System.DateTime> 。  
  
> [!IMPORTANT]
>  在 [!INCLUDE[winxp](~/includes/winxp-md.md)] 系统上，此 <xref:System.DateTime.ToLocalTime%2A> 方法仅在将 UTC 转换为本地时间时才识别当前调整规则。 因此，当前调整规则生效前的时间转换可能无法准确反映 UTC 与本地时间之间的差异。  
  
 从 .NET Framework 版本2.0 开始，方法返回的值由 <xref:System.DateTime.ToLocalTime%2A> <xref:System.DateTime.Kind%2A> 当前对象的属性确定 <xref:System.DateTime> 。 下表描述了可能的结果。  
  
|类型|结果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|将此实例 <xref:System.DateTime> 转换为本地时间。|  
|<xref:System.DateTimeKind.Local>|不执行任何转换。|  
|<xref:System.DateTimeKind.Unspecified>|的此实例被 <xref:System.DateTime> 假定为 UTC 时间，转换的执行方式就像 <xref:System.DateTime.Kind%2A> 是一样 <xref:System.DateTimeKind.Utc> 。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A>方法将 <xref:System.DateTime> 值从 UTC 转换为本地时间。 若要将任何指定时区中的时间转换为本地时间，请使用 <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> 方法。  
  
 转换返回的值为， <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性始终返回 <xref:System.DateTimeKind.Local> 。 因此，即使重复应用于同一，也会返回有效的结果 <xref:System.DateTime.ToLocalTime%2A> <xref:System.DateTime> 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.ToLocalTime%2A> 方法。 请注意，准确的输出取决于当前区域性以及运行它的系统的本地时区。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 下面的示例使用 <xref:System.DateTime.SpecifyKind%2A> 方法演示 <xref:System.DateTime.Kind%2A> 属性如何影响 <xref:System.DateTime.ToLocalTime%2A> 和 <xref:System.DateTime.ToUniversalTime%2A> 转换方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>您可以使用 <see cref="M:System.DateTime.ToLocalTime" /> 方法还原通过或方法转换为 UTC 的本地日期和时间值 <see cref="M:System.DateTime.ToUniversalTime" /> <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> 。 但是，如果原始时间表示本地时区中的无效时间，则它将不与还原的值匹配。 当 <see cref="M:System.DateTime.ToLocalTime" /> 方法将时间从 UTC 转换为本地时区时，它还会调整时间，以便在本地时区中有效。  
  
例如，从标准时间转换到夏令时的时间是在2010年3月14日上午2:00，上午，时间前进一小时，到凌晨3:00 此小时间隔为无效时间，即此时区中不存在的时间间隔。 下面的示例显示，当此范围内的时间由方法转换为 UTC， <see cref="M:System.DateTime.ToUniversalTime" /> 然后通过方法还原时 <see cref="M:System.DateTime.ToLocalTime" /> ，原始值将调整为有效时间。 如示例所示，可以通过将特定日期和时间值传递给方法来确定是否可以修改该日期和时间值 <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> 。  
  
[！ code-csharp[datetime.tolocaltime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)][！ code-vb[datetime.tolocaltime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的长日期字符串表示形式。</summary>
        <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的长日期字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime>使用 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 与当前线程区域性关联的属性所定义的模式来设置当前对象的值的格式。 返回值与通过使用方法指定 "D" [标准 DateTime 格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 返回的值相同 <xref:System.DateTime.ToString%28System.String%29> 。  
  
> [!NOTE]
>  方法返回的字符串 <xref:System.DateTime.ToLongDateString%2A> 是区分区域性的。 它反映由当前区域性的属性定义的模式 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern?displayProperty=nameWithType> 。 例如，对于 en-us 区域性，标准长日期模式通常为 "dddd，MMMM dd，yyyy";对于 de 消除区域性，它是 "dddd，d"。 MMMM yyyy ";对于 ja-jp 区域性，为 "yyyy" 年 "月" 日 ""。 请注意，根据 .NET 实现及其版本、操作系统及其版本和用户自定义情况，其值会有所不同。

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]
  
## Examples

下面的示例演示 <xref:System.DateTime.ToLongDateString%2A> 方法。  
  
[!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
[!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的长时间字符串表示形式。</summary>
        <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的长时间字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<xref:System.DateTime>使用 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> 与当前线程区域性关联的属性所定义的模式来设置当前对象的值的格式。 返回值与通过使用方法指定 "T" [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 返回的值相同 <xref:System.DateTime.ToString%28System.String%29> 。  
  
> [!NOTE]
>  方法返回的字符串 <xref:System.DateTime.ToLongTimeString%2A> 是区分区域性的。 它反映由当前区域性的属性定义的模式 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> 。 例如，对于 en-us 区域性，标准长时间模式为 "h:mm： ss tt";对于取消操作，它是 "HH： mm： ss";对于 ja-jp 区域性，它是 "H:mm： ss"。 请注意，根据 .NET 实现及其版本、操作系统及其版本和用户自定义情况，其值会有所不同。

[!INCLUDE[culture-sensitive-formatting](~/includes/thread-formatting.md)]
  
## Examples  
 下面的示例演示 <xref:System.DateTime.ToLongTimeString%2A> 方法。  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将此实例的值转换为等效的 OLE 自动化日期。</summary>
        <returns>一个双精度浮点数，它包含与此实例的值等效的 OLE 自动化日期。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OLE 自动化日期是以浮点数的形式实现的，其整数部分为午夜、12 1899 月30日之前或之后的天数，其小数部分表示该日除以24的时间。 例如，1899年12月31日午夜1.0 表示，6 A.M.，1月 1 1900 日表示，2.25;1899年12月29日午夜表示-1.0;和6月6日上午 6 1899，表示为-1.25。  
  
 基础 OLE 自动化日期为1899年12月30日。 最小 OLE 自动化日期为0100年1月1日午夜。 最大 OLE 自动化日期与 <xref:System.DateTime.MaxValue?displayProperty=nameWithType> 9999 年12月31日最后一刻的日期相同。  
  
 <xref:System.DateTime.ToOADate%2A> <xref:System.OverflowException> 如果当前实例表示的日期晚于 <xref:System.DateTime.MaxValue> January1 0100，则该方法将引发。 但是，如果当前实例的值为 <xref:System.DateTime.MinValue> ，则此方法返回0。  
  
 有关详细信息，请参阅 [Automation](/cpp/mfc/automation)。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">此实例的值无法表示为 OLE 自动化日期。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的短日期字符串表示形式。</summary>
        <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的短日期字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime>使用 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> 与当前线程区域性关联的属性所定义的模式来设置当前对象的值的格式。 返回值与通过使用方法指定 "d" [标准 DateTime 格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 返回的值相同 <xref:System.DateTime.ToString%28System.String%29> 。  
  
> [!NOTE]
>  方法返回的字符串 <xref:System.DateTime.ToShortDateString%2A> 是区分区域性的。 它反映由当前区域性的属性定义的模式 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern?displayProperty=nameWithType> 。 例如，对于 en-us 区域性，标准短日期模式为 "M/d/yyyy";对于取消的区域性，它是 "dd. MM. yyyy";对于 ja-jp 区域性，它为 "yyyy/MM/dd"。 请注意，根据 .NET 实现及其版本、操作系统及其版本和用户自定义情况，其值会有所不同。

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 下面的示例演示 <xref:System.DateTime.ToShortDateString%2A> 方法。 它还显示调用方法的结果与 <xref:System.DateTime.ToShortDateString%2A> <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 通过将 "d" 作为格式参数调用方法相同。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的短时间字符串表示形式。</summary>
        <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的短时间字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.DateTime>使用 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> 与当前线程区域性关联的属性所定义的模式来设置当前对象的值的格式。 返回值与通过使用方法指定 "t" [标准 DateTime 格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 返回的值相同 <xref:System.DateTime.ToString%28System.String%29> 。  
  
> [!NOTE]
>  方法返回的字符串 <xref:System.DateTime.ToShortTimeString%2A> 是区分区域性的。 它反映由当前区域性的属性定义的模式 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern?displayProperty=nameWithType> 。 例如，对于 en-us 区域性，标准短时间模式为 "h:mm tt";对于取消操作，它是 "HH： mm";对于 ja-jp 区域性，它是 "H:mm"。 请注意，根据 .NET 实现及其版本、操作系统及其版本和用户自定义情况，其值会有所不同。 

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 下面的示例演示 <xref:System.DateTime.ToShortTimeString%2A> 方法。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的字符串表示形式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用当前的区域性格式约定将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前对象的值 <xref:System.DateTime> 是使用常规日期和时间格式说明符 ( "G" ) 进行格式设置的。 若要使用特定的日期和时间格式说明符来设置其格式，请调用 <xref:System.DateTime.ToString%28System.String%29> 方法。 若要使用常规日期和时间格式说明符对特定区域性 ( "G" ) ，请调用 <xref:System.DateTime.ToString%28System.IFormatProvider%29> 方法。 若要使用特定的日期和时间格式说明符以及特定区域性的约定对其进行格式化，请调用 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> 方法。  
  
 此方法使用派生自当前区域性的格式设置信息。 特别是，它将由 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 属性返回的对象的和属性返回的自定义格式字符串组合在一起 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> <xref:System.Globalization.DateTimeFormatInfo> `Thread.CurrentThread.CurrentCulture.DateTimeFormat` 。 有关详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。 方法的其他重载 <xref:System.DateTime.ToString%2A> 使你能够指定要使用其格式设置的区域性，并定义值的输出模式 <xref:System.DateTime> 。  
  
   
  
## Examples  
 下面的示例说明方法返回的值的字符串表示形式如何 <xref:System.DateTime> <xref:System.DateTime.ToString> 取决于当前线程的区域性。 它将当前线程区域性从 en-us 改为 fr-fr。 在每种情况下，都调用 <xref:System.DateTime.ToString> 方法，以返回使用该区域性的日期和时间值的字符串表示形式。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString" />方法返回当前区域性使用的日历中的日期和时间的字符串表示形式。 如果当前实例的值 <see cref="T:System.DateTime" /> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" /> ，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。 下面的示例进行了这方面的演示。 <see cref="T:System.Globalization.HijriCalendar" />如果当前区域性为阿拉伯语 (叙利亚) ，则它会尝试设置位于类范围之外的日期的格式。  
 
：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs" id = "Snippet2"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb" id = "Snippet2"：：：

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
        <summary>使用指定的区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <see cref="T:System.DateTime" /> 指定的当前 <paramref name="provider" /> 对象的值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前对象的值 <xref:System.DateTime> 是使用常规日期和时间格式说明符 ( "G" ) ，后者使用短日期模式和长时间模式设置输出格式。  
  
 短日期和长时间模式的格式由 `provider` 参数定义。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示要在返回的字符串中反映其格式设置约定的区域性。 <xref:System.Globalization.DateTimeFormatInfo>由属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 定义返回的字符串的格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个实现接口的自定义对象 <xref:System.IFormatProvider> 。 其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.DateTimeFormatInfo> 使用与当前区域性关联的对象。 有关详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Globalization.CultureInfo> 表示五个不同区域性的对象来显示日期和时间的字符串表示形式。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb" id="Snippet3":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="provider" /> 所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.IFormatProvider)" />方法返回由参数所表示的区域性使用的日历中的日期和时间的字符串表示形式 <paramref name="provider" /> 。 其日历由 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性定义。 如果当前实例的值 <see cref="T:System.DateTime" /> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" /> ，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。 下面的示例进行了这方面的演示。 它尝试设置超出类范围的日期的格式 <see cref="T:System.Globalization.JapaneseCalendar" /> 。  
 
：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs" interactive = "dotnet" id = "Snippet1"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb" id = "Snippet1"：：：

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberSignature Language="C#" Value="public string ToString (string? format);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">标准或自定义日期和时间格式字符串。</param>
        <summary>使用指定的格式和当前区域性的格式约定将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <see cref="T:System.DateTime" /> 指定的当前 <paramref name="format" /> 对象的值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ToString%28System.String%29>方法以特定格式返回日期和时间值的字符串表示形式，该格式使用当前区域性的格式设置约定; 有关详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 。  
  
 `format`参数应包含单个格式说明符 (参见[标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)) 或自定义格式模式， (参见定义返回字符串格式的[自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)) 。 如果 `format` 是 `null` 或空字符串，则使用常规格式说明符 "G"。  
  
 此方法的一些用途包括：  
  
-   获取一个字符串，该字符串以当前区域性的短日期和时间格式显示日期和时间。 为此，请使用 "G" 格式说明符。  
  
-   获取只包含月份和年份的字符串。 为此，请使用 "MM/yyyy" 格式字符串。 格式字符串使用当前区域性的日期分隔符。  
  
-   获取一个字符串，该字符串包含采用特定格式的日期和时间。 例如，"MM/dd/yyyyHH： MM" 格式字符串以固定格式（例如 "19//03//2013 18:06"）显示日期和时间字符串。 格式字符串使用 "/" 作为固定日期分隔符，而与区域性特定的设置无关。  
  
-   采用可用于序列化日期字符串的紧缩格式获取日期。 例如，"yyyyMMdd" 格式字符串显示四位数的年份，后跟两位数的月份和两位数的日期（不含日期分隔符）。  
  
 下面的示例使用这三个格式字符串通过使用 en-us 和 fr-fr 区域性的约定来显示日期和时间值。  
  
  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs" interactive="try-dotnet" id="Snippet5":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb" id="Snippet5":::
  
## Examples  
 下面的示例使用每个标准日期和时间格式字符串以及选择自定义日期和时间格式字符串来显示值的字符串表示形式 <xref:System.DateTime> 。 示例的当前区域性为 en-us。  

  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs" interactive="try-dotnet" id="Snippet2":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb" id="Snippet2":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 的长度为 1，而且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符字符之一。  
  
- 或 - 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String)" />方法返回当前区域性使用的日历中的日期和时间的字符串表示形式。 如果当前实例的值 <see cref="T:System.DateTime" /> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" /> ，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。 下面的示例进行了这方面的演示。 <see cref="T:System.Globalization.HebrewCalendar" />如果当前区域性为希伯来语 (以色列) ，则它会尝试设置位于类范围之外的日期的格式。  

：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs" interactive = "dotnet" id = "Snippet3"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb" id = "Snippet3"：：：

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberSignature Language="C#" Value="public string? ToString (string format, IFormatProvider provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">标准或自定义日期和时间格式字符串。</param>
        <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
        <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
        <returns>由 <see cref="T:System.DateTime" /> 和 <paramref name="format" /> 指定的当前 <paramref name="provider" /> 对象的值的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`参数可以包含单个格式说明符 (参见[标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)) 或自定义格式模式 (请参阅[自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)) 。 如果 `format` 是 `null` 或空字符串 ( "" ) ，则使用标准格式说明符 "G"。  
  
 `provider`参数定义与标准格式说明符对应的模式以及日期和时间组件的符号和名称。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示要在返回的字符串中反映其格式设置约定的区域性。 <xref:System.Globalization.DateTimeFormatInfo>由属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 定义返回的字符串的格式设置。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个实现接口的自定义对象 <xref:System.IFormatProvider> 。 其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.DateTimeFormatInfo> 使用与当前区域性关联的。 有关详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例使用每个标准日期时间格式字符串来显示四个不同区域性的日期和时间的字符串表示形式。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb" id="Snippet4":::
 
 下面的示例演示使用固定的值进行格式设置的不同方式 <xref:System.DateTime> <xref:System.Globalization.DateTimeFormatInfo> 。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> 的长度为 1，而且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符字符之一。  
  
- 或 - 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="provider" /> 所用日历支持的日期范围。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />方法返回参数使用的日历中的日期和时间的字符串表示形式 <paramref name="provider" /> 。 其日历由 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性定义。 如果当前实例的值 <see cref="T:System.DateTime" /> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" /> ，则该方法将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。 下面的示例进行了这方面的演示。 它尝试设置超出类范围的日期的格式 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 。  

：：： code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs" interactive = "dotnet" id = "Snippet4"：：：：：： code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb" id = "Snippet4"：：：

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/">示例：.NET Core WinForms 格式设置实用工具 (C#)</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/">示例：.NET Core WinForms 格式设置实用工具 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为协调世界时 (UTC)。</summary>
        <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的 UTC；如果经转换的值过大以至于不能由 <see cref="F:System.DateTime.MaxValue" /> 对象表示，则为 <see cref="T:System.DateTime" />，或者，如果经转换的值过小以至于不能表示为 <see cref="F:System.DateTime.MinValue" /> 对象，则为 <see cref="T:System.DateTime" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 协调世界时 (UTC) 等于本地时间减去 UTC 偏移量。 有关 UTC 偏移量的详细信息，请参阅 <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType> 。 转换还会考虑适用于当前对象所表示的时间的夏时制规则 <xref:System.DateTime> 。  
  
> [!IMPORTANT]
>  在 [!INCLUDE[winxp](~/includes/winxp-md.md)] 系统上，此 <xref:System.DateTime.ToUniversalTime%2A> 方法仅在从本地时间转换为 UTC 时识别当前调整规则。 因此，当前调整规则生效前的时间转换可能无法准确反映本地时间和 UTC 之间的时差。  
  
 从 .NET Framework 版本2.0 开始，方法返回的值由 <xref:System.DateTime.ToUniversalTime%2A> <xref:System.DateTime.Kind%2A> 当前对象的属性确定 <xref:System.DateTime> 。 下表描述了可能的结果。  
  
|类型|结果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|不执行任何转换。|  
|<xref:System.DateTimeKind.Local>|当前的 <xref:System.DateTime> 对象将转换为 UTC。|  
|<xref:System.DateTimeKind.Unspecified>|当前的 <xref:System.DateTime> 对象假定为本地时间，而转换的执行方式就像 <xref:System.DateTime.Kind%2A> 是 <xref:System.DateTimeKind.Local> 。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A>方法将 <xref:System.DateTime> 值从本地时间转换为 UTC。 若要将非本地时区中的时间转换为 UTC，请使用 <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> 方法。 若要转换与 UTC 的偏移量已知的时间，请使用 <xref:System.DateTimeOffset.ToUniversalTime%2A> 方法。  
  
 如果日期和时间实例值是不明确的时间，则此方法假定它是标准时间。  (不明确的时间是指可在本地时区中映射到标准时间或夏令时的时间) 如果日期和时间实例值无效，则此方法只需将本地时区的 UTC 偏移量减去本地时间即可返回 UTC。  (无效时间是由于应用夏令时调整规则而不存在的时间。 )   
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.ToUniversalTime%2A> 方法。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 下面的示例使用 <xref:System.DateTime.SpecifyKind%2A> 方法演示 <xref:System.DateTime.Kind%2A> 属性如何影响 <xref:System.DateTime.ToLocalTime%2A> 和 <xref:System.DateTime.ToUniversalTime%2A> 转换方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToUniversalTime" />方法有时用于将本地时间转换为 UTC。 <see cref="M:System.DateTime.ToLocalTime" />然后调用方法以还原原始的本地时间。 但是，如果原始时间表示本地时区中的无效时间，则两个本地时间值将不相等。 有关其他信息和示例，请参见 <see cref="M:System.DateTime.ToLocalTime" /> 方法。  
  
在 [!INCLUDE[winxp](~/includes/winxp-md.md)] 系统上，此 <see cref="M:System.DateTime.ToUniversalTime" /> 方法仅识别本地时区的当前调整规则，该规则适用于所有日期，包括下级日期 (也就是说，早于当前调整规则) 的开始日期的日期。 在上运行 [!INCLUDE[winxp](~/includes/winxp-md.md)] 的应用程序需要使用过时的本地日期和时间计算，则必须通过使用 <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> 方法检索 <see cref="T:System.TimeZoneInfo" /> 与本地时区对应的对象并调用其方法来解决此行为 <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> 。  
  
下面的示例演示了 <see cref="M:System.DateTime.ToUniversalTime" /> <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> [!INCLUDE[winxp](~/includes/winxp-md.md)] 美国太平洋时区中的系统上的和方法之间的差异。 前两种方法调用应用当前时区调整规则 (这会在 2007) 生效，直到2006中的日期。 当前调整规则用于在三月的第二个星期日转换到夏令时以前的规则（在2006中有效）在4月的第一个星期日开始转换为夏令时。 只有第三个方法调用才能准确地执行此历史日期和时间转换。  
  
[！ code-csharp[ToUniversalTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)][！ code-vb[ToUniversalTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider? provider = default);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = Nothing, Optional provider As IFormatProvider = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider provider = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination">此方法返回时，此实例的值格式化为一段字符。</param>
        <param name="charsWritten">此方法返回时，为写入到 <paramref name="destination" /> 的字符数。</param>
        <param name="format">一个包含字符的范围，这些字符表示定义可接受的 <paramref name="destination" /> 格式的标准或自定义格式字符串。</param>
        <param name="provider">一个可选对象，提供有关 <paramref name="destination" /> 的区域性特定格式设置信息。</param>
        <summary>尝试将当前日期/时间实例的值的格式化为提供的字符范围。</summary>
        <returns>如果格式设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>将日期和时间的指定字符范围转换为其等效的 <see cref="T:System.DateTime" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法与 <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> 方法类似，不同之处在于方法不 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> 会在转换失败时引发异常。  
  
 `s`使用当前对象中的格式设置信息对字符串进行分析 <xref:System.Globalization.DateTimeFormatInfo> ，该对象由当前线程区域性隐式提供。  
  
 此方法尝试忽略无法识别的数据（如果可能），并用当前日期填充缺少的月、日和年信息。 如果 `s` 仅包含日期而不包含时间，则此方法假定时间为12:00 午夜。 如果 `s` 包含带有两位数年份的日期部分，则将根据属性的值将其转换为当前区域性当前日历中的年份 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 。 中的任何前导、内部或尾随空格字符 `s` 都将被忽略。 日期和时间可以用一对前导和尾随数字符号字符括起来 ( "#"、U + 0023) ，并且可以使用一个或多个 NULL 字符 (U + 0000) 来 trailed。  
  
 由于 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法尝试使用当前区域性的格式设置规则来分析日期和时间的字符串表示形式，因此尝试跨不同区域性分析特定字符串可能会失败或返回不同的结果。 如果将在不同的区域设置中分析特定的日期和时间格式，请使用方法 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 或方法的重载之一， <xref:System.DateTime.TryParseExact%2A> 并提供格式说明符。  
  
 如果 `s` 是当前日历中闰年的闰日字符串表示形式，则该方法将 `s` 成功分析。 如果 `s` 是当前区域性当前日历中非闰年的闰日字符串表示形式，则分析操作将失败，并且该方法将返回 `false` 。  
  
 如果 `s` 不包含时区信息，则 `result` 包含一个 <xref:System.DateTime> 值，在 <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 此方法返回时，其属性为。 如果要分析的字符串包含时区信息，则 `result` 包含一个 <xref:System.DateTime> 值，在 <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 此方法返回时，其属性为。  
  
   
  
## Examples  
 下面的示例将一些日期和时间字符串传递给 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法。  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>格式设置受当前对象的属性影响 <see cref="T:System.Globalization.DateTimeFormatInfo" /> ，默认情况下，它派生自控制面板中的 " **区域和语言选项** " 项。 <see cref="Overload:System.DateTime.TryParse" /> <see langword="False" /> 如果当前 <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> 和 <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> 属性设置为相同的值，则此方法可能会意外失败，并返回。</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/">示例：.NET Core WinForms 格式设置实用工具 (C#)</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/">示例：.NET Core WinForms 格式设置实用工具 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider? provider, System.Globalization.DateTimeStyles styles, out DateTime result);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的区域性特定格式信息和格式设置样式，将日期和时间的范围表示形式转换为其等效的 <see cref="T:System.DateTime" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的区域性特定格式信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法分析可包含日期、时间和时区信息的字符串。 它与 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法类似，不同的是， <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 如果转换失败，方法不会引发异常。  
  
 此方法尝试忽略无法识别的数据，并完全进行分析 `s` 。 如果 `s` 包含时间而不包含日期，则默认情况下该方法将替换当前日期，或者，如果 `styles` 包含 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> 标志，则将替换为 `DateTime.Date.MinValue` 。 如果 `s` 包含日期但没有时间，则使用12:00 午夜作为默认时间。 如果存在日期但其年份组成部分只包含两个数字，则会根据属性的值将其转换为 `provider` 参数的当前日历中的年份 <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> 。 中的所有前导、内部或尾随空格字符 `s` 都将被忽略。 日期和时间可以用一对前导和尾随数字符号字符括起来 ( "#"、U + 0023) ，并且可以使用一个或多个 NULL 字符 (U + 0000) 来 trailed。  
  
 日期和时间元素的特定有效格式以及日期和时间中使用的名称和符号由 `provider` 参数定义，该参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，它表示在参数中使用其格式设置的区域性 `s` 。 <xref:System.Globalization.DateTimeFormatInfo>由属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 定义中使用的格式 `s` 。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义在中使用的格式 `s` 。  
  
-   一个自定义 <xref:System.IFormatProvider> 实现。 其 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 方法返回 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义中使用的格式 `s` 。  
  
 如果 `provider` 为 `null`，则使用当前区域性。  
  
 如果 `s` 是当前日历中闰年的闰日字符串表示形式，则该方法将 `s` 成功分析。 如果 `s` 是当前日历中非闰年的闰年的字符串表示形式 `provider` ，则分析操作将失败，并且该方法将返回 `false` 。  
  
 `styles`参数定义经过分析的字符串的精确解释，以及分析操作应该如何处理它。 它可以是一个或多个枚举成员 <xref:System.Globalization.DateTimeStyles> ，如下表中所述。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `s` 并根据需要将其转换为 UTC。 如果 `s` 包括时区偏移量，或者如果 `s` 不包含任何时区信息，但包含 `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 标志，则方法会分析该字符串，调用 <xref:System.DateTime.ToUniversalTime%2A> 将返回值转换 <xref:System.DateTime> 为 UTC，并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 指示它表示 UTC，或者如果 `s` 不包含时区信息，但 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，则方法分析字符串，不对返回的值执行时区转换 <xref:System.DateTime> ，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 在所有其他情况下，该标志不起作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|虽然有效，但会忽略此值。 的日期和时间元素中允许有内部空格 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|虽然有效，但会忽略此值。 的日期和时间元素中允许使用前导空格 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|虽然有效，但会忽略此值。 的日期和时间元素中允许尾随空格 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定 `s` 可能包含前导空格和尾随空格。 这是默认行为。 不能通过提供限制性更强的 <xref:System.Globalization.DateTimeStyles> 枚举值（如）来重写它 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定如果 `s` 缺少任何时区信息，则假定它表示本地时间。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 将设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定如果 `s` 缺少任何时区信息，则假定它表示 UTC。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则方法会将返回的 <xref:System.DateTime> 值从 UTC 转换为本地时间，并将其 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.None>|虽然有效，但会忽略此值。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|对于包含时区信息的字符串，尝试防止日期和时间字符串转换为 <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性设置为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 通常，此类字符串是通过 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 使用 "o"、"r" 或 "u" 标准格式说明符调用方法创建的。|  
  
 如果 `s` 不包含时区信息，该 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法将返回 <xref:System.DateTime> 属性为的值， <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 除非标志为其他值 `styles` 。 如果 `s` 包括时区或时区偏移量信息，该 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法将执行任何所需的时间转换，并返回以下内容之一：  
  
-   一个 <xref:System.DateTime> 值，其日期和时间反映本地时间，其 <xref:System.DateTime.Kind%2A> 属性为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
-   或者，如果 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> 标志，则为 <xref:System.DateTime> 其日期和时间反映 UTC 的值，并且其 <xref:System.DateTime.Kind%2A> 属性为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。  
  
 此行为可以通过使用标志进行重写 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 。  
  
## <a name="parsing-custom-cultures"></a>分析自定义区域性  
 如果分析为自定义区域性生成的日期和时间字符串，请使用 <xref:System.DateTime.TryParseExact%2A> 方法而不是 <xref:System.DateTime.TryParse%2A> 方法来提高分析操作将成功的概率。 自定义区域性日期和时间字符串可能比较复杂且难以分析。 此 <xref:System.DateTime.TryParse%2A> 方法尝试使用几个隐式分析模式分析字符串，所有这些模式都可能失败。 与此相反， <xref:System.DateTime.TryParseExact%2A> 方法要求您显式指定一个或多个可能成功的准确分析模式。  
  
 有关自定义区域性的详细信息，请参阅 <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> 类。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法。  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" /> 是一个非特定区域性，并且不能在分析操作中使用。</exception>
        <block subset="none" type="usage"><para>格式设置受当前对象的属性影响 <see cref="T:System.Globalization.DateTimeFormatInfo" /> ，该对象由 <paramref name="provider" /> 参数提供。 <see cref="Overload:System.DateTime.TryParse" /> <see langword="False" /> 如果当前 <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> 和 <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> 属性设置为相同的值，则此方法可能会意外失败，并返回。</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider? provider, System.Globalization.DateTimeStyles style, out DateTime result);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">一个范围，包含表示要转换的日期和时间的字符。</param>
        <param name="format">所需的 <paramref name="s" /> 格式。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="style">一个或多个枚举值的按位组合，指示 <paramref name="s" /> 允许使用的格式。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="format" /> 参数为 <see langword="null" />，或者为空字符串，或者未包含对应于 <paramref name="format" /> 中指定的模式的日期和时间，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定范围表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt;? s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="s">一个范围，包含要分析的字符串。</param>
        <param name="formats"><paramref name="s" /> 的允许格式的数组。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="style">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，为 <see cref="F:System.String.Empty" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>将日期和时间的指定字符范围转换为其等效的 <see cref="T:System.DateTime" />，并返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="format">所需的 <paramref name="s" /> 格式。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
        <param name="style">一个或多个枚举值的按位组合，指示 <paramref name="s" /> 允许使用的格式。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="format" /> 参数为 <see langword="null" />，或者为空字符串，或者未包含对应于 <paramref name="format" /> 中指定的模式的日期和时间，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法分析日期的字符串表示形式，该日期必须采用参数定义的格式 `format` 。 它与 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法类似，不同的是， <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 如果转换失败，方法不会引发异常。  
  
 `s`参数包含要分析的日期和时间，其格式必须为参数所定义的格式 `format` 。 如果中存在日期、时间和时区元素 `s` ，则它们也必须按指定的顺序出现 `format` 。 如果 `format` 定义的日期没有时间元素并且分析操作成功，则生成的 <xref:System.DateTime> 值的时间为午夜 (00:00:00) 。 如果 `format` 定义一个没有日期元素的时间并且分析操作成功，则 <xref:System.DateTime> 默认情况下生成的值具有日期 `DateTime.Now.Date` ，或者它的日期为（ `DateTime.MinValue.Date` 如果 `styles` 包含标志） <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 。 `style`参数确定 `s` 参数是否可以包含前导空白字符和尾随空格字符。  
  
 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 此行为可以通过使用标志来更改 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> ，该标志返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ，或使用 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 和 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 标志，后者返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果包含时区信息，则时间转换为本地时间，如有必要， <xref:System.DateTime.Kind%2A> 返回对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此行为可以通过使用 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 标志来更改， (UTC) 转换为本地时间，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。  
  
 `format`参数包含对应于所需的参数格式的模式 `s` 。 参数中的模式 `format` 包括 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 表中的一个或多个自定义格式说明符，或从 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 表中标识预定义模式的单个标准格式说明符。  
  
 如果在自定义格式模式下不使用日期或时间分隔符，请对参数使用固定区域性， `provider` 并为每个自定义格式说明符使用最宽形式。 例如，如果想要在模式中指定小时数，请指定更宽的形式 "HH"，而不是 "H"。  
  
> [!NOTE]
>  `s`您可以调用 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法并指定多个允许的格式，而不是要求符合一种格式以便分析操作成功。 这使得分析操作更有可能成功。  
  
 特定的日期和时间符号和字符串 (如中所用的特定语言) 的星期名称 `s` ，则该参数是由参数定义的 `provider` ， `s` 如果 `format` 是标准格式说明符字符串，则是的精确格式。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，表示用于解释的区域性 `s` 。 <xref:System.Globalization.DateTimeFormatInfo>其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 定义中的符号和格式设置 `s` 。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个自定义 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象或对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.CultureInfo> 使用对应于当前区域性的对象。  
  
 `styles`参数包含一个或多个枚举成员， <xref:System.Globalization.DateTimeStyles> 这些成员确定是否可以在中显示未定义的，以及是否 `format` 能够 `s` 控制分析操作的确切行为。 下表描述了枚举的每个成员如何 <xref:System.Globalization.DateTimeStyles> 影响该方法的操作 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `s` 并根据需要将其转换为 UTC。 如果 `s` 包括时区偏移量，或者如果 `s` 不包含任何时区信息，但包含 `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 标志，则方法会分析该字符串，调用 <xref:System.DateTime.ToUniversalTime%2A> 将返回值转换 <xref:System.DateTime> 为 UTC，并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 指示它表示 UTC，或者如果 `s` 不包含时区信息，但 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，则方法分析字符串，不对返回的值执行时区转换 <xref:System.DateTime> ，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 在所有其他情况下，该标志不起作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定不由定义的空白 `format` 可以出现在任何单个日期或时间元素之间。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定不由定义的空白 `format` 可出现在的开头 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定的 `format` 末尾不能出现的空白 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定 `s` 可能包含未定义的前导空格、内部空格和尾随空格 `format` 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定如果 `s` 缺少任何时区信息，则假定它表示本地时间。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 将设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定如果 `s` 缺少任何时区信息，则假定它表示 UTC。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则方法会将返回的 <xref:System.DateTime> 值从 UTC 转换为本地时间，并将其 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果 `s` 包含时间而不包含日期信息，则返回值的日期设置为 `DateTime.MinValue.Date` 。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`使用默认值分析参数。 不允许使用以外的任何空白区域 `format` 。 如果 `s` 缺少日期部分，则返回值的日期 <xref:System.DateTime> 设置为1/1/0001。 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 如果中存在时区信息，则 `s` 该时间将转换为本地时间，而 <xref:System.DateTime.Kind%2A> 返回对象的属性将 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|对于包含时区信息的字符串，尝试防止转换为 <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性设置为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此标志主要用于防止 UTC 时间转换为本地时间。|  
  
   
  
## Examples  
 下面的示例演示 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法。 请注意，当参数等于时无法成功分析字符串 "5/01/2009 8:30 AM"， `styles` <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> 因为不允许使用前导空格 `format` 。 此外，不能使用 `format` "MM/dd/yyyyhh： MM" 成功分析字符串 "5/01/2009 09:00"，因为日期字符串未在月份号之前带有前导零，如 `format` 需要。  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
        <block subset="none" type="usage"><para>在中 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ， <see cref="Overload:System.DateTime.TryParseExact" /> <see langword="false" /> 如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则方法将返回。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">包含要转换的日期和时间的字符串。</param>
        <param name="formats"><paramref name="s" /> 的允许格式的数组。</param>
        <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
        <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
        <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="formats" /> 为 <see langword="null" />，<paramref name="s" /> 或 <paramref name="formats" /> 的某个元素为空字符串， 或者 <paramref name="s" /> 的格式与 <paramref name="formats" /> 中的格式模式所指定的格式都不完全匹配，则转换失败。 此参数未经初始化即被传递。</param>
        <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
        <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>方法分析与分配给参数的模式之一匹配的日期的字符串表示形式 `formats` 。 它与方法类似 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> ，不同的是， <xref:System.DateTime.TryParseExact%2A> 如果转换失败，方法不会引发异常。  
  
 `s`参数包含要分析的日期和时间。 如果 `s` 参数只包含时间而不包含日期，则使用当前日期，除非 `style` 参数包含 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> 标志，在这种情况下，将使用默认日期 (`DateTime.Date.MinValue`) 。 如果 `s` 参数仅包含日期而不包含时间，则使用 (00:00:00) 午夜。 `style`参数还可确定参数是否 `s` 可以包含前导、内部或尾随空格字符，而不能包含中的某个格式字符串所允许的空白字符 `formats` 。  
  
 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 此行为可以通过使用标志来更改 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> ，该标志返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ，或使用 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 和 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 标志，后者返回 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> 属性为的值 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果包含时区信息，则时间转换为本地时间，如有必要， <xref:System.DateTime.Kind%2A> 返回对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此行为可以通过使用 <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> 标志来更改， (UTC) 转换为本地时间，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。  
  
 `formats`参数包含模式的数组，其中一个模式 `s` 必须完全匹配（如果分析操作成功）。 参数中的模式 `formats` 包含 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 表中的一个或多个自定义格式说明符，或从 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 表中标识预定义模式的单个标准格式说明符。  
  
 如果在自定义格式模式下不使用日期或时间分隔符，请对参数使用固定区域性， `provider` 并为每个自定义格式说明符使用最宽形式。 例如，如果想要在模式中指定小时数，请指定更宽的形式 "HH"，而不是 "H"。  
  
 特定的日期和时间符号和字符串 (如中所用的特定语言) 的星期名称 `s` ，则该参数是由参数定义的 `provider` ， `s` 如果 `format` 是标准格式说明符字符串，则是的精确格式。 `provider`参数可以是以下任一项：  
  
-   一个 <xref:System.Globalization.CultureInfo> 对象，表示用于解释的区域性 `s` 。 <xref:System.Globalization.DateTimeFormatInfo>其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 定义中的符号和格式设置 `s` 。  
  
-   一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义日期和时间数据的格式。  
  
-   一个自定义 <xref:System.IFormatProvider> 实现，其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的对象或对象。  
  
 如果 `provider` 为 `null` ，则 <xref:System.Globalization.CultureInfo> 使用对应于当前区域性的对象。  
  
 `styles`参数包含一个或多个枚举成员， <xref:System.Globalization.DateTimeStyles> 这些成员确定是否可以在中显示未定义的，以及是否 `format` 能够 `s` 控制分析操作的确切行为。 下表描述了枚举的每个成员如何 <xref:System.Globalization.DateTimeStyles> 影响该方法的操作 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> 。  
  
|DateTimeStyles 成员|描述|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|分析 `s` 并根据需要将其转换为 UTC。 如果 `s` 包括时区偏移量，或者如果 `s` 不包含任何时区信息，但包含 `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> 标志，则方法会分析该字符串，调用 <xref:System.DateTime.ToUniversalTime%2A> 将返回值转换 <xref:System.DateTime> 为 UTC，并将属性设置 <xref:System.DateTime.Kind%2A> 为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 如果 `s` 指示它表示 UTC，或者如果 `s` 不包含时区信息，但 `styles` 包含 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> 标志，则方法分析字符串，不对返回的值执行时区转换 <xref:System.DateTime> ，并将 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。 在所有其他情况下，该标志不起作用。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|指定不由定义的空白 `format` 可以出现在任何单个日期或时间元素之间。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|指定不由定义的空白 `format` 可出现在的开头 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|指定的 `format` 末尾不能出现的空白 `s` 。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定 `s` 可能包含未定义的前导空格、内部空格和尾随空格 `format` 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定如果 `s` 缺少任何时区信息，则假定它表示本地时间。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则 <xref:System.DateTime.Kind%2A> 返回值的属性 <xref:System.DateTime> 将设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定如果 `s` 缺少任何时区信息，则假定它表示 UTC。 除非 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> 存在标志，否则方法会将返回的 <xref:System.DateTime> 值从 UTC 转换为本地时间，并将其 <xref:System.DateTime.Kind%2A> 属性设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|如果 `s` 包含时间而不包含日期信息，则返回值的日期设置为 `DateTime.MinValue.Date` 。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`使用默认值分析参数。 不允许使用以外的任何空白区域 `format` 。 如果 `s` 缺少日期部分，则返回值的日期 <xref:System.DateTime> 设置为1/1/0001。 如果 `s` 不包含时区信息，则 <xref:System.DateTime.Kind%2A> 返回的对象的属性 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> 。 如果中存在时区信息，则 `s` 该时间将转换为本地时间，而 <xref:System.DateTime.Kind%2A> 返回对象的属性将 <xref:System.DateTime> 设置为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|对于包含时区信息的字符串，尝试防止转换为 <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性设置为的值 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。 此标志主要用于防止 UTC 时间转换为本地时间。|  
  
   
  
## Examples  
 下面的示例使用 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 方法来确保可以成功分析多种可能格式的字符串。  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
  
- 或 - 
 <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
        <block subset="none" type="usage"><para>在中 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ， <see cref="Overload:System.DateTime.TryParseExact" /> <see langword="false" /> 如果要分析的字符串包含不在协议中的小时组件和 AM/PM 指示符，则方法将返回。 在 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 和早期版本中，将忽略 AM/PM 指示符。</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="/dotnet/standard/base-types/parsing-datetime">在 .NET Framework 中分析日期和时间字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此常量的值等效于公历 1970 年 1 月 1 日的 00:00:00.0000000 UTC。 <see cref="F:System.DateTime.UnixEpoch" /> 定义 Unix 时间等于 0 的时间点。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为协调通用时间 (UTC)。</summary>
        <value>其值为当前 UTC 日期和时间的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的解决方法取决于系统计时器，它依赖于基础操作系统。 它通常介于0.5 到15毫秒之间。

 从 .NET Framework 版本2.0 开始，返回值为， <xref:System.DateTime> 其 <xref:System.DateTime.Kind%2A> 属性返回 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 。

 使用的替代方法 <xref:System.DateTime.UtcNow%2A> 是 <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType> 。 尽管前者表示日期和时间值是协调世界时 (UTC) 通过分配 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> 给其 <xref:System.DateTime.Kind%2A> 属性，后者将 utc 时间的偏移量的日期和时间值指定 (等于 <xref:System.TimeSpan.Zero?displayProperty=nameWithType>) 。
  
## Examples  
 下面的示例使用 <xref:System.DateTime.SpecifyKind%2A> 方法演示 <xref:System.DateTime.Kind%2A> 属性如何影响 <xref:System.DateTime.ToLocalTime%2A> 和 <xref:System.DateTime.ToUniversalTime%2A> 转换方法。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此实例所表示日期的年份部分。</summary>
        <value>年份（介于 1 和 9999 之间）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A>属性以公历返回当前实例的年份。 它不返回使用当前区域性的默认日历的年份。 若要使用特定日历检索年份，可以调用该日历的 `GetYear` 方法，如以下代码所示。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb" id="Snippet1":::
  
   
  
## Examples  
 下面的示例演示了 <xref:System.DateTime.Year%2A> 属性。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>
