<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2da712de0059ea8559946e34d91dca4832ac15c2" /><Meta Name="ms.sourcegitcommit" Value="f828282420515ef705e09bbdb6c22116df98b5e3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="83513916" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11,in T12,in T13,in T14&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`14&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, - T9, - T10, - T11, - T12, - T13, - T14&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`14" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8, In T9, In T10, In T11, In T12, In T13, In T14)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, arg13 As T13, arg14 As T14)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 * 'T9 * 'T10 * 'T11 * 'T12 * 'T13 * 'T14 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T9">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T10">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T11">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T12">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T13">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T14">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
    <Parameter Name="arg9" Type="T9" />
    <Parameter Name="arg10" Type="T10" />
    <Parameter Name="arg11" Type="T11" />
    <Parameter Name="arg12" Type="T12" />
    <Parameter Name="arg13" Type="T13" />
    <Parameter Name="arg14" Type="T14" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
    <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
    <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
    <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
    <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
    <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
    <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
    <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
    <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
    <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
    <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
    <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
    <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
    <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
    <param name="arg1">此委托封装的方法的第一个参数。</param>
    <param name="arg2">此委托封装的方法的第二个参数。</param>
    <param name="arg3">此委托封装的方法的第三个参数。</param>
    <param name="arg4">此委托封装的方法的第四个参数。</param>
    <param name="arg5">此委托封装的方法的第五个参数。</param>
    <param name="arg6">此委托封装的方法的第六个参数。</param>
    <param name="arg7">此委托封装的方法的第七个参数。</param>
    <param name="arg8">此委托封装的方法的第八个参数。</param>
    <param name="arg9">此委托封装的方法的第九个参数。</param>
    <param name="arg10">此委托封装的方法的第十个参数。</param>
    <param name="arg11">此委托封装的方法的第十一个参数。</param>
    <param name="arg12">此委托封装的方法的第十二个参数。</param>
    <param name="arg13">此委托封装的方法的第十三个参数。</param>
    <param name="arg14">此委托封装的方法的第十四个参数。</param>
    <summary>封装一个方法，该方法具有 14 个参数并且不返回值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用 <xref:System.Action%6014> 委托以参数形式传递方法，而无需显式声明自定义委托。 封装的方法必须对应于由此委托定义的方法签名。 这意味着，封装的方法必须具有14个通过值传递给它的参数，并且不能返回值。 （在 c # 中，方法必须返回 `void` 。 在 Visual Basic 中，它必须由 `Sub` .。。`End Sub` construct。 它也可以是返回忽略的值的方法。）通常，这种方法用于执行操作。  
  
> [!NOTE]
>  若要引用具有14个参数并返回值的方法，请改用泛型 <xref:System.Func%6015> 委托。  
  
 还可以将 <xref:System.Action%6014> 委托与匿名方法和 lambda 表达式一起使用。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`15" />
  </Docs>
</Type>
