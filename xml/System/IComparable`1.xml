<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a47a0d7bfd72c8a3bba3ffc664a616b630a536ae" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89844149" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <TypeSignature Language="C#" Value="public interface IComparable&lt;T&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;T&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="9fc5f-101">要比较的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-101">The type of object to compare.</span></span></typeparam>
    <summary><span data-ttu-id="9fc5f-102">定义由值类型或类实现的通用比较方法，旨在创建特定于类型的比较方法以对实例进行排序。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-102">Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fc5f-103">此接口由其值可以排序或排序的类型实现，并提供强类型的比较方法以对泛型集合对象的成员进行排序。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-103">This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="9fc5f-104">例如，一个数字可以大于第二个数字，一个字符串可以在另一个字符串之前以字母顺序出现。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-104">For example, one number can be larger than a second number, and one string can appear in alphabetical order before another.</span></span> <span data-ttu-id="9fc5f-105">它要求实现类型定义一个方法，该方法 <xref:System.IComparable%601.CompareTo%28%600%29> 指示当前实例在排序顺序中的位置是在同一类型的第二个对象之前、之后还是与其相同。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-105">It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type.</span></span> <span data-ttu-id="9fc5f-106">通常，不会直接从开发人员代码中调用方法。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-106">Typically, the method is not called directly from developer code.</span></span> <span data-ttu-id="9fc5f-107">相反，它由和等方法自动调用 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> <xref:System.Collections.Generic.SortedList%602.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-107">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="9fc5f-108">通常，提供实现的类型 <xref:System.IComparable%601> 还实现 <xref:System.IEquatable%601> 接口。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-108">Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="9fc5f-109"><xref:System.IEquatable%601>接口定义 <xref:System.IEquatable%601.Equals%2A> 方法，该方法确定实现类型的实例的相等性。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-109">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="9fc5f-110">方法的实现 <xref:System.IComparable%601.CompareTo%28%600%29> 必须返回 <xref:System.Int32> 具有以下三个值之一的，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-110">The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.</span></span>  
  
|<span data-ttu-id="9fc5f-111">“值”</span><span class="sxs-lookup"><span data-stu-id="9fc5f-111">Value</span></span>|<span data-ttu-id="9fc5f-112">含义</span><span class="sxs-lookup"><span data-stu-id="9fc5f-112">Meaning</span></span>|  
|-----------|-------------|  
|<span data-ttu-id="9fc5f-113">小于零</span><span class="sxs-lookup"><span data-stu-id="9fc5f-113">Less than zero</span></span>|<span data-ttu-id="9fc5f-114">此对象 <xref:System.IComparable%601.CompareTo%2A> 在排序顺序中位于方法所指定的对象之前。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-114">This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.</span></span>|  
|<span data-ttu-id="9fc5f-115">零</span><span class="sxs-lookup"><span data-stu-id="9fc5f-115">Zero</span></span>|<span data-ttu-id="9fc5f-116">此当前实例在排序顺序中与方法参数指定的对象出现在同一位置 <xref:System.IComparable%601.CompareTo%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-116">This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.</span></span>|  
|<span data-ttu-id="9fc5f-117">大于零</span><span class="sxs-lookup"><span data-stu-id="9fc5f-117">Greater than zero</span></span>|<span data-ttu-id="9fc5f-118">此当前实例 <xref:System.IComparable%601.CompareTo%2A> 位于排序顺序中由方法自变量指定的对象之后。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-118">This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.</span></span>|  
  
 <span data-ttu-id="9fc5f-119">所有数值类型 (如 <xref:System.Int32> 、和 <xref:System.Double>) 实现 <xref:System.IComparable%601> <xref:System.String> <xref:System.Char> <xref:System.DateTime> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-119">All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>.</span></span> <span data-ttu-id="9fc5f-120">自定义类型还应提供自己的实现 <xref:System.IComparable%601> 来启用对象实例的排序或排序。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-120">Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fc5f-121">下面的示例演示了 <xref:System.IComparable%601> 一个简单对象的实现 `Temperature` 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-121">The following example illustrates the implementation of <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="9fc5f-122">该示例创建一个 <xref:System.Collections.Generic.SortedList%602> 具有对象键的字符串集合 `Temperature` ，并将多对的温度和字符串按顺序添加到列表中。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-122">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="9fc5f-123">在对方法的调用中 <xref:System.Collections.Generic.SortedList%602.Add%2A> ， <xref:System.Collections.Generic.SortedList%602> 集合使用 <xref:System.IComparable%601> 实现对列表条目进行排序，然后按温度的增加顺序显示这些条目。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-123">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="9fc5f-124">将接口的类型参数替换 <see cref="T:System.IComparable`1" /> 为实现此接口的类型。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-124">Replace the type parameter of the <see cref="T:System.IComparable`1" /> interface with the type that is implementing this interface.</span></span>  
  
<span data-ttu-id="9fc5f-125">如果实现 <see cref="T:System.IComparable`1" /> ，则应重载 <see langword="op_GreaterThan" /> 、 <see langword="op_GreaterThanOrEqual" /> 、 <see langword="op_LessThan" /> 和 <see langword="op_LessThanOrEqual" /> 运算符，以返回与一致的值 <see cref="M:System.IComparable`1.CompareTo(`0)" /> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-125">If you implement <see cref="T:System.IComparable`1" />, you should overload the <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, and <see langword="op_LessThanOrEqual" /> operators to return values that are consistent with <see cref="M:System.IComparable`1.CompareTo(`0)" />.</span></span> <span data-ttu-id="9fc5f-126">此外，还应实现 <see cref="T:System.IEquatable`1" /> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-126">In addition, you should also implement <see cref="T:System.IEquatable`1" />.</span></span> <span data-ttu-id="9fc5f-127">有关完整信息，请参阅一 <see cref="T:System.IEquatable`1" /> 文。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-127">See the <see cref="T:System.IEquatable`1" /> article for complete information.</span></span></para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="9fc5f-128">与此实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-128">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="9fc5f-129">将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-129">Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</span></span></summary>
        <returns><span data-ttu-id="9fc5f-130">一个值，指示要比较的对象的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-130">A value that indicates the relative order of the objects being compared.</span></span> <span data-ttu-id="9fc5f-131">返回值的含义如下：</span><span class="sxs-lookup"><span data-stu-id="9fc5f-131">The return value has these meanings:</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="9fc5f-132">“值”</span><span class="sxs-lookup"><span data-stu-id="9fc5f-132">Value</span></span> 
 </term><description> <span data-ttu-id="9fc5f-133">含义</span><span class="sxs-lookup"><span data-stu-id="9fc5f-133">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="9fc5f-134">小于零</span><span class="sxs-lookup"><span data-stu-id="9fc5f-134">Less than zero</span></span> 
 </term><description> <span data-ttu-id="9fc5f-135">此实例在排序顺序中位于 <paramref name="other" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-135">This instance precedes <paramref name="other" /> in the sort order.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="9fc5f-136">零</span><span class="sxs-lookup"><span data-stu-id="9fc5f-136">Zero</span></span> 
 </term><description> <span data-ttu-id="9fc5f-137">此实例在排序顺序中的位置与 <paramref name="other" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-137">This instance occurs in the same position in the sort order as <paramref name="other" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="9fc5f-138">大于零</span><span class="sxs-lookup"><span data-stu-id="9fc5f-138">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="9fc5f-139">此实例在排序顺序中位于 <paramref name="other" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-139">This instance follows <paramref name="other" /> in the sort order.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fc5f-140"><xref:System.IComparable%601.CompareTo%2A> 提供强类型的比较方法以对泛型集合对象的成员进行排序。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-140"><xref:System.IComparable%601.CompareTo%2A> provides a strongly typed comparison method for ordering members of a generic collection object.</span></span> <span data-ttu-id="9fc5f-141">因此，通常不会直接从开发人员代码中调用它。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-141">Because of this, it is usually not called directly from developer code.</span></span> <span data-ttu-id="9fc5f-142">相反，它由和等方法自动调用 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> <xref:System.Collections.Generic.SortedList%602.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-142">Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.</span></span>  
  
 <span data-ttu-id="9fc5f-143">此方法只是定义，必须由特定的类或值类型实现才能使其生效。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-143">This method is only a definition and must be implemented by a specific class or value type to have effect.</span></span> <span data-ttu-id="9fc5f-144">"返回值" 部分中指定的比较的含义 ( "前面"、"与" 的位置相同，并且) 依赖于特定实现。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-144">The meaning of the comparisons specified in the Return Values section ("precedes", "occurs in the same position as", and "follows) depends on the particular implementation.</span></span>  
  
 <span data-ttu-id="9fc5f-145">按照定义，任何对象比较大于 `null` ，两个 null 引用的比较结果相等。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-145">By definition, any object compares greater than `null`, and two null references compare equal to each other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fc5f-146">下面的代码示例演示了 <xref:System.IComparable%601> 一个简单对象的实现 `Temperature` 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-146">The following code example illustrates the implementation of <xref:System.IComparable%601> for a simple `Temperature` object.</span></span> <span data-ttu-id="9fc5f-147">该示例创建一个 <xref:System.Collections.Generic.SortedList%602> 具有对象键的字符串集合 `Temperature` ，并将多对的温度和字符串按顺序添加到列表中。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-147">The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence.</span></span> <span data-ttu-id="9fc5f-148">在对方法的调用中 <xref:System.Collections.Generic.SortedList%602.Add%2A> ， <xref:System.Collections.Generic.SortedList%602> 集合使用 <xref:System.IComparable%601> 实现对列表条目进行排序，然后按温度的增加顺序显示这些条目。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-148">In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.</span></span>  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9fc5f-149">对于对象 A、B 和 C，必须满足以下条件：</span><span class="sxs-lookup"><span data-stu-id="9fc5f-149">For objects A, B, and C, the following must be true:</span></span> 
 <span data-ttu-id="9fc5f-150"><c>CompareTo () </c> 需要返回零。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-150"><c>A.CompareTo(A)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="9fc5f-151">如果 <c>CompareTo (b) </c> 返回零，则 <c>CompareTo () </c> 需要返回零。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-151">If <c>A.CompareTo(B)</c> returns zero, then <c>B.CompareTo(A)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="9fc5f-152">如果 <c>CompareTo (B) </c> 返回零， <c>CompareTo (C) </c> 返回零，则要求 <c>CompareTo (C) </c> 返回零。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-152">If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero, then <c>A.CompareTo(C)</c> is required to return zero.</span></span>  
  
<span data-ttu-id="9fc5f-153">如果 <c>. CompareTo (B) </c> 返回非零值，则 <c>CompareTo () </c> 需要返回相反符号的值。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-153">If <c>A.CompareTo(B)</c> returns a value other than zero, then <c>B.CompareTo(A)</c> is required to return a value of the opposite sign.</span></span>  
  
<span data-ttu-id="9fc5f-154">如果 <c>CompareTo (B) </c> 返回一个 <paramref name="x" /> 不等于零的值，而 <c>CompareTo (C) </c> 返回与 <paramref name="y" /> 相同的符号值 <paramref name="x" /> ，则需要 <c>CompareTo (C) </c> 返回与和相同的符号值 <paramref name="x" /> <paramref name="y" /> 。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-154">If <c>A.CompareTo(B)</c> returns a value <paramref name="x" /> that is not equal to zero, and <c>B.CompareTo(C)</c> returns a value <paramref name="y" /> of the same sign as <paramref name="x" />, then <c>A.CompareTo(C)</c> is required to return a value of the same sign as <paramref name="x" /> and <paramref name="y" />.</span></span></para></block>
        <block subset="none" type="usage"><para><span data-ttu-id="9fc5f-155">使用 <see cref="M:System.IComparable`1.CompareTo(`0)" /> 方法来确定类的实例的排序。</span><span class="sxs-lookup"><span data-stu-id="9fc5f-155">Use the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method to determine the ordering of instances of a class.</span></span></para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>
