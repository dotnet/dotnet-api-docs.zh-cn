<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eee9a72e30723e00830c34f15225108389a5b6ec" /><Meta Name="ms.sourcegitcommit" Value="7ce0ce143eab82a3aca5962d37ca819efb045f1f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/08/2020" /><Meta Name="ms.locfileid" Value="91845079" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <TypeSignature Language="C#" Value="public interface IComparable&lt;T&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;T&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <summary>定义由值类型或类实现的通用比较方法，旨在创建特定于类型的比较方法以对实例进行排序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口由其值可以排序或排序的类型实现，并提供强类型的比较方法以对泛型集合对象的成员进行排序。 例如，一个数字可以大于第二个数字，一个字符串可以在另一个字符串之前以字母顺序出现。 它要求实现类型定义一个方法，该方法 <xref:System.IComparable%601.CompareTo%28%600%29> 指示当前实例在排序顺序中的位置是在同一类型的第二个对象之前、之后还是与其相同。 通常，不会直接从开发人员代码中调用方法。 相反，它由和等方法自动调用 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> <xref:System.Collections.Generic.SortedList%602.Add%2A> 。  
  
 通常，提供实现的类型 <xref:System.IComparable%601> 还实现 <xref:System.IEquatable%601> 接口。 <xref:System.IEquatable%601>接口定义 <xref:System.IEquatable%601.Equals%2A> 方法，该方法确定实现类型的实例的相等性。  
  
 方法的实现 <xref:System.IComparable%601.CompareTo%28%600%29> 必须返回 <xref:System.Int32> 具有以下三个值之一的，如下表所示。  
  
|“值”|含义|  
|-----------|-------------|  
|小于零|此对象 <xref:System.IComparable%601.CompareTo%2A> 在排序顺序中位于方法所指定的对象之前。|  
|零|此当前实例在排序顺序中与方法参数指定的对象出现在同一位置 <xref:System.IComparable%601.CompareTo%2A> 。|  
|大于零|此当前实例 <xref:System.IComparable%601.CompareTo%2A> 位于排序顺序中由方法自变量指定的对象之后。|  
  
 所有数值类型 (如 <xref:System.Int32> 、和 <xref:System.Double>) 实现 <xref:System.IComparable%601> <xref:System.String> <xref:System.Char> <xref:System.DateTime> 。 自定义类型还应提供自己的实现 <xref:System.IComparable%601> 来启用对象实例的排序或排序。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.IComparable%601> 一个简单对象的实现 `Temperature` 。 该示例创建一个 <xref:System.Collections.Generic.SortedList%602> 具有对象键的字符串集合 `Temperature` ，并将多对的温度和字符串按顺序添加到列表中。 在对方法的调用中 <xref:System.Collections.Generic.SortedList%602.Add%2A> ， <xref:System.Collections.Generic.SortedList%602> 集合使用 <xref:System.IComparable%601> 实现对列表条目进行排序，然后按温度的增加顺序显示这些条目。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb" id="Snippet1":::

 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>将接口的类型参数替换 <see cref="T:System.IComparable`1" /> 为实现此接口的类型。  
  
如果实现 <see cref="T:System.IComparable`1" /> ，则应重载 <see langword="op_GreaterThan" /> 、 <see langword="op_GreaterThanOrEqual" /> 、 <see langword="op_LessThan" /> 和 <see langword="op_LessThanOrEqual" /> 运算符，以返回与一致的值 <see cref="M:System.IComparable`1.CompareTo(`0)" /> 。 此外，还应实现 <see cref="T:System.IEquatable`1" /> 。 有关完整信息，请参阅一 <see cref="T:System.IEquatable`1" /> 文。</para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">与此实例进行比较的对象。</param>
        <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
        <returns>一个值，指示要比较的对象的相对顺序。 返回值的含义如下： 
 <list type="table"><listheader><term> “值” 
 </term><description> 含义 
 </description></listheader><item><term> 小于零 
 </term><description> 此实例在排序顺序中位于 <paramref name="other" /> 之前。  
  
 </description></item><item><term> 零 
 </term><description> 此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  
  
 </description></item><item><term> 大于零 
 </term><description> 此实例在排序顺序中位于 <paramref name="other" /> 之后。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> 提供强类型的比较方法以对泛型集合对象的成员进行排序。 因此，通常不会直接从开发人员代码中调用它。 相反，它由和等方法自动调用 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> <xref:System.Collections.Generic.SortedList%602.Add%2A> 。  
  
 此方法只是定义，必须由特定的类或值类型实现才能使其生效。 "返回值" 部分中指定的比较的含义 ( "前面"、"与" 的位置相同，并且) 依赖于特定实现。  
  
 按照定义，任何对象比较大于 `null` ，两个 null 引用的比较结果相等。  
  
   
  
## Examples  
 下面的代码示例演示了 <xref:System.IComparable%601> 一个简单对象的实现 `Temperature` 。 该示例创建一个 <xref:System.Collections.Generic.SortedList%602> 具有对象键的字符串集合 `Temperature` ，并将多对的温度和字符串按顺序添加到列表中。 在对方法的调用中 <xref:System.Collections.Generic.SortedList%602.Add%2A> ， <xref:System.Collections.Generic.SortedList%602> 集合使用 <xref:System.IComparable%601> 实现对列表条目进行排序，然后按温度的增加顺序显示这些条目。  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>对于对象 A、B 和 C，必须满足以下条件： 
 <c>CompareTo () </c> 需要返回零。  
  
如果 <c>CompareTo (b) </c> 返回零，则 <c>CompareTo () </c> 需要返回零。  
  
如果 <c>CompareTo (B) </c> 返回零， <c>CompareTo (C) </c> 返回零，则要求 <c>CompareTo (C) </c> 返回零。  
  
如果 <c>. CompareTo (B) </c> 返回非零值，则 <c>CompareTo () </c> 需要返回相反符号的值。  
  
如果 <c>CompareTo (B) </c> 返回一个 <paramref name="x" /> 不等于零的值，而 <c>CompareTo (C) </c> 返回与 <paramref name="y" /> 相同的符号值 <paramref name="x" /> ，则需要 <c>CompareTo (C) </c> 返回与和相同的符号值 <paramref name="x" /> <paramref name="y" /> 。</para></block>
        <block subset="none" type="usage"><para>使用 <see cref="M:System.IComparable`1.CompareTo(`0)" /> 方法来确定类的实例的排序。</para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>
