<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c541f8567eb3b6a8e2d89add42404199fdb2e9c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89721702" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种机制，用于检索对象以控制格式化。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider>接口提供一个对象，该对象提供格式设置信息以进行格式设置和分析操作。 格式设置操作将类型的值转换为该值的字符串表示形式。 典型的格式设置方法是 `ToString` 类型的方法，以及 <xref:System.String.Format%2A> 。 分析操作将值的字符串表示形式转换为具有该值的类型。 典型的分析方法是 `Parse` 和 `TryParse` 。  
  
 <xref:System.IFormatProvider>接口由单一方法组成 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 。 <xref:System.IFormatProvider.GetFormat%2A> 是回调方法：分析或格式设置方法调用它，并向其传递一个 <xref:System.Type> 对象，该对象表示格式设置或分析方法所需的对象类型将提供格式设置信息。 <xref:System.IFormatProvider.GetFormat%2A>方法负责返回该类型的对象。  
  
 <xref:System.IFormatProvider> 实现通常通过格式设置和分析方法隐式使用。 例如， <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 方法隐式使用 <xref:System.IFormatProvider> 表示系统当前区域性的实现。 <xref:System.IFormatProvider> 还可以通过具有类型的参数的方法（ <xref:System.IFormatProvider> 如和）显式指定实现 <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。  
  
 .NET Framework 包含以下三个预定义的 <xref:System.IFormatProvider> 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息：  
  
-   <xref:System.Globalization.NumberFormatInfo>类，它提供用于设置数字格式的信息，如货币、千位分隔符和特定区域性的小数分隔符符号。 有关由 <xref:System.Globalization.NumberFormatInfo> 对象识别并在数字格式设置操作中使用的预定义格式字符串的信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   <xref:System.Globalization.DateTimeFormatInfo>类，它提供用于设置日期和时间格式的信息，如特定区域性的日期和时间分隔符符号，或者日期的年、月和日部分的顺序和格式。 有关由 <xref:System.Globalization.DateTimeFormatInfo> 对象识别并在数字格式设置操作中使用的预定义格式字符串的信息，请参阅 [标准日期和时间格式](/dotnet/standard/base-types/standard-date-and-time-format-strings) 字符串和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   <xref:System.Globalization.CultureInfo>表示特定区域性的类。 其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回特定于区域性的 <xref:System.Globalization.NumberFormatInfo> 或 <xref:System.Globalization.DateTimeFormatInfo> 对象，具体取决于是否 <xref:System.Globalization.CultureInfo> 在涉及数字或日期和时间的格式设置或分析操作中使用对象。  
  
 .NET Framework 还支持自定义格式设置。 这通常涉及创建实现和的格式设置类 <xref:System.IFormatProvider> <xref:System.ICustomFormatter> 。 然后，将此类的一个实例作为参数传递给执行自定义格式设置操作的方法，如示例所示，此类 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 自定义实现将数字的格式设置为12位数帐号。  
  
   
  
## Examples  
 下面的示例阐释了 <xref:System.IFormatProvider> 实现如何更改日期和时间值的表示形式。 在这种情况下，将使用 <xref:System.Globalization.CultureInfo> 表示四个不同区域性的对象来显示单个日期。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb" id="Snippet3":::
  
 下面的示例演示如何使用实现接口的类 <xref:System.IFormatProvider> 和 <xref:System.IFormatProvider.GetFormat%2A> 方法。 `AcctNumberFormat`类将 <xref:System.Int64> 表示帐号的值转换为格式化的12位数帐号。 `GetFormat`如果参数引用了实现的类，则其方法返回对当前实例的引用 `AcctNumberFormat` `formatType` <xref:System.ICustomFormatter> ; 否则 `GetFormat` 返回 `null` 。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 然后，实现的类 <xref:System.IFormatProvider> 可用于调用格式设置和分析操作。 例如，下面的代码调用 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 方法以生成一个字符串，该字符串包含带格式的12位帐户号。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="/dotnet/standard/base-types/formatting-types">设置 .NET 中类型的格式</related>
    <related type="Article" href="/dotnet/standard/base-types/how-to-define-and-use-custom-numeric-format-providers">如何：定义和使用自定义数值格式提供程序</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">一个对象，该对象指定要返回的格式对象的类型。</param>
        <summary>返回一个对象，该对象为指定类型提供格式设置服务。</summary>
        <returns>如果 <see cref="T:System.IFormatProvider" /> 实现能够提供该类型的对象，则为 <paramref name="formatType" /> 所指定对象的实例；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> 是格式设置和分析方法调用的回调方法，用于检索有关分析操作中输入字符串格式的信息，或格式设置操作中的输出字符串的格式。 在 `formatType` 参数中，格式设置或分析方法传递执行其操作所需的对象的类型。 如果 <xref:System.IFormatProvider> 实现可以提供此格式设置或分析对象，则会返回该对象。 如果不是，则返回 `null` 。  
  
 例如，在调用 <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 方法时，方法自变量是一个 <xref:System.IFormatProvider> 对象，该对象提供有关当前整数实例的字符串表示形式如何进行格式化的信息。 当运行时执行方法时，它将调用 <xref:System.IFormatProvider> 对象的 <xref:System.IFormatProvider.GetFormat%2A> 方法，并向其传递一个 <xref:System.Type> 表示类型的对象 <xref:System.Globalization.NumberFormatInfo> 。 如果 <xref:System.IFormatProvider> 对象可以提供 <xref:System.Globalization.NumberFormatInfo> 对象，则返回该对象。 如果无法提供该类型的对象，它将返回 `null` 。  
  
 可以 <xref:System.IFormatProvider> <xref:System.IFormatProvider.GetFormat%2A> 在提供自定义格式设置或分析服务的类中实现接口和方法。 然后，将 <xref:System.IFormatProvider> 实现作为参数传递给具有类型为的参数的分析或格式设置方法的任何重载， <xref:System.IFormatProvider> 如 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 、 <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例演示如何使用实现接口的类 <xref:System.IFormatProvider> 和 <xref:System.IFormatProvider.GetFormat%2A> 方法。 `AcctNumberFormat`类将 <xref:System.Int64> 表示帐号的值转换为格式化的12位数帐号。 `GetFormat`如果参数引用了实现的类，则其方法返回对自身的引用 `formatType` <xref:System.ICustomFormatter> ; 否则 `GetFormat` 返回 `null` 。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 `AcctNumberFormat`然后，可以将类的实例作为参数传递给提供格式设置或分析服务的方法。 例如，下面的代码将类传递 `AcctNumberFormat` 给 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 方法，以生成带格式的12位数帐号。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
