<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c541f8567eb3b6a8e2d89add42404199fdb2e9c" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86601573" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8c7e5-101">提供一种机制，用于检索对象以控制格式化。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-101">Provides a mechanism for retrieving an object to control formatting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c7e5-102"><xref:System.IFormatProvider>接口提供一个对象，该对象提供格式设置信息以进行格式设置和分析操作。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-102">The <xref:System.IFormatProvider> interface supplies an object that provides formatting information for formatting and parsing operations.</span></span> <span data-ttu-id="8c7e5-103">格式设置操作将类型的值转换为该值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-103">Formatting operations convert the value of a type to the string representation of that value.</span></span> <span data-ttu-id="8c7e5-104">典型的格式设置方法是 `ToString` 类型的方法，以及 <xref:System.String.Format%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-104">Typical formatting methods are the `ToString` methods of a type, as well as <xref:System.String.Format%2A>.</span></span> <span data-ttu-id="8c7e5-105">分析操作将值的字符串表示形式转换为具有该值的类型。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-105">Parsing operations convert the string representation of a value to a type with that value.</span></span> <span data-ttu-id="8c7e5-106">典型的分析方法是 `Parse` 和 `TryParse` 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-106">Typical parsing methods are `Parse` and `TryParse`.</span></span>  
  
 <span data-ttu-id="8c7e5-107"><xref:System.IFormatProvider>接口由单一方法组成 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-107">The <xref:System.IFormatProvider> interface consists of a single method, <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8c7e5-108"><xref:System.IFormatProvider.GetFormat%2A> 是回调方法：分析或格式设置方法调用它，并向其传递一个 <xref:System.Type> 对象，该对象表示格式设置或分析方法所需的对象类型将提供格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-108"><xref:System.IFormatProvider.GetFormat%2A> is a callback method: The parsing or formatting method calls it and passes it a <xref:System.Type> object that represents the type of object that the formatting or parsing method expects will provide formatting information.</span></span> <span data-ttu-id="8c7e5-109"><xref:System.IFormatProvider.GetFormat%2A>方法负责返回该类型的对象。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-109">The <xref:System.IFormatProvider.GetFormat%2A> method is responsible for returning an object of that type.</span></span>  
  
 <span data-ttu-id="8c7e5-110"><xref:System.IFormatProvider> 实现通常通过格式设置和分析方法隐式使用。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-110"><xref:System.IFormatProvider> implementations are often used implicitly by formatting and parsing methods.</span></span> <span data-ttu-id="8c7e5-111">例如， <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 方法隐式使用 <xref:System.IFormatProvider> 表示系统当前区域性的实现。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-111">For example, the <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> method implicitly uses an <xref:System.IFormatProvider> implementation that represents the system's current culture.</span></span> <span data-ttu-id="8c7e5-112"><xref:System.IFormatProvider> 还可以通过具有类型的参数的方法（ <xref:System.IFormatProvider> 如和）显式指定实现 <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-112"><xref:System.IFormatProvider> implementations can also be specified explicitly by methods that have a parameter of type <xref:System.IFormatProvider>, such as <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> and <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8c7e5-113">.NET Framework 包含以下三个预定义的 <xref:System.IFormatProvider> 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息：</span><span class="sxs-lookup"><span data-stu-id="8c7e5-113">The .NET Framework includes the following three predefined <xref:System.IFormatProvider> implementations to provide culture-specific information that is used in formatting or parsing numeric and date and time values:</span></span>  
  
-   <span data-ttu-id="8c7e5-114"><xref:System.Globalization.NumberFormatInfo>类，它提供用于设置数字格式的信息，如货币、千位分隔符和特定区域性的小数分隔符符号。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-114">The <xref:System.Globalization.NumberFormatInfo> class, which provides information that is used to format numbers, such as the currency, thousands separator, and decimal separator symbols for a particular culture.</span></span> <span data-ttu-id="8c7e5-115">有关由 <xref:System.Globalization.NumberFormatInfo> 对象识别并在数字格式设置操作中使用的预定义格式字符串的信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-115">For information about the predefined format strings recognized by a <xref:System.Globalization.NumberFormatInfo> object and used in numeric formatting operations, see [Standard Numeric Format Strings](/dotnet/standard/base-types/standard-numeric-format-strings) and [Custom Numeric Format Strings](/dotnet/standard/base-types/custom-numeric-format-strings).</span></span>  
  
-   <span data-ttu-id="8c7e5-116"><xref:System.Globalization.DateTimeFormatInfo>类，它提供用于设置日期和时间格式的信息，如特定区域性的日期和时间分隔符符号，或者日期的年、月和日部分的顺序和格式。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-116">The <xref:System.Globalization.DateTimeFormatInfo> class, which provides information that is used to format dates and times, such as the date and time separator symbols for a particular culture or the order and format of a date's year, month, and day components.</span></span> <span data-ttu-id="8c7e5-117">有关由 <xref:System.Globalization.DateTimeFormatInfo> 对象识别并在数字格式设置操作中使用的预定义格式字符串的信息，请参阅 [标准日期和时间格式](/dotnet/standard/base-types/standard-date-and-time-format-strings) 字符串和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-117">For information about the predefined format strings recognized by a <xref:System.Globalization.DateTimeFormatInfo> object and used in numeric formatting operations, see [Standard Date and Time Format Strings](/dotnet/standard/base-types/standard-date-and-time-format-strings) and [Custom Date and Time Format Strings](/dotnet/standard/base-types/custom-date-and-time-format-strings).</span></span>  
  
-   <span data-ttu-id="8c7e5-118"><xref:System.Globalization.CultureInfo>表示特定区域性的类。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-118">The <xref:System.Globalization.CultureInfo> class, which represents a particular culture.</span></span> <span data-ttu-id="8c7e5-119">其 <xref:System.IFormatProvider.GetFormat%2A> 方法返回特定于区域性的 <xref:System.Globalization.NumberFormatInfo> 或 <xref:System.Globalization.DateTimeFormatInfo> 对象，具体取决于是否 <xref:System.Globalization.CultureInfo> 在涉及数字或日期和时间的格式设置或分析操作中使用对象。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-119">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.DateTimeFormatInfo> object, depending on whether the <xref:System.Globalization.CultureInfo> object is used in a formatting or parsing operation that involves numbers or dates and times.</span></span>  
  
 <span data-ttu-id="8c7e5-120">.NET Framework 还支持自定义格式设置。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-120">The .NET Framework also supports custom formatting.</span></span> <span data-ttu-id="8c7e5-121">这通常涉及创建实现和的格式设置类 <xref:System.IFormatProvider> <xref:System.ICustomFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-121">This typically involves the creation of a formatting class that implements both <xref:System.IFormatProvider> and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="8c7e5-122">然后，将此类的一个实例作为参数传递给执行自定义格式设置操作的方法，如示例所示，此类 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 自定义实现将数字的格式设置为12位数帐号。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-122">An instance of this class is then passed as a parameter to a method that performs a custom formatting operation, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> The example provides an illustration of such a custom implementation that formats a number as a 12-digit account number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c7e5-123">下面的示例阐释了 <xref:System.IFormatProvider> 实现如何更改日期和时间值的表示形式。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-123">The following example illustrates how an <xref:System.IFormatProvider> implementation can change the representation of a date and time value.</span></span> <span data-ttu-id="8c7e5-124">在这种情况下，将使用 <xref:System.Globalization.CultureInfo> 表示四个不同区域性的对象来显示单个日期。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-124">In this case, a single date is displayed by using <xref:System.Globalization.CultureInfo> objects that represent four different cultures.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb" id="Snippet3":::
  
 <span data-ttu-id="8c7e5-125">下面的示例演示如何使用实现接口的类 <xref:System.IFormatProvider> 和 <xref:System.IFormatProvider.GetFormat%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-125">The following example illustrates the use of a class that implements the <xref:System.IFormatProvider> interface and the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="8c7e5-126">`AcctNumberFormat`类将 <xref:System.Int64> 表示帐号的值转换为格式化的12位数帐号。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-126">The `AcctNumberFormat` class converts an <xref:System.Int64> value that represents an account number to a formatted 12-digit account number.</span></span> <span data-ttu-id="8c7e5-127">`GetFormat`如果参数引用了实现的类，则其方法返回对当前实例的引用 `AcctNumberFormat` `formatType` <xref:System.ICustomFormatter> ; 否则 `GetFormat` 返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-127">Its `GetFormat` method returns a reference to the current `AcctNumberFormat` instance if the `formatType` parameter refers to a class that implements <xref:System.ICustomFormatter>; otherwise, `GetFormat` returns `null`.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 <span data-ttu-id="8c7e5-128">然后，实现的类 <xref:System.IFormatProvider> 可用于调用格式设置和分析操作。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-128">The class that implements <xref:System.IFormatProvider> can then be used in a call to a formatting and parsing operation.</span></span> <span data-ttu-id="8c7e5-129">例如，下面的代码调用 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 方法以生成一个字符串，该字符串包含带格式的12位帐户号。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-129">For example, the following code calls the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method to generate a string that contains a formatted 12-digit account number.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="/dotnet/standard/base-types/formatting-types"><span data-ttu-id="8c7e5-130">设置 .NET 中类型的格式</span><span class="sxs-lookup"><span data-stu-id="8c7e5-130">Formatting Types in .NET</span></span></related>
    <related type="Article" href="/dotnet/standard/base-types/how-to-define-and-use-custom-numeric-format-providers"><span data-ttu-id="8c7e5-131">如何：定义和使用自定义数值格式提供程序</span><span class="sxs-lookup"><span data-stu-id="8c7e5-131">How to: Define and Use Custom Numeric Format Providers</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType"><span data-ttu-id="8c7e5-132">一个对象，该对象指定要返回的格式对象的类型。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-132">An object that specifies the type of format object to return.</span></span></param>
        <summary><span data-ttu-id="8c7e5-133">返回一个对象，该对象为指定类型提供格式设置服务。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-133">Returns an object that provides formatting services for the specified type.</span></span></summary>
        <returns><span data-ttu-id="8c7e5-134">如果 <see cref="T:System.IFormatProvider" /> 实现能够提供该类型的对象，则为 <paramref name="formatType" /> 所指定对象的实例；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-134">An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c7e5-135"><xref:System.IFormatProvider.GetFormat%2A> 是格式设置和分析方法调用的回调方法，用于检索有关分析操作中输入字符串格式的信息，或格式设置操作中的输出字符串的格式。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-135"><xref:System.IFormatProvider.GetFormat%2A> is a callback method that formatting and parsing methods invoke to retrieve information about the format of the input string in parsing operations or the format of the output string in formatting operations.</span></span> <span data-ttu-id="8c7e5-136">在 `formatType` 参数中，格式设置或分析方法传递执行其操作所需的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-136">In the `formatType` parameter, the formatting or parsing method passes the type of object it requires to perform its operation.</span></span> <span data-ttu-id="8c7e5-137">如果 <xref:System.IFormatProvider> 实现可以提供此格式设置或分析对象，则会返回该对象。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-137">If the <xref:System.IFormatProvider> implementation can supply this formatting or parsing object, it returns that object.</span></span> <span data-ttu-id="8c7e5-138">如果不是，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-138">If not, it returns `null`.</span></span>  
  
 <span data-ttu-id="8c7e5-139">例如，在调用 <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 方法时，方法自变量是一个 <xref:System.IFormatProvider> 对象，该对象提供有关当前整数实例的字符串表示形式如何进行格式化的信息。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-139">For example, in the call to the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method, the method argument is an <xref:System.IFormatProvider> object that provides information about how the string representation of the current integer instance might be formatted.</span></span> <span data-ttu-id="8c7e5-140">当运行时执行方法时，它将调用 <xref:System.IFormatProvider> 对象的 <xref:System.IFormatProvider.GetFormat%2A> 方法，并向其传递一个 <xref:System.Type> 表示类型的对象 <xref:System.Globalization.NumberFormatInfo> 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-140">When the runtime executes the method, it calls the <xref:System.IFormatProvider> object's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="8c7e5-141">如果 <xref:System.IFormatProvider> 对象可以提供 <xref:System.Globalization.NumberFormatInfo> 对象，则返回该对象。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-141">If the <xref:System.IFormatProvider> object can supply a <xref:System.Globalization.NumberFormatInfo> object, it returns that object.</span></span> <span data-ttu-id="8c7e5-142">如果无法提供该类型的对象，它将返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-142">If it cannot supply an object of that type, it returns `null`.</span></span>  
  
 <span data-ttu-id="8c7e5-143">可以 <xref:System.IFormatProvider> <xref:System.IFormatProvider.GetFormat%2A> 在提供自定义格式设置或分析服务的类中实现接口和方法。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-143">You can implement the <xref:System.IFormatProvider> interface and the <xref:System.IFormatProvider.GetFormat%2A> method in classes that provide custom formatting or parsing services.</span></span> <span data-ttu-id="8c7e5-144">然后，将 <xref:System.IFormatProvider> 实现作为参数传递给具有类型为的参数的分析或格式设置方法的任何重载， <xref:System.IFormatProvider> 如 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 、 <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 或 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-144">The <xref:System.IFormatProvider> implementation is then passed as an argument to any overload of a parsing or formatting method that has a parameter of type <xref:System.IFormatProvider>, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, or <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c7e5-145">下面的示例演示如何使用实现接口的类 <xref:System.IFormatProvider> 和 <xref:System.IFormatProvider.GetFormat%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-145">The following example illustrates the use of a class that implements the <xref:System.IFormatProvider> interface and the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="8c7e5-146">`AcctNumberFormat`类将 <xref:System.Int64> 表示帐号的值转换为格式化的12位数帐号。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-146">The `AcctNumberFormat` class converts an <xref:System.Int64> value that represents an account number to a formatted 12-digit account number.</span></span> <span data-ttu-id="8c7e5-147">`GetFormat`如果参数引用了实现的类，则其方法返回对自身的引用 `formatType` <xref:System.ICustomFormatter> ; 否则 `GetFormat` 返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-147">Its `GetFormat` method returns a reference to itself if the `formatType` parameter refers to a class that implements <xref:System.ICustomFormatter>; otherwise, `GetFormat` returns `null`.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 <span data-ttu-id="8c7e5-148">`AcctNumberFormat`然后，可以将类的实例作为参数传递给提供格式设置或分析服务的方法。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-148">An instance of the `AcctNumberFormat` class can then be passed as an argument to a method that provides formatting or parsing services.</span></span> <span data-ttu-id="8c7e5-149">例如，下面的代码将类传递 `AcctNumberFormat` 给 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 方法，以生成带格式的12位数帐号。</span><span class="sxs-lookup"><span data-stu-id="8c7e5-149">For example, the following code passes an `AcctNumberFormat` class to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method to generate a formatted 12-digit account number.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
