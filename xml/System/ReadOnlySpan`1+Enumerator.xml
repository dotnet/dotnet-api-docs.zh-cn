<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a583db45cb87cdd05545e635ed88d44722db4b86" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83965875" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d056d-101">为 <see cref="T:System.ReadOnlySpan`1" /> 的元素提供枚举器。</span><span class="sxs-lookup"><span data-stu-id="d056d-101">Provides an enumerator for the elements of a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d056d-102">语言的[foreach](/dotnet/csharp/language-reference/keywords/foreach-in)和 For Each ... C# C# [For Each...Next](/dotnet/visual-basic/language-reference/statements/for-each-next-statement)Visual Basic 中的下一个构造隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="d056d-102">The C# [foreach](/dotnet/csharp/language-reference/keywords/foreach-in) of the C# language and the [For Each...Next](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) construct in Visual Basic hides the complexity of enumerators.</span></span> <span data-ttu-id="d056d-103">建议使用 `foreach` 或 `For Each...Next`，而不是直接操作枚举器。</span><span class="sxs-lookup"><span data-stu-id="d056d-103">Instead of directly manipulating the enumerator, using `foreach` or `For Each...Next` is recommended.</span></span> 

<span data-ttu-id="d056d-104">最初，枚举器定位在 <xref:System.ReadOnlySpan`1>中第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="d056d-104">Initially, the enumerator is positioned before the first element in the <xref:System.ReadOnlySpan`1>.</span></span> <span data-ttu-id="d056d-105">在此位置上，未定义 <xref:System.ReadOnlySpan`1.Enumerator.Current>。</span><span class="sxs-lookup"><span data-stu-id="d056d-105">At this position, <xref:System.ReadOnlySpan`1.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="d056d-106">在读取 <xref:System.ReadOnlySpan`1.Enumerator.Current>的值之前，必须调用 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 以将枚举数前移到 <xref:System.ReadOnlySpan`1> 中的第一项。</span><span class="sxs-lookup"><span data-stu-id="d056d-106">You must call <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> to advance the enumerator to the first item in the <xref:System.ReadOnlySpan`1> before reading the value of <xref:System.ReadOnlySpan`1.Enumerator.Current>.</span></span>

<span data-ttu-id="d056d-107"><xref:System.ReadOnlySpan`1.Enumerator.Current> 在调用 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 之前返回相同的值。</span><span class="sxs-lookup"><span data-stu-id="d056d-107"><xref:System.ReadOnlySpan`1.Enumerator.Current> returns the same value until <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="d056d-108"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 将 <xref:System.ReadOnlySpan`1.Enumerator.Current> 设置到 <xref:System.ReadOnlySpan`1>中的下一项。</span><span class="sxs-lookup"><span data-stu-id="d056d-108"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> sets <xref:System.ReadOnlySpan`1.Enumerator.Current> to the next item in the <xref:System.ReadOnlySpan`1>.</span></span>

<span data-ttu-id="d056d-109">如果 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 越过 <xref:System.ReadOnlySpan`1>的末尾，<xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="d056d-109">If <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> passes the end of the <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="d056d-110">当枚举器处于此状态时，对 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> 的后续调用也将返回 `false` 并且 <xref:System.ReadOnlySpan`1.Enumerator.Current> 未定义。</span><span class="sxs-lookup"><span data-stu-id="d056d-110">When the enumerator is at this state, subsequent calls to <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> also return `false` and <xref:System.ReadOnlySpan`1.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="d056d-111">不能再次将 <xref:System.ReadOnlySpan`1.Enumerator.Current> 设置到 <xref:System.ReadOnlySpan`1> 中的第一项;必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="d056d-111">You cannot set <xref:System.ReadOnlySpan`1.Enumerator.Current> to the first item in the <xref:System.ReadOnlySpan`1> again; you must create a new enumerator instance instead.</span></span> 

<span data-ttu-id="d056d-112">尽管 <xref:System.ReadOnlySpan`1> 在堆栈上分配，但 <xref:System.ReadOnlySpan`1> 指向的基础数据可能不是。</span><span class="sxs-lookup"><span data-stu-id="d056d-112">Though the <xref:System.ReadOnlySpan`1> is allocated on the stack, the underlying data on which the <xref:System.ReadOnlySpan`1> points to, may not be.</span></span> <span data-ttu-id="d056d-113">因此，枚举 <xref:System.ReadOnlySpan`1> 本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="d056d-113">Therefore, enumerating through a <xref:System.ReadOnlySpan`1> is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="d056d-114">若要保证枚举过程中的线程安全，必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="d056d-114">To guarantee thread safety during enumeration, you must implement your own synchronization.</span></span>

<span data-ttu-id="d056d-115">不同于 .NET 中的其他枚举器结构，<xref:System.ReadOnlySpan`1.Enumerator>：</span><span class="sxs-lookup"><span data-stu-id="d056d-115">Unlike some other enumerator structures in .NET, the <xref:System.ReadOnlySpan`1.Enumerator>:</span></span>

- <span data-ttu-id="d056d-116">不实现 <xref:System.Collections.IEnumerator> 或 <xref:System.Collections.Generic.IEnumerator`1> 接口。</span><span class="sxs-lookup"><span data-stu-id="d056d-116">Does not implement the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator`1> interface.</span></span> <span data-ttu-id="d056d-117">这是因为 <xref:System.ReadOnlySpan`1.Enumerator> 是[ref 结构](/dotnet/csharp/language-reference/builtin-types/struct#ref-struct)，不能进行装箱。</span><span class="sxs-lookup"><span data-stu-id="d056d-117">This is because <xref:System.ReadOnlySpan`1.Enumerator> is a [ref struct](/dotnet/csharp/language-reference/builtin-types/struct#ref-struct) and cannot be boxed.</span></span>

- <span data-ttu-id="d056d-118">不包含 `Reset` 方法，该方法可将枚举数设置为其在范围中第一个元素之前的初始位置。</span><span class="sxs-lookup"><span data-stu-id="d056d-118">Does not include a `Reset` method, which can set the enumerator to its initial position before the first element in the span.</span></span> <span data-ttu-id="d056d-119">（<xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> 方法必须作为接口的一部分来实现，但大多数实现者会引发异常或不提供实现。）</span><span class="sxs-lookup"><span data-stu-id="d056d-119">(The <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> method must be implemented as part of the interface, but most implementors either throw an exception or provide no implementation.)</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d056d-120">获取对枚举器当前位置的项目的引用。</span><span class="sxs-lookup"><span data-stu-id="d056d-120">Gets a reference to the item at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="d056d-121"><see cref="T:System.ReadOnlySpan`1" /> 中位于该枚举数当前位置的元素。</span><span class="sxs-lookup"><span data-stu-id="d056d-121">The element in the <see cref="T:System.ReadOnlySpan`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d056d-122">在下列任一情况下，不定义 `Current`：</span><span class="sxs-lookup"><span data-stu-id="d056d-122">`Current` is undefined under either of the following conditions:</span></span> 

- <span data-ttu-id="d056d-123">在创建枚举器后，该枚举器将置于范围中第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="d056d-123">Immediately after the enumerator is created, the enumerator is positioned before the first element in the span.</span></span> <span data-ttu-id="d056d-124">在读取 `Current`的值之前，必须调用 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 以将枚举数前移到跨距的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="d056d-124"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> must be called to advance the enumerator to the first element of the span before reading the value of `Current`.</span></span>

- <span data-ttu-id="d056d-125">对 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 的最后一次调用返回了 `false`，指示范围的结束。</span><span class="sxs-lookup"><span data-stu-id="d056d-125">The last call to <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> returned `false`, which indicates the end of the span.</span></span> 

<span data-ttu-id="d056d-126">`Current` 在调用 <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 之前返回相同的值。</span><span class="sxs-lookup"><span data-stu-id="d056d-126">`Current` returns the same value until <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> is called.</span></span> <span data-ttu-id="d056d-127"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> 将 `Current` 设置为范围中的下一项。</span><span class="sxs-lookup"><span data-stu-id="d056d-127"><xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> sets `Current` to the next item in the span.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d056d-128">将枚举器推进到 <see cref="T:System.ReadOnlySpan`1" /> 的下一项。</span><span class="sxs-lookup"><span data-stu-id="d056d-128">Advances the enumerator to the next item of the <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="d056d-129">如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已通过范围的末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d056d-129"><see langword="true" /> if the enumerator successfully advanced to the next item; <see langword="false" /> if the end of the span has been passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d056d-130">创建枚举器后，该枚举数将定位在范围中的第一个元素之前，对的第一次调用 `MoveNext` 将枚举数前移到该范围中的第一项。</span><span class="sxs-lookup"><span data-stu-id="d056d-130">After an enumerator is created, it is positioned before the first element in the span, and the first call to `MoveNext` advances the enumerator to the first item in the span.</span></span> 

<span data-ttu-id="d056d-131">如果 `MoveNext` 通过跨度的末尾，则 `MoveNext` 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="d056d-131">If `MoveNext` passes the end of the span, `MoveNext` returns `false`.</span></span> <span data-ttu-id="d056d-132">当枚举器处于此状态时，对 `MoveNext` 的后续调用也将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="d056d-132">When the enumerator is at this state, subsequent calls to `MoveNext` also return `false`.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
