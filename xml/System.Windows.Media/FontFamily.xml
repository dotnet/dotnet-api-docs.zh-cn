<Type Name="FontFamily" FullName="System.Windows.Media.FontFamily">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0c24b9bd05dc7e2c49ce56295bd6ceb2f7061188" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83901862" /></Metadata><TypeSignature Language="C#" Value="public class FontFamily" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FontFamily extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.FontFamily" />
  <TypeSignature Language="VB.NET" Value="Public Class FontFamily" />
  <TypeSignature Language="C++ CLI" Value="public ref class FontFamily" />
  <TypeSignature Language="F#" Value="type FontFamily = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.FontFamilyConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Font)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Media.FontFamilyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一系列相关字体。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字体系列是一组共享相同系列名称（如 "New Roman"）但功能不同的字样。 这些功能差异包括 <xref:System.Windows.Media.Typeface.Style%2A>（如斜体）和 <xref:System.Windows.Media.Typeface.Weight%2A>，如粗体。  
  
 ![字体](~/add/media/fonts.PNG "字体")  
属于 "New Roman" 字体系列成员的字样示例  
  
 大多数 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 元素，例如 <xref:System.Windows.Controls.Button> 和 <xref:System.Windows.Controls.TextBlock>，提供 <xref:System.Windows.Controls.Control.FontFamily%2A> 属性，该属性可用于指定控件的文本内容的字体。 通过使用 <xref:System.Windows.Media.FontFamily> 值设置该属性来定义字体。 下面的示例演示如何在 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 和代码中引用字体。  
  
 [!code-csharp[FontSnippets#FontFallbackSnippet3](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontFamilySnippets.xaml.cs#fontfallbacksnippet3)]
 [!code-vb[FontSnippets#FontFallbackSnippet3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontfamilysnippets.xaml.vb#fontfallbacksnippet3)]
 [!code-xaml[FontSnippets#FontFallbackSnippet3](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontFamilySnippets.xaml#fontfallbacksnippet3)]  
  
 在前面的示例中，引用的字体 "漫画 Sans MS" 被其*友好名称*引用。 此外，在此示例中，该字体假定为系统字体集合中的字体。  
  
## <a name="specifying-fonts-in-alternate-directories"></a>在备用目录中指定字体  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 应用程序可以指定目录（而不是包含系统字体集合的目录）来解析字体引用。 字体的友好名称可以指定绝对统一资源标识符（URI）值来解析字体引用，如下面的 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 和代码示例所示。  
  
 [!code-csharp[FontSnippets#FontPackageSnippet6](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml.cs#fontpackagesnippet6)]
 [!code-vb[FontSnippets#FontPackageSnippet6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontpackagesnippets.xaml.vb#fontpackagesnippet6)]
 [!code-xaml[FontSnippets#FontPackageSnippet6](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml#fontpackagesnippet6)]  
  
 字体的友好名称还可以指定一个相对 URI 值，这需要一个基本 URI 来解析字体引用。 <xref:System.Windows.Media.FontFamily> 对象的 <xref:System.Windows.Media.FontFamily.BaseUri%2A> 属性对应于基 URI 值。 下面的代码示例演示如何创建由基 URI 值和相对 URI 值组成的字体引用。  
  
 [!code-csharp[FontSnippets#FontPackageSnippet7](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml.cs#fontpackagesnippet7)]
 [!code-vb[FontSnippets#FontPackageSnippet7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontpackagesnippets.xaml.vb#fontpackagesnippet7)]  
  
 当你引用作为应用程序的一部分打包的字体时，可以使用基本 URI 值。 例如，基本 URI 值可以是 "pack://application" URI，这允许你引用打包为应用程序资源的字体。 下面的代码示例演示一个由基 URI 值和相对 URI 值组成的字体引用。  
  
 [!code-csharp[FontSnippets#FontPackageSnippet2](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml.cs#fontpackagesnippet2)]
 [!code-vb[FontSnippets#FontPackageSnippet2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontpackagesnippets.xaml.vb#fontpackagesnippet2)]  
  
 将 <xref:System.Windows.Media.FontFamily> 指定为标记中的属性时，将始终隐式指定基本 URI 值，其值为 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] 页的 URI。 隐含的基本 URI 值与友好名称字符串中的相对 URI 值结合使用，以获取字体的位置。 在下面的 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 示例中，请注意，相对 URI 值使用 "./" 表示法，这意味着在基 URI 值的 "当前文件夹" 中。  
  
 [!code-xaml[FontSnippets#FontPackageSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml#fontpackagesnippet1)]  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 应用程序可以将字体打包为内容项、资源项或库资源项。 有关详细信息，请参阅[将字体与应用程序一起打包](/dotnet/framework/wpf/advanced/packaging-fonts-with-applications)。  
  
## <a name="font-fallback"></a>字体回退  
 字体回退是指自动替换客户端应用程序所选字体以外的字体。 调用字体回退的主要原因有两个：  
  
-   客户端应用程序指定的字体在系统中不存在。  
  
-   客户端应用程序指定的字体不包含呈现文本所需的标志符号。  
  
 在[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]中，字体回退机制使用默认的备用字体系列 "全局用户界面" 作为替代字体。 此字体定义为复合字体，其文件名为 "GlobalUserInterface. CompositeFont"。 有关复合字体的详细信息，请参阅本主题中的复合字体部分。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 字体回退机制替换以前的 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] 字体替换技术。  
  
## <a name="defining-a-font-fallback-sequence-in-code"></a>在代码中定义字体回退顺序  
 您可以在代码中定义字体回退顺序，这允许您定义备用字体。 创建 <xref:System.Windows.Media.FontFamily> 对象时，为 <xref:System.String> 参数提供多个字体系列名称（以逗号分隔），例如 "漫画 Sans MS，Verdana"。 在这种情况下，如果 "漫画 Sans MS" 字样的字形不可用，则使用 "Verdana" 字样的字形。 如果 "漫画 Sans MS" 和 "Verdana" 均不具有所需的字形，则使用字样的备用字体系列，默认情况下为 "全局用户界面"。  
  
 下面的示例演示如何在 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 和代码中定义字体回退顺序。  
  
 [!code-csharp[FontSnippets#FontFallbackSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontFamilySnippets.xaml.cs#fontfallbacksnippet1)]
 [!code-vb[FontSnippets#FontFallbackSnippet1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontfamilysnippets.xaml.vb#fontfallbacksnippet1)]
 [!code-xaml[FontSnippets#FontFallbackSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontFamilySnippets.xaml#fontfallbacksnippet1)]  
  
 回退序列中的任何一种字体都可以指定字体位置。 在下面的示例中，"Pericles Light" 被称为 "应用程序资源"，"Verdana" 作为系统字体集合成员引用。  
  
 [!code-csharp[FontSnippets#FontFallbackSnippet2](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontFamilySnippets.xaml.cs#fontfallbacksnippet2)]
 [!code-vb[FontSnippets#FontFallbackSnippet2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontfamilysnippets.xaml.vb#fontfallbacksnippet2)]
 [!code-xaml[FontSnippets#FontFallbackSnippet2](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontFamilySnippets.xaml#fontfallbacksnippet2)]  
  
## <a name="composite-fonts"></a>复合字体  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 平台提供了一种复合字体功能，以允许构造全范围多语言字体，避免显示缺失的字形。 复合字体替换 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 字体链接、字体回退、字体绑定、字体关联和最终用户定义的字符（EUDC）机制。  
  
 复合字体系列可通过 <xref:System.Windows.Media.FontFamily> 和 <xref:System.Windows.Media.Typeface> 构造函数与任何其他字体系列一起使用。 每个复合字体系列都命名为，并且与其他字体一样，可以为其名称提供多种语言的本地化变体。  
  
 以下标记示例演示如何将复合字体系列定义为磁盘文件。 此文件可以与任何其他安装的字体一起存储在默认 [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)] 字体目录中，也可以通过在按名称引用系列时包含其 URI 来在任何位置引用。  
  
 下面的示例显示了 "" 中的字体系列标记。CompositeFont "文件。  
  
 [!code-xaml[CompositeFontMarkup#CF](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositeFontMarkup/CS/comp.xaml#cf)]  
  
 在 WPF 安装过程中，将在默认的 Windows 字体目录中显示以下四个复合字体。  
  
|字体|注意|  
|----------|-----------|  
|GlobalMonospace.CompositeFont|使用等宽字体呈现文本，例如，为拉丁字符 "宋体"。|  
|GlobalSanSerif.CompositeFont|使用 sans serif 字体（例如，"Arial" 表示拉丁字符）呈现文本。|  
|GlobalSerif.CompositeFont|使用衬线字体呈现文本，例如，为拉丁字符 "New Roman"。|  
|GlobalUserInterface.CompositeFont|使用默认字体（例如，"New Roman" 表示拉丁字符）呈现文本。|  
  
<a name="xamlAttributeUsage_FontFamily"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object FontFamily="fontFamilyName"/>  
- or -  
<object FontFamily="fontFamilyNamesList"/>  
- or -  
<object FontFamily="fontFamilyFolderReference"/>  
- or -  
<object FontFamily="fontFamilyUriReference"/>  
```  
  
<a name="xamlValues_FontFamily"></a>   
## <a name="xaml-values"></a>XAML 值  
 *fontFamilyName*  
 指定字体系列名称的字符串。  例如，`"Arial"` 或 `"Century Gothic"`。  
  
 *fontFamilyNamesList*  
 指定多个字体系列名称的字符串，每个名称之间用逗号分隔（逗号后面的任何空白都将被忽略）。  指定的第一个字体系列用作主要字体系列;在主要字体系列不可用或不适用的情况下，后续字体系列用作备用系列。  例如，`"Arial, Century Gothic"` 将 Arial 字体系列指定为 "Arial" 作为 "备用字体系列"。  
  
 *fontFamilyFolderReference*  
 指定包含字体的文件夹以及字体系列名称的字符串。  文件夹和字体系列名称之间用 # 字符进行分隔。  文件夹引用可以是绝对的，也可以是相对的。  例如，`"Custom Fonts\#My Custom Font"` 。  
  
 *fontFamilyUriReference*  
 指定字体的统一资源标识符（URI）和字体系列名称的字符串。  URI 和字体系列名称由 # 字符分隔。  例如，`"http://MyFontServer/Fonts/#My Custom Font"` 。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Fonts" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.FontFamily" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontFamily ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FontFamily();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化匿名 <see cref="T:System.Windows.Media.FontFamily" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要以编程方式创建复合字体，请使用此无参数的构造函数。 这意味着你不必为构造函数指定字体系列名称，但必须在 <xref:System.Windows.Media.FontFamily.FamilyMaps%2A> 中填充集合并在使用构造实例之前 <xref:System.Windows.Media.FontFamily.FamilyNames%2A> 集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontFamily (string familyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FontFamily(System::String ^ familyName);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.FontFamily : string -&gt; System.Windows.Media.FontFamily" Usage="new System.Windows.Media.FontFamily familyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="familyName">构成新 <see cref="T:System.Windows.Media.FontFamily" /> 的一个或多个系列名称。 多个系列名称之间应使用逗号分隔。</param>
        <summary>从指定的字体系列名称初始化 <see cref="T:System.Windows.Media.FontFamily" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 `familyName` 参数中指定的每个系列名称前面可以有一个对目录或统一资源标识符（URI）的位置引用。 位置引用与系列名称之间用井号（`#`）字符分隔开。 在 `familyName` 参数中指定的多个系列名称必须用逗号分隔。  
  
 每个系列可以是直接表示一组共享相同系列名称的一组字体文件的真实字体，也可以是对复合字体文件中定义的系列名称的引用。  
  
 标识多个系列后，第二个和后续字体系列作为备用系列，处理第一个字体系列不支持的码位。 对于第一个字体系列不支持的每个码位，将依次检查每个后续系列。  
  
   
  
## Examples  
 [!code-csharp[FontSnippets#103](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/Window1.xaml.cs#103)]
 [!code-vb[FontSnippets#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/window1.xaml.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="familyName" /> 不能为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontFamily (Uri baseUri, string familyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, string familyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.#ctor(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseUri As Uri, familyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FontFamily(Uri ^ baseUri, System::String ^ familyName);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.FontFamily : Uri * string -&gt; System.Windows.Media.FontFamily" Usage="new System.Windows.Media.FontFamily (baseUri, familyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="familyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">指定用来解析 <paramref name="familyName" /> 的基础 URI。</param>
        <param name="familyName">构成新 <see cref="T:System.Windows.Media.FontFamily" /> 的一个或多个系列名称。 多个系列名称之间应使用逗号分隔。</param>
        <summary>从指定的字体系列名称和可选的基本统一资源标识符 (URI) 值初始化 <see cref="T:System.Windows.Media.FontFamily" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `familyName` 值可以指定一个相对 URI 值，这需要一个基 URI 来解析字体引用。 可以 `null``baseUri` 值。  
  
   
  
## Examples  
 下面的代码演示一个由基 URI 值和相对 URI 值组成的字体引用。  
  
 [!code-csharp[FontSnippets#FontPackageSnippet2](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml.cs#fontpackagesnippet2)]
 [!code-vb[FontSnippets#FontPackageSnippet2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontpackagesnippets.xaml.vb#fontpackagesnippet2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Baseline">
      <MemberSignature Language="C#" Value="public double Baseline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Baseline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.Baseline" />
      <MemberSignature Language="VB.NET" Value="Public Property Baseline As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Baseline { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Baseline : double with get, set" Usage="System.Windows.Media.FontFamily.Baseline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置基线与字符单元格顶部之间的距离。</summary>
        <value>一个 <see cref="T:System.Double" />，指示基线与字符单元格顶部之间的距离，表示为字体全身大小的一部分。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseUri">
      <MemberSignature Language="C#" Value="public Uri BaseUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseUri" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.BaseUri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseUri { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUri : Uri" Usage="System.Windows.Media.FontFamily.BaseUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于解析字体系列名称的基本统一资源标识符 (URI)。</summary>
        <value>一个 <see cref="T:System.Uri" /> 类型的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果字体系列名称不依赖于基 URI 来解析字体引用，则返回值为 `null`。 若要检索用于构造 <xref:System.Windows.Media.FontFamily> 对象的字体系列名称，请使用 "<xref:System.Windows.Media.FontFamily.Source%2A>" 属性。  
  
   
  
## Examples  
 下面的示例演示从 <xref:System.Windows.Media.FontFamily> 对象检索 <xref:System.Windows.Media.FontFamily.BaseUri%2A> 属性的结果。  
  
 [!code-csharp[FontSnippets#FontPackageSnippet9](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml.cs#fontpackagesnippet9)]
 [!code-vb[FontSnippets#FontPackageSnippet9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontpackagesnippets.xaml.vb#fontpackagesnippet9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="fontFamily.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">要比较的 <see cref="T:System.Windows.Media.FontFamily" /> 对象。</param>
        <summary>获取一个值，该值指示当前的字体系列对象是否与指定的字体系列对象相同。</summary>
        <returns>如果 <paramref name="o" /> 等于当前 <see cref="T:System.Windows.Media.FontFamily" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。 如果 <paramref name="o" /> 不是 <see cref="T:System.Windows.Media.FontFamily" /> 对象，则返回 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyMaps">
      <MemberSignature Language="C#" Value="public System.Windows.Media.FontFamilyMapCollection FamilyMaps { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.FontFamilyMapCollection FamilyMaps" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.FamilyMaps" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FamilyMaps As FontFamilyMapCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::FontFamilyMapCollection ^ FamilyMaps { System::Windows::Media::FontFamilyMapCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FamilyMaps : System.Windows.Media.FontFamilyMapCollection" Usage="System.Windows.Media.FontFamily.FamilyMaps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.FontFamilyMapCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象的集合。</summary>
        <value>一个包含 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 对象的 <see cref="T:System.Windows.Media.FontFamilyMap" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于使用字体系列名称创建的 <xref:System.Windows.Media.FontFamily> 对象，<xref:System.Windows.Media.FontFamily.FamilyMaps%2A> 属性返回空的只读集合。  
  
 <xref:System.Windows.Media.FontFamilyMap> 对象定义要用于显示指定区域性的一组指定 Unicode 字符的字体。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyNames">
      <MemberSignature Language="C#" Value="public System.Windows.Media.LanguageSpecificStringDictionary FamilyNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.LanguageSpecificStringDictionary FamilyNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.FamilyNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FamilyNames As LanguageSpecificStringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::LanguageSpecificStringDictionary ^ FamilyNames { System::Windows::Media::LanguageSpecificStringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FamilyNames : System.Windows.Media.LanguageSpecificStringDictionary" Usage="System.Windows.Media.FontFamily.FamilyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.LanguageSpecificStringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 <see cref="T:System.Globalization.CultureInfo" /> 对象的字体系列名称的字符串和 <see cref="T:System.Windows.Media.FontFamily" /> 值的集合。</summary>
        <value>一个表示字体系列名称的 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[FontSnippets#106](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/Window1.xaml.cs#106)]
 [!code-vb[FontSnippets#106](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/window1.xaml.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyTypefaces">
      <MemberSignature Language="C#" Value="public System.Windows.Media.FamilyTypefaceCollection FamilyTypefaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.FamilyTypefaceCollection FamilyTypefaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.FamilyTypefaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FamilyTypefaces As FamilyTypefaceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::FamilyTypefaceCollection ^ FamilyTypefaces { System::Windows::Media::FamilyTypefaceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FamilyTypefaces : System.Windows.Media.FamilyTypefaceCollection" Usage="System.Windows.Media.FontFamily.FamilyTypefaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.FamilyTypefaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体集合。</summary>
        <value>一个 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" />，表示 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_FamilyTypefaces"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.FamilyTypefaces>  
    <OneOrMoreFontFamilyTypefaces/>  
  </object.FamilyTypefaces>  
</object>  
```  
  
<a name="xamlValues_FamilyTypefaces"></a>   
## <a name="xaml-values"></a>XAML 值  
 *OneOrMoreFontFamilyTypefaces*  
 <xref:System.Windows.Media.FontFamily> 对象的一个或多个字样。  
  
   
  
## Examples  
 [!code-csharp[FontSnippets#107](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/Window1.xaml.cs#107)]
 [!code-vb[FontSnippets#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/window1.xaml.vb#107)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="fontFamily.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用作 <see cref="T:System.Windows.Media.FontFamily" /> 的哈希函数。 它适用于哈希算法和数据结构（如哈希表）。</summary>
        <returns>一个 <see cref="T:System.Int32" /> 值，它表示当前对象的哈希代码。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypefaces">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Windows.Media.Typeface&gt; GetTypefaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Windows.Media.Typeface&gt; GetTypefaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.GetTypefaces" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypefaces () As ICollection(Of Typeface)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Windows::Media::Typeface ^&gt; ^ GetTypefaces();" />
      <MemberSignature Language="F#" Value="member this.GetTypefaces : unit -&gt; System.Collections.Generic.ICollection&lt;System.Windows.Media.Typeface&gt;" Usage="fontFamily.GetTypefaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Windows.Media.Typeface&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Windows.Media.Typeface" /> 对象的集合，这些对象表示默认的系统字体位置中的字体。</summary>
        <returns>由 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象构成的 <see cref="T:System.Windows.Media.Typeface" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[FontSnippets#104](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/Window1.xaml.cs#104)]
 [!code-vb[FontSnippets#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/window1.xaml.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineSpacing">
      <MemberSignature Language="C#" Value="public double LineSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LineSpacing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.LineSpacing" />
      <MemberSignature Language="VB.NET" Value="Public Property LineSpacing As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LineSpacing { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.LineSpacing : double with get, set" Usage="System.Windows.Media.FontFamily.LineSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Media.FontFamily" /> 对象的行距值。 行距是使用此字体的文本的建议基线间距离（相对于全身大小）。</summary>
        <value>一个 <see cref="T:System.Double" />，表示 <see cref="T:System.Windows.Media.FontFamily" /> 对象的行距。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.FontFamily.Source" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Source : string" Usage="System.Windows.Media.FontFamily.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于构造 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体系列名称。</summary>
        <value><see cref="T:System.Windows.Media.FontFamily" /> 对象的字体系列名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要返回 <xref:System.Windows.Media.FontFamily> 对象的基统一资源标识符（URI）值，请使用 <xref:System.Windows.Media.FontFamily.BaseUri%2A>。  
  
 如果在未指定字体系列名称的情况下创建 <xref:System.Windows.Media.FontFamily> 对象，则返回值为 <xref:System.String.Empty>。  
  
   
  
## Examples  
 下面的示例演示了从 <xref:System.Windows.Media.FontFamily> 对象检索 <xref:System.Windows.Media.FontFamily.BaseUri%2A> 和 <xref:System.Windows.Media.FontFamily.Source%2A> 属性值的结果。  
  
 [!code-csharp[FontSnippets#FontPackageSnippet10](~/samples/snippets/csharp/VS_Snippets_Wpf/FontSnippets/CSharp/FontPackageSnippets.xaml.cs#fontpackagesnippet10)]
 [!code-vb[FontSnippets#FontPackageSnippet10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FontSnippets/visualbasic/fontpackagesnippets.xaml.vb#fontpackagesnippet10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.FontFamily.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fontFamily.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="P:System.Windows.Media.FontFamily.Source" /> 属性的值。</summary>
        <returns><see cref="T:System.Windows.Media.FontFamily" /> 对象的源位置，包括目录或统一资源标识符 (URI) 位置引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在未指定字体系列名称的情况下创建 <xref:System.Windows.Media.FontFamily> 对象，则返回值为 <xref:System.String.Empty>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
