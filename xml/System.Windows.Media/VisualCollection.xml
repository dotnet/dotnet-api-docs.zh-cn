<Type Name="VisualCollection" FullName="System.Windows.Media.VisualCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0539805e058c8db0dafd942869481ff8b9565ae" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102078795" /></Metadata><TypeSignature Language="C#" Value="public sealed class VisualCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.VisualCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualCollection sealed : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type VisualCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e1999-101">表示 <see cref="T:System.Windows.Media.Visual" /> 对象的有序集合。</span><span class="sxs-lookup"><span data-stu-id="e1999-101">Represents an ordered collection of <see cref="T:System.Windows.Media.Visual" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-102"><xref:System.Windows.Media.VisualCollection>具有隐含的上下文关联。</span><span class="sxs-lookup"><span data-stu-id="e1999-102">A <xref:System.Windows.Media.VisualCollection> has implied context affinity.</span></span> <span data-ttu-id="e1999-103">如果过程尝试 <xref:System.Windows.Media.VisualCollection> 从不同于所属上下文的上下文中访问 <xref:System.Windows.Media.ContainerVisual> ，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="e1999-103">If a procedure attempts to access the <xref:System.Windows.Media.VisualCollection> from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1999-104">下面的示例演示如何创建并向 <xref:System.Windows.Media.VisualCollection> 其添加成员。</span><span class="sxs-lookup"><span data-stu-id="e1999-104">The following example shows how to create a <xref:System.Windows.Media.VisualCollection> and add members to it.</span></span>  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  <span data-ttu-id="e1999-105">有关完整示例，请参阅 [使用 drawingvisuals 进行的命中测试示例](https://go.microsoft.com/fwlink/?LinkID=159994)。</span><span class="sxs-lookup"><span data-stu-id="e1999-105">For the complete sample, see [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualCollection (System.Windows.Media.Visual parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Visual parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualCollection(System::Windows::Media::Visual ^ parent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.VisualCollection : System.Windows.Media.Visual -&gt; System.Windows.Media.VisualCollection" Usage="new System.Windows.Media.VisualCollection parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="e1999-106">返回其 <see cref="T:System.Windows.Media.VisualCollection" /> 的父可视对象。</span><span class="sxs-lookup"><span data-stu-id="e1999-106">The parent visual object whose <see cref="T:System.Windows.Media.VisualCollection" /> is returned.</span></span></param>
        <summary><span data-ttu-id="e1999-107">初始化 <see cref="T:System.Windows.Media.VisualCollection" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e1999-107">Initializes a new instance of the <see cref="T:System.Windows.Media.VisualCollection" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (visual As Visual) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Media.Visual -&gt; int" Usage="visualCollection.Add visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="e1999-108">要追加到 <see cref="T:System.Windows.Media.VisualCollection" /> 的 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-108">The <see cref="T:System.Windows.Media.Visual" /> to append to the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="e1999-109">将 <see cref="T:System.Windows.Media.Visual" /> 追加到 <see cref="T:System.Windows.Media.VisualCollection" /> 的末尾。</span><span class="sxs-lookup"><span data-stu-id="e1999-109">Appends a <see cref="T:System.Windows.Media.Visual" /> to the end of the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <returns><span data-ttu-id="e1999-110">在集合中添加 <paramref name="visual" /> 的位置的索引。</span><span class="sxs-lookup"><span data-stu-id="e1999-110">The index in the collection at which <paramref name="visual" /> was added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-111">添加一个 <xref:System.Windows.Media.Visual> 值为的 `null` ，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="e1999-111">Adding a <xref:System.Windows.Media.Visual> whose value is `null` is permitted and does not raise an exception.</span></span>  
  
 <span data-ttu-id="e1999-112">此 <xref:System.Windows.Media.VisualCollection.Add%2A> 方法还设置父视觉对象之间的父子关系，父视觉对象是的所有者 <xref:System.Windows.Media.VisualCollection> 和子视觉对象 `visual` 。</span><span class="sxs-lookup"><span data-stu-id="e1999-112">The <xref:System.Windows.Media.VisualCollection.Add%2A> method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="e1999-113">如果需要更高的低级别控制来控制自定义类的可视化子对象的基础存储实现，请考虑使用 <xref:System.Windows.Media.Visual.AddVisualChild%2A> 和 <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e1999-113">If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="e1999-114">使用这些方法时，必须定义自己的存储实现，而不使用 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-114">When you use these methods, you must define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1999-115">下面的示例演示如何创建并向 <xref:System.Windows.Media.VisualCollection> 其添加成员。</span><span class="sxs-lookup"><span data-stu-id="e1999-115">The following example shows how to create a <xref:System.Windows.Media.VisualCollection> and add members to it.</span></span>  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  <span data-ttu-id="e1999-116">有关完整示例，请参阅 [使用 drawingvisuals 进行的命中测试示例](https://go.microsoft.com/fwlink/?LinkID=159994)。</span><span class="sxs-lookup"><span data-stu-id="e1999-116">For the complete sample, see [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e1999-117">如果 <see cref="T:System.ArgumentException" /> 为根元素，则将引发 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-117">An <see cref="T:System.ArgumentException" /> is thrown if the <see cref="T:System.Windows.Media.Visual" /> is a root element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Windows.Media.VisualCollection.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e1999-118">获取或设置 <see cref="T:System.Windows.Media.VisualCollection" /> 可包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="e1999-118">Gets or sets the number of elements that the <see cref="T:System.Windows.Media.VisualCollection" /> can contain.</span></span></summary>
        <value><span data-ttu-id="e1999-119"><see cref="T:System.Windows.Media.VisualCollection" /> 可包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="e1999-119">The number of elements that the <see cref="T:System.Windows.Media.VisualCollection" /> can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-120">的值 <xref:System.Windows.Media.VisualCollection.Capacity%2A> 是可存储的元素数 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-120">The value of <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.</span></span> <span data-ttu-id="e1999-121"><xref:System.Windows.Media.VisualCollection.Count%2A> 实际位于中的视觉对象的数量 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-121"><xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>.</span></span> <span data-ttu-id="e1999-122"><xref:System.Windows.Media.VisualCollection.Capacity%2A> 始终大于或等于 <xref:System.Windows.Media.VisualCollection.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-122"><xref:System.Windows.Media.VisualCollection.Capacity%2A> is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>.</span></span> <span data-ttu-id="e1999-123">如果 <xref:System.Windows.Media.VisualCollection.Count%2A> 在 <xref:System.Windows.Media.VisualCollection.Capacity%2A> 添加元素时超出，则将增加的容量 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-123">If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased.</span></span> <span data-ttu-id="e1999-124">默认情况下 <xref:System.Windows.Media.VisualCollection.Capacity%2A> 为零。</span><span class="sxs-lookup"><span data-stu-id="e1999-124">By default <xref:System.Windows.Media.VisualCollection.Capacity%2A> is zero.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e1999-125"><see cref="P:System.Windows.Media.VisualCollection.Capacity" /> 已设置为一个小于 <see cref="P:System.Windows.Media.VisualCollection.Count" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="e1999-125"><see cref="P:System.Windows.Media.VisualCollection.Capacity" /> is set to a value that is less than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="visualCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e1999-126">从 <see cref="T:System.Windows.Media.VisualCollection" /> 中移除所有元素。</span><span class="sxs-lookup"><span data-stu-id="e1999-126">Removes all elements from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-127"><xref:System.Windows.Media.VisualCollection.Count%2A>重置为零。</span><span class="sxs-lookup"><span data-stu-id="e1999-127">The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero.</span></span> <span data-ttu-id="e1999-128">的值将 <xref:System.Windows.Media.VisualCollection.Capacity%2A> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="e1999-128">The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="e1999-129">若要重置容量 <xref:System.Windows.Media.VisualCollection> ，请将 <xref:System.Windows.Media.VisualCollection.Capacity%2A> 属性设置为所需的大小。</span><span class="sxs-lookup"><span data-stu-id="e1999-129">To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (visual As Visual) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Media.Visual -&gt; bool" Usage="visualCollection.Contains visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="e1999-130">要在集合中搜索的 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-130">The <see cref="T:System.Windows.Media.Visual" /> to search for in the collection.</span></span></param>
        <summary><span data-ttu-id="e1999-131">返回一个 <see cref="T:System.Boolean" /> 值，该值指示集合中是否包含指定的 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-131">Returns a <see cref="T:System.Boolean" /> value that indicates whether the specified <see cref="T:System.Windows.Media.Visual" /> is contained in the collection.</span></span></summary>
        <returns><span data-ttu-id="e1999-132">如果集合中包含 <paramref name="visual" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-132"><see langword="true" /> if <paramref name="visual" /> is contained in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-133">此函数的最差情况运行时方案为 `O(n)` ，其中 `n` 是中的项数 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-133">The worst-case runtime scenario of this function is `O(n)`, where `n` is the number of items in the <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e1999-134">将当前集合复制到传递的数组中。</span><span class="sxs-lookup"><span data-stu-id="e1999-134">Copies the current collection into the passed array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="visualCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e1999-135">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Windows.Media.VisualCollection" /> 所复制的元素的目标位置。</span><span class="sxs-lookup"><span data-stu-id="e1999-135">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements that are copied from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <param name="index"><span data-ttu-id="e1999-136"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="e1999-136">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="e1999-137">从特定的数组索引开始，将集合中的项复制到数组中。</span><span class="sxs-lookup"><span data-stu-id="e1999-137">Copies the items in the collection to an array, starting at a specific array index.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Windows.Media.Visual[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Windows.Media.Visual[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Visual(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Windows::Media::Visual ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.Media.Visual[] * int -&gt; unit" Usage="visualCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.Media.Visual[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e1999-138"><see cref="T:System.Windows.Media.Visual" /> 对象的数组（必须具有从零开始的索引）。</span><span class="sxs-lookup"><span data-stu-id="e1999-138">An array of <see cref="T:System.Windows.Media.Visual" /> objects (which must have zero-based indexing).</span></span></param>
        <param name="index"><span data-ttu-id="e1999-139">在 <paramref name="array" /> 中从其开始复制的索引。</span><span class="sxs-lookup"><span data-stu-id="e1999-139">The index to start copying from within <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="e1999-140">将当前集合复制到传递的 <see cref="T:System.Windows.Media.Visual" /> 数组中。</span><span class="sxs-lookup"><span data-stu-id="e1999-140">Copies the current collection into the passed <see cref="T:System.Windows.Media.Visual" /> array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Media.VisualCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e1999-141">获取集合中的元素数。</span><span class="sxs-lookup"><span data-stu-id="e1999-141">Gets the number of elements in the collection.</span></span></summary>
        <value><span data-ttu-id="e1999-142"><see cref="T:System.Windows.Media.VisualCollection" /> 包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="e1999-142">The number of elements that the <see cref="T:System.Windows.Media.VisualCollection" /> contains.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-143"><xref:System.Windows.Media.VisualCollection.Count%2A> 实际在中的元素的数目 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-143"><xref:System.Windows.Media.VisualCollection.Count%2A> is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>.</span></span> <span data-ttu-id="e1999-144"><xref:System.Windows.Media.VisualCollection.Capacity%2A><xref:System.Windows.Media.VisualCollection>是可以存储的元素数。</span><span class="sxs-lookup"><span data-stu-id="e1999-144"><xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.</span></span>  
  
 <span data-ttu-id="e1999-145"><xref:System.Windows.Media.VisualCollection.Count%2A> 始终小于或等于 <xref:System.Windows.Media.VisualCollection.Capacity%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-145"><xref:System.Windows.Media.VisualCollection.Count%2A> is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>.</span></span> <span data-ttu-id="e1999-146">如果 <xref:System.Windows.Media.VisualCollection.Count%2A> <xref:System.Windows.Media.VisualCollection.Capacity%2A> 在添加元素时超过，则通过在复制旧元素并添加新元素之前自动重新分配内部数组来使列表的容量加倍。</span><span class="sxs-lookup"><span data-stu-id="e1999-146">If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.Media.VisualCollection.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.VisualCollection/Enumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As VisualCollection.Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::VisualCollection::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Windows.Media.VisualCollection.Enumerator" Usage="visualCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.VisualCollection+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e1999-147">检索可循环访问 <see cref="T:System.Windows.Media.VisualCollection" /> 的枚举数。</span><span class="sxs-lookup"><span data-stu-id="e1999-147">Retrieves an enumerator that can iterate through the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <returns><span data-ttu-id="e1999-148">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="e1999-148">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (visual As Visual) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Media.Visual -&gt; int" Usage="visualCollection.IndexOf visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="e1999-149">要在 <see cref="T:System.Windows.Media.Visual" /> 中定位的 <see cref="T:System.Windows.Media.VisualCollection" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-149">The <see cref="T:System.Windows.Media.Visual" /> to locate in the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="e1999-150">返回 <see cref="T:System.Windows.Media.Visual" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="e1999-150">Returns the zero-based index of the <see cref="T:System.Windows.Media.Visual" />.</span></span></summary>
        <returns><span data-ttu-id="e1999-151"><see cref="T:System.Windows.Media.Visual" /> 的索引。</span><span class="sxs-lookup"><span data-stu-id="e1999-151">The index of the <see cref="T:System.Windows.Media.Visual" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-152">如果不 <xref:System.Windows.Media.Visual> 在中，则 <xref:System.Windows.Media.VisualCollection> 返回-1。</span><span class="sxs-lookup"><span data-stu-id="e1999-152">If the <xref:System.Windows.Media.Visual> is not in the <xref:System.Windows.Media.VisualCollection>, -1 is returned.</span></span> <span data-ttu-id="e1999-153">如果 `null` 传递到方法，则返回具有的第一个项的索引 `null` 。</span><span class="sxs-lookup"><span data-stu-id="e1999-153">If `null` is passed to the method, the index of the first entry that has `null` is returned.</span></span> <span data-ttu-id="e1999-154">如果没有空项，则返回-1。</span><span class="sxs-lookup"><span data-stu-id="e1999-154">If there is no null entry, -1 is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, visual As Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * System.Windows.Media.Visual -&gt; unit" Usage="visualCollection.Insert (index, visual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="e1999-155">从零开始的索引，应在该位置插入值。</span><span class="sxs-lookup"><span data-stu-id="e1999-155">The zero-based index at which the value should be inserted.</span></span></param>
        <param name="visual"><span data-ttu-id="e1999-156">要插入到 <see cref="T:System.Windows.Media.VisualCollection" /> 的 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-156">The <see cref="T:System.Windows.Media.Visual" /> to insert into the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="e1999-157">将元素插入 <see cref="T:System.Windows.Media.VisualCollection" /> 的指定索引处。</span><span class="sxs-lookup"><span data-stu-id="e1999-157">Inserts an element into the <see cref="T:System.Windows.Media.VisualCollection" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-158">如果 <xref:System.Windows.Media.VisualCollection.Count%2A> 已相等 <xref:System.Windows.Media.VisualCollection.Capacity%2A> ，则在 <xref:System.Windows.Media.VisualCollection> 插入新的之前将增加的容量 <xref:System.Windows.Media.Visual> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-158">If <xref:System.Windows.Media.VisualCollection.Count%2A> already equals <xref:System.Windows.Media.VisualCollection.Capacity%2A>, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased before the new <xref:System.Windows.Media.Visual> is inserted.</span></span> <span data-ttu-id="e1999-159">如果 `index` 等于 <xref:System.Windows.Media.VisualCollection.Count%2A> ， `visual` 则将添加到的末尾 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-159">If `index` is equal to <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` is added to the end of <xref:System.Windows.Media.VisualCollection>.</span></span> <span data-ttu-id="e1999-160">任何等于或大于的现有视觉对象 `index` 都将被移动以适应新的 <xref:System.Windows.Media.Visual> ，其索引值将更新。</span><span class="sxs-lookup"><span data-stu-id="e1999-160">Any existing visual objects that are equal to or greater than `index` are shifted to accommodate the new <xref:System.Windows.Media.Visual>, and their index values are updated.</span></span>  
  
 <span data-ttu-id="e1999-161">此 <xref:System.Windows.Media.VisualCollection.Insert%2A> 方法还设置父视觉对象之间的父子关系，父视觉对象是的所有者 <xref:System.Windows.Media.VisualCollection> 和子视觉对象 `visual` 。</span><span class="sxs-lookup"><span data-stu-id="e1999-161">The <xref:System.Windows.Media.VisualCollection.Insert%2A> method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="e1999-162">如果需要对可视子对象的基础存储实现进行更高的低级别控制，请考虑使用 <xref:System.Windows.Media.Visual.AddVisualChild%2A> 和 <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e1999-162">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="e1999-163">使用这些方法时，可以定义自己的存储实现，不使用 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-163">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e1999-164"><paramref name="index" /> 小于零或大于 <see cref="P:System.Windows.Media.VisualCollection.Count" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-164"><paramref name="index" /> is less than zero or greater than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e1999-165">获取一个值，该值指示 <see cref="T:System.Windows.Media.VisualCollection" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="e1999-165">Gets a value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="e1999-166">该值指示 <see cref="T:System.Windows.Media.VisualCollection" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="e1999-166">The value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection" /> is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-167">对于所有对象，此属性始终 `false` 为 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-167">This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e1999-168">获取一个值，该值指示是否同步对 <see cref="T:System.Windows.Media.VisualCollection" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="e1999-168">Gets a value that indicates whether access to the <see cref="T:System.Windows.Media.VisualCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="e1999-169">指示 <see cref="T:System.Windows.Media.VisualCollection" /> 是否同步（线程安全）的值。</span><span class="sxs-lookup"><span data-stu-id="e1999-169">The value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection" /> is synchronized (thread-safe).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-170">对于所有对象，此属性始终 `false` 为 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-170">This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Visual this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Visual ^ default[int] { System::Windows::Media::Visual ^ get(int index); void set(int index, System::Windows::Media::Visual ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Media.Visual with get, set" Usage="System.Windows.Media.VisualCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="e1999-171"><see cref="T:System.Windows.Media.VisualCollection" /> 的从零开始的索引，从此位置可获取或设置 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-171">The zero-based index of the <see cref="T:System.Windows.Media.VisualCollection" /> from which to get or set the <see cref="T:System.Windows.Media.Visual" />.</span></span></param>
        <summary><span data-ttu-id="e1999-172">获取或设置 <see cref="T:System.Windows.Media.Visual" />，它存储在 <see cref="T:System.Windows.Media.VisualCollection" /> 的从零开始的索引处。</span><span class="sxs-lookup"><span data-stu-id="e1999-172">Gets or sets the <see cref="T:System.Windows.Media.Visual" /> that is stored at the zero-based index of the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <value><span data-ttu-id="e1999-173">在 <paramref name="index" /> 处存储的 <see cref="T:System.Windows.Media.Visual" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-173">The <see cref="T:System.Windows.Media.Visual" /> that is stored at <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-174">此属性提供了 <xref:System.Windows.Media.Visual> 使用索引访问中的特定的功能 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-174">This property provides the ability to access a specific <xref:System.Windows.Media.Visual> in the <xref:System.Windows.Media.VisualCollection> by using an index.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e1999-175"><paramref name="index" /> 小于零，或者 <paramref name="index" /> 等于或大于 <see cref="P:System.Windows.Media.VisualCollection.Count" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-175"><paramref name="index" /> is less than zero, or <paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e1999-176">新的子元素已经具有父元素，或者指定索引处的值不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-176">The new child element already has a parent, or the value at the specified index is not <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (visual As Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Media.Visual -&gt; unit" Usage="visualCollection.Remove visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="e1999-177">要从 <see cref="T:System.Windows.Media.Visual" /> 移除的 <see cref="T:System.Windows.Media.VisualCollection" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-177">The <see cref="T:System.Windows.Media.Visual" /> to remove from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="e1999-178">从 <see cref="T:System.Windows.Media.Visual" /> 中移除指定的 <see cref="T:System.Windows.Media.VisualCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e1999-178">Removes the specified <see cref="T:System.Windows.Media.Visual" /> object from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-179">在移除的对象之后的视觉对象将移动以占用空出位置，并更新其索引值。</span><span class="sxs-lookup"><span data-stu-id="e1999-179">The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.</span></span> <span data-ttu-id="e1999-180">如果 `visual` 为 `null` ，则移除第一个 `null` 项。</span><span class="sxs-lookup"><span data-stu-id="e1999-180">If `visual` is `null`, the first `null` entry is removed.</span></span> <span data-ttu-id="e1999-181">请注意， `null` 在集合大小中，删除项是线性的。</span><span class="sxs-lookup"><span data-stu-id="e1999-181">Note that removing a `null` entry is linear in the size of the collection.</span></span>  
  
 <span data-ttu-id="e1999-182"><xref:System.Windows.Media.VisualCollection.Remove%2A>方法还会删除父视觉对象之间的父子关系，这是父视觉对象的所有者， <xref:System.Windows.Media.VisualCollection> 以及子视觉对象 `visual` 。</span><span class="sxs-lookup"><span data-stu-id="e1999-182">The <xref:System.Windows.Media.VisualCollection.Remove%2A> method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="e1999-183">如果需要对可视子对象的基础存储实现进行更高的低级别控制，请考虑使用 <xref:System.Windows.Media.Visual.AddVisualChild%2A> 和 <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e1999-183">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="e1999-184">使用这些方法时，可以定义自己的存储实现，不使用 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-184">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="visualCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="e1999-185">要移除的可视对象的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="e1999-185">The zero-based index of the visual to remove.</span></span></param>
        <summary><span data-ttu-id="e1999-186">从 <see cref="T:System.Windows.Media.VisualCollection" /> 中指定的索引处移除可视对象。</span><span class="sxs-lookup"><span data-stu-id="e1999-186">Removes the visual object at the specified index in the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-187">在移除的对象之后的视觉对象将移动以占用空出位置，并更新其索引值。</span><span class="sxs-lookup"><span data-stu-id="e1999-187">The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.</span></span>  
  
 <span data-ttu-id="e1999-188"><xref:System.Windows.Media.VisualCollection.RemoveAt%2A>方法还会删除父视觉对象之间的父子关系，这是父视觉对象的所有者， <xref:System.Windows.Media.VisualCollection> 以及子视觉对象 `visual` 。</span><span class="sxs-lookup"><span data-stu-id="e1999-188">The <xref:System.Windows.Media.VisualCollection.RemoveAt%2A> method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="e1999-189">如果需要对可视子对象的基础存储实现进行更高的低级别控制，请考虑使用 <xref:System.Windows.Media.Visual.AddVisualChild%2A> 和 <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e1999-189">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="e1999-190">使用这些方法时，可以定义自己的存储实现，不使用 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-190">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e1999-191"><paramref name="index" /> 小于零，或者 <paramref name="index" /> 等于或大于 <see cref="P:System.Windows.Media.VisualCollection.Count" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-191"><paramref name="index" /> is less than zero, or <paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="visualCollection.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="e1999-192">要移除的元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="e1999-192">The zero-based index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="e1999-193">要移除的元素数。</span><span class="sxs-lookup"><span data-stu-id="e1999-193">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="e1999-194">从 <see cref="T:System.Windows.Media.VisualCollection" /> 中移除一系列可视对象。</span><span class="sxs-lookup"><span data-stu-id="e1999-194">Removes a range of visual objects from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1999-195">跟随删除的对象的视觉对象将移动以占用空出的位置，并更新其索引值。</span><span class="sxs-lookup"><span data-stu-id="e1999-195">The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.</span></span>  
  
 <span data-ttu-id="e1999-196"><xref:System.Windows.Media.VisualCollection.RemoveRange%2A>方法还会删除父视觉对象之间的父子关系，父视觉对象是的所有者 <xref:System.Windows.Media.VisualCollection> 和子视觉对象的范围。</span><span class="sxs-lookup"><span data-stu-id="e1999-196">The <xref:System.Windows.Media.VisualCollection.RemoveRange%2A> method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals.</span></span>  
  
 <span data-ttu-id="e1999-197">如果需要对可视子对象的基础存储实现进行更高的低级别控制，请考虑使用 <xref:System.Windows.Media.Visual.AddVisualChild%2A> 和 <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e1999-197">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="e1999-198">使用这些方法时，可以定义自己的存储实现，不使用 <xref:System.Windows.Media.VisualCollection> 。</span><span class="sxs-lookup"><span data-stu-id="e1999-198">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e1999-199"><paramref name="index" /> 小于零或 <paramref name="count" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="e1999-199"><paramref name="index" /> is less than zero or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e1999-200"><paramref name="index" /> 和 <paramref name="count" /> 未引用 <see cref="T:System.Windows.Media.VisualCollection" /> 中有效的元素范围。</span><span class="sxs-lookup"><span data-stu-id="e1999-200"><paramref name="index" /> and <paramref name="count" /> do not refer to a valid range of elements in the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e1999-201">获取可用于同步对 <see cref="T:System.Windows.Media.VisualCollection" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="e1999-201">Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <value><span data-ttu-id="e1999-202">一个 <see cref="T:System.Object" /> 类型的值。</span><span class="sxs-lookup"><span data-stu-id="e1999-202">A value of type <see cref="T:System.Object" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="visualCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e1999-203">此成员支持 WPF 基础结构，不应在代码中直接使用。</span><span class="sxs-lookup"><span data-stu-id="e1999-203">This member supports the WPF infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="e1999-204">有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="e1999-204">For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</span></span></summary>
        <returns><span data-ttu-id="e1999-205">一个可用于循环访问集合的对象。</span><span class="sxs-lookup"><span data-stu-id="e1999-205">An object that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
