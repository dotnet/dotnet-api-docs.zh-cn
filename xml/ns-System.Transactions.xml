<Namespace Name="System.Transactions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="275915022101f482de6c2a9fb92af94ca0003c21" /><Meta Name="ms.sourcegitcommit" Value="02dd069b9696eb4eee675b6541f86b2602076448" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/20/2020" /><Meta Name="ms.locfileid" Value="92235837" /></Metadata><Docs>
    <summary>包含允许你编写自己的事务应用程序和资源管理器的类。 具体地说，可以创建和参与（与一个或多个参与者）本地或分布式事务。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 `System.Transactions`基础结构通过支持 SQL Server、ADO.NET、MSMQ 和 Microsoft 分布式事务处理协调器 (MSDTC) 中启动的事务，使事务编程在整个平台中都简单有效。 它同时提供基于类的显式编程模型 <xref:System.Transactions.Transaction> ，以及使用类的隐式编程模型 <xref:System.Transactions.TransactionScope> ，在该模型中，事务由基础结构自动管理。 强烈建议使用易于开发的隐式模型。 若要开始使用，请参阅 [使用事务范围实现隐式事务](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)) 主题。 有关编写事务应用程序的详细信息，请参阅 [编写事务应用程序](/dotnet/framework/data/transactions/writing-a-transactional-application)。

 `System.Transactions` 还提供了用于实现资源管理器的类型。 基础结构的本地事务管理器 `System.Transactions` 允许使用可变资源或单个持久资源登记来有效地提交或回滚。 有关实现资源管理器的详细信息，请参阅 [实现资源管理器](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)。

 当其他持久资源管理器使用事务自行登记时，事务管理器还会通过基于磁盘的事务管理器（例如 DTC）进行协调，以透明方式将本地事务升级到分布式事务。 `System.Transactions` 基础结构提供增强性能的关键方式有两种。

-   动态升级，这意味着 `System.Transactions` 基础结构仅在事务实际需要时才会使用 MSDTC。 [事务管理升级](https://msdn.microsoft.com/library/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)主题中深入介绍了此区域。

-   可提升的登记，如果某个资源是参与事务的唯一实体，则允许该资源（如数据库）取得事务的所有权。 稍后，如果需要， `System.Transactions` 基础结构仍可将事务管理升级到 MSDTC。 这样进一步减少了使用 MSDTC 的机会。 [使用单阶段提交和可提升的单阶段通知](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/ms229980(v=vs.85))主题，深入了解了该区域。

 `System.Transactions` 定义三个信任级别，它们限制了对它所公开的资源类型的访问。 具体而言，可能是由部分信任的代码调用了 *system.web* 程序集，因为该程序集已使用 `AllowPartiallyTrustedCallers` 特性 (APTCA) 进行标记。 此特性实质上是移除了 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 权限集的隐式 `FullTrust` 权限，该权限在其他情况下会被自动置于每个类型的每个可公共访问的方法上。 但是，某些类型和成员还是需要更强的权限。

 下面列出了部分受信任的代码无法调用的类型和成员，因为它们使用以下声明性安全特性修饰：

 `PermissionSetAttribute(SecurityAction.LinkDemand, Name := "FullTrust")`

 System.web. EnlistDurable

 System.web. Transaction.enlistpromotablesinglephase

 TransactionInterop

 DistributedTransactionStarted。

 HostCurrentTransactionCallback。

 重新登记。

 RecoveryComplete。

 EnterpriseServicesInteropOption) 的，则为. Transaction. Transaction、system.exception (。

 M:System.Transactions.TransactionScope.TransactionScope (TransactionScopeOption、TransactionOptions、EnterpriseServicesInteropOption （）的) 

 有关各种信任级别的详细信息，请参阅 [访问资源中的安全信任级别](https://msdn.microsoft.com/library/8e45acbc-0d81-4f64-9da7-8f766aebff51)。

 核心开发 Technologies\Data Access\Transaction 处理 \

 有关如何使用命名空间的详细信息 `System.Transactions` ，可以参阅文档中 "核心开发 Technologies\Data Access\Transaction 处理" 部分下的概念文档 [事务处理](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/w97s6fw4(v=vs.85)) \\ 。 具体而言，你可以在以下主题中找到详细信息。

 [由系统提供的功能](https://msdn.microsoft.com/library/99cc5ce0-b7fd-4d78-a553-a3dd3f17ed45)

 [实现资源管理器](https://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)

 ]]></format>
    </remarks>
  </Docs>
</Namespace>
