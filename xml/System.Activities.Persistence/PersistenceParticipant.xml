<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1679491feac9ff4d1b427d46ebbd13dc3b3b5ad7" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86838789" /></Metadata><TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <TypeSignature Language="F#" Value="type PersistenceParticipant = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>此类允许 <see cref="T:System.Activities.WorkflowApplication" /> 和 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 均参与保留过程。 持久性参与者派生自 <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类或 <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> 类（<see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类的派生类），实现抽象方法，然后添加类的实例作为工作流实例扩展。 <see cref="T:System.Activities.WorkflowApplication" /> 和 <see cref="T:System.ServiceModel.WorkflowServiceHost" /> 在保留实例时查找此类扩展，并在适当的时间调用适当的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 宿主在保留实例时执行以下步骤（或阶段）：  
  
1.  收集要保留的值。  
  
2.  将整体结构化类的字段映射到单独的值。  
  
3.  向持久性提供程序发出 <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>。  
  
4.  在持久性事务下执行 I/O。  
  
 宿主将完成一个阶段，之后再开始下一个阶段。 例如，在保留时，宿主将从所有持久性参与者处收集值，之后再转移到第二个阶段。 在第二个阶段中，宿主会将第一个阶段中收集的所有值提供给第二个阶段中的所有持久性参与者进行映射。 在第三个阶段中，宿主会在调用 <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> 时将第一个和第二个阶段中收集的所有值提供给持久性提供程序。 然后，在第四个阶段中，宿主会在持久性事务下将所有收集的值提供给所有持久性 IO 参与者。  
  
 宿主在加载持久性实例时将执行以下阶段：  
  
1.  向持久性提供程序发出 <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> 和 <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand>。  
  
2.  在持久性事务下执行 I/O。  
  
3.  发布加载的值。  
  
 在最高级别，派生自 <xref:System.Activities.Persistence.PersistenceParticipant> 类的工作流实例扩展可以参与保留过程的第一个阶段（收集）和第二个阶段（映射），以及加载过程的第三个阶段（发布）。  派生自 PersistenceIOParticipant 类的工作流实例扩展另外还可以参与保留过程的第四个阶段以及加载过程的第二个阶段 (I/O)。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个从 <xref:System.Activities.Persistence.PersistenceParticipant> 派生的类。 此示例来自[聘用过程](/dotnet/framework/windows-workflow-foundation/samples/hiring-process)示例。  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建一个从 <xref:System.Activities.Persistence.PersistenceParticipant> 派生的类。 此示例来自[聘用过程](/dotnet/framework/windows-workflow-foundation/samples/hiring-process)示例。  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member CollectValues : IDictionary * IDictionary -&gt; unit&#xA;override this.CollectValues : IDictionary * IDictionary -&gt; unit" Usage="persistenceParticipant.CollectValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">要保持的读/写值。</param>
        <param name="writeOnlyValues">要保持的只写值。</param>
        <summary>宿主对自定义持久性参与者调用此方法，以收集要保留的读/写值和只写值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主机以 <xref:System.Runtime.DurableInstancing.InstanceValue> 集合的 <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> 对象的形式将读/写值包装在第一个字典中，并以 <xref:System.Runtime.DurableInstancing.InstanceValue> 对象的形式将只写值包装在第二个字典中（设置了 <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> 和 <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> 标志）。 有关详细信息，请参阅 <xref:System.Runtime.DurableInstancing.InstanceValueOptions>。  
  
> [!IMPORTANT]
>  由一个持久性段内所有持久性参与者之间的 <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> 实现提供的每个值均必须具有唯一的 XName。  
  
   
  
## Examples  
 下面的代码示例演示如何在一个从 <xref:System.Activities.Persistence.PersistenceParticipant> 派生的类中使用 CollectValues。 此示例来自[持久性参与者](/dotnet/framework/windows-workflow-foundation/persistence-participants)示例。  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;&#xA;override this.MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;" Usage="persistenceParticipant.MapValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">要保持的读/写值。</param>
        <param name="writeOnlyValues">要保持的只写值。</param>
        <summary>当宿主完成在第一个阶段中收集值的工作后，将调用此方法。 宿主会将由其在第一个阶段（CollectValues 阶段）中从所有持久性参与者中收集的值组成的两个只读字典转发给此方法用于映射。 主机会将此方法的返回的字典中的值添加到只写值的集合。</summary>
        <returns>包含要保留的附加只写值的字典。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由所有持久性参与者（包括在第一个阶段（即 CollectValues 阶段）中收集的所有值）之间的所有 <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> 方法的实现提供的每个值均必须具有唯一的 XName。  
  
   
  
## Examples  
 下面的代码示例演示如何在一个从 <xref:System.Activities.Persistence.PersistenceParticipant> 派生的类中使用 MapValues。 此示例来自[公司购买过程](/dotnet/framework/windows-workflow-foundation/samples/corporate-purchase-process)示例。  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberSignature Language="F#" Value="abstract member PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit&#xA;override this.PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit" Usage="persistenceParticipant.PublishValues readWriteValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">从持久性存储中加载的读/写值。 此字典与由在最近的持久性段中保留的读/写值组成的字典相对应。</param>
        <summary>主机调用此方法，并传递 <see cref="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData" /> 集合中所有加载的值（由 <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> 或 <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" /> 填充）作为字典参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何在一个从 <xref:System.Activities.Persistence.PersistenceParticipant> 派生的类中使用 PublishValues。 此示例来自[持久性参与者](/dotnet/framework/windows-workflow-foundation/persistence-participants)示例。  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
