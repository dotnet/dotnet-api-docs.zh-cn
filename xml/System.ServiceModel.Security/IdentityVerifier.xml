<Type Name="IdentityVerifier" FullName="System.ServiceModel.Security.IdentityVerifier">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e672c82793751b99f2e5f2b880ab8c9f9c6a6f49" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89909539" /></Metadata><TypeSignature Language="C#" Value="public abstract class IdentityVerifier" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IdentityVerifier extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.IdentityVerifier" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IdentityVerifier" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdentityVerifier abstract" />
  <TypeSignature Language="F#" Value="type IdentityVerifier = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="282ac-101">一个 <see langword="abstract" /> 基类，可以实现它以根据表示远程终结点的授权上下文验证所需标识，或从终结点地址创建标识。</span><span class="sxs-lookup"><span data-stu-id="282ac-101">An <see langword="abstract" /> base class that can be implemented to verify an expected identity against an authorization context that represents a remote endpoint, or to create an identity from an endpoint address.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="282ac-102">WCF 基础结构首先调用 <xref:System.ServiceModel.Security.IdentityVerifier.TryGetIdentity%2A> 方法，以便从消息中检索服务的标识。</span><span class="sxs-lookup"><span data-stu-id="282ac-102">The WCF infrastructure calls the <xref:System.ServiceModel.Security.IdentityVerifier.TryGetIdentity%2A> method first to retrieve the service's identity from the message.</span></span> <span data-ttu-id="282ac-103">然后，该基础结构将通过返回的 <xref:System.ServiceModel.Security.IdentityVerifier.CheckAccess%2A> 和 <xref:System.ServiceModel.EndpointIdentity> 调用 <xref:System.IdentityModel.Policy.AuthorizationContext> 方法。</span><span class="sxs-lookup"><span data-stu-id="282ac-103">Next, the infrastructure calls the <xref:System.ServiceModel.Security.IdentityVerifier.CheckAccess%2A> method with the returned <xref:System.ServiceModel.EndpointIdentity> and <xref:System.IdentityModel.Policy.AuthorizationContext>.</span></span>  
  
 <span data-ttu-id="282ac-104">有关实现类的详细信息，请参阅 [如何：创建自定义客户端标识验证](/dotnet/framework/wcf/extending/how-to-create-a-custom-client-identity-verifier)程序。</span><span class="sxs-lookup"><span data-stu-id="282ac-104">For more information about implementing the class, see [How to: Create a Custom Client Identity Verifier](/dotnet/framework/wcf/extending/how-to-create-a-custom-client-identity-verifier).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/wcf/extending/how-to-create-a-custom-client-identity-verifier"><span data-ttu-id="282ac-105">如何：创建自定义客户端标识验证程序</span><span class="sxs-lookup"><span data-stu-id="282ac-105">How To: Create a Custom Client Identity Verifier</span></span></related>
    <related type="Article" href="/dotnet/framework/wcf/feature-details/service-identity-and-authentication"><span data-ttu-id="282ac-106">指定用于验证的服务标识</span><span class="sxs-lookup"><span data-stu-id="282ac-106">Specifying the Identity of a Service for Authentication</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IdentityVerifier ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.IdentityVerifier.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IdentityVerifier();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="282ac-107">创建此类的实例。</span><span class="sxs-lookup"><span data-stu-id="282ac-107">Creates an instance of this class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public abstract bool CheckAccess (System.ServiceModel.EndpointIdentity identity, System.IdentityModel.Policy.AuthorizationContext authContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.EndpointIdentity identity, class System.IdentityModel.Policy.AuthorizationContext authContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.IdentityVerifier.CheckAccess(System.ServiceModel.EndpointIdentity,System.IdentityModel.Policy.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CheckAccess (identity As EndpointIdentity, authContext As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool CheckAccess(System::ServiceModel::EndpointIdentity ^ identity, System::IdentityModel::Policy::AuthorizationContext ^ authContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.EndpointIdentity * System.IdentityModel.Policy.AuthorizationContext -&gt; bool" Usage="identityVerifier.CheckAccess (identity, authContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identity" Type="System.ServiceModel.EndpointIdentity" />
        <Parameter Name="authContext" Type="System.IdentityModel.Policy.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="282ac-108">要验证的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-108">The <see cref="T:System.ServiceModel.EndpointIdentity" /> to verify.</span></span></param>
        <param name="authContext"><span data-ttu-id="282ac-109">测试 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 所依据的 <paramref name="identity" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-109">The <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> to test the <paramref name="identity" /> against.</span></span></param>
        <summary><span data-ttu-id="282ac-110">实现要验证标识的方法。</span><span class="sxs-lookup"><span data-stu-id="282ac-110">Implements a method to verify an identity.</span></span></summary>
        <returns><span data-ttu-id="282ac-111">如果验证了标识，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-111"><see langword="true" /> if the identity is verified; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="282ac-112">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-112">The default is <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefault">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.IdentityVerifier CreateDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Security.IdentityVerifier CreateDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.IdentityVerifier.CreateDefault" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefault () As IdentityVerifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ServiceModel::Security::IdentityVerifier ^ CreateDefault();" />
      <MemberSignature Language="F#" Value="static member CreateDefault : unit -&gt; System.ServiceModel.Security.IdentityVerifier" Usage="System.ServiceModel.Security.IdentityVerifier.CreateDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.IdentityVerifier</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="282ac-113">创建此类的默认实例。</span><span class="sxs-lookup"><span data-stu-id="282ac-113">Creates a default instance of this class.</span></span></summary>
        <returns><span data-ttu-id="282ac-114"><see cref="T:System.ServiceModel.Security.IdentityVerifier" /> 的默认实例。</span><span class="sxs-lookup"><span data-stu-id="282ac-114">A default instance of <see cref="T:System.ServiceModel.Security.IdentityVerifier" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIdentity">
      <MemberSignature Language="C#" Value="public abstract bool TryGetIdentity (System.ServiceModel.EndpointAddress reference, out System.ServiceModel.EndpointIdentity identity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIdentity(class System.ServiceModel.EndpointAddress reference, [out] class System.ServiceModel.EndpointIdentity&amp; identity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.IdentityVerifier.TryGetIdentity(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointIdentity@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryGetIdentity (reference As EndpointAddress, ByRef identity As EndpointIdentity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryGetIdentity(System::ServiceModel::EndpointAddress ^ reference, [Runtime::InteropServices::Out] System::ServiceModel::EndpointIdentity ^ % identity);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIdentity : System.ServiceModel.EndpointAddress * EndpointIdentity -&gt; bool" Usage="identityVerifier.TryGetIdentity (reference, identity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="identity" Type="System.ServiceModel.EndpointIdentity" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reference"><span data-ttu-id="282ac-115">用于创建标识的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-115">The <see cref="T:System.ServiceModel.EndpointAddress" /> to use for creating the identity.</span></span></param>
        <param name="identity"><span data-ttu-id="282ac-116">返回的 <see cref="T:System.ServiceModel.EndpointIdentity" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-116">The <see cref="T:System.ServiceModel.EndpointIdentity" /> that is returned.</span></span></param>
        <summary><span data-ttu-id="282ac-117">尝试从终结点创建标识。</span><span class="sxs-lookup"><span data-stu-id="282ac-117">Tries to create an identity from an endpoint.</span></span></summary>
        <returns><span data-ttu-id="282ac-118">如果返回了标识，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-118"><see langword="true" /> if the identity is returned; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="282ac-119">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="282ac-119">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="282ac-120">如果显式 <xref:System.ServiceModel.Security.IdentityVerifier> 尚未指定为 <xref:System.ServiceModel.DnsEndpointIdentity> 的一部分，则默认 <xref:System.ServiceModel.EndpointAddress.Uri%2A> 将基于 <xref:System.ServiceModel.EndpointIdentity> 的主机名部分创建 <xref:System.ServiceModel.EndpointAddress>。</span><span class="sxs-lookup"><span data-stu-id="282ac-120">The default <xref:System.ServiceModel.Security.IdentityVerifier> creates a <xref:System.ServiceModel.DnsEndpointIdentity> based on the hostname portion of <xref:System.ServiceModel.EndpointAddress.Uri%2A> if an explicit <xref:System.ServiceModel.EndpointIdentity> has not been specified as part of the <xref:System.ServiceModel.EndpointAddress>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
