<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0cf43595f2370cd144e620b8b5b2998fc3954acf" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89883477" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供安全对话服务的凭据设置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全对话涉及到多条消息的交换，并且使用安全上下文令牌 (SCT) 来确保安全性。 在通信会话的整个生存期内，通信各方将共享 SCT。 一个服务可以颁发两种不同类型的 SCT：  
  
-   第一种是基于会话的 SCT，其中包含唯一 id。消息只包含 id，服务维护一个状态映射缓存，该缓存在 SCT id 和内容之间进行映射， (如声明、安全密钥等) 。 功能良好的客户端必须发送 SCT 取消，以帮助服务优化缓存资源。 如果通过调用 <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> 参数等于 `requireCancellation` 的 `true` 来实例化此类，则会以这种方式颁发 SCT。  
  
-   第二种是独立的 SCT，其位于客户端的 Cookie 中。 这种 SCT 包含整个状态信息，因此，既不需要服务管理状态，也不需要客户端取消 SCT。 有时称为“Cookie 模式”的 SCT。 由于该 SCT 包含整个状态信息，因此，其大小要比基于会话的类型大。 使用基于会话的 SCT，服务可以存储大量状态信息。 不过，第二种类型是独立的，因此它可以用于整个服务生存期，而且在服务关闭和重新启动期间仍持续存在。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于 Cookie 序列化的 <see cref="T:System.Type" /> 声明的集合。</summary>
        <value>用于 Cookie 序列化的 <see cref="T:System.Type" /> 声明的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要将声明序列化到 SCT cookie 中，Windows Communication Foundation (WCF) 使用 <xref:System.Runtime.Serialization.DataContractSerializer> 作为默认值。 因为声明资源是可扩展的，所以 WCF 允许提供已知资源类型的列表。 这对 <xref:System.Runtime.Serialization.DataContractSerializer> 在反序列化 Cookie 中的声明过程中返回原始强类型对象有所帮助。  
  
   
  
## Examples  
 下面的代码演示如何获取此属性。  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于对 Cookie 序列化进行编码和解码的自定义 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />。</summary>
        <value>一个 <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> 对象，它是自定义的 <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在“Cookie 模式”中，服务会以 Cookie 形式向客户端颁发安全上下文令牌 (SCT)，如此一来，服务就无需维护任何安全状态。 客户端会在请求消息中将 Cookie 发送回去，如此一来，服务就会了解如何取消对请求消息的保护以及如何对其进行验证。 由于通常在不安全的网络上传输 SCT，所以必须对其加以保护。  
  
 默认情况下，Windows Communication Foundation (WCF) 使用 <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> 类通过数据保护 API (DPAPI) 来保护 cookie。 若要让 DPAPI 在网络场环境中发挥作用，所有后端服务都必须使用相同的域用户帐户运行。 也就是说，如果服务是 Web 承载的类型，则必须将 Internet 信息服务 (IIS) 辅助进程配置为以域用户身份运行。  
  
 此属性使您可以使用自定义的 <xref:System.ServiceModel.Security.SecurityStateEncoder> 对 Cookie 进行加密和解密，而不依赖 DPAPI。  
  
   
  
## Examples  
 下面的代码演示如何设置此属性。  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
