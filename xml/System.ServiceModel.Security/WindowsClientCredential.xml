<Type Name="WindowsClientCredential" FullName="System.ServiceModel.Security.WindowsClientCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="039e2b95db3cfeedb907549796e85fde6761eff2" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89909369" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowsClientCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowsClientCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.WindowsClientCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowsClientCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsClientCredential sealed" />
  <TypeSignature Language="F#" Value="type WindowsClientCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6e0be-101">使您可以指定与用于表示客户端的 Windows 凭据相关的属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-101">Allows you to specify properties related to Windows credentials to be used to represent the client.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e0be-102"><xref:System.ServiceModel.Security.WindowsClientCredential> 使您可以设置与服务进行通信时使用的 Windows 客户端属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-102">The <xref:System.ServiceModel.Security.WindowsClientCredential> enables the setting of Windows client properties used when communicating with a service.</span></span> <span data-ttu-id="6e0be-103"><xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> 会设置服务在模拟客户端时可采用的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="6e0be-103">The <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> sets the level of impersonation the service can assume when impersonating the client.</span></span> <span data-ttu-id="6e0be-104"><xref:System.ServiceModel.Security.WindowsClientCredential.ClientCredential%2A> 使客户端能够使用用户名和密码向服务进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-104">The <xref:System.ServiceModel.Security.WindowsClientCredential.ClientCredential%2A> enables a client to authenticate with username and password to the service.</span></span> <span data-ttu-id="6e0be-105"><xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A> 会确定如果不使用 Kerberos，是否可以使用 NTLM 对客户端进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-105">The <xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A> determines whether NTLM can be used to authenticate the client if Kerberos is not used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e0be-106">下面的示例创建一个客户端并获取对 <xref:System.ServiceModel.Security.WindowsClientCredential> 的引用。</span><span class="sxs-lookup"><span data-stu-id="6e0be-106">The following example creates a client and gets a reference to the <xref:System.ServiceModel.Security.WindowsClientCredential>.</span></span> <span data-ttu-id="6e0be-107">然后，代码将 <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> 更改为新值。</span><span class="sxs-lookup"><span data-stu-id="6e0be-107">The code then changes the <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> to a new value.</span></span>  
  
 [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]
 [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowedImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowedImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel AllowedImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); void set(System::Security::Principal::TokenImpersonationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.AllowedImpersonationLevel : System.Security.Principal.TokenImpersonationLevel with get, set" Usage="System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e0be-108">获取或设置允许的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="6e0be-108">Gets or sets the allowed impersonation level.</span></span></summary>
        <value><span data-ttu-id="6e0be-109"><see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="6e0be-109">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e0be-110">此属性指定使用 Windows SSPI 协商身份验证时客户端授予服务器的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="6e0be-110">This property specifies the impersonation level granted by the client to the server when using Windows SSPI Negotiate authentication.</span></span> <span data-ttu-id="6e0be-111">请注意，服务器在模拟客户端令牌时所获取的模拟级别不仅仅是此设置的功能。</span><span class="sxs-lookup"><span data-stu-id="6e0be-111">Note that the impersonation level obtained by the server when it impersonates the client token is not solely a function of this setting.</span></span> <span data-ttu-id="6e0be-112">它还是服务运行时所使用的帐户的相关特权和域设置的功能。</span><span class="sxs-lookup"><span data-stu-id="6e0be-112">It is also a function of the associated privileges and domain settings for the account in which the service is running.</span></span>  
  
 <span data-ttu-id="6e0be-113">客户端必须使用此属性，明确地设置允许的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="6e0be-113">The client must explicitly set the allowed impersonation level using this property.</span></span>  
  
 <span data-ttu-id="6e0be-114">如果客户端指定匿名模拟，即使服务上不执行模拟，客户端也总是匿名向服务进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-114">When the client specifies anonymous impersonation the client always authenticates to the service as anonymous even when no impersonation is performed on the service.</span></span> <span data-ttu-id="6e0be-115">这是由于基础 Windows 操作系统的行为所致。</span><span class="sxs-lookup"><span data-stu-id="6e0be-115">This is due to underlying Windows operating system behavior.</span></span>  
  
 <span data-ttu-id="6e0be-116">有关 Windows 模拟的详细信息，请参阅 " [模拟和还原](https://go.microsoft.com/fwlink/?LinkId=96178)"。</span><span class="sxs-lookup"><span data-stu-id="6e0be-116">For more information about Windows impersonation, go to [Impersonating and Reverting](https://go.microsoft.com/fwlink/?LinkId=96178).</span></span> <span data-ttu-id="6e0be-117">有关使用 Windows Communication Foundation 的模拟的详细信息，请参阅 [委派和模拟](/dotnet/framework/wcf/feature-details/delegation-and-impersonation-with-wcf)。</span><span class="sxs-lookup"><span data-stu-id="6e0be-117">For more information about impersonation using Windows Communication Foundation, see [Delegation and Impersonation](/dotnet/framework/wcf/feature-details/delegation-and-impersonation-with-wcf).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e0be-118">下面的示例演示如何设置此属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-118">The following example shows how to set this property.</span></span>  
  
 [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]
 [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowNtlm">
      <MemberSignature Language="C#" Value="public bool AllowNtlm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowNtlm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowNtlm As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowNtlm { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowNtlm : bool with get, set" Usage="System.ServiceModel.Security.WindowsClientCredential.AllowNtlm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("This property is deprecated and is maintained for backward compatibility only. The local machine policy will be used to determine if NTLM should be used.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property is deprecated and is maintained for backward compatibility only. The local machine policy will be used to determine if NTLM should be used.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e0be-119">获取或设置一个值，该值指示是否应该允许 NTLM 身份验证作为 Windows SSPI 协商身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-119">Gets or sets a value that indicates whether NTLM authentication should be allowed as Windows SSPI Negotiate authentication.</span></span></summary>
        <value><span data-ttu-id="6e0be-120">如果允许 NTLM 身份验证作为 Windows SSPI 协商身份验证，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e0be-120"><see langword="true" /> if NTLM authentication should be allowed as Windows SSPI Negotiate authentication, <see langword="false" /> otherwise.</span></span> <span data-ttu-id="6e0be-121">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6e0be-121">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e0be-122">如果 Kerberos 不可用，则将此属性设置为 `true` 可令身份验证降级到 NTLM。</span><span class="sxs-lookup"><span data-stu-id="6e0be-122">Setting this property to `true` allows authentication to downgrade to NTLM if Kerberos is not available.</span></span>  
  
 <span data-ttu-id="6e0be-123">如果将此属性设置为，则 `false` Windows Communication Foundation (WCF) 以便在使用 NTLM 时尽力引发异常。</span><span class="sxs-lookup"><span data-stu-id="6e0be-123">Setting this property to `false` causes Windows Communication Foundation (WCF) to make a best-effort to throw an exception if NTLM is used.</span></span> <span data-ttu-id="6e0be-124">请注意，将此属性设置为 `false` 可能不阻止通过网络发送 NTLM 凭据。</span><span class="sxs-lookup"><span data-stu-id="6e0be-124">Note that setting this property to `false` may not prevent NTLM credentials from being sent over the wire.</span></span>  
  
 <span data-ttu-id="6e0be-125">某些部署（如工作组和本地帐户）要求 NTLM 身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-125">Certain deployments such as workgroups and local accounts require NTLM authentication.</span></span> <span data-ttu-id="6e0be-126">在此类部署中将此标志设置为会 `false` 导致身份验证在使用 WCF 时失败。</span><span class="sxs-lookup"><span data-stu-id="6e0be-126">Setting this flag to `false` in such deployments result in authentication failures when using WCF.</span></span> <span data-ttu-id="6e0be-127">在要求相互身份验证（仅有 Kerberos 支持）的部署中，请将此标志设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="6e0be-127">In a deployment that requires mutual authentication (only supported by Kerberos), set this flag to `false`.</span></span>  
  
 <span data-ttu-id="6e0be-128">NTLM (Windows NT LAN Manager) 是一种应用于网络（包括运行 Windows NT 操作系统的系统）和独立系统的身份验证协议。</span><span class="sxs-lookup"><span data-stu-id="6e0be-128">NTLM (Windows NT LAN Manager) is the authentication protocol used on networks that include systems running the Windows NT operating system, and on stand-alone systems.</span></span>  
  
 <span data-ttu-id="6e0be-129">与 NTLM 相比，Microsoft Kerberos 安全包可以为网络上的系统提供更高的安全性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-129">The Microsoft Kerberos security package adds greater security than NTLM to systems on a network.</span></span> <span data-ttu-id="6e0be-130">尽管 Microsoft Kerberos 是优先选择的协议，但 NTLM 仍受支持，而且如果网络中包括运行 Windows NT 4.0 及更低版本的系统，则必须使用 NTLM 来进行网络身份验证，而在独立系统中也必须使用该协议。</span><span class="sxs-lookup"><span data-stu-id="6e0be-130">Although Microsoft Kerberos is the protocol of choice, NTLM is still supported and must be used for network authentication if the network includes systems running versions of Windows NT 4.0 and earlier, and on stand-alone systems.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential ClientCredential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkCredential ClientCredential" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientCredential As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkCredential ^ ClientCredential { System::Net::NetworkCredential ^ get(); void set(System::Net::NetworkCredential ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientCredential : System.Net.NetworkCredential with get, set" Usage="System.ServiceModel.Security.WindowsClientCredential.ClientCredential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6e0be-131">获取或设置 Windows 客户端凭据。</span><span class="sxs-lookup"><span data-stu-id="6e0be-131">Gets or sets the Windows client credential.</span></span></summary>
        <value><span data-ttu-id="6e0be-132">客户端的 <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="6e0be-132">The <see cref="T:System.Net.NetworkCredential" /> for the client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e0be-133">默认情况下，WCF 使用当前线程的凭据来执行 Windows SSPI 协商身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-133">By default, the current thread's credentials are used by WCF for doing Windows SSPI Negotiate authentication.</span></span>  
  
 <span data-ttu-id="6e0be-134">若要以另一个主体对客户端进行身份验证，请更改此属性返回的 <xref:System.Net.NetworkCredential> 类的实例的属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-134">To authenticate the client as another principal, change the properties of the instance of the <xref:System.Net.NetworkCredential> class that is returned by this property.</span></span> <span data-ttu-id="6e0be-135">或者，创建 <xref:System.Net.NetworkCredential> 类的新实例，并将其分配给此属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-135">Alternatively, create a new instance of the <xref:System.Net.NetworkCredential> class and assign it to this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e0be-136">下面的代码示例演示如何以不同的主体对客户端进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="6e0be-136">The following code examples show how to authenticate the client as a different principal.</span></span>  
  
 <span data-ttu-id="6e0be-137">这就是如何更改此属性返回的 <xref:System.Net.NetworkCredential> 类的实例的属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-137">This is how to change the properties of the instance of the <xref:System.Net.NetworkCredential> class that is returned by this property.</span></span>  
  
 [!code-csharp[WindowsClientCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#2)]  
  
 <span data-ttu-id="6e0be-138">这就是如何创建 <xref:System.Net.NetworkCredential> 类的新实例以及将其分配给此属性。</span><span class="sxs-lookup"><span data-stu-id="6e0be-138">This is how to create a new instance of the <xref:System.Net.NetworkCredential> class and assign it to this property.</span></span>  
  
 [!code-csharp[WindowsClientCredential#3](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
