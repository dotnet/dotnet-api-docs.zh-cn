<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="108fa45c855f835e1c5677a9b4d31536a7c80069" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86678611" /></Metadata><TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理角色中的用户成员资格，以便在 ASP.NET 应用程序中进行授权检查。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 ASP.NET 角色管理使你可以基于用户组（称为角色）来管理应用程序的授权。 将用户分配到角色后，你可以根据角色（而不是基于用户名指定授权）来控制对 Web 应用程序的不同部分或功能的访问。 例如，员工应用程序可能具有角色（如经理、员工、董事等），其中为每个角色指定了不同的权限。

 用户可以属于多个角色。 例如，如果您的站点是论坛，则某些用户可能是成员和版主的角色。 您可以将每个角色定义为对站点具有不同的权限，同时，在这两个角色中的用户将具有这两组权限。

 若要为 ASP.NET 应用程序启用角色管理，请[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))使用 `system.web` 应用程序的 Web.config 文件中部分的 roleManager 元素，如下面的示例中所示。

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />
  </connectionStrings>

  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="login.aspx"
      name=".ASPXFORMSAUTH" />
    </authentication>

  <roleManager defaultProvider="SqlProvider"
    enabled="true"
    cacheRolesInCookie="true"
    cookieName=".ASPROLES"
    cookieTimeout="30"
    cookiePath="/"
    cookieRequireSSL="false"
    cookieSlidingExpiration="true"
    cookieProtection="All" >
    <providers>
      <add
        name="SqlProvider"
        type="System.Web.Security.SqlRoleProvider"
        connectionStringName="SqlServices"
        applicationName="SampleApplication" />
      </providers>
    </roleManager>
  </system.web>
</configuration>
```

 你可以在 Web 应用程序的配置文件中或在代码中以编程方式指定授权规则。 例如，Web.config 文件中的以下 [授权](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8d82143t(v=vs.100)) 部分要求用户通过拒绝) 匿名用户登录 (，然后仅允许管理员角色中的用户拥有访问权限。

```
<authorization>
  <deny users="?" />
  <allow roles="Administrators" />
  <deny users="*" />
</authorization>
```

 如果你使用 `authorization` 应用程序的 Web.config 文件中的部分指定基于角色的授权，则你的应用程序的用户必须提供经过身份验证的用户标识。 可以使用 Windows 或 Forms 身份验证对用户进行身份验证。 不能将匿名用户分配到角色。 角色可以单独使用，也可以与 ASP.NET 类一起使用 <xref:System.Web.Security.Membership> 。

 若要以编程方式验证角色成员身份，可以将 <xref:System.Web.Security.Roles> 类或 <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> 属性与 <xref:System.Web.Security.Roles.IsUserInRole%2A> 方法一起使用，也可以将 <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> 属性与方法一起使用 <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> 。 有关以编程方式检查角色成员身份的示例代码，请参阅本主题中的 "示例" 部分。

 <xref:System.Web.Security.Roles>类还允许您创建和删除角色，并向角色添加用户或从中删除用户。

> [!NOTE]
>  如果已将应用程序配置为使用 <xref:System.Web.Security.WindowsTokenRoleProvider> 类，则不能修改角色或角色成员身份。 <xref:System.Web.Security.WindowsTokenRoleProvider>类只验证 Windows 安全组中的成员身份。 在这种情况下，你必须使用 Windows 用户帐户管理而不是 ASP.NET 角色来创建和删除组以及管理组成员身份。

 你可以在多个数据源中存储角色信息。

-   可以使用类根据 <xref:System.Web.Security.WindowsTokenRoleProvider> Windows 组中的成员身份检索角色信息。

-   您可以使用类将角色信息存储在 SQL Server 数据库中 <xref:System.Web.Security.SqlRoleProvider> 。

-   如果你有现有的角色信息，或想要在中存储角色信息并从 Windows、授权存储或 SQL Server 之外的数据源中检索角色信息，则可以通过创建继承抽象类的类来实现自定义角色提供程序 <xref:System.Web.Security.RoleProvider> 。 有关详细信息，请参阅 [实现角色提供程序](https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100))。

 如果用户的浏览器接受 cookie，则可以在用户计算机上的 cookie 中存储该用户的角色信息。 在每个页面请求上，ASP.NET 从 cookie 读取该用户的角色信息。 这可以减少数据源检索角色信息所需的通信量，从而提高应用程序性能。 如果用户的角色信息太长，无法存储在 cookie 中，则 ASP.NET 会将最近使用的角色信息存储在 cookie 中，然后根据需要在数据源中查找其他角色信息。 如果用户的浏览器不支持 cookie 或 cookie 处于禁用状态，则不会在 cookie 中缓存角色信息。

 你可以通过在 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> 配置 ASP.NET 角色时指定属性来提高 cookie 中缓存的角色名称的可靠性。 默认值 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> 为 `All` ，它将加密 cookie 中的角色名称并验证 cookie 内容是否未被更改。



## Examples
 下面的示例演示了配置为同时使用 ASP.NET 和 ASP.NET 角色并使用将 <xref:System.Web.Security.SqlRoleProvider> 成员身份和角色信息存储在 SQL Server 数据库中的应用程序的 Web.config 文件。 使用 forms 身份验证对用户进行身份验证，并且仅允许管理员角色中的用户访问应用程序。

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />
  </connectionStrings>

  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="login.aspx"
      name=".ASPXFORMSAUTH" />
    </authentication>

    <authorization>
      <deny users="?" />
      <allow roles="Administrators" />
      <deny users="*" />
    </authorization>

    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">
    </membership>

    <roleManager defaultProvider="SqlProvider"
      enabled="true"
      cacheRolesInCookie="true"
      cookieName=".ASPROLES"
      cookieTimeout="30"
      cookiePath="/"
      cookieRequireSSL="true"
      cookieSlidingExpiration="true"
      cookieProtection="All" >

      <providers>
        <clear />
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlRoleProvider"
          connectionStringName="SqlServices"
          applicationName="SampleApplication" />
        </providers>

    </roleManager>
  </system.web>
</configuration>
```

 下面的代码示例以编程方式检查登录用户是否是管理员角色，然后允许用户查看其他用户的角色。



 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要添加到指定角色的用户名。</param>
        <param name="roleName">要将指定的用户名添加到的角色。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.AddUsersToRole%2A>方法调用默认的角色提供程序来将指定用户与数据源中的指定角色关联。

 如果你的应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 类，则在调用方法的过程中执行的数据库更新将在 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> 一个事务中进行。 如果遇到错误（如已在指定角色中的用户名），则将回滚该事务，并且不执行任何更新。

> [!NOTE]
>  用户名和角色名称不能包含逗号。



## Examples
 下面的代码示例将一个或多个用户添加到角色，或根据用户输入从角色中删除用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

<paramref name="usernames" /> 的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。

- 或 -

<paramref name="usernames" /> 中的一个元素是空字符串或包含逗号 (,)。

- 或 -

 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要添加到指定角色的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色的名称。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.AddUsersToRoles%2A>方法调用默认的角色提供程序，以将指定用户与数据源中的指定角色关联。

 如果你的应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 类，则在调用方法的过程中执行的数据库更新将在 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> 一个事务中进行。 如果遇到错误（如已在指定角色中的用户名），则将回滚该事务，并且不执行任何更新。

> [!NOTE]
>  用户名和角色名称不能包含逗号。



## Examples
 下面的代码示例将一个或多个用户添加到一个或多个角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。

- 或 -

<paramref name="usernames" /> 中的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号 (,)。

- 或 -

<paramref name="usernames" /> 中的一个用户是空字符串或包含逗号 (,)。

- 或 -

 <paramref name="roleNames" /> 包含重复的元素。

- 或 -

 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要添加到指定角色中的用户名。</param>
        <param name="roleName">要将指定的用户名添加到的角色。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.AddUserToRole%2A>方法调用默认的角色提供程序来将指定用户与数据源中的指定角色关联。

> [!NOTE]
>  用户名和角色名称不能包含逗号。



## Examples
 下面的代码示例将一个用户添加到角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。

- 或 -

 <paramref name="username" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。

 - 或 -

 用户已分配给指定的角色。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">要添加到指定角色中的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色。</param>
        <summary>将指定的用户添加到指定的角色中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.AddUserToRoles%2A>方法调用默认的角色提供程序，以便将指定的用户与数据源中的指定角色关联。

 如果你的应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 类，则在调用方法的过程中执行的数据库更新将在 <xref:System.Web.Security.Roles.AddUserToRoles%2A> 一个事务中进行。 如果遇到错误（如已在指定角色中的用户名），则将回滚该事务，并且不执行任何更新。

> [!NOTE]
>  用户名和角色名称不能包含逗号。



## Examples
 下面的代码示例将一个用户添加到一个或多个角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。

- 或 -

 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号 (,)。

- 或 -

 <paramref name="username" /> 为空字符串或者包含逗号 (,)。

- 或 -

 <paramref name="roleNames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要存储和检索其角色信息的应用程序的名称。</summary>
        <value>要存储和检索其角色信息的应用程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.ApplicationName%2A>类使用属性 <xref:System.Web.Security.Roles> 将用户和角色与不同的应用程序相关联。 这使多个应用程序可以使用同一数据源来存储用户和角色信息，而不会在重复用户名或重复角色名称之间发生冲突。 多个 ASP.NET 应用程序可以通过在属性中指定相同的值，来使用相同的数据源 <xref:System.Web.Security.Roles.ApplicationName%2A> 。 可以通过 <xref:System.Web.Security.Roles.ApplicationName%2A> 编程方式设置该属性，也可以通过使用属性以声明方式在 Web 应用程序的配置文件中设置该属性 `applicationName` 。

 如果你的 Web 应用程序使用的是 <xref:System.Web.Security.SqlRoleProvider> 类，并且没有为 `applicationName` 配置文件中的属性指定值，则 <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> 使用当前属性的属性值 <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> 。

> [!CAUTION]
>  由于单个默认角色提供程序实例用于对象所提供的所有请求 <xref:System.Web.HttpApplication> ，因此您可以同时执行多个请求并尝试设置 <xref:System.Web.Security.Roles.ApplicationName%2A> 属性值。 <xref:System.Web.Security.Roles.ApplicationName%2A>对于多个写入，属性不是线程安全的，并且更改 <xref:System.Web.Security.Roles.ApplicationName%2A> 属性值可能会导致应用程序的多个用户产生意外行为。 除非有必要，否则应避免编写代码以使用户能够设置 <xref:System.Web.Security.Roles.ApplicationName%2A> 属性。 可能需要设置属性的应用程序的一个示例 <xref:System.Web.Security.Roles.ApplicationName%2A> 是管理多个应用程序的角色数据的管理应用程序。 此类应用程序应为单用户应用程序，而不是 Web 应用程序。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 `applicationName` 为 `MyApplication` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前用户的角色是否已缓存在某个 Cookie 中。</summary>
        <value>如果当前用户的角色已缓存在某个 Cookie 中，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> Web.config 文件中的属性设置为 `true` ，则会将每个用户的角色信息存储在一个 cookie 中。 当角色管理检查以确定用户是否属于特定角色时，在调用角色提供程序以检查数据源角色列表之前，将检查角色 cookie。 Cookie 会动态更新，以缓存最近验证的角色名称。

 你可以通过在 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> 配置 ASP.NET 角色时指定属性来提高 cookie 中缓存的角色名称的可靠性。 默认值 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> 为 `All` ，它将加密 cookie 中的角色名称并验证 cookie 内容是否未被更改。

> [!NOTE]
>  由于角色名称可以与数据源分开缓存，因此，在数据源中对角色管理的更改可能不会反映在缓存的值中。 在这种情况下，用户必须关闭并重新打开其浏览器，才能清除缓存的 cookie 值。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 `cacheRolesInCookie` 为 `true` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
   </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其中缓存角色名称的 Cookie 的名称。</summary>
        <value>在其中缓存角色名称的 Cookie 的名称。 默认值是 .ASPXROLES。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 可以通过设置 `cookieName` ASP.NET 应用程序的 Web.config 文件中的属性，指定用于为应用程序缓存角色的 cookie 的名称。 当你希望唯一标识应用程序的 cookie 或在多个应用程序（如域 cookie）之间共享 cookie 时，此方法非常有用。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 `cookieName` 为。ASPROLES.

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取缓存角色名称的 Cookie 的路径。</summary>
        <value>在其中缓存角色名称的 Cookie 的路径。 默认值是 /。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通过在 `cookiePath` ASP.NET 应用程序的 Web.config 文件中设置属性，可以指定为应用程序缓存角色的 cookie 的路径。 有关 cookie 路径的详细信息，请参阅 <xref:System.Web.HttpCookie.Path%2A> 。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 `cookiePath` 为/MyApplication。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示如何保护在 Cookie 中缓存的角色名称的值。</summary>
        <value><see cref="T:System.Web.Security.CookieProtection" /> 枚举值的其中一个值指示如何保护在 Cookie 中缓存的角色名称。 默认值为 <see langword="All" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通过在 `cookieProtection` ASP.NET 应用程序的 Web.config 文件中设置属性，可以指定为应用程序缓存角色的 cookie 的保护。 `cookieProtection`特性采用一个 <xref:System.Web.Security.CookieProtection> 枚举值，该值指示是否对角色名称进行加密、验证和/或验证。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将 `cookieProtection` 属性设置为 `Encrypted` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="Encrypted" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示角色名称 Cookie 是否需要 SSL 以便返回到服务器。</summary>
        <value>如果需要 SSL 以便将角色名称 Cookie 返回到服务器，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 通过 `cookieRequireSSL` 在 ASP.NET 应用程序的 Web.config 文件中设置属性，可以指定是否需要 SSL (安全套接字层) 将角色名称 cookie 返回到应用程序中的服务器。 有关详细信息，请参阅 <xref:System.Web.HttpCookie.Secure%2A>。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将设置 `cookieRequireSSL` 为 `true` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="true"
  cookieSlidingExpiration="true"
  cookieProtection="Encrypted" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示是否将要定期重置角色名称 Cookie 的到期日期和时间。</summary>
        <value>如果将要定期重置角色名称 Cookie 的到期日期和时间，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 你可以使用 `cookieSlidingExpiration` ASP.NET 应用程序的 Web.config 文件中的属性指定是否要使用每个响应重置角色名称 cookie 的到期日期和时间。 如果 `true` 为，则 cookie 过期时间将最初设置为当前日期和时间加上 <xref:System.Web.Security.Roles.CookieTimeout%2A> 分钟。 当用户继续主动使用 ASP.NET 应用程序时，如果剩余的不到一半，则 cookie 的到期日期和时间将自动刷新 <xref:System.Web.Security.Roles.CookieTimeout%2A> 。 有关更多信息，请参见 <xref:System.Web.HttpCookie.Expires%2A> 属性。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> 为 `false` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="true"
  cookieSlidingExpiration="false"
  cookieProtection="Encrypted" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取角色 Cookie 到期前的分钟数。</summary>
        <value>指定角色 Cookie 到期前的分钟数的整数。 默认值为 30 分钟。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.CookieTimeout%2A>当属性为时，使用属性 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> `true` ，并为角色 cookie 指定生存时间（以分钟为单位）。 若要设置 <xref:System.Web.Security.Roles.CookieTimeout%2A> 值，请将 `cookieTimeout` 属性添加到 ASP.NET 应用程序 Web.config 文件中的 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 元素，并指定一个整数值。

 如果 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> 为 `false` ，则忽略此属性。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 <xref:System.Web.Security.Roles.CookieTimeout%2A> 为30分钟。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/MyApplication"
  cookieRequireSSL="true"
  cookieSlidingExpiration="true"
  cookieProtection="Encrypted" >
  <providers>
  <add
    name="SqlProvider"
    type="System.Web.Security.SqlRoleProvider"
    connectionStringName="SqlServices"
    applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示角色名称 Cookie 是基于会话的还是持久性的。</summary>
        <value>如果角色名称 Cookie 是持久性 Cookie，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.CreatePersistentCookie%2A>使用 `createPersistentCookie` [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))配置元素的属性在 ASP.NET 应用程序的配置中设置属性值。

 如果为 `false` ，则角色名称 cookie 是会话 cookie，即关闭浏览器后会丢失 cookie。 如果为 `true` ，则角色名称 cookie 是可跨多个浏览器会话使用的持久性 cookie。 持久性 cookie 的到期日期和时间设置为当前日期和时间加上值， <xref:System.Web.Security.Roles.CookieTimeout%2A> 以分钟为单位。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要创建的角色的名称。</param>
        <summary>将新的角色添加到数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.CreateRole%2A>方法将角色名称添加到数据源。 <xref:System.Web.Security.Roles.CreateRole%2A> 调用 <xref:System.Web.Security.RoleProvider.CreateRole%2A> 默认角色提供程序的方法，将指定的角色添加到数据源。

> [!NOTE]
>  角色名称不能包含逗号。



## Examples
 下面的代码示例在数据源中创建一个新的角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。

- 或 -

 <paramref name="roleName" /> 包含一个逗号。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除在其中缓存角色名称的 Cookie。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.DeleteCookie%2A>方法清除用于缓存角色名称的 cookie 的内容。 有关缓存角色名称的详细信息，请参阅 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 。



## Examples
 下面的代码示例调用 <xref:System.Web.Security.Roles.DeleteCookie%2A> 方法，以便在用户登录时清除任何缓存的角色名称。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从数据源移除一个角色。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <summary>从数据源移除一个角色。</summary>
        <returns>如果从数据源中删除 <paramref name="roleName" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.DeleteRole%2A>方法从数据源中删除角色名称。 <xref:System.Web.Security.Roles.DeleteRole%2A> 调用 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> 默认角色提供程序的方法，以便从数据源中删除指定的角色。

 如果由参数标识的角色 `roleName` 具有一个或多个成员，则会引发异常，并且不会删除该角色。



## Examples
 下面的代码示例从数据源中删除一个角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 具有一个或多个成员。

- 或 -

未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <param name="throwOnPopulatedRole">如果为 <see langword="true" />，则当 <paramref name="roleName" /> 包含一个或多个成员时将引发异常。</param>
        <summary>从数据源移除一个角色。</summary>
        <returns>如果从数据源中删除 <paramref name="roleName" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.DeleteRole%2A>方法从数据源中删除角色名称。 <xref:System.Web.Security.Roles.DeleteRole%2A> 调用 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> 默认角色提供程序的方法，以便从数据源中删除指定的角色。

 如果 `throwOnPopulatedRole` 为 `true` ，则将引发异常，并且如果由参数标识的角色 `roleName` 具有一个或多个成员，则不会删除该角色。 如果 `throwOnPopulatedRole` 为 `false` ，则无论角色是否为空，都将被删除。



## Examples
 下面的代码示例从数据源中删除一个角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 是一个空字符串。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 具有一个或多个成员且 <paramref name="throwOnPopulatedRole" /> 为 <see langword="true" />。

- 或 -

未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取角色名称 Cookie 的域的值。</summary>
        <value>角色名称 Cookie 的 <see cref="P:System.Web.HttpCookie.Domain" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.Domain%2A>使用 `domain` [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100))配置元素的属性在 ASP.NET 应用程序的配置中设置属性值。

 如果未在域特性的配置中指定值，则属性将 <xref:System.Web.Security.Roles.Domain%2A> 返回 `null` ，且角色名称 cookie 域默认为属性的行为 <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> 。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Enabled As Boolean" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool" Usage="System.Web.Security.Roles.Enabled" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用来指示是否为当前 Web 应用程序启用角色管理的值。</summary>
        <value>如果启用了角色管理，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 `enabled` 为 `true` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作为搜索范围的角色。</param>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>获取属于指定角色的用户的列表，其中用户名包含要匹配的指定用户名。</summary>
        <returns>一个字符串数组，包含用户名与 <paramref name="usernameToMatch" /> 匹配且是指定角色的成员的所有用户的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> 返回角色中用户的列表，其中用户名包含为配置的提供的的匹配项 `usernameToMatch` `applicationName` 。 例如，如果将 `usernameToMatch` 参数设置为 "user"，则返回用户 "user1"、"用户 2"、"user3" 等。 按用户名按字母顺序返回用户。

 <xref:System.Web.Security.SqlRoleProvider>使用 LIKE 子句对参数执行搜索 `usernameToMatch` 。 可在参数值中使用 LIKE 子句中 SQL Server 支持的任何通配符 `usernameToMatch` 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.FindUsersInRole%2A> 方法基于用户输入显示角色成员身份。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。

- 或 -

 <paramref name="usernameToMatch" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。

- 或 -

 <paramref name="usernameToMatch" /> 是一个空字符串。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取应用程序的所有角色的列表。</summary>
        <returns>一个字符串数组，包含在应用程序的数据源中存储的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.GetAllRoles%2A>方法调用 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> 默认角色提供程序的方法，以获取应用程序的数据源中的所有角色的列表。 仅检索在属性中指定的应用程序的角色 <xref:System.Web.Security.Roles.ApplicationName%2A> 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetAllRoles%2A> 方法获取应用程序的角色列表，并将结果绑定到 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取一个用户所属角色的列表。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前登录的用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含当前登录的用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.GetRolesForUser%2A>方法调用 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> 默认角色提供程序的方法，以便从数据源中检索当前已登录用户所在的角色。 当前登录的用户由 <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> 当前的属性 <xref:System.Web.HttpContext?displayProperty=nameWithType> 或 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 非 HTTP 宿主环境标识。 如果没有用户登录，则会引发异常。 仅检索在属性中指定的应用程序的角色 <xref:System.Web.Security.Roles.ApplicationName%2A> 。

 如果 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 为 `true` ，则该方法的结果 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 可能从角色缓存而不是指定的角色提供程序返回。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 方法检索指定用户的角色列表，并将返回的角色绑定到 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">当前无登录的用户。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其返回角色列表的用户。</param>
        <summary>获取一个用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含指定用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.GetRolesForUser%2A>方法调用 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> 默认角色提供程序的方法，以便从数据源中检索用户所在的角色。 仅检索在属性中指定的应用程序的角色 <xref:System.Web.Security.Roles.ApplicationName%2A> 。

 如果 `username` 等于当前已登录用户并且 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 为 `true` ，则该方法的结果 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 可能从角色缓存（而不是指定的）返回 <xref:System.Web.Security.Roles.Provider%2A> 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 方法检索指定用户的角色列表，并将返回的角色绑定到 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 包含一个逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要获取其用户列表的角色。</param>
        <summary>获取属于指定角色的用户的列表。</summary>
        <returns>一个字符串数组，其中包含指定角色拥有的所有成员的用户名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.GetUsersInRole%2A>方法调用 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> 默认角色提供程序的方法，以便从数据源检索与角色关联的用户名。 仅检索在属性中指定的应用程序的角色 <xref:System.Web.Security.Roles.ApplicationName%2A> 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetUsersInRole%2A> 方法获取特定角色中的用户列表，并将结果绑定到 <xref:System.Web.UI.WebControls.GridView> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取一个指示用户是否属于指定角色的值。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要搜索的角色的名称。</param>
        <summary>获取一个值，该值指示当前登录的用户是否属于指定的角色。 API 只能在 ASP.NET 请求线程的上下文内进行调用，在该批准的使用情况下，它是线程安全的。</summary>
        <returns>如果当前登录的用户属于指定的角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.IsUserInRole%2A>方法调用 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> 默认角色提供程序的方法，以确定当前登录的用户是否与属性中指定的应用程序的数据源中的角色关联 <xref:System.Web.Security.Roles.ApplicationName%2A> 。 当前登录的用户由 <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> 当前的属性 <xref:System.Web.HttpContext?displayProperty=nameWithType> 或 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 非 HTTP 宿主环境标识。 如果没有用户登录，则会引发异常。 仅检索在属性中指定的应用程序的角色 <xref:System.Web.Security.Roles.ApplicationName%2A> 。

 如果 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 为 `true` ，则 `roleName` 可以对照角色缓存而不是指定的角色提供程序对其进行检查。



## Examples
 下面的代码示例以编程方式检查当前登录的用户是否在管理员角色中，然后允许用户查看该应用程序的角色设置。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

当前无登录的用户。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要搜索的用户的名称。</param>
        <param name="roleName">要搜索的角色的名称。</param>
        <summary>获取一个指示指定用户是否属于指定角色的值。 API 只能在 ASP.NET 请求线程的上下文内进行调用，在该批准的使用情况下，它是线程安全的。</summary>
        <returns>如果指定的用户属于指定角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.IsUserInRole%2A>方法调用 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> 默认角色提供程序的方法，以确定用户名是否与属性中指定的应用程序的数据源中的角色关联 <xref:System.Web.Security.Roles.ApplicationName%2A> 。

 如果 `username` 与当前登录的用户相等，并且 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 属性值为 `true` ，则 `roleName` 可以对照角色缓存（而不是指定的）检查 <xref:System.Web.Security.Roles.Provider%2A> 。



## Examples
 下面的代码示例以编程方式检查用户是否在管理员角色中，然后允许用户查看应用程序的角色设置。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。

- 或 -

 <paramref name="username" /> 包含一个逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要为用户缓存的角色名称的最大数量。</summary>
        <value>要为用户缓存的角色名称的最大数量。 默认值为 25。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.MaxCachedResults%2A>使用 `maxCachedResults` 配置特性设置属性。 配置特性的值 `maxCachedResults` 必须设置为大于零的整数值。



## Examples
 下面的示例显示了[roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) `system.web` ASP.NET 应用程序 Web.config 文件的部分中的 roleManager 元素。 它指定应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 实例，并将属性设置 `maxCachedResults` 为10。

```
<roleManager
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All"
  maxCachedResults="10" />
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的默认角色提供程序。</summary>
        <value>应用程序的默认角色提供程序，作为继承 <see cref="T:System.Web.Security.RoleProvider" /> 抽象类的类公开。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Web.Security.Roles.Provider%2A> 属性可以直接引用应用程序的默认角色提供程序。 这通常用于访问不属于抽象类的角色提供程序的自定义成员 <xref:System.Web.Security.RoleProvider> 。

 例如， <xref:System.Web.Security.WindowsTokenRoleProvider> 类包含方法的重载 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> ，该重载使你可以通过使用枚举值来确定用户是否在公共 Windows 角色中 <xref:System.Security.Principal.WindowsBuiltInRole> 。 <xref:System.Web.Security.WindowsTokenRoleProvider>可以通过使用属性来获取对应用程序的类的引用 <xref:System.Web.Security.Roles.Provider%2A> ，并且可以将其强制转换为， <xref:System.Web.Security.WindowsTokenRoleProvider> 以便引用 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> 重载。

 如果为应用程序配置了多个角色提供程序，则可以使用集合访问不同的角色提供程序 <xref:System.Web.Security.Roles.Providers%2A> 。



## Examples
 下面的代码示例将默认的角色提供程序强制转换为 <xref:System.Web.Security.WindowsTokenRoleProvider> ，并检查当前登录的用户是否在管理员角色中，然后允许用户查看应用程序的角色设置。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.WindowsTokenRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 ASP.NET 应用程序的角色提供程序的集合。</summary>
        <value>包含为 ASP.NET 应用程序配置的角色提供程序的 <see cref="T:System.Web.Security.RoleProviderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.Providers%2A>属性引用为应用程序启用的所有角色提供程序，包括添加到 Web.config 文件中的任何提供程序。 通过使用 `providers` 应用程序 Web.config 文件中的 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 节的元素，可以控制哪些角色提供程序可用于应用程序。

 下面的示例演示了一个 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v=vs.100)) 部分，该部分将删除任何现有的提供程序， (如 Machine.config 文件中指定的提供程序) 并添加 <xref:System.Web.Security.SqlRoleProvider> 实例作为应用程序的角色提供程序。

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>

  <system.web>
    <roleManager defaultProvider="SqlProvider"
      enabled="true"
      cacheRolesInCookie="true"
      cookieName=".ASPROLES"
      cookieTimeout="30"
      cookiePath="/"
      cookieRequireSSL="false"
      cookieSlidingExpiration="true"
      cookieProtection="Encrypted">

      <providers>
        <clear/>
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlRoleProvider"
          connectionStringName="SqlServices"
          applicationName="MyApplication" />
         </providers>

    </roleManager>
  </system.web>
</configuration>
```

 可以 <xref:System.Web.Security.Roles.Providers%2A> 通过按名称索引角色提供程序并将其强制转换为所需的类型，从集合中获取对提供程序的强类型引用。

 您可以使用属性获取对应用程序的默认提供程序的引用 <xref:System.Web.Security.Roles.Provider%2A> 。



## Examples
 下面的代码示例列出了为应用程序以及其各自的类型启用的提供程序。

 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要从指定的角色中移除的用户。</param>
        <param name="roleName">要从其中移除指定用户的角色。</param>
        <summary>从指定的角色中移除指定的用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A>方法调用默认的角色提供程序，以从数据源的指定角色中删除指定的用户。



## Examples
 下面的代码示例从角色中删除用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)

 <paramref name="username" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">要从指定的角色中移除的用户。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户从中移除的角色的名称。</param>
        <summary>从指定的角色中移除指定的用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>方法调用默认的角色提供程序，以从数据源的指定角色中删除指定的用户。

 如果将应用程序配置为使用 <xref:System.Web.Security.SqlRoleProvider> 类，则在调用方法的过程中执行的数据库更新在 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 事务中进行。 如果遇到错误，如不在指定角色中的用户名，则将回滚该事务，并且不执行任何更新。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 方法从一个或多个角色中删除用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。

- 或 -

 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号 (,)。

- 或 -

 <paramref name="username" /> 为空字符串或者包含逗号 (,)。

- 或 -

 <paramref name="roleNames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定角色中移除的用户名。</param>
        <param name="roleName">要将指定的用户从中移除的角色的名称。</param>
        <summary>从指定的角色中移除指定的用户。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>方法调用默认的角色提供程序，以从数据源的指定角色中删除指定用户。

 如果应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 类，则在调用方法的过程中执行的数据库更新在 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> 事务中进行。 如果遇到错误，如不在指定角色中的用户名，则将回滚该事务，并且不执行任何更新。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> 方法从角色中删除一个或多个用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

<paramref name="usernames" /> 中的一个用户名为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。

- 或 -

<paramref name="usernames" /> 中的一个用户名是空字符串或包含逗号 (,)。

- 或 -

 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定角色中移除的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户从中移除的角色的名称。</param>
        <summary>移除指定角色中的指定用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法调用默认的角色提供程序，以从数据源的指定角色中删除指定用户。

 如果应用程序使用 <xref:System.Web.Security.SqlRoleProvider> 类，则在调用方法的过程中执行的数据库更新在 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> 事务中进行。 如果遇到错误，如不在指定角色中的用户名，则将回滚该事务，并且不执行任何更新。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> 方法从一个或多个基于用户输入的角色中移除一个或多个用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中指定的一个角色为 <see langword="null" />。

- 或 -

<paramref name="usernames" /> 中指定的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中指定的一个角色是空字符串或包含逗号 (,)。

- 或 -

<paramref name="usernames" /> 中指定的一个用户是空字符串或包含逗号 (,)。

- 或 -

 <paramref name="roleNames" /> 包含重复的元素。

- 或 -

 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要在数据源中搜索的角色名。</param>
        <summary>获取一个值，该值指示指定的角色名称是否已存在于角色数据源中。</summary>
        <returns>如果角色名称已存在于数据源中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.Roles.RoleExists%2A>方法调用 `RoleExists` 默认角色提供程序的方法，以确定在属性中指定的应用程序的数据源中是否存在角色名称 <xref:System.Web.Security.Roles.ApplicationName%2A> 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.RoleExists%2A> 方法来确定角色名称是否已存在，然后再创建角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未启用角色管理。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
  </Members>
</Type>
