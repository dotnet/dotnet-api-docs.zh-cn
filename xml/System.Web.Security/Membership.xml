<Type Name="Membership" FullName="System.Web.Security.Membership">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0788d39f203f2d2f4467028cf4ac18908bdd6a23" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89998259" /></Metadata><TypeSignature Language="C#" Value="public static class Membership" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Membership extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Membership" />
  <TypeSignature Language="VB.NET" Value="Public Class Membership" />
  <TypeSignature Language="C++ CLI" Value="public ref class Membership abstract sealed" />
  <TypeSignature Language="F#" Value="type Membership = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>验证用户凭据并管理用户设置。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership>类用于 ASP.NET 应用程序中，用于验证用户凭据并管理用户设置（例如密码和电子邮件地址）。 <xref:System.Web.Security.Membership>类可以单独使用，也可以与结合使用来创建用于对 <xref:System.Web.Security.FormsAuthentication> Web 应用程序或站点的用户进行身份验证的完整系统。 <xref:System.Web.UI.WebControls.Login>控件封装 <xref:System.Web.Security.Membership> 类，以提供一种方便的机制来验证用户。  
  
> [!NOTE]
>  如果你不熟悉 ASP.NET 的成员资格功能，请参阅 " [成员资格简介](https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)) "，然后继续。 有关与成员资格相关的其他主题的列表，请参阅 [使用成员身份管理用户](https://docs.microsoft.com/previous-versions/aspnet/tw292whz(v=vs.100))。  
  
 <xref:System.Web.Security.Membership>类提供用于的功能：  
  
-   正在创建新用户。  
  
-   将成员身份信息存储 (用户名、密码、电子邮件地址和支持数据) 在 Microsoft SQL Server 或备用数据存储区中。  
  
-   对访问你的站点的用户进行身份验证。 您可以通过编程方式对用户进行身份验证，也可以使用 <xref:System.Web.UI.WebControls.Login> 控件来创建完全不需要代码的身份验证系统。  
  
-   管理密码，包括创建、更改、检索和重置这些密码等。 你可以选择性地配置 ASP.NET 成员身份，以要求提供密码提示问题和答案来验证忘记密码的用户的密码重置或检索请求。  
  
 尽管 ASP.NET 的成员资格是 ASP.NET 中用于身份验证的自助功能，但它可以与 ASP.NET 角色管理集成，从而为你的站点提供授权服务。 成员资格还可与 ASP.NET 用户集成 <xref:System.Web.Profile> ，提供特定于应用程序的自定义项，可针对单个用户进行定制。 有关详细信息，请参阅 [了解角色管理](https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)) 和 [ASP.NET 配置文件属性概述](https://docs.microsoft.com/previous-versions/aspnet/2y3fs9xs(v=vs.100))。  
  
 <xref:System.Web.Security.Membership>类依赖于成员资格提供程序来与数据源进行通信。 .NET Framework 包括将 <xref:System.Web.Security.SqlMembershipProvider> 用户信息存储在 Microsoft SQL Server 数据库中的、和 <xref:System.Web.Security.ActiveDirectoryMembershipProvider> ，这使你能够将用户信息存储在 Active Directory 或 Active Directory 应用程序模式 (ADAM) Server 中。 您还可以实现自定义成员资格提供程序，以便与可由类使用的备用数据源进行通信 <xref:System.Web.Security.Membership> 。 自定义成员资格提供程序继承 <xref:System.Web.Security.MembershipProvider> 抽象类。 有关详细信息，请参阅 [实现成员资格提供程序](https://docs.microsoft.com/previous-versions/aspnet/f1kyba5e(v=vs.100))。  
  
 默认情况下，为所有 ASP.NET 应用程序启用 ASP.NET 成员身份。 默认的成员资格提供程序是 <xref:System.Web.Security.SqlMembershipProvider> ，并在计算机配置中指定名称 `AspNetSqlProvider` 。 的默认实例 <xref:System.Web.Security.SqlMembershipProvider> 配置为连接到 Microsoft SQL Server 的本地实例。  
  
 您可以修改默认设置以将实例指定 <xref:System.Web.Security.SqlMembershipProvider> `AspNetSqlProvider` 为默认提供程序，或者使用 Web.config 文件，将自定义提供程序的实例指定为 ASP.NET 应用程序的默认提供程序。 你可以使用 Web.config 文件中的 " [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 配置" 部分为你的 Web 应用程序指定 ASP.NET 成员身份配置。 您可以使用 "[成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100))" 部分的 "[提供程序](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/6d4936ht(v%3dvs.100))" 子节来指定除默认提供程序以外的成员资格提供程序。 例如，下面的 [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 部分从当前应用程序配置中删除默认的成员资格提供程序，并添加一个新的提供程序，其名称 `SqlProvider` 连接到名为的 SQL Server 实例 `AspSqlServer` 。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=AspSqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
   
  
## Examples  
 下面的代码示例显示了配置为使用 forms 身份验证和 ASP.NET 成员身份的 ASP.NET 应用程序的登录页。 如果提供的用户凭据无效，则向用户显示一条消息。 否则，使用方法将用户重定向到最初请求的 URL <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 。  
  
> [!NOTE]
>  ASP.NET 登录控件 (<xref:System.Web.UI.WebControls.Login> 、 <xref:System.Web.UI.WebControls.LoginView> 、 <xref:System.Web.UI.WebControls.LoginStatus> 、 <xref:System.Web.UI.WebControls.LoginName> 和 <xref:System.Web.UI.WebControls.PasswordRecovery>) 封装了提示用户提供凭据并验证成员资格系统中的凭据所需的所有逻辑，并可用于代替使用类进行编程检查 <xref:System.Web.Security.Membership> 。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">成员资格简介</related>
  </Docs>
  <Members>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Membership.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序的名称。</summary>
        <value>应用程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.ApplicationName%2A>用于标识特定于应用程序的用户。 也就是说，同一用户名在数据库中可用于多个指定不同的 ASP.NET 应用程序 <xref:System.Web.Security.Membership.ApplicationName%2A> 。 这使多个应用程序能够使用同一个数据库来存储用户信息，而不会遇到重复的用户名冲突。 另外，多个 ASP.NET 应用程序可以通过指定相同的用户数据库来使用 <xref:System.Web.Security.Membership.ApplicationName%2A> 。 <xref:System.Web.Security.Membership.ApplicationName%2A>可以通过编程方式或在 Web 应用程序的配置中以声明方式进行设置。  
  
> [!CAUTION]
>  由于单个默认成员资格提供程序实例用于某个对象提供的所有请求，因此 <xref:System.Web.HttpApplication> 可以同时执行多个请求并尝试设置该 <xref:System.Web.Security.Membership.ApplicationName%2A> 属性值。 <xref:System.Web.Security.Membership.ApplicationName%2A>对于多个写入，属性不是线程安全的，并且更改 <xref:System.Web.Security.Membership.ApplicationName%2A> 属性值可能会导致应用程序的多个用户产生意外行为。 建议你避免编写允许用户设置属性的代码 <xref:System.Web.Security.Membership.ApplicationName%2A> ，除非你必须这样做。 可能需要设置属性的应用程序的一个示例 <xref:System.Web.Security.Membership.ApplicationName%2A> 是管理多个应用程序的成员资格数据的管理应用程序。 此类应用程序应为单用户应用程序，而不是 Web 应用程序。  
  
   
  
## Examples  
 下面的代码示例显示了 ASP.NET 应用程序的 Web.config 文件部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用 <xref:System.Web.Security.SqlMembershipProvider> 实例，并将设置 <xref:System.Web.Security.Membership.ApplicationName%2A> 为 `MyApplication` 。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将新用户添加到数据存储区。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">新用户的用户名。</param>
        <param name="password">新用户的密码。</param>
        <summary>将新用户添加到数据存储区。</summary>
        <returns>用于新创建用户的 <see cref="T:System.Web.Security.MembershipUser" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> 将新用户添加到数据存储区，并 <xref:System.Web.Security.MembershipUser> 为新创建的用户返回一个对象。 如果用户创建失败， <xref:System.Web.Security.MembershipCreateUserException> 则会引发。 你可以 <xref:System.Web.Security.MembershipCreateStatus> 从的属性中检索一个值 <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> ，该值 <xref:System.Web.Security.MembershipCreateUserException> 指示用户创建失败的原因。  
  
 创建成员资格用户并且你具有对该用户的对象的引用后 <xref:System.Web.Security.MembershipUser> ，你可以使用公共方法修改该用户的设置， <xref:System.Web.Security.MembershipUser> 例如 <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> 适用于的应用程序 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> `true` ，或设置对象的属性值 <xref:System.Web.Security.MembershipUser> 并将其传递给 <xref:System.Web.Security.Membership.UpdateUser%2A> 方法。  
  
 如果用户已存在于应用程序的数据源中，则可以 <xref:System.Web.Security.MembershipUser> 使用方法获取现有用户的对象 <xref:System.Web.Security.Membership.GetUser%2A> 。  
  
 <xref:System.Web.Security.SqlMembershipProvider>提供一个选项，要求每个用户都具有唯一的电子邮件地址。 如果 <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> 属性为 `true` ，则需要使用 <xref:System.Web.Security.Membership.CreateUser%2A> 允许您为要创建的用户指定电子邮件地址的重载之一。 否则， <xref:System.Web.Security.MembershipCreateUserException> 将引发。  
  
 将从所有参数值中去除前导空格和尾随空格。  
  
   
  
## Examples  
 下面的代码示例为配置为使用 forms 身份验证和 ASP.NET 成员身份的 ASP.NET 应用程序创建一个新用户。 如果未成功创建用户，则会向用户显示一条消息。 否则，会将用户重定向到应用程序的登录页。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Membership#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">未创建用户。 请检查 <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> 属性的 <see cref="T:System.Web.Security.MembershipCreateStatus" /> 值。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">新用户的用户名。</param>
        <param name="password">新用户的密码。</param>
        <param name="email">新用户的电子邮件地址。</param>
        <summary>将具有指定电子邮件地址的新用户添加到数据存储。</summary>
        <returns>用于新创建用户的 <see cref="T:System.Web.Security.MembershipUser" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> 将新用户添加到数据存储区，并 <xref:System.Web.Security.MembershipUser> 为新创建的用户返回一个对象。 如果用户创建失败， <xref:System.Web.Security.MembershipCreateUserException> 则会引发。 你可以 <xref:System.Web.Security.MembershipCreateStatus> 从的属性中检索一个值 <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> ，该值 <xref:System.Web.Security.MembershipCreateUserException> 指示用户创建失败的原因。  
  
 创建成员资格用户并且你具有对该用户的对象的引用后 <xref:System.Web.Security.MembershipUser> ，你可以使用公共方法修改该用户的设置， <xref:System.Web.Security.MembershipUser> 例如 <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> 适用于的应用程序 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> `true` ，或设置对象的属性值 <xref:System.Web.Security.MembershipUser> 并将其传递给 <xref:System.Web.Security.Membership.UpdateUser%2A> 方法。  
  
 如果用户已存在于应用程序的数据源中，则可以 <xref:System.Web.Security.MembershipUser> 使用方法获取现有用户的对象 <xref:System.Web.Security.Membership.GetUser%2A> 。  
  
 将从所有参数值中去除前导空格和尾随空格。  
  
   
  
## Examples  
 下面的代码示例为配置为使用 forms 身份验证和 ASP.NET 成员身份的 ASP.NET 应用程序创建一个新用户。 如果未成功创建用户，则会向用户显示一条消息。 否则，会将用户重定向到应用程序的登录页。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser1cs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Membership#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">未创建用户。 请检查 <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> 属性的 <see cref="T:System.Web.Security.MembershipCreateStatus" /> 值。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string * string * string * bool * MembershipCreateStatus -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email, passwordQuestion, passwordAnswer, isApproved, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">新用户的用户名。</param>
        <param name="password">新用户的密码。</param>
        <param name="email">新用户的电子邮件地址。</param>
        <param name="passwordQuestion">成员资格用户的密码提示问题的值。</param>
        <param name="passwordAnswer">成员资格用户的密码提示问题答案的值。</param>
        <param name="isApproved">一个布尔值，该值指示是否批准新用户登录。</param>
        <param name="status">一个 <see cref="T:System.Web.Security.MembershipCreateStatus" /> 值，该值指示该用户是否成功创建或用户创建失败的原因。</param>
        <summary>将具有指定属性值的新用户添加到数据存储区，并返回一个状态参数，指示该用户是否成功创建或用户创建失败的原因。</summary>
        <returns>用于新创建用户的 <see cref="T:System.Web.Security.MembershipUser" /> 对象。 如果没有创建用户，此方法将返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> 将新用户添加到数据存储区，并 <xref:System.Web.Security.MembershipUser> 为新创建的用户返回一个对象。 如果用户创建失败，你可以 <xref:System.Web.Security.MembershipCreateStatus> 从输出参数中检索一个值，该值 `status` 指示用户创建失败的原因。  
  
 <xref:System.Web.Security.Membership.CreateUser%2A> `null` 如果 `password` 为空字符串，或者为 `null` `username` 空字符串或包含逗号 (，则该方法将返回， `null` ) ，不 `passwordQuestion` 为 `null` 且为空字符串，也不 `passwordAnswer` `null` 包含空字符串。  
  
 创建成员资格用户并且具有 <xref:System.Web.Security.MembershipUser> 该用户的对象引用后，你可以使用公共方法修改该用户的设置，并 <xref:System.Web.Security.MembershipUser> 通过设置对象的属性值 <xref:System.Web.Security.MembershipUser> ，然后将该 <xref:System.Web.Security.MembershipUser> 对象传递给 <xref:System.Web.Security.Membership.UpdateUser%2A> 方法。  
  
 如果用户已存在于应用程序的数据源中，则可以 <xref:System.Web.Security.MembershipUser> 使用方法获取现有用户的对象 <xref:System.Web.Security.Membership.GetUser%2A> 。  
  
 将从所有字符串参数值中去除前导空格和尾随空格。  
  
   
  
## Examples  
 下面的代码示例为配置为使用 forms 身份验证和 ASP.NET 成员身份的 ASP.NET 应用程序创建一个新用户。 如果未成功创建用户，则会向用户显示一条消息。 否则，会将用户重定向到应用程序的登录页。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, providerUserKey As Object, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, System::Object ^ providerUserKey, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string * string * string * bool * obj * MembershipCreateStatus -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email, passwordQuestion, passwordAnswer, isApproved, providerUserKey, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">新用户的用户名。</param>
        <param name="password">新用户的密码。</param>
        <param name="email">新用户的电子邮件地址。</param>
        <param name="passwordQuestion">成员资格用户的密码提示问题的值。</param>
        <param name="passwordAnswer">成员资格用户的密码提示问题答案的值。</param>
        <param name="isApproved">一个布尔值，该值指示是否批准新用户登录。</param>
        <param name="providerUserKey">该用户的用户标识符，应存储在成员资格数据存储区。</param>
        <param name="status">一个 <see cref="T:System.Web.Security.MembershipCreateStatus" /> 值，该值指示该用户是否成功创建或用户创建失败的原因。</param>
        <summary>将具有指定的属性值和唯一的标识符的新用户添加到数据存储区，并返回一个状态参数，指示该用户是否成功创建或用户创建失败的原因。</summary>
        <returns>用于新创建用户的 <see cref="T:System.Web.Security.MembershipUser" /> 对象。 如果没有创建用户，此方法将返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> 将新用户添加到数据存储区，并 <xref:System.Web.Security.MembershipUser> 为新创建的用户返回一个对象。 如果用户创建失败，你可以 <xref:System.Web.Security.MembershipCreateStatus> 从输出参数中检索一个值，该值 `status` 指示用户创建失败的原因。 您可以使用参数指定用户的唯一标识符，例如数据库的主键值 `providerUserKey` 。  
  
 <xref:System.Web.Security.Membership.CreateUser%2A> `null` 如果 `password` 为空字符串，或者为 `null` `username` 空字符串或 `null` 包含逗号 (、) 、 `passwordQuestion` 不为 `null` 且包含空字符串，或者 `passwordAnswer` 不是 `null` 并且不包含空字符串，则方法将返回。  
  
 创建成员资格用户并且具有 <xref:System.Web.Security.MembershipUser> 该用户的对象引用后，你可以使用公共方法修改该用户的设置，并 <xref:System.Web.Security.MembershipUser> 通过设置对象的属性值 <xref:System.Web.Security.MembershipUser> ，然后将该 <xref:System.Web.Security.MembershipUser> 对象传递给 <xref:System.Web.Security.Membership.UpdateUser%2A> 方法。  
  
 如果用户已存在于应用程序的数据源中，则可以 <xref:System.Web.Security.MembershipUser> 使用方法获取现有用户的对象 <xref:System.Web.Security.Membership.GetUser%2A> 。  
  
 将从所有字符串参数值中去除前导空格和尾随空格。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从数据库中删除一个用户。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member DeleteUser : string -&gt; bool" Usage="System.Web.Security.Membership.DeleteUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要删除的用户的名称。</param>
        <summary>从数据库中删除用户和任何相关的用户数据。</summary>
        <returns>如果用户已删除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles> <xref:System.Web.HttpContext.Profile%2A> <xref:System.Web.UI.WebControls.WebParts.WebPart> 当你使用 <xref:System.Web.Security.SqlRoleProvider> 、 <xref:System.Web.Profile.SqlProfileProvider> 和 <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> 对象进行数据存储时，存储在数据库中的、或个性化的用户数据也将被删除。  
  
   
  
## Examples  
 下面的代码示例将删除当前登录的用户和所有相关数据。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/DeleteUsercs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Membership#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/DeleteUservb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username, bool deleteAllRelatedData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username, bool deleteAllRelatedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String, deleteAllRelatedData As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username, bool deleteAllRelatedData);" />
      <MemberSignature Language="F#" Value="static member DeleteUser : string * bool -&gt; bool" Usage="System.Web.Security.Membership.DeleteUser (username, deleteAllRelatedData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="deleteAllRelatedData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">要删除的用户的名称。</param>
        <param name="deleteAllRelatedData">如果要从数据库中删除与用户相关的数据，则为 <see langword="true" />；如果要在数据库中保留与用户相关的数据，则为 <see langword="false" />。</param>
        <summary>从数据库中删除一个用户。</summary>
        <returns>如果用户已删除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从数据库中删除的用户仅从配置的中删除 `applicationName` 。  
  
 如果 `deleteAllRelatedData` 为 `true` ，则 <xref:System.Web.Security.Roles> <xref:System.Web.HttpContext.Profile%2A> <xref:System.Web.UI.WebControls.WebParts.WebPart> 当你使用 <xref:System.Web.Security.SqlRoleProvider> 、 <xref:System.Web.Profile.SqlProfileProvider> 和 <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> 对象进行数据存储时，存储在数据库中的、或个性化的用户数据也将被删除。  
  
   
  
## Examples  
 下面的代码示例将删除当前登录的用户和所有相关数据。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/DeleteUsercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/DeleteUservb.aspx#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 为空字符串或者包含逗号 (,)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordReset">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordReset" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordReset" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordReset { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnablePasswordReset : bool" Usage="System.Web.Security.Membership.EnablePasswordReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获得一个值，指示当前成员资格提供程序是否配置为允许用户重置其密码。</summary>
        <value>如果成员资格提供程序支持密码重置，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 密码重置是指当用户忘记了密码或当前密码不再有效时，ASP.NET 成员身份使用新的、随机生成的密码替换用户名的当前密码。 当密码格式设置为时，此方法特别有用 <xref:System.Web.Security.MembershipPasswordFormat.Hashed> ，因为用户无法检索哈希密码值。  
  
   
  
## Examples  
 下面的代码示例显示了 ASP.NET 应用程序的 Web.config 文件部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用的实例 <xref:System.Web.Security.SqlMembershipProvider> ，并启用密码重置。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 下面的代码示例首先验证 <xref:System.Web.Security.Membership.EnablePasswordReset%2A> 是否为 `true` ，然后重置用户的密码并返回自动生成的新密码。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ResetPasswordcs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ResetPasswordvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordRetrieval">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordRetrieval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordRetrieval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordRetrieval As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordRetrieval { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnablePasswordRetrieval : bool" Usage="System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获得一个值，指示当前成员资格提供程序是否配置为允许用户检索其密码。</summary>
        <value>如果成员资格提供程序支持密码检索，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> 为 `false` ，则基础成员资格提供程序可能会引发 <xref:System.Web.HttpException> 。  
  
 .NET Framework 附带的提供程序支持多个密码格式来增强密码安全性。 如果密码格式设置为 <xref:System.Web.Security.MembershipPasswordFormat.Hashed> ，则用户将无法从数据库中检索其现有密码。 <xref:System.Web.Security.MembershipPasswordFormat.Hashed>密码格式提供密码值的单向编码。 密码进行了 "哈希处理"，并与数据库中存储的用于身份验证的值比较。 不能将 "哈希" 值取消编码以检索原始密码值。 有关详细信息，请参阅 <xref:System.Web.Security.MembershipPasswordFormat>。  
  
   
  
## Examples  
 下面的代码示例显示了 ASP.NET 应用程序的 Web.config 文件部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用的实例 <xref:System.Web.Security.SqlMembershipProvider> ，并启用密码检索。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="false"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 下面的代码示例首先验证 <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> 是否为 `true` ，然后检索指定用户名的密码，并将其发送到指定用户的电子邮件地址。  
  
> [!IMPORTANT]
>  对于需要高安全级别的站点，不建议使用电子邮件以明文形式返回密码。 对于高安全性站点，建议使用加密（如 SSL）返回密码。  
>   
>  此示例包括一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByEmail">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取成员资格用户集合，这些用户的电子邮件地址包含要匹配的指定电子邮件地址。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersByEmail : string -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByEmail emailToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">要搜索的电子邮件地址。</param>
        <summary>获取成员资格用户集合，这些用户的电子邮件地址包含要匹配的指定电子邮件地址。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUserCollection" /> 集合，其中包含与 <paramref name="emailToMatch" /> 参数匹配的所有用户。  
  
删除 <paramref name="emailToMatch" /> 参数值的前导和尾随空格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 返回一个成员资格用户列表，其中的电子邮件地址与为配置的提供的匹配 `emailToMatch` `applicationName` 。  
  
 <xref:System.Web.Security.SqlMembershipProvider>使用 LIKE 子句对参数执行搜索 `emailToMatch` 。 可在参数值中使用 LIKE 子句中 SQL Server 支持的任何通配符 `emailToMatch` 。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 方法基于用户输入检索成员资格数据库中的成员资格用户信息，并在数据页中显示结果。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByEmailcs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Membership#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByEmailvb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member FindUsersByEmail : string * int * int * int -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByEmail (emailToMatch, pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">要搜索的电子邮件地址。</param>
        <param name="pageIndex">要返回的结果页的索引。 <paramref name="pageIndex" /> 从零开始。</param>
        <param name="pageSize">要返回的结果页的大小。</param>
        <param name="totalRecords">匹配用户的总数。</param>
        <summary>获取成员资格用户集合并显示在一个数据页中，这些用户的电子邮件地址包含要匹配的指定电子邮件地址。</summary>
        <returns>包含一页 <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> 对象的 <see cref="T:System.Web.Security.MembershipUserCollection" />，这些对象从 <paramref name="pageIndex" /> 指定的页开始。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 返回一个成员资格用户列表，其中的电子邮件地址与为配置的提供的匹配 `emailToMatch` `applicationName` 。  
  
 <xref:System.Web.Security.SqlMembershipProvider>使用 LIKE 子句对参数执行搜索 `emailToMatch` 。 可在参数值中使用 LIKE 子句中 SQL Server 支持的任何通配符 `emailToMatch` 。  
  
 返回的结果 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 是由 `pageIndex` 和参数约束的 `pageSize` 。 `pageSize`参数标识 <xref:System.Web.Security.MembershipUser> 要在中返回的对象的最大数目 <xref:System.Web.Security.MembershipUserCollection> 。 `pageIndex`参数标识要返回的结果页，其中0标识第一页。 `totalRecords`参数是 `out` 设置为与值匹配的成员资格用户总数的参数 `emailToMatch` 。 例如，如果找到13个用户（其中 `emailToMatch` 匹配部分或整个电子邮件地址），并且 `pageIndex` 值为1且为 `pageSize` 5，则返回的 <xref:System.Web.Security.MembershipUserCollection> 将包含返回的第6个到第10个用户。 `totalRecords` 将设置为13。  
  
 删除 `emailToMatch` 参数值的前导和尾随空格。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 方法基于用户输入检索成员资格数据库中的成员资格用户信息，并在数据页中显示结果。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByEmailcs.aspx#13)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByEmailvb.aspx#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="pageIndex" /> 小于零。  
  
- 或 - 
 <paramref name="pageSize" /> 小于 1。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByName">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取一个成员资格用户的集合，其中的用户名包含要匹配的指定用户名。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersByName : string -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByName usernameToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>获取一个成员资格用户的集合，其中的用户名包含要匹配的指定用户名。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUserCollection" /> 集合，其中包含与 <paramref name="usernameToMatch" /> 参数匹配的所有用户。  
  
删除 <paramref name="usernameToMatch" /> 参数值的前导和尾随空格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> 返回一个成员资格用户的列表，其中的用户名与为配置的提供的匹配 `usernameToMatch` `applicationName` 。  
  
 <xref:System.Web.Security.SqlMembershipProvider>使用 LIKE 子句对参数执行搜索 `usernameToMatch` 。 可在参数值中使用 LIKE 子句中 SQL Server 支持的任何通配符 `usernameToMatch` 。  
  
 将从所有参数值中去除前导空格和尾随空格。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Web.Security.Membership.FindUsersByName%2A> 方法基于用户输入检索成员资格数据库中的成员资格用户信息，并在数据页中显示结果。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByNamecs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Membership#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByNamevb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="usernameToMatch" /> 是一个空字符串。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="usernameToMatch" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member FindUsersByName : string * int * int * int -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByName (usernameToMatch, pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <param name="pageIndex">要返回的结果页的索引。 <paramref name="pageIndex" /> 从零开始。</param>
        <param name="pageSize">要返回的结果页的大小。</param>
        <param name="totalRecords">匹配用户的总数。</param>
        <summary>获取一个成员资格用户的集合，并显示在一个数据页中，这些用户的用户名包含要匹配的指定用户名。</summary>
        <returns>包含一页 <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> 对象的 <see cref="T:System.Web.Security.MembershipUserCollection" />，这些对象从 <paramref name="pageIndex" /> 指定的页开始。  
  
删除 <paramref name="usernameToMatch" /> 参数值的前导和尾随空格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> 返回一个成员资格用户的列表，其中的用户名与为配置的提供的匹配 `usernameToMatch` `applicationName` 。  
  
 <xref:System.Web.Security.SqlMembershipProvider>使用 LIKE 子句对参数执行搜索 `usernameToMatch` 。 可在参数值中使用 LIKE 子句中 SQL Server 支持的任何通配符 `usernameToMatch` 。  
  
 返回的结果 <xref:System.Web.Security.Membership.FindUsersByName%2A> 是由 `pageIndex` 和参数约束的 `pageSize` 。 `pageSize`参数标识 <xref:System.Web.Security.MembershipUser> 要在中返回的对象的最大数目 <xref:System.Web.Security.MembershipUserCollection> 。 `pageIndex`参数标识要返回的结果页，其中0标识第一页。 `totalRecords`参数是 `out` 设置为与值匹配的成员资格用户总数的参数 `usernameToMatch` 。 例如，如果找到13个用户（其中 `usernameToMatch` 匹配部分或整个用户名），并且 `pageIndex` 值为1且为 `pageSize` 5，则 <xref:System.Web.Security.MembershipUserCollection> 返回的将包含返回的第6个到第10个用户。 `totalRecords` 将设置为13。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Web.Security.Membership.FindUsersByName%2A> 方法基于用户输入检索成员资格数据库中的成员资格用户信息，并在数据页中显示结果。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByNamecs.aspx#12)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByNamevb.aspx#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="usernameToMatch" /> 是一个空字符串。  
  
- 或 - 
 <paramref name="pageIndex" /> 小于零。  
  
- 或 - 
 <paramref name="pageSize" /> 小于 1。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="usernameToMatch" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GeneratePassword">
      <MemberSignature Language="C#" Value="public static string GeneratePassword (int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GeneratePassword(int32 length, int32 numberOfNonAlphanumericCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GeneratePassword(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GeneratePassword (length As Integer, numberOfNonAlphanumericCharacters As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GeneratePassword(int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="F#" Value="static member GeneratePassword : int * int -&gt; string" Usage="System.Web.Security.Membership.GeneratePassword (length, numberOfNonAlphanumericCharacters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="numberOfNonAlphanumericCharacters" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">生成的密码的字符数。 长度必须介于 1 和 128 个字符之间。</param>
        <param name="numberOfNonAlphanumericCharacters">生成的密码中非字母数字字符（如 @, #, !, %, &amp; 等）的最小数。</param>
        <summary>生成指定长度的随机密码。</summary>
        <returns>指定长度的随机密码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GeneratePassword%2A>方法用于生成随机密码，并且最常用于 <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> 成员资格提供程序实现的方法，以将用户的密码重置为新的临时密码。  
  
 生成的密码只包含字母数字字符和以下标点符号： `!@#$%^&*()_-+=[{]};:<>|./?` 。 生成的密码中不包含隐藏或不可打印的控制字符。  
  
> [!NOTE]
>  不保证通过方法创建的随机密码 <xref:System.Web.Security.Membership.GeneratePassword%2A> 在属性中传递正则表达式 <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> 。 但是，随机密码将满足由 <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> 属性和参数建立的条件 `numberOfNonAlphanumericCharacters` 。  
  
   
  
## Examples  
 下面的代码示例创建一个新的成员资格用户，并使用 <xref:System.Web.Security.Membership.GeneratePassword%2A> 方法将新用户的密码初始化为向用户显示的随机值。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/GeneratePasswordcs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Membership#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/GeneratePasswordvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="length" /> 小于 1 或大于 128 - 或 - 
 <paramref name="numberOfNonAlphanumericCharacters" /> 小于 0 或大于 <paramref name="length" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllUsers">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取数据库中用户的集合。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers () As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers();" />
      <MemberSignature Language="F#" Value="static member GetAllUsers : unit -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.GetAllUsers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取数据库中所有用户的集合。</summary>
        <returns><see cref="T:System.Web.Security.MembershipUserCollection" /> 对象的 <see cref="T:System.Web.Security.MembershipUser" />，表示数据库中的所有用户。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetAllUsers%2A> 返回应用程序的所有成员资格用户的信息作为对象的集合 <xref:System.Web.Security.MembershipUser> 。 在非常大的用户数据库中使用方法时要小心 <xref:System.Web.Security.Membership.GetAllUsers%2A> ，因为 <xref:System.Web.Security.MembershipUserCollection> ASP.NET 页可能会降低应用程序的性能。  
  
   
  
## Examples  
 下面的代码示例返回一个用户列表，其中包含当前联机用户数的计数。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers (int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers(int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers (pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers(int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member GetAllUsers : int * int * int -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.GetAllUsers (pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageIndex">要返回的结果页的索引。 使用 0 来指示第一页。</param>
        <param name="pageSize">要返回的结果页的大小。 <paramref name="pageIndex" /> 从零开始。</param>
        <param name="totalRecords">用户的总数。</param>
        <summary>获取数据库中的所有用户的集合，并显示在数据页中。</summary>
        <returns><see cref="T:System.Web.Security.MembershipUserCollection" /> 对象的 <see cref="T:System.Web.Security.MembershipUser" />，表示数据库中配置的 <see langword="applicationName" /> 的所有用户。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的结果 <xref:System.Web.Security.Membership.GetAllUsers%2A> 是由 `pageIndex` 和参数约束的 `pageSize` 。 `pageSize`参数标识 <xref:System.Web.Security.MembershipUser> 要在中返回的对象的最大数目 <xref:System.Web.Security.MembershipUserCollection> 。 `pageIndex`参数标识要返回的结果页，其中0标识第一页。 `totalRecords`参数是一个 `out` 参数，该参数设置为已配置的成员资格用户的总数 `applicationName` 。 例如，如果配置了13个用户 `applicationName` ，并且 `pageIndex` 值为1且为 `pageSize` 5，则 <xref:System.Web.Security.MembershipUserCollection> 返回的将包含返回的第6个到第10个用户。 `totalRecords` 将设置为13。  
  
   
  
## Examples  
 下面的代码示例返回数据页中的用户列表，其中包含当前联机用户数的计数。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="pageIndex" /> 小于零。  
  
- 或 - 
 <paramref name="pageSize" /> 小于 1。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfUsersOnline">
      <MemberSignature Language="C#" Value="public static int GetNumberOfUsersOnline ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfUsersOnline() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetNumberOfUsersOnline" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumberOfUsersOnline () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetNumberOfUsersOnline();" />
      <MemberSignature Language="F#" Value="static member GetNumberOfUsersOnline : unit -&gt; int" Usage="System.Web.Security.Membership.GetNumberOfUsersOnline " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当前访问应用程序的用户数。</summary>
        <returns>当前访问应用程序的用户数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.GetNumberOfUsersOnline%2A> 返回 <xref:System.Web.Security.Membership.ApplicationName%2A> 最近一次活动日期大于当前时间的当前用户数 <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> 。 最后一个活动的日期/时间戳更新为通过或方法验证用户凭据的当前日期和时间， <xref:System.Web.Security.Membership.ValidateUser%2A> <xref:System.Web.Security.Membership.UpdateUser%2A> 或者在调用 <xref:System.Web.Security.Membership.GetUser%2A> 不带任何参数的重载或使用 `userIsOnline` 参数来指定应更新日期/时间戳的重载时更新。  
  
   
  
## Examples  
 下面的代码示例返回一个用户列表，其中包含当前联机用户数的计数。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从数据源获取成员资格用户的信息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser () As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser();" />
      <MemberSignature Language="F#" Value="static member GetUser : unit -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从数据源获取信息并为当前已登录的成员资格用户更新最后一次活动日期/时间戳。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，表示当前已登录的用户。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser> 从数据源检索用户信息，并创建 <xref:System.Web.Security.MembershipUser> 用返回的数据填充的对象。 如果使用不 <xref:System.Web.Security.Membership.GetUser%2A> 带参数的重载之一 `username` ，则 <xref:System.Web.Security.Membership.GetUser%2A> 返回当前登录的成员资格用户的信息。 当前登录的成员资格用户由 <xref:System.Security.Principal.IIdentity.Name%2A> 当前中的用户标识 <xref:System.Web.HttpContext> 。  
  
 你还可以指定是否要为 <xref:System.Web.Security.Membership.GetUser%2A> 使用参数检索的用户更新最后一个活动的日期/时间戳 `userIsOnline` 。 <xref:System.Web.Security.Membership.GetUser%2A>对于不带参数的重载，将 `userIsOnline` `GetUser()` 隐式更新用户的最近一次活动的日期/时间戳。 `GetUser(System.String)` 而 `GetUser(System.Object)` 不是。  
  
   
  
## Examples  
 下面的代码示例将更新当前已登录的成员资格用户的最近一次活动的日期/时间戳，并在 ASP.NET 页中显示该用户名。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default1cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Membership#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default1vb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当前没有成员资格用户登陆。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser userIsOnline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userIsOnline">如果为 <see langword="true" />，则更新指定用户的最近活动日期/时间戳。</param>
        <summary>从数据源获取当前已登录的成员资格用户的信息。 为当前已登录的成员资格用户（如果被指定）更新最后一次活动的日期/时间戳。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，表示当前已登录的用户。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser%2A>方法从数据源中检索用户信息，并创建 <xref:System.Web.Security.MembershipUser> 用返回的数据填充的对象。 如果使用不 <xref:System.Web.Security.Membership.GetUser%2A> 带参数的重载之一 `username` ，则 <xref:System.Web.Security.Membership.GetUser%2A> 返回当前登录的成员资格用户的信息。 当前登录的成员资格用户由 <xref:System.Security.Principal.IIdentity.Name%2A> 当前中的用户标识 <xref:System.Web.HttpContext> 。  
  
 你还可以指定是否要为 <xref:System.Web.Security.Membership.GetUser%2A> 使用参数检索的用户更新最后一个活动的日期/时间戳 `userIsOnline` 。 <xref:System.Web.Security.Membership.GetUser%2A>对于不带参数的重载，将 `userIsOnline` `GetUser()` 隐式更新用户的最近一次活动的日期/时间戳。 `GetUser(System.String)` 而 `GetUser(System.Object)` 不是。  
  
   
  
## Examples  
 下面的代码示例在 ASP.NET 页中显示当前登录的成员资格用户的用户名，而不更新用户的上一次活动日期/时间戳。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default2cs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Membership#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default2vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当前没有成员资格用户登陆。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey);" />
      <MemberSignature Language="F#" Value="static member GetUser : obj -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser providerUserKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">用户的成员资格数据源中的唯一用户标识符。</param>
        <summary>从数据源获取与指定的唯一标识符关联的成员资格用户信息。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，它表示与指定的唯一标识符关联的用户。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser%2A>方法从数据源中检索用户信息，并创建 <xref:System.Web.Security.MembershipUser> 用返回的数据填充的对象。 用户通过使用参数指定的数据源中的唯一标识符进行标识 `providerUserKey` 。  
  
 你还可以指定是否要为 <xref:System.Web.Security.Membership.GetUser%2A> 通过参数检索的用户更新最后一个活动的日期/时间戳 `userIsOnline` 。 <xref:System.Web.Security.Membership.GetUser%2A>对于不带参数的重载，将 `userIsOnline` `GetUser()` 隐式更新用户的最近一次活动的日期/时间戳。 `GetUser(System.String)` 并且 `GetUser(System.Object)` 不  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="providerUserKey" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetUser : string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要检索的用户名。</param>
        <summary>从数据源获取指定成员资格用户的信息。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，它表示指定的用户。 如果 <paramref name="username" /> 参数并不对应于现有的用户，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser%2A>方法从数据源中检索用户信息，并创建 <xref:System.Web.Security.MembershipUser> 用返回的数据填充的对象。 如果使用不 <xref:System.Web.Security.Membership.GetUser%2A> 带参数的重载之一 `username` ，则 <xref:System.Web.Security.Membership.GetUser%2A> 返回当前登录的成员资格用户的信息。 当前登录的成员资格用户由 <xref:System.Security.Principal.IIdentity.Name%2A> 当前中的用户标识 <xref:System.Web.HttpContext> 。  
  
 你还可以指定是否要为 <xref:System.Web.Security.Membership.GetUser%2A> 通过参数检索的用户更新最后一个活动的日期/时间戳 `userIsOnline` 。 <xref:System.Web.Security.Membership.GetUser%2A>对于不带参数的重载，将 `userIsOnline` <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> 隐式更新用户的最近一次活动的日期/时间戳。 <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> 而 <xref:System.Web.Security.Membership.GetUser%2A> 不是。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Web.Security.Membership.GetUser%2A> 方法返回 <xref:System.Web.Security.MembershipUser> 当前登录用户的对象并更新该用户的电子邮件地址。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 包含一个逗号 (,)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : obj * bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser (providerUserKey, userIsOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">用户的成员资格数据源中的唯一用户标识符。</param>
        <param name="userIsOnline">如果为 <see langword="true" />，则更新指定用户的最近活动日期/时间戳。</param>
        <summary>从数据源获取与指定的唯一标识符关联的成员资格用户信息。 更新用户（如果指定）的最近一次活动的日期/时间戳。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，它表示与指定的唯一标识符关联的用户。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser%2A>方法从数据源中检索用户信息，并创建 <xref:System.Web.Security.MembershipUser> 用返回的数据填充的对象。 用户通过参数中指定的数据源中的唯一标识符进行标识 `providerUserKey` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="providerUserKey" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username, bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : string * bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser (username, userIsOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">要检索的用户名。</param>
        <param name="userIsOnline">如果为 <see langword="true" />，则更新指定用户的最近活动日期/时间戳。</param>
        <summary>从数据源获取指定成员资格用户的信息。 更新用户（如果指定）的最近一次活动的日期/时间戳。</summary>
        <returns>一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，它表示指定的用户。 如果 <paramref name="username" /> 参数并不对应于现有的用户，则此方法返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser%2A>方法从数据源中检索用户信息，并创建 <xref:System.Web.Security.MembershipUser> 用返回的数据填充的对象。  
  
 如果使用不 <xref:System.Web.Security.Membership.GetUser%2A> 带参数的重载之一 `username` ，则 <xref:System.Web.Security.Membership.GetUser%2A> 返回当前登录的成员资格用户的信息。 当前登录的成员资格用户由 <xref:System.Security.Principal.IIdentity.Name%2A> 当前中的用户标识 <xref:System.Web.HttpContext> 。  
  
 你还可以指定是否要为 <xref:System.Web.Security.Membership.GetUser%2A> 通过参数检索的用户更新最后一个活动的日期/时间戳 `userIsOnline` 。 <xref:System.Web.Security.Membership.GetUser%2A>对于不带参数的重载，将 `userIsOnline` <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> 隐式更新用户的最近一次活动的日期/时间戳。 <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> 而 <xref:System.Web.Security.Membership.GetUser%2A> 不是。  
  
   
  
## Examples  
 下面的代码示例检索指定用户名的密码，并将其发送到指定用户的电子邮件地址。 对的调用 <xref:System.Web.Security.Membership.GetUser%2A> 指定不更新用户的最后一个活动的日期/时间戳。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 包含一个逗号 (,)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameByEmail">
      <MemberSignature Language="C#" Value="public static string GetUserNameByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUserNameByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUserNameByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUserNameByEmail (emailToMatch As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetUserNameByEmail(System::String ^ emailToMatch);" />
      <MemberSignature Language="F#" Value="static member GetUserNameByEmail : string -&gt; string" Usage="System.Web.Security.Membership.GetUserNameByEmail emailToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">要搜索的电子邮件地址。</param>
        <summary>获取一个用户名，该用户的电子邮件地址与指定的电子邮件地址匹配。</summary>
        <returns>用户名，其中该用户的电子邮件地址与指定的电子邮件地址匹配。 如果未发现匹配项，则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUserNameByEmail%2A> 如果用户不知道用户名，但知道其电子邮件地址，则可以使用来检索成员资格用户的用户名。 如果数据存储区中的多个用户具有相同的电子邮件地址，则返回第一个遇到的用户名。  
  
 将从所有参数值中去除前导空格和尾随空格。  
  
   
  
## Examples  
 下面的代码示例检索指定电子邮件地址的用户名。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/GetUserByEmailcs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/GetUserByEmailvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmType">
      <MemberSignature Language="C#" Value="public static string HashAlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string HashAlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.HashAlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HashAlgorithmType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ HashAlgorithmType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithmType : string" Usage="System.Web.Security.Membership.HashAlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用于哈希密码的算法的标识符。</summary>
        <value>用于哈希密码的算法的标识符，或为空以使用默认哈希算法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.HashAlgorithmType%2A>属性标识类使用的自定义哈希算法 <xref:System.Web.Security.Membership> 。 你 <xref:System.Web.Security.Membership.HashAlgorithmType%2A> 使用 `hashAlgorithmType` [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素的属性设置属性。  
  
 使用 .NET Framework，可以使用元素配置节配置自定义加密类 [`<cryptographySettings>`](/dotnet/framework/configure-apps/file-schema/cryptography/cryptographysettings-element) 。 <xref:System.Web.Security.Membership.HashAlgorithmType%2A>属性必须与 `name` [`<nameEntry>`](/dotnet/framework/configure-apps/file-schema/cryptography/nameentry-element) 元素中元素的属性相匹配 [`<cryptoNameMapping>`](/dotnet/framework/configure-apps/file-schema/cryptography/cryptonamemapping-element) 。 有关详细信息，请参阅 [将算法名称映射到加密类](/dotnet/framework/configure-apps/map-algorithm-names-to-cryptography-classes)。  
  
 如果 <xref:System.Web.Security.Membership.HashAlgorithmType%2A> 未设置该属性，则 <xref:System.Web.Security.Membership> 类将使用在元素的属性中设置的哈希算法 `validation` `<machineKey>` 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="MaxInvalidPasswordAttempts">
      <MemberSignature Language="C#" Value="public static int MaxInvalidPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxInvalidPasswordAttempts" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxInvalidPasswordAttempts As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxInvalidPasswordAttempts { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxInvalidPasswordAttempts : int" Usage="System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在锁定成员资格用户之前允许的无效密码或密码答案尝试次数。</summary>
        <value>锁定成员资格用户之前允许的无效密码或密码答案尝试次数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> 属性与 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> 属性结合使用，以防止不需要的源使用重复尝试来猜测成员资格用户的密码或密码提示问题答案。  
  
 如果为成员资格用户输入的无效密码或密码答案的数量大于或等于 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> 属性指定的分钟数内的属性值 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> ，则用户将通过将 <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> 属性设置为， `true` 直到用户通过调用方法取消锁定，来锁定网站 <xref:System.Web.Security.MembershipUser.UnlockUser%2A> 。  
  
 如果在达到属性值之前提供了有效密码或密码答案 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> ，则跟踪无效尝试次数的计数器将设置为零。  
  
 无效的密码和密码答案尝试单独跟踪。 例如，如果将 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> 属性设置为5，则用户最多有5次尝试输入正确的密码，最多5次尝试输入正确的密码答案而不被锁定。  
  
 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A>属性值是使用 `maxInvalidPasswordAttempts` [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100))配置元素的特性在应用程序配置中设置的。  
  
 如果 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> 属性为 `false` ，则不会跟踪无效的密码答案尝试。  
  
   
  
## Examples  
 下面的代码示例演示应用程序 Web.config 文件的部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用类的实例 <xref:System.Web.Security.SqlMembershipProvider> 来提供成员身份服务，并将该属性设置 `maxInvalidPasswordAttempts` 为5次无效尝试，并将设置 `passwordAttemptWindow` 为30分钟。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredNonAlphanumericCharacters">
      <MemberSignature Language="C#" Value="public static int MinRequiredNonAlphanumericCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredNonAlphanumericCharacters As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredNonAlphanumericCharacters { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRequiredNonAlphanumericCharacters : int" Usage="System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取有效密码中必须包含的最少特殊字符数。</summary>
        <value>有效密码中必须包含的最少特殊字符数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>属性返回在为属性中指定的成员资格提供程序创建有效密码时必须输入的特殊非字母数字字符的最小数目 <xref:System.Web.Security.Membership.Provider%2A> 。  
  
 <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A>属性值是使用 `minRequiredNonAlphanumericCharacters` [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100))配置元素的特性在应用程序配置中设置的。  
  
 非字母数字字符是该 <xref:System.Char.IsLetterOrDigit%2A> 方法返回的字符 `false` 。  
  
   
  
## Examples  
 下面的代码示例演示应用程序 Web.config 文件的部分中的 [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 配置元素 `system.web` 。 它指定应用程序使用类的实例 <xref:System.Web.Security.SqlMembershipProvider> 来提供成员身份服务，并将 `minRequiredNonAlphanumericCharacters` 特性设置为1个字符。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredNonAlphanumericCharacters="1"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredPasswordLength">
      <MemberSignature Language="C#" Value="public static int MinRequiredPasswordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredPasswordLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredPasswordLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredPasswordLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRequiredPasswordLength : int" Usage="System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取密码所需的最小长度。</summary>
        <value>密码所需的最小长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>属性获取为属性中指定的成员资格提供程序创建有效密码时必须输入的最小字符数 <xref:System.Web.Security.Membership.Provider%2A> 。  
  
 <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A>属性值是使用 `minRequiredPasswordLength` [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100))配置元素的特性在应用程序配置中设置的。  
  
   
  
## Examples  
 下面的代码示例演示应用程序 Web.config 文件的部分中的 [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 配置元素 `system.web` 。 它指定应用程序使用类的实例 <xref:System.Web.Security.SqlMembershipProvider> 来提供成员身份服务，并将该属性设置 `minRequiredPasswordLength` 为七个字符。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredPasswordLength="7"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="PasswordAttemptWindow">
      <MemberSignature Language="C#" Value="public static int PasswordAttemptWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PasswordAttemptWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordAttemptWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int PasswordAttemptWindow { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PasswordAttemptWindow : int" Usage="System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取时间长度，在该时间间隔内对提供有效密码或密码答案的连续失败尝试次数进行跟踪。</summary>
        <value>对未能提供有效密码或密码答案的连续尝试次数进行跟踪的时间长度（以分钟为单位）。 默认值为 10 分钟。 如果当前失败尝试和上次失败尝试之间的间隔大于 <see cref="P:System.Web.Security.Membership.PasswordAttemptWindow" /> 属性设置，则每个失败尝试均被视为第一次失败尝试。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> 属性与属性结合使用 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> ，以帮助防止不需要的源通过重复尝试来猜测成员资格用户的密码或密码答案。 当用户尝试使用、更改或重置其密码时，在指定的时间范围内只允许一定数量的连续尝试。 此时间窗口的长度是在属性中指定的 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> ，它标识在无效尝试之间允许的分钟数。  
  
 如果用户重置其密码的连续失败尝试次数等于属性中存储的值 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> ，并且自上次无效尝试以来经过的时间小于在属性中指定的分钟数 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> ，则会锁定成员资格用户。用户通过将属性设置为锁定， <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> `true` 直到用户通过调用方法解除锁定 <xref:System.Web.Security.MembershipUser.UnlockUser%2A> 。  
  
 如果当前失败尝试与上次失败尝试之间的间隔大于 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> 属性设置，则当前的无效尝试将计为第一次。 如果在达到允许的最大尝试无效次数之前提供了有效密码答案，则无效密码答案尝试的计数将设置为 0 (零) 。 如果在达到允许的最大尝试无效次数之前提供了有效密码，则无效密码尝试次数和无效密码答案尝试计数将设置为 0 (零) 。  
  
 无效的密码和密码答案尝试彼此独立地累积。 例如，如果 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> 设置为5，并且三次密码尝试无效，之后接两次无效密码答案尝试，则两次密码尝试无效 (或必须在中进行其他三次无效的密码答案尝试) 才能 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> 锁定成员资格用户。  
  
 在 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> 应用程序配置中，通过使用 `passwordAttemptWindow` [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 配置-元素部分的属性来设置属性值。  
  
 如果将 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> 属性设置为 `false` ，则不会跟踪无效的密码答案尝试。  
  
   
  
## Examples  
 下面的代码示例显示了 ASP.NET 应用程序的 Web.config 文件部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用的实例 <xref:System.Web.Security.SqlMembershipProvider> ，并将 `maxInvalidPasswordAttempts` 属性设置为5个无效尝试，并将设置为 `passwordAttemptWindow` 30 分钟。  
  
```  
<membership defaultProvider="SqlProvider"   
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="PasswordStrengthRegularExpression">
      <MemberSignature Language="C#" Value="public static string PasswordStrengthRegularExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string PasswordStrengthRegularExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordStrengthRegularExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ PasswordStrengthRegularExpression { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PasswordStrengthRegularExpression : string" Usage="System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于计算密码的正则表达式。</summary>
        <value>用于计算密码的正则表达式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A>属性获取用于从属性中指定的提供程序计算密码复杂性的正则表达式 <xref:System.Web.Security.Membership.Provider%2A> 。  
  
 <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A>使用 `passwordStrengthRegularExpression` [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100))配置元素的特性在应用程序配置中设置属性。  
  
 有关正则表达式的详细信息，请参阅 [.NET Framework 正则表达式](/dotnet/standard/base-types/regular-expressions)。  
  
   
  
## Examples  
 下面的代码示例演示应用程序 Web.config 文件的部分中的 [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 配置元素 `system.web` 。 它指定应用程序使用类的实例 <xref:System.Web.Security.SqlMembershipProvider> 来提供成员身份服务，并将 `passwordStrengthRegularExpression` 特性设置为验证密码的正则表达式是否满足以下条件：  
  
-   超过7个字符。  
  
-   包含至少一个数字。  
  
-   包含至少一个特殊 (非字母数字) 字符。  
  
 如果密码不符合这些条件，则成员资格提供程序不接受该密码。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      passwordStrengthRegularExpression=" @\"(?=.{6,})(?=(.*\d){1,})(?=(.*\W){1,})"  
      />  
   </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As MembershipProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProvider ^ Provider { System::Web::Security::MembershipProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.MembershipProvider" Usage="System.Web.Security.Membership.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对应用程序的默认成员资格提供程序的引用。</summary>
        <value>使用 <see cref="T:System.Web.Security.MembershipProvider" /> 抽象基类公开的应用程序的默认成员资格提供程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Security.Membership.Provider%2A> 属性可以直接引用应用程序的默认成员资格提供程序。 这通常用于访问成员资格提供程序的自定义成员，这些成员资格提供程序不属于 <xref:System.Web.Security.MembershipProvider> 抽象基类。  
  
   
  
## Examples  
 下面的代码示例 <xref:System.Web.Security.SqlMembershipProvider> 使用属性访问为应用程序启用的默认 <xref:System.Web.Security.Membership.Provider%2A> 值，以便确定自定义属性的值 <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> 。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.Membership#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providervb.aspx#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As MembershipProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProviderCollection ^ Providers { System::Web::Security::MembershipProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.MembershipProviderCollection" Usage="System.Web.Security.Membership.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个用于 ASP.NET 应用程序的成员资格提供程序的集合。</summary>
        <value>一个为 ASP.NET 应用程序配置的成员资格提供程序的 <see cref="T:System.Web.Security.MembershipProviderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.Providers%2A>属性引用为应用程序启用的所有成员资格提供程序，包括添加到应用程序的 Web.config 文件中的提供程序和所有应用程序的 Machine.config 文件。 你可以使用应用程序配置中[成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100))部分的 "[提供](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/6d4936ht(v%3dvs.100))程序" 元素来控制哪些成员资格提供程序可用于应用程序。 例如，下面的示例显示了应用程序 Web.config 文件中的 [成员资格](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 部分，该应用程序删除了 <xref:System.Web.Security.SqlMembershipProvider> `AspNetSqlProvider` 在计算机配置文件中指定)  (实例，并将 <xref:System.Web.Security.SqlMembershipProvider> 名为的实例添加为 `SqlProvider` 应用程序的默认成员资格提供程序。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
          <add name="SqlProvider"  
            type="System.Web.Security.SqlMembershipProvider"  
            connectionStringName="SqlServices"  
            enablePasswordRetrieval="false"  
            enablePasswordReset="true"  
            requiresQuestionAndAnswer="true"  
            passwordFormat="Hashed"  
            applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 [ (ASP.NET Settings Schema) 部分指定成员身份元素](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v=vs.100))时，必须指定 `defaultProvider` 属性。 如果未在 Web.config 中 [ (ASP.NET Settings Schema) 部分指定成员身份元素 ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v=vs.100)) ，则将使用计算机配置中的值，并将名为的 <xref:System.Web.Security.SqlMembershipProvider> 实例 `AspNetSqlProvider` 建立为 `defaultProvider` 。  
  
 可以 <xref:System.Web.Security.Membership.Providers%2A> 通过按名称为成员资格提供程序编制索引并将其强制转换为所需的类型，从集合中获取对提供程序的强类型引用。  
  
   
  
## Examples  
 下面的代码示例列出了为应用程序以及其各自的类型启用的提供程序。  
  
 [!code-aspx-csharp[System.Web.Security.Membership#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Membership#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="RequiresQuestionAndAnswer">
      <MemberSignature Language="C#" Value="public static bool RequiresQuestionAndAnswer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequiresQuestionAndAnswer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequiresQuestionAndAnswer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequiresQuestionAndAnswer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequiresQuestionAndAnswer : bool" Usage="System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示默认成员资格提供程序是否求用户在进行密码重置和检索时回答密码提示问题。</summary>
        <value>如果密码重置和检索需要提供密码提示问题答案，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在检索或重置用户密码时，需要密码提示问题和答案可以提供额外的安全层。 用户可以在创建其用户名时提供问题和答案，以后可以使用这些名称来检索或重置遗忘的密码。  
  
 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> 在 <xref:System.Web.Security.MembershipUser.ResetPassword%2A> 调用或时选中 <xref:System.Web.Security.MembershipUser.GetPassword%2A> 。 <xref:System.NotSupportedException>如果 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> 为 `true` ，并且提供的密码答案为，则随 .NET Framework 提供的提供程序引发 `null` 。  
  
 如果 <xref:System.Web.Security.Membership.EnablePasswordReset%2A> 和 <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> 都是 `false` ，则 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> 仍可用于在创建新用户时强制创建问题和答案; 但是，不会使用问题和答案。 你将能够使用类检索问题 <xref:System.Web.Security.MembershipUser> 。  
  
 有关详细信息，请参阅 <xref:System.Web.Security.MembershipUser.ResetPassword%2A> 和 <xref:System.Web.Security.MembershipUser.GetPassword%2A>。  
  
   
  
## Examples  
 下面的代码示例显示了 ASP.NET 应用程序的 Web.config 文件部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用的实例 <xref:System.Web.Security.SqlMembershipProvider> ，启用密码重置，并在执行重置时要求提供密码答案。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 下面的代码示例检查的值 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> ，并添加在创建用户时要提供的密码提示问题和答案的必要控件。  
  
> [!IMPORTANT]
>  此示例包括一个接受用户输入的文本框，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateUser">
      <MemberSignature Language="C#" Value="public static void UpdateUser (System.Web.Security.MembershipUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateUser(class System.Web.Security.MembershipUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.UpdateUser(System.Web.Security.MembershipUser)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UpdateUser (user As MembershipUser)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateUser(System::Web::Security::MembershipUser ^ user);" />
      <MemberSignature Language="F#" Value="static member UpdateUser : System.Web.Security.MembershipUser -&gt; unit" Usage="System.Web.Security.Membership.UpdateUser user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.Web.Security.MembershipUser" />
      </Parameters>
      <Docs>
        <param name="user">一个 <see cref="T:System.Web.Security.MembershipUser" /> 对象，表示要更新的用户及其更新信息。</param>
        <summary>用指定用户的信息更新数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.UpdateUser%2A> 作为输入，将 <xref:System.Web.Security.MembershipUser> 使用成员资格用户的当前信息填充对象，并使用对象的属性值更新数据源 <xref:System.Web.Security.MembershipUser> 。 您可以 <xref:System.Web.Security.MembershipUser> <xref:System.Web.Security.MembershipUser> 使用 <xref:System.Web.Security.Membership.GetUser%2A> 、 <xref:System.Web.Security.Membership.GetAllUsers%2A> 、 <xref:System.Web.Security.Membership.FindUsersByName%2A> 或方法构造新的，或检索使用数据源中的当前值填充的对象 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 。  
  
   
  
## Examples  
 下面的代码示例将更新当前已登录用户的电子邮件地址。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="user" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="UserIsOnlineTimeWindow">
      <MemberSignature Language="C#" Value="public static int UserIsOnlineTimeWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 UserIsOnlineTimeWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserIsOnlineTimeWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int UserIsOnlineTimeWindow { int get(); };" />
      <MemberSignature Language="F#" Value="member this.UserIsOnlineTimeWindow : int" Usage="System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定用户在最近一次活动的日期/时间戳之后被视为联机的分钟数。</summary>
        <value>用户在最近一次活动的日期/时间戳之后被视为联机的分钟数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在对 <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> 的调用过程中，将检查属性值 <xref:System.Web.Security.Membership.GetNumberOfUsersOnline%2A> 。 如果 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> 用户的大于当前日期和时间减去 <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> 值（以分钟为单位），则用户将被视为处于联机状态。 您可以使用类的属性确定成员资格用户是否被视为联机 <xref:System.Web.Security.MembershipUser.IsOnline%2A> <xref:System.Web.Security.MembershipUser> 。  
  
 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A>当方法成功验证用户的凭据时，将更新用户的 <xref:System.Web.Security.Membership.ValidateUser%2A> 。 你还可以 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> 在调用某个重载时为成员资格用户更新 <xref:System.Web.Security.Membership.GetUser%2A> 。 如果调用 <xref:System.Web.Security.Membership.GetUser%2A> 采用参数的重载 `userIsOnline` ，请将值指定 `true` 为，以便为用户更新 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> 。  
  
   
  
## Examples  
 下面的代码示例显示了 ASP.NET 应用程序的 Web.config 文件部分中的 [成员身份](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1b9hw62f(v%3dvs.100)) 元素 `system.web` 。 它指定应用程序使用的实例 <xref:System.Web.Security.SqlMembershipProvider> ，并将 `userIsOnlineTimeWindow` 属性设置为20分钟。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateUser">
      <MemberSignature Language="C#" Value="public static bool ValidateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ValidateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ValidateUser (username As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ValidateUser(System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member ValidateUser : string * string -&gt; bool" Usage="System.Web.Security.Membership.ValidateUser (username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要验证的用户的名称。</param>
        <param name="password">指定的用户的密码。</param>
        <summary>验证提供的用户名和密码是有效的。</summary>
        <returns>如果提供的用户名和密码有效，则返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.ValidateUser%2A> 提供了一种简单的方法来验证数据源的用户名和密码。 请注意，如果 `username` 参数为空或 `null` ， <xref:System.Web.HttpException> 则会引发。  
  
   
  
## Examples  
 下面的代码示例显示了配置为使用 forms 身份验证和类的 ASP.NET 应用程序的登录页 <xref:System.Web.Security.Membership> 。 如果提供的用户凭据无效，则向用户显示一条消息。 否则，该方法将用户重定向到最初请求的 URL <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 。  
  
> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
    <Member MemberName="ValidatingPassword">
      <MemberSignature Language="C#" Value="public static event System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword" />
      <MemberSignature Language="DocId" Value="E:System.Web.Security.Membership.ValidatingPassword" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ValidatingPassword As MembershipValidatePasswordEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Web::Security::MembershipValidatePasswordEventHandler ^ ValidatingPassword;" />
      <MemberSignature Language="F#" Value="member this.ValidatingPassword : System.Web.Security.MembershipValidatePasswordEventHandler " Usage="member this.ValidatingPassword : System.Web.Security.MembershipValidatePasswordEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipValidatePasswordEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建了用户、更改了密码或重置了密码时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.MembershipProvider.ValidatingPassword>当 <xref:System.Web.Security.MembershipProvider.CreateUser%2A> <xref:System.Web.Security.MembershipProvider.ChangePassword%2A> <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> 调用成员资格提供程序的方法、方法或方法时，将引发事件。  
  
 您可以使用 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> 事件来验证成员资格用户的密码格式和值。  
  
 您可以 <xref:System.Web.Security.MembershipProvider.CreateUser%2A> <xref:System.Web.Security.MembershipProvider.ChangePassword%2A> 通过在 <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> <xref:System.Web.Security.ValidatePasswordEventArgs> 事件中将提供的的属性设置为， `true` 取消当前的、或操作 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> 。  
  
 如果通过将属性设置为取消当前操作 <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> `true` ，则可以将 <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> 提供的的属性设置 <xref:System.Web.Security.ValidatePasswordEventArgs> 为描述密码验证失败原因的异常。 调用方法将引发 <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> 属性设置为的异常。 如果 <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> 属性为 `null` ，则调用方将引发一般密码验证失败异常。  
  
   
  
## Examples  
 下面的代码示例演示了一个 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> 事件，该事件验证用户的密码格式并在密码与所需格式不匹配时取消该操作。  
  
 [!code-csharp[System.Web.Security.Membership#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/CreateUser3cs.aspx#11)]
 [!code-vb[System.Web.Security.Membership#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/CreateUser3vb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yh26yfzy(v=vs.100)">ASP.NET 成员资格简介</related>
      </Docs>
    </Member>
  </Members>
</Type>
