<Type Name="FormsAuthentication" FullName="System.Web.Security.FormsAuthentication">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce244ac90cb162e8e8feb1b0e39396fb30dc2740" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89998298" /></Metadata><TypeSignature Language="C#" Value="public sealed class FormsAuthentication" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FormsAuthentication extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.FormsAuthentication" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FormsAuthentication" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormsAuthentication sealed" />
  <TypeSignature Language="F#" Value="type FormsAuthentication = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 Web 应用程序管理 Forms 身份验证服务。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Forms 身份验证对不需要 Windows 身份验证的 Web 应用程序启用用户和密码验证。 使用窗体身份验证时，用户信息存储在外部数据源（如数据库）中，或存储在 <xref:System.Web.Security.Membership> 应用程序的配置文件中。 对用户进行身份验证后，表单身份验证将在 cookie 或 URL 中维护一个身份验证票证，以便经过身份验证的用户无需为每个请求提供凭据。

 通过将 `mode` [身份验证](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/532aee0e(v%3dvs.100)) 配置元素的属性设置为，可以启用表单身份验证 `Forms` 。 你可以要求对应用程序的所有请求都包含有效的用户身份验证票证，方法是使用 [授权](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/8d82143t(v%3dvs.100)) 配置元素来拒绝任何未知用户的请求，如以下示例中所示。

```
<system.web>
  <authentication mode="Forms">
    <forms loginUrl="login.aspx" />
  </authentication>
  <authorization>
    <deny users="?" />
  </authorization>
</system.web>
```

 在上面的示例中，对作为应用程序的一部分的 ASP.NET 页面的任何请求都需要由 forms 身份验证提供的有效用户名。 如果不存在用户名，则将请求重定向到配置的 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 。

 <xref:System.Web.Security.FormsAuthentication>类提供对可在对用户进行身份验证的应用程序中使用的方法和属性的访问。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法将浏览器重定向到配置的， <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 以便用户登录到应用程序。 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将已经过身份验证的用户重定向回请求的原始受保护 URL 或 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。 还提供了一些方法，使你能够根据需要管理 forms 身份验证票证。



## Examples
 下面的代码示例演示 ASP.NET 应用程序的 Web.config 文件，该应用程序使用 ASP.NET 成员资格提供程序进行窗体身份验证，并要求所有用户进行身份验证。

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>
  <system.web>
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">
      <providers>
        <add name="SqlProvider"
          type="System.Web.Security.SqlMembershipProvider"
          connectionStringName="SqlServices"
          enablePasswordRetrieval="false"
          enablePasswordReset="true"
          requiresQuestionAndAnswer="true"
          passwordFormat="Hashed"
          applicationName="/" />
      </providers>
    </membership>
  </system.web>
</configuration>
```

 下面的代码示例演示使用 forms authentication 和 ASP.NET 成员身份的 ASP.NET 应用程序的登录页。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]

 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/9wff0kyh(v=vs.100)">Forms 身份验证提供程序</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormsAuthentication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormsAuthentication();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Security.FormsAuthentication" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 不应在代码中使用此构造函数。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static bool Authenticate (string name, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Authenticate(string name, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (name As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Authenticate(System::String ^ name, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * string -&gt; bool" Usage="System.Web.Security.FormsAuthentication.Authenticate (name, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">用户名。</param>
        <param name="password">用户的密码。</param>
        <summary>对照存储在应用程序配置文件中的凭据来验证用户名和密码。</summary>
        <returns>如果用户名和密码有效，则返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 身份验证方法验证存储在应用程序配置文件的 " [凭据](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e01fc50a(v%3dvs.100)) " 部分中的用户凭据。 或者，你可以使用 ASP.NET 成员身份来存储用户凭据，并调用 <xref:System.Web.Security.MembershipProvider.ValidateUser%2A> 来验证凭据。 有关详细信息，请参阅 [使用成员身份管理用户](https://docs.microsoft.com/previous-versions/aspnet/tw292whz(v=vs.100))。

 为了提高安全性，可以使用方法对应用程序的配置文件中存储的密码进行加密 <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> 。



## Examples
 下面的代码示例显示了存储在应用程序的 Web.config 文件中的用户凭据。 已使用方法对密码值进行哈希处理 <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> 。

 此示例使用 SHA1。 由于与 SHA1 冲突，Microsoft 建议使用 SHA256。

 `<authentication mode="Forms">`

 `<forms loginUrl="login.aspx">`

 `<credentials passwordFormat="SHA1">`

 `<user name="user1"   password="27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C" />`

 `<user name="user2"   password="D108F80936F78DFDD333141EBC985B0233A30C7A" />`

 `<user name="user3" password="7BDB09781A3F23885CD43177C0508B375CB1B7E9"/>`

 `</credentials>`

 `</forms>`

 `</authentication>`

 下面的代码示例演示一个使用 <xref:System.Web.Security.FormsAuthentication.Authenticate%2A> 方法验证用户凭据的登录页。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/loginvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="CookieDomain">
      <MemberSignature Language="C#" Value="public static string CookieDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieDomain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieDomain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieDomain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieDomain : string" Usage="System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Forms 身份验证 Cookie 的域的值。</summary>
        <value>Forms 身份验证 Cookie 的 <see cref="P:System.Web.HttpCookie.Domain" />。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A>属性值是在 ASP.NET 应用程序的配置文件中使用 `domain` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。 <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A>属性值决定了 <xref:System.Web.HttpCookie.Domain%2A> cookie 将用于的。



## Examples
 下面的代码示例在 `domain` Web.config 文件中设置特性。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="UseCookies"
    domain="contoso.com" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieMode : System.Web.HttpCookieMode" Usage="System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已对应用程序配置了无 Cookie Forms 身份验证。</summary>
        <value>一个 <see cref="T:System.Web.HttpCookieMode" /> 值，该值指示是否已将应用程序配置为进行无 Cookie 的 Forms 身份验证。 默认值为 <see cref="F:System.Web.HttpCookieMode.UseDeviceProfile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性反映 `cookieless` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性的值。 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A>属性确定 <xref:System.Web.Security.FormsAuthenticationTicket> 值是存储在浏览器中的会话 cookie 中，还是存储在 <xref:System.Web.HttpRequest.QueryString%2A> 属性中。

> [!NOTE]
>  当 <xref:System.Web.Security.FormsAuthenticationTicket> 值存储在 URI 中时，所生成的 uri 的长度可能超过允许的最大长度。 如果将 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> 属性设置为应用程序名称，并且应用程序名称长 (40 或更多字符) ，应用程序中的用户名较长，或者当长 <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> 串存储在值中时，则很可能会出现这种情况 <xref:System.Web.Security.FormsAuthenticationTicket> 。 如果生成的 URI 太长，Web 服务器将返回 `400 - Bad Request` 错误。



## Examples
 下面的代码示例将 `cookieless` 属性设置为 `AutoDetect` Web.config 文件中的。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="AutoDetect" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSameSite">
      <MemberSignature Language="C#" Value="public static System.Web.SameSiteMode CookieSameSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.SameSiteMode CookieSameSite" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSameSite As SameSiteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::SameSiteMode CookieSameSite { System::Web::SameSiteMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSameSite : System.Web.SameSiteMode" Usage="System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SameSiteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 cookie 的 SameSite 属性的值。</summary>
        <value>一个枚举值，它表示 cookie 的强制模式。 默认值是 <see cref="F:System.Web.SameSiteMode.Lax" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesSupported">
      <MemberSignature Language="C#" Value="public static bool CookiesSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookiesSupported" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiesSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookiesSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiesSupported : bool" Usage="System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示应用程序是否已配置为支持无 Cookie Forms 身份验证。</summary>
        <value>如果应用程序已配置为支持无 Cookie 的 Forms 身份验证，则返回 <see langword="false" />；否则返回 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>属性根据 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 值和浏览器的功能来返回值。

-   如果将 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 属性设置为 <xref:System.Web.HttpCookieMode.UseCookies> ，则 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性将返回 `true` 。

-   如果将 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 属性设置为 <xref:System.Web.HttpCookieMode.UseUri> ，则 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性将返回 `false` 。

-   如果将 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 属性设置为 <xref:System.Web.HttpCookieMode.AutoDetect> ，则在 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> `true` 浏览器支持 cookie 和 cookie 时，属性将返回; 否则， <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性将返回 `false` 。

-   如果将 <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 属性设置为 <xref:System.Web.HttpCookieMode.UseDeviceProfile> ，则 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 当的 `true` <xref:System.Web.HttpRequest.Browser%2A> 对于当前 <xref:System.Web.HttpContext.Request%2A> 同时支持 cookie 和通过 cookie 重定向时，属性将返回; 否则，该 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性将返回 `false` 。



## Examples
 下面的代码示例将 `cookieless` 属性设置为 <xref:System.Web.HttpCookieMode.UseUri> Web.config 文件中的。 此配置将导致 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性返回 `false` 。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="UseUri" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket Decrypt(string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Decrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrypt (encryptedTicket As String) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ Decrypt(System::String ^ encryptedTicket);" />
      <MemberSignature Language="F#" Value="static member Decrypt : string -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.Decrypt encryptedTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encryptedTicket">加密的身份验证票。</param>
        <summary>创建一个 <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 对象，此对象将根据传递给该方法的加密的 Forms 身份验证票证而定。</summary>
        <returns><see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 对象。 如果 <paramref name="encryptedTicket" /> 参数不是有效票证，则返回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="encryptedTicket" /> 为 <see langword="null" />。

- 或 -

 <paramref name="encryptedTicket" /> 为空字符串 ("")。

- 或 -

<paramref name="encryptedTicket" /> 的长度超过 4096 个字符。

- 或 -

 <paramref name="encryptedTicket" /> 的格式无效。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultUrl">
      <MemberSignature Language="C#" Value="public static string DefaultUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DefaultUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUrl : string" Usage="System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在没有指定重定向 URL 时 <see cref="T:System.Web.Security.FormsAuthentication" /> 类将重定向到的 URL。</summary>
        <value>在没有指定重定向 URL 时 <see cref="T:System.Web.Security.FormsAuthentication" /> 类将重定向到的 URL。 默认值为“default.aspx”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>属性值是在 ASP.NET 应用程序的配置文件中使用 `defaultUrl` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 如果请求中不包含返回 URL，则方法将使用属性。 同样， <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 如果请求中不包含返回 URL，则方法将返回。



## Examples
 下面的代码示例在 `defaultUrl` Web.config 文件中设置特性。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    defaultUrl="index.aspx" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCrossAppRedirects">
      <MemberSignature Language="C#" Value="public static bool EnableCrossAppRedirects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableCrossAppRedirects" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnableCrossAppRedirects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableCrossAppRedirects { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnableCrossAppRedirects : bool" Usage="System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否可以将经过身份验证的用户重定向到其他 Web 应用程序中的 URL。</summary>
        <value>如果可以将经过身份验证的用户重定向到其他 Web 应用程序中的 URL，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>属性值是使用 `enableCrossAppRedirects` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。

 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 重定向 URL 未指向当前应用程序中的页面时，将在方法中检查属性。 如果 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 为 `true` ，则执行重定向; 如果 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 为，则将 `false` 浏览器重定向到属性中定义的页 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。

> [!NOTE]
> 跨应用程序重定向页面时，必须确保 [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100)) 配置元素中的特定属性在经过身份验证的应用程序中重复。 有关详细信息和示例，请参阅 [跨应用程序的窗体身份验证](https://docs.microsoft.com/previous-versions/aspnet/eb0zx8fc(v=vs.100))。
  
> [!IMPORTANT]
>  当允许跨应用程序重定向时，你的网站容易受到攻击，将用户定向到恶意网站，但使用网站的登录页。 请始终验证方法返回的重定向 URL <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 是否为所需的 url，以便确保只允许重定向到批准的网站。 还必须验证 "重定向 URL" (HTTP 或 HTTPS) 使用适当的协议。 若要执行这些验证，可以将回发事件处理程序添加到登录页，也可以为控件的事件添加处理程序 <xref:System.Web.UI.WebControls.Login.LoggedIn> <xref:System.Web.UI.WebControls.Login> 。



## Examples
 下面的代码示例将 `enableCrossAppRedirects` `true` ASP.NET 应用程序的 Web.config 文件中的特性设置为。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="UseUri"
    requireSSL="true"
    enableCrossAppRedirects="true" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="EnableFormsAuthentication">
      <MemberSignature Language="C#" Value="public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableFormsAuthentication(class System.Collections.Specialized.NameValueCollection configurationData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableFormsAuthentication (configurationData As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableFormsAuthentication(System::Collections::Specialized::NameValueCollection ^ configurationData);" />
      <MemberSignature Language="F#" Value="static member EnableFormsAuthentication : System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="System.Web.Security.FormsAuthentication.EnableFormsAuthentication configurationData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationData" Type="System.Collections.Specialized.NameValueCollection" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="configurationData">包含“defaultUrl”和/或“loginUrl”值的名称值集合。 如果没有默认 URL 或登录 URL 值，该参数可以为 null。</param>
        <summary>启动窗体验证。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 属性为 `null` ，则该属性将设置为参数中的默认 URL 值 `configurationData` 。 如果 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 属性为 `null` ，则将该属性设置为参数中的登录 URL 值 `configurationData` 。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">应用程序不在预启动初始化阶段。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encrypt(class System.Web.Security.FormsAuthenticationTicket ticket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encrypt (ticket As FormsAuthenticationTicket) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Encrypt(System::Web::Security::FormsAuthenticationTicket ^ ticket);" />
      <MemberSignature Language="F#" Value="static member Encrypt : System.Web.Security.FormsAuthenticationTicket -&gt; string" Usage="System.Web.Security.FormsAuthentication.Encrypt ticket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticket" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="ticket">用于创建加密的 Forms 身份验证票证的 <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 对象。</param>
        <summary>创建一个字符串，其中包含适用于 HTTP Cookie 的加密的 Forms 身份验证票证。</summary>
        <returns>一个字符串，其中包含加密的 Forms 身份验证票证。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 下面的代码示例使用属性将方法的结果存储 <xref:System.Web.Security.FormsAuthentication.Encrypt%2A> 在 cookie 中 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> ，并将用户重定向到从方法返回的 URL <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ticket" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="FormsCookieName">
      <MemberSignature Language="C#" Value="public static string FormsCookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookieName : string" Usage="System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于存储 Forms 身份验证票证的 Cookie 名称。</summary>
        <value>用于存储 Forms 身份验证票证的 Cookie 名称。 默认值是“.ASPXAUTH”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>属性值是在 ASP.NET 应用程序的配置文件中使用 `name` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A>用于引用存储信息的 cookie <xref:System.Web.Security.FormsAuthenticationTicket> 。



## Examples
 下面的代码示例 <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> 使用 `name` Web.config 文件中的属性设置属性值。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="UseCookies"
    name=".ASPXFORMSAUTH" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="FormsCookiePath">
      <MemberSignature Language="C#" Value="public static string FormsCookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookiePath : string" Usage="System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Forms 身份验证 Cookie 的路径。</summary>
        <value>存储 Forms 身份验证票证信息的 Cookie 的路径。 默认值是“/”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>使用 `path` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性在 ASP.NET 应用程序的配置文件中设置属性值。 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>指定 <xref:System.Web.HttpCookie.Path%2A> 存储信息的 cookie 的 <xref:System.Web.Security.FormsAuthenticationTicket> 。



## Examples
 下面的代码示例 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> 使用 `path` Web.config 文件中的属性设置属性值。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="UseCookies"
    path="/MyApplication" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为给定的用户名创建身份验证 Cookie。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已验证身份的用户的名称。</param>
        <param name="createPersistentCookie">若要创建持久 Cookie（跨浏览器会话保存的 Cookie），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>为给定的用户名创建身份验证 Cookie。 这不会将 Cookie 设置为传出响应的一部分，因此应用程序对如何发出该 Cookie 有更多的控制权限。</summary>
        <returns>一个 <see cref="T:System.Web.HttpCookie" />，其中包含加密的 Forms 身份验证票证信息。 使用 <see cref="P:System.Web.Security.FormsAuthentication.FormsCookiePath" /> 属性的默认值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Cookie 的路径由 <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> 属性确定。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool * string -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">已验证身份的用户的名称。</param>
        <param name="createPersistentCookie">若要创建持久 Cookie（跨浏览器会话保存的 Cookie），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="strCookiePath">身份验证 Cookie 的 <see cref="P:System.Web.HttpCookie.Path" />。</param>
        <summary>为给定的用户名创建身份验证 Cookie。 这不会将 Cookie 设置为传出响应的一部分。</summary>
        <returns>一个 <see cref="T:System.Web.HttpCookie" />，其中包含加密的 Forms 身份验证票证信息。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="GetRedirectUrl">
      <MemberSignature Language="C#" Value="public static string GetRedirectUrl (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRedirectUrl(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRedirectUrl (userName As String, createPersistentCookie As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRedirectUrl(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetRedirectUrl : string * bool -&gt; string" Usage="System.Web.Security.FormsAuthentication.GetRedirectUrl (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已验证身份的用户的名称。</param>
        <param name="createPersistentCookie">忽略此参数。</param>
        <summary>返回导致重定向到登录页的原始请求的重定向 URL。</summary>
        <returns>一个包含重定向 URL 的字符串，或者如果 <paramref name="userName" /> 为 null，则为 null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果要在应用程序代码中执行重定向，而不是使用方法，则可以使用此方法 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 。

 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>方法使用变量名称返回在查询字符串中指定的 URL `ReturnURL` 。 例如，在 URL 中 `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx` ， <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 方法返回返回 URL `caller.aspx` 。 如果该 `ReturnURL` 变量不存在，则该 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 方法将在属性中返回 URL <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。

 当浏览器重定向到登录页时，ASP.NET 会自动添加返回 URL。

 默认情况下，该 `ReturnUrl` 变量必须引用当前应用程序中的页面。 如果 `ReturnUrl` 引用不同应用程序或不同服务器上的页，则这些方法将 <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 在属性中返回 URL <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。 如果要允许返回 URL 引用当前应用程序之外的页，则必须将 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性设置为 `true` 使用 `enableCrossAppRedirects` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100)) 配置元素的特性。

此方法不创建 cookie。

> [!IMPORTANT]
>  将 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性设置为以 `true` 允许跨应用程序重定向是潜在的安全威胁。 有关更多信息，请参见 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性。



## Examples
 下面的代码示例将经过身份验证的用户重定向到从方法返回的 URL <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="HashPasswordForStoringInConfigFile">
      <MemberSignature Language="C#" Value="public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HashPasswordForStoringInConfigFile(string password, string passwordFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashPasswordForStoringInConfigFile (password As String, passwordFormat As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HashPasswordForStoringInConfigFile(System::String ^ password, System::String ^ passwordFormat);" />
      <MemberSignature Language="F#" Value="static member HashPasswordForStoringInConfigFile : string * string -&gt; string" Usage="System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile (password, passwordFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="passwordFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="password">要进行哈希运算的密码。</param>
        <param name="passwordFormat">要使用的哈希算法。 <paramref name="passwordFormat" /> 是一个 <see langword="String" />，表示 <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> 枚举值之一。</param>
        <summary>根据指定的密码和哈希算法生成一个适合于存储在配置文件中的哈希密码。</summary>
        <returns>经过哈希运算的密码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>方法创建一个可在应用程序的配置文件中存储 forms 身份验证凭据时使用的哈希密码值。

 在应用程序的配置文件中存储的身份验证凭据由 <xref:System.Web.Security.FormsAuthentication.Authenticate%2A> 方法用于验证应用程序用户的密码。 或者，你可以使用 ASP.NET 成员身份来存储用户凭据。 有关详细信息，请参阅 [使用成员身份管理用户](https://docs.microsoft.com/previous-versions/aspnet/tw292whz(v=vs.100))。



## Examples
 下面的代码示例采用用户名、密码和哈希类型，并显示包括用户定义和哈希密码的配置的 " [凭据](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e01fc50a(v%3dvs.100)) " 部分。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[FormsAuthenticationHashPassword#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationHashPassword/CS/formsauthenticationhashpasswordcs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationHashPassword#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationHashPassword/VB/formsauthenticationhashpasswordvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="password" /> 为 <see langword="null" />

- 或 -

 <paramref name="passwordFormat" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="passwordFormat" /> 不是有效的 <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> 值。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Initialize();" />
      <MemberSignature Language="F#" Value="static member Initialize : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>根据应用程序的配置设置初始化 <see cref="T:System.Web.Security.FormsAuthentication" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.Initialize%2A>当创建类的实例时，将调用方法 <xref:System.Web.Security.FormsAuthenticationModule> <xref:System.Web.Security.FormsAuthentication> 。 此方法不应在您的代码中调用。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public static bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool" Usage="System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否启用了 Forms 身份验证。</summary>
        <value>如果启用窗体身份验证，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginUrl">
      <MemberSignature Language="C#" Value="public static string LoginUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LoginUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LoginUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LoginUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LoginUrl : string" Usage="System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.Security.FormsAuthentication" /> 类将重定向到的登录页的 URL。</summary>
        <value><see cref="T:System.Web.Security.FormsAuthentication" /> 类将重定向到的登录页的 URL。 默认值为“login.aspx”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>属性值是在 ASP.NET 应用程序的配置文件中使用 `loginUrl` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>由 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 方法使用。



## Examples
 下面的代码示例在 `loginUrl` Web.config 文件中设置特性。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    defaultUrl="index.aspx" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectFromLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将经过身份验证的用户重定向回最初请求的 URL 或默认 URL。</summary>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">经过身份验证的用户名。</param>
        <param name="createPersistentCookie">若要创建持久 Cookie（跨浏览器会话保存的 Cookie），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>将经过身份验证的用户重定向回最初请求的 URL 或默认 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到使用变量名称在查询字符串中指定的 URL `ReturnURL` 。 例如，在 URL 中 `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx` ，方法将 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 重定向到返回 URL `caller.aspx` 。 如果该 `ReturnURL` 变量不存在，则该 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 方法将重定向到属性中的 URL <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。

 当浏览器重定向到登录页时，ASP.NET 会自动添加返回 URL。

 默认情况下，该 `ReturnUrl` 变量必须引用当前应用程序中的页面。 如果 `ReturnUrl` 引用不同应用程序或不同服务器上的页，则 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 方法将重定向到属性中的 URL <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。 如果要允许重定向到当前应用程序之外的页，则必须将属性设置 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 为 `true` 使用 `enableCrossAppRedirects` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100)) 配置元素的特性。

> [!IMPORTANT]
>  将 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性设置为以 `true` 允许跨应用程序重定向是潜在的安全威胁。 有关更多信息，请参见 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性。

 如果 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性为 `true` ，并且 `ReturnUrl` 变量在当前应用程序中，或者 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性为 `true` ，则该方法将 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 发出一个身份验证票证，并使用方法将其放在默认 cookie 中 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 。

 如果 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 为， `false` 并且重定向路径为当前应用程序中的 URL，则票证将作为重定向 URL 的一部分发出。 如果 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 为 `false` ， <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> `true` 并且 "重定向 URL" 未引用当前应用程序中的页，则该 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 方法将发出一个身份验证票证，并将其放在 <xref:System.Web.HttpRequest.QueryString%2A> 属性中。



## Examples
 下面的代码示例将经过验证的用户重定向到最初请求的 URL 或 <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。 此代码示例使用 ASP.NET 成员身份来验证用户。 有关 ASP.NET 成员身份的详细信息，请参阅 [使用成员身份管理用户](https://docs.microsoft.com/previous-versions/aspnet/tw292whz(v=vs.100))。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">查询字符串中指定的返回 URL 包含 HTTP: 或 HTTPS: 以外的协议。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">经过身份验证的用户名。</param>
        <param name="createPersistentCookie">若要创建持久 Cookie（跨浏览器会话保存的 Cookie），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="strCookiePath">Forms 身份验证票证的 Cookie 路径。</param>
        <summary>使用 Forms 身份验证 Cookie 的指定 Cookie 路径，将经过身份验证的用户重定向回最初请求的 URL 或默认 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>方法将重定向到使用变量名在查询字符串中指定的返回 URL `ReturnURL` 。 例如，在 URL 中 `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx` ，方法将 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 重定向到返回 URL `caller.aspx` 。 如果该 `ReturnURL` 变量不存在，则该 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 方法将重定向到属性中的 URL <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。

 当浏览器重定向到登录页时，ASP.NET 会自动添加返回 URL。

 默认情况下，该 `ReturnUrl` 变量必须引用当前应用程序中的页面。 如果 `ReturnUrl` 引用不同应用程序或不同服务器上的页，则 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 方法将重定向到属性中的 URL <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。 如果要允许重定向到当前应用程序之外的页，则必须将属性设置 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 为 `true` 使用 `enableCrossAppRedirects` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100)) 配置元素的特性。

> [!IMPORTANT]
>  将 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性设置为以 `true` 允许跨应用程序重定向是潜在的安全威胁。 有关更多信息，请参见 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性。

 如果 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 属性为 `true` ，并且 `ReturnUrl` 变量在当前应用程序中，或者 <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 属性为 `true` ，则该方法将 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 发出一个身份验证票证，并使用方法将其放在参数指定的 cookie 中 `strCookiePath` <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 。

 如果 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 为， `false` 并且重定向路径为当前应用程序中的 URL，则票证将作为重定向 URL 的一部分发出。 如果 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 为 `false` ， <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> `true` 并且 "重定向 URL" 未引用当前应用程序中的页，则该 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> 方法将发出一个身份验证票证，并将其放在 <xref:System.Web.HttpRequest.QueryString%2A> 属性中。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">查询字符串中指定的返回 URL 包含 HTTP: 或 HTTPS: 以外的协议。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectToLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将浏览器重定向到登录 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法将浏览器重定向到 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 。

 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法不清除 forms 身份验证 cookie。 您可以将 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 方法与方法结合使用 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> 以记录一个用户，并允许其他用户登录。

 与 <xref:System.Web.HttpResponse.Redirect%2A?displayProperty=nameWithType> 方法不同，此方法不会通过调用来结束请求 <xref:System.Web.HttpResponse.End%2A?displayProperty=nameWithType> 。 这意味着 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 将运行方法调用之后的代码。



## Examples
 下面的代码示例使用方法清除 forms 身份验证 cookie <xref:System.Web.Security.FormsAuthentication.SignOut%2A> ，并使用方法将用户重定向到登录页 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 。

 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage();" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将浏览器重定向到登录 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法将浏览器重定向到 <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 。

 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法不清除 forms 身份验证 cookie。 您可以将 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 方法与方法结合使用 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> 以记录一个用户，并允许其他用户登录。



## Examples
 下面的代码示例使用方法清除 forms 身份验证 cookie <xref:System.Web.Security.FormsAuthentication.SignOut%2A> ，并使用方法将用户重定向到登录页 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 。

 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage (string extraQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage(string extraQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage (extraQueryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage(System::String ^ extraQueryString);" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage extraQueryString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraQueryString" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="extraQueryString">要包含在重定向 URL 中的查询字符串。</param>
        <summary>将浏览器重定向到带有指定查询字符串的登录 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法将浏览器重定向到， <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 并包括 `extraQueryString` 作为 <xref:System.Management.ManagementQuery.QueryString%2A> 重定向 URL 的的值。

 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>方法不清除 forms 身份验证 cookie。 您可以将 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 方法与方法结合使用 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> 以记录一个用户，并允许其他用户登录。



## Examples
 下面的代码示例使用方法清除 forms 身份验证 cookie <xref:System.Web.Security.FormsAuthentication.SignOut%2A> ，并使用方法将用户重定向到登录页 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 。

 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signout2cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signout2vb.aspx#3)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="RenewTicketIfOld">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld(class System.Web.Security.FormsAuthenticationTicket tOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RenewTicketIfOld (tOld As FormsAuthenticationTicket) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ RenewTicketIfOld(System::Web::Security::FormsAuthenticationTicket ^ tOld);" />
      <MemberSignature Language="F#" Value="static member RenewTicketIfOld : System.Web.Security.FormsAuthenticationTicket -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.RenewTicketIfOld tOld" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tOld" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="tOld">要更新的 Forms 身份验证票证。</param>
        <summary>有条件地更新 <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> 的发出日期和时间以及过期日期和时间。</summary>
        <returns>已更新的 <see cref="T:System.Web.Security.FormsAuthenticationTicket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RenewTicketIfOld%2A> <xref:System.Web.Security.FormsAuthenticationTicket> 如果当前日期和时间减去 <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> 值大于 <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> 当前日期和时间，则方法将更新所提供的的过期日期和时间。

 将更新票证，并将 <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> 属性设置为当前日期和时间，并将 <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> 属性设置为当前日期和时间加上原始 <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> 值减去原始 <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> 值。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="RequireSSL">
      <MemberSignature Language="C#" Value="public static bool RequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequireSSL : bool" Usage="System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，指示 Forms 身份验证 Cookie 是否需要 SSL 以返回到服务器。</summary>
        <value>如果将 Forms 身份验证 Cookie 返回到服务器需要 SSL，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>属性值是在 ASP.NET 应用程序的配置文件中使用 `requireSSL` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。 你可以在 ASP.NET 应用程序的 Web.config 文件中指定 SSL (安全套接字层) 是否需要通过设置属性将 forms 身份验证 cookie 返回到服务器 `requireSSL` 。 有关详细信息，请参阅 <xref:System.Web.HttpCookie.Secure%2A>。

 如果你将配置 `requireSSL` 为 `false` ，则还可以将配置 `slidingExpiration` 为 `false` ，以减少票证有效的时间量。



## Examples
 下面的代码示例在 `requireSSL` Web.config 文件中设置特性。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    cookieless="UseCookies"
    requireSSL="true"
    path="/MyApplication" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为提供的用户名创建一个身份验证票证，并将该票证添加到响应的 Cookie 集合中或 URL 中（如果使用的是无 Cookie 身份验证）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>如果为，方法会向 cookie 集合或 URL 添加一个 forms 身份验证票证 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> `false` 。 Forms 身份验证票证向浏览器发出的下一个请求提供 forms 身份验证信息。 使用窗体身份验证 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 时，如果想要对用户进行身份验证，但仍保持对使用重定向的导航的控制，则可以使用方法。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197376">说明： ASP.NET 2.0 中的 Forms 身份验证</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197377">如何：在 ASP.NET 2.0 中使用成员资格</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">已验证的用户的名称。 这不必映射到 Windows 帐户。</param>
        <param name="createPersistentCookie">如果为 <see langword="true" />，则创建持久 Cookie（跨浏览器会话保存的 Cookie）；否则为 <see langword="false" />。</param>
        <summary>为提供的用户名创建一个身份验证票证，并将该票证添加到响应的 Cookie 集合中或 URL 中（如果使用的是无 Cookie 身份验证）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>如果为，方法会将 forms 身份验证票证添加到 cookie 集合或 URL 中 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> `false` 。 Forms 身份验证票证向浏览器发出的下一个请求提供 forms 身份验证信息。 使用窗体身份验证 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 时，如果想要对用户进行身份验证，但仍保持对使用重定向的导航的控制，则可以使用方法。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> 为 <see langword="true" />，而 <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> 为 <see langword="false" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">已验证的用户的名称。</param>
        <param name="createPersistentCookie">若要创建持久 Cookie（跨浏览器会话保存的 Cookie），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="strCookiePath">Forms 身份验证票证的 Cookie 路径。</param>
        <summary>为提供的用户名创建一个身份验证票证，并使用提供的 cookie 路径或使用 URL（如果使用的是无 Cookie 身份验证）将该票证添加到响应的 Cookie 集合中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>如果为，方法会向 cookie 集合或 URL 添加一个 forms 身份验证票证 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> `false` 。 Forms 身份验证票证向浏览器发出的下一个请求提供 forms 身份验证信息。 使用窗体身份验证 <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> 时，如果想要对用户进行身份验证，但仍保持对使用重定向的导航的控制，则可以使用方法。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> 为 <see langword="true" />，而 <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> 为 <see langword="false" />。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197376">说明： ASP.NET 2.0 中的 Forms 身份验证</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197377">如何：在 ASP.NET 2.0 中使用成员资格</related>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public static void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SignOut();" />
      <MemberSignature Language="F#" Value="static member SignOut : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从浏览器删除 Forms 身份验证票证。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.SignOut%2A>如果为，则方法将从 cookie 或 URL 中删除 forms 身份验证票证 <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> 信息 `false` 。 您可以将 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> 方法与方法结合使用 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 以记录一个用户，并允许其他用户登录。

 如果以独占方式在无 cookie 模式下运行，或者如果同时支持经过身份验证的用户和匿名用户，则应显式控制重定向到登录页，前提是需要特殊业务逻辑作为删除匿名标识符的结果来执行。

 <xref:System.Web.Security.FormsAuthentication.SignOut%2A>调用方法时，通过调用 <xref:System.Web.HttpResponse.Redirect%2A> 方法并 `endResponse` 将参数设置为，可以重定向到应用程序的登录页 `false` 。 在当前页面执行完毕之前，不会进行重定向操作，因此可以运行其他代码。 如果代码不包含显式重定向到其他页，则会将用户重定向到在应用程序的配置文件中配置的登录页。

 调用 <xref:System.Web.Security.FormsAuthentication.SignOut%2A> 方法只会删除 forms 身份验证 cookie。 Web 服务器不存储有效和过期的身份验证票证，以便以后进行比较。 如果恶意用户获得有效的 forms 身份验证 cookie，这会使你的站点容易遭受重播攻击。 若要在使用窗体身份验证 cookie 时提高安全性，应执行以下操作：

-   通过将属性设置为，将绝对过期用于窗体身份验证 cookie <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> `false` 。 这限制了可重播劫持 cookie 的窗口。

-   通过将 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> 属性设置为 `true` ，并在 ssl 下运行整个网站，只安全套接字层 (SSL) 上颁发和接受身份验证 cookie。 设置 <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> 属性以 `true` 确保 ASP.NET 不会通过非 SSL 连接将身份验证 cookie 发送到浏览器，但是客户端可能不会服从 cookie 上的安全设置。 这意味着客户端可能会通过非 SSL 连接发送 forms 身份验证 cookie，从而使其易于劫持。 可以通过在 SSL 下运行整个网站来阻止客户端以明文形式发送 forms 身份验证 cookie。

-   使用服务器上的永久存储来记录用户何时从网站注销，然后使用应用程序事件（例如 <xref:System.Web.HttpApplication.PostAuthenticateRequest> 事件）来确定当前用户是否已通过 forms 身份验证进行身份验证。 如果用户已通过 forms 身份验证进行身份验证，并且持久性存储区中的信息指示用户已注销，则立即清除身份验证 cookie，并将浏览器重定向回登录页。 成功登录后，更新存储以反映用户已登录。 使用此方法时，应用程序必须跟踪用户的登录状态，并且必须强制空闲用户注销。



## Examples
 下面的代码示例使用方法清除 forms 身份验证 cookie <xref:System.Web.Security.FormsAuthentication.SignOut%2A> ，并使用方法将用户重定向到登录页 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> 。

 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197376">说明： ASP.NET 2.0 中的 Forms 身份验证</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=197377">如何：在 ASP.NET 2.0 中使用成员资格</related>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool SlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SlidingExpiration : bool" Usage="System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否启用弹性过期时间。</summary>
        <value>如果启用可调过期，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>属性值是使用 `slidingExpiration` [forms](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/1d3t3c61(v%3dvs.100))配置元素的属性设置的。

 如果发出了请求并且超过了一半的超时时间间隔，则滑动过期会重置有效身份验证 cookie 的过期时间。 如果 cookie 过期，用户必须重新进行身份验证。 将 <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> 属性设置为 `false` 可以通过基于配置的值限制身份验证 cookie 的有效时间，从而提高应用程序的安全性 `timeout` 。

 我们建议，如果你将配置 `requireSSL` 为 `false` ，则还可以将配置 `slidingExpiration` 为 `false` ，以缩短票证的有效时间。



## Examples
 下面的代码示例将 `slidingExpiration` `false` ASP.NET 应用程序的 Web.config 文件中的特性设置为。

```
<authentication mode="Forms">
  <forms loginUrl="member_login.aspx"
    name=".ASPXFORMSAUTH"
    cookieless="UseCookies"
    requireSSL="true"
    slidingExpiration="false" />
</authentication>
```

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)">ASP.NET Web 应用程序安全性</related>
      </Docs>
    </Member>
    <Member MemberName="TicketCompatibilityMode">
      <MemberSignature Language="C#" Value="public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TicketCompatibilityMode As TicketCompatibilityMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Configuration::TicketCompatibilityMode TicketCompatibilityMode { System::Web::Configuration::TicketCompatibilityMode get(); };" />
      <MemberSignature Language="F#" Value="member this.TicketCompatibilityMode : System.Web.Configuration.TicketCompatibilityMode" Usage="System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TicketCompatibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个指示是否使用于票证到期日期的“使用协调世界时” (UTC) 或本地时间的值。</summary>
        <value>一个值，该值指示对于票证到期日期使用协调世界时间 (UTC) 还是本地时间。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public static TimeSpan Timeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan Timeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan" Usage="System.Web.Security.FormsAuthentication.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取身份验证票证到期前的时间量。</summary>
        <value>在身份验证票证到期之前的时间。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
