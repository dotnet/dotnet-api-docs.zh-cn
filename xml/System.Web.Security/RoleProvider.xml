<Type Name="RoleProvider" FullName="System.Web.Security.RoleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="38fa16546894ea751c730154e85dbcda53a49db5" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89957615" /></Metadata><TypeSignature Language="C#" Value="public abstract class RoleProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RoleProvider extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.RoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RoleProvider&#xA;Inherits ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoleProvider abstract : System::Configuration::Provider::ProviderBase" />
  <TypeSignature Language="F#" Value="type RoleProvider = class&#xA;    inherit ProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web.ApplicationServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Web" FromVersion="4.0.0.0" To="System.Web.ApplicationServices" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义 ASP.NET 为使用自定义角色提供程序提供角色管理服务而实现的协定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 角色管理旨在使你能够轻松地为 ASP.NET 应用程序使用多个不同的角色提供程序。 您可以使用 .NET Framework 附带的提供的角色提供程序，也可以实现您自己的提供程序。  
  
 实现自定义角色提供程序时，需要继承 <xref:System.Web.Security.RoleProvider> 抽象类。  
  
 创建自定义角色提供程序的主要原因有两个。  
  
-   您需要将角色信息存储在 .NET Framework 中包含的角色提供程序不支持的数据源中，如 FoxPro 数据库、Oracle 数据库或其他数据源。  
  
-   需要使用与 .NET Framework 附带的提供程序所使用的数据库架构不同的数据库架构来管理角色信息。 这种情况的一个常见示例是公司或网站的 SQL Server 数据库中已存在的角色数据。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Security.RoleProvider" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不需要为继承抽象类的类实现构造函数 <xref:System.Web.Security.RoleProvider> 。 实现的初始化值 <xref:System.Web.Security.RoleProvider> 将传递给 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> 方法实现。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public abstract void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="abstract member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="roleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">要添加到指定的角色的用户名的字符串数组。</param>
        <param name="roleNames">要添加指定的用户名的角色名称的字符串数组。</param>
        <summary>向配置的 <see langword="applicationName" /> 的指定角色添加指定的用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.AddUsersToRoles%2A> 由 <xref:System.Web.Security.Roles> 类调用，以将指定用户与数据源中的指定角色关联。 角色将添加到已配置的 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 如果未找到配置的任何指定角色名称 `applicationName` ，则建议提供程序引发 <xref:System.Configuration.Provider.ProviderException> 。  
  
 如果任何指定的用户名与所配置的任何指定的角色名称都不关联 `applicationName` ，则建议提供程序引发 <xref:System.Configuration.Provider.ProviderException> 。  
  
 如果任何指定的用户名为或为 `null` 空字符串，则建议提供程序引发异常。  
  
 如果任何指定的角色名称为 `null` 或为空字符串，则建议提供程序引发异常。  
  
 如果你的数据源支持事务，则建议你将每个 add 操作包含在一个事务中，并在任何添加操作失败的情况下回滚该事务并引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.AddUsersToRoles%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#2)]
 [!code-vb[System.Web.Security.IRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public abstract string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.RoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要存储和检索其角色信息的应用程序的名称。</summary>
        <value>要存储和检索其角色信息的应用程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.ApplicationName%2A>由 <xref:System.Web.Security.Roles> 类用于将用户和角色与不同的应用程序相关联。 这使多个应用程序能够使用同一个数据库来存储用户和角色信息，而不会在重复用户名或角色名称之间发生冲突。 多个 ASP.NET 应用程序可以通过在属性中指定相同的值来使用相同的数据库 <xref:System.Web.Security.Roles.ApplicationName%2A> 。 <xref:System.Web.Security.Roles.ApplicationName%2A>可以通过编程方式设置该属性，也可以使用属性在 Web 应用程序的配置文件中以声明方式设置该属性 `applicationName` 。  
  
 如果未 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 指定属性，则建议 <xref:System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath%2A> 使用属性值。  
  
   
  
## Examples  
 下面的代码示例演示了属性的示例实现 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#1)]
 [!code-vb[System.Web.Security.IRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public abstract void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="abstract member CreateRole : string -&gt; unit" Usage="roleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要创建的角色的名称。</param>
        <summary>针对已配置的 <see langword="applicationName" />，将一个新角色添加到数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.CreateRole%2A> 由 <xref:System.Web.Security.Roles.CreateRole%2A> 类的方法调用 <xref:System.Web.Security.Roles> ，以将指定的角色添加到已配置的的数据源 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 如果已为配置的指定角色名称 `applicationName` ，为或为 `null` 空字符串，则建议提供程序引发异常。  
  
 如果指定的角色名称包含逗号，则建议提供程序引发异常。  
  
 如果您的数据源限制角色名称的长度（例如，通过数据库中表的固定长度列），则建议您在角色名称超出数据源所允许的最大长度时引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.CreateRole%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#3)]
 [!code-vb[System.Web.Security.IRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public abstract bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="abstract member DeleteRole : string * bool -&gt; bool" Usage="roleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <param name="throwOnPopulatedRole">若为 <see langword="true" />，则在 <paramref name="roleName" /> 具有一个或多个成员时引发异常，且不删除 <paramref name="roleName" />。</param>
        <summary>从数据源中删除已配置的 <see langword="applicationName" /> 的一个角色。</summary>
        <returns>若已成功删除此角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> 由 <xref:System.Web.Security.Roles.DeleteRole%2A> 和类的方法调用， <xref:System.Web.Security.Roles.DeleteRole%2A> <xref:System.Web.Security.Roles> 以从配置的的数据源中删除指定的角色 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 当你从数据源中删除某个角色时，请确保你还删除了已配置的用户名和已删除角色之间的任何关联 `applicationName` 。  
  
 如果 `throwOnPopulatedRole` 为 `true` ，并且由参数标识的角色 `roleName` 具有一个或多个成员，则 <xref:System.Configuration.Provider.ProviderException> 会引发，而不会删除该角色。 如果 `throwOnPopulatedRole` 为 `false` ，则删除角色（无论是否为空）。  
  
 如果指定的角色名称不存在、为 `null` 或为空字符串，则建议提供程序引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#4)]
 [!code-vb[System.Web.Security.IRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public abstract string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="abstract member FindUsersInRole : string * string -&gt; string[]" Usage="roleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作为搜索范围的角色。</param>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>获取属于某个角色且与指定的用户名相匹配的用户名的数组。</summary>
        <returns>一个字符串数组，包含用户名与 <paramref name="usernameToMatch" /> 匹配且用户是指定角色的成员的所有用户的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.FindUsersInRole%2A>方法由 <xref:System.Web.Security.Roles> 类调用，并返回一个角色中用户的列表，其中用户名包含为配置的提供的的匹配项 `usernameToMatch` `applicationName` 。 通配符支持包含在数据源的基础上。 按用户名按字母顺序返回用户。  
  
 建议您在 <xref:System.Configuration.Provider.ProviderException> `roleName` 数据源中不存在时引发。  
  
   
  
## Examples  
 下面的代码示例演示了一个示例 <xref:System.Web.Security.RoleProvider.FindUsersInRole%2A> 实现。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#11)]
 [!code-vb[System.Web.Security.IRoleProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public abstract string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="abstract member GetAllRoles : unit -&gt; string[]" Usage="roleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取已配置的 <see langword="applicationName" /> 的全部角色列表。</summary>
        <returns>一个字符串数组，它包含已配置的 <see langword="applicationName" /> 的数据源中所存储的全部角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A> 由 <xref:System.Web.Security.Roles.GetAllRoles%2A> 类的方法调用 <xref:System.Web.Security.Roles> ，以从数据源中检索角色名称的列表。 仅检索指定的角色 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 如果配置的不存在任何角色 `applicationName` ，则建议提供程序返回不包含任何元素的字符串数组。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#5)]
 [!code-vb[System.Web.Security.IRoleProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public abstract string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="abstract member GetRolesForUser : string -&gt; string[]" Usage="roleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其返回角色列表的用户。</param>
        <summary>获取已配置的 <see langword="applicationName" /> 中指定用户所属的角色的列表。</summary>
        <returns>一个字符串数组，其中包含已配置的 <see langword="applicationName" /> 中指定用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A> 由 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 类的方法调用 <xref:System.Web.Security.Roles> ，以从数据源中检索指定用户关联的角色名称。 仅检索配置的角色 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 如果为配置的指定用户不存在任何角色 `applicationName` ，则建议提供程序返回不包含任何元素的字符串数组。  
  
 如果指定的用户名为 `null` 或为空字符串，则建议提供程序引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#6)]
 [!code-vb[System.Web.Security.IRoleProvider#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public abstract string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="abstract member GetUsersInRole : string -&gt; string[]" Usage="roleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要获取其用户列表的角色的名称。</param>
        <summary>获取属于已配置 <see langword="applicationName" /> 的指定角色的用户的列表。</summary>
        <returns>一个字符串数组，其中包含属于已配置 <see langword="applicationName" /> 的指定角色的成员的所有用户名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> 由 <xref:System.Web.Security.Roles.GetUsersInRole%2A> 类的方法调用 <xref:System.Web.Security.Roles> ，以检索与数据源中的角色关联的用户名。 仅检索配置的角色 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 如果为配置的指定角色名称不存在 `applicationName` ，或者如果为 `null` 或空字符串，则建议提供程序引发异常。  
  
 如果没有任何用户与配置的的指定角色关联 `applicationName` ，则建议提供程序返回不包含任何元素的字符串数组。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#7)]
 [!code-vb[System.Web.Security.IRoleProvider#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public abstract bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="abstract member IsUserInRole : string * string -&gt; bool" Usage="roleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要搜索的用户名。</param>
        <param name="roleName">作为搜索范围的角色。</param>
        <summary>获取一个值，该值指示指定用户是否属于已配置的 <see langword="applicationName" /> 的指定角色。</summary>
        <returns>如果指定用户属于已配置的 <see langword="applicationName" /> 的指定角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A>方法由类的方法调用 <xref:System.Web.Security.Roles.IsUserInRole%2A> <xref:System.Web.Security.Roles> ，以确定当前登录用户是否与配置的的数据源中的角色关联 <xref:System.Web.Security.Roles.ApplicationName%2A> 。  
  
 如果指定的用户名为 `null` 或为空字符串，则建议提供程序引发异常。  
  
 如果指定的角色名称为 `null` 或为空字符串，则建议提供程序引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#8)]
 [!code-vb[System.Web.Security.IRoleProvider#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public abstract void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="abstract member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="roleProvider.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定的角色移除的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户名从中移除的角色的名称。</param>
        <summary>从适用于配置的 <see langword="applicationName" /> 的指定的角色移除指定的用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.RemoveUsersFromRoles%2A> 由类的 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> 、 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> 、 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 和方法调用， <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> <xref:System.Web.Security.Roles> 以从数据源的指定角色中移除指定的用户。 仅修改已配置的角色 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> 。  
  
 如果未找到配置的任何指定角色名称 `applicationName` ，则建议提供程序引发 <xref:System.Configuration.Provider.ProviderException> 。  
  
 如果任何指定的用户名与所配置的任何指定的角色名称都不关联 `applicationName` ，则建议提供程序引发 <xref:System.Configuration.Provider.ProviderException> 。  
  
 如果任何指定的用户名为或为 `null` 空字符串，则建议提供程序引发异常。  
  
 如果任何指定的角色名称为 `null` 或为空字符串，则建议提供程序引发异常。  
  
 如果你的数据源支持事务，则建议你将每个删除操作包含在一个事务中，并在任何删除操作失败的情况下回滚该事务并引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.RemoveUsersFromRoles%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#9)]
 [!code-vb[System.Web.Security.IRoleProvider#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public abstract bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="abstract member RoleExists : string -&gt; bool" Usage="roleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要在数据源中搜索的角色名。</param>
        <summary>获取一个值，该值指示配置后的 <see langword="applicationName" /> 的角色数据源中是否已存在指定的角色名。</summary>
        <returns>如果配置后的 <see langword="applicationName" /> 的数据源中已存在角色名，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.RoleProvider.RoleExists%2A> 由 <xref:System.Web.Security.Roles.RoleExists%2A> 类的方法调用 <xref:System.Web.Security.Roles> ，以确定配置的的数据源中是否存在角色名称 <xref:System.Web.Security.Roles.ApplicationName%2A> 。  
  
 如果指定的角色名称为 `null` 或为空字符串，则建议提供程序引发异常。  
  
   
  
## Examples  
 下面的代码示例演示方法的示例实现 <xref:System.Web.Security.RoleProvider.RoleExists%2A> 。  
  
 [!code-csharp[System.Web.Security.IRoleProvider#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#10)]
 [!code-vb[System.Web.Security.IRoleProvider#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/8fw7xh74(v=vs.100)">实现角色提供程序</related>
      </Docs>
    </Member>
  </Members>
</Type>
